
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdBylaw.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_BYLAW' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdBylawBase : EntityBase, IEdBylaw, IEntityId<EdBylawKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdBylawEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdBylawEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdBylawEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdBylaw> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdBylawEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdBylawEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdBylawBase"/> instance.
		///</summary>
		public EdBylawBase()
		{
			this.entityData = new EdBylawEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdBylawBase"/> instance.
		///</summary>
		///<param name="_edBylawId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_currentFlg"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_asCodeDegreeClassId">UG  - PG</param>
		///<param name="_closedFlg"></param>
		///<param name="_plcyAbsLvlFlg"></param>
		///<param name="_notes"></param>
		///<param name="_asCodeDegreeId">مسلسل الدرجة العلمية</param>
		///<param name="_entMainId"></param>
		///<param name="_edtonNum"></param>
		///<param name="_audtNote"></param>
		///<param name="_edCodeStudyMethodId"></param>
		///<param name="_accumGrdngTypeFlg">Tab Accum Grading
		/// 		/// 0> credit point   1:5 /
		/// 		/// 1> percent  1:101</param>
		///<param name="_crsGrdngTypeFlg">Tab Course Grading
		/// 		/// 0>    مجموع المقرر   0:max course degree
		/// 		/// 1> percent  1:101
		/// 		/// 
		/// 		/// Policy Assess total /percent
		/// 		/// 
		/// 		/// (when add new bylaw set default=1)</param>
		///<param name="_plcyLoadCalcFlg">nul,0  >ACCUM_GPA default all univ
		/// 		/// 1        >SEM_GPA (last active semester)</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public EdBylawBase(System.Decimal _edBylawId, System.Decimal _edAcadYearId, System.Decimal _currentFlg, 
			System.Decimal? _asFacultyInfoId, System.Decimal _asCodeDegreeClassId, System.Decimal _closedFlg, 
			System.Decimal? _plcyAbsLvlFlg, System.String _notes, System.Decimal? _asCodeDegreeId, System.Decimal? _entMainId, 
			System.String _edtonNum, System.String _audtNote, System.Decimal? _edCodeStudyMethodId, System.Decimal? _accumGrdngTypeFlg, 
			System.Decimal? _crsGrdngTypeFlg, System.Int32? _plcyLoadCalcFlg, System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			this.entityData = new EdBylawEntityData();
			this.backupData = null;

			this.EdBylawId = _edBylawId;
			this.EdAcadYearId = _edAcadYearId;
			this.CurrentFlg = _currentFlg;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.AsCodeDegreeClassId = _asCodeDegreeClassId;
			this.ClosedFlg = _closedFlg;
			this.PlcyAbsLvlFlg = _plcyAbsLvlFlg;
			this.Notes = _notes;
			this.AsCodeDegreeId = _asCodeDegreeId;
			this.EntMainId = _entMainId;
			this.EdtonNum = _edtonNum;
			this.AudtNote = _audtNote;
			this.EdCodeStudyMethodId = _edCodeStudyMethodId;
			this.AccumGrdngTypeFlg = _accumGrdngTypeFlg;
			this.CrsGrdngTypeFlg = _crsGrdngTypeFlg;
			this.PlcyLoadCalcFlg = _plcyLoadCalcFlg;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdBylaw"/> instance.
		///</summary>
		///<param name="_edBylawId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_currentFlg"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_asCodeDegreeClassId">UG  - PG</param>
		///<param name="_closedFlg"></param>
		///<param name="_plcyAbsLvlFlg"></param>
		///<param name="_notes"></param>
		///<param name="_asCodeDegreeId">مسلسل الدرجة العلمية</param>
		///<param name="_entMainId"></param>
		///<param name="_edtonNum"></param>
		///<param name="_audtNote"></param>
		///<param name="_edCodeStudyMethodId"></param>
		///<param name="_accumGrdngTypeFlg">Tab Accum Grading
		/// 		/// 0> credit point   1:5 /
		/// 		/// 1> percent  1:101</param>
		///<param name="_crsGrdngTypeFlg">Tab Course Grading
		/// 		/// 0>    مجموع المقرر   0:max course degree
		/// 		/// 1> percent  1:101
		/// 		/// 
		/// 		/// Policy Assess total /percent
		/// 		/// 
		/// 		/// (when add new bylaw set default=1)</param>
		///<param name="_plcyLoadCalcFlg">nul,0  >ACCUM_GPA default all univ
		/// 		/// 1        >SEM_GPA (last active semester)</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static EdBylaw CreateEdBylaw(System.Decimal _edBylawId, System.Decimal _edAcadYearId, System.Decimal _currentFlg, 
			System.Decimal? _asFacultyInfoId, System.Decimal _asCodeDegreeClassId, System.Decimal _closedFlg, 
			System.Decimal? _plcyAbsLvlFlg, System.String _notes, System.Decimal? _asCodeDegreeId, System.Decimal? _entMainId, 
			System.String _edtonNum, System.String _audtNote, System.Decimal? _edCodeStudyMethodId, System.Decimal? _accumGrdngTypeFlg, 
			System.Decimal? _crsGrdngTypeFlg, System.Int32? _plcyLoadCalcFlg, System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			EdBylaw newEdBylaw = new EdBylaw();
			newEdBylaw.EdBylawId = _edBylawId;
			newEdBylaw.EdAcadYearId = _edAcadYearId;
			newEdBylaw.CurrentFlg = _currentFlg;
			newEdBylaw.AsFacultyInfoId = _asFacultyInfoId;
			newEdBylaw.AsCodeDegreeClassId = _asCodeDegreeClassId;
			newEdBylaw.ClosedFlg = _closedFlg;
			newEdBylaw.PlcyAbsLvlFlg = _plcyAbsLvlFlg;
			newEdBylaw.Notes = _notes;
			newEdBylaw.AsCodeDegreeId = _asCodeDegreeId;
			newEdBylaw.EntMainId = _entMainId;
			newEdBylaw.EdtonNum = _edtonNum;
			newEdBylaw.AudtNote = _audtNote;
			newEdBylaw.EdCodeStudyMethodId = _edCodeStudyMethodId;
			newEdBylaw.AccumGrdngTypeFlg = _accumGrdngTypeFlg;
			newEdBylaw.CrsGrdngTypeFlg = _crsGrdngTypeFlg;
			newEdBylaw.PlcyLoadCalcFlg = _plcyLoadCalcFlg;
			newEdBylaw.SeUserId = _seUserId;
			newEdBylaw.LastDate = _lastDate;
			return newEdBylaw;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdBylawId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdBylawId
		{
			get
			{
				return this.entityData.EdBylawId; 
			}
			
			set
			{
				if (this.entityData.EdBylawId == value)
					return;
					
				OnColumnChanging(EdBylawColumn.EdBylawId, this.entityData.EdBylawId);
				this.entityData.EdBylawId = value;
				this.EntityId.EdBylawId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdBylawColumn.EdBylawId, this.entityData.EdBylawId);
				OnPropertyChanged("EdBylawId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_BYLAW_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ED_BYLAW_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdBylawId
		{
			get { return this.entityData.OriginalEdBylawId; }
			set { this.entityData.OriginalEdBylawId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(EdBylawColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdBylawColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CurrentFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal CurrentFlg
		{
			get
			{
				return this.entityData.CurrentFlg; 
			}
			
			set
			{
				if (this.entityData.CurrentFlg == value)
					return;
					
				OnColumnChanging(EdBylawColumn.CurrentFlg, this.entityData.CurrentFlg);
				this.entityData.CurrentFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdBylawColumn.CurrentFlg, this.entityData.CurrentFlg);
				OnPropertyChanged("CurrentFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(EdBylawColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdBylawColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeClassId property. 
		///		UG  - PG
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"UG  - PG"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsCodeDegreeClassId
		{
			get
			{
				return this.entityData.AsCodeDegreeClassId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeClassId == value)
					return;
					
				OnColumnChanging(EdBylawColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				this.entityData.AsCodeDegreeClassId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdBylawColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				OnPropertyChanged("AsCodeDegreeClassId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ClosedFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ClosedFlg
		{
			get
			{
				return this.entityData.ClosedFlg; 
			}
			
			set
			{
				if (this.entityData.ClosedFlg == value)
					return;
					
				OnColumnChanging(EdBylawColumn.ClosedFlg, this.entityData.ClosedFlg);
				this.entityData.ClosedFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdBylawColumn.ClosedFlg, this.entityData.ClosedFlg);
				OnPropertyChanged("ClosedFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PlcyAbsLvlFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPlcyAbsLvlFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PlcyAbsLvlFlg
		{
			get
			{
				return this.entityData.PlcyAbsLvlFlg; 
			}
			
			set
			{
				if (this.entityData.PlcyAbsLvlFlg == value)
					return;
					
				OnColumnChanging(EdBylawColumn.PlcyAbsLvlFlg, this.entityData.PlcyAbsLvlFlg);
				this.entityData.PlcyAbsLvlFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdBylawColumn.PlcyAbsLvlFlg, this.entityData.PlcyAbsLvlFlg);
				OnPropertyChanged("PlcyAbsLvlFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 300)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(EdBylawColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdBylawColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeId property. 
		///		مسلسل الدرجة العلمية
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مسلسل الدرجة العلمية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeId
		{
			get
			{
				return this.entityData.AsCodeDegreeId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeId == value)
					return;
					
				OnColumnChanging(EdBylawColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				this.entityData.AsCodeDegreeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdBylawColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				OnPropertyChanged("AsCodeDegreeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntMainId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntMainIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntMainId
		{
			get
			{
				return this.entityData.EntMainId; 
			}
			
			set
			{
				if (this.entityData.EntMainId == value)
					return;
					
				OnColumnChanging(EdBylawColumn.EntMainId, this.entityData.EntMainId);
				this.entityData.EntMainId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdBylawColumn.EntMainId, this.entityData.EntMainId);
				OnPropertyChanged("EntMainId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdtonNum property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String EdtonNum
		{
			get
			{
				return this.entityData.EdtonNum; 
			}
			
			set
			{
				if (this.entityData.EdtonNum == value)
					return;
					
				OnColumnChanging(EdBylawColumn.EdtonNum, this.entityData.EdtonNum);
				this.entityData.EdtonNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdBylawColumn.EdtonNum, this.entityData.EdtonNum);
				OnPropertyChanged("EdtonNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AudtNote property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String AudtNote
		{
			get
			{
				return this.entityData.AudtNote; 
			}
			
			set
			{
				if (this.entityData.AudtNote == value)
					return;
					
				OnColumnChanging(EdBylawColumn.AudtNote, this.entityData.AudtNote);
				this.entityData.AudtNote = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdBylawColumn.AudtNote, this.entityData.AudtNote);
				OnPropertyChanged("AudtNote");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeStudyMethodId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeStudyMethodIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeStudyMethodId
		{
			get
			{
				return this.entityData.EdCodeStudyMethodId; 
			}
			
			set
			{
				if (this.entityData.EdCodeStudyMethodId == value)
					return;
					
				OnColumnChanging(EdBylawColumn.EdCodeStudyMethodId, this.entityData.EdCodeStudyMethodId);
				this.entityData.EdCodeStudyMethodId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdBylawColumn.EdCodeStudyMethodId, this.entityData.EdCodeStudyMethodId);
				OnPropertyChanged("EdCodeStudyMethodId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccumGrdngTypeFlg property. 
		///		Tab Accum Grading
		/// 		/// 0> credit point   1:5 /
		/// 		/// 1> percent  1:101
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAccumGrdngTypeFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Tab Accum Grading 0> credit point   1:5 / 1> percent  1:101"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AccumGrdngTypeFlg
		{
			get
			{
				return this.entityData.AccumGrdngTypeFlg; 
			}
			
			set
			{
				if (this.entityData.AccumGrdngTypeFlg == value)
					return;
					
				OnColumnChanging(EdBylawColumn.AccumGrdngTypeFlg, this.entityData.AccumGrdngTypeFlg);
				this.entityData.AccumGrdngTypeFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdBylawColumn.AccumGrdngTypeFlg, this.entityData.AccumGrdngTypeFlg);
				OnPropertyChanged("AccumGrdngTypeFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CrsGrdngTypeFlg property. 
		///		Tab Course Grading
		/// 		/// 0>    مجموع المقرر   0:max course degree
		/// 		/// 1> percent  1:101
		/// 		/// 
		/// 		/// Policy Assess total /percent
		/// 		/// 
		/// 		/// (when add new bylaw set default=1)
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCrsGrdngTypeFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Tab Course Grading 0>    مجموع المقرر   0:max course degree 1> percent  1:101  Policy Assess total /percent  (when add new bylaw set default=1)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CrsGrdngTypeFlg
		{
			get
			{
				return this.entityData.CrsGrdngTypeFlg; 
			}
			
			set
			{
				if (this.entityData.CrsGrdngTypeFlg == value)
					return;
					
				OnColumnChanging(EdBylawColumn.CrsGrdngTypeFlg, this.entityData.CrsGrdngTypeFlg);
				this.entityData.CrsGrdngTypeFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdBylawColumn.CrsGrdngTypeFlg, this.entityData.CrsGrdngTypeFlg);
				OnPropertyChanged("CrsGrdngTypeFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PlcyLoadCalcFlg property. 
		///		nul,0  >ACCUM_GPA default all univ
		/// 		/// 1        >SEM_GPA (last active semester)
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPlcyLoadCalcFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"nul,0  >ACCUM_GPA default all univ 1        >SEM_GPA (last active semester)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PlcyLoadCalcFlg
		{
			get
			{
				return this.entityData.PlcyLoadCalcFlg; 
			}
			
			set
			{
				if (this.entityData.PlcyLoadCalcFlg == value)
					return;
					
				OnColumnChanging(EdBylawColumn.PlcyLoadCalcFlg, this.entityData.PlcyLoadCalcFlg);
				this.entityData.PlcyLoadCalcFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdBylawColumn.PlcyLoadCalcFlg, this.entityData.PlcyLoadCalcFlg);
				OnPropertyChanged("PlcyLoadCalcFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(EdBylawColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdBylawColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(EdBylawColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdBylawColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return entityData.AsCodeDegreeIdSource; }
            set { entityData.AsCodeDegreeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return entityData.AsCodeDegreeClassIdSource; }
            set { entityData.AsCodeDegreeClassIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeStudyMethod"/>.
		/// </summary>
		/// <value>The source EdCodeStudyMethod for EdCodeStudyMethodId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeStudyMethod EdCodeStudyMethodIdSource
      	{
            get { return entityData.EdCodeStudyMethodIdSource; }
            set { entityData.EdCodeStudyMethodIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return entityData.EntMainIdSource; }
            set { entityData.EntMainIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeUser SeUserIdSource
      	{
            get { return entityData.SeUserIdSource; }
            set { entityData.SeUserIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EntPolicyExcuse objects
		///	which are related to this object through the relation FK_ENT_POLICY_EXCUSE_ED_BYLAW
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolicyExcuse> EntPolicyExcuseCollection
		{
			get { return entityData.EntPolicyExcuseCollection; }
			set { entityData.EntPolicyExcuseCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPolicyCourseRepeat objects
		///	which are related to this object through the relation FK_ENT_POLICY_COURSE_REPEAT_ED_BYLAW
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolicyCourseRepeat> EntPolicyCourseRepeatCollection
		{
			get { return entityData.EntPolicyCourseRepeatCollection; }
			set { entityData.EntPolicyCourseRepeatCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudIntTrnsStateTo objects
		///	which are related to this object through the relation FK_ED_STUD_INT_TRNS_STATE_TO_ED_BYLAW1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudIntTrnsStateTo> EdStudIntTrnsStateToCollectionGetByEdBylawIdTo
		{
			get { return entityData.EdStudIntTrnsStateToCollectionGetByEdBylawIdTo; }
			set { entityData.EdStudIntTrnsStateToCollectionGetByEdBylawIdTo = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPolcyCrsRetake objects
		///	which are related to this object through the relation FK_ENT_POLCY_CRS_RETAKE_ED_BYLAW
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolcyCrsRetake> EntPolcyCrsRetakeCollection
		{
			get { return entityData.EntPolcyCrsRetakeCollection; }
			set { entityData.EntPolcyCrsRetakeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPolicySemHonor objects
		///	which are related to this object through the relation FK_ENT_POLICY_SEM_HONOR_ED_BYLAW
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolicySemHonor> EntPolicySemHonorCollection
		{
			get { return entityData.EntPolicySemHonorCollection; }
			set { entityData.EntPolicySemHonorCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudIntTrnsStateFrom objects
		///	which are related to this object through the relation FK_ED_STUD_INT_TRNS_STATE_FROM_ED_BYLAW
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudIntTrnsStateFrom> EdStudIntTrnsStateFromCollectionGetByEdBylawIdFrom
		{
			get { return entityData.EdStudIntTrnsStateFromCollectionGetByEdBylawIdFrom; }
			set { entityData.EdStudIntTrnsStateFromCollectionGetByEdBylawIdFrom = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPolcyGrdngHdr objects
		///	which are related to this object through the relation FK_ENT_POLCY_GRDNG_HDR_ED_BYLAW
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolcyGrdngHdr> EntPolcyGrdngHdrCollection
		{
			get { return entityData.EntPolcyGrdngHdrCollection; }
			set { entityData.EntPolcyGrdngHdrCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPolcyGpa objects
		///	which are related to this object through the relation FK_ENT_POLCY_GPA_ED_BYLAW
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolcyGpa> EntPolcyGpaCollection
		{
			get { return entityData.EntPolcyGpaCollection; }
			set { entityData.EntPolcyGpaCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPolicyGradingLevel objects
		///	which are related to this object through the relation FK_ENT_POLICY_GRADING_LEVEL_ED_BYLAW
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolicyGradingLevel> EntPolicyGradingLevelCollection
		{
			get { return entityData.EntPolicyGradingLevelCollection; }
			set { entityData.EntPolicyGradingLevelCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPolicyAbsence objects
		///	which are related to this object through the relation FK_ENT_POLICY_ABSENCE_ED_BYLAW
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolicyAbsence> EntPolicyAbsenceCollection
		{
			get { return entityData.EntPolicyAbsenceCollection; }
			set { entityData.EntPolicyAbsenceCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPolicyObserved objects
		///	which are related to this object through the relation FK_ENT_POLICY_OBSERVED_ED_BYLAW
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolicyObserved> EntPolicyObservedCollection
		{
			get { return entityData.EntPolicyObservedCollection; }
			set { entityData.EntPolicyObservedCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudFaculty objects
		///	which are related to this object through the relation FK_ED_STUD_FACULTY_ED_BYLAW
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudFaculty> EdStudFacultyCollection
		{
			get { return entityData.EdStudFacultyCollection; }
			set { entityData.EdStudFacultyCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPolicyLoad objects
		///	which are related to this object through the relation FK_ENT_POLICY_LOAD_ED_BYLAW
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolicyLoad> EntPolicyLoadCollection
		{
			get { return entityData.EntPolicyLoadCollection; }
			set { entityData.EntPolicyLoadCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudIntTrnsStateFrom objects
		///	which are related to this object through the relation FK_ED_STUD_INT_TRNS_STATE_FROM_ED_BYLAW1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudIntTrnsStateFrom> EdStudIntTrnsStateFromCollectionGetByEdBylawIdTo
		{
			get { return entityData.EdStudIntTrnsStateFromCollectionGetByEdBylawIdTo; }
			set { entityData.EdStudIntTrnsStateFromCollectionGetByEdBylawIdTo = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPolicyGradingHdr objects
		///	which are related to this object through the relation FK_ENT_POLICY_GRADING_HDR_ED_BYLAW
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolicyGradingHdr> EntPolicyGradingHdrCollection
		{
			get { return entityData.EntPolicyGradingHdrCollection; }
			set { entityData.EntPolicyGradingHdrCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPlcyAcadWarn objects
		///	which are related to this object through the relation FK_ENT_POLICY_ACAD_WARN_ED_BYLAW
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPlcyAcadWarn> EntPlcyAcadWarnCollection
		{
			get { return entityData.EntPlcyAcadWarnCollection; }
			set { entityData.EntPlcyAcadWarnCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPolicyCourseChng objects
		///	which are related to this object through the relation FK_ENT_POLICY_COURSE_CHNG_ED_BYLAW
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolicyCourseChng> EntPolicyCourseChngCollection
		{
			get { return entityData.EntPolicyCourseChngCollection; }
			set { entityData.EntPolicyCourseChngCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPolicyAssessHdr objects
		///	which are related to this object through the relation FK_ENT_POLICY_ASSESS_HDR_ED_BYLAW
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolicyAssessHdr> EntPolicyAssessHdrCollection
		{
			get { return entityData.EntPolicyAssessHdrCollection; }
			set { entityData.EntPolicyAssessHdrCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudIntTrnsStateTo objects
		///	which are related to this object through the relation FK_ED_STUD_INT_TRNS_STATE_TO_ED_BYLAW
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudIntTrnsStateTo> EdStudIntTrnsStateToCollectionGetByEdBylawIdFrom
		{
			get { return entityData.EdStudIntTrnsStateToCollectionGetByEdBylawIdFrom; }
			set { entityData.EdStudIntTrnsStateToCollectionGetByEdBylawIdFrom = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPolicyAccumHonor objects
		///	which are related to this object through the relation FK_ENT_POLICY_ACCUM_HONOR_ED_BYLAW
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolicyAccumHonor> EntPolicyAccumHonorCollection
		{
			get { return entityData.EntPolicyAccumHonorCollection; }
			set { entityData.EntPolicyAccumHonorCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 300));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EdtonNum", "Edton Num", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AudtNote", "Audt Note", 200));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_BYLAW"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_BYLAW_ID", "ED_ACAD_YEAR_ID", "CURRENT_FLG", "AS_FACULTY_INFO_ID", "AS_CODE_DEGREE_CLASS_ID", "CLOSED_FLG", "PLCY_ABS_LVL_FLG", "NOTES", "AS_CODE_DEGREE_ID", "ENT_MAIN_ID", "EDTON_NUM", "AUDT_NOTE", "ED_CODE_STUDY_METHOD_ID", "ACCUM_GRDNG_TYPE_FLG", "CRS_GRDNG_TYPE_FLG", "PLCY_LOAD_CALC_FLG", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdBylawEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdBylaw) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdBylaw>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdBylaw);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdBylaw Entity 
		///</summary>
		protected virtual EdBylaw Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdBylaw copy = new EdBylaw();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdBylawId = this.EdBylawId;
					copy.OriginalEdBylawId = this.OriginalEdBylawId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.CurrentFlg = this.CurrentFlg;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
				copy.ClosedFlg = this.ClosedFlg;
				copy.PlcyAbsLvlFlg = this.PlcyAbsLvlFlg;
				copy.Notes = this.Notes;
				copy.AsCodeDegreeId = this.AsCodeDegreeId;
				copy.EntMainId = this.EntMainId;
				copy.EdtonNum = this.EdtonNum;
				copy.AudtNote = this.AudtNote;
				copy.EdCodeStudyMethodId = this.EdCodeStudyMethodId;
				copy.AccumGrdngTypeFlg = this.AccumGrdngTypeFlg;
				copy.CrsGrdngTypeFlg = this.CrsGrdngTypeFlg;
				copy.PlcyLoadCalcFlg = this.PlcyLoadCalcFlg;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				copy.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				copy.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				copy.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				copy.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeStudyMethodIdSource != null && existingCopies.Contains(this.EdCodeStudyMethodIdSource))
				copy.EdCodeStudyMethodIdSource = existingCopies[this.EdCodeStudyMethodIdSource] as EdCodeStudyMethod;
			else
				copy.EdCodeStudyMethodIdSource = MakeCopyOf(this.EdCodeStudyMethodIdSource, existingCopies) as EdCodeStudyMethod;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				copy.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				copy.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				copy.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				copy.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
		
			//deep copy nested objects
			copy.EntPolicyExcuseCollection = (TList<EntPolicyExcuse>) MakeCopyOf(this.EntPolicyExcuseCollection, existingCopies); 
			copy.EntPolicyCourseRepeatCollection = (TList<EntPolicyCourseRepeat>) MakeCopyOf(this.EntPolicyCourseRepeatCollection, existingCopies); 
			copy.EdStudIntTrnsStateToCollectionGetByEdBylawIdTo = (TList<EdStudIntTrnsStateTo>) MakeCopyOf(this.EdStudIntTrnsStateToCollectionGetByEdBylawIdTo, existingCopies); 
			copy.EntPolcyCrsRetakeCollection = (TList<EntPolcyCrsRetake>) MakeCopyOf(this.EntPolcyCrsRetakeCollection, existingCopies); 
			copy.EntPolicySemHonorCollection = (TList<EntPolicySemHonor>) MakeCopyOf(this.EntPolicySemHonorCollection, existingCopies); 
			copy.EdStudIntTrnsStateFromCollectionGetByEdBylawIdFrom = (TList<EdStudIntTrnsStateFrom>) MakeCopyOf(this.EdStudIntTrnsStateFromCollectionGetByEdBylawIdFrom, existingCopies); 
			copy.EntPolcyGrdngHdrCollection = (TList<EntPolcyGrdngHdr>) MakeCopyOf(this.EntPolcyGrdngHdrCollection, existingCopies); 
			copy.EntPolcyGpaCollection = (TList<EntPolcyGpa>) MakeCopyOf(this.EntPolcyGpaCollection, existingCopies); 
			copy.EntPolicyGradingLevelCollection = (TList<EntPolicyGradingLevel>) MakeCopyOf(this.EntPolicyGradingLevelCollection, existingCopies); 
			copy.EntPolicyAbsenceCollection = (TList<EntPolicyAbsence>) MakeCopyOf(this.EntPolicyAbsenceCollection, existingCopies); 
			copy.EntPolicyObservedCollection = (TList<EntPolicyObserved>) MakeCopyOf(this.EntPolicyObservedCollection, existingCopies); 
			copy.EdStudFacultyCollection = (TList<EdStudFaculty>) MakeCopyOf(this.EdStudFacultyCollection, existingCopies); 
			copy.EntPolicyLoadCollection = (TList<EntPolicyLoad>) MakeCopyOf(this.EntPolicyLoadCollection, existingCopies); 
			copy.EdStudIntTrnsStateFromCollectionGetByEdBylawIdTo = (TList<EdStudIntTrnsStateFrom>) MakeCopyOf(this.EdStudIntTrnsStateFromCollectionGetByEdBylawIdTo, existingCopies); 
			copy.EntPolicyGradingHdrCollection = (TList<EntPolicyGradingHdr>) MakeCopyOf(this.EntPolicyGradingHdrCollection, existingCopies); 
			copy.EntPlcyAcadWarnCollection = (TList<EntPlcyAcadWarn>) MakeCopyOf(this.EntPlcyAcadWarnCollection, existingCopies); 
			copy.EntPolicyCourseChngCollection = (TList<EntPolicyCourseChng>) MakeCopyOf(this.EntPolicyCourseChngCollection, existingCopies); 
			copy.EntPolicyAssessHdrCollection = (TList<EntPolicyAssessHdr>) MakeCopyOf(this.EntPolicyAssessHdrCollection, existingCopies); 
			copy.EdStudIntTrnsStateToCollectionGetByEdBylawIdFrom = (TList<EdStudIntTrnsStateTo>) MakeCopyOf(this.EdStudIntTrnsStateToCollectionGetByEdBylawIdFrom, existingCopies); 
			copy.EntPolicyAccumHonorCollection = (TList<EntPolicyAccumHonor>) MakeCopyOf(this.EntPolicyAccumHonorCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdBylaw Entity 
		///</summary>
		public virtual EdBylaw Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdBylaw Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdBylaw DeepCopy()
		{
			return EntityHelper.Clone<EdBylaw>(this as EdBylaw);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdBylawEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdBylawEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdBylawEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdBylawColumn column)
		{
			switch(column)
			{
					case EdBylawColumn.EdBylawId:
					return entityData.EdBylawId != _originalData.EdBylawId;
					case EdBylawColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case EdBylawColumn.CurrentFlg:
					return entityData.CurrentFlg != _originalData.CurrentFlg;
					case EdBylawColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case EdBylawColumn.AsCodeDegreeClassId:
					return entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
					case EdBylawColumn.ClosedFlg:
					return entityData.ClosedFlg != _originalData.ClosedFlg;
					case EdBylawColumn.PlcyAbsLvlFlg:
					return entityData.PlcyAbsLvlFlg != _originalData.PlcyAbsLvlFlg;
					case EdBylawColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case EdBylawColumn.AsCodeDegreeId:
					return entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
					case EdBylawColumn.EntMainId:
					return entityData.EntMainId != _originalData.EntMainId;
					case EdBylawColumn.EdtonNum:
					return entityData.EdtonNum != _originalData.EdtonNum;
					case EdBylawColumn.AudtNote:
					return entityData.AudtNote != _originalData.AudtNote;
					case EdBylawColumn.EdCodeStudyMethodId:
					return entityData.EdCodeStudyMethodId != _originalData.EdCodeStudyMethodId;
					case EdBylawColumn.AccumGrdngTypeFlg:
					return entityData.AccumGrdngTypeFlg != _originalData.AccumGrdngTypeFlg;
					case EdBylawColumn.CrsGrdngTypeFlg:
					return entityData.CrsGrdngTypeFlg != _originalData.CrsGrdngTypeFlg;
					case EdBylawColumn.PlcyLoadCalcFlg:
					return entityData.PlcyLoadCalcFlg != _originalData.PlcyLoadCalcFlg;
					case EdBylawColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case EdBylawColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdBylawColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdBylawId != _originalData.EdBylawId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.CurrentFlg != _originalData.CurrentFlg;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
			result = result || entityData.ClosedFlg != _originalData.ClosedFlg;
			result = result || entityData.PlcyAbsLvlFlg != _originalData.PlcyAbsLvlFlg;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
			result = result || entityData.EntMainId != _originalData.EntMainId;
			result = result || entityData.EdtonNum != _originalData.EdtonNum;
			result = result || entityData.AudtNote != _originalData.AudtNote;
			result = result || entityData.EdCodeStudyMethodId != _originalData.EdCodeStudyMethodId;
			result = result || entityData.AccumGrdngTypeFlg != _originalData.AccumGrdngTypeFlg;
			result = result || entityData.CrsGrdngTypeFlg != _originalData.CrsGrdngTypeFlg;
			result = result || entityData.PlcyLoadCalcFlg != _originalData.PlcyLoadCalcFlg;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a EdBylaw Entity with the original data.
		///</summary>
		public EdBylaw GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdBylaw(
				_originalData.EdBylawId,
				_originalData.EdAcadYearId,
				_originalData.CurrentFlg,
				_originalData.AsFacultyInfoId,
				_originalData.AsCodeDegreeClassId,
				_originalData.ClosedFlg,
				_originalData.PlcyAbsLvlFlg,
				_originalData.Notes,
				_originalData.AsCodeDegreeId,
				_originalData.EntMainId,
				_originalData.EdtonNum,
				_originalData.AudtNote,
				_originalData.EdCodeStudyMethodId,
				_originalData.AccumGrdngTypeFlg,
				_originalData.CrsGrdngTypeFlg,
				_originalData.PlcyLoadCalcFlg,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (EdBylaw)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdBylawBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdBylawBase)
				return ValueEquals(this, (EdBylawBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdBylawBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdBylawId.GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					this.CurrentFlg.GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					this.AsCodeDegreeClassId.GetHashCode() ^ 
					this.ClosedFlg.GetHashCode() ^ 
					((this.PlcyAbsLvlFlg == null) ? string.Empty : this.PlcyAbsLvlFlg.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.AsCodeDegreeId == null) ? string.Empty : this.AsCodeDegreeId.ToString()).GetHashCode() ^ 
					((this.EntMainId == null) ? string.Empty : this.EntMainId.ToString()).GetHashCode() ^ 
					((this.EdtonNum == null) ? string.Empty : this.EdtonNum.ToString()).GetHashCode() ^ 
					((this.AudtNote == null) ? string.Empty : this.AudtNote.ToString()).GetHashCode() ^ 
					((this.EdCodeStudyMethodId == null) ? string.Empty : this.EdCodeStudyMethodId.ToString()).GetHashCode() ^ 
					((this.AccumGrdngTypeFlg == null) ? string.Empty : this.AccumGrdngTypeFlg.ToString()).GetHashCode() ^ 
					((this.CrsGrdngTypeFlg == null) ? string.Empty : this.CrsGrdngTypeFlg.ToString()).GetHashCode() ^ 
					((this.PlcyLoadCalcFlg == null) ? string.Empty : this.PlcyLoadCalcFlg.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdBylawBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdBylawBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdBylawBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdBylawBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdBylawBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdBylawBase Object1, EdBylawBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdBylawId != Object2.EdBylawId)
				equal = false;
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if (Object1.CurrentFlg != Object2.CurrentFlg)
				equal = false;
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if (Object1.AsCodeDegreeClassId != Object2.AsCodeDegreeClassId)
				equal = false;
			if (Object1.ClosedFlg != Object2.ClosedFlg)
				equal = false;
			if ( Object1.PlcyAbsLvlFlg != null && Object2.PlcyAbsLvlFlg != null )
			{
				if (Object1.PlcyAbsLvlFlg != Object2.PlcyAbsLvlFlg)
					equal = false;
			}
			else if (Object1.PlcyAbsLvlFlg == null ^ Object2.PlcyAbsLvlFlg == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.AsCodeDegreeId != null && Object2.AsCodeDegreeId != null )
			{
				if (Object1.AsCodeDegreeId != Object2.AsCodeDegreeId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeId == null ^ Object2.AsCodeDegreeId == null )
			{
				equal = false;
			}
			if ( Object1.EntMainId != null && Object2.EntMainId != null )
			{
				if (Object1.EntMainId != Object2.EntMainId)
					equal = false;
			}
			else if (Object1.EntMainId == null ^ Object2.EntMainId == null )
			{
				equal = false;
			}
			if ( Object1.EdtonNum != null && Object2.EdtonNum != null )
			{
				if (Object1.EdtonNum != Object2.EdtonNum)
					equal = false;
			}
			else if (Object1.EdtonNum == null ^ Object2.EdtonNum == null )
			{
				equal = false;
			}
			if ( Object1.AudtNote != null && Object2.AudtNote != null )
			{
				if (Object1.AudtNote != Object2.AudtNote)
					equal = false;
			}
			else if (Object1.AudtNote == null ^ Object2.AudtNote == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeStudyMethodId != null && Object2.EdCodeStudyMethodId != null )
			{
				if (Object1.EdCodeStudyMethodId != Object2.EdCodeStudyMethodId)
					equal = false;
			}
			else if (Object1.EdCodeStudyMethodId == null ^ Object2.EdCodeStudyMethodId == null )
			{
				equal = false;
			}
			if ( Object1.AccumGrdngTypeFlg != null && Object2.AccumGrdngTypeFlg != null )
			{
				if (Object1.AccumGrdngTypeFlg != Object2.AccumGrdngTypeFlg)
					equal = false;
			}
			else if (Object1.AccumGrdngTypeFlg == null ^ Object2.AccumGrdngTypeFlg == null )
			{
				equal = false;
			}
			if ( Object1.CrsGrdngTypeFlg != null && Object2.CrsGrdngTypeFlg != null )
			{
				if (Object1.CrsGrdngTypeFlg != Object2.CrsGrdngTypeFlg)
					equal = false;
			}
			else if (Object1.CrsGrdngTypeFlg == null ^ Object2.CrsGrdngTypeFlg == null )
			{
				equal = false;
			}
			if ( Object1.PlcyLoadCalcFlg != null && Object2.PlcyLoadCalcFlg != null )
			{
				if (Object1.PlcyLoadCalcFlg != Object2.PlcyLoadCalcFlg)
					equal = false;
			}
			else if (Object1.PlcyLoadCalcFlg == null ^ Object2.PlcyLoadCalcFlg == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdBylawBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdBylawComparer GetComparer()
        {
            return new EdBylawComparer();
        }
        */

        // Comparer delegates back to EdBylaw
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdBylaw rhs, EdBylawColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdBylawColumn.EdBylawId:
            		return this.EdBylawId.CompareTo(rhs.EdBylawId);
            		
            		                 
            	
            	
            	case EdBylawColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case EdBylawColumn.CurrentFlg:
            		return this.CurrentFlg.CompareTo(rhs.CurrentFlg);
            		
            		                 
            	
            	
            	case EdBylawColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case EdBylawColumn.AsCodeDegreeClassId:
            		return this.AsCodeDegreeClassId.CompareTo(rhs.AsCodeDegreeClassId);
            		
            		                 
            	
            	
            	case EdBylawColumn.ClosedFlg:
            		return this.ClosedFlg.CompareTo(rhs.ClosedFlg);
            		
            		                 
            	
            	
            	case EdBylawColumn.PlcyAbsLvlFlg:
            		return this.PlcyAbsLvlFlg.Value.CompareTo(rhs.PlcyAbsLvlFlg.Value);
            		
            		                 
            	
            	
            	case EdBylawColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case EdBylawColumn.AsCodeDegreeId:
            		return this.AsCodeDegreeId.Value.CompareTo(rhs.AsCodeDegreeId.Value);
            		
            		                 
            	
            	
            	case EdBylawColumn.EntMainId:
            		return this.EntMainId.Value.CompareTo(rhs.EntMainId.Value);
            		
            		                 
            	
            	
            	case EdBylawColumn.EdtonNum:
            		return this.EdtonNum.CompareTo(rhs.EdtonNum);
            		
            		                 
            	
            	
            	case EdBylawColumn.AudtNote:
            		return this.AudtNote.CompareTo(rhs.AudtNote);
            		
            		                 
            	
            	
            	case EdBylawColumn.EdCodeStudyMethodId:
            		return this.EdCodeStudyMethodId.Value.CompareTo(rhs.EdCodeStudyMethodId.Value);
            		
            		                 
            	
            	
            	case EdBylawColumn.AccumGrdngTypeFlg:
            		return this.AccumGrdngTypeFlg.Value.CompareTo(rhs.AccumGrdngTypeFlg.Value);
            		
            		                 
            	
            	
            	case EdBylawColumn.CrsGrdngTypeFlg:
            		return this.CrsGrdngTypeFlg.Value.CompareTo(rhs.CrsGrdngTypeFlg.Value);
            		
            		                 
            	
            	
            	case EdBylawColumn.PlcyLoadCalcFlg:
            		return this.PlcyLoadCalcFlg.Value.CompareTo(rhs.PlcyLoadCalcFlg.Value);
            		
            		                 
            	
            	
            	case EdBylawColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case EdBylawColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdBylawKey> Members
		
		// member variable for the EntityId property
		private EdBylawKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdBylawKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdBylawKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdBylaw")
					.Append("|").Append( this.EdBylawId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{19}{18}- EdBylawId: {0}{18}- EdAcadYearId: {1}{18}- CurrentFlg: {2}{18}- AsFacultyInfoId: {3}{18}- AsCodeDegreeClassId: {4}{18}- ClosedFlg: {5}{18}- PlcyAbsLvlFlg: {6}{18}- Notes: {7}{18}- AsCodeDegreeId: {8}{18}- EntMainId: {9}{18}- EdtonNum: {10}{18}- AudtNote: {11}{18}- EdCodeStudyMethodId: {12}{18}- AccumGrdngTypeFlg: {13}{18}- CrsGrdngTypeFlg: {14}{18}- PlcyLoadCalcFlg: {15}{18}- SeUserId: {16}{18}- LastDate: {17}{18}{20}", 
				this.EdBylawId,
				this.EdAcadYearId,
				this.CurrentFlg,
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				this.AsCodeDegreeClassId,
				this.ClosedFlg,
				(this.PlcyAbsLvlFlg == null) ? string.Empty : this.PlcyAbsLvlFlg.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.AsCodeDegreeId == null) ? string.Empty : this.AsCodeDegreeId.ToString(),
				(this.EntMainId == null) ? string.Empty : this.EntMainId.ToString(),
				(this.EdtonNum == null) ? string.Empty : this.EdtonNum.ToString(),
				(this.AudtNote == null) ? string.Empty : this.AudtNote.ToString(),
				(this.EdCodeStudyMethodId == null) ? string.Empty : this.EdCodeStudyMethodId.ToString(),
				(this.AccumGrdngTypeFlg == null) ? string.Empty : this.AccumGrdngTypeFlg.ToString(),
				(this.CrsGrdngTypeFlg == null) ? string.Empty : this.CrsGrdngTypeFlg.ToString(),
				(this.PlcyLoadCalcFlg == null) ? string.Empty : this.PlcyLoadCalcFlg.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_BYLAW' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdBylawEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_BYLAW_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_BYLAW"</remarks>
		public System.Decimal EdBylawId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdBylawId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// CURRENT_FLG : 
		/// </summary>
		public System.Decimal		  CurrentFlg = 0.0m;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_CLASS_ID : UG  - PG
		/// </summary>
		public System.Decimal		  AsCodeDegreeClassId = 0.0m;
		
		/// <summary>
		/// CLOSED_FLG : 
		/// </summary>
		public System.Decimal		  ClosedFlg = 0.0m;
		
		/// <summary>
		/// PLCY_ABS_LVL_FLG : 
		/// </summary>
		public System.Decimal?		  PlcyAbsLvlFlg = null;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_ID : مسلسل الدرجة العلمية
		/// </summary>
		public System.Decimal?		  AsCodeDegreeId = null;
		
		/// <summary>
		/// ENT_MAIN_ID : 
		/// </summary>
		public System.Decimal?		  EntMainId = null;
		
		/// <summary>
		/// EDTON_NUM : 
		/// </summary>
		public System.String		  EdtonNum = null;
		
		/// <summary>
		/// AUDT_NOTE : 
		/// </summary>
		public System.String		  AudtNote = null;
		
		/// <summary>
		/// ED_CODE_STUDY_METHOD_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeStudyMethodId = null;
		
		/// <summary>
		/// ACCUM_GRDNG_TYPE_FLG : Tab Accum Grading
		/// 		/// 0> credit point   1:5 /
		/// 		/// 1> percent  1:101
		/// </summary>
		public System.Decimal?		  AccumGrdngTypeFlg = null;
		
		/// <summary>
		/// CRS_GRDNG_TYPE_FLG : Tab Course Grading
		/// 		/// 0>    مجموع المقرر   0:max course degree
		/// 		/// 1> percent  1:101
		/// 		/// 
		/// 		/// Policy Assess total /percent
		/// 		/// 
		/// 		/// (when add new bylaw set default=1)
		/// </summary>
		public System.Decimal?		  CrsGrdngTypeFlg = null;
		
		/// <summary>
		/// PLCY_LOAD_CALC_FLG : nul,0  >ACCUM_GPA default all univ
		/// 		/// 1        >SEM_GPA (last active semester)
		/// </summary>
		public System.Int32?		  PlcyLoadCalcFlg = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsCodeDegree _asCodeDegreeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return this._asCodeDegreeIdSource; }
            set { this._asCodeDegreeIdSource = value; }
      	}
		private AsCodeDegreeClass _asCodeDegreeClassIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return this._asCodeDegreeClassIdSource; }
            set { this._asCodeDegreeClassIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCodeStudyMethod _edCodeStudyMethodIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeStudyMethod"/>.
		/// </summary>
		/// <value>The source EdCodeStudyMethod for EdCodeStudyMethodId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeStudyMethod EdCodeStudyMethodIdSource
      	{
            get { return this._edCodeStudyMethodIdSource; }
            set { this._edCodeStudyMethodIdSource = value; }
      	}
		private EntityMain _entMainIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return this._entMainIdSource; }
            set { this._entMainIdSource = value; }
      	}
		private SeUser _seUserIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeUser SeUserIdSource
      	{
            get { return this._seUserIdSource; }
            set { this._seUserIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EntPolicyExcuseCollection
		
		private TList<EntPolicyExcuse> _entPolicyExcuseEdBylawId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolicyExcuseEdBylawId
		/// </summary>
		
		public TList<EntPolicyExcuse> EntPolicyExcuseCollection
		{
			get
			{
				if (_entPolicyExcuseEdBylawId == null)
				{
				_entPolicyExcuseEdBylawId = new TList<EntPolicyExcuse>();
				}
	
				return _entPolicyExcuseEdBylawId;
			}
			set { _entPolicyExcuseEdBylawId = value; }
		}
		
		#endregion

		#region EntPolicyCourseRepeatCollection
		
		private TList<EntPolicyCourseRepeat> _entPolicyCourseRepeatEdBylawId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolicyCourseRepeatEdBylawId
		/// </summary>
		
		public TList<EntPolicyCourseRepeat> EntPolicyCourseRepeatCollection
		{
			get
			{
				if (_entPolicyCourseRepeatEdBylawId == null)
				{
				_entPolicyCourseRepeatEdBylawId = new TList<EntPolicyCourseRepeat>();
				}
	
				return _entPolicyCourseRepeatEdBylawId;
			}
			set { _entPolicyCourseRepeatEdBylawId = value; }
		}
		
		#endregion

		#region EdStudIntTrnsStateToCollectionGetByEdBylawIdTo
		
		private TList<EdStudIntTrnsStateTo> _edStudIntTrnsStateToEdBylawIdToGetByEdBylawIdTo;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudIntTrnsStateToEdBylawIdToGetByEdBylawIdTo
		/// </summary>
		
		public TList<EdStudIntTrnsStateTo> EdStudIntTrnsStateToCollectionGetByEdBylawIdTo
		{
			get
			{
				if (_edStudIntTrnsStateToEdBylawIdToGetByEdBylawIdTo == null)
				{
				_edStudIntTrnsStateToEdBylawIdToGetByEdBylawIdTo = new TList<EdStudIntTrnsStateTo>();
				}
	
				return _edStudIntTrnsStateToEdBylawIdToGetByEdBylawIdTo;
			}
			set { _edStudIntTrnsStateToEdBylawIdToGetByEdBylawIdTo = value; }
		}
		
		#endregion

		#region EntPolcyCrsRetakeCollection
		
		private TList<EntPolcyCrsRetake> _entPolcyCrsRetakeEdBylawId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolcyCrsRetakeEdBylawId
		/// </summary>
		
		public TList<EntPolcyCrsRetake> EntPolcyCrsRetakeCollection
		{
			get
			{
				if (_entPolcyCrsRetakeEdBylawId == null)
				{
				_entPolcyCrsRetakeEdBylawId = new TList<EntPolcyCrsRetake>();
				}
	
				return _entPolcyCrsRetakeEdBylawId;
			}
			set { _entPolcyCrsRetakeEdBylawId = value; }
		}
		
		#endregion

		#region EntPolicySemHonorCollection
		
		private TList<EntPolicySemHonor> _entPolicySemHonorEdBylawId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolicySemHonorEdBylawId
		/// </summary>
		
		public TList<EntPolicySemHonor> EntPolicySemHonorCollection
		{
			get
			{
				if (_entPolicySemHonorEdBylawId == null)
				{
				_entPolicySemHonorEdBylawId = new TList<EntPolicySemHonor>();
				}
	
				return _entPolicySemHonorEdBylawId;
			}
			set { _entPolicySemHonorEdBylawId = value; }
		}
		
		#endregion

		#region EdStudIntTrnsStateFromCollectionGetByEdBylawIdFrom
		
		private TList<EdStudIntTrnsStateFrom> _edStudIntTrnsStateFromEdBylawIdToGetByEdBylawIdFrom;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudIntTrnsStateFromEdBylawIdToGetByEdBylawIdFrom
		/// </summary>
		
		public TList<EdStudIntTrnsStateFrom> EdStudIntTrnsStateFromCollectionGetByEdBylawIdFrom
		{
			get
			{
				if (_edStudIntTrnsStateFromEdBylawIdToGetByEdBylawIdFrom == null)
				{
				_edStudIntTrnsStateFromEdBylawIdToGetByEdBylawIdFrom = new TList<EdStudIntTrnsStateFrom>();
				}
	
				return _edStudIntTrnsStateFromEdBylawIdToGetByEdBylawIdFrom;
			}
			set { _edStudIntTrnsStateFromEdBylawIdToGetByEdBylawIdFrom = value; }
		}
		
		#endregion

		#region EntPolcyGrdngHdrCollection
		
		private TList<EntPolcyGrdngHdr> _entPolcyGrdngHdrEdBylawId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolcyGrdngHdrEdBylawId
		/// </summary>
		
		public TList<EntPolcyGrdngHdr> EntPolcyGrdngHdrCollection
		{
			get
			{
				if (_entPolcyGrdngHdrEdBylawId == null)
				{
				_entPolcyGrdngHdrEdBylawId = new TList<EntPolcyGrdngHdr>();
				}
	
				return _entPolcyGrdngHdrEdBylawId;
			}
			set { _entPolcyGrdngHdrEdBylawId = value; }
		}
		
		#endregion

		#region EntPolcyGpaCollection
		
		private TList<EntPolcyGpa> _entPolcyGpaEdBylawId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolcyGpaEdBylawId
		/// </summary>
		
		public TList<EntPolcyGpa> EntPolcyGpaCollection
		{
			get
			{
				if (_entPolcyGpaEdBylawId == null)
				{
				_entPolcyGpaEdBylawId = new TList<EntPolcyGpa>();
				}
	
				return _entPolcyGpaEdBylawId;
			}
			set { _entPolcyGpaEdBylawId = value; }
		}
		
		#endregion

		#region EntPolicyGradingLevelCollection
		
		private TList<EntPolicyGradingLevel> _entPolicyGradingLevelEdBylawId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolicyGradingLevelEdBylawId
		/// </summary>
		
		public TList<EntPolicyGradingLevel> EntPolicyGradingLevelCollection
		{
			get
			{
				if (_entPolicyGradingLevelEdBylawId == null)
				{
				_entPolicyGradingLevelEdBylawId = new TList<EntPolicyGradingLevel>();
				}
	
				return _entPolicyGradingLevelEdBylawId;
			}
			set { _entPolicyGradingLevelEdBylawId = value; }
		}
		
		#endregion

		#region EntPolicyAbsenceCollection
		
		private TList<EntPolicyAbsence> _entPolicyAbsenceEdBylawId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolicyAbsenceEdBylawId
		/// </summary>
		
		public TList<EntPolicyAbsence> EntPolicyAbsenceCollection
		{
			get
			{
				if (_entPolicyAbsenceEdBylawId == null)
				{
				_entPolicyAbsenceEdBylawId = new TList<EntPolicyAbsence>();
				}
	
				return _entPolicyAbsenceEdBylawId;
			}
			set { _entPolicyAbsenceEdBylawId = value; }
		}
		
		#endregion

		#region EntPolicyObservedCollection
		
		private TList<EntPolicyObserved> _entPolicyObservedEdBylawId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolicyObservedEdBylawId
		/// </summary>
		
		public TList<EntPolicyObserved> EntPolicyObservedCollection
		{
			get
			{
				if (_entPolicyObservedEdBylawId == null)
				{
				_entPolicyObservedEdBylawId = new TList<EntPolicyObserved>();
				}
	
				return _entPolicyObservedEdBylawId;
			}
			set { _entPolicyObservedEdBylawId = value; }
		}
		
		#endregion

		#region EdStudFacultyCollection
		
		private TList<EdStudFaculty> _edStudFacultyEdBylawId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudFacultyEdBylawId
		/// </summary>
		
		public TList<EdStudFaculty> EdStudFacultyCollection
		{
			get
			{
				if (_edStudFacultyEdBylawId == null)
				{
				_edStudFacultyEdBylawId = new TList<EdStudFaculty>();
				}
	
				return _edStudFacultyEdBylawId;
			}
			set { _edStudFacultyEdBylawId = value; }
		}
		
		#endregion

		#region EntPolicyLoadCollection
		
		private TList<EntPolicyLoad> _entPolicyLoadEdBylawId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolicyLoadEdBylawId
		/// </summary>
		
		public TList<EntPolicyLoad> EntPolicyLoadCollection
		{
			get
			{
				if (_entPolicyLoadEdBylawId == null)
				{
				_entPolicyLoadEdBylawId = new TList<EntPolicyLoad>();
				}
	
				return _entPolicyLoadEdBylawId;
			}
			set { _entPolicyLoadEdBylawId = value; }
		}
		
		#endregion

		#region EdStudIntTrnsStateFromCollectionGetByEdBylawIdTo
		
		private TList<EdStudIntTrnsStateFrom> _edStudIntTrnsStateFromEdBylawIdToGetByEdBylawIdTo;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudIntTrnsStateFromEdBylawIdToGetByEdBylawIdTo
		/// </summary>
		
		public TList<EdStudIntTrnsStateFrom> EdStudIntTrnsStateFromCollectionGetByEdBylawIdTo
		{
			get
			{
				if (_edStudIntTrnsStateFromEdBylawIdToGetByEdBylawIdTo == null)
				{
				_edStudIntTrnsStateFromEdBylawIdToGetByEdBylawIdTo = new TList<EdStudIntTrnsStateFrom>();
				}
	
				return _edStudIntTrnsStateFromEdBylawIdToGetByEdBylawIdTo;
			}
			set { _edStudIntTrnsStateFromEdBylawIdToGetByEdBylawIdTo = value; }
		}
		
		#endregion

		#region EntPolicyGradingHdrCollection
		
		private TList<EntPolicyGradingHdr> _entPolicyGradingHdrEdBylawId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolicyGradingHdrEdBylawId
		/// </summary>
		
		public TList<EntPolicyGradingHdr> EntPolicyGradingHdrCollection
		{
			get
			{
				if (_entPolicyGradingHdrEdBylawId == null)
				{
				_entPolicyGradingHdrEdBylawId = new TList<EntPolicyGradingHdr>();
				}
	
				return _entPolicyGradingHdrEdBylawId;
			}
			set { _entPolicyGradingHdrEdBylawId = value; }
		}
		
		#endregion

		#region EntPlcyAcadWarnCollection
		
		private TList<EntPlcyAcadWarn> _entPlcyAcadWarnEdBylawId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPlcyAcadWarnEdBylawId
		/// </summary>
		
		public TList<EntPlcyAcadWarn> EntPlcyAcadWarnCollection
		{
			get
			{
				if (_entPlcyAcadWarnEdBylawId == null)
				{
				_entPlcyAcadWarnEdBylawId = new TList<EntPlcyAcadWarn>();
				}
	
				return _entPlcyAcadWarnEdBylawId;
			}
			set { _entPlcyAcadWarnEdBylawId = value; }
		}
		
		#endregion

		#region EntPolicyCourseChngCollection
		
		private TList<EntPolicyCourseChng> _entPolicyCourseChngEdBylawId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolicyCourseChngEdBylawId
		/// </summary>
		
		public TList<EntPolicyCourseChng> EntPolicyCourseChngCollection
		{
			get
			{
				if (_entPolicyCourseChngEdBylawId == null)
				{
				_entPolicyCourseChngEdBylawId = new TList<EntPolicyCourseChng>();
				}
	
				return _entPolicyCourseChngEdBylawId;
			}
			set { _entPolicyCourseChngEdBylawId = value; }
		}
		
		#endregion

		#region EntPolicyAssessHdrCollection
		
		private TList<EntPolicyAssessHdr> _entPolicyAssessHdrEdBylawId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolicyAssessHdrEdBylawId
		/// </summary>
		
		public TList<EntPolicyAssessHdr> EntPolicyAssessHdrCollection
		{
			get
			{
				if (_entPolicyAssessHdrEdBylawId == null)
				{
				_entPolicyAssessHdrEdBylawId = new TList<EntPolicyAssessHdr>();
				}
	
				return _entPolicyAssessHdrEdBylawId;
			}
			set { _entPolicyAssessHdrEdBylawId = value; }
		}
		
		#endregion

		#region EdStudIntTrnsStateToCollectionGetByEdBylawIdFrom
		
		private TList<EdStudIntTrnsStateTo> _edStudIntTrnsStateToEdBylawIdToGetByEdBylawIdFrom;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudIntTrnsStateToEdBylawIdToGetByEdBylawIdFrom
		/// </summary>
		
		public TList<EdStudIntTrnsStateTo> EdStudIntTrnsStateToCollectionGetByEdBylawIdFrom
		{
			get
			{
				if (_edStudIntTrnsStateToEdBylawIdToGetByEdBylawIdFrom == null)
				{
				_edStudIntTrnsStateToEdBylawIdToGetByEdBylawIdFrom = new TList<EdStudIntTrnsStateTo>();
				}
	
				return _edStudIntTrnsStateToEdBylawIdToGetByEdBylawIdFrom;
			}
			set { _edStudIntTrnsStateToEdBylawIdToGetByEdBylawIdFrom = value; }
		}
		
		#endregion

		#region EntPolicyAccumHonorCollection
		
		private TList<EntPolicyAccumHonor> _entPolicyAccumHonorEdBylawId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolicyAccumHonorEdBylawId
		/// </summary>
		
		public TList<EntPolicyAccumHonor> EntPolicyAccumHonorCollection
		{
			get
			{
				if (_entPolicyAccumHonorEdBylawId == null)
				{
				_entPolicyAccumHonorEdBylawId = new TList<EntPolicyAccumHonor>();
				}
	
				return _entPolicyAccumHonorEdBylawId;
			}
			set { _entPolicyAccumHonorEdBylawId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdBylawEntityData _tmp = new EdBylawEntityData();
						
			_tmp.EdBylawId = this.EdBylawId;
			_tmp.OriginalEdBylawId = this.OriginalEdBylawId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.CurrentFlg = this.CurrentFlg;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.ClosedFlg = this.ClosedFlg;
			_tmp.PlcyAbsLvlFlg = this.PlcyAbsLvlFlg;
			_tmp.Notes = this.Notes;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.EntMainId = this.EntMainId;
			_tmp.EdtonNum = this.EdtonNum;
			_tmp.AudtNote = this.AudtNote;
			_tmp.EdCodeStudyMethodId = this.EdCodeStudyMethodId;
			_tmp.AccumGrdngTypeFlg = this.AccumGrdngTypeFlg;
			_tmp.CrsGrdngTypeFlg = this.CrsGrdngTypeFlg;
			_tmp.PlcyLoadCalcFlg = this.PlcyLoadCalcFlg;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.AsCodeDegreeIdSource != null)
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null)
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCodeStudyMethodIdSource != null)
				_tmp.EdCodeStudyMethodIdSource = MakeCopyOf(this.EdCodeStudyMethodIdSource) as EdCodeStudyMethod;
			if (this.EntMainIdSource != null)
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource) as EntityMain;
			if (this.SeUserIdSource != null)
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource) as SeUser;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._entPolicyExcuseEdBylawId != null)
				_tmp.EntPolicyExcuseCollection = (TList<EntPolicyExcuse>) MakeCopyOf(this.EntPolicyExcuseCollection); 
			if (this._entPolicyCourseRepeatEdBylawId != null)
				_tmp.EntPolicyCourseRepeatCollection = (TList<EntPolicyCourseRepeat>) MakeCopyOf(this.EntPolicyCourseRepeatCollection); 
			if (this._edStudIntTrnsStateToEdBylawIdToGetByEdBylawIdTo != null)
				_tmp.EdStudIntTrnsStateToCollectionGetByEdBylawIdTo = (TList<EdStudIntTrnsStateTo>) MakeCopyOf(this.EdStudIntTrnsStateToCollectionGetByEdBylawIdTo); 
			if (this._entPolcyCrsRetakeEdBylawId != null)
				_tmp.EntPolcyCrsRetakeCollection = (TList<EntPolcyCrsRetake>) MakeCopyOf(this.EntPolcyCrsRetakeCollection); 
			if (this._entPolicySemHonorEdBylawId != null)
				_tmp.EntPolicySemHonorCollection = (TList<EntPolicySemHonor>) MakeCopyOf(this.EntPolicySemHonorCollection); 
			if (this._edStudIntTrnsStateFromEdBylawIdToGetByEdBylawIdFrom != null)
				_tmp.EdStudIntTrnsStateFromCollectionGetByEdBylawIdFrom = (TList<EdStudIntTrnsStateFrom>) MakeCopyOf(this.EdStudIntTrnsStateFromCollectionGetByEdBylawIdFrom); 
			if (this._entPolcyGrdngHdrEdBylawId != null)
				_tmp.EntPolcyGrdngHdrCollection = (TList<EntPolcyGrdngHdr>) MakeCopyOf(this.EntPolcyGrdngHdrCollection); 
			if (this._entPolcyGpaEdBylawId != null)
				_tmp.EntPolcyGpaCollection = (TList<EntPolcyGpa>) MakeCopyOf(this.EntPolcyGpaCollection); 
			if (this._entPolicyGradingLevelEdBylawId != null)
				_tmp.EntPolicyGradingLevelCollection = (TList<EntPolicyGradingLevel>) MakeCopyOf(this.EntPolicyGradingLevelCollection); 
			if (this._entPolicyAbsenceEdBylawId != null)
				_tmp.EntPolicyAbsenceCollection = (TList<EntPolicyAbsence>) MakeCopyOf(this.EntPolicyAbsenceCollection); 
			if (this._entPolicyObservedEdBylawId != null)
				_tmp.EntPolicyObservedCollection = (TList<EntPolicyObserved>) MakeCopyOf(this.EntPolicyObservedCollection); 
			if (this._edStudFacultyEdBylawId != null)
				_tmp.EdStudFacultyCollection = (TList<EdStudFaculty>) MakeCopyOf(this.EdStudFacultyCollection); 
			if (this._entPolicyLoadEdBylawId != null)
				_tmp.EntPolicyLoadCollection = (TList<EntPolicyLoad>) MakeCopyOf(this.EntPolicyLoadCollection); 
			if (this._edStudIntTrnsStateFromEdBylawIdToGetByEdBylawIdTo != null)
				_tmp.EdStudIntTrnsStateFromCollectionGetByEdBylawIdTo = (TList<EdStudIntTrnsStateFrom>) MakeCopyOf(this.EdStudIntTrnsStateFromCollectionGetByEdBylawIdTo); 
			if (this._entPolicyGradingHdrEdBylawId != null)
				_tmp.EntPolicyGradingHdrCollection = (TList<EntPolicyGradingHdr>) MakeCopyOf(this.EntPolicyGradingHdrCollection); 
			if (this._entPlcyAcadWarnEdBylawId != null)
				_tmp.EntPlcyAcadWarnCollection = (TList<EntPlcyAcadWarn>) MakeCopyOf(this.EntPlcyAcadWarnCollection); 
			if (this._entPolicyCourseChngEdBylawId != null)
				_tmp.EntPolicyCourseChngCollection = (TList<EntPolicyCourseChng>) MakeCopyOf(this.EntPolicyCourseChngCollection); 
			if (this._entPolicyAssessHdrEdBylawId != null)
				_tmp.EntPolicyAssessHdrCollection = (TList<EntPolicyAssessHdr>) MakeCopyOf(this.EntPolicyAssessHdrCollection); 
			if (this._edStudIntTrnsStateToEdBylawIdToGetByEdBylawIdFrom != null)
				_tmp.EdStudIntTrnsStateToCollectionGetByEdBylawIdFrom = (TList<EdStudIntTrnsStateTo>) MakeCopyOf(this.EdStudIntTrnsStateToCollectionGetByEdBylawIdFrom); 
			if (this._entPolicyAccumHonorEdBylawId != null)
				_tmp.EntPolicyAccumHonorCollection = (TList<EntPolicyAccumHonor>) MakeCopyOf(this.EntPolicyAccumHonorCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdBylawEntityData _tmp = new EdBylawEntityData();
						
			_tmp.EdBylawId = this.EdBylawId;
			_tmp.OriginalEdBylawId = this.OriginalEdBylawId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.CurrentFlg = this.CurrentFlg;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.ClosedFlg = this.ClosedFlg;
			_tmp.PlcyAbsLvlFlg = this.PlcyAbsLvlFlg;
			_tmp.Notes = this.Notes;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.EntMainId = this.EntMainId;
			_tmp.EdtonNum = this.EdtonNum;
			_tmp.AudtNote = this.AudtNote;
			_tmp.EdCodeStudyMethodId = this.EdCodeStudyMethodId;
			_tmp.AccumGrdngTypeFlg = this.AccumGrdngTypeFlg;
			_tmp.CrsGrdngTypeFlg = this.CrsGrdngTypeFlg;
			_tmp.PlcyLoadCalcFlg = this.PlcyLoadCalcFlg;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				_tmp.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				_tmp.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeStudyMethodIdSource != null && existingCopies.Contains(this.EdCodeStudyMethodIdSource))
				_tmp.EdCodeStudyMethodIdSource = existingCopies[this.EdCodeStudyMethodIdSource] as EdCodeStudyMethod;
			else
				_tmp.EdCodeStudyMethodIdSource = MakeCopyOf(this.EdCodeStudyMethodIdSource, existingCopies) as EdCodeStudyMethod;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				_tmp.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				_tmp.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EntPolicyExcuseCollection = (TList<EntPolicyExcuse>) MakeCopyOf(this.EntPolicyExcuseCollection, existingCopies); 
			_tmp.EntPolicyCourseRepeatCollection = (TList<EntPolicyCourseRepeat>) MakeCopyOf(this.EntPolicyCourseRepeatCollection, existingCopies); 
			_tmp.EdStudIntTrnsStateToCollectionGetByEdBylawIdTo = (TList<EdStudIntTrnsStateTo>) MakeCopyOf(this.EdStudIntTrnsStateToCollectionGetByEdBylawIdTo, existingCopies); 
			_tmp.EntPolcyCrsRetakeCollection = (TList<EntPolcyCrsRetake>) MakeCopyOf(this.EntPolcyCrsRetakeCollection, existingCopies); 
			_tmp.EntPolicySemHonorCollection = (TList<EntPolicySemHonor>) MakeCopyOf(this.EntPolicySemHonorCollection, existingCopies); 
			_tmp.EdStudIntTrnsStateFromCollectionGetByEdBylawIdFrom = (TList<EdStudIntTrnsStateFrom>) MakeCopyOf(this.EdStudIntTrnsStateFromCollectionGetByEdBylawIdFrom, existingCopies); 
			_tmp.EntPolcyGrdngHdrCollection = (TList<EntPolcyGrdngHdr>) MakeCopyOf(this.EntPolcyGrdngHdrCollection, existingCopies); 
			_tmp.EntPolcyGpaCollection = (TList<EntPolcyGpa>) MakeCopyOf(this.EntPolcyGpaCollection, existingCopies); 
			_tmp.EntPolicyGradingLevelCollection = (TList<EntPolicyGradingLevel>) MakeCopyOf(this.EntPolicyGradingLevelCollection, existingCopies); 
			_tmp.EntPolicyAbsenceCollection = (TList<EntPolicyAbsence>) MakeCopyOf(this.EntPolicyAbsenceCollection, existingCopies); 
			_tmp.EntPolicyObservedCollection = (TList<EntPolicyObserved>) MakeCopyOf(this.EntPolicyObservedCollection, existingCopies); 
			_tmp.EdStudFacultyCollection = (TList<EdStudFaculty>) MakeCopyOf(this.EdStudFacultyCollection, existingCopies); 
			_tmp.EntPolicyLoadCollection = (TList<EntPolicyLoad>) MakeCopyOf(this.EntPolicyLoadCollection, existingCopies); 
			_tmp.EdStudIntTrnsStateFromCollectionGetByEdBylawIdTo = (TList<EdStudIntTrnsStateFrom>) MakeCopyOf(this.EdStudIntTrnsStateFromCollectionGetByEdBylawIdTo, existingCopies); 
			_tmp.EntPolicyGradingHdrCollection = (TList<EntPolicyGradingHdr>) MakeCopyOf(this.EntPolicyGradingHdrCollection, existingCopies); 
			_tmp.EntPlcyAcadWarnCollection = (TList<EntPlcyAcadWarn>) MakeCopyOf(this.EntPlcyAcadWarnCollection, existingCopies); 
			_tmp.EntPolicyCourseChngCollection = (TList<EntPolicyCourseChng>) MakeCopyOf(this.EntPolicyCourseChngCollection, existingCopies); 
			_tmp.EntPolicyAssessHdrCollection = (TList<EntPolicyAssessHdr>) MakeCopyOf(this.EntPolicyAssessHdrCollection, existingCopies); 
			_tmp.EdStudIntTrnsStateToCollectionGetByEdBylawIdFrom = (TList<EdStudIntTrnsStateTo>) MakeCopyOf(this.EdStudIntTrnsStateToCollectionGetByEdBylawIdFrom, existingCopies); 
			_tmp.EntPolicyAccumHonorCollection = (TList<EntPolicyAccumHonor>) MakeCopyOf(this.EntPolicyAccumHonorCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdBylawColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdBylawColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdBylawColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdBylawColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdBylawColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdBylawColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdBylawEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdBylawEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdBylawColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdBylawColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdBylawEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdBylawEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdBylawEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdBylaw"/> object.
	/// </remarks>
	public class EdBylawEventArgs : System.EventArgs
	{
		private EdBylawColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdBylawEventArgs class.
		///</summary>
		public EdBylawEventArgs(EdBylawColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdBylawEventArgs class.
		///</summary>
		public EdBylawEventArgs(EdBylawColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdBylawColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdBylawColumn" />
		public EdBylawColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdBylaw related events.
	///</summary>
	public delegate void EdBylawEventHandler(object sender, EdBylawEventArgs e);
	
	#region EdBylawComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdBylawComparer : System.Collections.Generic.IComparer<EdBylaw>
	{
		EdBylawColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdBylawComparer"/> class.
        /// </summary>
		public EdBylawComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdBylawComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdBylawComparer(EdBylawColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdBylaw"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdBylaw"/> to compare.</param>
        /// <param name="b">The second <c>EdBylaw</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdBylaw a, EdBylaw b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdBylaw entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdBylaw a, EdBylaw b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdBylawColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdBylawKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdBylaw"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdBylawKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdBylawKey class.
		/// </summary>
		public EdBylawKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdBylawKey class.
		/// </summary>
		public EdBylawKey(EdBylawBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdBylawId = entity.EdBylawId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdBylawKey class.
		/// </summary>
		public EdBylawKey(System.Decimal _edBylawId)
		{
			#region Init Properties

			this.EdBylawId = _edBylawId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdBylawBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdBylawBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdBylawId property
		private System.Decimal _edBylawId;
		
		/// <summary>
		/// Gets or sets the EdBylawId property.
		/// </summary>
		public System.Decimal EdBylawId
		{
			get { return _edBylawId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdBylawId = value;
				
				_edBylawId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdBylawId = ( values["EdBylawId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdBylawId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdBylawId", EdBylawId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdBylawId: {0}{1}",
								EdBylawId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdBylawColumn Enum
	
	/// <summary>
	/// Enumerate the EdBylaw columns.
	/// </summary>
	[Serializable]
	public enum EdBylawColumn : int
	{
		/// <summary>
		/// EdBylawId : 
		/// </summary>
		[EnumTextValue("ED_BYLAW_ID")]
		[ColumnEnum("ED_BYLAW_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdBylawId = 1,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 2,
		/// <summary>
		/// CurrentFlg : 
		/// </summary>
		[EnumTextValue("CURRENT_FLG")]
		[ColumnEnum("CURRENT_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		CurrentFlg = 3,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 4,
		/// <summary>
		/// AsCodeDegreeClassId : UG  - PG
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_CLASS_ID")]
		[ColumnEnum("AS_CODE_DEGREE_CLASS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsCodeDegreeClassId = 5,
		/// <summary>
		/// ClosedFlg : 
		/// </summary>
		[EnumTextValue("CLOSED_FLG")]
		[ColumnEnum("CLOSED_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ClosedFlg = 6,
		/// <summary>
		/// PlcyAbsLvlFlg : 
		/// </summary>
		[EnumTextValue("PLCY_ABS_LVL_FLG")]
		[ColumnEnum("PLCY_ABS_LVL_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PlcyAbsLvlFlg = 7,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 300)]
		Notes = 8,
		/// <summary>
		/// AsCodeDegreeId : مسلسل الدرجة العلمية
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_ID")]
		[ColumnEnum("AS_CODE_DEGREE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeId = 9,
		/// <summary>
		/// EntMainId : 
		/// </summary>
		[EnumTextValue("ENT_MAIN_ID")]
		[ColumnEnum("ENT_MAIN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntMainId = 10,
		/// <summary>
		/// EdtonNum : 
		/// </summary>
		[EnumTextValue("EDTON_NUM")]
		[ColumnEnum("EDTON_NUM", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		EdtonNum = 11,
		/// <summary>
		/// AudtNote : 
		/// </summary>
		[EnumTextValue("AUDT_NOTE")]
		[ColumnEnum("AUDT_NOTE", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		AudtNote = 12,
		/// <summary>
		/// EdCodeStudyMethodId : 
		/// </summary>
		[EnumTextValue("ED_CODE_STUDY_METHOD_ID")]
		[ColumnEnum("ED_CODE_STUDY_METHOD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeStudyMethodId = 13,
		/// <summary>
		/// AccumGrdngTypeFlg : Tab Accum Grading
		/// 		/// 0> credit point   1:5 /
		/// 		/// 1> percent  1:101
		/// </summary>
		[EnumTextValue("ACCUM_GRDNG_TYPE_FLG")]
		[ColumnEnum("ACCUM_GRDNG_TYPE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AccumGrdngTypeFlg = 14,
		/// <summary>
		/// CrsGrdngTypeFlg : Tab Course Grading
		/// 		/// 0>    مجموع المقرر   0:max course degree
		/// 		/// 1> percent  1:101
		/// 		/// 
		/// 		/// Policy Assess total /percent
		/// 		/// 
		/// 		/// (when add new bylaw set default=1)
		/// </summary>
		[EnumTextValue("CRS_GRDNG_TYPE_FLG")]
		[ColumnEnum("CRS_GRDNG_TYPE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CrsGrdngTypeFlg = 15,
		/// <summary>
		/// PlcyLoadCalcFlg : nul,0  >ACCUM_GPA default all univ
		/// 		/// 1        >SEM_GPA (last active semester)
		/// </summary>
		[EnumTextValue("PLCY_LOAD_CALC_FLG")]
		[ColumnEnum("PLCY_LOAD_CALC_FLG", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PlcyLoadCalcFlg = 16,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 17,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 18
	}//End enum

	#endregion EdBylawColumn Enum

} // end namespace
