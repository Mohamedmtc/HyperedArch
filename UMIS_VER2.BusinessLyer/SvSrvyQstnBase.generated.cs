
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SvSrvyQstn.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SV_SRVY_QSTN' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SvSrvyQstnBase : EntityBase, ISvSrvyQstn, IEntityId<SvSrvyQstnKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SvSrvyQstnEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SvSrvyQstnEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SvSrvyQstnEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SvSrvyQstn> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SvSrvyQstnEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SvSrvyQstnEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SvSrvyQstnBase"/> instance.
		///</summary>
		public SvSrvyQstnBase()
		{
			this.entityData = new SvSrvyQstnEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SvSrvyQstnBase"/> instance.
		///</summary>
		///<param name="_svSrvyQstnId"></param>
		///<param name="_svSrvyHdrId"></param>
		///<param name="_qstnAr"></param>
		///<param name="_qstnEn"></param>
		///<param name="_hntAr">in different font/colour</param>
		///<param name="_hntEn">in different font/colour</param>
		///<param name="_qstnOrdr"></param>
		///<param name="_svCdeQstnTypeId"></param>
		///<param name="_qstnMark">Exam radio button</param>
		///<param name="_qstnImg">PAth of img related to question</param>
		///<param name="_qstnTblFlg"></param>
		public SvSrvyQstnBase(System.Int32 _svSrvyQstnId, System.Int32? _svSrvyHdrId, System.String _qstnAr, 
			System.String _qstnEn, System.String _hntAr, System.String _hntEn, System.Int32 _qstnOrdr, 
			System.Int32? _svCdeQstnTypeId, System.Decimal? _qstnMark, System.String _qstnImg, System.Boolean? _qstnTblFlg)
		{
			this.entityData = new SvSrvyQstnEntityData();
			this.backupData = null;

			this.SvSrvyQstnId = _svSrvyQstnId;
			this.SvSrvyHdrId = _svSrvyHdrId;
			this.QstnAr = _qstnAr;
			this.QstnEn = _qstnEn;
			this.HntAr = _hntAr;
			this.HntEn = _hntEn;
			this.QstnOrdr = _qstnOrdr;
			this.SvCdeQstnTypeId = _svCdeQstnTypeId;
			this.QstnMark = _qstnMark;
			this.QstnImg = _qstnImg;
			this.QstnTblFlg = _qstnTblFlg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SvSrvyQstn"/> instance.
		///</summary>
		///<param name="_svSrvyQstnId"></param>
		///<param name="_svSrvyHdrId"></param>
		///<param name="_qstnAr"></param>
		///<param name="_qstnEn"></param>
		///<param name="_hntAr">in different font/colour</param>
		///<param name="_hntEn">in different font/colour</param>
		///<param name="_qstnOrdr"></param>
		///<param name="_svCdeQstnTypeId"></param>
		///<param name="_qstnMark">Exam radio button</param>
		///<param name="_qstnImg">PAth of img related to question</param>
		///<param name="_qstnTblFlg"></param>
		public static SvSrvyQstn CreateSvSrvyQstn(System.Int32 _svSrvyQstnId, System.Int32? _svSrvyHdrId, System.String _qstnAr, 
			System.String _qstnEn, System.String _hntAr, System.String _hntEn, System.Int32 _qstnOrdr, 
			System.Int32? _svCdeQstnTypeId, System.Decimal? _qstnMark, System.String _qstnImg, System.Boolean? _qstnTblFlg)
		{
			SvSrvyQstn newSvSrvyQstn = new SvSrvyQstn();
			newSvSrvyQstn.SvSrvyQstnId = _svSrvyQstnId;
			newSvSrvyQstn.SvSrvyHdrId = _svSrvyHdrId;
			newSvSrvyQstn.QstnAr = _qstnAr;
			newSvSrvyQstn.QstnEn = _qstnEn;
			newSvSrvyQstn.HntAr = _hntAr;
			newSvSrvyQstn.HntEn = _hntEn;
			newSvSrvyQstn.QstnOrdr = _qstnOrdr;
			newSvSrvyQstn.SvCdeQstnTypeId = _svCdeQstnTypeId;
			newSvSrvyQstn.QstnMark = _qstnMark;
			newSvSrvyQstn.QstnImg = _qstnImg;
			newSvSrvyQstn.QstnTblFlg = _qstnTblFlg;
			return newSvSrvyQstn;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SvSrvyQstnId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 SvSrvyQstnId
		{
			get
			{
				return this.entityData.SvSrvyQstnId; 
			}
			
			set
			{
				if (this.entityData.SvSrvyQstnId == value)
					return;
					
				OnColumnChanging(SvSrvyQstnColumn.SvSrvyQstnId, this.entityData.SvSrvyQstnId);
				this.entityData.SvSrvyQstnId = value;
				this.EntityId.SvSrvyQstnId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyQstnColumn.SvSrvyQstnId, this.entityData.SvSrvyQstnId);
				OnPropertyChanged("SvSrvyQstnId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SV_SRVY_QSTN_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SV_SRVY_QSTN_ID property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalSvSrvyQstnId
		{
			get { return this.entityData.OriginalSvSrvyQstnId; }
			set { this.entityData.OriginalSvSrvyQstnId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the SvSrvyHdrId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSvSrvyHdrIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SvSrvyHdrId
		{
			get
			{
				return this.entityData.SvSrvyHdrId; 
			}
			
			set
			{
				if (this.entityData.SvSrvyHdrId == value)
					return;
					
				OnColumnChanging(SvSrvyQstnColumn.SvSrvyHdrId, this.entityData.SvSrvyHdrId);
				this.entityData.SvSrvyHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyQstnColumn.SvSrvyHdrId, this.entityData.SvSrvyHdrId);
				OnPropertyChanged("SvSrvyHdrId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QstnAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 250)]
		public virtual System.String QstnAr
		{
			get
			{
				return this.entityData.QstnAr; 
			}
			
			set
			{
				if (this.entityData.QstnAr == value)
					return;
					
				OnColumnChanging(SvSrvyQstnColumn.QstnAr, this.entityData.QstnAr);
				this.entityData.QstnAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyQstnColumn.QstnAr, this.entityData.QstnAr);
				OnPropertyChanged("QstnAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QstnEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 250)]
		public virtual System.String QstnEn
		{
			get
			{
				return this.entityData.QstnEn; 
			}
			
			set
			{
				if (this.entityData.QstnEn == value)
					return;
					
				OnColumnChanging(SvSrvyQstnColumn.QstnEn, this.entityData.QstnEn);
				this.entityData.QstnEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyQstnColumn.QstnEn, this.entityData.QstnEn);
				OnPropertyChanged("QstnEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HntAr property. 
		///		in different font/colour
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"in different font/colour"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String HntAr
		{
			get
			{
				return this.entityData.HntAr; 
			}
			
			set
			{
				if (this.entityData.HntAr == value)
					return;
					
				OnColumnChanging(SvSrvyQstnColumn.HntAr, this.entityData.HntAr);
				this.entityData.HntAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyQstnColumn.HntAr, this.entityData.HntAr);
				OnPropertyChanged("HntAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HntEn property. 
		///		in different font/colour
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"in different font/colour"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String HntEn
		{
			get
			{
				return this.entityData.HntEn; 
			}
			
			set
			{
				if (this.entityData.HntEn == value)
					return;
					
				OnColumnChanging(SvSrvyQstnColumn.HntEn, this.entityData.HntEn);
				this.entityData.HntEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyQstnColumn.HntEn, this.entityData.HntEn);
				OnPropertyChanged("HntEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QstnOrdr property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 QstnOrdr
		{
			get
			{
				return this.entityData.QstnOrdr; 
			}
			
			set
			{
				if (this.entityData.QstnOrdr == value)
					return;
					
				OnColumnChanging(SvSrvyQstnColumn.QstnOrdr, this.entityData.QstnOrdr);
				this.entityData.QstnOrdr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyQstnColumn.QstnOrdr, this.entityData.QstnOrdr);
				OnPropertyChanged("QstnOrdr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SvCdeQstnTypeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSvCdeQstnTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SvCdeQstnTypeId
		{
			get
			{
				return this.entityData.SvCdeQstnTypeId; 
			}
			
			set
			{
				if (this.entityData.SvCdeQstnTypeId == value)
					return;
					
				OnColumnChanging(SvSrvyQstnColumn.SvCdeQstnTypeId, this.entityData.SvCdeQstnTypeId);
				this.entityData.SvCdeQstnTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyQstnColumn.SvCdeQstnTypeId, this.entityData.SvCdeQstnTypeId);
				OnPropertyChanged("SvCdeQstnTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QstnMark property. 
		///		Exam radio button
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsQstnMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Exam radio button"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? QstnMark
		{
			get
			{
				return this.entityData.QstnMark; 
			}
			
			set
			{
				if (this.entityData.QstnMark == value)
					return;
					
				OnColumnChanging(SvSrvyQstnColumn.QstnMark, this.entityData.QstnMark);
				this.entityData.QstnMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyQstnColumn.QstnMark, this.entityData.QstnMark);
				OnPropertyChanged("QstnMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QstnImg property. 
		///		PAth of img related to question
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"PAth of img related to question"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String QstnImg
		{
			get
			{
				return this.entityData.QstnImg; 
			}
			
			set
			{
				if (this.entityData.QstnImg == value)
					return;
					
				OnColumnChanging(SvSrvyQstnColumn.QstnImg, this.entityData.QstnImg);
				this.entityData.QstnImg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyQstnColumn.QstnImg, this.entityData.QstnImg);
				OnPropertyChanged("QstnImg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QstnTblFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsQstnTblFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? QstnTblFlg
		{
			get
			{
				return this.entityData.QstnTblFlg; 
			}
			
			set
			{
				if (this.entityData.QstnTblFlg == value)
					return;
					
				OnColumnChanging(SvSrvyQstnColumn.QstnTblFlg, this.entityData.QstnTblFlg);
				this.entityData.QstnTblFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyQstnColumn.QstnTblFlg, this.entityData.QstnTblFlg);
				OnPropertyChanged("QstnTblFlg");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="SvCdeQstnType"/>.
		/// </summary>
		/// <value>The source SvCdeQstnType for SvCdeQstnTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SvCdeQstnType SvCdeQstnTypeIdSource
      	{
            get { return entityData.SvCdeQstnTypeIdSource; }
            set { entityData.SvCdeQstnTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SvSrvyHdr"/>.
		/// </summary>
		/// <value>The source SvSrvyHdr for SvSrvyHdrId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SvSrvyHdr SvSrvyHdrIdSource
      	{
            get { return entityData.SvSrvyHdrIdSource; }
            set { entityData.SvSrvyHdrIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of SvSrvyAnswr objects
		///	which are related to this object through the relation FK_SV_SRVY_ANSWR_SV_SRVY_QSTN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SvSrvyAnswr> SvSrvyAnswrCollection
		{
			get { return entityData.SvSrvyAnswrCollection; }
			set { entityData.SvSrvyAnswrCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SvSrvyRespondQstn objects
		///	which are related to this object through the relation FK_SV_SRVY_RESPOND_QSTN_SV_SRVY_QSTN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SvSrvyRespondQstn> SvSrvyRespondQstnCollection
		{
			get { return entityData.SvSrvyRespondQstnCollection; }
			set { entityData.SvSrvyRespondQstnCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("QstnAr", "Qstn Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("QstnAr", "Qstn Ar", 250));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("QstnEn", "Qstn En"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("QstnEn", "Qstn En", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HntAr", "Hnt Ar", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HntEn", "Hnt En", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("QstnImg", "Qstn Img", 250));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SV_SRVY_QSTN"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SV_SRVY_QSTN_ID", "SV_SRVY_HDR_ID", "QSTN_AR", "QSTN_EN", "HNT_AR", "HNT_EN", "QSTN_ORDR", "SV_CDE_QSTN_TYPE_ID", "QSTN_MARK", "QSTN_IMG", "QSTN_TBL_FLG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SvSrvyQstnEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SvSrvyQstn) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SvSrvyQstn>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SvSrvyQstn);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SvSrvyQstn Entity 
		///</summary>
		protected virtual SvSrvyQstn Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SvSrvyQstn copy = new SvSrvyQstn();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SvSrvyQstnId = this.SvSrvyQstnId;
					copy.OriginalSvSrvyQstnId = this.OriginalSvSrvyQstnId;
				copy.SvSrvyHdrId = this.SvSrvyHdrId;
				copy.QstnAr = this.QstnAr;
				copy.QstnEn = this.QstnEn;
				copy.HntAr = this.HntAr;
				copy.HntEn = this.HntEn;
				copy.QstnOrdr = this.QstnOrdr;
				copy.SvCdeQstnTypeId = this.SvCdeQstnTypeId;
				copy.QstnMark = this.QstnMark;
				copy.QstnImg = this.QstnImg;
				copy.QstnTblFlg = this.QstnTblFlg;
			
			if (this.SvCdeQstnTypeIdSource != null && existingCopies.Contains(this.SvCdeQstnTypeIdSource))
				copy.SvCdeQstnTypeIdSource = existingCopies[this.SvCdeQstnTypeIdSource] as SvCdeQstnType;
			else
				copy.SvCdeQstnTypeIdSource = MakeCopyOf(this.SvCdeQstnTypeIdSource, existingCopies) as SvCdeQstnType;
			if (this.SvSrvyHdrIdSource != null && existingCopies.Contains(this.SvSrvyHdrIdSource))
				copy.SvSrvyHdrIdSource = existingCopies[this.SvSrvyHdrIdSource] as SvSrvyHdr;
			else
				copy.SvSrvyHdrIdSource = MakeCopyOf(this.SvSrvyHdrIdSource, existingCopies) as SvSrvyHdr;
		
			//deep copy nested objects
			copy.SvSrvyAnswrCollection = (TList<SvSrvyAnswr>) MakeCopyOf(this.SvSrvyAnswrCollection, existingCopies); 
			copy.SvSrvyRespondQstnCollection = (TList<SvSrvyRespondQstn>) MakeCopyOf(this.SvSrvyRespondQstnCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SvSrvyQstn Entity 
		///</summary>
		public virtual SvSrvyQstn Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SvSrvyQstn Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SvSrvyQstn DeepCopy()
		{
			return EntityHelper.Clone<SvSrvyQstn>(this as SvSrvyQstn);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SvSrvyQstnEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SvSrvyQstnEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SvSrvyQstnEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SvSrvyQstnColumn column)
		{
			switch(column)
			{
					case SvSrvyQstnColumn.SvSrvyQstnId:
					return entityData.SvSrvyQstnId != _originalData.SvSrvyQstnId;
					case SvSrvyQstnColumn.SvSrvyHdrId:
					return entityData.SvSrvyHdrId != _originalData.SvSrvyHdrId;
					case SvSrvyQstnColumn.QstnAr:
					return entityData.QstnAr != _originalData.QstnAr;
					case SvSrvyQstnColumn.QstnEn:
					return entityData.QstnEn != _originalData.QstnEn;
					case SvSrvyQstnColumn.HntAr:
					return entityData.HntAr != _originalData.HntAr;
					case SvSrvyQstnColumn.HntEn:
					return entityData.HntEn != _originalData.HntEn;
					case SvSrvyQstnColumn.QstnOrdr:
					return entityData.QstnOrdr != _originalData.QstnOrdr;
					case SvSrvyQstnColumn.SvCdeQstnTypeId:
					return entityData.SvCdeQstnTypeId != _originalData.SvCdeQstnTypeId;
					case SvSrvyQstnColumn.QstnMark:
					return entityData.QstnMark != _originalData.QstnMark;
					case SvSrvyQstnColumn.QstnImg:
					return entityData.QstnImg != _originalData.QstnImg;
					case SvSrvyQstnColumn.QstnTblFlg:
					return entityData.QstnTblFlg != _originalData.QstnTblFlg;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SvSrvyQstnColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SvSrvyQstnId != _originalData.SvSrvyQstnId;
			result = result || entityData.SvSrvyHdrId != _originalData.SvSrvyHdrId;
			result = result || entityData.QstnAr != _originalData.QstnAr;
			result = result || entityData.QstnEn != _originalData.QstnEn;
			result = result || entityData.HntAr != _originalData.HntAr;
			result = result || entityData.HntEn != _originalData.HntEn;
			result = result || entityData.QstnOrdr != _originalData.QstnOrdr;
			result = result || entityData.SvCdeQstnTypeId != _originalData.SvCdeQstnTypeId;
			result = result || entityData.QstnMark != _originalData.QstnMark;
			result = result || entityData.QstnImg != _originalData.QstnImg;
			result = result || entityData.QstnTblFlg != _originalData.QstnTblFlg;
			return result;
		}	
		
		///<summary>
		///  Returns a SvSrvyQstn Entity with the original data.
		///</summary>
		public SvSrvyQstn GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSvSrvyQstn(
				_originalData.SvSrvyQstnId,
				_originalData.SvSrvyHdrId,
				_originalData.QstnAr,
				_originalData.QstnEn,
				_originalData.HntAr,
				_originalData.HntEn,
				_originalData.QstnOrdr,
				_originalData.SvCdeQstnTypeId,
				_originalData.QstnMark,
				_originalData.QstnImg,
				_originalData.QstnTblFlg
				);
				
			return (SvSrvyQstn)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SvSrvyQstnBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SvSrvyQstnBase)
				return ValueEquals(this, (SvSrvyQstnBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SvSrvyQstnBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SvSrvyQstnId.GetHashCode() ^ 
					((this.SvSrvyHdrId == null) ? string.Empty : this.SvSrvyHdrId.ToString()).GetHashCode() ^ 
					this.QstnAr.GetHashCode() ^ 
					this.QstnEn.GetHashCode() ^ 
					((this.HntAr == null) ? string.Empty : this.HntAr.ToString()).GetHashCode() ^ 
					((this.HntEn == null) ? string.Empty : this.HntEn.ToString()).GetHashCode() ^ 
					this.QstnOrdr.GetHashCode() ^ 
					((this.SvCdeQstnTypeId == null) ? string.Empty : this.SvCdeQstnTypeId.ToString()).GetHashCode() ^ 
					((this.QstnMark == null) ? string.Empty : this.QstnMark.ToString()).GetHashCode() ^ 
					((this.QstnImg == null) ? string.Empty : this.QstnImg.ToString()).GetHashCode() ^ 
					((this.QstnTblFlg == null) ? string.Empty : this.QstnTblFlg.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SvSrvyQstnBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SvSrvyQstnBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SvSrvyQstnBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SvSrvyQstnBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SvSrvyQstnBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SvSrvyQstnBase Object1, SvSrvyQstnBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SvSrvyQstnId != Object2.SvSrvyQstnId)
				equal = false;
			if ( Object1.SvSrvyHdrId != null && Object2.SvSrvyHdrId != null )
			{
				if (Object1.SvSrvyHdrId != Object2.SvSrvyHdrId)
					equal = false;
			}
			else if (Object1.SvSrvyHdrId == null ^ Object2.SvSrvyHdrId == null )
			{
				equal = false;
			}
			if (Object1.QstnAr != Object2.QstnAr)
				equal = false;
			if (Object1.QstnEn != Object2.QstnEn)
				equal = false;
			if ( Object1.HntAr != null && Object2.HntAr != null )
			{
				if (Object1.HntAr != Object2.HntAr)
					equal = false;
			}
			else if (Object1.HntAr == null ^ Object2.HntAr == null )
			{
				equal = false;
			}
			if ( Object1.HntEn != null && Object2.HntEn != null )
			{
				if (Object1.HntEn != Object2.HntEn)
					equal = false;
			}
			else if (Object1.HntEn == null ^ Object2.HntEn == null )
			{
				equal = false;
			}
			if (Object1.QstnOrdr != Object2.QstnOrdr)
				equal = false;
			if ( Object1.SvCdeQstnTypeId != null && Object2.SvCdeQstnTypeId != null )
			{
				if (Object1.SvCdeQstnTypeId != Object2.SvCdeQstnTypeId)
					equal = false;
			}
			else if (Object1.SvCdeQstnTypeId == null ^ Object2.SvCdeQstnTypeId == null )
			{
				equal = false;
			}
			if ( Object1.QstnMark != null && Object2.QstnMark != null )
			{
				if (Object1.QstnMark != Object2.QstnMark)
					equal = false;
			}
			else if (Object1.QstnMark == null ^ Object2.QstnMark == null )
			{
				equal = false;
			}
			if ( Object1.QstnImg != null && Object2.QstnImg != null )
			{
				if (Object1.QstnImg != Object2.QstnImg)
					equal = false;
			}
			else if (Object1.QstnImg == null ^ Object2.QstnImg == null )
			{
				equal = false;
			}
			if ( Object1.QstnTblFlg != null && Object2.QstnTblFlg != null )
			{
				if (Object1.QstnTblFlg != Object2.QstnTblFlg)
					equal = false;
			}
			else if (Object1.QstnTblFlg == null ^ Object2.QstnTblFlg == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SvSrvyQstnBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SvSrvyQstnComparer GetComparer()
        {
            return new SvSrvyQstnComparer();
        }
        */

        // Comparer delegates back to SvSrvyQstn
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SvSrvyQstn rhs, SvSrvyQstnColumn which)
        {
            switch (which)
            {
            	
            	
            	case SvSrvyQstnColumn.SvSrvyQstnId:
            		return this.SvSrvyQstnId.CompareTo(rhs.SvSrvyQstnId);
            		
            		                 
            	
            	
            	case SvSrvyQstnColumn.SvSrvyHdrId:
            		return this.SvSrvyHdrId.Value.CompareTo(rhs.SvSrvyHdrId.Value);
            		
            		                 
            	
            	
            	case SvSrvyQstnColumn.QstnAr:
            		return this.QstnAr.CompareTo(rhs.QstnAr);
            		
            		                 
            	
            	
            	case SvSrvyQstnColumn.QstnEn:
            		return this.QstnEn.CompareTo(rhs.QstnEn);
            		
            		                 
            	
            	
            	case SvSrvyQstnColumn.HntAr:
            		return this.HntAr.CompareTo(rhs.HntAr);
            		
            		                 
            	
            	
            	case SvSrvyQstnColumn.HntEn:
            		return this.HntEn.CompareTo(rhs.HntEn);
            		
            		                 
            	
            	
            	case SvSrvyQstnColumn.QstnOrdr:
            		return this.QstnOrdr.CompareTo(rhs.QstnOrdr);
            		
            		                 
            	
            	
            	case SvSrvyQstnColumn.SvCdeQstnTypeId:
            		return this.SvCdeQstnTypeId.Value.CompareTo(rhs.SvCdeQstnTypeId.Value);
            		
            		                 
            	
            	
            	case SvSrvyQstnColumn.QstnMark:
            		return this.QstnMark.Value.CompareTo(rhs.QstnMark.Value);
            		
            		                 
            	
            	
            	case SvSrvyQstnColumn.QstnImg:
            		return this.QstnImg.CompareTo(rhs.QstnImg);
            		
            		                 
            	
            	
            	case SvSrvyQstnColumn.QstnTblFlg:
            		return this.QstnTblFlg.Value.CompareTo(rhs.QstnTblFlg.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SvSrvyQstnKey> Members
		
		// member variable for the EntityId property
		private SvSrvyQstnKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SvSrvyQstnKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SvSrvyQstnKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SvSrvyQstn")
					.Append("|").Append( this.SvSrvyQstnId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- SvSrvyQstnId: {0}{11}- SvSrvyHdrId: {1}{11}- QstnAr: {2}{11}- QstnEn: {3}{11}- HntAr: {4}{11}- HntEn: {5}{11}- QstnOrdr: {6}{11}- SvCdeQstnTypeId: {7}{11}- QstnMark: {8}{11}- QstnImg: {9}{11}- QstnTblFlg: {10}{11}{13}", 
				this.SvSrvyQstnId,
				(this.SvSrvyHdrId == null) ? string.Empty : this.SvSrvyHdrId.ToString(),
				this.QstnAr,
				this.QstnEn,
				(this.HntAr == null) ? string.Empty : this.HntAr.ToString(),
				(this.HntEn == null) ? string.Empty : this.HntEn.ToString(),
				this.QstnOrdr,
				(this.SvCdeQstnTypeId == null) ? string.Empty : this.SvCdeQstnTypeId.ToString(),
				(this.QstnMark == null) ? string.Empty : this.QstnMark.ToString(),
				(this.QstnImg == null) ? string.Empty : this.QstnImg.ToString(),
				(this.QstnTblFlg == null) ? string.Empty : this.QstnTblFlg.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SV_SRVY_QSTN' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SvSrvyQstnEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SV_SRVY_QSTN_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SV_SRVY_QSTN"</remarks>
		public System.Int32 SvSrvyQstnId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Int32 OriginalSvSrvyQstnId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SV_SRVY_HDR_ID : 
		/// </summary>
		public System.Int32?		  SvSrvyHdrId = null;
		
		/// <summary>
		/// QSTN_AR : 
		/// </summary>
		public System.String		  QstnAr = string.Empty;
		
		/// <summary>
		/// QSTN_EN : 
		/// </summary>
		public System.String		  QstnEn = string.Empty;
		
		/// <summary>
		/// HNT_AR : in different font/colour
		/// </summary>
		public System.String		  HntAr = null;
		
		/// <summary>
		/// HNT_EN : in different font/colour
		/// </summary>
		public System.String		  HntEn = null;
		
		/// <summary>
		/// QSTN_ORDR : 
		/// </summary>
		public System.Int32		  QstnOrdr = (int)0;
		
		/// <summary>
		/// SV_CDE_QSTN_TYPE_ID : 
		/// </summary>
		public System.Int32?		  SvCdeQstnTypeId = null;
		
		/// <summary>
		/// QSTN_MARK : Exam radio button
		/// </summary>
		public System.Decimal?		  QstnMark = null;
		
		/// <summary>
		/// QSTN_IMG : PAth of img related to question
		/// </summary>
		public System.String		  QstnImg = null;
		
		/// <summary>
		/// QSTN_TBL_FLG : 
		/// </summary>
		public System.Boolean?		  QstnTblFlg = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private SvCdeQstnType _svCdeQstnTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SvCdeQstnType"/>.
		/// </summary>
		/// <value>The source SvCdeQstnType for SvCdeQstnTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SvCdeQstnType SvCdeQstnTypeIdSource
      	{
            get { return this._svCdeQstnTypeIdSource; }
            set { this._svCdeQstnTypeIdSource = value; }
      	}
		private SvSrvyHdr _svSrvyHdrIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SvSrvyHdr"/>.
		/// </summary>
		/// <value>The source SvSrvyHdr for SvSrvyHdrId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SvSrvyHdr SvSrvyHdrIdSource
      	{
            get { return this._svSrvyHdrIdSource; }
            set { this._svSrvyHdrIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region SvSrvyAnswrCollection
		
		private TList<SvSrvyAnswr> _svSrvyAnswrSvSrvyQstnId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _svSrvyAnswrSvSrvyQstnId
		/// </summary>
		
		public TList<SvSrvyAnswr> SvSrvyAnswrCollection
		{
			get
			{
				if (_svSrvyAnswrSvSrvyQstnId == null)
				{
				_svSrvyAnswrSvSrvyQstnId = new TList<SvSrvyAnswr>();
				}
	
				return _svSrvyAnswrSvSrvyQstnId;
			}
			set { _svSrvyAnswrSvSrvyQstnId = value; }
		}
		
		#endregion

		#region SvSrvyRespondQstnCollection
		
		private TList<SvSrvyRespondQstn> _svSrvyRespondQstnSvSrvyQstnId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _svSrvyRespondQstnSvSrvyQstnId
		/// </summary>
		
		public TList<SvSrvyRespondQstn> SvSrvyRespondQstnCollection
		{
			get
			{
				if (_svSrvyRespondQstnSvSrvyQstnId == null)
				{
				_svSrvyRespondQstnSvSrvyQstnId = new TList<SvSrvyRespondQstn>();
				}
	
				return _svSrvyRespondQstnSvSrvyQstnId;
			}
			set { _svSrvyRespondQstnSvSrvyQstnId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SvSrvyQstnEntityData _tmp = new SvSrvyQstnEntityData();
						
			_tmp.SvSrvyQstnId = this.SvSrvyQstnId;
			_tmp.OriginalSvSrvyQstnId = this.OriginalSvSrvyQstnId;
			
			_tmp.SvSrvyHdrId = this.SvSrvyHdrId;
			_tmp.QstnAr = this.QstnAr;
			_tmp.QstnEn = this.QstnEn;
			_tmp.HntAr = this.HntAr;
			_tmp.HntEn = this.HntEn;
			_tmp.QstnOrdr = this.QstnOrdr;
			_tmp.SvCdeQstnTypeId = this.SvCdeQstnTypeId;
			_tmp.QstnMark = this.QstnMark;
			_tmp.QstnImg = this.QstnImg;
			_tmp.QstnTblFlg = this.QstnTblFlg;
			
			#region Source Parent Composite Entities
			if (this.SvCdeQstnTypeIdSource != null)
				_tmp.SvCdeQstnTypeIdSource = MakeCopyOf(this.SvCdeQstnTypeIdSource) as SvCdeQstnType;
			if (this.SvSrvyHdrIdSource != null)
				_tmp.SvSrvyHdrIdSource = MakeCopyOf(this.SvSrvyHdrIdSource) as SvSrvyHdr;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._svSrvyAnswrSvSrvyQstnId != null)
				_tmp.SvSrvyAnswrCollection = (TList<SvSrvyAnswr>) MakeCopyOf(this.SvSrvyAnswrCollection); 
			if (this._svSrvyRespondQstnSvSrvyQstnId != null)
				_tmp.SvSrvyRespondQstnCollection = (TList<SvSrvyRespondQstn>) MakeCopyOf(this.SvSrvyRespondQstnCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SvSrvyQstnEntityData _tmp = new SvSrvyQstnEntityData();
						
			_tmp.SvSrvyQstnId = this.SvSrvyQstnId;
			_tmp.OriginalSvSrvyQstnId = this.OriginalSvSrvyQstnId;
			
			_tmp.SvSrvyHdrId = this.SvSrvyHdrId;
			_tmp.QstnAr = this.QstnAr;
			_tmp.QstnEn = this.QstnEn;
			_tmp.HntAr = this.HntAr;
			_tmp.HntEn = this.HntEn;
			_tmp.QstnOrdr = this.QstnOrdr;
			_tmp.SvCdeQstnTypeId = this.SvCdeQstnTypeId;
			_tmp.QstnMark = this.QstnMark;
			_tmp.QstnImg = this.QstnImg;
			_tmp.QstnTblFlg = this.QstnTblFlg;
			
			#region Source Parent Composite Entities
			if (this.SvCdeQstnTypeIdSource != null && existingCopies.Contains(this.SvCdeQstnTypeIdSource))
				_tmp.SvCdeQstnTypeIdSource = existingCopies[this.SvCdeQstnTypeIdSource] as SvCdeQstnType;
			else
				_tmp.SvCdeQstnTypeIdSource = MakeCopyOf(this.SvCdeQstnTypeIdSource, existingCopies) as SvCdeQstnType;
			if (this.SvSrvyHdrIdSource != null && existingCopies.Contains(this.SvSrvyHdrIdSource))
				_tmp.SvSrvyHdrIdSource = existingCopies[this.SvSrvyHdrIdSource] as SvSrvyHdr;
			else
				_tmp.SvSrvyHdrIdSource = MakeCopyOf(this.SvSrvyHdrIdSource, existingCopies) as SvSrvyHdr;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.SvSrvyAnswrCollection = (TList<SvSrvyAnswr>) MakeCopyOf(this.SvSrvyAnswrCollection, existingCopies); 
			_tmp.SvSrvyRespondQstnCollection = (TList<SvSrvyRespondQstn>) MakeCopyOf(this.SvSrvyRespondQstnCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvSrvyQstnColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SvSrvyQstnColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvSrvyQstnColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SvSrvyQstnColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvSrvyQstnColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SvSrvyQstnColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SvSrvyQstnEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SvSrvyQstnEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvSrvyQstnColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SvSrvyQstnColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SvSrvyQstnEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SvSrvyQstnEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SvSrvyQstnEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SvSrvyQstn"/> object.
	/// </remarks>
	public class SvSrvyQstnEventArgs : System.EventArgs
	{
		private SvSrvyQstnColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SvSrvyQstnEventArgs class.
		///</summary>
		public SvSrvyQstnEventArgs(SvSrvyQstnColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SvSrvyQstnEventArgs class.
		///</summary>
		public SvSrvyQstnEventArgs(SvSrvyQstnColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SvSrvyQstnColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SvSrvyQstnColumn" />
		public SvSrvyQstnColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SvSrvyQstn related events.
	///</summary>
	public delegate void SvSrvyQstnEventHandler(object sender, SvSrvyQstnEventArgs e);
	
	#region SvSrvyQstnComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SvSrvyQstnComparer : System.Collections.Generic.IComparer<SvSrvyQstn>
	{
		SvSrvyQstnColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SvSrvyQstnComparer"/> class.
        /// </summary>
		public SvSrvyQstnComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SvSrvyQstnComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SvSrvyQstnComparer(SvSrvyQstnColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SvSrvyQstn"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SvSrvyQstn"/> to compare.</param>
        /// <param name="b">The second <c>SvSrvyQstn</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SvSrvyQstn a, SvSrvyQstn b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SvSrvyQstn entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SvSrvyQstn a, SvSrvyQstn b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SvSrvyQstnColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SvSrvyQstnKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SvSrvyQstn"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SvSrvyQstnKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SvSrvyQstnKey class.
		/// </summary>
		public SvSrvyQstnKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SvSrvyQstnKey class.
		/// </summary>
		public SvSrvyQstnKey(SvSrvyQstnBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SvSrvyQstnId = entity.SvSrvyQstnId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SvSrvyQstnKey class.
		/// </summary>
		public SvSrvyQstnKey(System.Int32 _svSrvyQstnId)
		{
			#region Init Properties

			this.SvSrvyQstnId = _svSrvyQstnId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SvSrvyQstnBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SvSrvyQstnBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SvSrvyQstnId property
		private System.Int32 _svSrvyQstnId;
		
		/// <summary>
		/// Gets or sets the SvSrvyQstnId property.
		/// </summary>
		public System.Int32 SvSrvyQstnId
		{
			get { return _svSrvyQstnId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SvSrvyQstnId = value;
				
				_svSrvyQstnId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SvSrvyQstnId = ( values["SvSrvyQstnId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["SvSrvyQstnId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SvSrvyQstnId", SvSrvyQstnId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SvSrvyQstnId: {0}{1}",
								SvSrvyQstnId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SvSrvyQstnColumn Enum
	
	/// <summary>
	/// Enumerate the SvSrvyQstn columns.
	/// </summary>
	[Serializable]
	public enum SvSrvyQstnColumn : int
	{
		/// <summary>
		/// SvSrvyQstnId : 
		/// </summary>
		[EnumTextValue("SV_SRVY_QSTN_ID")]
		[ColumnEnum("SV_SRVY_QSTN_ID", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		SvSrvyQstnId = 1,
		/// <summary>
		/// SvSrvyHdrId : 
		/// </summary>
		[EnumTextValue("SV_SRVY_HDR_ID")]
		[ColumnEnum("SV_SRVY_HDR_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SvSrvyHdrId = 2,
		/// <summary>
		/// QstnAr : 
		/// </summary>
		[EnumTextValue("QSTN_AR")]
		[ColumnEnum("QSTN_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 250)]
		QstnAr = 3,
		/// <summary>
		/// QstnEn : 
		/// </summary>
		[EnumTextValue("QSTN_EN")]
		[ColumnEnum("QSTN_EN", typeof(System.String), System.Data.DbType.String, false, false, false, 250)]
		QstnEn = 4,
		/// <summary>
		/// HntAr : in different font/colour
		/// </summary>
		[EnumTextValue("HNT_AR")]
		[ColumnEnum("HNT_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		HntAr = 5,
		/// <summary>
		/// HntEn : in different font/colour
		/// </summary>
		[EnumTextValue("HNT_EN")]
		[ColumnEnum("HNT_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		HntEn = 6,
		/// <summary>
		/// QstnOrdr : 
		/// </summary>
		[EnumTextValue("QSTN_ORDR")]
		[ColumnEnum("QSTN_ORDR", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		QstnOrdr = 7,
		/// <summary>
		/// SvCdeQstnTypeId : 
		/// </summary>
		[EnumTextValue("SV_CDE_QSTN_TYPE_ID")]
		[ColumnEnum("SV_CDE_QSTN_TYPE_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SvCdeQstnTypeId = 8,
		/// <summary>
		/// QstnMark : Exam radio button
		/// </summary>
		[EnumTextValue("QSTN_MARK")]
		[ColumnEnum("QSTN_MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		QstnMark = 9,
		/// <summary>
		/// QstnImg : PAth of img related to question
		/// </summary>
		[EnumTextValue("QSTN_IMG")]
		[ColumnEnum("QSTN_IMG", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		QstnImg = 10,
		/// <summary>
		/// QstnTblFlg : 
		/// </summary>
		[EnumTextValue("QSTN_TBL_FLG")]
		[ColumnEnum("QSTN_TBL_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		QstnTblFlg = 11
	}//End enum

	#endregion SvSrvyQstnColumn Enum

} // end namespace
