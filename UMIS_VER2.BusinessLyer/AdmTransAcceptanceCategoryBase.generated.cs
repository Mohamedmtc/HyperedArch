
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AdmTransAcceptanceCategory.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ADM_TRANS_ACCEPTANCE_CATEGORY' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AdmTransAcceptanceCategoryBase : EntityBase, IAdmTransAcceptanceCategory, IEntityId<AdmTransAcceptanceCategoryKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AdmTransAcceptanceCategoryEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AdmTransAcceptanceCategoryEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AdmTransAcceptanceCategoryEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AdmTransAcceptanceCategory> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmTransAcceptanceCategoryEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmTransAcceptanceCategoryEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AdmTransAcceptanceCategoryBase"/> instance.
		///</summary>
		public AdmTransAcceptanceCategoryBase()
		{
			this.entityData = new AdmTransAcceptanceCategoryEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AdmTransAcceptanceCategoryBase"/> instance.
		///</summary>
		///<param name="_admTransAcceptanceCategoryId"></param>
		///<param name="_categoryNameEn"></param>
		///<param name="_categoryNameAr"></param>
		///<param name="_categoryType"></param>
		///<param name="_categoryValue"></param>
		///<param name="_abbreviationEn"></param>
		///<param name="_abbreviationAr"></param>
		///<param name="_regExpiration"></param>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_asCodeDegreeId"></param>
		///<param name="_admCodeTransferTypeId"></param>
		public AdmTransAcceptanceCategoryBase(System.Decimal _admTransAcceptanceCategoryId, System.String _categoryNameEn, 
			System.String _categoryNameAr, System.Decimal _categoryType, System.Decimal _categoryValue, 
			System.String _abbreviationEn, System.String _abbreviationAr, 
			System.String _regExpiration, System.Decimal _asCodeDegreeClassId, 
			System.Decimal _asCodeDegreeId, System.Decimal _admCodeTransferTypeId)
		{
			this.entityData = new AdmTransAcceptanceCategoryEntityData();
			this.backupData = null;

			this.AdmTransAcceptanceCategoryId = _admTransAcceptanceCategoryId;
			this.CategoryNameEn = _categoryNameEn;
			this.CategoryNameAr = _categoryNameAr;
			this.CategoryType = _categoryType;
			this.CategoryValue = _categoryValue;
			this.AbbreviationEn = _abbreviationEn;
			this.AbbreviationAr = _abbreviationAr;
			this.RegExpiration = _regExpiration;
			this.AsCodeDegreeClassId = _asCodeDegreeClassId;
			this.AsCodeDegreeId = _asCodeDegreeId;
			this.AdmCodeTransferTypeId = _admCodeTransferTypeId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AdmTransAcceptanceCategory"/> instance.
		///</summary>
		///<param name="_admTransAcceptanceCategoryId"></param>
		///<param name="_categoryNameEn"></param>
		///<param name="_categoryNameAr"></param>
		///<param name="_categoryType"></param>
		///<param name="_categoryValue"></param>
		///<param name="_abbreviationEn"></param>
		///<param name="_abbreviationAr"></param>
		///<param name="_regExpiration"></param>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_asCodeDegreeId"></param>
		///<param name="_admCodeTransferTypeId"></param>
		public static AdmTransAcceptanceCategory CreateAdmTransAcceptanceCategory(System.Decimal _admTransAcceptanceCategoryId, System.String _categoryNameEn, 
			System.String _categoryNameAr, System.Decimal _categoryType, System.Decimal _categoryValue, 
			System.String _abbreviationEn, System.String _abbreviationAr, 
			System.String _regExpiration, System.Decimal _asCodeDegreeClassId, 
			System.Decimal _asCodeDegreeId, System.Decimal _admCodeTransferTypeId)
		{
			AdmTransAcceptanceCategory newAdmTransAcceptanceCategory = new AdmTransAcceptanceCategory();
			newAdmTransAcceptanceCategory.AdmTransAcceptanceCategoryId = _admTransAcceptanceCategoryId;
			newAdmTransAcceptanceCategory.CategoryNameEn = _categoryNameEn;
			newAdmTransAcceptanceCategory.CategoryNameAr = _categoryNameAr;
			newAdmTransAcceptanceCategory.CategoryType = _categoryType;
			newAdmTransAcceptanceCategory.CategoryValue = _categoryValue;
			newAdmTransAcceptanceCategory.AbbreviationEn = _abbreviationEn;
			newAdmTransAcceptanceCategory.AbbreviationAr = _abbreviationAr;
			newAdmTransAcceptanceCategory.RegExpiration = _regExpiration;
			newAdmTransAcceptanceCategory.AsCodeDegreeClassId = _asCodeDegreeClassId;
			newAdmTransAcceptanceCategory.AsCodeDegreeId = _asCodeDegreeId;
			newAdmTransAcceptanceCategory.AdmCodeTransferTypeId = _admCodeTransferTypeId;
			return newAdmTransAcceptanceCategory;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AdmTransAcceptanceCategoryId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal AdmTransAcceptanceCategoryId
		{
			get
			{
				return this.entityData.AdmTransAcceptanceCategoryId; 
			}
			
			set
			{
				if (this.entityData.AdmTransAcceptanceCategoryId == value)
					return;
					
				OnColumnChanging(AdmTransAcceptanceCategoryColumn.AdmTransAcceptanceCategoryId, this.entityData.AdmTransAcceptanceCategoryId);
				this.entityData.AdmTransAcceptanceCategoryId = value;
				this.EntityId.AdmTransAcceptanceCategoryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmTransAcceptanceCategoryColumn.AdmTransAcceptanceCategoryId, this.entityData.AdmTransAcceptanceCategoryId);
				OnPropertyChanged("AdmTransAcceptanceCategoryId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ADM_TRANS_ACCEPTANCE_CATEGORY_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ADM_TRANS_ACCEPTANCE_CATEGORY_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalAdmTransAcceptanceCategoryId
		{
			get { return this.entityData.OriginalAdmTransAcceptanceCategoryId; }
			set { this.entityData.OriginalAdmTransAcceptanceCategoryId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the CategoryNameEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String CategoryNameEn
		{
			get
			{
				return this.entityData.CategoryNameEn; 
			}
			
			set
			{
				if (this.entityData.CategoryNameEn == value)
					return;
					
				OnColumnChanging(AdmTransAcceptanceCategoryColumn.CategoryNameEn, this.entityData.CategoryNameEn);
				this.entityData.CategoryNameEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmTransAcceptanceCategoryColumn.CategoryNameEn, this.entityData.CategoryNameEn);
				OnPropertyChanged("CategoryNameEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CategoryNameAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String CategoryNameAr
		{
			get
			{
				return this.entityData.CategoryNameAr; 
			}
			
			set
			{
				if (this.entityData.CategoryNameAr == value)
					return;
					
				OnColumnChanging(AdmTransAcceptanceCategoryColumn.CategoryNameAr, this.entityData.CategoryNameAr);
				this.entityData.CategoryNameAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmTransAcceptanceCategoryColumn.CategoryNameAr, this.entityData.CategoryNameAr);
				OnPropertyChanged("CategoryNameAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CategoryType property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal CategoryType
		{
			get
			{
				return this.entityData.CategoryType; 
			}
			
			set
			{
				if (this.entityData.CategoryType == value)
					return;
					
				OnColumnChanging(AdmTransAcceptanceCategoryColumn.CategoryType, this.entityData.CategoryType);
				this.entityData.CategoryType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmTransAcceptanceCategoryColumn.CategoryType, this.entityData.CategoryType);
				OnPropertyChanged("CategoryType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CategoryValue property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal CategoryValue
		{
			get
			{
				return this.entityData.CategoryValue; 
			}
			
			set
			{
				if (this.entityData.CategoryValue == value)
					return;
					
				OnColumnChanging(AdmTransAcceptanceCategoryColumn.CategoryValue, this.entityData.CategoryValue);
				this.entityData.CategoryValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmTransAcceptanceCategoryColumn.CategoryValue, this.entityData.CategoryValue);
				OnPropertyChanged("CategoryValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AbbreviationEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String AbbreviationEn
		{
			get
			{
				return this.entityData.AbbreviationEn; 
			}
			
			set
			{
				if (this.entityData.AbbreviationEn == value)
					return;
					
				OnColumnChanging(AdmTransAcceptanceCategoryColumn.AbbreviationEn, this.entityData.AbbreviationEn);
				this.entityData.AbbreviationEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmTransAcceptanceCategoryColumn.AbbreviationEn, this.entityData.AbbreviationEn);
				OnPropertyChanged("AbbreviationEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AbbreviationAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String AbbreviationAr
		{
			get
			{
				return this.entityData.AbbreviationAr; 
			}
			
			set
			{
				if (this.entityData.AbbreviationAr == value)
					return;
					
				OnColumnChanging(AdmTransAcceptanceCategoryColumn.AbbreviationAr, this.entityData.AbbreviationAr);
				this.entityData.AbbreviationAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmTransAcceptanceCategoryColumn.AbbreviationAr, this.entityData.AbbreviationAr);
				OnPropertyChanged("AbbreviationAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RegExpiration property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String RegExpiration
		{
			get
			{
				return this.entityData.RegExpiration; 
			}
			
			set
			{
				if (this.entityData.RegExpiration == value)
					return;
					
				OnColumnChanging(AdmTransAcceptanceCategoryColumn.RegExpiration, this.entityData.RegExpiration);
				this.entityData.RegExpiration = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmTransAcceptanceCategoryColumn.RegExpiration, this.entityData.RegExpiration);
				OnPropertyChanged("RegExpiration");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeClassId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsCodeDegreeClassId
		{
			get
			{
				return this.entityData.AsCodeDegreeClassId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeClassId == value)
					return;
					
				OnColumnChanging(AdmTransAcceptanceCategoryColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				this.entityData.AsCodeDegreeClassId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmTransAcceptanceCategoryColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				OnPropertyChanged("AsCodeDegreeClassId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsCodeDegreeId
		{
			get
			{
				return this.entityData.AsCodeDegreeId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeId == value)
					return;
					
				OnColumnChanging(AdmTransAcceptanceCategoryColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				this.entityData.AsCodeDegreeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmTransAcceptanceCategoryColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				OnPropertyChanged("AsCodeDegreeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmCodeTransferTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AdmCodeTransferTypeId
		{
			get
			{
				return this.entityData.AdmCodeTransferTypeId; 
			}
			
			set
			{
				if (this.entityData.AdmCodeTransferTypeId == value)
					return;
					
				OnColumnChanging(AdmTransAcceptanceCategoryColumn.AdmCodeTransferTypeId, this.entityData.AdmCodeTransferTypeId);
				this.entityData.AdmCodeTransferTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmTransAcceptanceCategoryColumn.AdmCodeTransferTypeId, this.entityData.AdmCodeTransferTypeId);
				OnPropertyChanged("AdmCodeTransferTypeId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdmCodeTransferType"/>.
		/// </summary>
		/// <value>The source AdmCodeTransferType for AdmCodeTransferTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmCodeTransferType AdmCodeTransferTypeIdSource
      	{
            get { return entityData.AdmCodeTransferTypeIdSource; }
            set { entityData.AdmCodeTransferTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return entityData.AsCodeDegreeIdSource; }
            set { entityData.AsCodeDegreeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return entityData.AsCodeDegreeClassIdSource; }
            set { entityData.AsCodeDegreeClassIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of AdmTransferAcceptance objects
		///	which are related to this object through the relation FK_ADM_TRANSFER_ACCEPTANCE_ADM_TRANS_ACCEPTANCE_CATEGORY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmTransferAcceptance> AdmTransferAcceptanceCollection
		{
			get { return entityData.AdmTransferAcceptanceCollection; }
			set { entityData.AdmTransferAcceptanceCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmIntTransferAcceptance objects
		///	which are related to this object through the relation FK_ADM_INT_TRANSFER_ACCEPTANCE_ADM_TRANS_ACCEPTANCE_CATEGORY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmIntTransferAcceptance> AdmIntTransferAcceptanceCollection
		{
			get { return entityData.AdmIntTransferAcceptanceCollection; }
			set { entityData.AdmIntTransferAcceptanceCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("CategoryNameEn", "Category Name En"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CategoryNameEn", "Category Name En", 100));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("CategoryNameAr", "Category Name Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CategoryNameAr", "Category Name Ar", 100));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("AbbreviationEn", "Abbreviation En"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AbbreviationEn", "Abbreviation En", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("AbbreviationAr", "Abbreviation Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AbbreviationAr", "Abbreviation Ar", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("RegExpiration", "Reg Expiration", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ADM_TRANS_ACCEPTANCE_CATEGORY"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ADM_TRANS_ACCEPTANCE_CATEGORY_ID", "CATEGORY_NAME_EN", "CATEGORY_NAME_AR", "CATEGORY_TYPE", "CATEGORY_VALUE", "ABBREVIATION_EN", "ABBREVIATION_AR", "REG_EXPIRATION", "AS_CODE_DEGREE_CLASS_ID", "AS_CODE_DEGREE_ID", "ADM_CODE_TRANSFER_TYPE_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AdmTransAcceptanceCategoryEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AdmTransAcceptanceCategory) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AdmTransAcceptanceCategory>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AdmTransAcceptanceCategory);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AdmTransAcceptanceCategory Entity 
		///</summary>
		protected virtual AdmTransAcceptanceCategory Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AdmTransAcceptanceCategory copy = new AdmTransAcceptanceCategory();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AdmTransAcceptanceCategoryId = this.AdmTransAcceptanceCategoryId;
					copy.OriginalAdmTransAcceptanceCategoryId = this.OriginalAdmTransAcceptanceCategoryId;
				copy.CategoryNameEn = this.CategoryNameEn;
				copy.CategoryNameAr = this.CategoryNameAr;
				copy.CategoryType = this.CategoryType;
				copy.CategoryValue = this.CategoryValue;
				copy.AbbreviationEn = this.AbbreviationEn;
				copy.AbbreviationAr = this.AbbreviationAr;
				copy.RegExpiration = this.RegExpiration;
				copy.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
				copy.AsCodeDegreeId = this.AsCodeDegreeId;
				copy.AdmCodeTransferTypeId = this.AdmCodeTransferTypeId;
			
			if (this.AdmCodeTransferTypeIdSource != null && existingCopies.Contains(this.AdmCodeTransferTypeIdSource))
				copy.AdmCodeTransferTypeIdSource = existingCopies[this.AdmCodeTransferTypeIdSource] as AdmCodeTransferType;
			else
				copy.AdmCodeTransferTypeIdSource = MakeCopyOf(this.AdmCodeTransferTypeIdSource, existingCopies) as AdmCodeTransferType;
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				copy.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				copy.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				copy.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				copy.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
		
			//deep copy nested objects
			copy.AdmTransferAcceptanceCollection = (TList<AdmTransferAcceptance>) MakeCopyOf(this.AdmTransferAcceptanceCollection, existingCopies); 
			copy.AdmIntTransferAcceptanceCollection = (TList<AdmIntTransferAcceptance>) MakeCopyOf(this.AdmIntTransferAcceptanceCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AdmTransAcceptanceCategory Entity 
		///</summary>
		public virtual AdmTransAcceptanceCategory Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AdmTransAcceptanceCategory Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AdmTransAcceptanceCategory DeepCopy()
		{
			return EntityHelper.Clone<AdmTransAcceptanceCategory>(this as AdmTransAcceptanceCategory);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AdmTransAcceptanceCategoryEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AdmTransAcceptanceCategoryEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AdmTransAcceptanceCategoryEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AdmTransAcceptanceCategoryColumn column)
		{
			switch(column)
			{
					case AdmTransAcceptanceCategoryColumn.AdmTransAcceptanceCategoryId:
					return entityData.AdmTransAcceptanceCategoryId != _originalData.AdmTransAcceptanceCategoryId;
					case AdmTransAcceptanceCategoryColumn.CategoryNameEn:
					return entityData.CategoryNameEn != _originalData.CategoryNameEn;
					case AdmTransAcceptanceCategoryColumn.CategoryNameAr:
					return entityData.CategoryNameAr != _originalData.CategoryNameAr;
					case AdmTransAcceptanceCategoryColumn.CategoryType:
					return entityData.CategoryType != _originalData.CategoryType;
					case AdmTransAcceptanceCategoryColumn.CategoryValue:
					return entityData.CategoryValue != _originalData.CategoryValue;
					case AdmTransAcceptanceCategoryColumn.AbbreviationEn:
					return entityData.AbbreviationEn != _originalData.AbbreviationEn;
					case AdmTransAcceptanceCategoryColumn.AbbreviationAr:
					return entityData.AbbreviationAr != _originalData.AbbreviationAr;
					case AdmTransAcceptanceCategoryColumn.RegExpiration:
					return entityData.RegExpiration != _originalData.RegExpiration;
					case AdmTransAcceptanceCategoryColumn.AsCodeDegreeClassId:
					return entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
					case AdmTransAcceptanceCategoryColumn.AsCodeDegreeId:
					return entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
					case AdmTransAcceptanceCategoryColumn.AdmCodeTransferTypeId:
					return entityData.AdmCodeTransferTypeId != _originalData.AdmCodeTransferTypeId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AdmTransAcceptanceCategoryColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AdmTransAcceptanceCategoryId != _originalData.AdmTransAcceptanceCategoryId;
			result = result || entityData.CategoryNameEn != _originalData.CategoryNameEn;
			result = result || entityData.CategoryNameAr != _originalData.CategoryNameAr;
			result = result || entityData.CategoryType != _originalData.CategoryType;
			result = result || entityData.CategoryValue != _originalData.CategoryValue;
			result = result || entityData.AbbreviationEn != _originalData.AbbreviationEn;
			result = result || entityData.AbbreviationAr != _originalData.AbbreviationAr;
			result = result || entityData.RegExpiration != _originalData.RegExpiration;
			result = result || entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
			result = result || entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
			result = result || entityData.AdmCodeTransferTypeId != _originalData.AdmCodeTransferTypeId;
			return result;
		}	
		
		///<summary>
		///  Returns a AdmTransAcceptanceCategory Entity with the original data.
		///</summary>
		public AdmTransAcceptanceCategory GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAdmTransAcceptanceCategory(
				_originalData.AdmTransAcceptanceCategoryId,
				_originalData.CategoryNameEn,
				_originalData.CategoryNameAr,
				_originalData.CategoryType,
				_originalData.CategoryValue,
				_originalData.AbbreviationEn,
				_originalData.AbbreviationAr,
				_originalData.RegExpiration,
				_originalData.AsCodeDegreeClassId,
				_originalData.AsCodeDegreeId,
				_originalData.AdmCodeTransferTypeId
				);
				
			return (AdmTransAcceptanceCategory)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AdmTransAcceptanceCategoryBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AdmTransAcceptanceCategoryBase)
				return ValueEquals(this, (AdmTransAcceptanceCategoryBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AdmTransAcceptanceCategoryBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AdmTransAcceptanceCategoryId.GetHashCode() ^ 
					this.CategoryNameEn.GetHashCode() ^ 
					this.CategoryNameAr.GetHashCode() ^ 
					this.CategoryType.GetHashCode() ^ 
					this.CategoryValue.GetHashCode() ^ 
					this.AbbreviationEn.GetHashCode() ^ 
					this.AbbreviationAr.GetHashCode() ^ 
					((this.RegExpiration == null) ? string.Empty : this.RegExpiration.ToString()).GetHashCode() ^ 
					this.AsCodeDegreeClassId.GetHashCode() ^ 
					this.AsCodeDegreeId.GetHashCode() ^ 
					this.AdmCodeTransferTypeId.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AdmTransAcceptanceCategoryBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AdmTransAcceptanceCategoryBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AdmTransAcceptanceCategoryBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AdmTransAcceptanceCategoryBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AdmTransAcceptanceCategoryBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AdmTransAcceptanceCategoryBase Object1, AdmTransAcceptanceCategoryBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AdmTransAcceptanceCategoryId != Object2.AdmTransAcceptanceCategoryId)
				equal = false;
			if (Object1.CategoryNameEn != Object2.CategoryNameEn)
				equal = false;
			if (Object1.CategoryNameAr != Object2.CategoryNameAr)
				equal = false;
			if (Object1.CategoryType != Object2.CategoryType)
				equal = false;
			if (Object1.CategoryValue != Object2.CategoryValue)
				equal = false;
			if (Object1.AbbreviationEn != Object2.AbbreviationEn)
				equal = false;
			if (Object1.AbbreviationAr != Object2.AbbreviationAr)
				equal = false;
			if ( Object1.RegExpiration != null && Object2.RegExpiration != null )
			{
				if (Object1.RegExpiration != Object2.RegExpiration)
					equal = false;
			}
			else if (Object1.RegExpiration == null ^ Object2.RegExpiration == null )
			{
				equal = false;
			}
			if (Object1.AsCodeDegreeClassId != Object2.AsCodeDegreeClassId)
				equal = false;
			if (Object1.AsCodeDegreeId != Object2.AsCodeDegreeId)
				equal = false;
			if (Object1.AdmCodeTransferTypeId != Object2.AdmCodeTransferTypeId)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AdmTransAcceptanceCategoryBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AdmTransAcceptanceCategoryComparer GetComparer()
        {
            return new AdmTransAcceptanceCategoryComparer();
        }
        */

        // Comparer delegates back to AdmTransAcceptanceCategory
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AdmTransAcceptanceCategory rhs, AdmTransAcceptanceCategoryColumn which)
        {
            switch (which)
            {
            	
            	
            	case AdmTransAcceptanceCategoryColumn.AdmTransAcceptanceCategoryId:
            		return this.AdmTransAcceptanceCategoryId.CompareTo(rhs.AdmTransAcceptanceCategoryId);
            		
            		                 
            	
            	
            	case AdmTransAcceptanceCategoryColumn.CategoryNameEn:
            		return this.CategoryNameEn.CompareTo(rhs.CategoryNameEn);
            		
            		                 
            	
            	
            	case AdmTransAcceptanceCategoryColumn.CategoryNameAr:
            		return this.CategoryNameAr.CompareTo(rhs.CategoryNameAr);
            		
            		                 
            	
            	
            	case AdmTransAcceptanceCategoryColumn.CategoryType:
            		return this.CategoryType.CompareTo(rhs.CategoryType);
            		
            		                 
            	
            	
            	case AdmTransAcceptanceCategoryColumn.CategoryValue:
            		return this.CategoryValue.CompareTo(rhs.CategoryValue);
            		
            		                 
            	
            	
            	case AdmTransAcceptanceCategoryColumn.AbbreviationEn:
            		return this.AbbreviationEn.CompareTo(rhs.AbbreviationEn);
            		
            		                 
            	
            	
            	case AdmTransAcceptanceCategoryColumn.AbbreviationAr:
            		return this.AbbreviationAr.CompareTo(rhs.AbbreviationAr);
            		
            		                 
            	
            	
            	case AdmTransAcceptanceCategoryColumn.RegExpiration:
            		return this.RegExpiration.CompareTo(rhs.RegExpiration);
            		
            		                 
            	
            	
            	case AdmTransAcceptanceCategoryColumn.AsCodeDegreeClassId:
            		return this.AsCodeDegreeClassId.CompareTo(rhs.AsCodeDegreeClassId);
            		
            		                 
            	
            	
            	case AdmTransAcceptanceCategoryColumn.AsCodeDegreeId:
            		return this.AsCodeDegreeId.CompareTo(rhs.AsCodeDegreeId);
            		
            		                 
            	
            	
            	case AdmTransAcceptanceCategoryColumn.AdmCodeTransferTypeId:
            		return this.AdmCodeTransferTypeId.CompareTo(rhs.AdmCodeTransferTypeId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AdmTransAcceptanceCategoryKey> Members
		
		// member variable for the EntityId property
		private AdmTransAcceptanceCategoryKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AdmTransAcceptanceCategoryKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AdmTransAcceptanceCategoryKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AdmTransAcceptanceCategory")
					.Append("|").Append( this.AdmTransAcceptanceCategoryId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- AdmTransAcceptanceCategoryId: {0}{11}- CategoryNameEn: {1}{11}- CategoryNameAr: {2}{11}- CategoryType: {3}{11}- CategoryValue: {4}{11}- AbbreviationEn: {5}{11}- AbbreviationAr: {6}{11}- RegExpiration: {7}{11}- AsCodeDegreeClassId: {8}{11}- AsCodeDegreeId: {9}{11}- AdmCodeTransferTypeId: {10}{11}{13}", 
				this.AdmTransAcceptanceCategoryId,
				this.CategoryNameEn,
				this.CategoryNameAr,
				this.CategoryType,
				this.CategoryValue,
				this.AbbreviationEn,
				this.AbbreviationAr,
				(this.RegExpiration == null) ? string.Empty : this.RegExpiration.ToString(),
				this.AsCodeDegreeClassId,
				this.AsCodeDegreeId,
				this.AdmCodeTransferTypeId,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ADM_TRANS_ACCEPTANCE_CATEGORY' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AdmTransAcceptanceCategoryEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ADM_TRANS_ACCEPTANCE_CATEGORY_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ADM_TRANS_ACCEPTANCE_CATEGORY"</remarks>
		public System.Decimal AdmTransAcceptanceCategoryId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalAdmTransAcceptanceCategoryId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// CATEGORY_NAME_EN : 
		/// </summary>
		public System.String		  CategoryNameEn = string.Empty;
		
		/// <summary>
		/// CATEGORY_NAME_AR : 
		/// </summary>
		public System.String		  CategoryNameAr = string.Empty;
		
		/// <summary>
		/// CATEGORY_TYPE : 
		/// </summary>
		public System.Decimal		  CategoryType = 0.0m;
		
		/// <summary>
		/// CATEGORY_VALUE : 
		/// </summary>
		public System.Decimal		  CategoryValue = 0.0m;
		
		/// <summary>
		/// ABBREVIATION_EN : 
		/// </summary>
		public System.String		  AbbreviationEn = string.Empty;
		
		/// <summary>
		/// ABBREVIATION_AR : 
		/// </summary>
		public System.String		  AbbreviationAr = string.Empty;
		
		/// <summary>
		/// REG_EXPIRATION : 
		/// </summary>
		public System.String		  RegExpiration = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_CLASS_ID : 
		/// </summary>
		public System.Decimal		  AsCodeDegreeClassId = 0.0m;
		
		/// <summary>
		/// AS_CODE_DEGREE_ID : 
		/// </summary>
		public System.Decimal		  AsCodeDegreeId = 0.0m;
		
		/// <summary>
		/// ADM_CODE_TRANSFER_TYPE_ID : 
		/// </summary>
		public System.Decimal		  AdmCodeTransferTypeId = 0.0m;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdmCodeTransferType _admCodeTransferTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmCodeTransferType"/>.
		/// </summary>
		/// <value>The source AdmCodeTransferType for AdmCodeTransferTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmCodeTransferType AdmCodeTransferTypeIdSource
      	{
            get { return this._admCodeTransferTypeIdSource; }
            set { this._admCodeTransferTypeIdSource = value; }
      	}
		private AsCodeDegree _asCodeDegreeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return this._asCodeDegreeIdSource; }
            set { this._asCodeDegreeIdSource = value; }
      	}
		private AsCodeDegreeClass _asCodeDegreeClassIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return this._asCodeDegreeClassIdSource; }
            set { this._asCodeDegreeClassIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region AdmTransferAcceptanceCollection
		
		private TList<AdmTransferAcceptance> _admTransferAcceptanceAdmTransAcceptanceCategoryId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admTransferAcceptanceAdmTransAcceptanceCategoryId
		/// </summary>
		
		public TList<AdmTransferAcceptance> AdmTransferAcceptanceCollection
		{
			get
			{
				if (_admTransferAcceptanceAdmTransAcceptanceCategoryId == null)
				{
				_admTransferAcceptanceAdmTransAcceptanceCategoryId = new TList<AdmTransferAcceptance>();
				}
	
				return _admTransferAcceptanceAdmTransAcceptanceCategoryId;
			}
			set { _admTransferAcceptanceAdmTransAcceptanceCategoryId = value; }
		}
		
		#endregion

		#region AdmIntTransferAcceptanceCollection
		
		private TList<AdmIntTransferAcceptance> _admIntTransferAcceptanceAdmTransAcceptanceCategoryId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admIntTransferAcceptanceAdmTransAcceptanceCategoryId
		/// </summary>
		
		public TList<AdmIntTransferAcceptance> AdmIntTransferAcceptanceCollection
		{
			get
			{
				if (_admIntTransferAcceptanceAdmTransAcceptanceCategoryId == null)
				{
				_admIntTransferAcceptanceAdmTransAcceptanceCategoryId = new TList<AdmIntTransferAcceptance>();
				}
	
				return _admIntTransferAcceptanceAdmTransAcceptanceCategoryId;
			}
			set { _admIntTransferAcceptanceAdmTransAcceptanceCategoryId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AdmTransAcceptanceCategoryEntityData _tmp = new AdmTransAcceptanceCategoryEntityData();
						
			_tmp.AdmTransAcceptanceCategoryId = this.AdmTransAcceptanceCategoryId;
			_tmp.OriginalAdmTransAcceptanceCategoryId = this.OriginalAdmTransAcceptanceCategoryId;
			
			_tmp.CategoryNameEn = this.CategoryNameEn;
			_tmp.CategoryNameAr = this.CategoryNameAr;
			_tmp.CategoryType = this.CategoryType;
			_tmp.CategoryValue = this.CategoryValue;
			_tmp.AbbreviationEn = this.AbbreviationEn;
			_tmp.AbbreviationAr = this.AbbreviationAr;
			_tmp.RegExpiration = this.RegExpiration;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.AdmCodeTransferTypeId = this.AdmCodeTransferTypeId;
			
			#region Source Parent Composite Entities
			if (this.AdmCodeTransferTypeIdSource != null)
				_tmp.AdmCodeTransferTypeIdSource = MakeCopyOf(this.AdmCodeTransferTypeIdSource) as AdmCodeTransferType;
			if (this.AsCodeDegreeIdSource != null)
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null)
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource) as AsCodeDegreeClass;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._admTransferAcceptanceAdmTransAcceptanceCategoryId != null)
				_tmp.AdmTransferAcceptanceCollection = (TList<AdmTransferAcceptance>) MakeCopyOf(this.AdmTransferAcceptanceCollection); 
			if (this._admIntTransferAcceptanceAdmTransAcceptanceCategoryId != null)
				_tmp.AdmIntTransferAcceptanceCollection = (TList<AdmIntTransferAcceptance>) MakeCopyOf(this.AdmIntTransferAcceptanceCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AdmTransAcceptanceCategoryEntityData _tmp = new AdmTransAcceptanceCategoryEntityData();
						
			_tmp.AdmTransAcceptanceCategoryId = this.AdmTransAcceptanceCategoryId;
			_tmp.OriginalAdmTransAcceptanceCategoryId = this.OriginalAdmTransAcceptanceCategoryId;
			
			_tmp.CategoryNameEn = this.CategoryNameEn;
			_tmp.CategoryNameAr = this.CategoryNameAr;
			_tmp.CategoryType = this.CategoryType;
			_tmp.CategoryValue = this.CategoryValue;
			_tmp.AbbreviationEn = this.AbbreviationEn;
			_tmp.AbbreviationAr = this.AbbreviationAr;
			_tmp.RegExpiration = this.RegExpiration;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.AdmCodeTransferTypeId = this.AdmCodeTransferTypeId;
			
			#region Source Parent Composite Entities
			if (this.AdmCodeTransferTypeIdSource != null && existingCopies.Contains(this.AdmCodeTransferTypeIdSource))
				_tmp.AdmCodeTransferTypeIdSource = existingCopies[this.AdmCodeTransferTypeIdSource] as AdmCodeTransferType;
			else
				_tmp.AdmCodeTransferTypeIdSource = MakeCopyOf(this.AdmCodeTransferTypeIdSource, existingCopies) as AdmCodeTransferType;
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				_tmp.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				_tmp.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.AdmTransferAcceptanceCollection = (TList<AdmTransferAcceptance>) MakeCopyOf(this.AdmTransferAcceptanceCollection, existingCopies); 
			_tmp.AdmIntTransferAcceptanceCollection = (TList<AdmIntTransferAcceptance>) MakeCopyOf(this.AdmIntTransferAcceptanceCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmTransAcceptanceCategoryColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AdmTransAcceptanceCategoryColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmTransAcceptanceCategoryColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AdmTransAcceptanceCategoryColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmTransAcceptanceCategoryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AdmTransAcceptanceCategoryColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AdmTransAcceptanceCategoryEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AdmTransAcceptanceCategoryEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmTransAcceptanceCategoryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AdmTransAcceptanceCategoryColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AdmTransAcceptanceCategoryEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AdmTransAcceptanceCategoryEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AdmTransAcceptanceCategoryEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AdmTransAcceptanceCategory"/> object.
	/// </remarks>
	public class AdmTransAcceptanceCategoryEventArgs : System.EventArgs
	{
		private AdmTransAcceptanceCategoryColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AdmTransAcceptanceCategoryEventArgs class.
		///</summary>
		public AdmTransAcceptanceCategoryEventArgs(AdmTransAcceptanceCategoryColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AdmTransAcceptanceCategoryEventArgs class.
		///</summary>
		public AdmTransAcceptanceCategoryEventArgs(AdmTransAcceptanceCategoryColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AdmTransAcceptanceCategoryColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AdmTransAcceptanceCategoryColumn" />
		public AdmTransAcceptanceCategoryColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AdmTransAcceptanceCategory related events.
	///</summary>
	public delegate void AdmTransAcceptanceCategoryEventHandler(object sender, AdmTransAcceptanceCategoryEventArgs e);
	
	#region AdmTransAcceptanceCategoryComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AdmTransAcceptanceCategoryComparer : System.Collections.Generic.IComparer<AdmTransAcceptanceCategory>
	{
		AdmTransAcceptanceCategoryColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AdmTransAcceptanceCategoryComparer"/> class.
        /// </summary>
		public AdmTransAcceptanceCategoryComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AdmTransAcceptanceCategoryComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AdmTransAcceptanceCategoryComparer(AdmTransAcceptanceCategoryColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AdmTransAcceptanceCategory"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AdmTransAcceptanceCategory"/> to compare.</param>
        /// <param name="b">The second <c>AdmTransAcceptanceCategory</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AdmTransAcceptanceCategory a, AdmTransAcceptanceCategory b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AdmTransAcceptanceCategory entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AdmTransAcceptanceCategory a, AdmTransAcceptanceCategory b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AdmTransAcceptanceCategoryColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AdmTransAcceptanceCategoryKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AdmTransAcceptanceCategory"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AdmTransAcceptanceCategoryKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AdmTransAcceptanceCategoryKey class.
		/// </summary>
		public AdmTransAcceptanceCategoryKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmTransAcceptanceCategoryKey class.
		/// </summary>
		public AdmTransAcceptanceCategoryKey(AdmTransAcceptanceCategoryBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AdmTransAcceptanceCategoryId = entity.AdmTransAcceptanceCategoryId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmTransAcceptanceCategoryKey class.
		/// </summary>
		public AdmTransAcceptanceCategoryKey(System.Decimal _admTransAcceptanceCategoryId)
		{
			#region Init Properties

			this.AdmTransAcceptanceCategoryId = _admTransAcceptanceCategoryId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AdmTransAcceptanceCategoryBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AdmTransAcceptanceCategoryBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AdmTransAcceptanceCategoryId property
		private System.Decimal _admTransAcceptanceCategoryId;
		
		/// <summary>
		/// Gets or sets the AdmTransAcceptanceCategoryId property.
		/// </summary>
		public System.Decimal AdmTransAcceptanceCategoryId
		{
			get { return _admTransAcceptanceCategoryId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AdmTransAcceptanceCategoryId = value;
				
				_admTransAcceptanceCategoryId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AdmTransAcceptanceCategoryId = ( values["AdmTransAcceptanceCategoryId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["AdmTransAcceptanceCategoryId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AdmTransAcceptanceCategoryId", AdmTransAcceptanceCategoryId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AdmTransAcceptanceCategoryId: {0}{1}",
								AdmTransAcceptanceCategoryId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AdmTransAcceptanceCategoryColumn Enum
	
	/// <summary>
	/// Enumerate the AdmTransAcceptanceCategory columns.
	/// </summary>
	[Serializable]
	public enum AdmTransAcceptanceCategoryColumn : int
	{
		/// <summary>
		/// AdmTransAcceptanceCategoryId : 
		/// </summary>
		[EnumTextValue("ADM_TRANS_ACCEPTANCE_CATEGORY_ID")]
		[ColumnEnum("ADM_TRANS_ACCEPTANCE_CATEGORY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		AdmTransAcceptanceCategoryId = 1,
		/// <summary>
		/// CategoryNameEn : 
		/// </summary>
		[EnumTextValue("CATEGORY_NAME_EN")]
		[ColumnEnum("CATEGORY_NAME_EN", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		CategoryNameEn = 2,
		/// <summary>
		/// CategoryNameAr : 
		/// </summary>
		[EnumTextValue("CATEGORY_NAME_AR")]
		[ColumnEnum("CATEGORY_NAME_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		CategoryNameAr = 3,
		/// <summary>
		/// CategoryType : 
		/// </summary>
		[EnumTextValue("CATEGORY_TYPE")]
		[ColumnEnum("CATEGORY_TYPE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		CategoryType = 4,
		/// <summary>
		/// CategoryValue : 
		/// </summary>
		[EnumTextValue("CATEGORY_VALUE")]
		[ColumnEnum("CATEGORY_VALUE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		CategoryValue = 5,
		/// <summary>
		/// AbbreviationEn : 
		/// </summary>
		[EnumTextValue("ABBREVIATION_EN")]
		[ColumnEnum("ABBREVIATION_EN", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		AbbreviationEn = 6,
		/// <summary>
		/// AbbreviationAr : 
		/// </summary>
		[EnumTextValue("ABBREVIATION_AR")]
		[ColumnEnum("ABBREVIATION_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		AbbreviationAr = 7,
		/// <summary>
		/// RegExpiration : 
		/// </summary>
		[EnumTextValue("REG_EXPIRATION")]
		[ColumnEnum("REG_EXPIRATION", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		RegExpiration = 8,
		/// <summary>
		/// AsCodeDegreeClassId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_CLASS_ID")]
		[ColumnEnum("AS_CODE_DEGREE_CLASS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsCodeDegreeClassId = 9,
		/// <summary>
		/// AsCodeDegreeId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_ID")]
		[ColumnEnum("AS_CODE_DEGREE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsCodeDegreeId = 10,
		/// <summary>
		/// AdmCodeTransferTypeId : 
		/// </summary>
		[EnumTextValue("ADM_CODE_TRANSFER_TYPE_ID")]
		[ColumnEnum("ADM_CODE_TRANSFER_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AdmCodeTransferTypeId = 11
	}//End enum

	#endregion AdmTransAcceptanceCategoryColumn Enum

} // end namespace
