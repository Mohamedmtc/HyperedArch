
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SaVacationBalanceH.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SA_VACATION_BALANCE_H' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SaVacationBalanceHBase : EntityBase, ISaVacationBalanceH, IEntityId<SaVacationBalanceHKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SaVacationBalanceHEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SaVacationBalanceHEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SaVacationBalanceHEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SaVacationBalanceH> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaVacationBalanceHEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaVacationBalanceHEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SaVacationBalanceHBase"/> instance.
		///</summary>
		public SaVacationBalanceHBase()
		{
			this.entityData = new SaVacationBalanceHEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SaVacationBalanceHBase"/> instance.
		///</summary>
		///<param name="_saVacationBalanceHId"></param>
		///<param name="_asNodeId"></param>
		///<param name="_periodFrom"></param>
		///<param name="_periodTo"></param>
		///<param name="_deductFromTransfer"></param>
		///<param name="_deductApprovedDate"></param>
		///<param name="_saBalance"></param>
		///<param name="_saVacationBylowId"></param>
		///<param name="_asFacultyInfoId"></param>
		public SaVacationBalanceHBase(System.Decimal _saVacationBalanceHId, System.Decimal _asNodeId, 
			System.DateTime _periodFrom, System.DateTime _periodTo, System.Decimal _deductFromTransfer, 
			System.DateTime? _deductApprovedDate, System.Decimal _saBalance, System.Decimal _saVacationBylowId, 
			System.Decimal _asFacultyInfoId)
		{
			this.entityData = new SaVacationBalanceHEntityData();
			this.backupData = null;

			this.SaVacationBalanceHId = _saVacationBalanceHId;
			this.AsNodeId = _asNodeId;
			this.PeriodFrom = _periodFrom;
			this.PeriodTo = _periodTo;
			this.DeductFromTransfer = _deductFromTransfer;
			this.DeductApprovedDate = _deductApprovedDate;
			this.SaBalance = _saBalance;
			this.SaVacationBylowId = _saVacationBylowId;
			this.AsFacultyInfoId = _asFacultyInfoId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SaVacationBalanceH"/> instance.
		///</summary>
		///<param name="_saVacationBalanceHId"></param>
		///<param name="_asNodeId"></param>
		///<param name="_periodFrom"></param>
		///<param name="_periodTo"></param>
		///<param name="_deductFromTransfer"></param>
		///<param name="_deductApprovedDate"></param>
		///<param name="_saBalance"></param>
		///<param name="_saVacationBylowId"></param>
		///<param name="_asFacultyInfoId"></param>
		public static SaVacationBalanceH CreateSaVacationBalanceH(System.Decimal _saVacationBalanceHId, System.Decimal _asNodeId, 
			System.DateTime _periodFrom, System.DateTime _periodTo, System.Decimal _deductFromTransfer, 
			System.DateTime? _deductApprovedDate, System.Decimal _saBalance, System.Decimal _saVacationBylowId, 
			System.Decimal _asFacultyInfoId)
		{
			SaVacationBalanceH newSaVacationBalanceH = new SaVacationBalanceH();
			newSaVacationBalanceH.SaVacationBalanceHId = _saVacationBalanceHId;
			newSaVacationBalanceH.AsNodeId = _asNodeId;
			newSaVacationBalanceH.PeriodFrom = _periodFrom;
			newSaVacationBalanceH.PeriodTo = _periodTo;
			newSaVacationBalanceH.DeductFromTransfer = _deductFromTransfer;
			newSaVacationBalanceH.DeductApprovedDate = _deductApprovedDate;
			newSaVacationBalanceH.SaBalance = _saBalance;
			newSaVacationBalanceH.SaVacationBylowId = _saVacationBylowId;
			newSaVacationBalanceH.AsFacultyInfoId = _asFacultyInfoId;
			return newSaVacationBalanceH;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SaVacationBalanceHId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SaVacationBalanceHId
		{
			get
			{
				return this.entityData.SaVacationBalanceHId; 
			}
			
			set
			{
				if (this.entityData.SaVacationBalanceHId == value)
					return;
					
				OnColumnChanging(SaVacationBalanceHColumn.SaVacationBalanceHId, this.entityData.SaVacationBalanceHId);
				this.entityData.SaVacationBalanceHId = value;
				this.EntityId.SaVacationBalanceHId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaVacationBalanceHColumn.SaVacationBalanceHId, this.entityData.SaVacationBalanceHId);
				OnPropertyChanged("SaVacationBalanceHId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SA_VACATION_BALANCE_H_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SA_VACATION_BALANCE_H_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSaVacationBalanceHId
		{
			get { return this.entityData.OriginalSaVacationBalanceHId; }
			set { this.entityData.OriginalSaVacationBalanceHId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the AsNodeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsNodeId
		{
			get
			{
				return this.entityData.AsNodeId; 
			}
			
			set
			{
				if (this.entityData.AsNodeId == value)
					return;
					
				OnColumnChanging(SaVacationBalanceHColumn.AsNodeId, this.entityData.AsNodeId);
				this.entityData.AsNodeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaVacationBalanceHColumn.AsNodeId, this.entityData.AsNodeId);
				OnPropertyChanged("AsNodeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PeriodFrom property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime PeriodFrom
		{
			get
			{
				return this.entityData.PeriodFrom; 
			}
			
			set
			{
				if (this.entityData.PeriodFrom == value)
					return;
					
				OnColumnChanging(SaVacationBalanceHColumn.PeriodFrom, this.entityData.PeriodFrom);
				this.entityData.PeriodFrom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaVacationBalanceHColumn.PeriodFrom, this.entityData.PeriodFrom);
				OnPropertyChanged("PeriodFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PeriodTo property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime PeriodTo
		{
			get
			{
				return this.entityData.PeriodTo; 
			}
			
			set
			{
				if (this.entityData.PeriodTo == value)
					return;
					
				OnColumnChanging(SaVacationBalanceHColumn.PeriodTo, this.entityData.PeriodTo);
				this.entityData.PeriodTo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaVacationBalanceHColumn.PeriodTo, this.entityData.PeriodTo);
				OnPropertyChanged("PeriodTo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DeductFromTransfer property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal DeductFromTransfer
		{
			get
			{
				return this.entityData.DeductFromTransfer; 
			}
			
			set
			{
				if (this.entityData.DeductFromTransfer == value)
					return;
					
				OnColumnChanging(SaVacationBalanceHColumn.DeductFromTransfer, this.entityData.DeductFromTransfer);
				this.entityData.DeductFromTransfer = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaVacationBalanceHColumn.DeductFromTransfer, this.entityData.DeductFromTransfer);
				OnPropertyChanged("DeductFromTransfer");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DeductApprovedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsDeductApprovedDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DeductApprovedDate
		{
			get
			{
				return this.entityData.DeductApprovedDate; 
			}
			
			set
			{
				if (this.entityData.DeductApprovedDate == value)
					return;
					
				OnColumnChanging(SaVacationBalanceHColumn.DeductApprovedDate, this.entityData.DeductApprovedDate);
				this.entityData.DeductApprovedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaVacationBalanceHColumn.DeductApprovedDate, this.entityData.DeductApprovedDate);
				OnPropertyChanged("DeductApprovedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaBalance property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaBalance
		{
			get
			{
				return this.entityData.SaBalance; 
			}
			
			set
			{
				if (this.entityData.SaBalance == value)
					return;
					
				OnColumnChanging(SaVacationBalanceHColumn.SaBalance, this.entityData.SaBalance);
				this.entityData.SaBalance = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaVacationBalanceHColumn.SaBalance, this.entityData.SaBalance);
				OnPropertyChanged("SaBalance");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaVacationBylowId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaVacationBylowId
		{
			get
			{
				return this.entityData.SaVacationBylowId; 
			}
			
			set
			{
				if (this.entityData.SaVacationBylowId == value)
					return;
					
				OnColumnChanging(SaVacationBalanceHColumn.SaVacationBylowId, this.entityData.SaVacationBylowId);
				this.entityData.SaVacationBylowId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaVacationBalanceHColumn.SaVacationBylowId, this.entityData.SaVacationBylowId);
				OnPropertyChanged("SaVacationBylowId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(SaVacationBalanceHColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaVacationBalanceHColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaVacationBylaws"/>.
		/// </summary>
		/// <value>The source SaVacationBylaws for SaVacationBylowId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaVacationBylaws SaVacationBylowIdSource
      	{
            get { return entityData.SaVacationBylowIdSource; }
            set { entityData.SaVacationBylowIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of SaVacationBalance objects
		///	which are related to this object through the relation FK_SA_VACATION_BALANCE_SA_VACATION_BALANCE_H
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SaVacationBalance> SaVacationBalanceCollection
		{
			get { return entityData.SaVacationBalanceCollection; }
			set { entityData.SaVacationBalanceCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SA_VACATION_BALANCE_H"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SA_VACATION_BALANCE_H_ID", "AS_NODE_ID", "PERIOD_FROM", "PERIOD_TO", "DEDUCT_FROM_TRANSFER", "DEDUCT_APPROVED_DATE", "SA_BALANCE", "SA_VACATION_BYLOW_ID", "AS_FACULTY_INFO_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SaVacationBalanceHEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SaVacationBalanceH) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SaVacationBalanceH>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SaVacationBalanceH);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SaVacationBalanceH Entity 
		///</summary>
		protected virtual SaVacationBalanceH Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SaVacationBalanceH copy = new SaVacationBalanceH();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SaVacationBalanceHId = this.SaVacationBalanceHId;
					copy.OriginalSaVacationBalanceHId = this.OriginalSaVacationBalanceHId;
				copy.AsNodeId = this.AsNodeId;
				copy.PeriodFrom = this.PeriodFrom;
				copy.PeriodTo = this.PeriodTo;
				copy.DeductFromTransfer = this.DeductFromTransfer;
				copy.DeductApprovedDate = this.DeductApprovedDate;
				copy.SaBalance = this.SaBalance;
				copy.SaVacationBylowId = this.SaVacationBylowId;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
			
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.SaVacationBylowIdSource != null && existingCopies.Contains(this.SaVacationBylowIdSource))
				copy.SaVacationBylowIdSource = existingCopies[this.SaVacationBylowIdSource] as SaVacationBylaws;
			else
				copy.SaVacationBylowIdSource = MakeCopyOf(this.SaVacationBylowIdSource, existingCopies) as SaVacationBylaws;
		
			//deep copy nested objects
			copy.SaVacationBalanceCollection = (TList<SaVacationBalance>) MakeCopyOf(this.SaVacationBalanceCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SaVacationBalanceH Entity 
		///</summary>
		public virtual SaVacationBalanceH Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SaVacationBalanceH Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SaVacationBalanceH DeepCopy()
		{
			return EntityHelper.Clone<SaVacationBalanceH>(this as SaVacationBalanceH);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SaVacationBalanceHEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SaVacationBalanceHEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SaVacationBalanceHEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SaVacationBalanceHColumn column)
		{
			switch(column)
			{
					case SaVacationBalanceHColumn.SaVacationBalanceHId:
					return entityData.SaVacationBalanceHId != _originalData.SaVacationBalanceHId;
					case SaVacationBalanceHColumn.AsNodeId:
					return entityData.AsNodeId != _originalData.AsNodeId;
					case SaVacationBalanceHColumn.PeriodFrom:
					return entityData.PeriodFrom != _originalData.PeriodFrom;
					case SaVacationBalanceHColumn.PeriodTo:
					return entityData.PeriodTo != _originalData.PeriodTo;
					case SaVacationBalanceHColumn.DeductFromTransfer:
					return entityData.DeductFromTransfer != _originalData.DeductFromTransfer;
					case SaVacationBalanceHColumn.DeductApprovedDate:
					return entityData.DeductApprovedDate != _originalData.DeductApprovedDate;
					case SaVacationBalanceHColumn.SaBalance:
					return entityData.SaBalance != _originalData.SaBalance;
					case SaVacationBalanceHColumn.SaVacationBylowId:
					return entityData.SaVacationBylowId != _originalData.SaVacationBylowId;
					case SaVacationBalanceHColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SaVacationBalanceHColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SaVacationBalanceHId != _originalData.SaVacationBalanceHId;
			result = result || entityData.AsNodeId != _originalData.AsNodeId;
			result = result || entityData.PeriodFrom != _originalData.PeriodFrom;
			result = result || entityData.PeriodTo != _originalData.PeriodTo;
			result = result || entityData.DeductFromTransfer != _originalData.DeductFromTransfer;
			result = result || entityData.DeductApprovedDate != _originalData.DeductApprovedDate;
			result = result || entityData.SaBalance != _originalData.SaBalance;
			result = result || entityData.SaVacationBylowId != _originalData.SaVacationBylowId;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			return result;
		}	
		
		///<summary>
		///  Returns a SaVacationBalanceH Entity with the original data.
		///</summary>
		public SaVacationBalanceH GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSaVacationBalanceH(
				_originalData.SaVacationBalanceHId,
				_originalData.AsNodeId,
				_originalData.PeriodFrom,
				_originalData.PeriodTo,
				_originalData.DeductFromTransfer,
				_originalData.DeductApprovedDate,
				_originalData.SaBalance,
				_originalData.SaVacationBylowId,
				_originalData.AsFacultyInfoId
				);
				
			return (SaVacationBalanceH)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SaVacationBalanceHBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SaVacationBalanceHBase)
				return ValueEquals(this, (SaVacationBalanceHBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SaVacationBalanceHBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SaVacationBalanceHId.GetHashCode() ^ 
					this.AsNodeId.GetHashCode() ^ 
					this.PeriodFrom.GetHashCode() ^ 
					this.PeriodTo.GetHashCode() ^ 
					this.DeductFromTransfer.GetHashCode() ^ 
					((this.DeductApprovedDate == null) ? string.Empty : this.DeductApprovedDate.ToString()).GetHashCode() ^ 
					this.SaBalance.GetHashCode() ^ 
					this.SaVacationBylowId.GetHashCode() ^ 
					this.AsFacultyInfoId.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SaVacationBalanceHBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SaVacationBalanceHBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SaVacationBalanceHBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SaVacationBalanceHBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SaVacationBalanceHBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SaVacationBalanceHBase Object1, SaVacationBalanceHBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SaVacationBalanceHId != Object2.SaVacationBalanceHId)
				equal = false;
			if (Object1.AsNodeId != Object2.AsNodeId)
				equal = false;
			if (Object1.PeriodFrom != Object2.PeriodFrom)
				equal = false;
			if (Object1.PeriodTo != Object2.PeriodTo)
				equal = false;
			if (Object1.DeductFromTransfer != Object2.DeductFromTransfer)
				equal = false;
			if ( Object1.DeductApprovedDate != null && Object2.DeductApprovedDate != null )
			{
				if (Object1.DeductApprovedDate != Object2.DeductApprovedDate)
					equal = false;
			}
			else if (Object1.DeductApprovedDate == null ^ Object2.DeductApprovedDate == null )
			{
				equal = false;
			}
			if (Object1.SaBalance != Object2.SaBalance)
				equal = false;
			if (Object1.SaVacationBylowId != Object2.SaVacationBylowId)
				equal = false;
			if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SaVacationBalanceHBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SaVacationBalanceHComparer GetComparer()
        {
            return new SaVacationBalanceHComparer();
        }
        */

        // Comparer delegates back to SaVacationBalanceH
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SaVacationBalanceH rhs, SaVacationBalanceHColumn which)
        {
            switch (which)
            {
            	
            	
            	case SaVacationBalanceHColumn.SaVacationBalanceHId:
            		return this.SaVacationBalanceHId.CompareTo(rhs.SaVacationBalanceHId);
            		
            		                 
            	
            	
            	case SaVacationBalanceHColumn.AsNodeId:
            		return this.AsNodeId.CompareTo(rhs.AsNodeId);
            		
            		                 
            	
            	
            	case SaVacationBalanceHColumn.PeriodFrom:
            		return this.PeriodFrom.CompareTo(rhs.PeriodFrom);
            		
            		                 
            	
            	
            	case SaVacationBalanceHColumn.PeriodTo:
            		return this.PeriodTo.CompareTo(rhs.PeriodTo);
            		
            		                 
            	
            	
            	case SaVacationBalanceHColumn.DeductFromTransfer:
            		return this.DeductFromTransfer.CompareTo(rhs.DeductFromTransfer);
            		
            		                 
            	
            	
            	case SaVacationBalanceHColumn.DeductApprovedDate:
            		return this.DeductApprovedDate.Value.CompareTo(rhs.DeductApprovedDate.Value);
            		
            		                 
            	
            	
            	case SaVacationBalanceHColumn.SaBalance:
            		return this.SaBalance.CompareTo(rhs.SaBalance);
            		
            		                 
            	
            	
            	case SaVacationBalanceHColumn.SaVacationBylowId:
            		return this.SaVacationBylowId.CompareTo(rhs.SaVacationBylowId);
            		
            		                 
            	
            	
            	case SaVacationBalanceHColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.CompareTo(rhs.AsFacultyInfoId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SaVacationBalanceHKey> Members
		
		// member variable for the EntityId property
		private SaVacationBalanceHKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SaVacationBalanceHKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SaVacationBalanceHKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SaVacationBalanceH")
					.Append("|").Append( this.SaVacationBalanceHId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- SaVacationBalanceHId: {0}{9}- AsNodeId: {1}{9}- PeriodFrom: {2}{9}- PeriodTo: {3}{9}- DeductFromTransfer: {4}{9}- DeductApprovedDate: {5}{9}- SaBalance: {6}{9}- SaVacationBylowId: {7}{9}- AsFacultyInfoId: {8}{9}{11}", 
				this.SaVacationBalanceHId,
				this.AsNodeId,
				this.PeriodFrom,
				this.PeriodTo,
				this.DeductFromTransfer,
				(this.DeductApprovedDate == null) ? string.Empty : this.DeductApprovedDate.ToString(),
				this.SaBalance,
				this.SaVacationBylowId,
				this.AsFacultyInfoId,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SA_VACATION_BALANCE_H' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SaVacationBalanceHEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SA_VACATION_BALANCE_H_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SA_VACATION_BALANCE_H"</remarks>
		public System.Decimal SaVacationBalanceHId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSaVacationBalanceHId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// AS_NODE_ID : 
		/// </summary>
		public System.Decimal		  AsNodeId = 0.0m;
		
		/// <summary>
		/// PERIOD_FROM : 
		/// </summary>
		public System.DateTime		  PeriodFrom = DateTime.MinValue;
		
		/// <summary>
		/// PERIOD_TO : 
		/// </summary>
		public System.DateTime		  PeriodTo = DateTime.MinValue;
		
		/// <summary>
		/// DEDUCT_FROM_TRANSFER : 
		/// </summary>
		public System.Decimal		  DeductFromTransfer = 0.0m;
		
		/// <summary>
		/// DEDUCT_APPROVED_DATE : 
		/// </summary>
		public System.DateTime?		  DeductApprovedDate = null;
		
		/// <summary>
		/// SA_BALANCE : 
		/// </summary>
		public System.Decimal		  SaBalance = 0.0m;
		
		/// <summary>
		/// SA_VACATION_BYLOW_ID : 
		/// </summary>
		public System.Decimal		  SaVacationBylowId = 0.0m;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal		  AsFacultyInfoId = 0.0m;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private SaVacationBylaws _saVacationBylowIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaVacationBylaws"/>.
		/// </summary>
		/// <value>The source SaVacationBylaws for SaVacationBylowId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaVacationBylaws SaVacationBylowIdSource
      	{
            get { return this._saVacationBylowIdSource; }
            set { this._saVacationBylowIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region SaVacationBalanceCollection
		
		private TList<SaVacationBalance> _saVacationBalanceSaVacationBalanceHId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _saVacationBalanceSaVacationBalanceHId
		/// </summary>
		
		public TList<SaVacationBalance> SaVacationBalanceCollection
		{
			get
			{
				if (_saVacationBalanceSaVacationBalanceHId == null)
				{
				_saVacationBalanceSaVacationBalanceHId = new TList<SaVacationBalance>();
				}
	
				return _saVacationBalanceSaVacationBalanceHId;
			}
			set { _saVacationBalanceSaVacationBalanceHId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SaVacationBalanceHEntityData _tmp = new SaVacationBalanceHEntityData();
						
			_tmp.SaVacationBalanceHId = this.SaVacationBalanceHId;
			_tmp.OriginalSaVacationBalanceHId = this.OriginalSaVacationBalanceHId;
			
			_tmp.AsNodeId = this.AsNodeId;
			_tmp.PeriodFrom = this.PeriodFrom;
			_tmp.PeriodTo = this.PeriodTo;
			_tmp.DeductFromTransfer = this.DeductFromTransfer;
			_tmp.DeductApprovedDate = this.DeductApprovedDate;
			_tmp.SaBalance = this.SaBalance;
			_tmp.SaVacationBylowId = this.SaVacationBylowId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.SaVacationBylowIdSource != null)
				_tmp.SaVacationBylowIdSource = MakeCopyOf(this.SaVacationBylowIdSource) as SaVacationBylaws;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._saVacationBalanceSaVacationBalanceHId != null)
				_tmp.SaVacationBalanceCollection = (TList<SaVacationBalance>) MakeCopyOf(this.SaVacationBalanceCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SaVacationBalanceHEntityData _tmp = new SaVacationBalanceHEntityData();
						
			_tmp.SaVacationBalanceHId = this.SaVacationBalanceHId;
			_tmp.OriginalSaVacationBalanceHId = this.OriginalSaVacationBalanceHId;
			
			_tmp.AsNodeId = this.AsNodeId;
			_tmp.PeriodFrom = this.PeriodFrom;
			_tmp.PeriodTo = this.PeriodTo;
			_tmp.DeductFromTransfer = this.DeductFromTransfer;
			_tmp.DeductApprovedDate = this.DeductApprovedDate;
			_tmp.SaBalance = this.SaBalance;
			_tmp.SaVacationBylowId = this.SaVacationBylowId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.SaVacationBylowIdSource != null && existingCopies.Contains(this.SaVacationBylowIdSource))
				_tmp.SaVacationBylowIdSource = existingCopies[this.SaVacationBylowIdSource] as SaVacationBylaws;
			else
				_tmp.SaVacationBylowIdSource = MakeCopyOf(this.SaVacationBylowIdSource, existingCopies) as SaVacationBylaws;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.SaVacationBalanceCollection = (TList<SaVacationBalance>) MakeCopyOf(this.SaVacationBalanceCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaVacationBalanceHColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SaVacationBalanceHColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaVacationBalanceHColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SaVacationBalanceHColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaVacationBalanceHColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SaVacationBalanceHColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SaVacationBalanceHEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SaVacationBalanceHEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaVacationBalanceHColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SaVacationBalanceHColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SaVacationBalanceHEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SaVacationBalanceHEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SaVacationBalanceHEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SaVacationBalanceH"/> object.
	/// </remarks>
	public class SaVacationBalanceHEventArgs : System.EventArgs
	{
		private SaVacationBalanceHColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SaVacationBalanceHEventArgs class.
		///</summary>
		public SaVacationBalanceHEventArgs(SaVacationBalanceHColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SaVacationBalanceHEventArgs class.
		///</summary>
		public SaVacationBalanceHEventArgs(SaVacationBalanceHColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SaVacationBalanceHColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SaVacationBalanceHColumn" />
		public SaVacationBalanceHColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SaVacationBalanceH related events.
	///</summary>
	public delegate void SaVacationBalanceHEventHandler(object sender, SaVacationBalanceHEventArgs e);
	
	#region SaVacationBalanceHComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SaVacationBalanceHComparer : System.Collections.Generic.IComparer<SaVacationBalanceH>
	{
		SaVacationBalanceHColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SaVacationBalanceHComparer"/> class.
        /// </summary>
		public SaVacationBalanceHComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SaVacationBalanceHComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SaVacationBalanceHComparer(SaVacationBalanceHColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SaVacationBalanceH"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SaVacationBalanceH"/> to compare.</param>
        /// <param name="b">The second <c>SaVacationBalanceH</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SaVacationBalanceH a, SaVacationBalanceH b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SaVacationBalanceH entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SaVacationBalanceH a, SaVacationBalanceH b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SaVacationBalanceHColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SaVacationBalanceHKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SaVacationBalanceH"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SaVacationBalanceHKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SaVacationBalanceHKey class.
		/// </summary>
		public SaVacationBalanceHKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SaVacationBalanceHKey class.
		/// </summary>
		public SaVacationBalanceHKey(SaVacationBalanceHBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SaVacationBalanceHId = entity.SaVacationBalanceHId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SaVacationBalanceHKey class.
		/// </summary>
		public SaVacationBalanceHKey(System.Decimal _saVacationBalanceHId)
		{
			#region Init Properties

			this.SaVacationBalanceHId = _saVacationBalanceHId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SaVacationBalanceHBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SaVacationBalanceHBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SaVacationBalanceHId property
		private System.Decimal _saVacationBalanceHId;
		
		/// <summary>
		/// Gets or sets the SaVacationBalanceHId property.
		/// </summary>
		public System.Decimal SaVacationBalanceHId
		{
			get { return _saVacationBalanceHId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SaVacationBalanceHId = value;
				
				_saVacationBalanceHId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SaVacationBalanceHId = ( values["SaVacationBalanceHId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SaVacationBalanceHId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SaVacationBalanceHId", SaVacationBalanceHId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SaVacationBalanceHId: {0}{1}",
								SaVacationBalanceHId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SaVacationBalanceHColumn Enum
	
	/// <summary>
	/// Enumerate the SaVacationBalanceH columns.
	/// </summary>
	[Serializable]
	public enum SaVacationBalanceHColumn : int
	{
		/// <summary>
		/// SaVacationBalanceHId : 
		/// </summary>
		[EnumTextValue("SA_VACATION_BALANCE_H_ID")]
		[ColumnEnum("SA_VACATION_BALANCE_H_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SaVacationBalanceHId = 1,
		/// <summary>
		/// AsNodeId : 
		/// </summary>
		[EnumTextValue("AS_NODE_ID")]
		[ColumnEnum("AS_NODE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsNodeId = 2,
		/// <summary>
		/// PeriodFrom : 
		/// </summary>
		[EnumTextValue("PERIOD_FROM")]
		[ColumnEnum("PERIOD_FROM", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		PeriodFrom = 3,
		/// <summary>
		/// PeriodTo : 
		/// </summary>
		[EnumTextValue("PERIOD_TO")]
		[ColumnEnum("PERIOD_TO", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		PeriodTo = 4,
		/// <summary>
		/// DeductFromTransfer : 
		/// </summary>
		[EnumTextValue("DEDUCT_FROM_TRANSFER")]
		[ColumnEnum("DEDUCT_FROM_TRANSFER", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		DeductFromTransfer = 5,
		/// <summary>
		/// DeductApprovedDate : 
		/// </summary>
		[EnumTextValue("DEDUCT_APPROVED_DATE")]
		[ColumnEnum("DEDUCT_APPROVED_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DeductApprovedDate = 6,
		/// <summary>
		/// SaBalance : 
		/// </summary>
		[EnumTextValue("SA_BALANCE")]
		[ColumnEnum("SA_BALANCE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaBalance = 7,
		/// <summary>
		/// SaVacationBylowId : 
		/// </summary>
		[EnumTextValue("SA_VACATION_BYLOW_ID")]
		[ColumnEnum("SA_VACATION_BYLOW_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaVacationBylowId = 8,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsFacultyInfoId = 9
	}//End enum

	#endregion SaVacationBalanceHColumn Enum

} // end namespace
