
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EntMajorPhase.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ENT_MAJOR_PHASE' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EntMajorPhaseBase : EntityBase, IEntMajorPhase, IEntityId<EntMajorPhaseKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EntMajorPhaseEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EntMajorPhaseEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EntMajorPhaseEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EntMajorPhase> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EntMajorPhaseEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EntMajorPhaseEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EntMajorPhaseBase"/> instance.
		///</summary>
		public EntMajorPhaseBase()
		{
			this.entityData = new EntMajorPhaseEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EntMajorPhaseBase"/> instance.
		///</summary>
		///<param name="_entMajorPhaseId">المراحل الدارسية</param>
		///<param name="_entMainId">تخصص رئيسي</param>
		///<param name="_phaseAr"></param>
		///<param name="_phaseEn"></param>
		///<param name="_coursePoint">XX not used</param>
		///<param name="_edCodeLevelFromId"></param>
		///<param name="_edCodeSemesterFromId">مسلسل الفصل الدراسي</param>
		///<param name="_edCodeLevelToId"></param>
		///<param name="_edCodeSemesterToId">مسلسل الفصل الدراسي</param>
		///<param name="_phasePeriod">XXالفترة بالشهور او الاسابيع</param>
		///<param name="_notes"></param>
		///<param name="_passCrsFlg">شرط النجاح فى جميع المقررات السابقة</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public EntMajorPhaseBase(System.Decimal _entMajorPhaseId, System.Decimal _entMainId, 
			System.String _phaseAr, System.String _phaseEn, System.Decimal? _coursePoint, 
			System.Decimal? _edCodeLevelFromId, System.Decimal _edCodeSemesterFromId, System.Decimal _edCodeLevelToId, 
			System.Decimal _edCodeSemesterToId, System.Decimal? _phasePeriod, System.String _notes, 
			System.Boolean? _passCrsFlg, System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			this.entityData = new EntMajorPhaseEntityData();
			this.backupData = null;

			this.EntMajorPhaseId = _entMajorPhaseId;
			this.EntMainId = _entMainId;
			this.PhaseAr = _phaseAr;
			this.PhaseEn = _phaseEn;
			this.CoursePoint = _coursePoint;
			this.EdCodeLevelFromId = _edCodeLevelFromId;
			this.EdCodeSemesterFromId = _edCodeSemesterFromId;
			this.EdCodeLevelToId = _edCodeLevelToId;
			this.EdCodeSemesterToId = _edCodeSemesterToId;
			this.PhasePeriod = _phasePeriod;
			this.Notes = _notes;
			this.PassCrsFlg = _passCrsFlg;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EntMajorPhase"/> instance.
		///</summary>
		///<param name="_entMajorPhaseId">المراحل الدارسية</param>
		///<param name="_entMainId">تخصص رئيسي</param>
		///<param name="_phaseAr"></param>
		///<param name="_phaseEn"></param>
		///<param name="_coursePoint">XX not used</param>
		///<param name="_edCodeLevelFromId"></param>
		///<param name="_edCodeSemesterFromId">مسلسل الفصل الدراسي</param>
		///<param name="_edCodeLevelToId"></param>
		///<param name="_edCodeSemesterToId">مسلسل الفصل الدراسي</param>
		///<param name="_phasePeriod">XXالفترة بالشهور او الاسابيع</param>
		///<param name="_notes"></param>
		///<param name="_passCrsFlg">شرط النجاح فى جميع المقررات السابقة</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static EntMajorPhase CreateEntMajorPhase(System.Decimal _entMajorPhaseId, System.Decimal _entMainId, 
			System.String _phaseAr, System.String _phaseEn, System.Decimal? _coursePoint, 
			System.Decimal? _edCodeLevelFromId, System.Decimal _edCodeSemesterFromId, System.Decimal _edCodeLevelToId, 
			System.Decimal _edCodeSemesterToId, System.Decimal? _phasePeriod, System.String _notes, 
			System.Boolean? _passCrsFlg, System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			EntMajorPhase newEntMajorPhase = new EntMajorPhase();
			newEntMajorPhase.EntMajorPhaseId = _entMajorPhaseId;
			newEntMajorPhase.EntMainId = _entMainId;
			newEntMajorPhase.PhaseAr = _phaseAr;
			newEntMajorPhase.PhaseEn = _phaseEn;
			newEntMajorPhase.CoursePoint = _coursePoint;
			newEntMajorPhase.EdCodeLevelFromId = _edCodeLevelFromId;
			newEntMajorPhase.EdCodeSemesterFromId = _edCodeSemesterFromId;
			newEntMajorPhase.EdCodeLevelToId = _edCodeLevelToId;
			newEntMajorPhase.EdCodeSemesterToId = _edCodeSemesterToId;
			newEntMajorPhase.PhasePeriod = _phasePeriod;
			newEntMajorPhase.Notes = _notes;
			newEntMajorPhase.PassCrsFlg = _passCrsFlg;
			newEntMajorPhase.SeUserId = _seUserId;
			newEntMajorPhase.LastDate = _lastDate;
			return newEntMajorPhase;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EntMajorPhaseId property. 
		///		المراحل الدارسية
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"المراحل الدارسية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EntMajorPhaseId
		{
			get
			{
				return this.entityData.EntMajorPhaseId; 
			}
			
			set
			{
				if (this.entityData.EntMajorPhaseId == value)
					return;
					
				OnColumnChanging(EntMajorPhaseColumn.EntMajorPhaseId, this.entityData.EntMajorPhaseId);
				this.entityData.EntMajorPhaseId = value;
				this.EntityId.EntMajorPhaseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntMajorPhaseColumn.EntMajorPhaseId, this.entityData.EntMajorPhaseId);
				OnPropertyChanged("EntMajorPhaseId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ENT_MAJOR_PHASE_ID property.
		///		المراحل الدارسية
		/// </summary>
		/// <remarks>This is the original value of the ENT_MAJOR_PHASE_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEntMajorPhaseId
		{
			get { return this.entityData.OriginalEntMajorPhaseId; }
			set { this.entityData.OriginalEntMajorPhaseId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EntMainId property. 
		///		تخصص رئيسي
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"تخصص رئيسي"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EntMainId
		{
			get
			{
				return this.entityData.EntMainId; 
			}
			
			set
			{
				if (this.entityData.EntMainId == value)
					return;
					
				OnColumnChanging(EntMajorPhaseColumn.EntMainId, this.entityData.EntMainId);
				this.entityData.EntMainId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntMajorPhaseColumn.EntMainId, this.entityData.EntMainId);
				OnPropertyChanged("EntMainId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PhaseAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String PhaseAr
		{
			get
			{
				return this.entityData.PhaseAr; 
			}
			
			set
			{
				if (this.entityData.PhaseAr == value)
					return;
					
				OnColumnChanging(EntMajorPhaseColumn.PhaseAr, this.entityData.PhaseAr);
				this.entityData.PhaseAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntMajorPhaseColumn.PhaseAr, this.entityData.PhaseAr);
				OnPropertyChanged("PhaseAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PhaseEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String PhaseEn
		{
			get
			{
				return this.entityData.PhaseEn; 
			}
			
			set
			{
				if (this.entityData.PhaseEn == value)
					return;
					
				OnColumnChanging(EntMajorPhaseColumn.PhaseEn, this.entityData.PhaseEn);
				this.entityData.PhaseEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntMajorPhaseColumn.PhaseEn, this.entityData.PhaseEn);
				OnPropertyChanged("PhaseEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CoursePoint property. 
		///		XX not used
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCoursePointNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XX not used"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CoursePoint
		{
			get
			{
				return this.entityData.CoursePoint; 
			}
			
			set
			{
				if (this.entityData.CoursePoint == value)
					return;
					
				OnColumnChanging(EntMajorPhaseColumn.CoursePoint, this.entityData.CoursePoint);
				this.entityData.CoursePoint = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntMajorPhaseColumn.CoursePoint, this.entityData.CoursePoint);
				OnPropertyChanged("CoursePoint");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeLevelFromId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeLevelFromIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeLevelFromId
		{
			get
			{
				return this.entityData.EdCodeLevelFromId; 
			}
			
			set
			{
				if (this.entityData.EdCodeLevelFromId == value)
					return;
					
				OnColumnChanging(EntMajorPhaseColumn.EdCodeLevelFromId, this.entityData.EdCodeLevelFromId);
				this.entityData.EdCodeLevelFromId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntMajorPhaseColumn.EdCodeLevelFromId, this.entityData.EdCodeLevelFromId);
				OnPropertyChanged("EdCodeLevelFromId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterFromId property. 
		///		مسلسل الفصل الدراسي
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"مسلسل الفصل الدراسي"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeSemesterFromId
		{
			get
			{
				return this.entityData.EdCodeSemesterFromId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterFromId == value)
					return;
					
				OnColumnChanging(EntMajorPhaseColumn.EdCodeSemesterFromId, this.entityData.EdCodeSemesterFromId);
				this.entityData.EdCodeSemesterFromId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntMajorPhaseColumn.EdCodeSemesterFromId, this.entityData.EdCodeSemesterFromId);
				OnPropertyChanged("EdCodeSemesterFromId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeLevelToId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeLevelToId
		{
			get
			{
				return this.entityData.EdCodeLevelToId; 
			}
			
			set
			{
				if (this.entityData.EdCodeLevelToId == value)
					return;
					
				OnColumnChanging(EntMajorPhaseColumn.EdCodeLevelToId, this.entityData.EdCodeLevelToId);
				this.entityData.EdCodeLevelToId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntMajorPhaseColumn.EdCodeLevelToId, this.entityData.EdCodeLevelToId);
				OnPropertyChanged("EdCodeLevelToId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterToId property. 
		///		مسلسل الفصل الدراسي
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"مسلسل الفصل الدراسي"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeSemesterToId
		{
			get
			{
				return this.entityData.EdCodeSemesterToId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterToId == value)
					return;
					
				OnColumnChanging(EntMajorPhaseColumn.EdCodeSemesterToId, this.entityData.EdCodeSemesterToId);
				this.entityData.EdCodeSemesterToId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntMajorPhaseColumn.EdCodeSemesterToId, this.entityData.EdCodeSemesterToId);
				OnPropertyChanged("EdCodeSemesterToId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PhasePeriod property. 
		///		XXالفترة بالشهور او الاسابيع
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPhasePeriodNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XXالفترة بالشهور او الاسابيع"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PhasePeriod
		{
			get
			{
				return this.entityData.PhasePeriod; 
			}
			
			set
			{
				if (this.entityData.PhasePeriod == value)
					return;
					
				OnColumnChanging(EntMajorPhaseColumn.PhasePeriod, this.entityData.PhasePeriod);
				this.entityData.PhasePeriod = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntMajorPhaseColumn.PhasePeriod, this.entityData.PhasePeriod);
				OnPropertyChanged("PhasePeriod");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(EntMajorPhaseColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntMajorPhaseColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PassCrsFlg property. 
		///		شرط النجاح فى جميع المقررات السابقة
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsPassCrsFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"شرط النجاح فى جميع المقررات السابقة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? PassCrsFlg
		{
			get
			{
				return this.entityData.PassCrsFlg; 
			}
			
			set
			{
				if (this.entityData.PassCrsFlg == value)
					return;
					
				OnColumnChanging(EntMajorPhaseColumn.PassCrsFlg, this.entityData.PassCrsFlg);
				this.entityData.PassCrsFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntMajorPhaseColumn.PassCrsFlg, this.entityData.PassCrsFlg);
				OnPropertyChanged("PassCrsFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(EntMajorPhaseColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntMajorPhaseColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(EntMajorPhaseColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntMajorPhaseColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelFromId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeLevel EdCodeLevelFromIdSource
      	{
            get { return entityData.EdCodeLevelFromIdSource; }
            set { entityData.EdCodeLevelFromIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelToId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeLevel EdCodeLevelToIdSource
      	{
            get { return entityData.EdCodeLevelToIdSource; }
            set { entityData.EdCodeLevelToIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterFromId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterFromIdSource
      	{
            get { return entityData.EdCodeSemesterFromIdSource; }
            set { entityData.EdCodeSemesterFromIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterToId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterToIdSource
      	{
            get { return entityData.EdCodeSemesterToIdSource; }
            set { entityData.EdCodeSemesterToIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return entityData.EntMainIdSource; }
            set { entityData.EntMainIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EntMajorPhaseCrsExp objects
		///	which are related to this object through the relation FK_ENT_MAJOR_PHASE_CRS_EXP_ENT_MAJOR_PHASE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntMajorPhaseCrsExp> EntMajorPhaseCrsExpCollection
		{
			get { return entityData.EntMajorPhaseCrsExpCollection; }
			set { entityData.EntMajorPhaseCrsExpCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudSemesterExt objects
		///	which are related to this object through the relation FK_ED_STUD_SEMESTER_EXT_ENT_MAJOR_PHASE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudSemesterExt> EdStudSemesterExtCollection
		{
			get { return entityData.EdStudSemesterExtCollection; }
			set { entityData.EdStudSemesterExtCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PhaseAr", "Phase Ar", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PhaseEn", "Phase En", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ENT_MAJOR_PHASE"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ENT_MAJOR_PHASE_ID", "ENT_MAIN_ID", "PHASE_AR", "PHASE_EN", "COURSE_POINT", "ED_CODE_LEVEL_FROM_ID", "ED_CODE_SEMESTER_FROM_ID", "ED_CODE_LEVEL_TO_ID", "ED_CODE_SEMESTER_TO_ID", "PHASE_PERIOD", "NOTES", "PASS_CRS_FLG", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EntMajorPhaseEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EntMajorPhase) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EntMajorPhase>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EntMajorPhase);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EntMajorPhase Entity 
		///</summary>
		protected virtual EntMajorPhase Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EntMajorPhase copy = new EntMajorPhase();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EntMajorPhaseId = this.EntMajorPhaseId;
					copy.OriginalEntMajorPhaseId = this.OriginalEntMajorPhaseId;
				copy.EntMainId = this.EntMainId;
				copy.PhaseAr = this.PhaseAr;
				copy.PhaseEn = this.PhaseEn;
				copy.CoursePoint = this.CoursePoint;
				copy.EdCodeLevelFromId = this.EdCodeLevelFromId;
				copy.EdCodeSemesterFromId = this.EdCodeSemesterFromId;
				copy.EdCodeLevelToId = this.EdCodeLevelToId;
				copy.EdCodeSemesterToId = this.EdCodeSemesterToId;
				copy.PhasePeriod = this.PhasePeriod;
				copy.Notes = this.Notes;
				copy.PassCrsFlg = this.PassCrsFlg;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.EdCodeLevelFromIdSource != null && existingCopies.Contains(this.EdCodeLevelFromIdSource))
				copy.EdCodeLevelFromIdSource = existingCopies[this.EdCodeLevelFromIdSource] as EdCodeLevel;
			else
				copy.EdCodeLevelFromIdSource = MakeCopyOf(this.EdCodeLevelFromIdSource, existingCopies) as EdCodeLevel;
			if (this.EdCodeLevelToIdSource != null && existingCopies.Contains(this.EdCodeLevelToIdSource))
				copy.EdCodeLevelToIdSource = existingCopies[this.EdCodeLevelToIdSource] as EdCodeLevel;
			else
				copy.EdCodeLevelToIdSource = MakeCopyOf(this.EdCodeLevelToIdSource, existingCopies) as EdCodeLevel;
			if (this.EdCodeSemesterFromIdSource != null && existingCopies.Contains(this.EdCodeSemesterFromIdSource))
				copy.EdCodeSemesterFromIdSource = existingCopies[this.EdCodeSemesterFromIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterFromIdSource = MakeCopyOf(this.EdCodeSemesterFromIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCodeSemesterToIdSource != null && existingCopies.Contains(this.EdCodeSemesterToIdSource))
				copy.EdCodeSemesterToIdSource = existingCopies[this.EdCodeSemesterToIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterToIdSource = MakeCopyOf(this.EdCodeSemesterToIdSource, existingCopies) as EdCodeSemester;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				copy.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				copy.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
		
			//deep copy nested objects
			copy.EntMajorPhaseCrsExpCollection = (TList<EntMajorPhaseCrsExp>) MakeCopyOf(this.EntMajorPhaseCrsExpCollection, existingCopies); 
			copy.EdStudSemesterExtCollection = (TList<EdStudSemesterExt>) MakeCopyOf(this.EdStudSemesterExtCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EntMajorPhase Entity 
		///</summary>
		public virtual EntMajorPhase Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EntMajorPhase Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EntMajorPhase DeepCopy()
		{
			return EntityHelper.Clone<EntMajorPhase>(this as EntMajorPhase);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EntMajorPhaseEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EntMajorPhaseEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EntMajorPhaseEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EntMajorPhaseColumn column)
		{
			switch(column)
			{
					case EntMajorPhaseColumn.EntMajorPhaseId:
					return entityData.EntMajorPhaseId != _originalData.EntMajorPhaseId;
					case EntMajorPhaseColumn.EntMainId:
					return entityData.EntMainId != _originalData.EntMainId;
					case EntMajorPhaseColumn.PhaseAr:
					return entityData.PhaseAr != _originalData.PhaseAr;
					case EntMajorPhaseColumn.PhaseEn:
					return entityData.PhaseEn != _originalData.PhaseEn;
					case EntMajorPhaseColumn.CoursePoint:
					return entityData.CoursePoint != _originalData.CoursePoint;
					case EntMajorPhaseColumn.EdCodeLevelFromId:
					return entityData.EdCodeLevelFromId != _originalData.EdCodeLevelFromId;
					case EntMajorPhaseColumn.EdCodeSemesterFromId:
					return entityData.EdCodeSemesterFromId != _originalData.EdCodeSemesterFromId;
					case EntMajorPhaseColumn.EdCodeLevelToId:
					return entityData.EdCodeLevelToId != _originalData.EdCodeLevelToId;
					case EntMajorPhaseColumn.EdCodeSemesterToId:
					return entityData.EdCodeSemesterToId != _originalData.EdCodeSemesterToId;
					case EntMajorPhaseColumn.PhasePeriod:
					return entityData.PhasePeriod != _originalData.PhasePeriod;
					case EntMajorPhaseColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case EntMajorPhaseColumn.PassCrsFlg:
					return entityData.PassCrsFlg != _originalData.PassCrsFlg;
					case EntMajorPhaseColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case EntMajorPhaseColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EntMajorPhaseColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EntMajorPhaseId != _originalData.EntMajorPhaseId;
			result = result || entityData.EntMainId != _originalData.EntMainId;
			result = result || entityData.PhaseAr != _originalData.PhaseAr;
			result = result || entityData.PhaseEn != _originalData.PhaseEn;
			result = result || entityData.CoursePoint != _originalData.CoursePoint;
			result = result || entityData.EdCodeLevelFromId != _originalData.EdCodeLevelFromId;
			result = result || entityData.EdCodeSemesterFromId != _originalData.EdCodeSemesterFromId;
			result = result || entityData.EdCodeLevelToId != _originalData.EdCodeLevelToId;
			result = result || entityData.EdCodeSemesterToId != _originalData.EdCodeSemesterToId;
			result = result || entityData.PhasePeriod != _originalData.PhasePeriod;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.PassCrsFlg != _originalData.PassCrsFlg;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a EntMajorPhase Entity with the original data.
		///</summary>
		public EntMajorPhase GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEntMajorPhase(
				_originalData.EntMajorPhaseId,
				_originalData.EntMainId,
				_originalData.PhaseAr,
				_originalData.PhaseEn,
				_originalData.CoursePoint,
				_originalData.EdCodeLevelFromId,
				_originalData.EdCodeSemesterFromId,
				_originalData.EdCodeLevelToId,
				_originalData.EdCodeSemesterToId,
				_originalData.PhasePeriod,
				_originalData.Notes,
				_originalData.PassCrsFlg,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (EntMajorPhase)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EntMajorPhaseBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EntMajorPhaseBase)
				return ValueEquals(this, (EntMajorPhaseBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EntMajorPhaseBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EntMajorPhaseId.GetHashCode() ^ 
					this.EntMainId.GetHashCode() ^ 
					((this.PhaseAr == null) ? string.Empty : this.PhaseAr.ToString()).GetHashCode() ^ 
					((this.PhaseEn == null) ? string.Empty : this.PhaseEn.ToString()).GetHashCode() ^ 
					((this.CoursePoint == null) ? string.Empty : this.CoursePoint.ToString()).GetHashCode() ^ 
					((this.EdCodeLevelFromId == null) ? string.Empty : this.EdCodeLevelFromId.ToString()).GetHashCode() ^ 
					this.EdCodeSemesterFromId.GetHashCode() ^ 
					this.EdCodeLevelToId.GetHashCode() ^ 
					this.EdCodeSemesterToId.GetHashCode() ^ 
					((this.PhasePeriod == null) ? string.Empty : this.PhasePeriod.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.PassCrsFlg == null) ? string.Empty : this.PassCrsFlg.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EntMajorPhaseBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EntMajorPhaseBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EntMajorPhaseBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EntMajorPhaseBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EntMajorPhaseBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EntMajorPhaseBase Object1, EntMajorPhaseBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EntMajorPhaseId != Object2.EntMajorPhaseId)
				equal = false;
			if (Object1.EntMainId != Object2.EntMainId)
				equal = false;
			if ( Object1.PhaseAr != null && Object2.PhaseAr != null )
			{
				if (Object1.PhaseAr != Object2.PhaseAr)
					equal = false;
			}
			else if (Object1.PhaseAr == null ^ Object2.PhaseAr == null )
			{
				equal = false;
			}
			if ( Object1.PhaseEn != null && Object2.PhaseEn != null )
			{
				if (Object1.PhaseEn != Object2.PhaseEn)
					equal = false;
			}
			else if (Object1.PhaseEn == null ^ Object2.PhaseEn == null )
			{
				equal = false;
			}
			if ( Object1.CoursePoint != null && Object2.CoursePoint != null )
			{
				if (Object1.CoursePoint != Object2.CoursePoint)
					equal = false;
			}
			else if (Object1.CoursePoint == null ^ Object2.CoursePoint == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeLevelFromId != null && Object2.EdCodeLevelFromId != null )
			{
				if (Object1.EdCodeLevelFromId != Object2.EdCodeLevelFromId)
					equal = false;
			}
			else if (Object1.EdCodeLevelFromId == null ^ Object2.EdCodeLevelFromId == null )
			{
				equal = false;
			}
			if (Object1.EdCodeSemesterFromId != Object2.EdCodeSemesterFromId)
				equal = false;
			if (Object1.EdCodeLevelToId != Object2.EdCodeLevelToId)
				equal = false;
			if (Object1.EdCodeSemesterToId != Object2.EdCodeSemesterToId)
				equal = false;
			if ( Object1.PhasePeriod != null && Object2.PhasePeriod != null )
			{
				if (Object1.PhasePeriod != Object2.PhasePeriod)
					equal = false;
			}
			else if (Object1.PhasePeriod == null ^ Object2.PhasePeriod == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.PassCrsFlg != null && Object2.PassCrsFlg != null )
			{
				if (Object1.PassCrsFlg != Object2.PassCrsFlg)
					equal = false;
			}
			else if (Object1.PassCrsFlg == null ^ Object2.PassCrsFlg == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EntMajorPhaseBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EntMajorPhaseComparer GetComparer()
        {
            return new EntMajorPhaseComparer();
        }
        */

        // Comparer delegates back to EntMajorPhase
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EntMajorPhase rhs, EntMajorPhaseColumn which)
        {
            switch (which)
            {
            	
            	
            	case EntMajorPhaseColumn.EntMajorPhaseId:
            		return this.EntMajorPhaseId.CompareTo(rhs.EntMajorPhaseId);
            		
            		                 
            	
            	
            	case EntMajorPhaseColumn.EntMainId:
            		return this.EntMainId.CompareTo(rhs.EntMainId);
            		
            		                 
            	
            	
            	case EntMajorPhaseColumn.PhaseAr:
            		return this.PhaseAr.CompareTo(rhs.PhaseAr);
            		
            		                 
            	
            	
            	case EntMajorPhaseColumn.PhaseEn:
            		return this.PhaseEn.CompareTo(rhs.PhaseEn);
            		
            		                 
            	
            	
            	case EntMajorPhaseColumn.CoursePoint:
            		return this.CoursePoint.Value.CompareTo(rhs.CoursePoint.Value);
            		
            		                 
            	
            	
            	case EntMajorPhaseColumn.EdCodeLevelFromId:
            		return this.EdCodeLevelFromId.Value.CompareTo(rhs.EdCodeLevelFromId.Value);
            		
            		                 
            	
            	
            	case EntMajorPhaseColumn.EdCodeSemesterFromId:
            		return this.EdCodeSemesterFromId.CompareTo(rhs.EdCodeSemesterFromId);
            		
            		                 
            	
            	
            	case EntMajorPhaseColumn.EdCodeLevelToId:
            		return this.EdCodeLevelToId.CompareTo(rhs.EdCodeLevelToId);
            		
            		                 
            	
            	
            	case EntMajorPhaseColumn.EdCodeSemesterToId:
            		return this.EdCodeSemesterToId.CompareTo(rhs.EdCodeSemesterToId);
            		
            		                 
            	
            	
            	case EntMajorPhaseColumn.PhasePeriod:
            		return this.PhasePeriod.Value.CompareTo(rhs.PhasePeriod.Value);
            		
            		                 
            	
            	
            	case EntMajorPhaseColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case EntMajorPhaseColumn.PassCrsFlg:
            		return this.PassCrsFlg.Value.CompareTo(rhs.PassCrsFlg.Value);
            		
            		                 
            	
            	
            	case EntMajorPhaseColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case EntMajorPhaseColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EntMajorPhaseKey> Members
		
		// member variable for the EntityId property
		private EntMajorPhaseKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EntMajorPhaseKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EntMajorPhaseKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EntMajorPhase")
					.Append("|").Append( this.EntMajorPhaseId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{15}{14}- EntMajorPhaseId: {0}{14}- EntMainId: {1}{14}- PhaseAr: {2}{14}- PhaseEn: {3}{14}- CoursePoint: {4}{14}- EdCodeLevelFromId: {5}{14}- EdCodeSemesterFromId: {6}{14}- EdCodeLevelToId: {7}{14}- EdCodeSemesterToId: {8}{14}- PhasePeriod: {9}{14}- Notes: {10}{14}- PassCrsFlg: {11}{14}- SeUserId: {12}{14}- LastDate: {13}{14}{16}", 
				this.EntMajorPhaseId,
				this.EntMainId,
				(this.PhaseAr == null) ? string.Empty : this.PhaseAr.ToString(),
				(this.PhaseEn == null) ? string.Empty : this.PhaseEn.ToString(),
				(this.CoursePoint == null) ? string.Empty : this.CoursePoint.ToString(),
				(this.EdCodeLevelFromId == null) ? string.Empty : this.EdCodeLevelFromId.ToString(),
				this.EdCodeSemesterFromId,
				this.EdCodeLevelToId,
				this.EdCodeSemesterToId,
				(this.PhasePeriod == null) ? string.Empty : this.PhasePeriod.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.PassCrsFlg == null) ? string.Empty : this.PassCrsFlg.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ENT_MAJOR_PHASE' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EntMajorPhaseEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ENT_MAJOR_PHASE_ID : المراحل الدارسية
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ENT_MAJOR_PHASE"</remarks>
		public System.Decimal EntMajorPhaseId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEntMajorPhaseId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ENT_MAIN_ID : تخصص رئيسي
		/// </summary>
		public System.Decimal		  EntMainId = 0.0m;
		
		/// <summary>
		/// PHASE_AR : 
		/// </summary>
		public System.String		  PhaseAr = null;
		
		/// <summary>
		/// PHASE_EN : 
		/// </summary>
		public System.String		  PhaseEn = null;
		
		/// <summary>
		/// COURSE_POINT : XX not used
		/// </summary>
		public System.Decimal?		  CoursePoint = null;
		
		/// <summary>
		/// ED_CODE_LEVEL_FROM_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeLevelFromId = null;
		
		/// <summary>
		/// ED_CODE_SEMESTER_FROM_ID : مسلسل الفصل الدراسي
		/// </summary>
		public System.Decimal		  EdCodeSemesterFromId = 0.0m;
		
		/// <summary>
		/// ED_CODE_LEVEL_TO_ID : 
		/// </summary>
		public System.Decimal		  EdCodeLevelToId = 0.0m;
		
		/// <summary>
		/// ED_CODE_SEMESTER_TO_ID : مسلسل الفصل الدراسي
		/// </summary>
		public System.Decimal		  EdCodeSemesterToId = 0.0m;
		
		/// <summary>
		/// PHASE_PERIOD : XXالفترة بالشهور او الاسابيع
		/// </summary>
		public System.Decimal?		  PhasePeriod = null;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// PASS_CRS_FLG : شرط النجاح فى جميع المقررات السابقة
		/// </summary>
		public System.Boolean?		  PassCrsFlg = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdCodeLevel _edCodeLevelFromIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelFromId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeLevel EdCodeLevelFromIdSource
      	{
            get { return this._edCodeLevelFromIdSource; }
            set { this._edCodeLevelFromIdSource = value; }
      	}
		private EdCodeLevel _edCodeLevelToIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelToId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeLevel EdCodeLevelToIdSource
      	{
            get { return this._edCodeLevelToIdSource; }
            set { this._edCodeLevelToIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterFromIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterFromId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterFromIdSource
      	{
            get { return this._edCodeSemesterFromIdSource; }
            set { this._edCodeSemesterFromIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterToIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterToId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterToIdSource
      	{
            get { return this._edCodeSemesterToIdSource; }
            set { this._edCodeSemesterToIdSource = value; }
      	}
		private EntityMain _entMainIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return this._entMainIdSource; }
            set { this._entMainIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EntMajorPhaseCrsExpCollection
		
		private TList<EntMajorPhaseCrsExp> _entMajorPhaseCrsExpEntMajorPhaseId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entMajorPhaseCrsExpEntMajorPhaseId
		/// </summary>
		
		public TList<EntMajorPhaseCrsExp> EntMajorPhaseCrsExpCollection
		{
			get
			{
				if (_entMajorPhaseCrsExpEntMajorPhaseId == null)
				{
				_entMajorPhaseCrsExpEntMajorPhaseId = new TList<EntMajorPhaseCrsExp>();
				}
	
				return _entMajorPhaseCrsExpEntMajorPhaseId;
			}
			set { _entMajorPhaseCrsExpEntMajorPhaseId = value; }
		}
		
		#endregion

		#region EdStudSemesterExtCollection
		
		private TList<EdStudSemesterExt> _edStudSemesterExtEntMajorPhaseId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudSemesterExtEntMajorPhaseId
		/// </summary>
		
		public TList<EdStudSemesterExt> EdStudSemesterExtCollection
		{
			get
			{
				if (_edStudSemesterExtEntMajorPhaseId == null)
				{
				_edStudSemesterExtEntMajorPhaseId = new TList<EdStudSemesterExt>();
				}
	
				return _edStudSemesterExtEntMajorPhaseId;
			}
			set { _edStudSemesterExtEntMajorPhaseId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EntMajorPhaseEntityData _tmp = new EntMajorPhaseEntityData();
						
			_tmp.EntMajorPhaseId = this.EntMajorPhaseId;
			_tmp.OriginalEntMajorPhaseId = this.OriginalEntMajorPhaseId;
			
			_tmp.EntMainId = this.EntMainId;
			_tmp.PhaseAr = this.PhaseAr;
			_tmp.PhaseEn = this.PhaseEn;
			_tmp.CoursePoint = this.CoursePoint;
			_tmp.EdCodeLevelFromId = this.EdCodeLevelFromId;
			_tmp.EdCodeSemesterFromId = this.EdCodeSemesterFromId;
			_tmp.EdCodeLevelToId = this.EdCodeLevelToId;
			_tmp.EdCodeSemesterToId = this.EdCodeSemesterToId;
			_tmp.PhasePeriod = this.PhasePeriod;
			_tmp.Notes = this.Notes;
			_tmp.PassCrsFlg = this.PassCrsFlg;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdCodeLevelFromIdSource != null)
				_tmp.EdCodeLevelFromIdSource = MakeCopyOf(this.EdCodeLevelFromIdSource) as EdCodeLevel;
			if (this.EdCodeLevelToIdSource != null)
				_tmp.EdCodeLevelToIdSource = MakeCopyOf(this.EdCodeLevelToIdSource) as EdCodeLevel;
			if (this.EdCodeSemesterFromIdSource != null)
				_tmp.EdCodeSemesterFromIdSource = MakeCopyOf(this.EdCodeSemesterFromIdSource) as EdCodeSemester;
			if (this.EdCodeSemesterToIdSource != null)
				_tmp.EdCodeSemesterToIdSource = MakeCopyOf(this.EdCodeSemesterToIdSource) as EdCodeSemester;
			if (this.EntMainIdSource != null)
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource) as EntityMain;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._entMajorPhaseCrsExpEntMajorPhaseId != null)
				_tmp.EntMajorPhaseCrsExpCollection = (TList<EntMajorPhaseCrsExp>) MakeCopyOf(this.EntMajorPhaseCrsExpCollection); 
			if (this._edStudSemesterExtEntMajorPhaseId != null)
				_tmp.EdStudSemesterExtCollection = (TList<EdStudSemesterExt>) MakeCopyOf(this.EdStudSemesterExtCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EntMajorPhaseEntityData _tmp = new EntMajorPhaseEntityData();
						
			_tmp.EntMajorPhaseId = this.EntMajorPhaseId;
			_tmp.OriginalEntMajorPhaseId = this.OriginalEntMajorPhaseId;
			
			_tmp.EntMainId = this.EntMainId;
			_tmp.PhaseAr = this.PhaseAr;
			_tmp.PhaseEn = this.PhaseEn;
			_tmp.CoursePoint = this.CoursePoint;
			_tmp.EdCodeLevelFromId = this.EdCodeLevelFromId;
			_tmp.EdCodeSemesterFromId = this.EdCodeSemesterFromId;
			_tmp.EdCodeLevelToId = this.EdCodeLevelToId;
			_tmp.EdCodeSemesterToId = this.EdCodeSemesterToId;
			_tmp.PhasePeriod = this.PhasePeriod;
			_tmp.Notes = this.Notes;
			_tmp.PassCrsFlg = this.PassCrsFlg;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdCodeLevelFromIdSource != null && existingCopies.Contains(this.EdCodeLevelFromIdSource))
				_tmp.EdCodeLevelFromIdSource = existingCopies[this.EdCodeLevelFromIdSource] as EdCodeLevel;
			else
				_tmp.EdCodeLevelFromIdSource = MakeCopyOf(this.EdCodeLevelFromIdSource, existingCopies) as EdCodeLevel;
			if (this.EdCodeLevelToIdSource != null && existingCopies.Contains(this.EdCodeLevelToIdSource))
				_tmp.EdCodeLevelToIdSource = existingCopies[this.EdCodeLevelToIdSource] as EdCodeLevel;
			else
				_tmp.EdCodeLevelToIdSource = MakeCopyOf(this.EdCodeLevelToIdSource, existingCopies) as EdCodeLevel;
			if (this.EdCodeSemesterFromIdSource != null && existingCopies.Contains(this.EdCodeSemesterFromIdSource))
				_tmp.EdCodeSemesterFromIdSource = existingCopies[this.EdCodeSemesterFromIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterFromIdSource = MakeCopyOf(this.EdCodeSemesterFromIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCodeSemesterToIdSource != null && existingCopies.Contains(this.EdCodeSemesterToIdSource))
				_tmp.EdCodeSemesterToIdSource = existingCopies[this.EdCodeSemesterToIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterToIdSource = MakeCopyOf(this.EdCodeSemesterToIdSource, existingCopies) as EdCodeSemester;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				_tmp.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EntMajorPhaseCrsExpCollection = (TList<EntMajorPhaseCrsExp>) MakeCopyOf(this.EntMajorPhaseCrsExpCollection, existingCopies); 
			_tmp.EdStudSemesterExtCollection = (TList<EdStudSemesterExt>) MakeCopyOf(this.EdStudSemesterExtCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntMajorPhaseColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EntMajorPhaseColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntMajorPhaseColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EntMajorPhaseColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntMajorPhaseColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EntMajorPhaseColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EntMajorPhaseEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EntMajorPhaseEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntMajorPhaseColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EntMajorPhaseColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EntMajorPhaseEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EntMajorPhaseEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EntMajorPhaseEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EntMajorPhase"/> object.
	/// </remarks>
	public class EntMajorPhaseEventArgs : System.EventArgs
	{
		private EntMajorPhaseColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EntMajorPhaseEventArgs class.
		///</summary>
		public EntMajorPhaseEventArgs(EntMajorPhaseColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EntMajorPhaseEventArgs class.
		///</summary>
		public EntMajorPhaseEventArgs(EntMajorPhaseColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EntMajorPhaseColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EntMajorPhaseColumn" />
		public EntMajorPhaseColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EntMajorPhase related events.
	///</summary>
	public delegate void EntMajorPhaseEventHandler(object sender, EntMajorPhaseEventArgs e);
	
	#region EntMajorPhaseComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EntMajorPhaseComparer : System.Collections.Generic.IComparer<EntMajorPhase>
	{
		EntMajorPhaseColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EntMajorPhaseComparer"/> class.
        /// </summary>
		public EntMajorPhaseComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EntMajorPhaseComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EntMajorPhaseComparer(EntMajorPhaseColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EntMajorPhase"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EntMajorPhase"/> to compare.</param>
        /// <param name="b">The second <c>EntMajorPhase</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EntMajorPhase a, EntMajorPhase b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EntMajorPhase entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EntMajorPhase a, EntMajorPhase b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EntMajorPhaseColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EntMajorPhaseKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EntMajorPhase"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EntMajorPhaseKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EntMajorPhaseKey class.
		/// </summary>
		public EntMajorPhaseKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EntMajorPhaseKey class.
		/// </summary>
		public EntMajorPhaseKey(EntMajorPhaseBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EntMajorPhaseId = entity.EntMajorPhaseId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EntMajorPhaseKey class.
		/// </summary>
		public EntMajorPhaseKey(System.Decimal _entMajorPhaseId)
		{
			#region Init Properties

			this.EntMajorPhaseId = _entMajorPhaseId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EntMajorPhaseBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EntMajorPhaseBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EntMajorPhaseId property
		private System.Decimal _entMajorPhaseId;
		
		/// <summary>
		/// Gets or sets the EntMajorPhaseId property.
		/// </summary>
		public System.Decimal EntMajorPhaseId
		{
			get { return _entMajorPhaseId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EntMajorPhaseId = value;
				
				_entMajorPhaseId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EntMajorPhaseId = ( values["EntMajorPhaseId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EntMajorPhaseId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EntMajorPhaseId", EntMajorPhaseId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EntMajorPhaseId: {0}{1}",
								EntMajorPhaseId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EntMajorPhaseColumn Enum
	
	/// <summary>
	/// Enumerate the EntMajorPhase columns.
	/// </summary>
	[Serializable]
	public enum EntMajorPhaseColumn : int
	{
		/// <summary>
		/// EntMajorPhaseId : المراحل الدارسية
		/// </summary>
		[EnumTextValue("ENT_MAJOR_PHASE_ID")]
		[ColumnEnum("ENT_MAJOR_PHASE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EntMajorPhaseId = 1,
		/// <summary>
		/// EntMainId : تخصص رئيسي
		/// </summary>
		[EnumTextValue("ENT_MAIN_ID")]
		[ColumnEnum("ENT_MAIN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EntMainId = 2,
		/// <summary>
		/// PhaseAr : 
		/// </summary>
		[EnumTextValue("PHASE_AR")]
		[ColumnEnum("PHASE_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		PhaseAr = 3,
		/// <summary>
		/// PhaseEn : 
		/// </summary>
		[EnumTextValue("PHASE_EN")]
		[ColumnEnum("PHASE_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		PhaseEn = 4,
		/// <summary>
		/// CoursePoint : XX not used
		/// </summary>
		[EnumTextValue("COURSE_POINT")]
		[ColumnEnum("COURSE_POINT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CoursePoint = 5,
		/// <summary>
		/// EdCodeLevelFromId : 
		/// </summary>
		[EnumTextValue("ED_CODE_LEVEL_FROM_ID")]
		[ColumnEnum("ED_CODE_LEVEL_FROM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeLevelFromId = 6,
		/// <summary>
		/// EdCodeSemesterFromId : مسلسل الفصل الدراسي
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_FROM_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_FROM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeSemesterFromId = 7,
		/// <summary>
		/// EdCodeLevelToId : 
		/// </summary>
		[EnumTextValue("ED_CODE_LEVEL_TO_ID")]
		[ColumnEnum("ED_CODE_LEVEL_TO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeLevelToId = 8,
		/// <summary>
		/// EdCodeSemesterToId : مسلسل الفصل الدراسي
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_TO_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_TO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeSemesterToId = 9,
		/// <summary>
		/// PhasePeriod : XXالفترة بالشهور او الاسابيع
		/// </summary>
		[EnumTextValue("PHASE_PERIOD")]
		[ColumnEnum("PHASE_PERIOD", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PhasePeriod = 10,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Notes = 11,
		/// <summary>
		/// PassCrsFlg : شرط النجاح فى جميع المقررات السابقة
		/// </summary>
		[EnumTextValue("PASS_CRS_FLG")]
		[ColumnEnum("PASS_CRS_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		PassCrsFlg = 12,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 13,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 14
	}//End enum

	#endregion EntMajorPhaseColumn Enum

} // end namespace
