
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdStudMltryCrs.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_STUD_MLTRY_CRS' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdStudMltryCrsBase : EntityBase, IEdStudMltryCrs, IEntityId<EdStudMltryCrsKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdStudMltryCrsEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdStudMltryCrsEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdStudMltryCrsEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdStudMltryCrs> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudMltryCrsEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudMltryCrsEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdStudMltryCrsBase"/> instance.
		///</summary>
		public EdStudMltryCrsBase()
		{
			this.entityData = new EdStudMltryCrsEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdStudMltryCrsBase"/> instance.
		///</summary>
		///<param name="_edStudMltryCrsId">مقررات الدورة العسكرية</param>
		///<param name="_edStudId"></param>
		///<param name="_milCodeCourseId">مقررات الدورة العسكرية</param>
		///<param name="_milCourseNotes">ملاحظات على الطالب</param>
		///<param name="_absFlg">غايب</param>
		///<param name="_gsCodeMilCourseResId">نتيجة الدورة</param>
		///<param name="_isLast">only record =1 with each STUDENT</param>
		///<param name="_milPgNo">رقم الصفحة</param>
		///<param name="_milSerial">مسلسل الطالب</param>
		public EdStudMltryCrsBase(System.Decimal _edStudMltryCrsId, System.Decimal _edStudId, 
			System.Int32? _milCodeCourseId, System.String _milCourseNotes, System.Boolean? _absFlg, 
			System.Decimal? _gsCodeMilCourseResId, System.Boolean _isLast, System.Decimal? _milPgNo, 
			System.Decimal? _milSerial)
		{
			this.entityData = new EdStudMltryCrsEntityData();
			this.backupData = null;

			this.EdStudMltryCrsId = _edStudMltryCrsId;
			this.EdStudId = _edStudId;
			this.MilCodeCourseId = _milCodeCourseId;
			this.MilCourseNotes = _milCourseNotes;
			this.AbsFlg = _absFlg;
			this.GsCodeMilCourseResId = _gsCodeMilCourseResId;
			this.IsLast = _isLast;
			this.MilPgNo = _milPgNo;
			this.MilSerial = _milSerial;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdStudMltryCrs"/> instance.
		///</summary>
		///<param name="_edStudMltryCrsId">مقررات الدورة العسكرية</param>
		///<param name="_edStudId"></param>
		///<param name="_milCodeCourseId">مقررات الدورة العسكرية</param>
		///<param name="_milCourseNotes">ملاحظات على الطالب</param>
		///<param name="_absFlg">غايب</param>
		///<param name="_gsCodeMilCourseResId">نتيجة الدورة</param>
		///<param name="_isLast">only record =1 with each STUDENT</param>
		///<param name="_milPgNo">رقم الصفحة</param>
		///<param name="_milSerial">مسلسل الطالب</param>
		public static EdStudMltryCrs CreateEdStudMltryCrs(System.Decimal _edStudMltryCrsId, System.Decimal _edStudId, 
			System.Int32? _milCodeCourseId, System.String _milCourseNotes, System.Boolean? _absFlg, 
			System.Decimal? _gsCodeMilCourseResId, System.Boolean _isLast, System.Decimal? _milPgNo, 
			System.Decimal? _milSerial)
		{
			EdStudMltryCrs newEdStudMltryCrs = new EdStudMltryCrs();
			newEdStudMltryCrs.EdStudMltryCrsId = _edStudMltryCrsId;
			newEdStudMltryCrs.EdStudId = _edStudId;
			newEdStudMltryCrs.MilCodeCourseId = _milCodeCourseId;
			newEdStudMltryCrs.MilCourseNotes = _milCourseNotes;
			newEdStudMltryCrs.AbsFlg = _absFlg;
			newEdStudMltryCrs.GsCodeMilCourseResId = _gsCodeMilCourseResId;
			newEdStudMltryCrs.IsLast = _isLast;
			newEdStudMltryCrs.MilPgNo = _milPgNo;
			newEdStudMltryCrs.MilSerial = _milSerial;
			return newEdStudMltryCrs;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdStudMltryCrsId property. 
		///		مقررات الدورة العسكرية
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"مقررات الدورة العسكرية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdStudMltryCrsId
		{
			get
			{
				return this.entityData.EdStudMltryCrsId; 
			}
			
			set
			{
				if (this.entityData.EdStudMltryCrsId == value)
					return;
					
				OnColumnChanging(EdStudMltryCrsColumn.EdStudMltryCrsId, this.entityData.EdStudMltryCrsId);
				this.entityData.EdStudMltryCrsId = value;
				this.EntityId.EdStudMltryCrsId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudMltryCrsColumn.EdStudMltryCrsId, this.entityData.EdStudMltryCrsId);
				OnPropertyChanged("EdStudMltryCrsId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_STUD_MLTRY_CRS_ID property.
		///		مقررات الدورة العسكرية
		/// </summary>
		/// <remarks>This is the original value of the ED_STUD_MLTRY_CRS_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdStudMltryCrsId
		{
			get { return this.entityData.OriginalEdStudMltryCrsId; }
			set { this.entityData.OriginalEdStudMltryCrsId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(EdStudMltryCrsColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudMltryCrsColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MilCodeCourseId property. 
		///		مقررات الدورة العسكرية
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMilCodeCourseIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مقررات الدورة العسكرية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MilCodeCourseId
		{
			get
			{
				return this.entityData.MilCodeCourseId; 
			}
			
			set
			{
				if (this.entityData.MilCodeCourseId == value)
					return;
					
				OnColumnChanging(EdStudMltryCrsColumn.MilCodeCourseId, this.entityData.MilCodeCourseId);
				this.entityData.MilCodeCourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudMltryCrsColumn.MilCodeCourseId, this.entityData.MilCodeCourseId);
				OnPropertyChanged("MilCodeCourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MilCourseNotes property. 
		///		ملاحظات على الطالب
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"ملاحظات على الطالب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 400)]
		public virtual System.String MilCourseNotes
		{
			get
			{
				return this.entityData.MilCourseNotes; 
			}
			
			set
			{
				if (this.entityData.MilCourseNotes == value)
					return;
					
				OnColumnChanging(EdStudMltryCrsColumn.MilCourseNotes, this.entityData.MilCourseNotes);
				this.entityData.MilCourseNotes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudMltryCrsColumn.MilCourseNotes, this.entityData.MilCourseNotes);
				OnPropertyChanged("MilCourseNotes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AbsFlg property. 
		///		غايب
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsAbsFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"غايب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? AbsFlg
		{
			get
			{
				return this.entityData.AbsFlg; 
			}
			
			set
			{
				if (this.entityData.AbsFlg == value)
					return;
					
				OnColumnChanging(EdStudMltryCrsColumn.AbsFlg, this.entityData.AbsFlg);
				this.entityData.AbsFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudMltryCrsColumn.AbsFlg, this.entityData.AbsFlg);
				OnPropertyChanged("AbsFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeMilCourseResId property. 
		///		نتيجة الدورة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCodeMilCourseResIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"نتيجة الدورة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCodeMilCourseResId
		{
			get
			{
				return this.entityData.GsCodeMilCourseResId; 
			}
			
			set
			{
				if (this.entityData.GsCodeMilCourseResId == value)
					return;
					
				OnColumnChanging(EdStudMltryCrsColumn.GsCodeMilCourseResId, this.entityData.GsCodeMilCourseResId);
				this.entityData.GsCodeMilCourseResId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudMltryCrsColumn.GsCodeMilCourseResId, this.entityData.GsCodeMilCourseResId);
				OnPropertyChanged("GsCodeMilCourseResId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsLast property. 
		///		only record =1 with each STUDENT
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"only record =1 with each STUDENT"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean IsLast
		{
			get
			{
				return this.entityData.IsLast; 
			}
			
			set
			{
				if (this.entityData.IsLast == value)
					return;
					
				OnColumnChanging(EdStudMltryCrsColumn.IsLast, this.entityData.IsLast);
				this.entityData.IsLast = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudMltryCrsColumn.IsLast, this.entityData.IsLast);
				OnPropertyChanged("IsLast");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MilPgNo property. 
		///		رقم الصفحة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMilPgNoNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"رقم الصفحة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MilPgNo
		{
			get
			{
				return this.entityData.MilPgNo; 
			}
			
			set
			{
				if (this.entityData.MilPgNo == value)
					return;
					
				OnColumnChanging(EdStudMltryCrsColumn.MilPgNo, this.entityData.MilPgNo);
				this.entityData.MilPgNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudMltryCrsColumn.MilPgNo, this.entityData.MilPgNo);
				OnPropertyChanged("MilPgNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MilSerial property. 
		///		مسلسل الطالب
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMilSerialNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مسلسل الطالب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MilSerial
		{
			get
			{
				return this.entityData.MilSerial; 
			}
			
			set
			{
				if (this.entityData.MilSerial == value)
					return;
					
				OnColumnChanging(EdStudMltryCrsColumn.MilSerial, this.entityData.MilSerial);
				this.entityData.MilSerial = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudMltryCrsColumn.MilSerial, this.entityData.MilSerial);
				OnPropertyChanged("MilSerial");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeMilCourseRes"/>.
		/// </summary>
		/// <value>The source GsCodeMilCourseRes for GsCodeMilCourseResId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeMilCourseRes GsCodeMilCourseResIdSource
      	{
            get { return entityData.GsCodeMilCourseResIdSource; }
            set { entityData.GsCodeMilCourseResIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="MilCodeCourse"/>.
		/// </summary>
		/// <value>The source MilCodeCourse for MilCodeCourseId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual MilCodeCourse MilCodeCourseIdSource
      	{
            get { return entityData.MilCodeCourseIdSource; }
            set { entityData.MilCodeCourseIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MilCourseNotes", "Mil Course Notes", 400));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_STUD_MLTRY_CRS"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_STUD_MLTRY_CRS_ID", "ED_STUD_ID", "MIL_CODE_COURSE_ID", "MIL_COURSE_NOTES", "ABS_FLG", "GS_CODE_MIL_COURSE_RES_ID", "IS_LAST", "MIL_PG_NO", "MIL_SERIAL"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdStudMltryCrsEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdStudMltryCrs) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdStudMltryCrs>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdStudMltryCrs);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdStudMltryCrs Entity 
		///</summary>
		protected virtual EdStudMltryCrs Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdStudMltryCrs copy = new EdStudMltryCrs();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdStudMltryCrsId = this.EdStudMltryCrsId;
					copy.OriginalEdStudMltryCrsId = this.OriginalEdStudMltryCrsId;
				copy.EdStudId = this.EdStudId;
				copy.MilCodeCourseId = this.MilCodeCourseId;
				copy.MilCourseNotes = this.MilCourseNotes;
				copy.AbsFlg = this.AbsFlg;
				copy.GsCodeMilCourseResId = this.GsCodeMilCourseResId;
				copy.IsLast = this.IsLast;
				copy.MilPgNo = this.MilPgNo;
				copy.MilSerial = this.MilSerial;
			
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.GsCodeMilCourseResIdSource != null && existingCopies.Contains(this.GsCodeMilCourseResIdSource))
				copy.GsCodeMilCourseResIdSource = existingCopies[this.GsCodeMilCourseResIdSource] as GsCodeMilCourseRes;
			else
				copy.GsCodeMilCourseResIdSource = MakeCopyOf(this.GsCodeMilCourseResIdSource, existingCopies) as GsCodeMilCourseRes;
			if (this.MilCodeCourseIdSource != null && existingCopies.Contains(this.MilCodeCourseIdSource))
				copy.MilCodeCourseIdSource = existingCopies[this.MilCodeCourseIdSource] as MilCodeCourse;
			else
				copy.MilCodeCourseIdSource = MakeCopyOf(this.MilCodeCourseIdSource, existingCopies) as MilCodeCourse;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdStudMltryCrs Entity 
		///</summary>
		public virtual EdStudMltryCrs Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdStudMltryCrs Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdStudMltryCrs DeepCopy()
		{
			return EntityHelper.Clone<EdStudMltryCrs>(this as EdStudMltryCrs);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdStudMltryCrsEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdStudMltryCrsEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdStudMltryCrsEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdStudMltryCrsColumn column)
		{
			switch(column)
			{
					case EdStudMltryCrsColumn.EdStudMltryCrsId:
					return entityData.EdStudMltryCrsId != _originalData.EdStudMltryCrsId;
					case EdStudMltryCrsColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case EdStudMltryCrsColumn.MilCodeCourseId:
					return entityData.MilCodeCourseId != _originalData.MilCodeCourseId;
					case EdStudMltryCrsColumn.MilCourseNotes:
					return entityData.MilCourseNotes != _originalData.MilCourseNotes;
					case EdStudMltryCrsColumn.AbsFlg:
					return entityData.AbsFlg != _originalData.AbsFlg;
					case EdStudMltryCrsColumn.GsCodeMilCourseResId:
					return entityData.GsCodeMilCourseResId != _originalData.GsCodeMilCourseResId;
					case EdStudMltryCrsColumn.IsLast:
					return entityData.IsLast != _originalData.IsLast;
					case EdStudMltryCrsColumn.MilPgNo:
					return entityData.MilPgNo != _originalData.MilPgNo;
					case EdStudMltryCrsColumn.MilSerial:
					return entityData.MilSerial != _originalData.MilSerial;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdStudMltryCrsColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdStudMltryCrsId != _originalData.EdStudMltryCrsId;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.MilCodeCourseId != _originalData.MilCodeCourseId;
			result = result || entityData.MilCourseNotes != _originalData.MilCourseNotes;
			result = result || entityData.AbsFlg != _originalData.AbsFlg;
			result = result || entityData.GsCodeMilCourseResId != _originalData.GsCodeMilCourseResId;
			result = result || entityData.IsLast != _originalData.IsLast;
			result = result || entityData.MilPgNo != _originalData.MilPgNo;
			result = result || entityData.MilSerial != _originalData.MilSerial;
			return result;
		}	
		
		///<summary>
		///  Returns a EdStudMltryCrs Entity with the original data.
		///</summary>
		public EdStudMltryCrs GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdStudMltryCrs(
				_originalData.EdStudMltryCrsId,
				_originalData.EdStudId,
				_originalData.MilCodeCourseId,
				_originalData.MilCourseNotes,
				_originalData.AbsFlg,
				_originalData.GsCodeMilCourseResId,
				_originalData.IsLast,
				_originalData.MilPgNo,
				_originalData.MilSerial
				);
				
			return (EdStudMltryCrs)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdStudMltryCrsBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdStudMltryCrsBase)
				return ValueEquals(this, (EdStudMltryCrsBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdStudMltryCrsBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdStudMltryCrsId.GetHashCode() ^ 
					this.EdStudId.GetHashCode() ^ 
					((this.MilCodeCourseId == null) ? string.Empty : this.MilCodeCourseId.ToString()).GetHashCode() ^ 
					((this.MilCourseNotes == null) ? string.Empty : this.MilCourseNotes.ToString()).GetHashCode() ^ 
					((this.AbsFlg == null) ? string.Empty : this.AbsFlg.ToString()).GetHashCode() ^ 
					((this.GsCodeMilCourseResId == null) ? string.Empty : this.GsCodeMilCourseResId.ToString()).GetHashCode() ^ 
					this.IsLast.GetHashCode() ^ 
					((this.MilPgNo == null) ? string.Empty : this.MilPgNo.ToString()).GetHashCode() ^ 
					((this.MilSerial == null) ? string.Empty : this.MilSerial.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdStudMltryCrsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdStudMltryCrsBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdStudMltryCrsBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdStudMltryCrsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdStudMltryCrsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdStudMltryCrsBase Object1, EdStudMltryCrsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdStudMltryCrsId != Object2.EdStudMltryCrsId)
				equal = false;
			if (Object1.EdStudId != Object2.EdStudId)
				equal = false;
			if ( Object1.MilCodeCourseId != null && Object2.MilCodeCourseId != null )
			{
				if (Object1.MilCodeCourseId != Object2.MilCodeCourseId)
					equal = false;
			}
			else if (Object1.MilCodeCourseId == null ^ Object2.MilCodeCourseId == null )
			{
				equal = false;
			}
			if ( Object1.MilCourseNotes != null && Object2.MilCourseNotes != null )
			{
				if (Object1.MilCourseNotes != Object2.MilCourseNotes)
					equal = false;
			}
			else if (Object1.MilCourseNotes == null ^ Object2.MilCourseNotes == null )
			{
				equal = false;
			}
			if ( Object1.AbsFlg != null && Object2.AbsFlg != null )
			{
				if (Object1.AbsFlg != Object2.AbsFlg)
					equal = false;
			}
			else if (Object1.AbsFlg == null ^ Object2.AbsFlg == null )
			{
				equal = false;
			}
			if ( Object1.GsCodeMilCourseResId != null && Object2.GsCodeMilCourseResId != null )
			{
				if (Object1.GsCodeMilCourseResId != Object2.GsCodeMilCourseResId)
					equal = false;
			}
			else if (Object1.GsCodeMilCourseResId == null ^ Object2.GsCodeMilCourseResId == null )
			{
				equal = false;
			}
			if (Object1.IsLast != Object2.IsLast)
				equal = false;
			if ( Object1.MilPgNo != null && Object2.MilPgNo != null )
			{
				if (Object1.MilPgNo != Object2.MilPgNo)
					equal = false;
			}
			else if (Object1.MilPgNo == null ^ Object2.MilPgNo == null )
			{
				equal = false;
			}
			if ( Object1.MilSerial != null && Object2.MilSerial != null )
			{
				if (Object1.MilSerial != Object2.MilSerial)
					equal = false;
			}
			else if (Object1.MilSerial == null ^ Object2.MilSerial == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdStudMltryCrsBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdStudMltryCrsComparer GetComparer()
        {
            return new EdStudMltryCrsComparer();
        }
        */

        // Comparer delegates back to EdStudMltryCrs
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdStudMltryCrs rhs, EdStudMltryCrsColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdStudMltryCrsColumn.EdStudMltryCrsId:
            		return this.EdStudMltryCrsId.CompareTo(rhs.EdStudMltryCrsId);
            		
            		                 
            	
            	
            	case EdStudMltryCrsColumn.EdStudId:
            		return this.EdStudId.CompareTo(rhs.EdStudId);
            		
            		                 
            	
            	
            	case EdStudMltryCrsColumn.MilCodeCourseId:
            		return this.MilCodeCourseId.Value.CompareTo(rhs.MilCodeCourseId.Value);
            		
            		                 
            	
            	
            	case EdStudMltryCrsColumn.MilCourseNotes:
            		return this.MilCourseNotes.CompareTo(rhs.MilCourseNotes);
            		
            		                 
            	
            	
            	case EdStudMltryCrsColumn.AbsFlg:
            		return this.AbsFlg.Value.CompareTo(rhs.AbsFlg.Value);
            		
            		                 
            	
            	
            	case EdStudMltryCrsColumn.GsCodeMilCourseResId:
            		return this.GsCodeMilCourseResId.Value.CompareTo(rhs.GsCodeMilCourseResId.Value);
            		
            		                 
            	
            	
            	case EdStudMltryCrsColumn.IsLast:
            		return this.IsLast.CompareTo(rhs.IsLast);
            		
            		                 
            	
            	
            	case EdStudMltryCrsColumn.MilPgNo:
            		return this.MilPgNo.Value.CompareTo(rhs.MilPgNo.Value);
            		
            		                 
            	
            	
            	case EdStudMltryCrsColumn.MilSerial:
            		return this.MilSerial.Value.CompareTo(rhs.MilSerial.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdStudMltryCrsKey> Members
		
		// member variable for the EntityId property
		private EdStudMltryCrsKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdStudMltryCrsKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdStudMltryCrsKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdStudMltryCrs")
					.Append("|").Append( this.EdStudMltryCrsId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- EdStudMltryCrsId: {0}{9}- EdStudId: {1}{9}- MilCodeCourseId: {2}{9}- MilCourseNotes: {3}{9}- AbsFlg: {4}{9}- GsCodeMilCourseResId: {5}{9}- IsLast: {6}{9}- MilPgNo: {7}{9}- MilSerial: {8}{9}{11}", 
				this.EdStudMltryCrsId,
				this.EdStudId,
				(this.MilCodeCourseId == null) ? string.Empty : this.MilCodeCourseId.ToString(),
				(this.MilCourseNotes == null) ? string.Empty : this.MilCourseNotes.ToString(),
				(this.AbsFlg == null) ? string.Empty : this.AbsFlg.ToString(),
				(this.GsCodeMilCourseResId == null) ? string.Empty : this.GsCodeMilCourseResId.ToString(),
				this.IsLast,
				(this.MilPgNo == null) ? string.Empty : this.MilPgNo.ToString(),
				(this.MilSerial == null) ? string.Empty : this.MilSerial.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_STUD_MLTRY_CRS' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdStudMltryCrsEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_STUD_MLTRY_CRS_ID : مقررات الدورة العسكرية
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_STUD_MLTRY_CRS"</remarks>
		public System.Decimal EdStudMltryCrsId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdStudMltryCrsId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_STUD_ID : 
		/// </summary>
		public System.Decimal		  EdStudId = 0.0m;
		
		/// <summary>
		/// MIL_CODE_COURSE_ID : مقررات الدورة العسكرية
		/// </summary>
		public System.Int32?		  MilCodeCourseId = null;
		
		/// <summary>
		/// MIL_COURSE_NOTES : ملاحظات على الطالب
		/// </summary>
		public System.String		  MilCourseNotes = null;
		
		/// <summary>
		/// ABS_FLG : غايب
		/// </summary>
		public System.Boolean?		  AbsFlg = null;
		
		/// <summary>
		/// GS_CODE_MIL_COURSE_RES_ID : نتيجة الدورة
		/// </summary>
		public System.Decimal?		  GsCodeMilCourseResId = null;
		
		/// <summary>
		/// IS_LAST : only record =1 with each STUDENT
		/// </summary>
		public System.Boolean		  IsLast = false;
		
		/// <summary>
		/// MIL_PG_NO : رقم الصفحة
		/// </summary>
		public System.Decimal?		  MilPgNo = null;
		
		/// <summary>
		/// MIL_SERIAL : مسلسل الطالب
		/// </summary>
		public System.Decimal?		  MilSerial = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		private GsCodeMilCourseRes _gsCodeMilCourseResIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeMilCourseRes"/>.
		/// </summary>
		/// <value>The source GsCodeMilCourseRes for GsCodeMilCourseResId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeMilCourseRes GsCodeMilCourseResIdSource
      	{
            get { return this._gsCodeMilCourseResIdSource; }
            set { this._gsCodeMilCourseResIdSource = value; }
      	}
		private MilCodeCourse _milCodeCourseIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="MilCodeCourse"/>.
		/// </summary>
		/// <value>The source MilCodeCourse for MilCodeCourseId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual MilCodeCourse MilCodeCourseIdSource
      	{
            get { return this._milCodeCourseIdSource; }
            set { this._milCodeCourseIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdStudMltryCrsEntityData _tmp = new EdStudMltryCrsEntityData();
						
			_tmp.EdStudMltryCrsId = this.EdStudMltryCrsId;
			_tmp.OriginalEdStudMltryCrsId = this.OriginalEdStudMltryCrsId;
			
			_tmp.EdStudId = this.EdStudId;
			_tmp.MilCodeCourseId = this.MilCodeCourseId;
			_tmp.MilCourseNotes = this.MilCourseNotes;
			_tmp.AbsFlg = this.AbsFlg;
			_tmp.GsCodeMilCourseResId = this.GsCodeMilCourseResId;
			_tmp.IsLast = this.IsLast;
			_tmp.MilPgNo = this.MilPgNo;
			_tmp.MilSerial = this.MilSerial;
			
			#region Source Parent Composite Entities
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			if (this.GsCodeMilCourseResIdSource != null)
				_tmp.GsCodeMilCourseResIdSource = MakeCopyOf(this.GsCodeMilCourseResIdSource) as GsCodeMilCourseRes;
			if (this.MilCodeCourseIdSource != null)
				_tmp.MilCodeCourseIdSource = MakeCopyOf(this.MilCodeCourseIdSource) as MilCodeCourse;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdStudMltryCrsEntityData _tmp = new EdStudMltryCrsEntityData();
						
			_tmp.EdStudMltryCrsId = this.EdStudMltryCrsId;
			_tmp.OriginalEdStudMltryCrsId = this.OriginalEdStudMltryCrsId;
			
			_tmp.EdStudId = this.EdStudId;
			_tmp.MilCodeCourseId = this.MilCodeCourseId;
			_tmp.MilCourseNotes = this.MilCourseNotes;
			_tmp.AbsFlg = this.AbsFlg;
			_tmp.GsCodeMilCourseResId = this.GsCodeMilCourseResId;
			_tmp.IsLast = this.IsLast;
			_tmp.MilPgNo = this.MilPgNo;
			_tmp.MilSerial = this.MilSerial;
			
			#region Source Parent Composite Entities
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.GsCodeMilCourseResIdSource != null && existingCopies.Contains(this.GsCodeMilCourseResIdSource))
				_tmp.GsCodeMilCourseResIdSource = existingCopies[this.GsCodeMilCourseResIdSource] as GsCodeMilCourseRes;
			else
				_tmp.GsCodeMilCourseResIdSource = MakeCopyOf(this.GsCodeMilCourseResIdSource, existingCopies) as GsCodeMilCourseRes;
			if (this.MilCodeCourseIdSource != null && existingCopies.Contains(this.MilCodeCourseIdSource))
				_tmp.MilCodeCourseIdSource = existingCopies[this.MilCodeCourseIdSource] as MilCodeCourse;
			else
				_tmp.MilCodeCourseIdSource = MakeCopyOf(this.MilCodeCourseIdSource, existingCopies) as MilCodeCourse;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudMltryCrsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdStudMltryCrsColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudMltryCrsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdStudMltryCrsColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudMltryCrsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdStudMltryCrsColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdStudMltryCrsEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdStudMltryCrsEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudMltryCrsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdStudMltryCrsColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdStudMltryCrsEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdStudMltryCrsEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdStudMltryCrsEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdStudMltryCrs"/> object.
	/// </remarks>
	public class EdStudMltryCrsEventArgs : System.EventArgs
	{
		private EdStudMltryCrsColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdStudMltryCrsEventArgs class.
		///</summary>
		public EdStudMltryCrsEventArgs(EdStudMltryCrsColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdStudMltryCrsEventArgs class.
		///</summary>
		public EdStudMltryCrsEventArgs(EdStudMltryCrsColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdStudMltryCrsColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdStudMltryCrsColumn" />
		public EdStudMltryCrsColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdStudMltryCrs related events.
	///</summary>
	public delegate void EdStudMltryCrsEventHandler(object sender, EdStudMltryCrsEventArgs e);
	
	#region EdStudMltryCrsComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdStudMltryCrsComparer : System.Collections.Generic.IComparer<EdStudMltryCrs>
	{
		EdStudMltryCrsColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudMltryCrsComparer"/> class.
        /// </summary>
		public EdStudMltryCrsComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudMltryCrsComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdStudMltryCrsComparer(EdStudMltryCrsColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdStudMltryCrs"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdStudMltryCrs"/> to compare.</param>
        /// <param name="b">The second <c>EdStudMltryCrs</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdStudMltryCrs a, EdStudMltryCrs b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdStudMltryCrs entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdStudMltryCrs a, EdStudMltryCrs b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdStudMltryCrsColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdStudMltryCrsKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdStudMltryCrs"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdStudMltryCrsKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdStudMltryCrsKey class.
		/// </summary>
		public EdStudMltryCrsKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudMltryCrsKey class.
		/// </summary>
		public EdStudMltryCrsKey(EdStudMltryCrsBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdStudMltryCrsId = entity.EdStudMltryCrsId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudMltryCrsKey class.
		/// </summary>
		public EdStudMltryCrsKey(System.Decimal _edStudMltryCrsId)
		{
			#region Init Properties

			this.EdStudMltryCrsId = _edStudMltryCrsId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdStudMltryCrsBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdStudMltryCrsBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdStudMltryCrsId property
		private System.Decimal _edStudMltryCrsId;
		
		/// <summary>
		/// Gets or sets the EdStudMltryCrsId property.
		/// </summary>
		public System.Decimal EdStudMltryCrsId
		{
			get { return _edStudMltryCrsId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdStudMltryCrsId = value;
				
				_edStudMltryCrsId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdStudMltryCrsId = ( values["EdStudMltryCrsId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdStudMltryCrsId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdStudMltryCrsId", EdStudMltryCrsId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdStudMltryCrsId: {0}{1}",
								EdStudMltryCrsId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdStudMltryCrsColumn Enum
	
	/// <summary>
	/// Enumerate the EdStudMltryCrs columns.
	/// </summary>
	[Serializable]
	public enum EdStudMltryCrsColumn : int
	{
		/// <summary>
		/// EdStudMltryCrsId : مقررات الدورة العسكرية
		/// </summary>
		[EnumTextValue("ED_STUD_MLTRY_CRS_ID")]
		[ColumnEnum("ED_STUD_MLTRY_CRS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdStudMltryCrsId = 1,
		/// <summary>
		/// EdStudId : 
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudId = 2,
		/// <summary>
		/// MilCodeCourseId : مقررات الدورة العسكرية
		/// </summary>
		[EnumTextValue("MIL_CODE_COURSE_ID")]
		[ColumnEnum("MIL_CODE_COURSE_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MilCodeCourseId = 3,
		/// <summary>
		/// MilCourseNotes : ملاحظات على الطالب
		/// </summary>
		[EnumTextValue("MIL_COURSE_NOTES")]
		[ColumnEnum("MIL_COURSE_NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 400)]
		MilCourseNotes = 4,
		/// <summary>
		/// AbsFlg : غايب
		/// </summary>
		[EnumTextValue("ABS_FLG")]
		[ColumnEnum("ABS_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		AbsFlg = 5,
		/// <summary>
		/// GsCodeMilCourseResId : نتيجة الدورة
		/// </summary>
		[EnumTextValue("GS_CODE_MIL_COURSE_RES_ID")]
		[ColumnEnum("GS_CODE_MIL_COURSE_RES_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCodeMilCourseResId = 6,
		/// <summary>
		/// IsLast : only record =1 with each STUDENT
		/// </summary>
		[EnumTextValue("IS_LAST")]
		[ColumnEnum("IS_LAST", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		IsLast = 7,
		/// <summary>
		/// MilPgNo : رقم الصفحة
		/// </summary>
		[EnumTextValue("MIL_PG_NO")]
		[ColumnEnum("MIL_PG_NO", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MilPgNo = 8,
		/// <summary>
		/// MilSerial : مسلسل الطالب
		/// </summary>
		[EnumTextValue("MIL_SERIAL")]
		[ColumnEnum("MIL_SERIAL", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MilSerial = 9
	}//End enum

	#endregion EdStudMltryCrsColumn Enum

} // end namespace
