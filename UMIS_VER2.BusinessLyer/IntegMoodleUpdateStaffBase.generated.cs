
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file IntegMoodleUpdateStaff.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'INTEG_MOODLE_UpdateStaff' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class IntegMoodleUpdateStaffBase : EntityBase, IIntegMoodleUpdateStaff, IEntityId<IntegMoodleUpdateStaffKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private IntegMoodleUpdateStaffEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private IntegMoodleUpdateStaffEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private IntegMoodleUpdateStaffEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<IntegMoodleUpdateStaff> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event IntegMoodleUpdateStaffEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event IntegMoodleUpdateStaffEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="IntegMoodleUpdateStaffBase"/> instance.
		///</summary>
		public IntegMoodleUpdateStaffBase()
		{
			this.entityData = new IntegMoodleUpdateStaffEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="IntegMoodleUpdateStaffBase"/> instance.
		///</summary>
		///<param name="_staffCode"></param>
		///<param name="_username"></param>
		///<param name="_firstName"></param>
		///<param name="_lastName"></param>
		///<param name="_email"></param>
		///<param name="_isIntegrated"></param>
		public IntegMoodleUpdateStaffBase(System.String _staffCode, System.String _username, 
			System.String _firstName, System.String _lastName, System.String _email, 
			System.Int32 _isIntegrated)
		{
			this.entityData = new IntegMoodleUpdateStaffEntityData();
			this.backupData = null;

			this.StaffCode = _staffCode;
			this.Username = _username;
			this.FirstName = _firstName;
			this.LastName = _lastName;
			this.Email = _email;
			this.IsIntegrated = _isIntegrated;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="IntegMoodleUpdateStaff"/> instance.
		///</summary>
		///<param name="_staffCode"></param>
		///<param name="_username"></param>
		///<param name="_firstName"></param>
		///<param name="_lastName"></param>
		///<param name="_email"></param>
		///<param name="_isIntegrated"></param>
		public static IntegMoodleUpdateStaff CreateIntegMoodleUpdateStaff(System.String _staffCode, System.String _username, 
			System.String _firstName, System.String _lastName, System.String _email, 
			System.Int32 _isIntegrated)
		{
			IntegMoodleUpdateStaff newIntegMoodleUpdateStaff = new IntegMoodleUpdateStaff();
			newIntegMoodleUpdateStaff.StaffCode = _staffCode;
			newIntegMoodleUpdateStaff.Username = _username;
			newIntegMoodleUpdateStaff.FirstName = _firstName;
			newIntegMoodleUpdateStaff.LastName = _lastName;
			newIntegMoodleUpdateStaff.Email = _email;
			newIntegMoodleUpdateStaff.IsIntegrated = _isIntegrated;
			return newIntegMoodleUpdateStaff;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the IntegMoodleUpdateStaffId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Decimal IntegMoodleUpdateStaffId
		{
			get
			{
				return this.entityData.IntegMoodleUpdateStaffId; 
			}
			
			set
			{
				if (this.entityData.IntegMoodleUpdateStaffId == value)
					return;
					
				OnColumnChanging(IntegMoodleUpdateStaffColumn.IntegMoodleUpdateStaffId, this.entityData.IntegMoodleUpdateStaffId);
				this.entityData.IntegMoodleUpdateStaffId = value;
				this.EntityId.IntegMoodleUpdateStaffId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegMoodleUpdateStaffColumn.IntegMoodleUpdateStaffId, this.entityData.IntegMoodleUpdateStaffId);
				OnPropertyChanged("IntegMoodleUpdateStaffId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StaffCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String StaffCode
		{
			get
			{
				return this.entityData.StaffCode; 
			}
			
			set
			{
				if (this.entityData.StaffCode == value)
					return;
					
				OnColumnChanging(IntegMoodleUpdateStaffColumn.StaffCode, this.entityData.StaffCode);
				this.entityData.StaffCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegMoodleUpdateStaffColumn.StaffCode, this.entityData.StaffCode);
				OnPropertyChanged("StaffCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Username property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String Username
		{
			get
			{
				return this.entityData.Username; 
			}
			
			set
			{
				if (this.entityData.Username == value)
					return;
					
				OnColumnChanging(IntegMoodleUpdateStaffColumn.Username, this.entityData.Username);
				this.entityData.Username = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegMoodleUpdateStaffColumn.Username, this.entityData.Username);
				OnPropertyChanged("Username");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FirstName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String FirstName
		{
			get
			{
				return this.entityData.FirstName; 
			}
			
			set
			{
				if (this.entityData.FirstName == value)
					return;
					
				OnColumnChanging(IntegMoodleUpdateStaffColumn.FirstName, this.entityData.FirstName);
				this.entityData.FirstName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegMoodleUpdateStaffColumn.FirstName, this.entityData.FirstName);
				OnPropertyChanged("FirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String LastName
		{
			get
			{
				return this.entityData.LastName; 
			}
			
			set
			{
				if (this.entityData.LastName == value)
					return;
					
				OnColumnChanging(IntegMoodleUpdateStaffColumn.LastName, this.entityData.LastName);
				this.entityData.LastName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegMoodleUpdateStaffColumn.LastName, this.entityData.LastName);
				OnPropertyChanged("LastName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Email property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 250)]
		public virtual System.String Email
		{
			get
			{
				return this.entityData.Email; 
			}
			
			set
			{
				if (this.entityData.Email == value)
					return;
					
				OnColumnChanging(IntegMoodleUpdateStaffColumn.Email, this.entityData.Email);
				this.entityData.Email = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegMoodleUpdateStaffColumn.Email, this.entityData.Email);
				OnPropertyChanged("Email");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsIntegrated property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 IsIntegrated
		{
			get
			{
				return this.entityData.IsIntegrated; 
			}
			
			set
			{
				if (this.entityData.IsIntegrated == value)
					return;
					
				OnColumnChanging(IntegMoodleUpdateStaffColumn.IsIntegrated, this.entityData.IsIntegrated);
				this.entityData.IsIntegrated = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegMoodleUpdateStaffColumn.IsIntegrated, this.entityData.IsIntegrated);
				OnPropertyChanged("IsIntegrated");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("StaffCode", "Staff Code"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("StaffCode", "Staff Code", 150));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Username", "Username"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Username", "Username", 150));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("FirstName", "First Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FirstName", "First Name", 150));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("LastName", "Last Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LastName", "Last Name", 150));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Email", "Email"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Email", "Email", 250));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "INTEG_MOODLE_UpdateStaff"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"INTEG_MOODLE_UpdateStaff_ID", "STAFF_CODE", "USERNAME", "FIRST_NAME", "LAST_NAME", "EMAIL", "IS_INTEGRATED"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as IntegMoodleUpdateStaffEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (IntegMoodleUpdateStaff) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<IntegMoodleUpdateStaff>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as IntegMoodleUpdateStaff);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed IntegMoodleUpdateStaff Entity 
		///</summary>
		protected virtual IntegMoodleUpdateStaff Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			IntegMoodleUpdateStaff copy = new IntegMoodleUpdateStaff();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.IntegMoodleUpdateStaffId = this.IntegMoodleUpdateStaffId;
				copy.StaffCode = this.StaffCode;
				copy.Username = this.Username;
				copy.FirstName = this.FirstName;
				copy.LastName = this.LastName;
				copy.Email = this.Email;
				copy.IsIntegrated = this.IsIntegrated;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed IntegMoodleUpdateStaff Entity 
		///</summary>
		public virtual IntegMoodleUpdateStaff Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed IntegMoodleUpdateStaff Entity which is a deep copy of the current entity.
		///</summary>
		public virtual IntegMoodleUpdateStaff DeepCopy()
		{
			return EntityHelper.Clone<IntegMoodleUpdateStaff>(this as IntegMoodleUpdateStaff);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as IntegMoodleUpdateStaffEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new IntegMoodleUpdateStaffEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as IntegMoodleUpdateStaffEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(IntegMoodleUpdateStaffColumn column)
		{
			switch(column)
			{
					case IntegMoodleUpdateStaffColumn.IntegMoodleUpdateStaffId:
					return entityData.IntegMoodleUpdateStaffId != _originalData.IntegMoodleUpdateStaffId;
					case IntegMoodleUpdateStaffColumn.StaffCode:
					return entityData.StaffCode != _originalData.StaffCode;
					case IntegMoodleUpdateStaffColumn.Username:
					return entityData.Username != _originalData.Username;
					case IntegMoodleUpdateStaffColumn.FirstName:
					return entityData.FirstName != _originalData.FirstName;
					case IntegMoodleUpdateStaffColumn.LastName:
					return entityData.LastName != _originalData.LastName;
					case IntegMoodleUpdateStaffColumn.Email:
					return entityData.Email != _originalData.Email;
					case IntegMoodleUpdateStaffColumn.IsIntegrated:
					return entityData.IsIntegrated != _originalData.IsIntegrated;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< IntegMoodleUpdateStaffColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.IntegMoodleUpdateStaffId != _originalData.IntegMoodleUpdateStaffId;
			result = result || entityData.StaffCode != _originalData.StaffCode;
			result = result || entityData.Username != _originalData.Username;
			result = result || entityData.FirstName != _originalData.FirstName;
			result = result || entityData.LastName != _originalData.LastName;
			result = result || entityData.Email != _originalData.Email;
			result = result || entityData.IsIntegrated != _originalData.IsIntegrated;
			return result;
		}	
		
		///<summary>
		///  Returns a IntegMoodleUpdateStaff Entity with the original data.
		///</summary>
		public IntegMoodleUpdateStaff GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateIntegMoodleUpdateStaff(
				_originalData.StaffCode,
				_originalData.Username,
				_originalData.FirstName,
				_originalData.LastName,
				_originalData.Email,
				_originalData.IsIntegrated
				);
				
			return (IntegMoodleUpdateStaff)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="IntegMoodleUpdateStaffBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is IntegMoodleUpdateStaffBase)
				return ValueEquals(this, (IntegMoodleUpdateStaffBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="IntegMoodleUpdateStaffBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.IntegMoodleUpdateStaffId.GetHashCode() ^ 
					this.StaffCode.GetHashCode() ^ 
					this.Username.GetHashCode() ^ 
					this.FirstName.GetHashCode() ^ 
					this.LastName.GetHashCode() ^ 
					this.Email.GetHashCode() ^ 
					this.IsIntegrated.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="IntegMoodleUpdateStaffBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(IntegMoodleUpdateStaffBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="IntegMoodleUpdateStaffBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="IntegMoodleUpdateStaffBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="IntegMoodleUpdateStaffBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(IntegMoodleUpdateStaffBase Object1, IntegMoodleUpdateStaffBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.IntegMoodleUpdateStaffId != Object2.IntegMoodleUpdateStaffId)
				equal = false;
			if (Object1.StaffCode != Object2.StaffCode)
				equal = false;
			if (Object1.Username != Object2.Username)
				equal = false;
			if (Object1.FirstName != Object2.FirstName)
				equal = false;
			if (Object1.LastName != Object2.LastName)
				equal = false;
			if (Object1.Email != Object2.Email)
				equal = false;
			if (Object1.IsIntegrated != Object2.IsIntegrated)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((IntegMoodleUpdateStaffBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static IntegMoodleUpdateStaffComparer GetComparer()
        {
            return new IntegMoodleUpdateStaffComparer();
        }
        */

        // Comparer delegates back to IntegMoodleUpdateStaff
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(IntegMoodleUpdateStaff rhs, IntegMoodleUpdateStaffColumn which)
        {
            switch (which)
            {
            	
            	
            	case IntegMoodleUpdateStaffColumn.IntegMoodleUpdateStaffId:
            		return this.IntegMoodleUpdateStaffId.CompareTo(rhs.IntegMoodleUpdateStaffId);
            		
            		                 
            	
            	
            	case IntegMoodleUpdateStaffColumn.StaffCode:
            		return this.StaffCode.CompareTo(rhs.StaffCode);
            		
            		                 
            	
            	
            	case IntegMoodleUpdateStaffColumn.Username:
            		return this.Username.CompareTo(rhs.Username);
            		
            		                 
            	
            	
            	case IntegMoodleUpdateStaffColumn.FirstName:
            		return this.FirstName.CompareTo(rhs.FirstName);
            		
            		                 
            	
            	
            	case IntegMoodleUpdateStaffColumn.LastName:
            		return this.LastName.CompareTo(rhs.LastName);
            		
            		                 
            	
            	
            	case IntegMoodleUpdateStaffColumn.Email:
            		return this.Email.CompareTo(rhs.Email);
            		
            		                 
            	
            	
            	case IntegMoodleUpdateStaffColumn.IsIntegrated:
            		return this.IsIntegrated.CompareTo(rhs.IsIntegrated);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<IntegMoodleUpdateStaffKey> Members
		
		// member variable for the EntityId property
		private IntegMoodleUpdateStaffKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual IntegMoodleUpdateStaffKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new IntegMoodleUpdateStaffKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("IntegMoodleUpdateStaff")
					.Append("|").Append( this.IntegMoodleUpdateStaffId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{8}{7}- IntegMoodleUpdateStaffId: {0}{7}- StaffCode: {1}{7}- Username: {2}{7}- FirstName: {3}{7}- LastName: {4}{7}- Email: {5}{7}- IsIntegrated: {6}{7}{9}", 
				this.IntegMoodleUpdateStaffId,
				this.StaffCode,
				this.Username,
				this.FirstName,
				this.LastName,
				this.Email,
				this.IsIntegrated,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'INTEG_MOODLE_UpdateStaff' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class IntegMoodleUpdateStaffEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// INTEG_MOODLE_UpdateStaff_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "INTEG_MOODLE_UpdateStaff"</remarks>
		public System.Decimal IntegMoodleUpdateStaffId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// STAFF_CODE : 
		/// </summary>
		public System.String		  StaffCode = string.Empty;
		
		/// <summary>
		/// USERNAME : 
		/// </summary>
		public System.String		  Username = string.Empty;
		
		/// <summary>
		/// FIRST_NAME : 
		/// </summary>
		public System.String		  FirstName = string.Empty;
		
		/// <summary>
		/// LAST_NAME : 
		/// </summary>
		public System.String		  LastName = string.Empty;
		
		/// <summary>
		/// EMAIL : 
		/// </summary>
		public System.String		  Email = string.Empty;
		
		/// <summary>
		/// IS_INTEGRATED : 
		/// </summary>
		public System.Int32		  IsIntegrated = (int)0;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			IntegMoodleUpdateStaffEntityData _tmp = new IntegMoodleUpdateStaffEntityData();
						
			_tmp.IntegMoodleUpdateStaffId = this.IntegMoodleUpdateStaffId;
			
			_tmp.StaffCode = this.StaffCode;
			_tmp.Username = this.Username;
			_tmp.FirstName = this.FirstName;
			_tmp.LastName = this.LastName;
			_tmp.Email = this.Email;
			_tmp.IsIntegrated = this.IsIntegrated;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			IntegMoodleUpdateStaffEntityData _tmp = new IntegMoodleUpdateStaffEntityData();
						
			_tmp.IntegMoodleUpdateStaffId = this.IntegMoodleUpdateStaffId;
			
			_tmp.StaffCode = this.StaffCode;
			_tmp.Username = this.Username;
			_tmp.FirstName = this.FirstName;
			_tmp.LastName = this.LastName;
			_tmp.Email = this.Email;
			_tmp.IsIntegrated = this.IsIntegrated;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IntegMoodleUpdateStaffColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(IntegMoodleUpdateStaffColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IntegMoodleUpdateStaffColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(IntegMoodleUpdateStaffColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IntegMoodleUpdateStaffColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(IntegMoodleUpdateStaffColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				IntegMoodleUpdateStaffEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new IntegMoodleUpdateStaffEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IntegMoodleUpdateStaffColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(IntegMoodleUpdateStaffColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				IntegMoodleUpdateStaffEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new IntegMoodleUpdateStaffEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region IntegMoodleUpdateStaffEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="IntegMoodleUpdateStaff"/> object.
	/// </remarks>
	public class IntegMoodleUpdateStaffEventArgs : System.EventArgs
	{
		private IntegMoodleUpdateStaffColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the IntegMoodleUpdateStaffEventArgs class.
		///</summary>
		public IntegMoodleUpdateStaffEventArgs(IntegMoodleUpdateStaffColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the IntegMoodleUpdateStaffEventArgs class.
		///</summary>
		public IntegMoodleUpdateStaffEventArgs(IntegMoodleUpdateStaffColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The IntegMoodleUpdateStaffColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="IntegMoodleUpdateStaffColumn" />
		public IntegMoodleUpdateStaffColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all IntegMoodleUpdateStaff related events.
	///</summary>
	public delegate void IntegMoodleUpdateStaffEventHandler(object sender, IntegMoodleUpdateStaffEventArgs e);
	
	#region IntegMoodleUpdateStaffComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class IntegMoodleUpdateStaffComparer : System.Collections.Generic.IComparer<IntegMoodleUpdateStaff>
	{
		IntegMoodleUpdateStaffColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:IntegMoodleUpdateStaffComparer"/> class.
        /// </summary>
		public IntegMoodleUpdateStaffComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:IntegMoodleUpdateStaffComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public IntegMoodleUpdateStaffComparer(IntegMoodleUpdateStaffColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="IntegMoodleUpdateStaff"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="IntegMoodleUpdateStaff"/> to compare.</param>
        /// <param name="b">The second <c>IntegMoodleUpdateStaff</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(IntegMoodleUpdateStaff a, IntegMoodleUpdateStaff b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(IntegMoodleUpdateStaff entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(IntegMoodleUpdateStaff a, IntegMoodleUpdateStaff b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public IntegMoodleUpdateStaffColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region IntegMoodleUpdateStaffKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="IntegMoodleUpdateStaff"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class IntegMoodleUpdateStaffKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the IntegMoodleUpdateStaffKey class.
		/// </summary>
		public IntegMoodleUpdateStaffKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the IntegMoodleUpdateStaffKey class.
		/// </summary>
		public IntegMoodleUpdateStaffKey(IntegMoodleUpdateStaffBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.IntegMoodleUpdateStaffId = entity.IntegMoodleUpdateStaffId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the IntegMoodleUpdateStaffKey class.
		/// </summary>
		public IntegMoodleUpdateStaffKey(System.Decimal _integMoodleUpdateStaffId)
		{
			#region Init Properties

			this.IntegMoodleUpdateStaffId = _integMoodleUpdateStaffId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private IntegMoodleUpdateStaffBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public IntegMoodleUpdateStaffBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the IntegMoodleUpdateStaffId property
		private System.Decimal _integMoodleUpdateStaffId;
		
		/// <summary>
		/// Gets or sets the IntegMoodleUpdateStaffId property.
		/// </summary>
		public System.Decimal IntegMoodleUpdateStaffId
		{
			get { return _integMoodleUpdateStaffId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.IntegMoodleUpdateStaffId = value;
				
				_integMoodleUpdateStaffId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				IntegMoodleUpdateStaffId = ( values["IntegMoodleUpdateStaffId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["IntegMoodleUpdateStaffId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("IntegMoodleUpdateStaffId", IntegMoodleUpdateStaffId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("IntegMoodleUpdateStaffId: {0}{1}",
								IntegMoodleUpdateStaffId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region IntegMoodleUpdateStaffColumn Enum
	
	/// <summary>
	/// Enumerate the IntegMoodleUpdateStaff columns.
	/// </summary>
	[Serializable]
	public enum IntegMoodleUpdateStaffColumn : int
	{
		/// <summary>
		/// IntegMoodleUpdateStaffId : 
		/// </summary>
		[EnumTextValue("INTEG_MOODLE_UpdateStaff_ID")]
		[ColumnEnum("INTEG_MOODLE_UpdateStaff_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, true, false)]
		IntegMoodleUpdateStaffId = 1,
		/// <summary>
		/// StaffCode : 
		/// </summary>
		[EnumTextValue("STAFF_CODE")]
		[ColumnEnum("STAFF_CODE", typeof(System.String), System.Data.DbType.String, false, false, false, 150)]
		StaffCode = 2,
		/// <summary>
		/// Username : 
		/// </summary>
		[EnumTextValue("USERNAME")]
		[ColumnEnum("USERNAME", typeof(System.String), System.Data.DbType.String, false, false, false, 150)]
		Username = 3,
		/// <summary>
		/// FirstName : 
		/// </summary>
		[EnumTextValue("FIRST_NAME")]
		[ColumnEnum("FIRST_NAME", typeof(System.String), System.Data.DbType.String, false, false, false, 150)]
		FirstName = 4,
		/// <summary>
		/// LastName : 
		/// </summary>
		[EnumTextValue("LAST_NAME")]
		[ColumnEnum("LAST_NAME", typeof(System.String), System.Data.DbType.String, false, false, false, 150)]
		LastName = 5,
		/// <summary>
		/// Email : 
		/// </summary>
		[EnumTextValue("EMAIL")]
		[ColumnEnum("EMAIL", typeof(System.String), System.Data.DbType.String, false, false, false, 250)]
		Email = 6,
		/// <summary>
		/// IsIntegrated : 
		/// </summary>
		[EnumTextValue("IS_INTEGRATED")]
		[ColumnEnum("IS_INTEGRATED", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		IsIntegrated = 7
	}//End enum

	#endregion IntegMoodleUpdateStaffColumn Enum

} // end namespace
