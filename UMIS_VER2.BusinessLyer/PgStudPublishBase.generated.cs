
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file PgStudPublish.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'PG_STUD_PUBLISH' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class PgStudPublishBase : EntityBase, IPgStudPublish, IEntityId<PgStudPublishKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private PgStudPublishEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private PgStudPublishEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private PgStudPublishEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<PgStudPublish> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event PgStudPublishEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event PgStudPublishEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="PgStudPublishBase"/> instance.
		///</summary>
		public PgStudPublishBase()
		{
			this.entityData = new PgStudPublishEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="PgStudPublishBase"/> instance.
		///</summary>
		///<param name="_pgStudPublishId">تسجيل بيانات نشر بحث علمى</param>
		///<param name="_edStudId">ONLY PG STUD</param>
		///<param name="_edAcadYearId"></param>
		///<param name="_publishDate"></param>
		///<param name="_paperNum">رقم الورقة البحثية المنشورة</param>
		///<param name="_paperSubject">عنوان/موضوع الورقة البحثية</param>
		///<param name="_publishOrg">جهة النشر</param>
		///<param name="_studOrdr">ترتيب المؤلف</param>
		///<param name="_notes">ملاحظات</param>
		///<param name="_publishFlg">حالة النشر
		/// 		/// 
		/// 		/// 1 تم النشر (القيمة الافتراضية)  published 
		/// 		/// 2 تم القبول accepted
		/// 		/// </param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		public PgStudPublishBase(System.Decimal _pgStudPublishId, System.Decimal _edStudId, 
			System.Decimal _edAcadYearId, System.DateTime? _publishDate, System.Int32? _paperNum, 
			System.String _paperSubject, System.String _publishOrg, System.Int16? _studOrdr, 
			System.String _notes, System.Int32? _publishFlg, System.DateTime? _lastDate, 
			System.Decimal? _seUserId)
		{
			this.entityData = new PgStudPublishEntityData();
			this.backupData = null;

			this.PgStudPublishId = _pgStudPublishId;
			this.EdStudId = _edStudId;
			this.EdAcadYearId = _edAcadYearId;
			this.PublishDate = _publishDate;
			this.PaperNum = _paperNum;
			this.PaperSubject = _paperSubject;
			this.PublishOrg = _publishOrg;
			this.StudOrdr = _studOrdr;
			this.Notes = _notes;
			this.PublishFlg = _publishFlg;
			this.LastDate = _lastDate;
			this.SeUserId = _seUserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="PgStudPublish"/> instance.
		///</summary>
		///<param name="_pgStudPublishId">تسجيل بيانات نشر بحث علمى</param>
		///<param name="_edStudId">ONLY PG STUD</param>
		///<param name="_edAcadYearId"></param>
		///<param name="_publishDate"></param>
		///<param name="_paperNum">رقم الورقة البحثية المنشورة</param>
		///<param name="_paperSubject">عنوان/موضوع الورقة البحثية</param>
		///<param name="_publishOrg">جهة النشر</param>
		///<param name="_studOrdr">ترتيب المؤلف</param>
		///<param name="_notes">ملاحظات</param>
		///<param name="_publishFlg">حالة النشر
		/// 		/// 
		/// 		/// 1 تم النشر (القيمة الافتراضية)  published 
		/// 		/// 2 تم القبول accepted
		/// 		/// </param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		public static PgStudPublish CreatePgStudPublish(System.Decimal _pgStudPublishId, System.Decimal _edStudId, 
			System.Decimal _edAcadYearId, System.DateTime? _publishDate, System.Int32? _paperNum, 
			System.String _paperSubject, System.String _publishOrg, System.Int16? _studOrdr, 
			System.String _notes, System.Int32? _publishFlg, System.DateTime? _lastDate, 
			System.Decimal? _seUserId)
		{
			PgStudPublish newPgStudPublish = new PgStudPublish();
			newPgStudPublish.PgStudPublishId = _pgStudPublishId;
			newPgStudPublish.EdStudId = _edStudId;
			newPgStudPublish.EdAcadYearId = _edAcadYearId;
			newPgStudPublish.PublishDate = _publishDate;
			newPgStudPublish.PaperNum = _paperNum;
			newPgStudPublish.PaperSubject = _paperSubject;
			newPgStudPublish.PublishOrg = _publishOrg;
			newPgStudPublish.StudOrdr = _studOrdr;
			newPgStudPublish.Notes = _notes;
			newPgStudPublish.PublishFlg = _publishFlg;
			newPgStudPublish.LastDate = _lastDate;
			newPgStudPublish.SeUserId = _seUserId;
			return newPgStudPublish;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the PgStudPublishId property. 
		///		تسجيل بيانات نشر بحث علمى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"تسجيل بيانات نشر بحث علمى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal PgStudPublishId
		{
			get
			{
				return this.entityData.PgStudPublishId; 
			}
			
			set
			{
				if (this.entityData.PgStudPublishId == value)
					return;
					
				OnColumnChanging(PgStudPublishColumn.PgStudPublishId, this.entityData.PgStudPublishId);
				this.entityData.PgStudPublishId = value;
				this.EntityId.PgStudPublishId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudPublishColumn.PgStudPublishId, this.entityData.PgStudPublishId);
				OnPropertyChanged("PgStudPublishId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the PG_STUD_PUBLISH_ID property.
		///		تسجيل بيانات نشر بحث علمى
		/// </summary>
		/// <remarks>This is the original value of the PG_STUD_PUBLISH_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalPgStudPublishId
		{
			get { return this.entityData.OriginalPgStudPublishId; }
			set { this.entityData.OriginalPgStudPublishId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		ONLY PG STUD
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"ONLY PG STUD"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(PgStudPublishColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudPublishColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(PgStudPublishColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudPublishColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PublishDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsPublishDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? PublishDate
		{
			get
			{
				return this.entityData.PublishDate; 
			}
			
			set
			{
				if (this.entityData.PublishDate == value)
					return;
					
				OnColumnChanging(PgStudPublishColumn.PublishDate, this.entityData.PublishDate);
				this.entityData.PublishDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudPublishColumn.PublishDate, this.entityData.PublishDate);
				OnPropertyChanged("PublishDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PaperNum property. 
		///		رقم الورقة البحثية المنشورة
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPaperNumNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"رقم الورقة البحثية المنشورة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PaperNum
		{
			get
			{
				return this.entityData.PaperNum; 
			}
			
			set
			{
				if (this.entityData.PaperNum == value)
					return;
					
				OnColumnChanging(PgStudPublishColumn.PaperNum, this.entityData.PaperNum);
				this.entityData.PaperNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudPublishColumn.PaperNum, this.entityData.PaperNum);
				OnPropertyChanged("PaperNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PaperSubject property. 
		///		عنوان/موضوع الورقة البحثية
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"عنوان/موضوع الورقة البحثية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String PaperSubject
		{
			get
			{
				return this.entityData.PaperSubject; 
			}
			
			set
			{
				if (this.entityData.PaperSubject == value)
					return;
					
				OnColumnChanging(PgStudPublishColumn.PaperSubject, this.entityData.PaperSubject);
				this.entityData.PaperSubject = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudPublishColumn.PaperSubject, this.entityData.PaperSubject);
				OnPropertyChanged("PaperSubject");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PublishOrg property. 
		///		جهة النشر
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"جهة النشر"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String PublishOrg
		{
			get
			{
				return this.entityData.PublishOrg; 
			}
			
			set
			{
				if (this.entityData.PublishOrg == value)
					return;
					
				OnColumnChanging(PgStudPublishColumn.PublishOrg, this.entityData.PublishOrg);
				this.entityData.PublishOrg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudPublishColumn.PublishOrg, this.entityData.PublishOrg);
				OnPropertyChanged("PublishOrg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StudOrdr property. 
		///		ترتيب المؤلف
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsStudOrdrNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"ترتيب المؤلف"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? StudOrdr
		{
			get
			{
				return this.entityData.StudOrdr; 
			}
			
			set
			{
				if (this.entityData.StudOrdr == value)
					return;
					
				OnColumnChanging(PgStudPublishColumn.StudOrdr, this.entityData.StudOrdr);
				this.entityData.StudOrdr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudPublishColumn.StudOrdr, this.entityData.StudOrdr);
				OnPropertyChanged("StudOrdr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		ملاحظات
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"ملاحظات"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(PgStudPublishColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudPublishColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PublishFlg property. 
		///		حالة النشر
		/// 		/// 
		/// 		/// 1 تم النشر (القيمة الافتراضية)  published 
		/// 		/// 2 تم القبول accepted
		/// 		/// 
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPublishFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"حالة النشر  1 تم النشر (القيمة الافتراضية)  published  2 تم القبول accepted "), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PublishFlg
		{
			get
			{
				return this.entityData.PublishFlg; 
			}
			
			set
			{
				if (this.entityData.PublishFlg == value)
					return;
					
				OnColumnChanging(PgStudPublishColumn.PublishFlg, this.entityData.PublishFlg);
				this.entityData.PublishFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudPublishColumn.PublishFlg, this.entityData.PublishFlg);
				OnPropertyChanged("PublishFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(PgStudPublishColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudPublishColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(PgStudPublishColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudPublishColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of PgAttchdDoc objects
		///	which are related to this object through the relation FK_PG_ATTCHD_DOC_PG_STUD_PUBLISH
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgAttchdDoc> PgAttchdDocCollection
		{
			get { return entityData.PgAttchdDocCollection; }
			set { entityData.PgAttchdDocCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PaperSubject", "Paper Subject", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PublishOrg", "Publish Org", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 250));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "PG_STUD_PUBLISH"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"PG_STUD_PUBLISH_ID", "ED_STUD_ID", "ED_ACAD_YEAR_ID", "PUBLISH_DATE", "PAPER_NUM", "PAPER_SUBJECT", "PUBLISH_ORG", "STUD_ORDR", "NOTES", "PUBLISH_FLG", "LAST_DATE", "SE_USER_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as PgStudPublishEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (PgStudPublish) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<PgStudPublish>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as PgStudPublish);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed PgStudPublish Entity 
		///</summary>
		protected virtual PgStudPublish Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			PgStudPublish copy = new PgStudPublish();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.PgStudPublishId = this.PgStudPublishId;
					copy.OriginalPgStudPublishId = this.OriginalPgStudPublishId;
				copy.EdStudId = this.EdStudId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.PublishDate = this.PublishDate;
				copy.PaperNum = this.PaperNum;
				copy.PaperSubject = this.PaperSubject;
				copy.PublishOrg = this.PublishOrg;
				copy.StudOrdr = this.StudOrdr;
				copy.Notes = this.Notes;
				copy.PublishFlg = this.PublishFlg;
				copy.LastDate = this.LastDate;
				copy.SeUserId = this.SeUserId;
			
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
		
			//deep copy nested objects
			copy.PgAttchdDocCollection = (TList<PgAttchdDoc>) MakeCopyOf(this.PgAttchdDocCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed PgStudPublish Entity 
		///</summary>
		public virtual PgStudPublish Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed PgStudPublish Entity which is a deep copy of the current entity.
		///</summary>
		public virtual PgStudPublish DeepCopy()
		{
			return EntityHelper.Clone<PgStudPublish>(this as PgStudPublish);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as PgStudPublishEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new PgStudPublishEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as PgStudPublishEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(PgStudPublishColumn column)
		{
			switch(column)
			{
					case PgStudPublishColumn.PgStudPublishId:
					return entityData.PgStudPublishId != _originalData.PgStudPublishId;
					case PgStudPublishColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case PgStudPublishColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case PgStudPublishColumn.PublishDate:
					return entityData.PublishDate != _originalData.PublishDate;
					case PgStudPublishColumn.PaperNum:
					return entityData.PaperNum != _originalData.PaperNum;
					case PgStudPublishColumn.PaperSubject:
					return entityData.PaperSubject != _originalData.PaperSubject;
					case PgStudPublishColumn.PublishOrg:
					return entityData.PublishOrg != _originalData.PublishOrg;
					case PgStudPublishColumn.StudOrdr:
					return entityData.StudOrdr != _originalData.StudOrdr;
					case PgStudPublishColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case PgStudPublishColumn.PublishFlg:
					return entityData.PublishFlg != _originalData.PublishFlg;
					case PgStudPublishColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case PgStudPublishColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< PgStudPublishColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.PgStudPublishId != _originalData.PgStudPublishId;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.PublishDate != _originalData.PublishDate;
			result = result || entityData.PaperNum != _originalData.PaperNum;
			result = result || entityData.PaperSubject != _originalData.PaperSubject;
			result = result || entityData.PublishOrg != _originalData.PublishOrg;
			result = result || entityData.StudOrdr != _originalData.StudOrdr;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.PublishFlg != _originalData.PublishFlg;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			return result;
		}	
		
		///<summary>
		///  Returns a PgStudPublish Entity with the original data.
		///</summary>
		public PgStudPublish GetOriginalEntity()
		{
			if (_originalData != null)
				return CreatePgStudPublish(
				_originalData.PgStudPublishId,
				_originalData.EdStudId,
				_originalData.EdAcadYearId,
				_originalData.PublishDate,
				_originalData.PaperNum,
				_originalData.PaperSubject,
				_originalData.PublishOrg,
				_originalData.StudOrdr,
				_originalData.Notes,
				_originalData.PublishFlg,
				_originalData.LastDate,
				_originalData.SeUserId
				);
				
			return (PgStudPublish)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="PgStudPublishBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is PgStudPublishBase)
				return ValueEquals(this, (PgStudPublishBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="PgStudPublishBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.PgStudPublishId.GetHashCode() ^ 
					this.EdStudId.GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					((this.PublishDate == null) ? string.Empty : this.PublishDate.ToString()).GetHashCode() ^ 
					((this.PaperNum == null) ? string.Empty : this.PaperNum.ToString()).GetHashCode() ^ 
					((this.PaperSubject == null) ? string.Empty : this.PaperSubject.ToString()).GetHashCode() ^ 
					((this.PublishOrg == null) ? string.Empty : this.PublishOrg.ToString()).GetHashCode() ^ 
					((this.StudOrdr == null) ? string.Empty : this.StudOrdr.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.PublishFlg == null) ? string.Empty : this.PublishFlg.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="PgStudPublishBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(PgStudPublishBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="PgStudPublishBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="PgStudPublishBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="PgStudPublishBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(PgStudPublishBase Object1, PgStudPublishBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.PgStudPublishId != Object2.PgStudPublishId)
				equal = false;
			if (Object1.EdStudId != Object2.EdStudId)
				equal = false;
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if ( Object1.PublishDate != null && Object2.PublishDate != null )
			{
				if (Object1.PublishDate != Object2.PublishDate)
					equal = false;
			}
			else if (Object1.PublishDate == null ^ Object2.PublishDate == null )
			{
				equal = false;
			}
			if ( Object1.PaperNum != null && Object2.PaperNum != null )
			{
				if (Object1.PaperNum != Object2.PaperNum)
					equal = false;
			}
			else if (Object1.PaperNum == null ^ Object2.PaperNum == null )
			{
				equal = false;
			}
			if ( Object1.PaperSubject != null && Object2.PaperSubject != null )
			{
				if (Object1.PaperSubject != Object2.PaperSubject)
					equal = false;
			}
			else if (Object1.PaperSubject == null ^ Object2.PaperSubject == null )
			{
				equal = false;
			}
			if ( Object1.PublishOrg != null && Object2.PublishOrg != null )
			{
				if (Object1.PublishOrg != Object2.PublishOrg)
					equal = false;
			}
			else if (Object1.PublishOrg == null ^ Object2.PublishOrg == null )
			{
				equal = false;
			}
			if ( Object1.StudOrdr != null && Object2.StudOrdr != null )
			{
				if (Object1.StudOrdr != Object2.StudOrdr)
					equal = false;
			}
			else if (Object1.StudOrdr == null ^ Object2.StudOrdr == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.PublishFlg != null && Object2.PublishFlg != null )
			{
				if (Object1.PublishFlg != Object2.PublishFlg)
					equal = false;
			}
			else if (Object1.PublishFlg == null ^ Object2.PublishFlg == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((PgStudPublishBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static PgStudPublishComparer GetComparer()
        {
            return new PgStudPublishComparer();
        }
        */

        // Comparer delegates back to PgStudPublish
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(PgStudPublish rhs, PgStudPublishColumn which)
        {
            switch (which)
            {
            	
            	
            	case PgStudPublishColumn.PgStudPublishId:
            		return this.PgStudPublishId.CompareTo(rhs.PgStudPublishId);
            		
            		                 
            	
            	
            	case PgStudPublishColumn.EdStudId:
            		return this.EdStudId.CompareTo(rhs.EdStudId);
            		
            		                 
            	
            	
            	case PgStudPublishColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case PgStudPublishColumn.PublishDate:
            		return this.PublishDate.Value.CompareTo(rhs.PublishDate.Value);
            		
            		                 
            	
            	
            	case PgStudPublishColumn.PaperNum:
            		return this.PaperNum.Value.CompareTo(rhs.PaperNum.Value);
            		
            		                 
            	
            	
            	case PgStudPublishColumn.PaperSubject:
            		return this.PaperSubject.CompareTo(rhs.PaperSubject);
            		
            		                 
            	
            	
            	case PgStudPublishColumn.PublishOrg:
            		return this.PublishOrg.CompareTo(rhs.PublishOrg);
            		
            		                 
            	
            	
            	case PgStudPublishColumn.StudOrdr:
            		return this.StudOrdr.Value.CompareTo(rhs.StudOrdr.Value);
            		
            		                 
            	
            	
            	case PgStudPublishColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case PgStudPublishColumn.PublishFlg:
            		return this.PublishFlg.Value.CompareTo(rhs.PublishFlg.Value);
            		
            		                 
            	
            	
            	case PgStudPublishColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case PgStudPublishColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<PgStudPublishKey> Members
		
		// member variable for the EntityId property
		private PgStudPublishKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual PgStudPublishKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new PgStudPublishKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("PgStudPublish")
					.Append("|").Append( this.PgStudPublishId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- PgStudPublishId: {0}{12}- EdStudId: {1}{12}- EdAcadYearId: {2}{12}- PublishDate: {3}{12}- PaperNum: {4}{12}- PaperSubject: {5}{12}- PublishOrg: {6}{12}- StudOrdr: {7}{12}- Notes: {8}{12}- PublishFlg: {9}{12}- LastDate: {10}{12}- SeUserId: {11}{12}{14}", 
				this.PgStudPublishId,
				this.EdStudId,
				this.EdAcadYearId,
				(this.PublishDate == null) ? string.Empty : this.PublishDate.ToString(),
				(this.PaperNum == null) ? string.Empty : this.PaperNum.ToString(),
				(this.PaperSubject == null) ? string.Empty : this.PaperSubject.ToString(),
				(this.PublishOrg == null) ? string.Empty : this.PublishOrg.ToString(),
				(this.StudOrdr == null) ? string.Empty : this.StudOrdr.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.PublishFlg == null) ? string.Empty : this.PublishFlg.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'PG_STUD_PUBLISH' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class PgStudPublishEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// PG_STUD_PUBLISH_ID : تسجيل بيانات نشر بحث علمى
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "PG_STUD_PUBLISH"</remarks>
		public System.Decimal PgStudPublishId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalPgStudPublishId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_STUD_ID : ONLY PG STUD
		/// </summary>
		public System.Decimal		  EdStudId = 0.0m;
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// PUBLISH_DATE : 
		/// </summary>
		public System.DateTime?		  PublishDate = null;
		
		/// <summary>
		/// PAPER_NUM : رقم الورقة البحثية المنشورة
		/// </summary>
		public System.Int32?		  PaperNum = null;
		
		/// <summary>
		/// PAPER_SUBJECT : عنوان/موضوع الورقة البحثية
		/// </summary>
		public System.String		  PaperSubject = null;
		
		/// <summary>
		/// PUBLISH_ORG : جهة النشر
		/// </summary>
		public System.String		  PublishOrg = null;
		
		/// <summary>
		/// STUD_ORDR : ترتيب المؤلف
		/// </summary>
		public System.Int16?		  StudOrdr = null;
		
		/// <summary>
		/// NOTES : ملاحظات
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// PUBLISH_FLG : حالة النشر
		/// 		/// 
		/// 		/// 1 تم النشر (القيمة الافتراضية)  published 
		/// 		/// 2 تم القبول accepted
		/// 		/// 
		/// </summary>
		public System.Int32?		  PublishFlg = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region PgAttchdDocCollection
		
		private TList<PgAttchdDoc> _pgAttchdDocPgStudPublishId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgAttchdDocPgStudPublishId
		/// </summary>
		
		public TList<PgAttchdDoc> PgAttchdDocCollection
		{
			get
			{
				if (_pgAttchdDocPgStudPublishId == null)
				{
				_pgAttchdDocPgStudPublishId = new TList<PgAttchdDoc>();
				}
	
				return _pgAttchdDocPgStudPublishId;
			}
			set { _pgAttchdDocPgStudPublishId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			PgStudPublishEntityData _tmp = new PgStudPublishEntityData();
						
			_tmp.PgStudPublishId = this.PgStudPublishId;
			_tmp.OriginalPgStudPublishId = this.OriginalPgStudPublishId;
			
			_tmp.EdStudId = this.EdStudId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.PublishDate = this.PublishDate;
			_tmp.PaperNum = this.PaperNum;
			_tmp.PaperSubject = this.PaperSubject;
			_tmp.PublishOrg = this.PublishOrg;
			_tmp.StudOrdr = this.StudOrdr;
			_tmp.Notes = this.Notes;
			_tmp.PublishFlg = this.PublishFlg;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._pgAttchdDocPgStudPublishId != null)
				_tmp.PgAttchdDocCollection = (TList<PgAttchdDoc>) MakeCopyOf(this.PgAttchdDocCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			PgStudPublishEntityData _tmp = new PgStudPublishEntityData();
						
			_tmp.PgStudPublishId = this.PgStudPublishId;
			_tmp.OriginalPgStudPublishId = this.OriginalPgStudPublishId;
			
			_tmp.EdStudId = this.EdStudId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.PublishDate = this.PublishDate;
			_tmp.PaperNum = this.PaperNum;
			_tmp.PaperSubject = this.PaperSubject;
			_tmp.PublishOrg = this.PublishOrg;
			_tmp.StudOrdr = this.StudOrdr;
			_tmp.Notes = this.Notes;
			_tmp.PublishFlg = this.PublishFlg;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.PgAttchdDocCollection = (TList<PgAttchdDoc>) MakeCopyOf(this.PgAttchdDocCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgStudPublishColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(PgStudPublishColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgStudPublishColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(PgStudPublishColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgStudPublishColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(PgStudPublishColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				PgStudPublishEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new PgStudPublishEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgStudPublishColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(PgStudPublishColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				PgStudPublishEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new PgStudPublishEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region PgStudPublishEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="PgStudPublish"/> object.
	/// </remarks>
	public class PgStudPublishEventArgs : System.EventArgs
	{
		private PgStudPublishColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the PgStudPublishEventArgs class.
		///</summary>
		public PgStudPublishEventArgs(PgStudPublishColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the PgStudPublishEventArgs class.
		///</summary>
		public PgStudPublishEventArgs(PgStudPublishColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The PgStudPublishColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="PgStudPublishColumn" />
		public PgStudPublishColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all PgStudPublish related events.
	///</summary>
	public delegate void PgStudPublishEventHandler(object sender, PgStudPublishEventArgs e);
	
	#region PgStudPublishComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class PgStudPublishComparer : System.Collections.Generic.IComparer<PgStudPublish>
	{
		PgStudPublishColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:PgStudPublishComparer"/> class.
        /// </summary>
		public PgStudPublishComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:PgStudPublishComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public PgStudPublishComparer(PgStudPublishColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="PgStudPublish"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="PgStudPublish"/> to compare.</param>
        /// <param name="b">The second <c>PgStudPublish</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(PgStudPublish a, PgStudPublish b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(PgStudPublish entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(PgStudPublish a, PgStudPublish b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public PgStudPublishColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region PgStudPublishKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="PgStudPublish"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class PgStudPublishKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the PgStudPublishKey class.
		/// </summary>
		public PgStudPublishKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the PgStudPublishKey class.
		/// </summary>
		public PgStudPublishKey(PgStudPublishBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.PgStudPublishId = entity.PgStudPublishId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the PgStudPublishKey class.
		/// </summary>
		public PgStudPublishKey(System.Decimal _pgStudPublishId)
		{
			#region Init Properties

			this.PgStudPublishId = _pgStudPublishId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private PgStudPublishBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public PgStudPublishBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the PgStudPublishId property
		private System.Decimal _pgStudPublishId;
		
		/// <summary>
		/// Gets or sets the PgStudPublishId property.
		/// </summary>
		public System.Decimal PgStudPublishId
		{
			get { return _pgStudPublishId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.PgStudPublishId = value;
				
				_pgStudPublishId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				PgStudPublishId = ( values["PgStudPublishId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["PgStudPublishId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("PgStudPublishId", PgStudPublishId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("PgStudPublishId: {0}{1}",
								PgStudPublishId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region PgStudPublishColumn Enum
	
	/// <summary>
	/// Enumerate the PgStudPublish columns.
	/// </summary>
	[Serializable]
	public enum PgStudPublishColumn : int
	{
		/// <summary>
		/// PgStudPublishId : تسجيل بيانات نشر بحث علمى
		/// </summary>
		[EnumTextValue("PG_STUD_PUBLISH_ID")]
		[ColumnEnum("PG_STUD_PUBLISH_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		PgStudPublishId = 1,
		/// <summary>
		/// EdStudId : ONLY PG STUD
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudId = 2,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 3,
		/// <summary>
		/// PublishDate : 
		/// </summary>
		[EnumTextValue("PUBLISH_DATE")]
		[ColumnEnum("PUBLISH_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		PublishDate = 4,
		/// <summary>
		/// PaperNum : رقم الورقة البحثية المنشورة
		/// </summary>
		[EnumTextValue("PAPER_NUM")]
		[ColumnEnum("PAPER_NUM", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PaperNum = 5,
		/// <summary>
		/// PaperSubject : عنوان/موضوع الورقة البحثية
		/// </summary>
		[EnumTextValue("PAPER_SUBJECT")]
		[ColumnEnum("PAPER_SUBJECT", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		PaperSubject = 6,
		/// <summary>
		/// PublishOrg : جهة النشر
		/// </summary>
		[EnumTextValue("PUBLISH_ORG")]
		[ColumnEnum("PUBLISH_ORG", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		PublishOrg = 7,
		/// <summary>
		/// StudOrdr : ترتيب المؤلف
		/// </summary>
		[EnumTextValue("STUD_ORDR")]
		[ColumnEnum("STUD_ORDR", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		StudOrdr = 8,
		/// <summary>
		/// Notes : ملاحظات
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		Notes = 9,
		/// <summary>
		/// PublishFlg : حالة النشر
		/// 		/// 
		/// 		/// 1 تم النشر (القيمة الافتراضية)  published 
		/// 		/// 2 تم القبول accepted
		/// 		/// 
		/// </summary>
		[EnumTextValue("PUBLISH_FLG")]
		[ColumnEnum("PUBLISH_FLG", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PublishFlg = 10,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 11,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 12
	}//End enum

	#endregion PgStudPublishColumn Enum

} // end namespace
