
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file FeeStudFeeItem.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'FEE_STUD_FEE_ITEM' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class FeeStudFeeItemBase : EntityBase, IFeeStudFeeItem, IEntityId<FeeStudFeeItemKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private FeeStudFeeItemEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private FeeStudFeeItemEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private FeeStudFeeItemEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<FeeStudFeeItem> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeStudFeeItemEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeStudFeeItemEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="FeeStudFeeItemBase"/> instance.
		///</summary>
		public FeeStudFeeItemBase()
		{
			this.entityData = new FeeStudFeeItemEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="FeeStudFeeItemBase"/> instance.
		///</summary>
		///<param name="_feeStudFeeItemId">بنود المصروفات على  طالب</param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_edStudId"></param>
		///<param name="_feeCodeTypeId"></param>
		///<param name="_feeFacultyItemId"></param>
		///<param name="_feeItemValue">القيمة الفعلية للبند</param>
		///<param name="_remainAmount">remain on student only</param>
		///<param name="_gsCodeCurrencyId">قيمة التخفيض</param>
		///<param name="_discAmount">قيمة الكفالة</param>
		///<param name="_spoAmount">KU NEW</param>
		///<param name="_feeCodeItemId">NULL:Downpayment  Add 2 Balance</param>
		///<param name="_edCodeSemActvityId"></param>
		///<param name="_transId"></param>
		///<param name="_itemDesc"></param>
		///<param name="_notes"></param>
		///<param name="_dueDate"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_loadDate"></param>
		///<param name="_seFormId"></param>
		public FeeStudFeeItemBase(System.Decimal _feeStudFeeItemId, System.Decimal? _asFacultyInfoId, 
			System.Decimal _edAcadYearId, System.Decimal? _edCodeSemesterId, System.Decimal _edStudId, 
			System.Decimal _feeCodeTypeId, System.Decimal? _feeFacultyItemId, System.Decimal _feeItemValue, 
			System.Decimal _remainAmount, System.Decimal _gsCodeCurrencyId, System.Decimal? _discAmount, 
			System.Decimal? _spoAmount, System.Decimal _feeCodeItemId, System.Decimal? _edCodeSemActvityId, 
			System.Decimal? _transId, System.String _itemDesc, System.String _notes, 
			System.DateTime? _dueDate, System.Decimal? _seUserId, System.DateTime? _lastDate, 
			System.DateTime? _loadDate, System.Decimal? _seFormId)
		{
			this.entityData = new FeeStudFeeItemEntityData();
			this.backupData = null;

			this.FeeStudFeeItemId = _feeStudFeeItemId;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.EdAcadYearId = _edAcadYearId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.EdStudId = _edStudId;
			this.FeeCodeTypeId = _feeCodeTypeId;
			this.FeeFacultyItemId = _feeFacultyItemId;
			this.FeeItemValue = _feeItemValue;
			this.RemainAmount = _remainAmount;
			this.GsCodeCurrencyId = _gsCodeCurrencyId;
			this.DiscAmount = _discAmount;
			this.SpoAmount = _spoAmount;
			this.FeeCodeItemId = _feeCodeItemId;
			this.EdCodeSemActvityId = _edCodeSemActvityId;
			this.TransId = _transId;
			this.ItemDesc = _itemDesc;
			this.Notes = _notes;
			this.DueDate = _dueDate;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
			this.LoadDate = _loadDate;
			this.SeFormId = _seFormId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="FeeStudFeeItem"/> instance.
		///</summary>
		///<param name="_feeStudFeeItemId">بنود المصروفات على  طالب</param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_edStudId"></param>
		///<param name="_feeCodeTypeId"></param>
		///<param name="_feeFacultyItemId"></param>
		///<param name="_feeItemValue">القيمة الفعلية للبند</param>
		///<param name="_remainAmount">remain on student only</param>
		///<param name="_gsCodeCurrencyId">قيمة التخفيض</param>
		///<param name="_discAmount">قيمة الكفالة</param>
		///<param name="_spoAmount">KU NEW</param>
		///<param name="_feeCodeItemId">NULL:Downpayment  Add 2 Balance</param>
		///<param name="_edCodeSemActvityId"></param>
		///<param name="_transId"></param>
		///<param name="_itemDesc"></param>
		///<param name="_notes"></param>
		///<param name="_dueDate"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_loadDate"></param>
		///<param name="_seFormId"></param>
		public static FeeStudFeeItem CreateFeeStudFeeItem(System.Decimal _feeStudFeeItemId, System.Decimal? _asFacultyInfoId, 
			System.Decimal _edAcadYearId, System.Decimal? _edCodeSemesterId, System.Decimal _edStudId, 
			System.Decimal _feeCodeTypeId, System.Decimal? _feeFacultyItemId, System.Decimal _feeItemValue, 
			System.Decimal _remainAmount, System.Decimal _gsCodeCurrencyId, System.Decimal? _discAmount, 
			System.Decimal? _spoAmount, System.Decimal _feeCodeItemId, System.Decimal? _edCodeSemActvityId, 
			System.Decimal? _transId, System.String _itemDesc, System.String _notes, 
			System.DateTime? _dueDate, System.Decimal? _seUserId, System.DateTime? _lastDate, 
			System.DateTime? _loadDate, System.Decimal? _seFormId)
		{
			FeeStudFeeItem newFeeStudFeeItem = new FeeStudFeeItem();
			newFeeStudFeeItem.FeeStudFeeItemId = _feeStudFeeItemId;
			newFeeStudFeeItem.AsFacultyInfoId = _asFacultyInfoId;
			newFeeStudFeeItem.EdAcadYearId = _edAcadYearId;
			newFeeStudFeeItem.EdCodeSemesterId = _edCodeSemesterId;
			newFeeStudFeeItem.EdStudId = _edStudId;
			newFeeStudFeeItem.FeeCodeTypeId = _feeCodeTypeId;
			newFeeStudFeeItem.FeeFacultyItemId = _feeFacultyItemId;
			newFeeStudFeeItem.FeeItemValue = _feeItemValue;
			newFeeStudFeeItem.RemainAmount = _remainAmount;
			newFeeStudFeeItem.GsCodeCurrencyId = _gsCodeCurrencyId;
			newFeeStudFeeItem.DiscAmount = _discAmount;
			newFeeStudFeeItem.SpoAmount = _spoAmount;
			newFeeStudFeeItem.FeeCodeItemId = _feeCodeItemId;
			newFeeStudFeeItem.EdCodeSemActvityId = _edCodeSemActvityId;
			newFeeStudFeeItem.TransId = _transId;
			newFeeStudFeeItem.ItemDesc = _itemDesc;
			newFeeStudFeeItem.Notes = _notes;
			newFeeStudFeeItem.DueDate = _dueDate;
			newFeeStudFeeItem.SeUserId = _seUserId;
			newFeeStudFeeItem.LastDate = _lastDate;
			newFeeStudFeeItem.LoadDate = _loadDate;
			newFeeStudFeeItem.SeFormId = _seFormId;
			return newFeeStudFeeItem;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the FeeStudFeeItemId property. 
		///		بنود المصروفات على  طالب
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"بنود المصروفات على  طالب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal FeeStudFeeItemId
		{
			get
			{
				return this.entityData.FeeStudFeeItemId; 
			}
			
			set
			{
				if (this.entityData.FeeStudFeeItemId == value)
					return;
					
				OnColumnChanging(FeeStudFeeItemColumn.FeeStudFeeItemId, this.entityData.FeeStudFeeItemId);
				this.entityData.FeeStudFeeItemId = value;
				this.EntityId.FeeStudFeeItemId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFeeItemColumn.FeeStudFeeItemId, this.entityData.FeeStudFeeItemId);
				OnPropertyChanged("FeeStudFeeItemId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the FEE_STUD_FEE_ITEM_ID property.
		///		بنود المصروفات على  طالب
		/// </summary>
		/// <remarks>This is the original value of the FEE_STUD_FEE_ITEM_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalFeeStudFeeItemId
		{
			get { return this.entityData.OriginalFeeStudFeeItemId; }
			set { this.entityData.OriginalFeeStudFeeItemId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(FeeStudFeeItemColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFeeItemColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(FeeStudFeeItemColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFeeItemColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeSemesterIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(FeeStudFeeItemColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFeeItemColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(FeeStudFeeItemColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFeeItemColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeCodeTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal FeeCodeTypeId
		{
			get
			{
				return this.entityData.FeeCodeTypeId; 
			}
			
			set
			{
				if (this.entityData.FeeCodeTypeId == value)
					return;
					
				OnColumnChanging(FeeStudFeeItemColumn.FeeCodeTypeId, this.entityData.FeeCodeTypeId);
				this.entityData.FeeCodeTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFeeItemColumn.FeeCodeTypeId, this.entityData.FeeCodeTypeId);
				OnPropertyChanged("FeeCodeTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeFacultyItemId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeFacultyItemIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeeFacultyItemId
		{
			get
			{
				return this.entityData.FeeFacultyItemId; 
			}
			
			set
			{
				if (this.entityData.FeeFacultyItemId == value)
					return;
					
				OnColumnChanging(FeeStudFeeItemColumn.FeeFacultyItemId, this.entityData.FeeFacultyItemId);
				this.entityData.FeeFacultyItemId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFeeItemColumn.FeeFacultyItemId, this.entityData.FeeFacultyItemId);
				OnPropertyChanged("FeeFacultyItemId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeItemValue property. 
		///		القيمة الفعلية للبند
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"القيمة الفعلية للبند"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal FeeItemValue
		{
			get
			{
				return this.entityData.FeeItemValue; 
			}
			
			set
			{
				if (this.entityData.FeeItemValue == value)
					return;
					
				OnColumnChanging(FeeStudFeeItemColumn.FeeItemValue, this.entityData.FeeItemValue);
				this.entityData.FeeItemValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFeeItemColumn.FeeItemValue, this.entityData.FeeItemValue);
				OnPropertyChanged("FeeItemValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RemainAmount property. 
		///		remain on student only
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"remain on student only"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal RemainAmount
		{
			get
			{
				return this.entityData.RemainAmount; 
			}
			
			set
			{
				if (this.entityData.RemainAmount == value)
					return;
					
				OnColumnChanging(FeeStudFeeItemColumn.RemainAmount, this.entityData.RemainAmount);
				this.entityData.RemainAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFeeItemColumn.RemainAmount, this.entityData.RemainAmount);
				OnPropertyChanged("RemainAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeCurrencyId property. 
		///		قيمة التخفيض
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"قيمة التخفيض"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsCodeCurrencyId
		{
			get
			{
				return this.entityData.GsCodeCurrencyId; 
			}
			
			set
			{
				if (this.entityData.GsCodeCurrencyId == value)
					return;
					
				OnColumnChanging(FeeStudFeeItemColumn.GsCodeCurrencyId, this.entityData.GsCodeCurrencyId);
				this.entityData.GsCodeCurrencyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFeeItemColumn.GsCodeCurrencyId, this.entityData.GsCodeCurrencyId);
				OnPropertyChanged("GsCodeCurrencyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DiscAmount property. 
		///		قيمة الكفالة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDiscAmountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"قيمة الكفالة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DiscAmount
		{
			get
			{
				return this.entityData.DiscAmount; 
			}
			
			set
			{
				if (this.entityData.DiscAmount == value)
					return;
					
				OnColumnChanging(FeeStudFeeItemColumn.DiscAmount, this.entityData.DiscAmount);
				this.entityData.DiscAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFeeItemColumn.DiscAmount, this.entityData.DiscAmount);
				OnPropertyChanged("DiscAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SpoAmount property. 
		///		KU NEW
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSpoAmountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"KU NEW"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SpoAmount
		{
			get
			{
				return this.entityData.SpoAmount; 
			}
			
			set
			{
				if (this.entityData.SpoAmount == value)
					return;
					
				OnColumnChanging(FeeStudFeeItemColumn.SpoAmount, this.entityData.SpoAmount);
				this.entityData.SpoAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFeeItemColumn.SpoAmount, this.entityData.SpoAmount);
				OnPropertyChanged("SpoAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeCodeItemId property. 
		///		NULL:Downpayment  Add 2 Balance
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"NULL:Downpayment  Add 2 Balance"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal FeeCodeItemId
		{
			get
			{
				return this.entityData.FeeCodeItemId; 
			}
			
			set
			{
				if (this.entityData.FeeCodeItemId == value)
					return;
					
				OnColumnChanging(FeeStudFeeItemColumn.FeeCodeItemId, this.entityData.FeeCodeItemId);
				this.entityData.FeeCodeItemId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFeeItemColumn.FeeCodeItemId, this.entityData.FeeCodeItemId);
				OnPropertyChanged("FeeCodeItemId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemActvityId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeSemActvityIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeSemActvityId
		{
			get
			{
				return this.entityData.EdCodeSemActvityId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemActvityId == value)
					return;
					
				OnColumnChanging(FeeStudFeeItemColumn.EdCodeSemActvityId, this.entityData.EdCodeSemActvityId);
				this.entityData.EdCodeSemActvityId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFeeItemColumn.EdCodeSemActvityId, this.entityData.EdCodeSemActvityId);
				OnPropertyChanged("EdCodeSemActvityId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTransIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TransId
		{
			get
			{
				return this.entityData.TransId; 
			}
			
			set
			{
				if (this.entityData.TransId == value)
					return;
					
				OnColumnChanging(FeeStudFeeItemColumn.TransId, this.entityData.TransId);
				this.entityData.TransId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFeeItemColumn.TransId, this.entityData.TransId);
				OnPropertyChanged("TransId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ItemDesc property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String ItemDesc
		{
			get
			{
				return this.entityData.ItemDesc; 
			}
			
			set
			{
				if (this.entityData.ItemDesc == value)
					return;
					
				OnColumnChanging(FeeStudFeeItemColumn.ItemDesc, this.entityData.ItemDesc);
				this.entityData.ItemDesc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFeeItemColumn.ItemDesc, this.entityData.ItemDesc);
				OnPropertyChanged("ItemDesc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(FeeStudFeeItemColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFeeItemColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DueDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsDueDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DueDate
		{
			get
			{
				return this.entityData.DueDate; 
			}
			
			set
			{
				if (this.entityData.DueDate == value)
					return;
					
				OnColumnChanging(FeeStudFeeItemColumn.DueDate, this.entityData.DueDate);
				this.entityData.DueDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFeeItemColumn.DueDate, this.entityData.DueDate);
				OnPropertyChanged("DueDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(FeeStudFeeItemColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFeeItemColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(FeeStudFeeItemColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFeeItemColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LoadDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLoadDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LoadDate
		{
			get
			{
				return this.entityData.LoadDate; 
			}
			
			set
			{
				if (this.entityData.LoadDate == value)
					return;
					
				OnColumnChanging(FeeStudFeeItemColumn.LoadDate, this.entityData.LoadDate);
				this.entityData.LoadDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFeeItemColumn.LoadDate, this.entityData.LoadDate);
				OnPropertyChanged("LoadDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeFormId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeFormIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeFormId
		{
			get
			{
				return this.entityData.SeFormId; 
			}
			
			set
			{
				if (this.entityData.SeFormId == value)
					return;
					
				OnColumnChanging(FeeStudFeeItemColumn.SeFormId, this.entityData.SeFormId);
				this.entityData.SeFormId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeStudFeeItemColumn.SeFormId, this.entityData.SeFormId);
				OnPropertyChanged("SeFormId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeItem"/>.
		/// </summary>
		/// <value>The source FeeCodeItem for FeeCodeItemId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeCodeItem FeeCodeItemIdSource
      	{
            get { return entityData.FeeCodeItemIdSource; }
            set { entityData.FeeCodeItemIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemActvity"/>.
		/// </summary>
		/// <value>The source EdCodeSemActvity for EdCodeSemActvityId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemActvity EdCodeSemActvityIdSource
      	{
            get { return entityData.EdCodeSemActvityIdSource; }
            set { entityData.EdCodeSemActvityIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeType"/>.
		/// </summary>
		/// <value>The source FeeCodeType for FeeCodeTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeCodeType FeeCodeTypeIdSource
      	{
            get { return entityData.FeeCodeTypeIdSource; }
            set { entityData.FeeCodeTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeFacultyItem"/>.
		/// </summary>
		/// <value>The source FeeFacultyItem for FeeFacultyItemId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeFacultyItem FeeFacultyItemIdSource
      	{
            get { return entityData.FeeFacultyItemIdSource; }
            set { entityData.FeeFacultyItemIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCurrency"/>.
		/// </summary>
		/// <value>The source GsCodeCurrency for GsCodeCurrencyId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeCurrency GsCodeCurrencyIdSource
      	{
            get { return entityData.GsCodeCurrencyIdSource; }
            set { entityData.GsCodeCurrencyIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeForm"/>.
		/// </summary>
		/// <value>The source SeForm for SeFormId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeForm SeFormIdSource
      	{
            get { return entityData.SeFormIdSource; }
            set { entityData.SeFormIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeUser SeUserIdSource
      	{
            get { return entityData.SeUserIdSource; }
            set { entityData.SeUserIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of FeeStudVoucherItem objects
		///	which are related to this object through the relation FK_FEE_STUD_VOUCHER_ITEM_FEE_STUD_FEE_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeStudVoucherItem> FeeStudVoucherItemCollection
		{
			get { return entityData.FeeStudVoucherItemCollection; }
			set { entityData.FeeStudVoucherItemCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AccomStudReq objects
		///	which are related to this object through the relation FK_ACCOM_STUD_REQ_FEE_STUD_FEE_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AccomStudReq> AccomStudReqCollection
		{
			get { return entityData.AccomStudReqCollection; }
			set { entityData.AccomStudReqCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeStudCoursesItem objects
		///	which are related to this object through the relation FK_FEE_STUD_COURSES_ITEM_FEE_STUD_FEE_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeStudCoursesItem> FeeStudCoursesItemCollection
		{
			get { return entityData.FeeStudCoursesItemCollection; }
			set { entityData.FeeStudCoursesItemCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SpoStudFeeItem objects
		///	which are related to this object through the relation FK_SPO_STUD_FEE_ITEM_FEE_STUD_FEE_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SpoStudFeeItem> SpoStudFeeItemCollection
		{
			get { return entityData.SpoStudFeeItemCollection; }
			set { entityData.SpoStudFeeItemCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of PgThesisStudExtend objects
		///	which are related to this object through the relation FK_PG_THESIS_STUD_EXTEND_FEE_STUD_FEE_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgThesisStudExtend> PgThesisStudExtendCollection
		{
			get { return entityData.PgThesisStudExtendCollection; }
			set { entityData.PgThesisStudExtendCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudCourseGrdChng objects
		///	which are related to this object through the relation FK_ED_STUD_COURSE_GRD_CHNG_FEE_STUD_FEE_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCourseGrdChng> EdStudCourseGrdChngCollection
		{
			get { return entityData.EdStudCourseGrdChngCollection; }
			set { entityData.EdStudCourseGrdChngCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeInvoiceItem objects
		///	which are related to this object through the relation FK_FEE_INVOICE_ITEM_FEE_STUD_FEE_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeInvoiceItem> FeeInvoiceItemCollection
		{
			get { return entityData.FeeInvoiceItemCollection; }
			set { entityData.FeeInvoiceItemCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeStudDiscFeeItem objects
		///	which are related to this object through the relation FK_FEE_STUD_DISC_FEE_ITEM_FEE_STUD_FEE_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeStudDiscFeeItem> FeeStudDiscFeeItemCollection
		{
			get { return entityData.FeeStudDiscFeeItemCollection; }
			set { entityData.FeeStudDiscFeeItemCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdPrintReq objects
		///	which are related to this object through the relation FK_ED_PRINT_REQ_FEE_STUD_FEE_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdPrintReq> EdPrintReqCollection
		{
			get { return entityData.EdPrintReqCollection; }
			set { entityData.EdPrintReqCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeItemTrnsBlnc objects
		///	which are related to this object through the relation FK_FEE_ITEM_TRNS_BLNC_FEE_STUD_FEE_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeItemTrnsBlnc> FeeItemTrnsBlncCollection
		{
			get { return entityData.FeeItemTrnsBlncCollection; }
			set { entityData.FeeItemTrnsBlncCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeRefndStdDet objects
		///	which are related to this object through the relation FK_FEE_REFUND_STUD_REQ_DET_FEE_STUD_FEE_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeRefndStdDet> FeeRefndStdDetCollection
		{
			get { return entityData.FeeRefndStdDetCollection; }
			set { entityData.FeeRefndStdDetCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "FEE_STUD_FEE_ITEM"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"FEE_STUD_FEE_ITEM_ID", "AS_FACULTY_INFO_ID", "ED_ACAD_YEAR_ID", "ED_CODE_SEMESTER_ID", "ED_STUD_ID", "FEE_CODE_TYPE_ID", "FEE_FACULTY_ITEM_ID", "FEE_ITEM_VALUE", "REMAIN_AMOUNT", "GS_CODE_CURRENCY_ID", "DISC_AMOUNT", "SPO_AMOUNT", "FEE_CODE_ITEM_ID", "ED_CODE_SEM_ACTVITY_ID", "TRANS_ID", "ITEM_DESC", "NOTES", "DUE_DATE", "SE_USER_ID", "LAST_DATE", "LOAD_DATE", "SE_FORM_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as FeeStudFeeItemEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (FeeStudFeeItem) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<FeeStudFeeItem>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as FeeStudFeeItem);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed FeeStudFeeItem Entity 
		///</summary>
		protected virtual FeeStudFeeItem Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			FeeStudFeeItem copy = new FeeStudFeeItem();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.FeeStudFeeItemId = this.FeeStudFeeItemId;
					copy.OriginalFeeStudFeeItemId = this.OriginalFeeStudFeeItemId;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.EdStudId = this.EdStudId;
				copy.FeeCodeTypeId = this.FeeCodeTypeId;
				copy.FeeFacultyItemId = this.FeeFacultyItemId;
				copy.FeeItemValue = this.FeeItemValue;
				copy.RemainAmount = this.RemainAmount;
				copy.GsCodeCurrencyId = this.GsCodeCurrencyId;
				copy.DiscAmount = this.DiscAmount;
				copy.SpoAmount = this.SpoAmount;
				copy.FeeCodeItemId = this.FeeCodeItemId;
				copy.EdCodeSemActvityId = this.EdCodeSemActvityId;
				copy.TransId = this.TransId;
				copy.ItemDesc = this.ItemDesc;
				copy.Notes = this.Notes;
				copy.DueDate = this.DueDate;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
				copy.LoadDate = this.LoadDate;
				copy.SeFormId = this.SeFormId;
			
			if (this.FeeCodeItemIdSource != null && existingCopies.Contains(this.FeeCodeItemIdSource))
				copy.FeeCodeItemIdSource = existingCopies[this.FeeCodeItemIdSource] as FeeCodeItem;
			else
				copy.FeeCodeItemIdSource = MakeCopyOf(this.FeeCodeItemIdSource, existingCopies) as FeeCodeItem;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemActvityIdSource != null && existingCopies.Contains(this.EdCodeSemActvityIdSource))
				copy.EdCodeSemActvityIdSource = existingCopies[this.EdCodeSemActvityIdSource] as EdCodeSemActvity;
			else
				copy.EdCodeSemActvityIdSource = MakeCopyOf(this.EdCodeSemActvityIdSource, existingCopies) as EdCodeSemActvity;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.FeeCodeTypeIdSource != null && existingCopies.Contains(this.FeeCodeTypeIdSource))
				copy.FeeCodeTypeIdSource = existingCopies[this.FeeCodeTypeIdSource] as FeeCodeType;
			else
				copy.FeeCodeTypeIdSource = MakeCopyOf(this.FeeCodeTypeIdSource, existingCopies) as FeeCodeType;
			if (this.FeeFacultyItemIdSource != null && existingCopies.Contains(this.FeeFacultyItemIdSource))
				copy.FeeFacultyItemIdSource = existingCopies[this.FeeFacultyItemIdSource] as FeeFacultyItem;
			else
				copy.FeeFacultyItemIdSource = MakeCopyOf(this.FeeFacultyItemIdSource, existingCopies) as FeeFacultyItem;
			if (this.GsCodeCurrencyIdSource != null && existingCopies.Contains(this.GsCodeCurrencyIdSource))
				copy.GsCodeCurrencyIdSource = existingCopies[this.GsCodeCurrencyIdSource] as GsCodeCurrency;
			else
				copy.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource, existingCopies) as GsCodeCurrency;
			if (this.SeFormIdSource != null && existingCopies.Contains(this.SeFormIdSource))
				copy.SeFormIdSource = existingCopies[this.SeFormIdSource] as SeForm;
			else
				copy.SeFormIdSource = MakeCopyOf(this.SeFormIdSource, existingCopies) as SeForm;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				copy.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				copy.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
		
			//deep copy nested objects
			copy.FeeStudVoucherItemCollection = (TList<FeeStudVoucherItem>) MakeCopyOf(this.FeeStudVoucherItemCollection, existingCopies); 
			copy.AccomStudReqCollection = (TList<AccomStudReq>) MakeCopyOf(this.AccomStudReqCollection, existingCopies); 
			copy.FeeStudCoursesItemCollection = (TList<FeeStudCoursesItem>) MakeCopyOf(this.FeeStudCoursesItemCollection, existingCopies); 
			copy.SpoStudFeeItemCollection = (TList<SpoStudFeeItem>) MakeCopyOf(this.SpoStudFeeItemCollection, existingCopies); 
			copy.PgThesisStudExtendCollection = (TList<PgThesisStudExtend>) MakeCopyOf(this.PgThesisStudExtendCollection, existingCopies); 
			copy.EdStudCourseGrdChngCollection = (TList<EdStudCourseGrdChng>) MakeCopyOf(this.EdStudCourseGrdChngCollection, existingCopies); 
			copy.FeeInvoiceItemCollection = (TList<FeeInvoiceItem>) MakeCopyOf(this.FeeInvoiceItemCollection, existingCopies); 
			copy.FeeStudDiscFeeItemCollection = (TList<FeeStudDiscFeeItem>) MakeCopyOf(this.FeeStudDiscFeeItemCollection, existingCopies); 
			copy.EdPrintReqCollection = (TList<EdPrintReq>) MakeCopyOf(this.EdPrintReqCollection, existingCopies); 
			copy.FeeItemTrnsBlncCollection = (TList<FeeItemTrnsBlnc>) MakeCopyOf(this.FeeItemTrnsBlncCollection, existingCopies); 
			copy.FeeRefndStdDetCollection = (TList<FeeRefndStdDet>) MakeCopyOf(this.FeeRefndStdDetCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed FeeStudFeeItem Entity 
		///</summary>
		public virtual FeeStudFeeItem Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed FeeStudFeeItem Entity which is a deep copy of the current entity.
		///</summary>
		public virtual FeeStudFeeItem DeepCopy()
		{
			return EntityHelper.Clone<FeeStudFeeItem>(this as FeeStudFeeItem);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as FeeStudFeeItemEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new FeeStudFeeItemEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as FeeStudFeeItemEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(FeeStudFeeItemColumn column)
		{
			switch(column)
			{
					case FeeStudFeeItemColumn.FeeStudFeeItemId:
					return entityData.FeeStudFeeItemId != _originalData.FeeStudFeeItemId;
					case FeeStudFeeItemColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case FeeStudFeeItemColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case FeeStudFeeItemColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case FeeStudFeeItemColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case FeeStudFeeItemColumn.FeeCodeTypeId:
					return entityData.FeeCodeTypeId != _originalData.FeeCodeTypeId;
					case FeeStudFeeItemColumn.FeeFacultyItemId:
					return entityData.FeeFacultyItemId != _originalData.FeeFacultyItemId;
					case FeeStudFeeItemColumn.FeeItemValue:
					return entityData.FeeItemValue != _originalData.FeeItemValue;
					case FeeStudFeeItemColumn.RemainAmount:
					return entityData.RemainAmount != _originalData.RemainAmount;
					case FeeStudFeeItemColumn.GsCodeCurrencyId:
					return entityData.GsCodeCurrencyId != _originalData.GsCodeCurrencyId;
					case FeeStudFeeItemColumn.DiscAmount:
					return entityData.DiscAmount != _originalData.DiscAmount;
					case FeeStudFeeItemColumn.SpoAmount:
					return entityData.SpoAmount != _originalData.SpoAmount;
					case FeeStudFeeItemColumn.FeeCodeItemId:
					return entityData.FeeCodeItemId != _originalData.FeeCodeItemId;
					case FeeStudFeeItemColumn.EdCodeSemActvityId:
					return entityData.EdCodeSemActvityId != _originalData.EdCodeSemActvityId;
					case FeeStudFeeItemColumn.TransId:
					return entityData.TransId != _originalData.TransId;
					case FeeStudFeeItemColumn.ItemDesc:
					return entityData.ItemDesc != _originalData.ItemDesc;
					case FeeStudFeeItemColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case FeeStudFeeItemColumn.DueDate:
					return entityData.DueDate != _originalData.DueDate;
					case FeeStudFeeItemColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case FeeStudFeeItemColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case FeeStudFeeItemColumn.LoadDate:
					return entityData.LoadDate != _originalData.LoadDate;
					case FeeStudFeeItemColumn.SeFormId:
					return entityData.SeFormId != _originalData.SeFormId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< FeeStudFeeItemColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.FeeStudFeeItemId != _originalData.FeeStudFeeItemId;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.FeeCodeTypeId != _originalData.FeeCodeTypeId;
			result = result || entityData.FeeFacultyItemId != _originalData.FeeFacultyItemId;
			result = result || entityData.FeeItemValue != _originalData.FeeItemValue;
			result = result || entityData.RemainAmount != _originalData.RemainAmount;
			result = result || entityData.GsCodeCurrencyId != _originalData.GsCodeCurrencyId;
			result = result || entityData.DiscAmount != _originalData.DiscAmount;
			result = result || entityData.SpoAmount != _originalData.SpoAmount;
			result = result || entityData.FeeCodeItemId != _originalData.FeeCodeItemId;
			result = result || entityData.EdCodeSemActvityId != _originalData.EdCodeSemActvityId;
			result = result || entityData.TransId != _originalData.TransId;
			result = result || entityData.ItemDesc != _originalData.ItemDesc;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.DueDate != _originalData.DueDate;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.LoadDate != _originalData.LoadDate;
			result = result || entityData.SeFormId != _originalData.SeFormId;
			return result;
		}	
		
		///<summary>
		///  Returns a FeeStudFeeItem Entity with the original data.
		///</summary>
		public FeeStudFeeItem GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateFeeStudFeeItem(
				_originalData.FeeStudFeeItemId,
				_originalData.AsFacultyInfoId,
				_originalData.EdAcadYearId,
				_originalData.EdCodeSemesterId,
				_originalData.EdStudId,
				_originalData.FeeCodeTypeId,
				_originalData.FeeFacultyItemId,
				_originalData.FeeItemValue,
				_originalData.RemainAmount,
				_originalData.GsCodeCurrencyId,
				_originalData.DiscAmount,
				_originalData.SpoAmount,
				_originalData.FeeCodeItemId,
				_originalData.EdCodeSemActvityId,
				_originalData.TransId,
				_originalData.ItemDesc,
				_originalData.Notes,
				_originalData.DueDate,
				_originalData.SeUserId,
				_originalData.LastDate,
				_originalData.LoadDate,
				_originalData.SeFormId
				);
				
			return (FeeStudFeeItem)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="FeeStudFeeItemBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is FeeStudFeeItemBase)
				return ValueEquals(this, (FeeStudFeeItemBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="FeeStudFeeItemBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.FeeStudFeeItemId.GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					((this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString()).GetHashCode() ^ 
					this.EdStudId.GetHashCode() ^ 
					this.FeeCodeTypeId.GetHashCode() ^ 
					((this.FeeFacultyItemId == null) ? string.Empty : this.FeeFacultyItemId.ToString()).GetHashCode() ^ 
					this.FeeItemValue.GetHashCode() ^ 
					this.RemainAmount.GetHashCode() ^ 
					this.GsCodeCurrencyId.GetHashCode() ^ 
					((this.DiscAmount == null) ? string.Empty : this.DiscAmount.ToString()).GetHashCode() ^ 
					((this.SpoAmount == null) ? string.Empty : this.SpoAmount.ToString()).GetHashCode() ^ 
					this.FeeCodeItemId.GetHashCode() ^ 
					((this.EdCodeSemActvityId == null) ? string.Empty : this.EdCodeSemActvityId.ToString()).GetHashCode() ^ 
					((this.TransId == null) ? string.Empty : this.TransId.ToString()).GetHashCode() ^ 
					((this.ItemDesc == null) ? string.Empty : this.ItemDesc.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.DueDate == null) ? string.Empty : this.DueDate.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.LoadDate == null) ? string.Empty : this.LoadDate.ToString()).GetHashCode() ^ 
					((this.SeFormId == null) ? string.Empty : this.SeFormId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="FeeStudFeeItemBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(FeeStudFeeItemBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="FeeStudFeeItemBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="FeeStudFeeItemBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="FeeStudFeeItemBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(FeeStudFeeItemBase Object1, FeeStudFeeItemBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.FeeStudFeeItemId != Object2.FeeStudFeeItemId)
				equal = false;
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if ( Object1.EdCodeSemesterId != null && Object2.EdCodeSemesterId != null )
			{
				if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
					equal = false;
			}
			else if (Object1.EdCodeSemesterId == null ^ Object2.EdCodeSemesterId == null )
			{
				equal = false;
			}
			if (Object1.EdStudId != Object2.EdStudId)
				equal = false;
			if (Object1.FeeCodeTypeId != Object2.FeeCodeTypeId)
				equal = false;
			if ( Object1.FeeFacultyItemId != null && Object2.FeeFacultyItemId != null )
			{
				if (Object1.FeeFacultyItemId != Object2.FeeFacultyItemId)
					equal = false;
			}
			else if (Object1.FeeFacultyItemId == null ^ Object2.FeeFacultyItemId == null )
			{
				equal = false;
			}
			if (Object1.FeeItemValue != Object2.FeeItemValue)
				equal = false;
			if (Object1.RemainAmount != Object2.RemainAmount)
				equal = false;
			if (Object1.GsCodeCurrencyId != Object2.GsCodeCurrencyId)
				equal = false;
			if ( Object1.DiscAmount != null && Object2.DiscAmount != null )
			{
				if (Object1.DiscAmount != Object2.DiscAmount)
					equal = false;
			}
			else if (Object1.DiscAmount == null ^ Object2.DiscAmount == null )
			{
				equal = false;
			}
			if ( Object1.SpoAmount != null && Object2.SpoAmount != null )
			{
				if (Object1.SpoAmount != Object2.SpoAmount)
					equal = false;
			}
			else if (Object1.SpoAmount == null ^ Object2.SpoAmount == null )
			{
				equal = false;
			}
			if (Object1.FeeCodeItemId != Object2.FeeCodeItemId)
				equal = false;
			if ( Object1.EdCodeSemActvityId != null && Object2.EdCodeSemActvityId != null )
			{
				if (Object1.EdCodeSemActvityId != Object2.EdCodeSemActvityId)
					equal = false;
			}
			else if (Object1.EdCodeSemActvityId == null ^ Object2.EdCodeSemActvityId == null )
			{
				equal = false;
			}
			if ( Object1.TransId != null && Object2.TransId != null )
			{
				if (Object1.TransId != Object2.TransId)
					equal = false;
			}
			else if (Object1.TransId == null ^ Object2.TransId == null )
			{
				equal = false;
			}
			if ( Object1.ItemDesc != null && Object2.ItemDesc != null )
			{
				if (Object1.ItemDesc != Object2.ItemDesc)
					equal = false;
			}
			else if (Object1.ItemDesc == null ^ Object2.ItemDesc == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.DueDate != null && Object2.DueDate != null )
			{
				if (Object1.DueDate != Object2.DueDate)
					equal = false;
			}
			else if (Object1.DueDate == null ^ Object2.DueDate == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.LoadDate != null && Object2.LoadDate != null )
			{
				if (Object1.LoadDate != Object2.LoadDate)
					equal = false;
			}
			else if (Object1.LoadDate == null ^ Object2.LoadDate == null )
			{
				equal = false;
			}
			if ( Object1.SeFormId != null && Object2.SeFormId != null )
			{
				if (Object1.SeFormId != Object2.SeFormId)
					equal = false;
			}
			else if (Object1.SeFormId == null ^ Object2.SeFormId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((FeeStudFeeItemBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static FeeStudFeeItemComparer GetComparer()
        {
            return new FeeStudFeeItemComparer();
        }
        */

        // Comparer delegates back to FeeStudFeeItem
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(FeeStudFeeItem rhs, FeeStudFeeItemColumn which)
        {
            switch (which)
            {
            	
            	
            	case FeeStudFeeItemColumn.FeeStudFeeItemId:
            		return this.FeeStudFeeItemId.CompareTo(rhs.FeeStudFeeItemId);
            		
            		                 
            	
            	
            	case FeeStudFeeItemColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case FeeStudFeeItemColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case FeeStudFeeItemColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.Value.CompareTo(rhs.EdCodeSemesterId.Value);
            		
            		                 
            	
            	
            	case FeeStudFeeItemColumn.EdStudId:
            		return this.EdStudId.CompareTo(rhs.EdStudId);
            		
            		                 
            	
            	
            	case FeeStudFeeItemColumn.FeeCodeTypeId:
            		return this.FeeCodeTypeId.CompareTo(rhs.FeeCodeTypeId);
            		
            		                 
            	
            	
            	case FeeStudFeeItemColumn.FeeFacultyItemId:
            		return this.FeeFacultyItemId.Value.CompareTo(rhs.FeeFacultyItemId.Value);
            		
            		                 
            	
            	
            	case FeeStudFeeItemColumn.FeeItemValue:
            		return this.FeeItemValue.CompareTo(rhs.FeeItemValue);
            		
            		                 
            	
            	
            	case FeeStudFeeItemColumn.RemainAmount:
            		return this.RemainAmount.CompareTo(rhs.RemainAmount);
            		
            		                 
            	
            	
            	case FeeStudFeeItemColumn.GsCodeCurrencyId:
            		return this.GsCodeCurrencyId.CompareTo(rhs.GsCodeCurrencyId);
            		
            		                 
            	
            	
            	case FeeStudFeeItemColumn.DiscAmount:
            		return this.DiscAmount.Value.CompareTo(rhs.DiscAmount.Value);
            		
            		                 
            	
            	
            	case FeeStudFeeItemColumn.SpoAmount:
            		return this.SpoAmount.Value.CompareTo(rhs.SpoAmount.Value);
            		
            		                 
            	
            	
            	case FeeStudFeeItemColumn.FeeCodeItemId:
            		return this.FeeCodeItemId.CompareTo(rhs.FeeCodeItemId);
            		
            		                 
            	
            	
            	case FeeStudFeeItemColumn.EdCodeSemActvityId:
            		return this.EdCodeSemActvityId.Value.CompareTo(rhs.EdCodeSemActvityId.Value);
            		
            		                 
            	
            	
            	case FeeStudFeeItemColumn.TransId:
            		return this.TransId.Value.CompareTo(rhs.TransId.Value);
            		
            		                 
            	
            	
            	case FeeStudFeeItemColumn.ItemDesc:
            		return this.ItemDesc.CompareTo(rhs.ItemDesc);
            		
            		                 
            	
            	
            	case FeeStudFeeItemColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case FeeStudFeeItemColumn.DueDate:
            		return this.DueDate.Value.CompareTo(rhs.DueDate.Value);
            		
            		                 
            	
            	
            	case FeeStudFeeItemColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case FeeStudFeeItemColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case FeeStudFeeItemColumn.LoadDate:
            		return this.LoadDate.Value.CompareTo(rhs.LoadDate.Value);
            		
            		                 
            	
            	
            	case FeeStudFeeItemColumn.SeFormId:
            		return this.SeFormId.Value.CompareTo(rhs.SeFormId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<FeeStudFeeItemKey> Members
		
		// member variable for the EntityId property
		private FeeStudFeeItemKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual FeeStudFeeItemKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new FeeStudFeeItemKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("FeeStudFeeItem")
					.Append("|").Append( this.FeeStudFeeItemId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{23}{22}- FeeStudFeeItemId: {0}{22}- AsFacultyInfoId: {1}{22}- EdAcadYearId: {2}{22}- EdCodeSemesterId: {3}{22}- EdStudId: {4}{22}- FeeCodeTypeId: {5}{22}- FeeFacultyItemId: {6}{22}- FeeItemValue: {7}{22}- RemainAmount: {8}{22}- GsCodeCurrencyId: {9}{22}- DiscAmount: {10}{22}- SpoAmount: {11}{22}- FeeCodeItemId: {12}{22}- EdCodeSemActvityId: {13}{22}- TransId: {14}{22}- ItemDesc: {15}{22}- Notes: {16}{22}- DueDate: {17}{22}- SeUserId: {18}{22}- LastDate: {19}{22}- LoadDate: {20}{22}- SeFormId: {21}{22}{24}", 
				this.FeeStudFeeItemId,
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				this.EdAcadYearId,
				(this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString(),
				this.EdStudId,
				this.FeeCodeTypeId,
				(this.FeeFacultyItemId == null) ? string.Empty : this.FeeFacultyItemId.ToString(),
				this.FeeItemValue,
				this.RemainAmount,
				this.GsCodeCurrencyId,
				(this.DiscAmount == null) ? string.Empty : this.DiscAmount.ToString(),
				(this.SpoAmount == null) ? string.Empty : this.SpoAmount.ToString(),
				this.FeeCodeItemId,
				(this.EdCodeSemActvityId == null) ? string.Empty : this.EdCodeSemActvityId.ToString(),
				(this.TransId == null) ? string.Empty : this.TransId.ToString(),
				(this.ItemDesc == null) ? string.Empty : this.ItemDesc.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.DueDate == null) ? string.Empty : this.DueDate.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.LoadDate == null) ? string.Empty : this.LoadDate.ToString(),
				(this.SeFormId == null) ? string.Empty : this.SeFormId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'FEE_STUD_FEE_ITEM' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class FeeStudFeeItemEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// FEE_STUD_FEE_ITEM_ID : بنود المصروفات على  طالب
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "FEE_STUD_FEE_ITEM"</remarks>
		public System.Decimal FeeStudFeeItemId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalFeeStudFeeItemId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeSemesterId = null;
		
		/// <summary>
		/// ED_STUD_ID : 
		/// </summary>
		public System.Decimal		  EdStudId = 0.0m;
		
		/// <summary>
		/// FEE_CODE_TYPE_ID : 
		/// </summary>
		public System.Decimal		  FeeCodeTypeId = 0.0m;
		
		/// <summary>
		/// FEE_FACULTY_ITEM_ID : 
		/// </summary>
		public System.Decimal?		  FeeFacultyItemId = null;
		
		/// <summary>
		/// FEE_ITEM_VALUE : القيمة الفعلية للبند
		/// </summary>
		public System.Decimal		  FeeItemValue = 0.0m;
		
		/// <summary>
		/// REMAIN_AMOUNT : remain on student only
		/// </summary>
		public System.Decimal		  RemainAmount = 0.0m;
		
		/// <summary>
		/// GS_CODE_CURRENCY_ID : قيمة التخفيض
		/// </summary>
		public System.Decimal		  GsCodeCurrencyId = 0.0m;
		
		/// <summary>
		/// DISC_AMOUNT : قيمة الكفالة
		/// </summary>
		public System.Decimal?		  DiscAmount = null;
		
		/// <summary>
		/// SPO_AMOUNT : KU NEW
		/// </summary>
		public System.Decimal?		  SpoAmount = null;
		
		/// <summary>
		/// FEE_CODE_ITEM_ID : NULL:Downpayment  Add 2 Balance
		/// </summary>
		public System.Decimal		  FeeCodeItemId = 0.0m;
		
		/// <summary>
		/// ED_CODE_SEM_ACTVITY_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeSemActvityId = null;
		
		/// <summary>
		/// TRANS_ID : 
		/// </summary>
		public System.Decimal?		  TransId = null;
		
		/// <summary>
		/// ITEM_DESC : 
		/// </summary>
		public System.String		  ItemDesc = null;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// DUE_DATE : 
		/// </summary>
		public System.DateTime?		  DueDate = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// LOAD_DATE : 
		/// </summary>
		public System.DateTime?		  LoadDate = null;
		
		/// <summary>
		/// SE_FORM_ID : 
		/// </summary>
		public System.Decimal?		  SeFormId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private FeeCodeItem _feeCodeItemIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeItem"/>.
		/// </summary>
		/// <value>The source FeeCodeItem for FeeCodeItemId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeCodeItem FeeCodeItemIdSource
      	{
            get { return this._feeCodeItemIdSource; }
            set { this._feeCodeItemIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCodeSemActvity _edCodeSemActvityIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemActvity"/>.
		/// </summary>
		/// <value>The source EdCodeSemActvity for EdCodeSemActvityId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemActvity EdCodeSemActvityIdSource
      	{
            get { return this._edCodeSemActvityIdSource; }
            set { this._edCodeSemActvityIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		private FeeCodeType _feeCodeTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeType"/>.
		/// </summary>
		/// <value>The source FeeCodeType for FeeCodeTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeCodeType FeeCodeTypeIdSource
      	{
            get { return this._feeCodeTypeIdSource; }
            set { this._feeCodeTypeIdSource = value; }
      	}
		private FeeFacultyItem _feeFacultyItemIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeFacultyItem"/>.
		/// </summary>
		/// <value>The source FeeFacultyItem for FeeFacultyItemId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeFacultyItem FeeFacultyItemIdSource
      	{
            get { return this._feeFacultyItemIdSource; }
            set { this._feeFacultyItemIdSource = value; }
      	}
		private GsCodeCurrency _gsCodeCurrencyIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCurrency"/>.
		/// </summary>
		/// <value>The source GsCodeCurrency for GsCodeCurrencyId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeCurrency GsCodeCurrencyIdSource
      	{
            get { return this._gsCodeCurrencyIdSource; }
            set { this._gsCodeCurrencyIdSource = value; }
      	}
		private SeForm _seFormIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeForm"/>.
		/// </summary>
		/// <value>The source SeForm for SeFormId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeForm SeFormIdSource
      	{
            get { return this._seFormIdSource; }
            set { this._seFormIdSource = value; }
      	}
		private SeUser _seUserIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeUser SeUserIdSource
      	{
            get { return this._seUserIdSource; }
            set { this._seUserIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region FeeStudVoucherItemCollection
		
		private TList<FeeStudVoucherItem> _feeStudVoucherItemFeeStudFeeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeStudVoucherItemFeeStudFeeItemId
		/// </summary>
		
		public TList<FeeStudVoucherItem> FeeStudVoucherItemCollection
		{
			get
			{
				if (_feeStudVoucherItemFeeStudFeeItemId == null)
				{
				_feeStudVoucherItemFeeStudFeeItemId = new TList<FeeStudVoucherItem>();
				}
	
				return _feeStudVoucherItemFeeStudFeeItemId;
			}
			set { _feeStudVoucherItemFeeStudFeeItemId = value; }
		}
		
		#endregion

		#region AccomStudReqCollection
		
		private TList<AccomStudReq> _accomStudReqFeeStudFeeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _accomStudReqFeeStudFeeItemId
		/// </summary>
		
		public TList<AccomStudReq> AccomStudReqCollection
		{
			get
			{
				if (_accomStudReqFeeStudFeeItemId == null)
				{
				_accomStudReqFeeStudFeeItemId = new TList<AccomStudReq>();
				}
	
				return _accomStudReqFeeStudFeeItemId;
			}
			set { _accomStudReqFeeStudFeeItemId = value; }
		}
		
		#endregion

		#region FeeStudCoursesItemCollection
		
		private TList<FeeStudCoursesItem> _feeStudCoursesItemFeeStudFeeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeStudCoursesItemFeeStudFeeItemId
		/// </summary>
		
		public TList<FeeStudCoursesItem> FeeStudCoursesItemCollection
		{
			get
			{
				if (_feeStudCoursesItemFeeStudFeeItemId == null)
				{
				_feeStudCoursesItemFeeStudFeeItemId = new TList<FeeStudCoursesItem>();
				}
	
				return _feeStudCoursesItemFeeStudFeeItemId;
			}
			set { _feeStudCoursesItemFeeStudFeeItemId = value; }
		}
		
		#endregion

		#region SpoStudFeeItemCollection
		
		private TList<SpoStudFeeItem> _spoStudFeeItemFeeStudFeeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _spoStudFeeItemFeeStudFeeItemId
		/// </summary>
		
		public TList<SpoStudFeeItem> SpoStudFeeItemCollection
		{
			get
			{
				if (_spoStudFeeItemFeeStudFeeItemId == null)
				{
				_spoStudFeeItemFeeStudFeeItemId = new TList<SpoStudFeeItem>();
				}
	
				return _spoStudFeeItemFeeStudFeeItemId;
			}
			set { _spoStudFeeItemFeeStudFeeItemId = value; }
		}
		
		#endregion

		#region PgThesisStudExtendCollection
		
		private TList<PgThesisStudExtend> _pgThesisStudExtendFeeStudFeeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgThesisStudExtendFeeStudFeeItemId
		/// </summary>
		
		public TList<PgThesisStudExtend> PgThesisStudExtendCollection
		{
			get
			{
				if (_pgThesisStudExtendFeeStudFeeItemId == null)
				{
				_pgThesisStudExtendFeeStudFeeItemId = new TList<PgThesisStudExtend>();
				}
	
				return _pgThesisStudExtendFeeStudFeeItemId;
			}
			set { _pgThesisStudExtendFeeStudFeeItemId = value; }
		}
		
		#endregion

		#region EdStudCourseGrdChngCollection
		
		private TList<EdStudCourseGrdChng> _edStudCourseGrdChngFeeStudFeeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCourseGrdChngFeeStudFeeItemId
		/// </summary>
		
		public TList<EdStudCourseGrdChng> EdStudCourseGrdChngCollection
		{
			get
			{
				if (_edStudCourseGrdChngFeeStudFeeItemId == null)
				{
				_edStudCourseGrdChngFeeStudFeeItemId = new TList<EdStudCourseGrdChng>();
				}
	
				return _edStudCourseGrdChngFeeStudFeeItemId;
			}
			set { _edStudCourseGrdChngFeeStudFeeItemId = value; }
		}
		
		#endregion

		#region FeeInvoiceItemCollection
		
		private TList<FeeInvoiceItem> _feeInvoiceItemFeeStudFeeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeInvoiceItemFeeStudFeeItemId
		/// </summary>
		
		public TList<FeeInvoiceItem> FeeInvoiceItemCollection
		{
			get
			{
				if (_feeInvoiceItemFeeStudFeeItemId == null)
				{
				_feeInvoiceItemFeeStudFeeItemId = new TList<FeeInvoiceItem>();
				}
	
				return _feeInvoiceItemFeeStudFeeItemId;
			}
			set { _feeInvoiceItemFeeStudFeeItemId = value; }
		}
		
		#endregion

		#region FeeStudDiscFeeItemCollection
		
		private TList<FeeStudDiscFeeItem> _feeStudDiscFeeItemFeeStudFeeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeStudDiscFeeItemFeeStudFeeItemId
		/// </summary>
		
		public TList<FeeStudDiscFeeItem> FeeStudDiscFeeItemCollection
		{
			get
			{
				if (_feeStudDiscFeeItemFeeStudFeeItemId == null)
				{
				_feeStudDiscFeeItemFeeStudFeeItemId = new TList<FeeStudDiscFeeItem>();
				}
	
				return _feeStudDiscFeeItemFeeStudFeeItemId;
			}
			set { _feeStudDiscFeeItemFeeStudFeeItemId = value; }
		}
		
		#endregion

		#region EdPrintReqCollection
		
		private TList<EdPrintReq> _edPrintReqFeeStudFeeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edPrintReqFeeStudFeeItemId
		/// </summary>
		
		public TList<EdPrintReq> EdPrintReqCollection
		{
			get
			{
				if (_edPrintReqFeeStudFeeItemId == null)
				{
				_edPrintReqFeeStudFeeItemId = new TList<EdPrintReq>();
				}
	
				return _edPrintReqFeeStudFeeItemId;
			}
			set { _edPrintReqFeeStudFeeItemId = value; }
		}
		
		#endregion

		#region FeeItemTrnsBlncCollection
		
		private TList<FeeItemTrnsBlnc> _feeItemTrnsBlncFeeStudFeeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeItemTrnsBlncFeeStudFeeItemId
		/// </summary>
		
		public TList<FeeItemTrnsBlnc> FeeItemTrnsBlncCollection
		{
			get
			{
				if (_feeItemTrnsBlncFeeStudFeeItemId == null)
				{
				_feeItemTrnsBlncFeeStudFeeItemId = new TList<FeeItemTrnsBlnc>();
				}
	
				return _feeItemTrnsBlncFeeStudFeeItemId;
			}
			set { _feeItemTrnsBlncFeeStudFeeItemId = value; }
		}
		
		#endregion

		#region FeeRefndStdDetCollection
		
		private TList<FeeRefndStdDet> _feeRefndStdDetFeeStudFeeItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeRefndStdDetFeeStudFeeItemId
		/// </summary>
		
		public TList<FeeRefndStdDet> FeeRefndStdDetCollection
		{
			get
			{
				if (_feeRefndStdDetFeeStudFeeItemId == null)
				{
				_feeRefndStdDetFeeStudFeeItemId = new TList<FeeRefndStdDet>();
				}
	
				return _feeRefndStdDetFeeStudFeeItemId;
			}
			set { _feeRefndStdDetFeeStudFeeItemId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			FeeStudFeeItemEntityData _tmp = new FeeStudFeeItemEntityData();
						
			_tmp.FeeStudFeeItemId = this.FeeStudFeeItemId;
			_tmp.OriginalFeeStudFeeItemId = this.OriginalFeeStudFeeItemId;
			
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.FeeCodeTypeId = this.FeeCodeTypeId;
			_tmp.FeeFacultyItemId = this.FeeFacultyItemId;
			_tmp.FeeItemValue = this.FeeItemValue;
			_tmp.RemainAmount = this.RemainAmount;
			_tmp.GsCodeCurrencyId = this.GsCodeCurrencyId;
			_tmp.DiscAmount = this.DiscAmount;
			_tmp.SpoAmount = this.SpoAmount;
			_tmp.FeeCodeItemId = this.FeeCodeItemId;
			_tmp.EdCodeSemActvityId = this.EdCodeSemActvityId;
			_tmp.TransId = this.TransId;
			_tmp.ItemDesc = this.ItemDesc;
			_tmp.Notes = this.Notes;
			_tmp.DueDate = this.DueDate;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.LoadDate = this.LoadDate;
			_tmp.SeFormId = this.SeFormId;
			
			#region Source Parent Composite Entities
			if (this.FeeCodeItemIdSource != null)
				_tmp.FeeCodeItemIdSource = MakeCopyOf(this.FeeCodeItemIdSource) as FeeCodeItem;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCodeSemActvityIdSource != null)
				_tmp.EdCodeSemActvityIdSource = MakeCopyOf(this.EdCodeSemActvityIdSource) as EdCodeSemActvity;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			if (this.FeeCodeTypeIdSource != null)
				_tmp.FeeCodeTypeIdSource = MakeCopyOf(this.FeeCodeTypeIdSource) as FeeCodeType;
			if (this.FeeFacultyItemIdSource != null)
				_tmp.FeeFacultyItemIdSource = MakeCopyOf(this.FeeFacultyItemIdSource) as FeeFacultyItem;
			if (this.GsCodeCurrencyIdSource != null)
				_tmp.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource) as GsCodeCurrency;
			if (this.SeFormIdSource != null)
				_tmp.SeFormIdSource = MakeCopyOf(this.SeFormIdSource) as SeForm;
			if (this.SeUserIdSource != null)
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource) as SeUser;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._feeStudVoucherItemFeeStudFeeItemId != null)
				_tmp.FeeStudVoucherItemCollection = (TList<FeeStudVoucherItem>) MakeCopyOf(this.FeeStudVoucherItemCollection); 
			if (this._accomStudReqFeeStudFeeItemId != null)
				_tmp.AccomStudReqCollection = (TList<AccomStudReq>) MakeCopyOf(this.AccomStudReqCollection); 
			if (this._feeStudCoursesItemFeeStudFeeItemId != null)
				_tmp.FeeStudCoursesItemCollection = (TList<FeeStudCoursesItem>) MakeCopyOf(this.FeeStudCoursesItemCollection); 
			if (this._spoStudFeeItemFeeStudFeeItemId != null)
				_tmp.SpoStudFeeItemCollection = (TList<SpoStudFeeItem>) MakeCopyOf(this.SpoStudFeeItemCollection); 
			if (this._pgThesisStudExtendFeeStudFeeItemId != null)
				_tmp.PgThesisStudExtendCollection = (TList<PgThesisStudExtend>) MakeCopyOf(this.PgThesisStudExtendCollection); 
			if (this._edStudCourseGrdChngFeeStudFeeItemId != null)
				_tmp.EdStudCourseGrdChngCollection = (TList<EdStudCourseGrdChng>) MakeCopyOf(this.EdStudCourseGrdChngCollection); 
			if (this._feeInvoiceItemFeeStudFeeItemId != null)
				_tmp.FeeInvoiceItemCollection = (TList<FeeInvoiceItem>) MakeCopyOf(this.FeeInvoiceItemCollection); 
			if (this._feeStudDiscFeeItemFeeStudFeeItemId != null)
				_tmp.FeeStudDiscFeeItemCollection = (TList<FeeStudDiscFeeItem>) MakeCopyOf(this.FeeStudDiscFeeItemCollection); 
			if (this._edPrintReqFeeStudFeeItemId != null)
				_tmp.EdPrintReqCollection = (TList<EdPrintReq>) MakeCopyOf(this.EdPrintReqCollection); 
			if (this._feeItemTrnsBlncFeeStudFeeItemId != null)
				_tmp.FeeItemTrnsBlncCollection = (TList<FeeItemTrnsBlnc>) MakeCopyOf(this.FeeItemTrnsBlncCollection); 
			if (this._feeRefndStdDetFeeStudFeeItemId != null)
				_tmp.FeeRefndStdDetCollection = (TList<FeeRefndStdDet>) MakeCopyOf(this.FeeRefndStdDetCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			FeeStudFeeItemEntityData _tmp = new FeeStudFeeItemEntityData();
						
			_tmp.FeeStudFeeItemId = this.FeeStudFeeItemId;
			_tmp.OriginalFeeStudFeeItemId = this.OriginalFeeStudFeeItemId;
			
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.FeeCodeTypeId = this.FeeCodeTypeId;
			_tmp.FeeFacultyItemId = this.FeeFacultyItemId;
			_tmp.FeeItemValue = this.FeeItemValue;
			_tmp.RemainAmount = this.RemainAmount;
			_tmp.GsCodeCurrencyId = this.GsCodeCurrencyId;
			_tmp.DiscAmount = this.DiscAmount;
			_tmp.SpoAmount = this.SpoAmount;
			_tmp.FeeCodeItemId = this.FeeCodeItemId;
			_tmp.EdCodeSemActvityId = this.EdCodeSemActvityId;
			_tmp.TransId = this.TransId;
			_tmp.ItemDesc = this.ItemDesc;
			_tmp.Notes = this.Notes;
			_tmp.DueDate = this.DueDate;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.LoadDate = this.LoadDate;
			_tmp.SeFormId = this.SeFormId;
			
			#region Source Parent Composite Entities
			if (this.FeeCodeItemIdSource != null && existingCopies.Contains(this.FeeCodeItemIdSource))
				_tmp.FeeCodeItemIdSource = existingCopies[this.FeeCodeItemIdSource] as FeeCodeItem;
			else
				_tmp.FeeCodeItemIdSource = MakeCopyOf(this.FeeCodeItemIdSource, existingCopies) as FeeCodeItem;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemActvityIdSource != null && existingCopies.Contains(this.EdCodeSemActvityIdSource))
				_tmp.EdCodeSemActvityIdSource = existingCopies[this.EdCodeSemActvityIdSource] as EdCodeSemActvity;
			else
				_tmp.EdCodeSemActvityIdSource = MakeCopyOf(this.EdCodeSemActvityIdSource, existingCopies) as EdCodeSemActvity;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.FeeCodeTypeIdSource != null && existingCopies.Contains(this.FeeCodeTypeIdSource))
				_tmp.FeeCodeTypeIdSource = existingCopies[this.FeeCodeTypeIdSource] as FeeCodeType;
			else
				_tmp.FeeCodeTypeIdSource = MakeCopyOf(this.FeeCodeTypeIdSource, existingCopies) as FeeCodeType;
			if (this.FeeFacultyItemIdSource != null && existingCopies.Contains(this.FeeFacultyItemIdSource))
				_tmp.FeeFacultyItemIdSource = existingCopies[this.FeeFacultyItemIdSource] as FeeFacultyItem;
			else
				_tmp.FeeFacultyItemIdSource = MakeCopyOf(this.FeeFacultyItemIdSource, existingCopies) as FeeFacultyItem;
			if (this.GsCodeCurrencyIdSource != null && existingCopies.Contains(this.GsCodeCurrencyIdSource))
				_tmp.GsCodeCurrencyIdSource = existingCopies[this.GsCodeCurrencyIdSource] as GsCodeCurrency;
			else
				_tmp.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource, existingCopies) as GsCodeCurrency;
			if (this.SeFormIdSource != null && existingCopies.Contains(this.SeFormIdSource))
				_tmp.SeFormIdSource = existingCopies[this.SeFormIdSource] as SeForm;
			else
				_tmp.SeFormIdSource = MakeCopyOf(this.SeFormIdSource, existingCopies) as SeForm;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				_tmp.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.FeeStudVoucherItemCollection = (TList<FeeStudVoucherItem>) MakeCopyOf(this.FeeStudVoucherItemCollection, existingCopies); 
			_tmp.AccomStudReqCollection = (TList<AccomStudReq>) MakeCopyOf(this.AccomStudReqCollection, existingCopies); 
			_tmp.FeeStudCoursesItemCollection = (TList<FeeStudCoursesItem>) MakeCopyOf(this.FeeStudCoursesItemCollection, existingCopies); 
			_tmp.SpoStudFeeItemCollection = (TList<SpoStudFeeItem>) MakeCopyOf(this.SpoStudFeeItemCollection, existingCopies); 
			_tmp.PgThesisStudExtendCollection = (TList<PgThesisStudExtend>) MakeCopyOf(this.PgThesisStudExtendCollection, existingCopies); 
			_tmp.EdStudCourseGrdChngCollection = (TList<EdStudCourseGrdChng>) MakeCopyOf(this.EdStudCourseGrdChngCollection, existingCopies); 
			_tmp.FeeInvoiceItemCollection = (TList<FeeInvoiceItem>) MakeCopyOf(this.FeeInvoiceItemCollection, existingCopies); 
			_tmp.FeeStudDiscFeeItemCollection = (TList<FeeStudDiscFeeItem>) MakeCopyOf(this.FeeStudDiscFeeItemCollection, existingCopies); 
			_tmp.EdPrintReqCollection = (TList<EdPrintReq>) MakeCopyOf(this.EdPrintReqCollection, existingCopies); 
			_tmp.FeeItemTrnsBlncCollection = (TList<FeeItemTrnsBlnc>) MakeCopyOf(this.FeeItemTrnsBlncCollection, existingCopies); 
			_tmp.FeeRefndStdDetCollection = (TList<FeeRefndStdDet>) MakeCopyOf(this.FeeRefndStdDetCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeStudFeeItemColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(FeeStudFeeItemColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeStudFeeItemColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(FeeStudFeeItemColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeStudFeeItemColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(FeeStudFeeItemColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				FeeStudFeeItemEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new FeeStudFeeItemEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeStudFeeItemColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(FeeStudFeeItemColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				FeeStudFeeItemEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new FeeStudFeeItemEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region FeeStudFeeItemEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="FeeStudFeeItem"/> object.
	/// </remarks>
	public class FeeStudFeeItemEventArgs : System.EventArgs
	{
		private FeeStudFeeItemColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the FeeStudFeeItemEventArgs class.
		///</summary>
		public FeeStudFeeItemEventArgs(FeeStudFeeItemColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the FeeStudFeeItemEventArgs class.
		///</summary>
		public FeeStudFeeItemEventArgs(FeeStudFeeItemColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The FeeStudFeeItemColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="FeeStudFeeItemColumn" />
		public FeeStudFeeItemColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all FeeStudFeeItem related events.
	///</summary>
	public delegate void FeeStudFeeItemEventHandler(object sender, FeeStudFeeItemEventArgs e);
	
	#region FeeStudFeeItemComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class FeeStudFeeItemComparer : System.Collections.Generic.IComparer<FeeStudFeeItem>
	{
		FeeStudFeeItemColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:FeeStudFeeItemComparer"/> class.
        /// </summary>
		public FeeStudFeeItemComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:FeeStudFeeItemComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public FeeStudFeeItemComparer(FeeStudFeeItemColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="FeeStudFeeItem"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="FeeStudFeeItem"/> to compare.</param>
        /// <param name="b">The second <c>FeeStudFeeItem</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(FeeStudFeeItem a, FeeStudFeeItem b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(FeeStudFeeItem entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(FeeStudFeeItem a, FeeStudFeeItem b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public FeeStudFeeItemColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region FeeStudFeeItemKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="FeeStudFeeItem"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class FeeStudFeeItemKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the FeeStudFeeItemKey class.
		/// </summary>
		public FeeStudFeeItemKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeStudFeeItemKey class.
		/// </summary>
		public FeeStudFeeItemKey(FeeStudFeeItemBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.FeeStudFeeItemId = entity.FeeStudFeeItemId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeStudFeeItemKey class.
		/// </summary>
		public FeeStudFeeItemKey(System.Decimal _feeStudFeeItemId)
		{
			#region Init Properties

			this.FeeStudFeeItemId = _feeStudFeeItemId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private FeeStudFeeItemBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public FeeStudFeeItemBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the FeeStudFeeItemId property
		private System.Decimal _feeStudFeeItemId;
		
		/// <summary>
		/// Gets or sets the FeeStudFeeItemId property.
		/// </summary>
		public System.Decimal FeeStudFeeItemId
		{
			get { return _feeStudFeeItemId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.FeeStudFeeItemId = value;
				
				_feeStudFeeItemId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				FeeStudFeeItemId = ( values["FeeStudFeeItemId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["FeeStudFeeItemId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("FeeStudFeeItemId", FeeStudFeeItemId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("FeeStudFeeItemId: {0}{1}",
								FeeStudFeeItemId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region FeeStudFeeItemColumn Enum
	
	/// <summary>
	/// Enumerate the FeeStudFeeItem columns.
	/// </summary>
	[Serializable]
	public enum FeeStudFeeItemColumn : int
	{
		/// <summary>
		/// FeeStudFeeItemId : بنود المصروفات على  طالب
		/// </summary>
		[EnumTextValue("FEE_STUD_FEE_ITEM_ID")]
		[ColumnEnum("FEE_STUD_FEE_ITEM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		FeeStudFeeItemId = 1,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 2,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 3,
		/// <summary>
		/// EdCodeSemesterId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeSemesterId = 4,
		/// <summary>
		/// EdStudId : 
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudId = 5,
		/// <summary>
		/// FeeCodeTypeId : 
		/// </summary>
		[EnumTextValue("FEE_CODE_TYPE_ID")]
		[ColumnEnum("FEE_CODE_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		FeeCodeTypeId = 6,
		/// <summary>
		/// FeeFacultyItemId : 
		/// </summary>
		[EnumTextValue("FEE_FACULTY_ITEM_ID")]
		[ColumnEnum("FEE_FACULTY_ITEM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeeFacultyItemId = 7,
		/// <summary>
		/// FeeItemValue : القيمة الفعلية للبند
		/// </summary>
		[EnumTextValue("FEE_ITEM_VALUE")]
		[ColumnEnum("FEE_ITEM_VALUE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		FeeItemValue = 8,
		/// <summary>
		/// RemainAmount : remain on student only
		/// </summary>
		[EnumTextValue("REMAIN_AMOUNT")]
		[ColumnEnum("REMAIN_AMOUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		RemainAmount = 9,
		/// <summary>
		/// GsCodeCurrencyId : قيمة التخفيض
		/// </summary>
		[EnumTextValue("GS_CODE_CURRENCY_ID")]
		[ColumnEnum("GS_CODE_CURRENCY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsCodeCurrencyId = 10,
		/// <summary>
		/// DiscAmount : قيمة الكفالة
		/// </summary>
		[EnumTextValue("DISC_AMOUNT")]
		[ColumnEnum("DISC_AMOUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DiscAmount = 11,
		/// <summary>
		/// SpoAmount : KU NEW
		/// </summary>
		[EnumTextValue("SPO_AMOUNT")]
		[ColumnEnum("SPO_AMOUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SpoAmount = 12,
		/// <summary>
		/// FeeCodeItemId : NULL:Downpayment  Add 2 Balance
		/// </summary>
		[EnumTextValue("FEE_CODE_ITEM_ID")]
		[ColumnEnum("FEE_CODE_ITEM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		FeeCodeItemId = 13,
		/// <summary>
		/// EdCodeSemActvityId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEM_ACTVITY_ID")]
		[ColumnEnum("ED_CODE_SEM_ACTVITY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeSemActvityId = 14,
		/// <summary>
		/// TransId : 
		/// </summary>
		[EnumTextValue("TRANS_ID")]
		[ColumnEnum("TRANS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TransId = 15,
		/// <summary>
		/// ItemDesc : 
		/// </summary>
		[EnumTextValue("ITEM_DESC")]
		[ColumnEnum("ITEM_DESC", typeof(System.String), System.Data.DbType.String, false, false, true)]
		ItemDesc = 16,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Notes = 17,
		/// <summary>
		/// DueDate : 
		/// </summary>
		[EnumTextValue("DUE_DATE")]
		[ColumnEnum("DUE_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DueDate = 18,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 19,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 20,
		/// <summary>
		/// LoadDate : 
		/// </summary>
		[EnumTextValue("LOAD_DATE")]
		[ColumnEnum("LOAD_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LoadDate = 21,
		/// <summary>
		/// SeFormId : 
		/// </summary>
		[EnumTextValue("SE_FORM_ID")]
		[ColumnEnum("SE_FORM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeFormId = 22
	}//End enum

	#endregion FeeStudFeeItemColumn Enum

} // end namespace
