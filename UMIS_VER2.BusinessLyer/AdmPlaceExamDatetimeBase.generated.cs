
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AdmPlaceExamDatetime.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ADM_PLACE_EXAM_DATETIME' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AdmPlaceExamDatetimeBase : EntityBase, IAdmPlaceExamDatetime, IEntityId<AdmPlaceExamDatetimeKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AdmPlaceExamDatetimeEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AdmPlaceExamDatetimeEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AdmPlaceExamDatetimeEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AdmPlaceExamDatetime> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmPlaceExamDatetimeEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmPlaceExamDatetimeEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AdmPlaceExamDatetimeBase"/> instance.
		///</summary>
		public AdmPlaceExamDatetimeBase()
		{
			this.entityData = new AdmPlaceExamDatetimeEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AdmPlaceExamDatetimeBase"/> instance.
		///</summary>
		///<param name="_admPlaceExamDatetimeId"></param>
		///<param name="_admCdePlacementExamId"></param>
		///<param name="_examDate"></param>
		///<param name="_examTimeFrom"></param>
		///<param name="_examTimeTo"></param>
		///<param name="_admOpenAcadSemesterId"></param>
		///<param name="_location">XXXX</param>
		///<param name="_isOptionalExam"></param>
		///<param name="_qualPercentageFromPriv"></param>
		///<param name="_qualPercentageToPriv"></param>
		///<param name="_relatedToProgram">XXX</param>
		///<param name="_entMainId"></param>
		///<param name="_qualPercentageToPub"></param>
		///<param name="_qualPercentageFromPub"></param>
		///<param name="_scBuildingId">XXX</param>
		///<param name="_scHallId">XXX</param>
		///<param name="_approveFlg"></param>
		///<param name="_gsCodeGenderId"></param>
		///<param name="_admCdeAppTypeId">CSS</param>
		///<param name="_awkafFlg">CSS in case ADM_CDE_APP_TYPE_ID =موظف</param>
		///<param name="_svSrvyHdrId">Dynamic question Template</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public AdmPlaceExamDatetimeBase(System.Decimal _admPlaceExamDatetimeId, System.Decimal _admCdePlacementExamId, 
			System.DateTime _examDate, System.DateTime _examTimeFrom, System.DateTime _examTimeTo, 
			System.Decimal? _admOpenAcadSemesterId, System.String _location, System.Decimal? _isOptionalExam, 
			System.Decimal? _qualPercentageFromPriv, System.Decimal? _qualPercentageToPriv, 
			System.Decimal? _relatedToProgram, System.Decimal? _entMainId, System.Decimal? _qualPercentageToPub, 
			System.Decimal? _qualPercentageFromPub, System.Decimal? _scBuildingId, System.Decimal? _scHallId, 
			System.Boolean? _approveFlg, System.Decimal? _gsCodeGenderId, System.Decimal? _admCdeAppTypeId, 
			System.Boolean? _awkafFlg, System.Int32? _svSrvyHdrId, System.Decimal? _seUserId, 
			System.DateTime? _lastDate)
		{
			this.entityData = new AdmPlaceExamDatetimeEntityData();
			this.backupData = null;

			this.AdmPlaceExamDatetimeId = _admPlaceExamDatetimeId;
			this.AdmCdePlacementExamId = _admCdePlacementExamId;
			this.ExamDate = _examDate;
			this.ExamTimeFrom = _examTimeFrom;
			this.ExamTimeTo = _examTimeTo;
			this.AdmOpenAcadSemesterId = _admOpenAcadSemesterId;
			this.Location = _location;
			this.IsOptionalExam = _isOptionalExam;
			this.QualPercentageFromPriv = _qualPercentageFromPriv;
			this.QualPercentageToPriv = _qualPercentageToPriv;
			this.RelatedToProgram = _relatedToProgram;
			this.EntMainId = _entMainId;
			this.QualPercentageToPub = _qualPercentageToPub;
			this.QualPercentageFromPub = _qualPercentageFromPub;
			this.ScBuildingId = _scBuildingId;
			this.ScHallId = _scHallId;
			this.ApproveFlg = _approveFlg;
			this.GsCodeGenderId = _gsCodeGenderId;
			this.AdmCdeAppTypeId = _admCdeAppTypeId;
			this.AwkafFlg = _awkafFlg;
			this.SvSrvyHdrId = _svSrvyHdrId;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AdmPlaceExamDatetime"/> instance.
		///</summary>
		///<param name="_admPlaceExamDatetimeId"></param>
		///<param name="_admCdePlacementExamId"></param>
		///<param name="_examDate"></param>
		///<param name="_examTimeFrom"></param>
		///<param name="_examTimeTo"></param>
		///<param name="_admOpenAcadSemesterId"></param>
		///<param name="_location">XXXX</param>
		///<param name="_isOptionalExam"></param>
		///<param name="_qualPercentageFromPriv"></param>
		///<param name="_qualPercentageToPriv"></param>
		///<param name="_relatedToProgram">XXX</param>
		///<param name="_entMainId"></param>
		///<param name="_qualPercentageToPub"></param>
		///<param name="_qualPercentageFromPub"></param>
		///<param name="_scBuildingId">XXX</param>
		///<param name="_scHallId">XXX</param>
		///<param name="_approveFlg"></param>
		///<param name="_gsCodeGenderId"></param>
		///<param name="_admCdeAppTypeId">CSS</param>
		///<param name="_awkafFlg">CSS in case ADM_CDE_APP_TYPE_ID =موظف</param>
		///<param name="_svSrvyHdrId">Dynamic question Template</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static AdmPlaceExamDatetime CreateAdmPlaceExamDatetime(System.Decimal _admPlaceExamDatetimeId, System.Decimal _admCdePlacementExamId, 
			System.DateTime _examDate, System.DateTime _examTimeFrom, System.DateTime _examTimeTo, 
			System.Decimal? _admOpenAcadSemesterId, System.String _location, System.Decimal? _isOptionalExam, 
			System.Decimal? _qualPercentageFromPriv, System.Decimal? _qualPercentageToPriv, 
			System.Decimal? _relatedToProgram, System.Decimal? _entMainId, System.Decimal? _qualPercentageToPub, 
			System.Decimal? _qualPercentageFromPub, System.Decimal? _scBuildingId, System.Decimal? _scHallId, 
			System.Boolean? _approveFlg, System.Decimal? _gsCodeGenderId, System.Decimal? _admCdeAppTypeId, 
			System.Boolean? _awkafFlg, System.Int32? _svSrvyHdrId, System.Decimal? _seUserId, 
			System.DateTime? _lastDate)
		{
			AdmPlaceExamDatetime newAdmPlaceExamDatetime = new AdmPlaceExamDatetime();
			newAdmPlaceExamDatetime.AdmPlaceExamDatetimeId = _admPlaceExamDatetimeId;
			newAdmPlaceExamDatetime.AdmCdePlacementExamId = _admCdePlacementExamId;
			newAdmPlaceExamDatetime.ExamDate = _examDate;
			newAdmPlaceExamDatetime.ExamTimeFrom = _examTimeFrom;
			newAdmPlaceExamDatetime.ExamTimeTo = _examTimeTo;
			newAdmPlaceExamDatetime.AdmOpenAcadSemesterId = _admOpenAcadSemesterId;
			newAdmPlaceExamDatetime.Location = _location;
			newAdmPlaceExamDatetime.IsOptionalExam = _isOptionalExam;
			newAdmPlaceExamDatetime.QualPercentageFromPriv = _qualPercentageFromPriv;
			newAdmPlaceExamDatetime.QualPercentageToPriv = _qualPercentageToPriv;
			newAdmPlaceExamDatetime.RelatedToProgram = _relatedToProgram;
			newAdmPlaceExamDatetime.EntMainId = _entMainId;
			newAdmPlaceExamDatetime.QualPercentageToPub = _qualPercentageToPub;
			newAdmPlaceExamDatetime.QualPercentageFromPub = _qualPercentageFromPub;
			newAdmPlaceExamDatetime.ScBuildingId = _scBuildingId;
			newAdmPlaceExamDatetime.ScHallId = _scHallId;
			newAdmPlaceExamDatetime.ApproveFlg = _approveFlg;
			newAdmPlaceExamDatetime.GsCodeGenderId = _gsCodeGenderId;
			newAdmPlaceExamDatetime.AdmCdeAppTypeId = _admCdeAppTypeId;
			newAdmPlaceExamDatetime.AwkafFlg = _awkafFlg;
			newAdmPlaceExamDatetime.SvSrvyHdrId = _svSrvyHdrId;
			newAdmPlaceExamDatetime.SeUserId = _seUserId;
			newAdmPlaceExamDatetime.LastDate = _lastDate;
			return newAdmPlaceExamDatetime;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AdmPlaceExamDatetimeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal AdmPlaceExamDatetimeId
		{
			get
			{
				return this.entityData.AdmPlaceExamDatetimeId; 
			}
			
			set
			{
				if (this.entityData.AdmPlaceExamDatetimeId == value)
					return;
					
				OnColumnChanging(AdmPlaceExamDatetimeColumn.AdmPlaceExamDatetimeId, this.entityData.AdmPlaceExamDatetimeId);
				this.entityData.AdmPlaceExamDatetimeId = value;
				this.EntityId.AdmPlaceExamDatetimeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPlaceExamDatetimeColumn.AdmPlaceExamDatetimeId, this.entityData.AdmPlaceExamDatetimeId);
				OnPropertyChanged("AdmPlaceExamDatetimeId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ADM_PLACE_EXAM_DATETIME_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ADM_PLACE_EXAM_DATETIME_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalAdmPlaceExamDatetimeId
		{
			get { return this.entityData.OriginalAdmPlaceExamDatetimeId; }
			set { this.entityData.OriginalAdmPlaceExamDatetimeId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the AdmCdePlacementExamId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AdmCdePlacementExamId
		{
			get
			{
				return this.entityData.AdmCdePlacementExamId; 
			}
			
			set
			{
				if (this.entityData.AdmCdePlacementExamId == value)
					return;
					
				OnColumnChanging(AdmPlaceExamDatetimeColumn.AdmCdePlacementExamId, this.entityData.AdmCdePlacementExamId);
				this.entityData.AdmCdePlacementExamId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPlaceExamDatetimeColumn.AdmCdePlacementExamId, this.entityData.AdmCdePlacementExamId);
				OnPropertyChanged("AdmCdePlacementExamId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExamDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ExamDate
		{
			get
			{
				return this.entityData.ExamDate; 
			}
			
			set
			{
				if (this.entityData.ExamDate == value)
					return;
					
				OnColumnChanging(AdmPlaceExamDatetimeColumn.ExamDate, this.entityData.ExamDate);
				this.entityData.ExamDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPlaceExamDatetimeColumn.ExamDate, this.entityData.ExamDate);
				OnPropertyChanged("ExamDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExamTimeFrom property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ExamTimeFrom
		{
			get
			{
				return this.entityData.ExamTimeFrom; 
			}
			
			set
			{
				if (this.entityData.ExamTimeFrom == value)
					return;
					
				OnColumnChanging(AdmPlaceExamDatetimeColumn.ExamTimeFrom, this.entityData.ExamTimeFrom);
				this.entityData.ExamTimeFrom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPlaceExamDatetimeColumn.ExamTimeFrom, this.entityData.ExamTimeFrom);
				OnPropertyChanged("ExamTimeFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExamTimeTo property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ExamTimeTo
		{
			get
			{
				return this.entityData.ExamTimeTo; 
			}
			
			set
			{
				if (this.entityData.ExamTimeTo == value)
					return;
					
				OnColumnChanging(AdmPlaceExamDatetimeColumn.ExamTimeTo, this.entityData.ExamTimeTo);
				this.entityData.ExamTimeTo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPlaceExamDatetimeColumn.ExamTimeTo, this.entityData.ExamTimeTo);
				OnPropertyChanged("ExamTimeTo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmOpenAcadSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmOpenAcadSemesterIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmOpenAcadSemesterId
		{
			get
			{
				return this.entityData.AdmOpenAcadSemesterId; 
			}
			
			set
			{
				if (this.entityData.AdmOpenAcadSemesterId == value)
					return;
					
				OnColumnChanging(AdmPlaceExamDatetimeColumn.AdmOpenAcadSemesterId, this.entityData.AdmOpenAcadSemesterId);
				this.entityData.AdmOpenAcadSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPlaceExamDatetimeColumn.AdmOpenAcadSemesterId, this.entityData.AdmOpenAcadSemesterId);
				OnPropertyChanged("AdmOpenAcadSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Location property. 
		///		XXXX
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"XXXX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String Location
		{
			get
			{
				return this.entityData.Location; 
			}
			
			set
			{
				if (this.entityData.Location == value)
					return;
					
				OnColumnChanging(AdmPlaceExamDatetimeColumn.Location, this.entityData.Location);
				this.entityData.Location = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPlaceExamDatetimeColumn.Location, this.entityData.Location);
				OnPropertyChanged("Location");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsOptionalExam property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsIsOptionalExamNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? IsOptionalExam
		{
			get
			{
				return this.entityData.IsOptionalExam; 
			}
			
			set
			{
				if (this.entityData.IsOptionalExam == value)
					return;
					
				OnColumnChanging(AdmPlaceExamDatetimeColumn.IsOptionalExam, this.entityData.IsOptionalExam);
				this.entityData.IsOptionalExam = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPlaceExamDatetimeColumn.IsOptionalExam, this.entityData.IsOptionalExam);
				OnPropertyChanged("IsOptionalExam");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QualPercentageFromPriv property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsQualPercentageFromPrivNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? QualPercentageFromPriv
		{
			get
			{
				return this.entityData.QualPercentageFromPriv; 
			}
			
			set
			{
				if (this.entityData.QualPercentageFromPriv == value)
					return;
					
				OnColumnChanging(AdmPlaceExamDatetimeColumn.QualPercentageFromPriv, this.entityData.QualPercentageFromPriv);
				this.entityData.QualPercentageFromPriv = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPlaceExamDatetimeColumn.QualPercentageFromPriv, this.entityData.QualPercentageFromPriv);
				OnPropertyChanged("QualPercentageFromPriv");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QualPercentageToPriv property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsQualPercentageToPrivNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? QualPercentageToPriv
		{
			get
			{
				return this.entityData.QualPercentageToPriv; 
			}
			
			set
			{
				if (this.entityData.QualPercentageToPriv == value)
					return;
					
				OnColumnChanging(AdmPlaceExamDatetimeColumn.QualPercentageToPriv, this.entityData.QualPercentageToPriv);
				this.entityData.QualPercentageToPriv = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPlaceExamDatetimeColumn.QualPercentageToPriv, this.entityData.QualPercentageToPriv);
				OnPropertyChanged("QualPercentageToPriv");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RelatedToProgram property. 
		///		XXX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRelatedToProgramNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XXX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RelatedToProgram
		{
			get
			{
				return this.entityData.RelatedToProgram; 
			}
			
			set
			{
				if (this.entityData.RelatedToProgram == value)
					return;
					
				OnColumnChanging(AdmPlaceExamDatetimeColumn.RelatedToProgram, this.entityData.RelatedToProgram);
				this.entityData.RelatedToProgram = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPlaceExamDatetimeColumn.RelatedToProgram, this.entityData.RelatedToProgram);
				OnPropertyChanged("RelatedToProgram");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntMainId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntMainIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntMainId
		{
			get
			{
				return this.entityData.EntMainId; 
			}
			
			set
			{
				if (this.entityData.EntMainId == value)
					return;
					
				OnColumnChanging(AdmPlaceExamDatetimeColumn.EntMainId, this.entityData.EntMainId);
				this.entityData.EntMainId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPlaceExamDatetimeColumn.EntMainId, this.entityData.EntMainId);
				OnPropertyChanged("EntMainId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QualPercentageToPub property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsQualPercentageToPubNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? QualPercentageToPub
		{
			get
			{
				return this.entityData.QualPercentageToPub; 
			}
			
			set
			{
				if (this.entityData.QualPercentageToPub == value)
					return;
					
				OnColumnChanging(AdmPlaceExamDatetimeColumn.QualPercentageToPub, this.entityData.QualPercentageToPub);
				this.entityData.QualPercentageToPub = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPlaceExamDatetimeColumn.QualPercentageToPub, this.entityData.QualPercentageToPub);
				OnPropertyChanged("QualPercentageToPub");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QualPercentageFromPub property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsQualPercentageFromPubNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? QualPercentageFromPub
		{
			get
			{
				return this.entityData.QualPercentageFromPub; 
			}
			
			set
			{
				if (this.entityData.QualPercentageFromPub == value)
					return;
					
				OnColumnChanging(AdmPlaceExamDatetimeColumn.QualPercentageFromPub, this.entityData.QualPercentageFromPub);
				this.entityData.QualPercentageFromPub = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPlaceExamDatetimeColumn.QualPercentageFromPub, this.entityData.QualPercentageFromPub);
				OnPropertyChanged("QualPercentageFromPub");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScBuildingId property. 
		///		XXX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScBuildingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XXX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScBuildingId
		{
			get
			{
				return this.entityData.ScBuildingId; 
			}
			
			set
			{
				if (this.entityData.ScBuildingId == value)
					return;
					
				OnColumnChanging(AdmPlaceExamDatetimeColumn.ScBuildingId, this.entityData.ScBuildingId);
				this.entityData.ScBuildingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPlaceExamDatetimeColumn.ScBuildingId, this.entityData.ScBuildingId);
				OnPropertyChanged("ScBuildingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScHallId property. 
		///		XXX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScHallIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XXX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScHallId
		{
			get
			{
				return this.entityData.ScHallId; 
			}
			
			set
			{
				if (this.entityData.ScHallId == value)
					return;
					
				OnColumnChanging(AdmPlaceExamDatetimeColumn.ScHallId, this.entityData.ScHallId);
				this.entityData.ScHallId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPlaceExamDatetimeColumn.ScHallId, this.entityData.ScHallId);
				OnPropertyChanged("ScHallId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApproveFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsApproveFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ApproveFlg
		{
			get
			{
				return this.entityData.ApproveFlg; 
			}
			
			set
			{
				if (this.entityData.ApproveFlg == value)
					return;
					
				OnColumnChanging(AdmPlaceExamDatetimeColumn.ApproveFlg, this.entityData.ApproveFlg);
				this.entityData.ApproveFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPlaceExamDatetimeColumn.ApproveFlg, this.entityData.ApproveFlg);
				OnPropertyChanged("ApproveFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeGenderId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCodeGenderIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCodeGenderId
		{
			get
			{
				return this.entityData.GsCodeGenderId; 
			}
			
			set
			{
				if (this.entityData.GsCodeGenderId == value)
					return;
					
				OnColumnChanging(AdmPlaceExamDatetimeColumn.GsCodeGenderId, this.entityData.GsCodeGenderId);
				this.entityData.GsCodeGenderId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPlaceExamDatetimeColumn.GsCodeGenderId, this.entityData.GsCodeGenderId);
				OnPropertyChanged("GsCodeGenderId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmCdeAppTypeId property. 
		///		CSS
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmCdeAppTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"CSS"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmCdeAppTypeId
		{
			get
			{
				return this.entityData.AdmCdeAppTypeId; 
			}
			
			set
			{
				if (this.entityData.AdmCdeAppTypeId == value)
					return;
					
				OnColumnChanging(AdmPlaceExamDatetimeColumn.AdmCdeAppTypeId, this.entityData.AdmCdeAppTypeId);
				this.entityData.AdmCdeAppTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPlaceExamDatetimeColumn.AdmCdeAppTypeId, this.entityData.AdmCdeAppTypeId);
				OnPropertyChanged("AdmCdeAppTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AwkafFlg property. 
		///		CSS in case ADM_CDE_APP_TYPE_ID =موظف
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsAwkafFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"CSS in case ADM_CDE_APP_TYPE_ID =موظف"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? AwkafFlg
		{
			get
			{
				return this.entityData.AwkafFlg; 
			}
			
			set
			{
				if (this.entityData.AwkafFlg == value)
					return;
					
				OnColumnChanging(AdmPlaceExamDatetimeColumn.AwkafFlg, this.entityData.AwkafFlg);
				this.entityData.AwkafFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPlaceExamDatetimeColumn.AwkafFlg, this.entityData.AwkafFlg);
				OnPropertyChanged("AwkafFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SvSrvyHdrId property. 
		///		Dynamic question Template
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSvSrvyHdrIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Dynamic question Template"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SvSrvyHdrId
		{
			get
			{
				return this.entityData.SvSrvyHdrId; 
			}
			
			set
			{
				if (this.entityData.SvSrvyHdrId == value)
					return;
					
				OnColumnChanging(AdmPlaceExamDatetimeColumn.SvSrvyHdrId, this.entityData.SvSrvyHdrId);
				this.entityData.SvSrvyHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPlaceExamDatetimeColumn.SvSrvyHdrId, this.entityData.SvSrvyHdrId);
				OnPropertyChanged("SvSrvyHdrId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(AdmPlaceExamDatetimeColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPlaceExamDatetimeColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(AdmPlaceExamDatetimeColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPlaceExamDatetimeColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdeAppType"/>.
		/// </summary>
		/// <value>The source AdmCdeAppType for AdmCdeAppTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmCdeAppType AdmCdeAppTypeIdSource
      	{
            get { return entityData.AdmCdeAppTypeIdSource; }
            set { entityData.AdmCdeAppTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdePlacementExam"/>.
		/// </summary>
		/// <value>The source AdmCdePlacementExam for AdmCdePlacementExamId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmCdePlacementExam AdmCdePlacementExamIdSource
      	{
            get { return entityData.AdmCdePlacementExamIdSource; }
            set { entityData.AdmCdePlacementExamIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdmOpenAcadSemester"/>.
		/// </summary>
		/// <value>The source AdmOpenAcadSemester for AdmOpenAcadSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmOpenAcadSemester AdmOpenAcadSemesterIdSource
      	{
            get { return entityData.AdmOpenAcadSemesterIdSource; }
            set { entityData.AdmOpenAcadSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return entityData.EntMainIdSource; }
            set { entityData.EntMainIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeGender"/>.
		/// </summary>
		/// <value>The source GsCodeGender for GsCodeGenderId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeGender GsCodeGenderIdSource
      	{
            get { return entityData.GsCodeGenderIdSource; }
            set { entityData.GsCodeGenderIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScBuilding"/>.
		/// </summary>
		/// <value>The source ScBuilding for ScBuildingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScBuilding ScBuildingIdSource
      	{
            get { return entityData.ScBuildingIdSource; }
            set { entityData.ScBuildingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScHall"/>.
		/// </summary>
		/// <value>The source ScHall for ScHallId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScHall ScHallIdSource
      	{
            get { return entityData.ScHallIdSource; }
            set { entityData.ScHallIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SvSrvyHdr"/>.
		/// </summary>
		/// <value>The source SvSrvyHdr for SvSrvyHdrId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SvSrvyHdr SvSrvyHdrIdSource
      	{
            get { return entityData.SvSrvyHdrIdSource; }
            set { entityData.SvSrvyHdrIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of AdmPlaceExamLoc objects
		///	which are related to this object through the relation FK_ADM_PLACE_EXAM_LOC_ADM_PLACE_EXAM_DATETIME
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmPlaceExamLoc> AdmPlaceExamLocCollection
		{
			get { return entityData.AdmPlaceExamLocCollection; }
			set { entityData.AdmPlaceExamLocCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmAppPlacementExam objects
		///	which are related to this object through the relation FK_ADM_APP_PLACEMENT_EXAM_ADM_PLACE_EXAM_DATETIME
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppPlacementExam> AdmAppPlacementExamCollection
		{
			get { return entityData.AdmAppPlacementExamCollection; }
			set { entityData.AdmAppPlacementExamCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Location", "Location", 250));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ADM_PLACE_EXAM_DATETIME"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ADM_PLACE_EXAM_DATETIME_ID", "ADM_CDE_PLACEMENT_EXAM_ID", "EXAM_DATE", "EXAM_TIME_FROM", "EXAM_TIME_TO", "ADM_OPEN_ACAD_SEMESTER_ID", "LOCATION", "IS_OPTIONAL_EXAM", "QUAL_PERCENTAGE_FROM_PRIV", "QUAL_PERCENTAGE_TO_PRIV", "RELATED_To_PROGRAM", "ENT_MAIN_ID", "QUAL_PERCENTAGE_TO_PUB", "QUAL_PERCENTAGE_FROM_PUB", "SC_BUILDING_ID", "SC_HALL_ID", "APPROVE_FLG", "GS_CODE_GENDER_ID", "ADM_CDE_APP_TYPE_ID", "AWKAF_FLG", "SV_SRVY_HDR_ID", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AdmPlaceExamDatetimeEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AdmPlaceExamDatetime) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AdmPlaceExamDatetime>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AdmPlaceExamDatetime);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AdmPlaceExamDatetime Entity 
		///</summary>
		protected virtual AdmPlaceExamDatetime Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AdmPlaceExamDatetime copy = new AdmPlaceExamDatetime();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AdmPlaceExamDatetimeId = this.AdmPlaceExamDatetimeId;
					copy.OriginalAdmPlaceExamDatetimeId = this.OriginalAdmPlaceExamDatetimeId;
				copy.AdmCdePlacementExamId = this.AdmCdePlacementExamId;
				copy.ExamDate = this.ExamDate;
				copy.ExamTimeFrom = this.ExamTimeFrom;
				copy.ExamTimeTo = this.ExamTimeTo;
				copy.AdmOpenAcadSemesterId = this.AdmOpenAcadSemesterId;
				copy.Location = this.Location;
				copy.IsOptionalExam = this.IsOptionalExam;
				copy.QualPercentageFromPriv = this.QualPercentageFromPriv;
				copy.QualPercentageToPriv = this.QualPercentageToPriv;
				copy.RelatedToProgram = this.RelatedToProgram;
				copy.EntMainId = this.EntMainId;
				copy.QualPercentageToPub = this.QualPercentageToPub;
				copy.QualPercentageFromPub = this.QualPercentageFromPub;
				copy.ScBuildingId = this.ScBuildingId;
				copy.ScHallId = this.ScHallId;
				copy.ApproveFlg = this.ApproveFlg;
				copy.GsCodeGenderId = this.GsCodeGenderId;
				copy.AdmCdeAppTypeId = this.AdmCdeAppTypeId;
				copy.AwkafFlg = this.AwkafFlg;
				copy.SvSrvyHdrId = this.SvSrvyHdrId;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.AdmCdeAppTypeIdSource != null && existingCopies.Contains(this.AdmCdeAppTypeIdSource))
				copy.AdmCdeAppTypeIdSource = existingCopies[this.AdmCdeAppTypeIdSource] as AdmCdeAppType;
			else
				copy.AdmCdeAppTypeIdSource = MakeCopyOf(this.AdmCdeAppTypeIdSource, existingCopies) as AdmCdeAppType;
			if (this.AdmCdePlacementExamIdSource != null && existingCopies.Contains(this.AdmCdePlacementExamIdSource))
				copy.AdmCdePlacementExamIdSource = existingCopies[this.AdmCdePlacementExamIdSource] as AdmCdePlacementExam;
			else
				copy.AdmCdePlacementExamIdSource = MakeCopyOf(this.AdmCdePlacementExamIdSource, existingCopies) as AdmCdePlacementExam;
			if (this.AdmOpenAcadSemesterIdSource != null && existingCopies.Contains(this.AdmOpenAcadSemesterIdSource))
				copy.AdmOpenAcadSemesterIdSource = existingCopies[this.AdmOpenAcadSemesterIdSource] as AdmOpenAcadSemester;
			else
				copy.AdmOpenAcadSemesterIdSource = MakeCopyOf(this.AdmOpenAcadSemesterIdSource, existingCopies) as AdmOpenAcadSemester;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				copy.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				copy.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.GsCodeGenderIdSource != null && existingCopies.Contains(this.GsCodeGenderIdSource))
				copy.GsCodeGenderIdSource = existingCopies[this.GsCodeGenderIdSource] as GsCodeGender;
			else
				copy.GsCodeGenderIdSource = MakeCopyOf(this.GsCodeGenderIdSource, existingCopies) as GsCodeGender;
			if (this.ScBuildingIdSource != null && existingCopies.Contains(this.ScBuildingIdSource))
				copy.ScBuildingIdSource = existingCopies[this.ScBuildingIdSource] as ScBuilding;
			else
				copy.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource, existingCopies) as ScBuilding;
			if (this.ScHallIdSource != null && existingCopies.Contains(this.ScHallIdSource))
				copy.ScHallIdSource = existingCopies[this.ScHallIdSource] as ScHall;
			else
				copy.ScHallIdSource = MakeCopyOf(this.ScHallIdSource, existingCopies) as ScHall;
			if (this.SvSrvyHdrIdSource != null && existingCopies.Contains(this.SvSrvyHdrIdSource))
				copy.SvSrvyHdrIdSource = existingCopies[this.SvSrvyHdrIdSource] as SvSrvyHdr;
			else
				copy.SvSrvyHdrIdSource = MakeCopyOf(this.SvSrvyHdrIdSource, existingCopies) as SvSrvyHdr;
		
			//deep copy nested objects
			copy.AdmPlaceExamLocCollection = (TList<AdmPlaceExamLoc>) MakeCopyOf(this.AdmPlaceExamLocCollection, existingCopies); 
			copy.AdmAppPlacementExamCollection = (TList<AdmAppPlacementExam>) MakeCopyOf(this.AdmAppPlacementExamCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AdmPlaceExamDatetime Entity 
		///</summary>
		public virtual AdmPlaceExamDatetime Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AdmPlaceExamDatetime Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AdmPlaceExamDatetime DeepCopy()
		{
			return EntityHelper.Clone<AdmPlaceExamDatetime>(this as AdmPlaceExamDatetime);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AdmPlaceExamDatetimeEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AdmPlaceExamDatetimeEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AdmPlaceExamDatetimeEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AdmPlaceExamDatetimeColumn column)
		{
			switch(column)
			{
					case AdmPlaceExamDatetimeColumn.AdmPlaceExamDatetimeId:
					return entityData.AdmPlaceExamDatetimeId != _originalData.AdmPlaceExamDatetimeId;
					case AdmPlaceExamDatetimeColumn.AdmCdePlacementExamId:
					return entityData.AdmCdePlacementExamId != _originalData.AdmCdePlacementExamId;
					case AdmPlaceExamDatetimeColumn.ExamDate:
					return entityData.ExamDate != _originalData.ExamDate;
					case AdmPlaceExamDatetimeColumn.ExamTimeFrom:
					return entityData.ExamTimeFrom != _originalData.ExamTimeFrom;
					case AdmPlaceExamDatetimeColumn.ExamTimeTo:
					return entityData.ExamTimeTo != _originalData.ExamTimeTo;
					case AdmPlaceExamDatetimeColumn.AdmOpenAcadSemesterId:
					return entityData.AdmOpenAcadSemesterId != _originalData.AdmOpenAcadSemesterId;
					case AdmPlaceExamDatetimeColumn.Location:
					return entityData.Location != _originalData.Location;
					case AdmPlaceExamDatetimeColumn.IsOptionalExam:
					return entityData.IsOptionalExam != _originalData.IsOptionalExam;
					case AdmPlaceExamDatetimeColumn.QualPercentageFromPriv:
					return entityData.QualPercentageFromPriv != _originalData.QualPercentageFromPriv;
					case AdmPlaceExamDatetimeColumn.QualPercentageToPriv:
					return entityData.QualPercentageToPriv != _originalData.QualPercentageToPriv;
					case AdmPlaceExamDatetimeColumn.RelatedToProgram:
					return entityData.RelatedToProgram != _originalData.RelatedToProgram;
					case AdmPlaceExamDatetimeColumn.EntMainId:
					return entityData.EntMainId != _originalData.EntMainId;
					case AdmPlaceExamDatetimeColumn.QualPercentageToPub:
					return entityData.QualPercentageToPub != _originalData.QualPercentageToPub;
					case AdmPlaceExamDatetimeColumn.QualPercentageFromPub:
					return entityData.QualPercentageFromPub != _originalData.QualPercentageFromPub;
					case AdmPlaceExamDatetimeColumn.ScBuildingId:
					return entityData.ScBuildingId != _originalData.ScBuildingId;
					case AdmPlaceExamDatetimeColumn.ScHallId:
					return entityData.ScHallId != _originalData.ScHallId;
					case AdmPlaceExamDatetimeColumn.ApproveFlg:
					return entityData.ApproveFlg != _originalData.ApproveFlg;
					case AdmPlaceExamDatetimeColumn.GsCodeGenderId:
					return entityData.GsCodeGenderId != _originalData.GsCodeGenderId;
					case AdmPlaceExamDatetimeColumn.AdmCdeAppTypeId:
					return entityData.AdmCdeAppTypeId != _originalData.AdmCdeAppTypeId;
					case AdmPlaceExamDatetimeColumn.AwkafFlg:
					return entityData.AwkafFlg != _originalData.AwkafFlg;
					case AdmPlaceExamDatetimeColumn.SvSrvyHdrId:
					return entityData.SvSrvyHdrId != _originalData.SvSrvyHdrId;
					case AdmPlaceExamDatetimeColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case AdmPlaceExamDatetimeColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AdmPlaceExamDatetimeColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AdmPlaceExamDatetimeId != _originalData.AdmPlaceExamDatetimeId;
			result = result || entityData.AdmCdePlacementExamId != _originalData.AdmCdePlacementExamId;
			result = result || entityData.ExamDate != _originalData.ExamDate;
			result = result || entityData.ExamTimeFrom != _originalData.ExamTimeFrom;
			result = result || entityData.ExamTimeTo != _originalData.ExamTimeTo;
			result = result || entityData.AdmOpenAcadSemesterId != _originalData.AdmOpenAcadSemesterId;
			result = result || entityData.Location != _originalData.Location;
			result = result || entityData.IsOptionalExam != _originalData.IsOptionalExam;
			result = result || entityData.QualPercentageFromPriv != _originalData.QualPercentageFromPriv;
			result = result || entityData.QualPercentageToPriv != _originalData.QualPercentageToPriv;
			result = result || entityData.RelatedToProgram != _originalData.RelatedToProgram;
			result = result || entityData.EntMainId != _originalData.EntMainId;
			result = result || entityData.QualPercentageToPub != _originalData.QualPercentageToPub;
			result = result || entityData.QualPercentageFromPub != _originalData.QualPercentageFromPub;
			result = result || entityData.ScBuildingId != _originalData.ScBuildingId;
			result = result || entityData.ScHallId != _originalData.ScHallId;
			result = result || entityData.ApproveFlg != _originalData.ApproveFlg;
			result = result || entityData.GsCodeGenderId != _originalData.GsCodeGenderId;
			result = result || entityData.AdmCdeAppTypeId != _originalData.AdmCdeAppTypeId;
			result = result || entityData.AwkafFlg != _originalData.AwkafFlg;
			result = result || entityData.SvSrvyHdrId != _originalData.SvSrvyHdrId;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a AdmPlaceExamDatetime Entity with the original data.
		///</summary>
		public AdmPlaceExamDatetime GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAdmPlaceExamDatetime(
				_originalData.AdmPlaceExamDatetimeId,
				_originalData.AdmCdePlacementExamId,
				_originalData.ExamDate,
				_originalData.ExamTimeFrom,
				_originalData.ExamTimeTo,
				_originalData.AdmOpenAcadSemesterId,
				_originalData.Location,
				_originalData.IsOptionalExam,
				_originalData.QualPercentageFromPriv,
				_originalData.QualPercentageToPriv,
				_originalData.RelatedToProgram,
				_originalData.EntMainId,
				_originalData.QualPercentageToPub,
				_originalData.QualPercentageFromPub,
				_originalData.ScBuildingId,
				_originalData.ScHallId,
				_originalData.ApproveFlg,
				_originalData.GsCodeGenderId,
				_originalData.AdmCdeAppTypeId,
				_originalData.AwkafFlg,
				_originalData.SvSrvyHdrId,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (AdmPlaceExamDatetime)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AdmPlaceExamDatetimeBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AdmPlaceExamDatetimeBase)
				return ValueEquals(this, (AdmPlaceExamDatetimeBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AdmPlaceExamDatetimeBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AdmPlaceExamDatetimeId.GetHashCode() ^ 
					this.AdmCdePlacementExamId.GetHashCode() ^ 
					this.ExamDate.GetHashCode() ^ 
					this.ExamTimeFrom.GetHashCode() ^ 
					this.ExamTimeTo.GetHashCode() ^ 
					((this.AdmOpenAcadSemesterId == null) ? string.Empty : this.AdmOpenAcadSemesterId.ToString()).GetHashCode() ^ 
					((this.Location == null) ? string.Empty : this.Location.ToString()).GetHashCode() ^ 
					((this.IsOptionalExam == null) ? string.Empty : this.IsOptionalExam.ToString()).GetHashCode() ^ 
					((this.QualPercentageFromPriv == null) ? string.Empty : this.QualPercentageFromPriv.ToString()).GetHashCode() ^ 
					((this.QualPercentageToPriv == null) ? string.Empty : this.QualPercentageToPriv.ToString()).GetHashCode() ^ 
					((this.RelatedToProgram == null) ? string.Empty : this.RelatedToProgram.ToString()).GetHashCode() ^ 
					((this.EntMainId == null) ? string.Empty : this.EntMainId.ToString()).GetHashCode() ^ 
					((this.QualPercentageToPub == null) ? string.Empty : this.QualPercentageToPub.ToString()).GetHashCode() ^ 
					((this.QualPercentageFromPub == null) ? string.Empty : this.QualPercentageFromPub.ToString()).GetHashCode() ^ 
					((this.ScBuildingId == null) ? string.Empty : this.ScBuildingId.ToString()).GetHashCode() ^ 
					((this.ScHallId == null) ? string.Empty : this.ScHallId.ToString()).GetHashCode() ^ 
					((this.ApproveFlg == null) ? string.Empty : this.ApproveFlg.ToString()).GetHashCode() ^ 
					((this.GsCodeGenderId == null) ? string.Empty : this.GsCodeGenderId.ToString()).GetHashCode() ^ 
					((this.AdmCdeAppTypeId == null) ? string.Empty : this.AdmCdeAppTypeId.ToString()).GetHashCode() ^ 
					((this.AwkafFlg == null) ? string.Empty : this.AwkafFlg.ToString()).GetHashCode() ^ 
					((this.SvSrvyHdrId == null) ? string.Empty : this.SvSrvyHdrId.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AdmPlaceExamDatetimeBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AdmPlaceExamDatetimeBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AdmPlaceExamDatetimeBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AdmPlaceExamDatetimeBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AdmPlaceExamDatetimeBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AdmPlaceExamDatetimeBase Object1, AdmPlaceExamDatetimeBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AdmPlaceExamDatetimeId != Object2.AdmPlaceExamDatetimeId)
				equal = false;
			if (Object1.AdmCdePlacementExamId != Object2.AdmCdePlacementExamId)
				equal = false;
			if (Object1.ExamDate != Object2.ExamDate)
				equal = false;
			if (Object1.ExamTimeFrom != Object2.ExamTimeFrom)
				equal = false;
			if (Object1.ExamTimeTo != Object2.ExamTimeTo)
				equal = false;
			if ( Object1.AdmOpenAcadSemesterId != null && Object2.AdmOpenAcadSemesterId != null )
			{
				if (Object1.AdmOpenAcadSemesterId != Object2.AdmOpenAcadSemesterId)
					equal = false;
			}
			else if (Object1.AdmOpenAcadSemesterId == null ^ Object2.AdmOpenAcadSemesterId == null )
			{
				equal = false;
			}
			if ( Object1.Location != null && Object2.Location != null )
			{
				if (Object1.Location != Object2.Location)
					equal = false;
			}
			else if (Object1.Location == null ^ Object2.Location == null )
			{
				equal = false;
			}
			if ( Object1.IsOptionalExam != null && Object2.IsOptionalExam != null )
			{
				if (Object1.IsOptionalExam != Object2.IsOptionalExam)
					equal = false;
			}
			else if (Object1.IsOptionalExam == null ^ Object2.IsOptionalExam == null )
			{
				equal = false;
			}
			if ( Object1.QualPercentageFromPriv != null && Object2.QualPercentageFromPriv != null )
			{
				if (Object1.QualPercentageFromPriv != Object2.QualPercentageFromPriv)
					equal = false;
			}
			else if (Object1.QualPercentageFromPriv == null ^ Object2.QualPercentageFromPriv == null )
			{
				equal = false;
			}
			if ( Object1.QualPercentageToPriv != null && Object2.QualPercentageToPriv != null )
			{
				if (Object1.QualPercentageToPriv != Object2.QualPercentageToPriv)
					equal = false;
			}
			else if (Object1.QualPercentageToPriv == null ^ Object2.QualPercentageToPriv == null )
			{
				equal = false;
			}
			if ( Object1.RelatedToProgram != null && Object2.RelatedToProgram != null )
			{
				if (Object1.RelatedToProgram != Object2.RelatedToProgram)
					equal = false;
			}
			else if (Object1.RelatedToProgram == null ^ Object2.RelatedToProgram == null )
			{
				equal = false;
			}
			if ( Object1.EntMainId != null && Object2.EntMainId != null )
			{
				if (Object1.EntMainId != Object2.EntMainId)
					equal = false;
			}
			else if (Object1.EntMainId == null ^ Object2.EntMainId == null )
			{
				equal = false;
			}
			if ( Object1.QualPercentageToPub != null && Object2.QualPercentageToPub != null )
			{
				if (Object1.QualPercentageToPub != Object2.QualPercentageToPub)
					equal = false;
			}
			else if (Object1.QualPercentageToPub == null ^ Object2.QualPercentageToPub == null )
			{
				equal = false;
			}
			if ( Object1.QualPercentageFromPub != null && Object2.QualPercentageFromPub != null )
			{
				if (Object1.QualPercentageFromPub != Object2.QualPercentageFromPub)
					equal = false;
			}
			else if (Object1.QualPercentageFromPub == null ^ Object2.QualPercentageFromPub == null )
			{
				equal = false;
			}
			if ( Object1.ScBuildingId != null && Object2.ScBuildingId != null )
			{
				if (Object1.ScBuildingId != Object2.ScBuildingId)
					equal = false;
			}
			else if (Object1.ScBuildingId == null ^ Object2.ScBuildingId == null )
			{
				equal = false;
			}
			if ( Object1.ScHallId != null && Object2.ScHallId != null )
			{
				if (Object1.ScHallId != Object2.ScHallId)
					equal = false;
			}
			else if (Object1.ScHallId == null ^ Object2.ScHallId == null )
			{
				equal = false;
			}
			if ( Object1.ApproveFlg != null && Object2.ApproveFlg != null )
			{
				if (Object1.ApproveFlg != Object2.ApproveFlg)
					equal = false;
			}
			else if (Object1.ApproveFlg == null ^ Object2.ApproveFlg == null )
			{
				equal = false;
			}
			if ( Object1.GsCodeGenderId != null && Object2.GsCodeGenderId != null )
			{
				if (Object1.GsCodeGenderId != Object2.GsCodeGenderId)
					equal = false;
			}
			else if (Object1.GsCodeGenderId == null ^ Object2.GsCodeGenderId == null )
			{
				equal = false;
			}
			if ( Object1.AdmCdeAppTypeId != null && Object2.AdmCdeAppTypeId != null )
			{
				if (Object1.AdmCdeAppTypeId != Object2.AdmCdeAppTypeId)
					equal = false;
			}
			else if (Object1.AdmCdeAppTypeId == null ^ Object2.AdmCdeAppTypeId == null )
			{
				equal = false;
			}
			if ( Object1.AwkafFlg != null && Object2.AwkafFlg != null )
			{
				if (Object1.AwkafFlg != Object2.AwkafFlg)
					equal = false;
			}
			else if (Object1.AwkafFlg == null ^ Object2.AwkafFlg == null )
			{
				equal = false;
			}
			if ( Object1.SvSrvyHdrId != null && Object2.SvSrvyHdrId != null )
			{
				if (Object1.SvSrvyHdrId != Object2.SvSrvyHdrId)
					equal = false;
			}
			else if (Object1.SvSrvyHdrId == null ^ Object2.SvSrvyHdrId == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AdmPlaceExamDatetimeBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AdmPlaceExamDatetimeComparer GetComparer()
        {
            return new AdmPlaceExamDatetimeComparer();
        }
        */

        // Comparer delegates back to AdmPlaceExamDatetime
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AdmPlaceExamDatetime rhs, AdmPlaceExamDatetimeColumn which)
        {
            switch (which)
            {
            	
            	
            	case AdmPlaceExamDatetimeColumn.AdmPlaceExamDatetimeId:
            		return this.AdmPlaceExamDatetimeId.CompareTo(rhs.AdmPlaceExamDatetimeId);
            		
            		                 
            	
            	
            	case AdmPlaceExamDatetimeColumn.AdmCdePlacementExamId:
            		return this.AdmCdePlacementExamId.CompareTo(rhs.AdmCdePlacementExamId);
            		
            		                 
            	
            	
            	case AdmPlaceExamDatetimeColumn.ExamDate:
            		return this.ExamDate.CompareTo(rhs.ExamDate);
            		
            		                 
            	
            	
            	case AdmPlaceExamDatetimeColumn.ExamTimeFrom:
            		return this.ExamTimeFrom.CompareTo(rhs.ExamTimeFrom);
            		
            		                 
            	
            	
            	case AdmPlaceExamDatetimeColumn.ExamTimeTo:
            		return this.ExamTimeTo.CompareTo(rhs.ExamTimeTo);
            		
            		                 
            	
            	
            	case AdmPlaceExamDatetimeColumn.AdmOpenAcadSemesterId:
            		return this.AdmOpenAcadSemesterId.Value.CompareTo(rhs.AdmOpenAcadSemesterId.Value);
            		
            		                 
            	
            	
            	case AdmPlaceExamDatetimeColumn.Location:
            		return this.Location.CompareTo(rhs.Location);
            		
            		                 
            	
            	
            	case AdmPlaceExamDatetimeColumn.IsOptionalExam:
            		return this.IsOptionalExam.Value.CompareTo(rhs.IsOptionalExam.Value);
            		
            		                 
            	
            	
            	case AdmPlaceExamDatetimeColumn.QualPercentageFromPriv:
            		return this.QualPercentageFromPriv.Value.CompareTo(rhs.QualPercentageFromPriv.Value);
            		
            		                 
            	
            	
            	case AdmPlaceExamDatetimeColumn.QualPercentageToPriv:
            		return this.QualPercentageToPriv.Value.CompareTo(rhs.QualPercentageToPriv.Value);
            		
            		                 
            	
            	
            	case AdmPlaceExamDatetimeColumn.RelatedToProgram:
            		return this.RelatedToProgram.Value.CompareTo(rhs.RelatedToProgram.Value);
            		
            		                 
            	
            	
            	case AdmPlaceExamDatetimeColumn.EntMainId:
            		return this.EntMainId.Value.CompareTo(rhs.EntMainId.Value);
            		
            		                 
            	
            	
            	case AdmPlaceExamDatetimeColumn.QualPercentageToPub:
            		return this.QualPercentageToPub.Value.CompareTo(rhs.QualPercentageToPub.Value);
            		
            		                 
            	
            	
            	case AdmPlaceExamDatetimeColumn.QualPercentageFromPub:
            		return this.QualPercentageFromPub.Value.CompareTo(rhs.QualPercentageFromPub.Value);
            		
            		                 
            	
            	
            	case AdmPlaceExamDatetimeColumn.ScBuildingId:
            		return this.ScBuildingId.Value.CompareTo(rhs.ScBuildingId.Value);
            		
            		                 
            	
            	
            	case AdmPlaceExamDatetimeColumn.ScHallId:
            		return this.ScHallId.Value.CompareTo(rhs.ScHallId.Value);
            		
            		                 
            	
            	
            	case AdmPlaceExamDatetimeColumn.ApproveFlg:
            		return this.ApproveFlg.Value.CompareTo(rhs.ApproveFlg.Value);
            		
            		                 
            	
            	
            	case AdmPlaceExamDatetimeColumn.GsCodeGenderId:
            		return this.GsCodeGenderId.Value.CompareTo(rhs.GsCodeGenderId.Value);
            		
            		                 
            	
            	
            	case AdmPlaceExamDatetimeColumn.AdmCdeAppTypeId:
            		return this.AdmCdeAppTypeId.Value.CompareTo(rhs.AdmCdeAppTypeId.Value);
            		
            		                 
            	
            	
            	case AdmPlaceExamDatetimeColumn.AwkafFlg:
            		return this.AwkafFlg.Value.CompareTo(rhs.AwkafFlg.Value);
            		
            		                 
            	
            	
            	case AdmPlaceExamDatetimeColumn.SvSrvyHdrId:
            		return this.SvSrvyHdrId.Value.CompareTo(rhs.SvSrvyHdrId.Value);
            		
            		                 
            	
            	
            	case AdmPlaceExamDatetimeColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case AdmPlaceExamDatetimeColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AdmPlaceExamDatetimeKey> Members
		
		// member variable for the EntityId property
		private AdmPlaceExamDatetimeKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AdmPlaceExamDatetimeKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AdmPlaceExamDatetimeKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AdmPlaceExamDatetime")
					.Append("|").Append( this.AdmPlaceExamDatetimeId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{24}{23}- AdmPlaceExamDatetimeId: {0}{23}- AdmCdePlacementExamId: {1}{23}- ExamDate: {2}{23}- ExamTimeFrom: {3}{23}- ExamTimeTo: {4}{23}- AdmOpenAcadSemesterId: {5}{23}- Location: {6}{23}- IsOptionalExam: {7}{23}- QualPercentageFromPriv: {8}{23}- QualPercentageToPriv: {9}{23}- RelatedToProgram: {10}{23}- EntMainId: {11}{23}- QualPercentageToPub: {12}{23}- QualPercentageFromPub: {13}{23}- ScBuildingId: {14}{23}- ScHallId: {15}{23}- ApproveFlg: {16}{23}- GsCodeGenderId: {17}{23}- AdmCdeAppTypeId: {18}{23}- AwkafFlg: {19}{23}- SvSrvyHdrId: {20}{23}- SeUserId: {21}{23}- LastDate: {22}{23}{25}", 
				this.AdmPlaceExamDatetimeId,
				this.AdmCdePlacementExamId,
				this.ExamDate,
				this.ExamTimeFrom,
				this.ExamTimeTo,
				(this.AdmOpenAcadSemesterId == null) ? string.Empty : this.AdmOpenAcadSemesterId.ToString(),
				(this.Location == null) ? string.Empty : this.Location.ToString(),
				(this.IsOptionalExam == null) ? string.Empty : this.IsOptionalExam.ToString(),
				(this.QualPercentageFromPriv == null) ? string.Empty : this.QualPercentageFromPriv.ToString(),
				(this.QualPercentageToPriv == null) ? string.Empty : this.QualPercentageToPriv.ToString(),
				(this.RelatedToProgram == null) ? string.Empty : this.RelatedToProgram.ToString(),
				(this.EntMainId == null) ? string.Empty : this.EntMainId.ToString(),
				(this.QualPercentageToPub == null) ? string.Empty : this.QualPercentageToPub.ToString(),
				(this.QualPercentageFromPub == null) ? string.Empty : this.QualPercentageFromPub.ToString(),
				(this.ScBuildingId == null) ? string.Empty : this.ScBuildingId.ToString(),
				(this.ScHallId == null) ? string.Empty : this.ScHallId.ToString(),
				(this.ApproveFlg == null) ? string.Empty : this.ApproveFlg.ToString(),
				(this.GsCodeGenderId == null) ? string.Empty : this.GsCodeGenderId.ToString(),
				(this.AdmCdeAppTypeId == null) ? string.Empty : this.AdmCdeAppTypeId.ToString(),
				(this.AwkafFlg == null) ? string.Empty : this.AwkafFlg.ToString(),
				(this.SvSrvyHdrId == null) ? string.Empty : this.SvSrvyHdrId.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ADM_PLACE_EXAM_DATETIME' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AdmPlaceExamDatetimeEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ADM_PLACE_EXAM_DATETIME_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ADM_PLACE_EXAM_DATETIME"</remarks>
		public System.Decimal AdmPlaceExamDatetimeId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalAdmPlaceExamDatetimeId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ADM_CDE_PLACEMENT_EXAM_ID : 
		/// </summary>
		public System.Decimal		  AdmCdePlacementExamId = 0.0m;
		
		/// <summary>
		/// EXAM_DATE : 
		/// </summary>
		public System.DateTime		  ExamDate = DateTime.MinValue;
		
		/// <summary>
		/// EXAM_TIME_FROM : 
		/// </summary>
		public System.DateTime		  ExamTimeFrom = DateTime.MinValue;
		
		/// <summary>
		/// EXAM_TIME_TO : 
		/// </summary>
		public System.DateTime		  ExamTimeTo = DateTime.MinValue;
		
		/// <summary>
		/// ADM_OPEN_ACAD_SEMESTER_ID : 
		/// </summary>
		public System.Decimal?		  AdmOpenAcadSemesterId = null;
		
		/// <summary>
		/// LOCATION : XXXX
		/// </summary>
		public System.String		  Location = null;
		
		/// <summary>
		/// IS_OPTIONAL_EXAM : 
		/// </summary>
		public System.Decimal?		  IsOptionalExam = null;
		
		/// <summary>
		/// QUAL_PERCENTAGE_FROM_PRIV : 
		/// </summary>
		public System.Decimal?		  QualPercentageFromPriv = null;
		
		/// <summary>
		/// QUAL_PERCENTAGE_TO_PRIV : 
		/// </summary>
		public System.Decimal?		  QualPercentageToPriv = null;
		
		/// <summary>
		/// RELATED_To_PROGRAM : XXX
		/// </summary>
		public System.Decimal?		  RelatedToProgram = null;
		
		/// <summary>
		/// ENT_MAIN_ID : 
		/// </summary>
		public System.Decimal?		  EntMainId = null;
		
		/// <summary>
		/// QUAL_PERCENTAGE_TO_PUB : 
		/// </summary>
		public System.Decimal?		  QualPercentageToPub = null;
		
		/// <summary>
		/// QUAL_PERCENTAGE_FROM_PUB : 
		/// </summary>
		public System.Decimal?		  QualPercentageFromPub = null;
		
		/// <summary>
		/// SC_BUILDING_ID : XXX
		/// </summary>
		public System.Decimal?		  ScBuildingId = null;
		
		/// <summary>
		/// SC_HALL_ID : XXX
		/// </summary>
		public System.Decimal?		  ScHallId = null;
		
		/// <summary>
		/// APPROVE_FLG : 
		/// </summary>
		public System.Boolean?		  ApproveFlg = null;
		
		/// <summary>
		/// GS_CODE_GENDER_ID : 
		/// </summary>
		public System.Decimal?		  GsCodeGenderId = null;
		
		/// <summary>
		/// ADM_CDE_APP_TYPE_ID : CSS
		/// </summary>
		public System.Decimal?		  AdmCdeAppTypeId = null;
		
		/// <summary>
		/// AWKAF_FLG : CSS in case ADM_CDE_APP_TYPE_ID =موظف
		/// </summary>
		public System.Boolean?		  AwkafFlg = null;
		
		/// <summary>
		/// SV_SRVY_HDR_ID : Dynamic question Template
		/// </summary>
		public System.Int32?		  SvSrvyHdrId = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdmCdeAppType _admCdeAppTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdeAppType"/>.
		/// </summary>
		/// <value>The source AdmCdeAppType for AdmCdeAppTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmCdeAppType AdmCdeAppTypeIdSource
      	{
            get { return this._admCdeAppTypeIdSource; }
            set { this._admCdeAppTypeIdSource = value; }
      	}
		private AdmCdePlacementExam _admCdePlacementExamIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdePlacementExam"/>.
		/// </summary>
		/// <value>The source AdmCdePlacementExam for AdmCdePlacementExamId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmCdePlacementExam AdmCdePlacementExamIdSource
      	{
            get { return this._admCdePlacementExamIdSource; }
            set { this._admCdePlacementExamIdSource = value; }
      	}
		private AdmOpenAcadSemester _admOpenAcadSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmOpenAcadSemester"/>.
		/// </summary>
		/// <value>The source AdmOpenAcadSemester for AdmOpenAcadSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmOpenAcadSemester AdmOpenAcadSemesterIdSource
      	{
            get { return this._admOpenAcadSemesterIdSource; }
            set { this._admOpenAcadSemesterIdSource = value; }
      	}
		private EntityMain _entMainIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return this._entMainIdSource; }
            set { this._entMainIdSource = value; }
      	}
		private GsCodeGender _gsCodeGenderIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeGender"/>.
		/// </summary>
		/// <value>The source GsCodeGender for GsCodeGenderId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeGender GsCodeGenderIdSource
      	{
            get { return this._gsCodeGenderIdSource; }
            set { this._gsCodeGenderIdSource = value; }
      	}
		private ScBuilding _scBuildingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScBuilding"/>.
		/// </summary>
		/// <value>The source ScBuilding for ScBuildingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScBuilding ScBuildingIdSource
      	{
            get { return this._scBuildingIdSource; }
            set { this._scBuildingIdSource = value; }
      	}
		private ScHall _scHallIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScHall"/>.
		/// </summary>
		/// <value>The source ScHall for ScHallId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScHall ScHallIdSource
      	{
            get { return this._scHallIdSource; }
            set { this._scHallIdSource = value; }
      	}
		private SvSrvyHdr _svSrvyHdrIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SvSrvyHdr"/>.
		/// </summary>
		/// <value>The source SvSrvyHdr for SvSrvyHdrId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SvSrvyHdr SvSrvyHdrIdSource
      	{
            get { return this._svSrvyHdrIdSource; }
            set { this._svSrvyHdrIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region AdmPlaceExamLocCollection
		
		private TList<AdmPlaceExamLoc> _admPlaceExamLocAdmPlaceExamDatetimeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admPlaceExamLocAdmPlaceExamDatetimeId
		/// </summary>
		
		public TList<AdmPlaceExamLoc> AdmPlaceExamLocCollection
		{
			get
			{
				if (_admPlaceExamLocAdmPlaceExamDatetimeId == null)
				{
				_admPlaceExamLocAdmPlaceExamDatetimeId = new TList<AdmPlaceExamLoc>();
				}
	
				return _admPlaceExamLocAdmPlaceExamDatetimeId;
			}
			set { _admPlaceExamLocAdmPlaceExamDatetimeId = value; }
		}
		
		#endregion

		#region AdmAppPlacementExamCollection
		
		private TList<AdmAppPlacementExam> _admAppPlacementExamAdmPlaceExamDatetimeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppPlacementExamAdmPlaceExamDatetimeId
		/// </summary>
		
		public TList<AdmAppPlacementExam> AdmAppPlacementExamCollection
		{
			get
			{
				if (_admAppPlacementExamAdmPlaceExamDatetimeId == null)
				{
				_admAppPlacementExamAdmPlaceExamDatetimeId = new TList<AdmAppPlacementExam>();
				}
	
				return _admAppPlacementExamAdmPlaceExamDatetimeId;
			}
			set { _admAppPlacementExamAdmPlaceExamDatetimeId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AdmPlaceExamDatetimeEntityData _tmp = new AdmPlaceExamDatetimeEntityData();
						
			_tmp.AdmPlaceExamDatetimeId = this.AdmPlaceExamDatetimeId;
			_tmp.OriginalAdmPlaceExamDatetimeId = this.OriginalAdmPlaceExamDatetimeId;
			
			_tmp.AdmCdePlacementExamId = this.AdmCdePlacementExamId;
			_tmp.ExamDate = this.ExamDate;
			_tmp.ExamTimeFrom = this.ExamTimeFrom;
			_tmp.ExamTimeTo = this.ExamTimeTo;
			_tmp.AdmOpenAcadSemesterId = this.AdmOpenAcadSemesterId;
			_tmp.Location = this.Location;
			_tmp.IsOptionalExam = this.IsOptionalExam;
			_tmp.QualPercentageFromPriv = this.QualPercentageFromPriv;
			_tmp.QualPercentageToPriv = this.QualPercentageToPriv;
			_tmp.RelatedToProgram = this.RelatedToProgram;
			_tmp.EntMainId = this.EntMainId;
			_tmp.QualPercentageToPub = this.QualPercentageToPub;
			_tmp.QualPercentageFromPub = this.QualPercentageFromPub;
			_tmp.ScBuildingId = this.ScBuildingId;
			_tmp.ScHallId = this.ScHallId;
			_tmp.ApproveFlg = this.ApproveFlg;
			_tmp.GsCodeGenderId = this.GsCodeGenderId;
			_tmp.AdmCdeAppTypeId = this.AdmCdeAppTypeId;
			_tmp.AwkafFlg = this.AwkafFlg;
			_tmp.SvSrvyHdrId = this.SvSrvyHdrId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.AdmCdeAppTypeIdSource != null)
				_tmp.AdmCdeAppTypeIdSource = MakeCopyOf(this.AdmCdeAppTypeIdSource) as AdmCdeAppType;
			if (this.AdmCdePlacementExamIdSource != null)
				_tmp.AdmCdePlacementExamIdSource = MakeCopyOf(this.AdmCdePlacementExamIdSource) as AdmCdePlacementExam;
			if (this.AdmOpenAcadSemesterIdSource != null)
				_tmp.AdmOpenAcadSemesterIdSource = MakeCopyOf(this.AdmOpenAcadSemesterIdSource) as AdmOpenAcadSemester;
			if (this.EntMainIdSource != null)
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource) as EntityMain;
			if (this.GsCodeGenderIdSource != null)
				_tmp.GsCodeGenderIdSource = MakeCopyOf(this.GsCodeGenderIdSource) as GsCodeGender;
			if (this.ScBuildingIdSource != null)
				_tmp.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource) as ScBuilding;
			if (this.ScHallIdSource != null)
				_tmp.ScHallIdSource = MakeCopyOf(this.ScHallIdSource) as ScHall;
			if (this.SvSrvyHdrIdSource != null)
				_tmp.SvSrvyHdrIdSource = MakeCopyOf(this.SvSrvyHdrIdSource) as SvSrvyHdr;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._admPlaceExamLocAdmPlaceExamDatetimeId != null)
				_tmp.AdmPlaceExamLocCollection = (TList<AdmPlaceExamLoc>) MakeCopyOf(this.AdmPlaceExamLocCollection); 
			if (this._admAppPlacementExamAdmPlaceExamDatetimeId != null)
				_tmp.AdmAppPlacementExamCollection = (TList<AdmAppPlacementExam>) MakeCopyOf(this.AdmAppPlacementExamCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AdmPlaceExamDatetimeEntityData _tmp = new AdmPlaceExamDatetimeEntityData();
						
			_tmp.AdmPlaceExamDatetimeId = this.AdmPlaceExamDatetimeId;
			_tmp.OriginalAdmPlaceExamDatetimeId = this.OriginalAdmPlaceExamDatetimeId;
			
			_tmp.AdmCdePlacementExamId = this.AdmCdePlacementExamId;
			_tmp.ExamDate = this.ExamDate;
			_tmp.ExamTimeFrom = this.ExamTimeFrom;
			_tmp.ExamTimeTo = this.ExamTimeTo;
			_tmp.AdmOpenAcadSemesterId = this.AdmOpenAcadSemesterId;
			_tmp.Location = this.Location;
			_tmp.IsOptionalExam = this.IsOptionalExam;
			_tmp.QualPercentageFromPriv = this.QualPercentageFromPriv;
			_tmp.QualPercentageToPriv = this.QualPercentageToPriv;
			_tmp.RelatedToProgram = this.RelatedToProgram;
			_tmp.EntMainId = this.EntMainId;
			_tmp.QualPercentageToPub = this.QualPercentageToPub;
			_tmp.QualPercentageFromPub = this.QualPercentageFromPub;
			_tmp.ScBuildingId = this.ScBuildingId;
			_tmp.ScHallId = this.ScHallId;
			_tmp.ApproveFlg = this.ApproveFlg;
			_tmp.GsCodeGenderId = this.GsCodeGenderId;
			_tmp.AdmCdeAppTypeId = this.AdmCdeAppTypeId;
			_tmp.AwkafFlg = this.AwkafFlg;
			_tmp.SvSrvyHdrId = this.SvSrvyHdrId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.AdmCdeAppTypeIdSource != null && existingCopies.Contains(this.AdmCdeAppTypeIdSource))
				_tmp.AdmCdeAppTypeIdSource = existingCopies[this.AdmCdeAppTypeIdSource] as AdmCdeAppType;
			else
				_tmp.AdmCdeAppTypeIdSource = MakeCopyOf(this.AdmCdeAppTypeIdSource, existingCopies) as AdmCdeAppType;
			if (this.AdmCdePlacementExamIdSource != null && existingCopies.Contains(this.AdmCdePlacementExamIdSource))
				_tmp.AdmCdePlacementExamIdSource = existingCopies[this.AdmCdePlacementExamIdSource] as AdmCdePlacementExam;
			else
				_tmp.AdmCdePlacementExamIdSource = MakeCopyOf(this.AdmCdePlacementExamIdSource, existingCopies) as AdmCdePlacementExam;
			if (this.AdmOpenAcadSemesterIdSource != null && existingCopies.Contains(this.AdmOpenAcadSemesterIdSource))
				_tmp.AdmOpenAcadSemesterIdSource = existingCopies[this.AdmOpenAcadSemesterIdSource] as AdmOpenAcadSemester;
			else
				_tmp.AdmOpenAcadSemesterIdSource = MakeCopyOf(this.AdmOpenAcadSemesterIdSource, existingCopies) as AdmOpenAcadSemester;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				_tmp.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.GsCodeGenderIdSource != null && existingCopies.Contains(this.GsCodeGenderIdSource))
				_tmp.GsCodeGenderIdSource = existingCopies[this.GsCodeGenderIdSource] as GsCodeGender;
			else
				_tmp.GsCodeGenderIdSource = MakeCopyOf(this.GsCodeGenderIdSource, existingCopies) as GsCodeGender;
			if (this.ScBuildingIdSource != null && existingCopies.Contains(this.ScBuildingIdSource))
				_tmp.ScBuildingIdSource = existingCopies[this.ScBuildingIdSource] as ScBuilding;
			else
				_tmp.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource, existingCopies) as ScBuilding;
			if (this.ScHallIdSource != null && existingCopies.Contains(this.ScHallIdSource))
				_tmp.ScHallIdSource = existingCopies[this.ScHallIdSource] as ScHall;
			else
				_tmp.ScHallIdSource = MakeCopyOf(this.ScHallIdSource, existingCopies) as ScHall;
			if (this.SvSrvyHdrIdSource != null && existingCopies.Contains(this.SvSrvyHdrIdSource))
				_tmp.SvSrvyHdrIdSource = existingCopies[this.SvSrvyHdrIdSource] as SvSrvyHdr;
			else
				_tmp.SvSrvyHdrIdSource = MakeCopyOf(this.SvSrvyHdrIdSource, existingCopies) as SvSrvyHdr;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.AdmPlaceExamLocCollection = (TList<AdmPlaceExamLoc>) MakeCopyOf(this.AdmPlaceExamLocCollection, existingCopies); 
			_tmp.AdmAppPlacementExamCollection = (TList<AdmAppPlacementExam>) MakeCopyOf(this.AdmAppPlacementExamCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmPlaceExamDatetimeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AdmPlaceExamDatetimeColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmPlaceExamDatetimeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AdmPlaceExamDatetimeColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmPlaceExamDatetimeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AdmPlaceExamDatetimeColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AdmPlaceExamDatetimeEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AdmPlaceExamDatetimeEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmPlaceExamDatetimeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AdmPlaceExamDatetimeColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AdmPlaceExamDatetimeEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AdmPlaceExamDatetimeEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AdmPlaceExamDatetimeEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AdmPlaceExamDatetime"/> object.
	/// </remarks>
	public class AdmPlaceExamDatetimeEventArgs : System.EventArgs
	{
		private AdmPlaceExamDatetimeColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AdmPlaceExamDatetimeEventArgs class.
		///</summary>
		public AdmPlaceExamDatetimeEventArgs(AdmPlaceExamDatetimeColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AdmPlaceExamDatetimeEventArgs class.
		///</summary>
		public AdmPlaceExamDatetimeEventArgs(AdmPlaceExamDatetimeColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AdmPlaceExamDatetimeColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AdmPlaceExamDatetimeColumn" />
		public AdmPlaceExamDatetimeColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AdmPlaceExamDatetime related events.
	///</summary>
	public delegate void AdmPlaceExamDatetimeEventHandler(object sender, AdmPlaceExamDatetimeEventArgs e);
	
	#region AdmPlaceExamDatetimeComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AdmPlaceExamDatetimeComparer : System.Collections.Generic.IComparer<AdmPlaceExamDatetime>
	{
		AdmPlaceExamDatetimeColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AdmPlaceExamDatetimeComparer"/> class.
        /// </summary>
		public AdmPlaceExamDatetimeComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AdmPlaceExamDatetimeComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AdmPlaceExamDatetimeComparer(AdmPlaceExamDatetimeColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AdmPlaceExamDatetime"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AdmPlaceExamDatetime"/> to compare.</param>
        /// <param name="b">The second <c>AdmPlaceExamDatetime</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AdmPlaceExamDatetime a, AdmPlaceExamDatetime b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AdmPlaceExamDatetime entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AdmPlaceExamDatetime a, AdmPlaceExamDatetime b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AdmPlaceExamDatetimeColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AdmPlaceExamDatetimeKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AdmPlaceExamDatetime"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AdmPlaceExamDatetimeKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AdmPlaceExamDatetimeKey class.
		/// </summary>
		public AdmPlaceExamDatetimeKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmPlaceExamDatetimeKey class.
		/// </summary>
		public AdmPlaceExamDatetimeKey(AdmPlaceExamDatetimeBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AdmPlaceExamDatetimeId = entity.AdmPlaceExamDatetimeId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmPlaceExamDatetimeKey class.
		/// </summary>
		public AdmPlaceExamDatetimeKey(System.Decimal _admPlaceExamDatetimeId)
		{
			#region Init Properties

			this.AdmPlaceExamDatetimeId = _admPlaceExamDatetimeId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AdmPlaceExamDatetimeBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AdmPlaceExamDatetimeBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AdmPlaceExamDatetimeId property
		private System.Decimal _admPlaceExamDatetimeId;
		
		/// <summary>
		/// Gets or sets the AdmPlaceExamDatetimeId property.
		/// </summary>
		public System.Decimal AdmPlaceExamDatetimeId
		{
			get { return _admPlaceExamDatetimeId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AdmPlaceExamDatetimeId = value;
				
				_admPlaceExamDatetimeId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AdmPlaceExamDatetimeId = ( values["AdmPlaceExamDatetimeId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["AdmPlaceExamDatetimeId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AdmPlaceExamDatetimeId", AdmPlaceExamDatetimeId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AdmPlaceExamDatetimeId: {0}{1}",
								AdmPlaceExamDatetimeId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AdmPlaceExamDatetimeColumn Enum
	
	/// <summary>
	/// Enumerate the AdmPlaceExamDatetime columns.
	/// </summary>
	[Serializable]
	public enum AdmPlaceExamDatetimeColumn : int
	{
		/// <summary>
		/// AdmPlaceExamDatetimeId : 
		/// </summary>
		[EnumTextValue("ADM_PLACE_EXAM_DATETIME_ID")]
		[ColumnEnum("ADM_PLACE_EXAM_DATETIME_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		AdmPlaceExamDatetimeId = 1,
		/// <summary>
		/// AdmCdePlacementExamId : 
		/// </summary>
		[EnumTextValue("ADM_CDE_PLACEMENT_EXAM_ID")]
		[ColumnEnum("ADM_CDE_PLACEMENT_EXAM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AdmCdePlacementExamId = 2,
		/// <summary>
		/// ExamDate : 
		/// </summary>
		[EnumTextValue("EXAM_DATE")]
		[ColumnEnum("EXAM_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, false)]
		ExamDate = 3,
		/// <summary>
		/// ExamTimeFrom : 
		/// </summary>
		[EnumTextValue("EXAM_TIME_FROM")]
		[ColumnEnum("EXAM_TIME_FROM", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ExamTimeFrom = 4,
		/// <summary>
		/// ExamTimeTo : 
		/// </summary>
		[EnumTextValue("EXAM_TIME_TO")]
		[ColumnEnum("EXAM_TIME_TO", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ExamTimeTo = 5,
		/// <summary>
		/// AdmOpenAcadSemesterId : 
		/// </summary>
		[EnumTextValue("ADM_OPEN_ACAD_SEMESTER_ID")]
		[ColumnEnum("ADM_OPEN_ACAD_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmOpenAcadSemesterId = 6,
		/// <summary>
		/// Location : XXXX
		/// </summary>
		[EnumTextValue("LOCATION")]
		[ColumnEnum("LOCATION", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		Location = 7,
		/// <summary>
		/// IsOptionalExam : 
		/// </summary>
		[EnumTextValue("IS_OPTIONAL_EXAM")]
		[ColumnEnum("IS_OPTIONAL_EXAM", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		IsOptionalExam = 8,
		/// <summary>
		/// QualPercentageFromPriv : 
		/// </summary>
		[EnumTextValue("QUAL_PERCENTAGE_FROM_PRIV")]
		[ColumnEnum("QUAL_PERCENTAGE_FROM_PRIV", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		QualPercentageFromPriv = 9,
		/// <summary>
		/// QualPercentageToPriv : 
		/// </summary>
		[EnumTextValue("QUAL_PERCENTAGE_TO_PRIV")]
		[ColumnEnum("QUAL_PERCENTAGE_TO_PRIV", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		QualPercentageToPriv = 10,
		/// <summary>
		/// RelatedToProgram : XXX
		/// </summary>
		[EnumTextValue("RELATED_To_PROGRAM")]
		[ColumnEnum("RELATED_To_PROGRAM", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RelatedToProgram = 11,
		/// <summary>
		/// EntMainId : 
		/// </summary>
		[EnumTextValue("ENT_MAIN_ID")]
		[ColumnEnum("ENT_MAIN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntMainId = 12,
		/// <summary>
		/// QualPercentageToPub : 
		/// </summary>
		[EnumTextValue("QUAL_PERCENTAGE_TO_PUB")]
		[ColumnEnum("QUAL_PERCENTAGE_TO_PUB", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		QualPercentageToPub = 13,
		/// <summary>
		/// QualPercentageFromPub : 
		/// </summary>
		[EnumTextValue("QUAL_PERCENTAGE_FROM_PUB")]
		[ColumnEnum("QUAL_PERCENTAGE_FROM_PUB", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		QualPercentageFromPub = 14,
		/// <summary>
		/// ScBuildingId : XXX
		/// </summary>
		[EnumTextValue("SC_BUILDING_ID")]
		[ColumnEnum("SC_BUILDING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScBuildingId = 15,
		/// <summary>
		/// ScHallId : XXX
		/// </summary>
		[EnumTextValue("SC_HALL_ID")]
		[ColumnEnum("SC_HALL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScHallId = 16,
		/// <summary>
		/// ApproveFlg : 
		/// </summary>
		[EnumTextValue("APPROVE_FLG")]
		[ColumnEnum("APPROVE_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ApproveFlg = 17,
		/// <summary>
		/// GsCodeGenderId : 
		/// </summary>
		[EnumTextValue("GS_CODE_GENDER_ID")]
		[ColumnEnum("GS_CODE_GENDER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCodeGenderId = 18,
		/// <summary>
		/// AdmCdeAppTypeId : CSS
		/// </summary>
		[EnumTextValue("ADM_CDE_APP_TYPE_ID")]
		[ColumnEnum("ADM_CDE_APP_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmCdeAppTypeId = 19,
		/// <summary>
		/// AwkafFlg : CSS in case ADM_CDE_APP_TYPE_ID =موظف
		/// </summary>
		[EnumTextValue("AWKAF_FLG")]
		[ColumnEnum("AWKAF_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		AwkafFlg = 20,
		/// <summary>
		/// SvSrvyHdrId : Dynamic question Template
		/// </summary>
		[EnumTextValue("SV_SRVY_HDR_ID")]
		[ColumnEnum("SV_SRVY_HDR_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SvSrvyHdrId = 21,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 22,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 23
	}//End enum

	#endregion AdmPlaceExamDatetimeColumn Enum

} // end namespace
