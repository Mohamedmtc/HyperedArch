
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdCodeQualSubject.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_CODE_QUAL_SUBJECT' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdCodeQualSubjectBase : EntityBase, IEdCodeQualSubject, IEntityId<EdCodeQualSubjectKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdCodeQualSubjectEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdCodeQualSubjectEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdCodeQualSubjectEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdCodeQualSubject> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdCodeQualSubjectEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdCodeQualSubjectEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdCodeQualSubjectBase"/> instance.
		///</summary>
		public EdCodeQualSubjectBase()
		{
			this.entityData = new EdCodeQualSubjectEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdCodeQualSubjectBase"/> instance.
		///</summary>
		///<param name="_edCodeQualSubjectId">مقررات مجموعة المؤهل</param>
		///<param name="_edCodeQualGroupId">SAT1-Sat2-OL-AS-AL</param>
		///<param name="_edCodeQualBranId">XXX</param>
		///<param name="_edCodeSubjectId"></param>
		///<param name="_gradeTypeId">درجات - تقديرات</param>
		///<param name="_minMark"></param>
		///<param name="_maxMark"></param>
		///<param name="_coefcntFlg">مؤشر له معامل</param>
		///<param name="_subjCoefcnt">معامل  المقررXXXCoefficient BAC</param>
		///<param name="_addTotalFlg">يضاف للمجموع</param>
		///<param name="_deductTotalFlg">يخصم للمجموع</param>
		public EdCodeQualSubjectBase(System.Decimal _edCodeQualSubjectId, System.Decimal? _edCodeQualGroupId, 
			System.Decimal? _edCodeQualBranId, System.Int32 _edCodeSubjectId, System.Int32? _gradeTypeId, 
			System.Decimal? _minMark, System.Decimal? _maxMark, System.Boolean? _coefcntFlg, 
			System.Decimal? _subjCoefcnt, System.Boolean? _addTotalFlg, System.Boolean? _deductTotalFlg)
		{
			this.entityData = new EdCodeQualSubjectEntityData();
			this.backupData = null;

			this.EdCodeQualSubjectId = _edCodeQualSubjectId;
			this.EdCodeQualGroupId = _edCodeQualGroupId;
			this.EdCodeQualBranId = _edCodeQualBranId;
			this.EdCodeSubjectId = _edCodeSubjectId;
			this.GradeTypeId = _gradeTypeId;
			this.MinMark = _minMark;
			this.MaxMark = _maxMark;
			this.CoefcntFlg = _coefcntFlg;
			this.SubjCoefcnt = _subjCoefcnt;
			this.AddTotalFlg = _addTotalFlg;
			this.DeductTotalFlg = _deductTotalFlg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdCodeQualSubject"/> instance.
		///</summary>
		///<param name="_edCodeQualSubjectId">مقررات مجموعة المؤهل</param>
		///<param name="_edCodeQualGroupId">SAT1-Sat2-OL-AS-AL</param>
		///<param name="_edCodeQualBranId">XXX</param>
		///<param name="_edCodeSubjectId"></param>
		///<param name="_gradeTypeId">درجات - تقديرات</param>
		///<param name="_minMark"></param>
		///<param name="_maxMark"></param>
		///<param name="_coefcntFlg">مؤشر له معامل</param>
		///<param name="_subjCoefcnt">معامل  المقررXXXCoefficient BAC</param>
		///<param name="_addTotalFlg">يضاف للمجموع</param>
		///<param name="_deductTotalFlg">يخصم للمجموع</param>
		public static EdCodeQualSubject CreateEdCodeQualSubject(System.Decimal _edCodeQualSubjectId, System.Decimal? _edCodeQualGroupId, 
			System.Decimal? _edCodeQualBranId, System.Int32 _edCodeSubjectId, System.Int32? _gradeTypeId, 
			System.Decimal? _minMark, System.Decimal? _maxMark, System.Boolean? _coefcntFlg, 
			System.Decimal? _subjCoefcnt, System.Boolean? _addTotalFlg, System.Boolean? _deductTotalFlg)
		{
			EdCodeQualSubject newEdCodeQualSubject = new EdCodeQualSubject();
			newEdCodeQualSubject.EdCodeQualSubjectId = _edCodeQualSubjectId;
			newEdCodeQualSubject.EdCodeQualGroupId = _edCodeQualGroupId;
			newEdCodeQualSubject.EdCodeQualBranId = _edCodeQualBranId;
			newEdCodeQualSubject.EdCodeSubjectId = _edCodeSubjectId;
			newEdCodeQualSubject.GradeTypeId = _gradeTypeId;
			newEdCodeQualSubject.MinMark = _minMark;
			newEdCodeQualSubject.MaxMark = _maxMark;
			newEdCodeQualSubject.CoefcntFlg = _coefcntFlg;
			newEdCodeQualSubject.SubjCoefcnt = _subjCoefcnt;
			newEdCodeQualSubject.AddTotalFlg = _addTotalFlg;
			newEdCodeQualSubject.DeductTotalFlg = _deductTotalFlg;
			return newEdCodeQualSubject;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdCodeQualSubjectId property. 
		///		مقررات مجموعة المؤهل
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"مقررات مجموعة المؤهل"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdCodeQualSubjectId
		{
			get
			{
				return this.entityData.EdCodeQualSubjectId; 
			}
			
			set
			{
				if (this.entityData.EdCodeQualSubjectId == value)
					return;
					
				OnColumnChanging(EdCodeQualSubjectColumn.EdCodeQualSubjectId, this.entityData.EdCodeQualSubjectId);
				this.entityData.EdCodeQualSubjectId = value;
				this.EntityId.EdCodeQualSubjectId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeQualSubjectColumn.EdCodeQualSubjectId, this.entityData.EdCodeQualSubjectId);
				OnPropertyChanged("EdCodeQualSubjectId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_CODE_QUAL_SUBJECT_ID property.
		///		مقررات مجموعة المؤهل
		/// </summary>
		/// <remarks>This is the original value of the ED_CODE_QUAL_SUBJECT_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdCodeQualSubjectId
		{
			get { return this.entityData.OriginalEdCodeQualSubjectId; }
			set { this.entityData.OriginalEdCodeQualSubjectId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeQualGroupId property. 
		///		SAT1-Sat2-OL-AS-AL
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeQualGroupIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"SAT1-Sat2-OL-AS-AL"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeQualGroupId
		{
			get
			{
				return this.entityData.EdCodeQualGroupId; 
			}
			
			set
			{
				if (this.entityData.EdCodeQualGroupId == value)
					return;
					
				OnColumnChanging(EdCodeQualSubjectColumn.EdCodeQualGroupId, this.entityData.EdCodeQualGroupId);
				this.entityData.EdCodeQualGroupId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeQualSubjectColumn.EdCodeQualGroupId, this.entityData.EdCodeQualGroupId);
				OnPropertyChanged("EdCodeQualGroupId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeQualBranId property. 
		///		XXX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeQualBranIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XXX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeQualBranId
		{
			get
			{
				return this.entityData.EdCodeQualBranId; 
			}
			
			set
			{
				if (this.entityData.EdCodeQualBranId == value)
					return;
					
				OnColumnChanging(EdCodeQualSubjectColumn.EdCodeQualBranId, this.entityData.EdCodeQualBranId);
				this.entityData.EdCodeQualBranId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeQualSubjectColumn.EdCodeQualBranId, this.entityData.EdCodeQualBranId);
				OnPropertyChanged("EdCodeQualBranId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSubjectId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 EdCodeSubjectId
		{
			get
			{
				return this.entityData.EdCodeSubjectId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSubjectId == value)
					return;
					
				OnColumnChanging(EdCodeQualSubjectColumn.EdCodeSubjectId, this.entityData.EdCodeSubjectId);
				this.entityData.EdCodeSubjectId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeQualSubjectColumn.EdCodeSubjectId, this.entityData.EdCodeSubjectId);
				OnPropertyChanged("EdCodeSubjectId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GradeTypeId property. 
		///		درجات - تقديرات
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsGradeTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"درجات - تقديرات"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? GradeTypeId
		{
			get
			{
				return this.entityData.GradeTypeId; 
			}
			
			set
			{
				if (this.entityData.GradeTypeId == value)
					return;
					
				OnColumnChanging(EdCodeQualSubjectColumn.GradeTypeId, this.entityData.GradeTypeId);
				this.entityData.GradeTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeQualSubjectColumn.GradeTypeId, this.entityData.GradeTypeId);
				OnPropertyChanged("GradeTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MinMark property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMinMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MinMark
		{
			get
			{
				return this.entityData.MinMark; 
			}
			
			set
			{
				if (this.entityData.MinMark == value)
					return;
					
				OnColumnChanging(EdCodeQualSubjectColumn.MinMark, this.entityData.MinMark);
				this.entityData.MinMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeQualSubjectColumn.MinMark, this.entityData.MinMark);
				OnPropertyChanged("MinMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaxMark property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMaxMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MaxMark
		{
			get
			{
				return this.entityData.MaxMark; 
			}
			
			set
			{
				if (this.entityData.MaxMark == value)
					return;
					
				OnColumnChanging(EdCodeQualSubjectColumn.MaxMark, this.entityData.MaxMark);
				this.entityData.MaxMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeQualSubjectColumn.MaxMark, this.entityData.MaxMark);
				OnPropertyChanged("MaxMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CoefcntFlg property. 
		///		مؤشر له معامل
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsCoefcntFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مؤشر له معامل"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? CoefcntFlg
		{
			get
			{
				return this.entityData.CoefcntFlg; 
			}
			
			set
			{
				if (this.entityData.CoefcntFlg == value)
					return;
					
				OnColumnChanging(EdCodeQualSubjectColumn.CoefcntFlg, this.entityData.CoefcntFlg);
				this.entityData.CoefcntFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeQualSubjectColumn.CoefcntFlg, this.entityData.CoefcntFlg);
				OnPropertyChanged("CoefcntFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SubjCoefcnt property. 
		///		معامل  المقررXXXCoefficient BAC
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSubjCoefcntNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"معامل  المقررXXXCoefficient BAC"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SubjCoefcnt
		{
			get
			{
				return this.entityData.SubjCoefcnt; 
			}
			
			set
			{
				if (this.entityData.SubjCoefcnt == value)
					return;
					
				OnColumnChanging(EdCodeQualSubjectColumn.SubjCoefcnt, this.entityData.SubjCoefcnt);
				this.entityData.SubjCoefcnt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeQualSubjectColumn.SubjCoefcnt, this.entityData.SubjCoefcnt);
				OnPropertyChanged("SubjCoefcnt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AddTotalFlg property. 
		///		يضاف للمجموع
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsAddTotalFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"يضاف للمجموع"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? AddTotalFlg
		{
			get
			{
				return this.entityData.AddTotalFlg; 
			}
			
			set
			{
				if (this.entityData.AddTotalFlg == value)
					return;
					
				OnColumnChanging(EdCodeQualSubjectColumn.AddTotalFlg, this.entityData.AddTotalFlg);
				this.entityData.AddTotalFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeQualSubjectColumn.AddTotalFlg, this.entityData.AddTotalFlg);
				OnPropertyChanged("AddTotalFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DeductTotalFlg property. 
		///		يخصم للمجموع
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsDeductTotalFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"يخصم للمجموع"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? DeductTotalFlg
		{
			get
			{
				return this.entityData.DeductTotalFlg; 
			}
			
			set
			{
				if (this.entityData.DeductTotalFlg == value)
					return;
					
				OnColumnChanging(EdCodeQualSubjectColumn.DeductTotalFlg, this.entityData.DeductTotalFlg);
				this.entityData.DeductTotalFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeQualSubjectColumn.DeductTotalFlg, this.entityData.DeductTotalFlg);
				OnPropertyChanged("DeductTotalFlg");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeQualBrn"/>.
		/// </summary>
		/// <value>The source EdCdeQualBrn for EdCodeQualBranId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCdeQualBrn EdCodeQualBranIdSource
      	{
            get { return entityData.EdCodeQualBranIdSource; }
            set { entityData.EdCodeQualBranIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeQualGroup"/>.
		/// </summary>
		/// <value>The source EdCodeQualGroup for EdCodeQualGroupId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeQualGroup EdCodeQualGroupIdSource
      	{
            get { return entityData.EdCodeQualGroupIdSource; }
            set { entityData.EdCodeQualGroupIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSubject"/>.
		/// </summary>
		/// <value>The source EdCodeSubject for EdCodeSubjectId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSubject EdCodeSubjectIdSource
      	{
            get { return entityData.EdCodeSubjectIdSource; }
            set { entityData.EdCodeSubjectIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EdStudQualSubject objects
		///	which are related to this object through the relation FK_ED_STUD_QUAL_SUBJECT_ED_CODE_QUAL_SUBJECT
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudQualSubject> EdStudQualSubjectCollection
		{
			get { return entityData.EdStudQualSubjectCollection; }
			set { entityData.EdStudQualSubjectCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_CODE_QUAL_SUBJECT"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_CODE_QUAL_SUBJECT_ID", "ED_CODE_QUAL_GROUP_ID", "ED_CODE_QUAL_BRAN_ID", "ED_CODE_SUBJECT_ID", "GRADE_TYPE_ID", "MIN_MARK", "MAX_MARK", "COEFCNT_FLG", "SUBJ_COEFCNT", "ADD_TOTAL_FLG", "DEDUCT_TOTAL_FLG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdCodeQualSubjectEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdCodeQualSubject) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdCodeQualSubject>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdCodeQualSubject);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdCodeQualSubject Entity 
		///</summary>
		protected virtual EdCodeQualSubject Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdCodeQualSubject copy = new EdCodeQualSubject();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdCodeQualSubjectId = this.EdCodeQualSubjectId;
					copy.OriginalEdCodeQualSubjectId = this.OriginalEdCodeQualSubjectId;
				copy.EdCodeQualGroupId = this.EdCodeQualGroupId;
				copy.EdCodeQualBranId = this.EdCodeQualBranId;
				copy.EdCodeSubjectId = this.EdCodeSubjectId;
				copy.GradeTypeId = this.GradeTypeId;
				copy.MinMark = this.MinMark;
				copy.MaxMark = this.MaxMark;
				copy.CoefcntFlg = this.CoefcntFlg;
				copy.SubjCoefcnt = this.SubjCoefcnt;
				copy.AddTotalFlg = this.AddTotalFlg;
				copy.DeductTotalFlg = this.DeductTotalFlg;
			
			if (this.EdCodeQualBranIdSource != null && existingCopies.Contains(this.EdCodeQualBranIdSource))
				copy.EdCodeQualBranIdSource = existingCopies[this.EdCodeQualBranIdSource] as EdCdeQualBrn;
			else
				copy.EdCodeQualBranIdSource = MakeCopyOf(this.EdCodeQualBranIdSource, existingCopies) as EdCdeQualBrn;
			if (this.EdCodeQualGroupIdSource != null && existingCopies.Contains(this.EdCodeQualGroupIdSource))
				copy.EdCodeQualGroupIdSource = existingCopies[this.EdCodeQualGroupIdSource] as EdCodeQualGroup;
			else
				copy.EdCodeQualGroupIdSource = MakeCopyOf(this.EdCodeQualGroupIdSource, existingCopies) as EdCodeQualGroup;
			if (this.EdCodeSubjectIdSource != null && existingCopies.Contains(this.EdCodeSubjectIdSource))
				copy.EdCodeSubjectIdSource = existingCopies[this.EdCodeSubjectIdSource] as EdCodeSubject;
			else
				copy.EdCodeSubjectIdSource = MakeCopyOf(this.EdCodeSubjectIdSource, existingCopies) as EdCodeSubject;
		
			//deep copy nested objects
			copy.EdStudQualSubjectCollection = (TList<EdStudQualSubject>) MakeCopyOf(this.EdStudQualSubjectCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdCodeQualSubject Entity 
		///</summary>
		public virtual EdCodeQualSubject Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdCodeQualSubject Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdCodeQualSubject DeepCopy()
		{
			return EntityHelper.Clone<EdCodeQualSubject>(this as EdCodeQualSubject);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdCodeQualSubjectEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdCodeQualSubjectEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdCodeQualSubjectEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdCodeQualSubjectColumn column)
		{
			switch(column)
			{
					case EdCodeQualSubjectColumn.EdCodeQualSubjectId:
					return entityData.EdCodeQualSubjectId != _originalData.EdCodeQualSubjectId;
					case EdCodeQualSubjectColumn.EdCodeQualGroupId:
					return entityData.EdCodeQualGroupId != _originalData.EdCodeQualGroupId;
					case EdCodeQualSubjectColumn.EdCodeQualBranId:
					return entityData.EdCodeQualBranId != _originalData.EdCodeQualBranId;
					case EdCodeQualSubjectColumn.EdCodeSubjectId:
					return entityData.EdCodeSubjectId != _originalData.EdCodeSubjectId;
					case EdCodeQualSubjectColumn.GradeTypeId:
					return entityData.GradeTypeId != _originalData.GradeTypeId;
					case EdCodeQualSubjectColumn.MinMark:
					return entityData.MinMark != _originalData.MinMark;
					case EdCodeQualSubjectColumn.MaxMark:
					return entityData.MaxMark != _originalData.MaxMark;
					case EdCodeQualSubjectColumn.CoefcntFlg:
					return entityData.CoefcntFlg != _originalData.CoefcntFlg;
					case EdCodeQualSubjectColumn.SubjCoefcnt:
					return entityData.SubjCoefcnt != _originalData.SubjCoefcnt;
					case EdCodeQualSubjectColumn.AddTotalFlg:
					return entityData.AddTotalFlg != _originalData.AddTotalFlg;
					case EdCodeQualSubjectColumn.DeductTotalFlg:
					return entityData.DeductTotalFlg != _originalData.DeductTotalFlg;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdCodeQualSubjectColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdCodeQualSubjectId != _originalData.EdCodeQualSubjectId;
			result = result || entityData.EdCodeQualGroupId != _originalData.EdCodeQualGroupId;
			result = result || entityData.EdCodeQualBranId != _originalData.EdCodeQualBranId;
			result = result || entityData.EdCodeSubjectId != _originalData.EdCodeSubjectId;
			result = result || entityData.GradeTypeId != _originalData.GradeTypeId;
			result = result || entityData.MinMark != _originalData.MinMark;
			result = result || entityData.MaxMark != _originalData.MaxMark;
			result = result || entityData.CoefcntFlg != _originalData.CoefcntFlg;
			result = result || entityData.SubjCoefcnt != _originalData.SubjCoefcnt;
			result = result || entityData.AddTotalFlg != _originalData.AddTotalFlg;
			result = result || entityData.DeductTotalFlg != _originalData.DeductTotalFlg;
			return result;
		}	
		
		///<summary>
		///  Returns a EdCodeQualSubject Entity with the original data.
		///</summary>
		public EdCodeQualSubject GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdCodeQualSubject(
				_originalData.EdCodeQualSubjectId,
				_originalData.EdCodeQualGroupId,
				_originalData.EdCodeQualBranId,
				_originalData.EdCodeSubjectId,
				_originalData.GradeTypeId,
				_originalData.MinMark,
				_originalData.MaxMark,
				_originalData.CoefcntFlg,
				_originalData.SubjCoefcnt,
				_originalData.AddTotalFlg,
				_originalData.DeductTotalFlg
				);
				
			return (EdCodeQualSubject)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdCodeQualSubjectBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdCodeQualSubjectBase)
				return ValueEquals(this, (EdCodeQualSubjectBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdCodeQualSubjectBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdCodeQualSubjectId.GetHashCode() ^ 
					((this.EdCodeQualGroupId == null) ? string.Empty : this.EdCodeQualGroupId.ToString()).GetHashCode() ^ 
					((this.EdCodeQualBranId == null) ? string.Empty : this.EdCodeQualBranId.ToString()).GetHashCode() ^ 
					this.EdCodeSubjectId.GetHashCode() ^ 
					((this.GradeTypeId == null) ? string.Empty : this.GradeTypeId.ToString()).GetHashCode() ^ 
					((this.MinMark == null) ? string.Empty : this.MinMark.ToString()).GetHashCode() ^ 
					((this.MaxMark == null) ? string.Empty : this.MaxMark.ToString()).GetHashCode() ^ 
					((this.CoefcntFlg == null) ? string.Empty : this.CoefcntFlg.ToString()).GetHashCode() ^ 
					((this.SubjCoefcnt == null) ? string.Empty : this.SubjCoefcnt.ToString()).GetHashCode() ^ 
					((this.AddTotalFlg == null) ? string.Empty : this.AddTotalFlg.ToString()).GetHashCode() ^ 
					((this.DeductTotalFlg == null) ? string.Empty : this.DeductTotalFlg.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdCodeQualSubjectBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdCodeQualSubjectBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdCodeQualSubjectBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdCodeQualSubjectBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdCodeQualSubjectBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdCodeQualSubjectBase Object1, EdCodeQualSubjectBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdCodeQualSubjectId != Object2.EdCodeQualSubjectId)
				equal = false;
			if ( Object1.EdCodeQualGroupId != null && Object2.EdCodeQualGroupId != null )
			{
				if (Object1.EdCodeQualGroupId != Object2.EdCodeQualGroupId)
					equal = false;
			}
			else if (Object1.EdCodeQualGroupId == null ^ Object2.EdCodeQualGroupId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeQualBranId != null && Object2.EdCodeQualBranId != null )
			{
				if (Object1.EdCodeQualBranId != Object2.EdCodeQualBranId)
					equal = false;
			}
			else if (Object1.EdCodeQualBranId == null ^ Object2.EdCodeQualBranId == null )
			{
				equal = false;
			}
			if (Object1.EdCodeSubjectId != Object2.EdCodeSubjectId)
				equal = false;
			if ( Object1.GradeTypeId != null && Object2.GradeTypeId != null )
			{
				if (Object1.GradeTypeId != Object2.GradeTypeId)
					equal = false;
			}
			else if (Object1.GradeTypeId == null ^ Object2.GradeTypeId == null )
			{
				equal = false;
			}
			if ( Object1.MinMark != null && Object2.MinMark != null )
			{
				if (Object1.MinMark != Object2.MinMark)
					equal = false;
			}
			else if (Object1.MinMark == null ^ Object2.MinMark == null )
			{
				equal = false;
			}
			if ( Object1.MaxMark != null && Object2.MaxMark != null )
			{
				if (Object1.MaxMark != Object2.MaxMark)
					equal = false;
			}
			else if (Object1.MaxMark == null ^ Object2.MaxMark == null )
			{
				equal = false;
			}
			if ( Object1.CoefcntFlg != null && Object2.CoefcntFlg != null )
			{
				if (Object1.CoefcntFlg != Object2.CoefcntFlg)
					equal = false;
			}
			else if (Object1.CoefcntFlg == null ^ Object2.CoefcntFlg == null )
			{
				equal = false;
			}
			if ( Object1.SubjCoefcnt != null && Object2.SubjCoefcnt != null )
			{
				if (Object1.SubjCoefcnt != Object2.SubjCoefcnt)
					equal = false;
			}
			else if (Object1.SubjCoefcnt == null ^ Object2.SubjCoefcnt == null )
			{
				equal = false;
			}
			if ( Object1.AddTotalFlg != null && Object2.AddTotalFlg != null )
			{
				if (Object1.AddTotalFlg != Object2.AddTotalFlg)
					equal = false;
			}
			else if (Object1.AddTotalFlg == null ^ Object2.AddTotalFlg == null )
			{
				equal = false;
			}
			if ( Object1.DeductTotalFlg != null && Object2.DeductTotalFlg != null )
			{
				if (Object1.DeductTotalFlg != Object2.DeductTotalFlg)
					equal = false;
			}
			else if (Object1.DeductTotalFlg == null ^ Object2.DeductTotalFlg == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdCodeQualSubjectBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdCodeQualSubjectComparer GetComparer()
        {
            return new EdCodeQualSubjectComparer();
        }
        */

        // Comparer delegates back to EdCodeQualSubject
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdCodeQualSubject rhs, EdCodeQualSubjectColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdCodeQualSubjectColumn.EdCodeQualSubjectId:
            		return this.EdCodeQualSubjectId.CompareTo(rhs.EdCodeQualSubjectId);
            		
            		                 
            	
            	
            	case EdCodeQualSubjectColumn.EdCodeQualGroupId:
            		return this.EdCodeQualGroupId.Value.CompareTo(rhs.EdCodeQualGroupId.Value);
            		
            		                 
            	
            	
            	case EdCodeQualSubjectColumn.EdCodeQualBranId:
            		return this.EdCodeQualBranId.Value.CompareTo(rhs.EdCodeQualBranId.Value);
            		
            		                 
            	
            	
            	case EdCodeQualSubjectColumn.EdCodeSubjectId:
            		return this.EdCodeSubjectId.CompareTo(rhs.EdCodeSubjectId);
            		
            		                 
            	
            	
            	case EdCodeQualSubjectColumn.GradeTypeId:
            		return this.GradeTypeId.Value.CompareTo(rhs.GradeTypeId.Value);
            		
            		                 
            	
            	
            	case EdCodeQualSubjectColumn.MinMark:
            		return this.MinMark.Value.CompareTo(rhs.MinMark.Value);
            		
            		                 
            	
            	
            	case EdCodeQualSubjectColumn.MaxMark:
            		return this.MaxMark.Value.CompareTo(rhs.MaxMark.Value);
            		
            		                 
            	
            	
            	case EdCodeQualSubjectColumn.CoefcntFlg:
            		return this.CoefcntFlg.Value.CompareTo(rhs.CoefcntFlg.Value);
            		
            		                 
            	
            	
            	case EdCodeQualSubjectColumn.SubjCoefcnt:
            		return this.SubjCoefcnt.Value.CompareTo(rhs.SubjCoefcnt.Value);
            		
            		                 
            	
            	
            	case EdCodeQualSubjectColumn.AddTotalFlg:
            		return this.AddTotalFlg.Value.CompareTo(rhs.AddTotalFlg.Value);
            		
            		                 
            	
            	
            	case EdCodeQualSubjectColumn.DeductTotalFlg:
            		return this.DeductTotalFlg.Value.CompareTo(rhs.DeductTotalFlg.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdCodeQualSubjectKey> Members
		
		// member variable for the EntityId property
		private EdCodeQualSubjectKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdCodeQualSubjectKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdCodeQualSubjectKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdCodeQualSubject")
					.Append("|").Append( this.EdCodeQualSubjectId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- EdCodeQualSubjectId: {0}{11}- EdCodeQualGroupId: {1}{11}- EdCodeQualBranId: {2}{11}- EdCodeSubjectId: {3}{11}- GradeTypeId: {4}{11}- MinMark: {5}{11}- MaxMark: {6}{11}- CoefcntFlg: {7}{11}- SubjCoefcnt: {8}{11}- AddTotalFlg: {9}{11}- DeductTotalFlg: {10}{11}{13}", 
				this.EdCodeQualSubjectId,
				(this.EdCodeQualGroupId == null) ? string.Empty : this.EdCodeQualGroupId.ToString(),
				(this.EdCodeQualBranId == null) ? string.Empty : this.EdCodeQualBranId.ToString(),
				this.EdCodeSubjectId,
				(this.GradeTypeId == null) ? string.Empty : this.GradeTypeId.ToString(),
				(this.MinMark == null) ? string.Empty : this.MinMark.ToString(),
				(this.MaxMark == null) ? string.Empty : this.MaxMark.ToString(),
				(this.CoefcntFlg == null) ? string.Empty : this.CoefcntFlg.ToString(),
				(this.SubjCoefcnt == null) ? string.Empty : this.SubjCoefcnt.ToString(),
				(this.AddTotalFlg == null) ? string.Empty : this.AddTotalFlg.ToString(),
				(this.DeductTotalFlg == null) ? string.Empty : this.DeductTotalFlg.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_CODE_QUAL_SUBJECT' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdCodeQualSubjectEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_CODE_QUAL_SUBJECT_ID : مقررات مجموعة المؤهل
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_CODE_QUAL_SUBJECT"</remarks>
		public System.Decimal EdCodeQualSubjectId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdCodeQualSubjectId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_CODE_QUAL_GROUP_ID : SAT1-Sat2-OL-AS-AL
		/// </summary>
		public System.Decimal?		  EdCodeQualGroupId = null;
		
		/// <summary>
		/// ED_CODE_QUAL_BRAN_ID : XXX
		/// </summary>
		public System.Decimal?		  EdCodeQualBranId = null;
		
		/// <summary>
		/// ED_CODE_SUBJECT_ID : 
		/// </summary>
		public System.Int32		  EdCodeSubjectId = (int)0;
		
		/// <summary>
		/// GRADE_TYPE_ID : درجات - تقديرات
		/// </summary>
		public System.Int32?		  GradeTypeId = null;
		
		/// <summary>
		/// MIN_MARK : 
		/// </summary>
		public System.Decimal?		  MinMark = null;
		
		/// <summary>
		/// MAX_MARK : 
		/// </summary>
		public System.Decimal?		  MaxMark = null;
		
		/// <summary>
		/// COEFCNT_FLG : مؤشر له معامل
		/// </summary>
		public System.Boolean?		  CoefcntFlg = null;
		
		/// <summary>
		/// SUBJ_COEFCNT : معامل  المقررXXXCoefficient BAC
		/// </summary>
		public System.Decimal?		  SubjCoefcnt = null;
		
		/// <summary>
		/// ADD_TOTAL_FLG : يضاف للمجموع
		/// </summary>
		public System.Boolean?		  AddTotalFlg = null;
		
		/// <summary>
		/// DEDUCT_TOTAL_FLG : يخصم للمجموع
		/// </summary>
		public System.Boolean?		  DeductTotalFlg = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdCdeQualBrn _edCodeQualBranIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeQualBrn"/>.
		/// </summary>
		/// <value>The source EdCdeQualBrn for EdCodeQualBranId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCdeQualBrn EdCodeQualBranIdSource
      	{
            get { return this._edCodeQualBranIdSource; }
            set { this._edCodeQualBranIdSource = value; }
      	}
		private EdCodeQualGroup _edCodeQualGroupIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeQualGroup"/>.
		/// </summary>
		/// <value>The source EdCodeQualGroup for EdCodeQualGroupId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeQualGroup EdCodeQualGroupIdSource
      	{
            get { return this._edCodeQualGroupIdSource; }
            set { this._edCodeQualGroupIdSource = value; }
      	}
		private EdCodeSubject _edCodeSubjectIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSubject"/>.
		/// </summary>
		/// <value>The source EdCodeSubject for EdCodeSubjectId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSubject EdCodeSubjectIdSource
      	{
            get { return this._edCodeSubjectIdSource; }
            set { this._edCodeSubjectIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EdStudQualSubjectCollection
		
		private TList<EdStudQualSubject> _edStudQualSubjectEdCodeQualSubjectId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudQualSubjectEdCodeQualSubjectId
		/// </summary>
		
		public TList<EdStudQualSubject> EdStudQualSubjectCollection
		{
			get
			{
				if (_edStudQualSubjectEdCodeQualSubjectId == null)
				{
				_edStudQualSubjectEdCodeQualSubjectId = new TList<EdStudQualSubject>();
				}
	
				return _edStudQualSubjectEdCodeQualSubjectId;
			}
			set { _edStudQualSubjectEdCodeQualSubjectId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdCodeQualSubjectEntityData _tmp = new EdCodeQualSubjectEntityData();
						
			_tmp.EdCodeQualSubjectId = this.EdCodeQualSubjectId;
			_tmp.OriginalEdCodeQualSubjectId = this.OriginalEdCodeQualSubjectId;
			
			_tmp.EdCodeQualGroupId = this.EdCodeQualGroupId;
			_tmp.EdCodeQualBranId = this.EdCodeQualBranId;
			_tmp.EdCodeSubjectId = this.EdCodeSubjectId;
			_tmp.GradeTypeId = this.GradeTypeId;
			_tmp.MinMark = this.MinMark;
			_tmp.MaxMark = this.MaxMark;
			_tmp.CoefcntFlg = this.CoefcntFlg;
			_tmp.SubjCoefcnt = this.SubjCoefcnt;
			_tmp.AddTotalFlg = this.AddTotalFlg;
			_tmp.DeductTotalFlg = this.DeductTotalFlg;
			
			#region Source Parent Composite Entities
			if (this.EdCodeQualBranIdSource != null)
				_tmp.EdCodeQualBranIdSource = MakeCopyOf(this.EdCodeQualBranIdSource) as EdCdeQualBrn;
			if (this.EdCodeQualGroupIdSource != null)
				_tmp.EdCodeQualGroupIdSource = MakeCopyOf(this.EdCodeQualGroupIdSource) as EdCodeQualGroup;
			if (this.EdCodeSubjectIdSource != null)
				_tmp.EdCodeSubjectIdSource = MakeCopyOf(this.EdCodeSubjectIdSource) as EdCodeSubject;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._edStudQualSubjectEdCodeQualSubjectId != null)
				_tmp.EdStudQualSubjectCollection = (TList<EdStudQualSubject>) MakeCopyOf(this.EdStudQualSubjectCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdCodeQualSubjectEntityData _tmp = new EdCodeQualSubjectEntityData();
						
			_tmp.EdCodeQualSubjectId = this.EdCodeQualSubjectId;
			_tmp.OriginalEdCodeQualSubjectId = this.OriginalEdCodeQualSubjectId;
			
			_tmp.EdCodeQualGroupId = this.EdCodeQualGroupId;
			_tmp.EdCodeQualBranId = this.EdCodeQualBranId;
			_tmp.EdCodeSubjectId = this.EdCodeSubjectId;
			_tmp.GradeTypeId = this.GradeTypeId;
			_tmp.MinMark = this.MinMark;
			_tmp.MaxMark = this.MaxMark;
			_tmp.CoefcntFlg = this.CoefcntFlg;
			_tmp.SubjCoefcnt = this.SubjCoefcnt;
			_tmp.AddTotalFlg = this.AddTotalFlg;
			_tmp.DeductTotalFlg = this.DeductTotalFlg;
			
			#region Source Parent Composite Entities
			if (this.EdCodeQualBranIdSource != null && existingCopies.Contains(this.EdCodeQualBranIdSource))
				_tmp.EdCodeQualBranIdSource = existingCopies[this.EdCodeQualBranIdSource] as EdCdeQualBrn;
			else
				_tmp.EdCodeQualBranIdSource = MakeCopyOf(this.EdCodeQualBranIdSource, existingCopies) as EdCdeQualBrn;
			if (this.EdCodeQualGroupIdSource != null && existingCopies.Contains(this.EdCodeQualGroupIdSource))
				_tmp.EdCodeQualGroupIdSource = existingCopies[this.EdCodeQualGroupIdSource] as EdCodeQualGroup;
			else
				_tmp.EdCodeQualGroupIdSource = MakeCopyOf(this.EdCodeQualGroupIdSource, existingCopies) as EdCodeQualGroup;
			if (this.EdCodeSubjectIdSource != null && existingCopies.Contains(this.EdCodeSubjectIdSource))
				_tmp.EdCodeSubjectIdSource = existingCopies[this.EdCodeSubjectIdSource] as EdCodeSubject;
			else
				_tmp.EdCodeSubjectIdSource = MakeCopyOf(this.EdCodeSubjectIdSource, existingCopies) as EdCodeSubject;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EdStudQualSubjectCollection = (TList<EdStudQualSubject>) MakeCopyOf(this.EdStudQualSubjectCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCodeQualSubjectColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdCodeQualSubjectColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCodeQualSubjectColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdCodeQualSubjectColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCodeQualSubjectColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdCodeQualSubjectColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdCodeQualSubjectEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdCodeQualSubjectEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCodeQualSubjectColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdCodeQualSubjectColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdCodeQualSubjectEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdCodeQualSubjectEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdCodeQualSubjectEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdCodeQualSubject"/> object.
	/// </remarks>
	public class EdCodeQualSubjectEventArgs : System.EventArgs
	{
		private EdCodeQualSubjectColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdCodeQualSubjectEventArgs class.
		///</summary>
		public EdCodeQualSubjectEventArgs(EdCodeQualSubjectColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdCodeQualSubjectEventArgs class.
		///</summary>
		public EdCodeQualSubjectEventArgs(EdCodeQualSubjectColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdCodeQualSubjectColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdCodeQualSubjectColumn" />
		public EdCodeQualSubjectColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdCodeQualSubject related events.
	///</summary>
	public delegate void EdCodeQualSubjectEventHandler(object sender, EdCodeQualSubjectEventArgs e);
	
	#region EdCodeQualSubjectComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdCodeQualSubjectComparer : System.Collections.Generic.IComparer<EdCodeQualSubject>
	{
		EdCodeQualSubjectColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdCodeQualSubjectComparer"/> class.
        /// </summary>
		public EdCodeQualSubjectComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdCodeQualSubjectComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdCodeQualSubjectComparer(EdCodeQualSubjectColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdCodeQualSubject"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdCodeQualSubject"/> to compare.</param>
        /// <param name="b">The second <c>EdCodeQualSubject</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdCodeQualSubject a, EdCodeQualSubject b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdCodeQualSubject entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdCodeQualSubject a, EdCodeQualSubject b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdCodeQualSubjectColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdCodeQualSubjectKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdCodeQualSubject"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdCodeQualSubjectKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdCodeQualSubjectKey class.
		/// </summary>
		public EdCodeQualSubjectKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdCodeQualSubjectKey class.
		/// </summary>
		public EdCodeQualSubjectKey(EdCodeQualSubjectBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdCodeQualSubjectId = entity.EdCodeQualSubjectId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdCodeQualSubjectKey class.
		/// </summary>
		public EdCodeQualSubjectKey(System.Decimal _edCodeQualSubjectId)
		{
			#region Init Properties

			this.EdCodeQualSubjectId = _edCodeQualSubjectId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdCodeQualSubjectBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdCodeQualSubjectBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdCodeQualSubjectId property
		private System.Decimal _edCodeQualSubjectId;
		
		/// <summary>
		/// Gets or sets the EdCodeQualSubjectId property.
		/// </summary>
		public System.Decimal EdCodeQualSubjectId
		{
			get { return _edCodeQualSubjectId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdCodeQualSubjectId = value;
				
				_edCodeQualSubjectId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdCodeQualSubjectId = ( values["EdCodeQualSubjectId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdCodeQualSubjectId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdCodeQualSubjectId", EdCodeQualSubjectId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdCodeQualSubjectId: {0}{1}",
								EdCodeQualSubjectId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdCodeQualSubjectColumn Enum
	
	/// <summary>
	/// Enumerate the EdCodeQualSubject columns.
	/// </summary>
	[Serializable]
	public enum EdCodeQualSubjectColumn : int
	{
		/// <summary>
		/// EdCodeQualSubjectId : مقررات مجموعة المؤهل
		/// </summary>
		[EnumTextValue("ED_CODE_QUAL_SUBJECT_ID")]
		[ColumnEnum("ED_CODE_QUAL_SUBJECT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdCodeQualSubjectId = 1,
		/// <summary>
		/// EdCodeQualGroupId : SAT1-Sat2-OL-AS-AL
		/// </summary>
		[EnumTextValue("ED_CODE_QUAL_GROUP_ID")]
		[ColumnEnum("ED_CODE_QUAL_GROUP_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeQualGroupId = 2,
		/// <summary>
		/// EdCodeQualBranId : XXX
		/// </summary>
		[EnumTextValue("ED_CODE_QUAL_BRAN_ID")]
		[ColumnEnum("ED_CODE_QUAL_BRAN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeQualBranId = 3,
		/// <summary>
		/// EdCodeSubjectId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SUBJECT_ID")]
		[ColumnEnum("ED_CODE_SUBJECT_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		EdCodeSubjectId = 4,
		/// <summary>
		/// GradeTypeId : درجات - تقديرات
		/// </summary>
		[EnumTextValue("GRADE_TYPE_ID")]
		[ColumnEnum("GRADE_TYPE_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		GradeTypeId = 5,
		/// <summary>
		/// MinMark : 
		/// </summary>
		[EnumTextValue("MIN_MARK")]
		[ColumnEnum("MIN_MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MinMark = 6,
		/// <summary>
		/// MaxMark : 
		/// </summary>
		[EnumTextValue("MAX_MARK")]
		[ColumnEnum("MAX_MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MaxMark = 7,
		/// <summary>
		/// CoefcntFlg : مؤشر له معامل
		/// </summary>
		[EnumTextValue("COEFCNT_FLG")]
		[ColumnEnum("COEFCNT_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		CoefcntFlg = 8,
		/// <summary>
		/// SubjCoefcnt : معامل  المقررXXXCoefficient BAC
		/// </summary>
		[EnumTextValue("SUBJ_COEFCNT")]
		[ColumnEnum("SUBJ_COEFCNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SubjCoefcnt = 9,
		/// <summary>
		/// AddTotalFlg : يضاف للمجموع
		/// </summary>
		[EnumTextValue("ADD_TOTAL_FLG")]
		[ColumnEnum("ADD_TOTAL_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		AddTotalFlg = 10,
		/// <summary>
		/// DeductTotalFlg : يخصم للمجموع
		/// </summary>
		[EnumTextValue("DEDUCT_TOTAL_FLG")]
		[ColumnEnum("DEDUCT_TOTAL_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		DeductTotalFlg = 11
	}//End enum

	#endregion EdCodeQualSubjectColumn Enum

} // end namespace
