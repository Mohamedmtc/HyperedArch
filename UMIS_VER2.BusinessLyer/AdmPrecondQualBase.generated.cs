
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AdmPrecondQual.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ADM_PRECOND_QUAL' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AdmPrecondQualBase : EntityBase, IAdmPrecondQual, IEntityId<AdmPrecondQualKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AdmPrecondQualEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AdmPrecondQualEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AdmPrecondQualEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AdmPrecondQual> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmPrecondQualEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmPrecondQualEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AdmPrecondQualBase"/> instance.
		///</summary>
		public AdmPrecondQualBase()
		{
			this.entityData = new AdmPrecondQualEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AdmPrecondQualBase"/> instance.
		///</summary>
		///<param name="_admPrecondQualId"></param>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_asCodeDegreeId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_entMainId"></param>
		///<param name="_qualNatFlg"></param>
		///<param name="_citizenFlg"></param>
		///<param name="_foreignFlg"></param>
		///<param name="_gsCountryNodeInfoId"></param>
		///<param name="_edCodeQualId"></param>
		///<param name="_edCdeQualBrnId"></param>
		///<param name="_minPercnt"></param>
		///<param name="_admCdeExamGrdngId">NU:PG QUAL GRADE</param>
		///<param name="_minCgpa"></param>
		public AdmPrecondQualBase(System.Decimal _admPrecondQualId, System.Decimal _asCodeDegreeClassId, 
			System.Decimal _asCodeDegreeId, System.Decimal? _asFacultyInfoId, System.Decimal? _entMainId, 
			System.Boolean? _qualNatFlg, System.Boolean? _citizenFlg, System.Boolean? _foreignFlg, 
			System.Decimal? _gsCountryNodeInfoId, System.Decimal? _edCodeQualId, System.Decimal? _edCdeQualBrnId, 
			System.Decimal _minPercnt, System.Decimal? _admCdeExamGrdngId, System.Decimal? _minCgpa)
		{
			this.entityData = new AdmPrecondQualEntityData();
			this.backupData = null;

			this.AdmPrecondQualId = _admPrecondQualId;
			this.AsCodeDegreeClassId = _asCodeDegreeClassId;
			this.AsCodeDegreeId = _asCodeDegreeId;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.EntMainId = _entMainId;
			this.QualNatFlg = _qualNatFlg;
			this.CitizenFlg = _citizenFlg;
			this.ForeignFlg = _foreignFlg;
			this.GsCountryNodeInfoId = _gsCountryNodeInfoId;
			this.EdCodeQualId = _edCodeQualId;
			this.EdCdeQualBrnId = _edCdeQualBrnId;
			this.MinPercnt = _minPercnt;
			this.AdmCdeExamGrdngId = _admCdeExamGrdngId;
			this.MinCgpa = _minCgpa;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AdmPrecondQual"/> instance.
		///</summary>
		///<param name="_admPrecondQualId"></param>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_asCodeDegreeId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_entMainId"></param>
		///<param name="_qualNatFlg"></param>
		///<param name="_citizenFlg"></param>
		///<param name="_foreignFlg"></param>
		///<param name="_gsCountryNodeInfoId"></param>
		///<param name="_edCodeQualId"></param>
		///<param name="_edCdeQualBrnId"></param>
		///<param name="_minPercnt"></param>
		///<param name="_admCdeExamGrdngId">NU:PG QUAL GRADE</param>
		///<param name="_minCgpa"></param>
		public static AdmPrecondQual CreateAdmPrecondQual(System.Decimal _admPrecondQualId, System.Decimal _asCodeDegreeClassId, 
			System.Decimal _asCodeDegreeId, System.Decimal? _asFacultyInfoId, System.Decimal? _entMainId, 
			System.Boolean? _qualNatFlg, System.Boolean? _citizenFlg, System.Boolean? _foreignFlg, 
			System.Decimal? _gsCountryNodeInfoId, System.Decimal? _edCodeQualId, System.Decimal? _edCdeQualBrnId, 
			System.Decimal _minPercnt, System.Decimal? _admCdeExamGrdngId, System.Decimal? _minCgpa)
		{
			AdmPrecondQual newAdmPrecondQual = new AdmPrecondQual();
			newAdmPrecondQual.AdmPrecondQualId = _admPrecondQualId;
			newAdmPrecondQual.AsCodeDegreeClassId = _asCodeDegreeClassId;
			newAdmPrecondQual.AsCodeDegreeId = _asCodeDegreeId;
			newAdmPrecondQual.AsFacultyInfoId = _asFacultyInfoId;
			newAdmPrecondQual.EntMainId = _entMainId;
			newAdmPrecondQual.QualNatFlg = _qualNatFlg;
			newAdmPrecondQual.CitizenFlg = _citizenFlg;
			newAdmPrecondQual.ForeignFlg = _foreignFlg;
			newAdmPrecondQual.GsCountryNodeInfoId = _gsCountryNodeInfoId;
			newAdmPrecondQual.EdCodeQualId = _edCodeQualId;
			newAdmPrecondQual.EdCdeQualBrnId = _edCdeQualBrnId;
			newAdmPrecondQual.MinPercnt = _minPercnt;
			newAdmPrecondQual.AdmCdeExamGrdngId = _admCdeExamGrdngId;
			newAdmPrecondQual.MinCgpa = _minCgpa;
			return newAdmPrecondQual;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AdmPrecondQualId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal AdmPrecondQualId
		{
			get
			{
				return this.entityData.AdmPrecondQualId; 
			}
			
			set
			{
				if (this.entityData.AdmPrecondQualId == value)
					return;
					
				OnColumnChanging(AdmPrecondQualColumn.AdmPrecondQualId, this.entityData.AdmPrecondQualId);
				this.entityData.AdmPrecondQualId = value;
				this.EntityId.AdmPrecondQualId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPrecondQualColumn.AdmPrecondQualId, this.entityData.AdmPrecondQualId);
				OnPropertyChanged("AdmPrecondQualId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ADM_PRECOND_QUAL_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ADM_PRECOND_QUAL_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalAdmPrecondQualId
		{
			get { return this.entityData.OriginalAdmPrecondQualId; }
			set { this.entityData.OriginalAdmPrecondQualId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeClassId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsCodeDegreeClassId
		{
			get
			{
				return this.entityData.AsCodeDegreeClassId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeClassId == value)
					return;
					
				OnColumnChanging(AdmPrecondQualColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				this.entityData.AsCodeDegreeClassId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPrecondQualColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				OnPropertyChanged("AsCodeDegreeClassId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsCodeDegreeId
		{
			get
			{
				return this.entityData.AsCodeDegreeId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeId == value)
					return;
					
				OnColumnChanging(AdmPrecondQualColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				this.entityData.AsCodeDegreeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPrecondQualColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				OnPropertyChanged("AsCodeDegreeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(AdmPrecondQualColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPrecondQualColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntMainId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntMainIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntMainId
		{
			get
			{
				return this.entityData.EntMainId; 
			}
			
			set
			{
				if (this.entityData.EntMainId == value)
					return;
					
				OnColumnChanging(AdmPrecondQualColumn.EntMainId, this.entityData.EntMainId);
				this.entityData.EntMainId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPrecondQualColumn.EntMainId, this.entityData.EntMainId);
				OnPropertyChanged("EntMainId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QualNatFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsQualNatFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? QualNatFlg
		{
			get
			{
				return this.entityData.QualNatFlg; 
			}
			
			set
			{
				if (this.entityData.QualNatFlg == value)
					return;
					
				OnColumnChanging(AdmPrecondQualColumn.QualNatFlg, this.entityData.QualNatFlg);
				this.entityData.QualNatFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPrecondQualColumn.QualNatFlg, this.entityData.QualNatFlg);
				OnPropertyChanged("QualNatFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CitizenFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsCitizenFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? CitizenFlg
		{
			get
			{
				return this.entityData.CitizenFlg; 
			}
			
			set
			{
				if (this.entityData.CitizenFlg == value)
					return;
					
				OnColumnChanging(AdmPrecondQualColumn.CitizenFlg, this.entityData.CitizenFlg);
				this.entityData.CitizenFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPrecondQualColumn.CitizenFlg, this.entityData.CitizenFlg);
				OnPropertyChanged("CitizenFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ForeignFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsForeignFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ForeignFlg
		{
			get
			{
				return this.entityData.ForeignFlg; 
			}
			
			set
			{
				if (this.entityData.ForeignFlg == value)
					return;
					
				OnColumnChanging(AdmPrecondQualColumn.ForeignFlg, this.entityData.ForeignFlg);
				this.entityData.ForeignFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPrecondQualColumn.ForeignFlg, this.entityData.ForeignFlg);
				OnPropertyChanged("ForeignFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCountryNodeInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCountryNodeInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCountryNodeInfoId
		{
			get
			{
				return this.entityData.GsCountryNodeInfoId; 
			}
			
			set
			{
				if (this.entityData.GsCountryNodeInfoId == value)
					return;
					
				OnColumnChanging(AdmPrecondQualColumn.GsCountryNodeInfoId, this.entityData.GsCountryNodeInfoId);
				this.entityData.GsCountryNodeInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPrecondQualColumn.GsCountryNodeInfoId, this.entityData.GsCountryNodeInfoId);
				OnPropertyChanged("GsCountryNodeInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeQualId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeQualIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeQualId
		{
			get
			{
				return this.entityData.EdCodeQualId; 
			}
			
			set
			{
				if (this.entityData.EdCodeQualId == value)
					return;
					
				OnColumnChanging(AdmPrecondQualColumn.EdCodeQualId, this.entityData.EdCodeQualId);
				this.entityData.EdCodeQualId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPrecondQualColumn.EdCodeQualId, this.entityData.EdCodeQualId);
				OnPropertyChanged("EdCodeQualId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCdeQualBrnId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCdeQualBrnIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCdeQualBrnId
		{
			get
			{
				return this.entityData.EdCdeQualBrnId; 
			}
			
			set
			{
				if (this.entityData.EdCdeQualBrnId == value)
					return;
					
				OnColumnChanging(AdmPrecondQualColumn.EdCdeQualBrnId, this.entityData.EdCdeQualBrnId);
				this.entityData.EdCdeQualBrnId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPrecondQualColumn.EdCdeQualBrnId, this.entityData.EdCdeQualBrnId);
				OnPropertyChanged("EdCdeQualBrnId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MinPercnt property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal MinPercnt
		{
			get
			{
				return this.entityData.MinPercnt; 
			}
			
			set
			{
				if (this.entityData.MinPercnt == value)
					return;
					
				OnColumnChanging(AdmPrecondQualColumn.MinPercnt, this.entityData.MinPercnt);
				this.entityData.MinPercnt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPrecondQualColumn.MinPercnt, this.entityData.MinPercnt);
				OnPropertyChanged("MinPercnt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmCdeExamGrdngId property. 
		///		NU:PG QUAL GRADE
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmCdeExamGrdngIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"NU:PG QUAL GRADE"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmCdeExamGrdngId
		{
			get
			{
				return this.entityData.AdmCdeExamGrdngId; 
			}
			
			set
			{
				if (this.entityData.AdmCdeExamGrdngId == value)
					return;
					
				OnColumnChanging(AdmPrecondQualColumn.AdmCdeExamGrdngId, this.entityData.AdmCdeExamGrdngId);
				this.entityData.AdmCdeExamGrdngId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPrecondQualColumn.AdmCdeExamGrdngId, this.entityData.AdmCdeExamGrdngId);
				OnPropertyChanged("AdmCdeExamGrdngId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MinCgpa property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMinCgpaNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MinCgpa
		{
			get
			{
				return this.entityData.MinCgpa; 
			}
			
			set
			{
				if (this.entityData.MinCgpa == value)
					return;
					
				OnColumnChanging(AdmPrecondQualColumn.MinCgpa, this.entityData.MinCgpa);
				this.entityData.MinCgpa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmPrecondQualColumn.MinCgpa, this.entityData.MinCgpa);
				OnPropertyChanged("MinCgpa");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdeExamGrdng"/>.
		/// </summary>
		/// <value>The source AdmCdeExamGrdng for AdmCdeExamGrdngId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmCdeExamGrdng AdmCdeExamGrdngIdSource
      	{
            get { return entityData.AdmCdeExamGrdngIdSource; }
            set { entityData.AdmCdeExamGrdngIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return entityData.AsCodeDegreeIdSource; }
            set { entityData.AsCodeDegreeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return entityData.AsCodeDegreeClassIdSource; }
            set { entityData.AsCodeDegreeClassIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeQualBrn"/>.
		/// </summary>
		/// <value>The source EdCdeQualBrn for EdCdeQualBrnId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCdeQualBrn EdCdeQualBrnIdSource
      	{
            get { return entityData.EdCdeQualBrnIdSource; }
            set { entityData.EdCdeQualBrnIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeQual"/>.
		/// </summary>
		/// <value>The source EdCodeQual for EdCodeQualId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeQual EdCodeQualIdSource
      	{
            get { return entityData.EdCodeQualIdSource; }
            set { entityData.EdCodeQualIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return entityData.EntMainIdSource; }
            set { entityData.EntMainIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCountryNode"/>.
		/// </summary>
		/// <value>The source GsCountryNode for GsCountryNodeInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCountryNode GsCountryNodeInfoIdSource
      	{
            get { return entityData.GsCountryNodeInfoIdSource; }
            set { entityData.GsCountryNodeInfoIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ADM_PRECOND_QUAL"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ADM_PRECOND_QUAL_ID", "AS_CODE_DEGREE_CLASS_ID", "AS_CODE_DEGREE_ID", "AS_FACULTY_INFO_ID", "ENT_MAIN_ID", "QUAL_NAT_FLG", "CITIZEN_FLG", "FOREIGN_FLG", "GS_COUNTRY_NODE_INFO_ID", "ED_CODE_QUAL_ID", "ED_CDE_QUAL_BRN_ID", "MIN_PERCNT", "ADM_CDE_EXAM_GRDNG_ID", "MIN_CGPA"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AdmPrecondQualEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AdmPrecondQual) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AdmPrecondQual>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AdmPrecondQual);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AdmPrecondQual Entity 
		///</summary>
		protected virtual AdmPrecondQual Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AdmPrecondQual copy = new AdmPrecondQual();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AdmPrecondQualId = this.AdmPrecondQualId;
					copy.OriginalAdmPrecondQualId = this.OriginalAdmPrecondQualId;
				copy.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
				copy.AsCodeDegreeId = this.AsCodeDegreeId;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.EntMainId = this.EntMainId;
				copy.QualNatFlg = this.QualNatFlg;
				copy.CitizenFlg = this.CitizenFlg;
				copy.ForeignFlg = this.ForeignFlg;
				copy.GsCountryNodeInfoId = this.GsCountryNodeInfoId;
				copy.EdCodeQualId = this.EdCodeQualId;
				copy.EdCdeQualBrnId = this.EdCdeQualBrnId;
				copy.MinPercnt = this.MinPercnt;
				copy.AdmCdeExamGrdngId = this.AdmCdeExamGrdngId;
				copy.MinCgpa = this.MinCgpa;
			
			if (this.AdmCdeExamGrdngIdSource != null && existingCopies.Contains(this.AdmCdeExamGrdngIdSource))
				copy.AdmCdeExamGrdngIdSource = existingCopies[this.AdmCdeExamGrdngIdSource] as AdmCdeExamGrdng;
			else
				copy.AdmCdeExamGrdngIdSource = MakeCopyOf(this.AdmCdeExamGrdngIdSource, existingCopies) as AdmCdeExamGrdng;
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				copy.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				copy.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				copy.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				copy.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdCdeQualBrnIdSource != null && existingCopies.Contains(this.EdCdeQualBrnIdSource))
				copy.EdCdeQualBrnIdSource = existingCopies[this.EdCdeQualBrnIdSource] as EdCdeQualBrn;
			else
				copy.EdCdeQualBrnIdSource = MakeCopyOf(this.EdCdeQualBrnIdSource, existingCopies) as EdCdeQualBrn;
			if (this.EdCodeQualIdSource != null && existingCopies.Contains(this.EdCodeQualIdSource))
				copy.EdCodeQualIdSource = existingCopies[this.EdCodeQualIdSource] as EdCodeQual;
			else
				copy.EdCodeQualIdSource = MakeCopyOf(this.EdCodeQualIdSource, existingCopies) as EdCodeQual;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				copy.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				copy.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.GsCountryNodeInfoIdSource != null && existingCopies.Contains(this.GsCountryNodeInfoIdSource))
				copy.GsCountryNodeInfoIdSource = existingCopies[this.GsCountryNodeInfoIdSource] as GsCountryNode;
			else
				copy.GsCountryNodeInfoIdSource = MakeCopyOf(this.GsCountryNodeInfoIdSource, existingCopies) as GsCountryNode;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AdmPrecondQual Entity 
		///</summary>
		public virtual AdmPrecondQual Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AdmPrecondQual Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AdmPrecondQual DeepCopy()
		{
			return EntityHelper.Clone<AdmPrecondQual>(this as AdmPrecondQual);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AdmPrecondQualEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AdmPrecondQualEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AdmPrecondQualEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AdmPrecondQualColumn column)
		{
			switch(column)
			{
					case AdmPrecondQualColumn.AdmPrecondQualId:
					return entityData.AdmPrecondQualId != _originalData.AdmPrecondQualId;
					case AdmPrecondQualColumn.AsCodeDegreeClassId:
					return entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
					case AdmPrecondQualColumn.AsCodeDegreeId:
					return entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
					case AdmPrecondQualColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case AdmPrecondQualColumn.EntMainId:
					return entityData.EntMainId != _originalData.EntMainId;
					case AdmPrecondQualColumn.QualNatFlg:
					return entityData.QualNatFlg != _originalData.QualNatFlg;
					case AdmPrecondQualColumn.CitizenFlg:
					return entityData.CitizenFlg != _originalData.CitizenFlg;
					case AdmPrecondQualColumn.ForeignFlg:
					return entityData.ForeignFlg != _originalData.ForeignFlg;
					case AdmPrecondQualColumn.GsCountryNodeInfoId:
					return entityData.GsCountryNodeInfoId != _originalData.GsCountryNodeInfoId;
					case AdmPrecondQualColumn.EdCodeQualId:
					return entityData.EdCodeQualId != _originalData.EdCodeQualId;
					case AdmPrecondQualColumn.EdCdeQualBrnId:
					return entityData.EdCdeQualBrnId != _originalData.EdCdeQualBrnId;
					case AdmPrecondQualColumn.MinPercnt:
					return entityData.MinPercnt != _originalData.MinPercnt;
					case AdmPrecondQualColumn.AdmCdeExamGrdngId:
					return entityData.AdmCdeExamGrdngId != _originalData.AdmCdeExamGrdngId;
					case AdmPrecondQualColumn.MinCgpa:
					return entityData.MinCgpa != _originalData.MinCgpa;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AdmPrecondQualColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AdmPrecondQualId != _originalData.AdmPrecondQualId;
			result = result || entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
			result = result || entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.EntMainId != _originalData.EntMainId;
			result = result || entityData.QualNatFlg != _originalData.QualNatFlg;
			result = result || entityData.CitizenFlg != _originalData.CitizenFlg;
			result = result || entityData.ForeignFlg != _originalData.ForeignFlg;
			result = result || entityData.GsCountryNodeInfoId != _originalData.GsCountryNodeInfoId;
			result = result || entityData.EdCodeQualId != _originalData.EdCodeQualId;
			result = result || entityData.EdCdeQualBrnId != _originalData.EdCdeQualBrnId;
			result = result || entityData.MinPercnt != _originalData.MinPercnt;
			result = result || entityData.AdmCdeExamGrdngId != _originalData.AdmCdeExamGrdngId;
			result = result || entityData.MinCgpa != _originalData.MinCgpa;
			return result;
		}	
		
		///<summary>
		///  Returns a AdmPrecondQual Entity with the original data.
		///</summary>
		public AdmPrecondQual GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAdmPrecondQual(
				_originalData.AdmPrecondQualId,
				_originalData.AsCodeDegreeClassId,
				_originalData.AsCodeDegreeId,
				_originalData.AsFacultyInfoId,
				_originalData.EntMainId,
				_originalData.QualNatFlg,
				_originalData.CitizenFlg,
				_originalData.ForeignFlg,
				_originalData.GsCountryNodeInfoId,
				_originalData.EdCodeQualId,
				_originalData.EdCdeQualBrnId,
				_originalData.MinPercnt,
				_originalData.AdmCdeExamGrdngId,
				_originalData.MinCgpa
				);
				
			return (AdmPrecondQual)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AdmPrecondQualBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AdmPrecondQualBase)
				return ValueEquals(this, (AdmPrecondQualBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AdmPrecondQualBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AdmPrecondQualId.GetHashCode() ^ 
					this.AsCodeDegreeClassId.GetHashCode() ^ 
					this.AsCodeDegreeId.GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					((this.EntMainId == null) ? string.Empty : this.EntMainId.ToString()).GetHashCode() ^ 
					((this.QualNatFlg == null) ? string.Empty : this.QualNatFlg.ToString()).GetHashCode() ^ 
					((this.CitizenFlg == null) ? string.Empty : this.CitizenFlg.ToString()).GetHashCode() ^ 
					((this.ForeignFlg == null) ? string.Empty : this.ForeignFlg.ToString()).GetHashCode() ^ 
					((this.GsCountryNodeInfoId == null) ? string.Empty : this.GsCountryNodeInfoId.ToString()).GetHashCode() ^ 
					((this.EdCodeQualId == null) ? string.Empty : this.EdCodeQualId.ToString()).GetHashCode() ^ 
					((this.EdCdeQualBrnId == null) ? string.Empty : this.EdCdeQualBrnId.ToString()).GetHashCode() ^ 
					this.MinPercnt.GetHashCode() ^ 
					((this.AdmCdeExamGrdngId == null) ? string.Empty : this.AdmCdeExamGrdngId.ToString()).GetHashCode() ^ 
					((this.MinCgpa == null) ? string.Empty : this.MinCgpa.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AdmPrecondQualBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AdmPrecondQualBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AdmPrecondQualBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AdmPrecondQualBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AdmPrecondQualBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AdmPrecondQualBase Object1, AdmPrecondQualBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AdmPrecondQualId != Object2.AdmPrecondQualId)
				equal = false;
			if (Object1.AsCodeDegreeClassId != Object2.AsCodeDegreeClassId)
				equal = false;
			if (Object1.AsCodeDegreeId != Object2.AsCodeDegreeId)
				equal = false;
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if ( Object1.EntMainId != null && Object2.EntMainId != null )
			{
				if (Object1.EntMainId != Object2.EntMainId)
					equal = false;
			}
			else if (Object1.EntMainId == null ^ Object2.EntMainId == null )
			{
				equal = false;
			}
			if ( Object1.QualNatFlg != null && Object2.QualNatFlg != null )
			{
				if (Object1.QualNatFlg != Object2.QualNatFlg)
					equal = false;
			}
			else if (Object1.QualNatFlg == null ^ Object2.QualNatFlg == null )
			{
				equal = false;
			}
			if ( Object1.CitizenFlg != null && Object2.CitizenFlg != null )
			{
				if (Object1.CitizenFlg != Object2.CitizenFlg)
					equal = false;
			}
			else if (Object1.CitizenFlg == null ^ Object2.CitizenFlg == null )
			{
				equal = false;
			}
			if ( Object1.ForeignFlg != null && Object2.ForeignFlg != null )
			{
				if (Object1.ForeignFlg != Object2.ForeignFlg)
					equal = false;
			}
			else if (Object1.ForeignFlg == null ^ Object2.ForeignFlg == null )
			{
				equal = false;
			}
			if ( Object1.GsCountryNodeInfoId != null && Object2.GsCountryNodeInfoId != null )
			{
				if (Object1.GsCountryNodeInfoId != Object2.GsCountryNodeInfoId)
					equal = false;
			}
			else if (Object1.GsCountryNodeInfoId == null ^ Object2.GsCountryNodeInfoId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeQualId != null && Object2.EdCodeQualId != null )
			{
				if (Object1.EdCodeQualId != Object2.EdCodeQualId)
					equal = false;
			}
			else if (Object1.EdCodeQualId == null ^ Object2.EdCodeQualId == null )
			{
				equal = false;
			}
			if ( Object1.EdCdeQualBrnId != null && Object2.EdCdeQualBrnId != null )
			{
				if (Object1.EdCdeQualBrnId != Object2.EdCdeQualBrnId)
					equal = false;
			}
			else if (Object1.EdCdeQualBrnId == null ^ Object2.EdCdeQualBrnId == null )
			{
				equal = false;
			}
			if (Object1.MinPercnt != Object2.MinPercnt)
				equal = false;
			if ( Object1.AdmCdeExamGrdngId != null && Object2.AdmCdeExamGrdngId != null )
			{
				if (Object1.AdmCdeExamGrdngId != Object2.AdmCdeExamGrdngId)
					equal = false;
			}
			else if (Object1.AdmCdeExamGrdngId == null ^ Object2.AdmCdeExamGrdngId == null )
			{
				equal = false;
			}
			if ( Object1.MinCgpa != null && Object2.MinCgpa != null )
			{
				if (Object1.MinCgpa != Object2.MinCgpa)
					equal = false;
			}
			else if (Object1.MinCgpa == null ^ Object2.MinCgpa == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AdmPrecondQualBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AdmPrecondQualComparer GetComparer()
        {
            return new AdmPrecondQualComparer();
        }
        */

        // Comparer delegates back to AdmPrecondQual
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AdmPrecondQual rhs, AdmPrecondQualColumn which)
        {
            switch (which)
            {
            	
            	
            	case AdmPrecondQualColumn.AdmPrecondQualId:
            		return this.AdmPrecondQualId.CompareTo(rhs.AdmPrecondQualId);
            		
            		                 
            	
            	
            	case AdmPrecondQualColumn.AsCodeDegreeClassId:
            		return this.AsCodeDegreeClassId.CompareTo(rhs.AsCodeDegreeClassId);
            		
            		                 
            	
            	
            	case AdmPrecondQualColumn.AsCodeDegreeId:
            		return this.AsCodeDegreeId.CompareTo(rhs.AsCodeDegreeId);
            		
            		                 
            	
            	
            	case AdmPrecondQualColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case AdmPrecondQualColumn.EntMainId:
            		return this.EntMainId.Value.CompareTo(rhs.EntMainId.Value);
            		
            		                 
            	
            	
            	case AdmPrecondQualColumn.QualNatFlg:
            		return this.QualNatFlg.Value.CompareTo(rhs.QualNatFlg.Value);
            		
            		                 
            	
            	
            	case AdmPrecondQualColumn.CitizenFlg:
            		return this.CitizenFlg.Value.CompareTo(rhs.CitizenFlg.Value);
            		
            		                 
            	
            	
            	case AdmPrecondQualColumn.ForeignFlg:
            		return this.ForeignFlg.Value.CompareTo(rhs.ForeignFlg.Value);
            		
            		                 
            	
            	
            	case AdmPrecondQualColumn.GsCountryNodeInfoId:
            		return this.GsCountryNodeInfoId.Value.CompareTo(rhs.GsCountryNodeInfoId.Value);
            		
            		                 
            	
            	
            	case AdmPrecondQualColumn.EdCodeQualId:
            		return this.EdCodeQualId.Value.CompareTo(rhs.EdCodeQualId.Value);
            		
            		                 
            	
            	
            	case AdmPrecondQualColumn.EdCdeQualBrnId:
            		return this.EdCdeQualBrnId.Value.CompareTo(rhs.EdCdeQualBrnId.Value);
            		
            		                 
            	
            	
            	case AdmPrecondQualColumn.MinPercnt:
            		return this.MinPercnt.CompareTo(rhs.MinPercnt);
            		
            		                 
            	
            	
            	case AdmPrecondQualColumn.AdmCdeExamGrdngId:
            		return this.AdmCdeExamGrdngId.Value.CompareTo(rhs.AdmCdeExamGrdngId.Value);
            		
            		                 
            	
            	
            	case AdmPrecondQualColumn.MinCgpa:
            		return this.MinCgpa.Value.CompareTo(rhs.MinCgpa.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AdmPrecondQualKey> Members
		
		// member variable for the EntityId property
		private AdmPrecondQualKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AdmPrecondQualKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AdmPrecondQualKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AdmPrecondQual")
					.Append("|").Append( this.AdmPrecondQualId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{15}{14}- AdmPrecondQualId: {0}{14}- AsCodeDegreeClassId: {1}{14}- AsCodeDegreeId: {2}{14}- AsFacultyInfoId: {3}{14}- EntMainId: {4}{14}- QualNatFlg: {5}{14}- CitizenFlg: {6}{14}- ForeignFlg: {7}{14}- GsCountryNodeInfoId: {8}{14}- EdCodeQualId: {9}{14}- EdCdeQualBrnId: {10}{14}- MinPercnt: {11}{14}- AdmCdeExamGrdngId: {12}{14}- MinCgpa: {13}{14}{16}", 
				this.AdmPrecondQualId,
				this.AsCodeDegreeClassId,
				this.AsCodeDegreeId,
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				(this.EntMainId == null) ? string.Empty : this.EntMainId.ToString(),
				(this.QualNatFlg == null) ? string.Empty : this.QualNatFlg.ToString(),
				(this.CitizenFlg == null) ? string.Empty : this.CitizenFlg.ToString(),
				(this.ForeignFlg == null) ? string.Empty : this.ForeignFlg.ToString(),
				(this.GsCountryNodeInfoId == null) ? string.Empty : this.GsCountryNodeInfoId.ToString(),
				(this.EdCodeQualId == null) ? string.Empty : this.EdCodeQualId.ToString(),
				(this.EdCdeQualBrnId == null) ? string.Empty : this.EdCdeQualBrnId.ToString(),
				this.MinPercnt,
				(this.AdmCdeExamGrdngId == null) ? string.Empty : this.AdmCdeExamGrdngId.ToString(),
				(this.MinCgpa == null) ? string.Empty : this.MinCgpa.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ADM_PRECOND_QUAL' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AdmPrecondQualEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ADM_PRECOND_QUAL_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ADM_PRECOND_QUAL"</remarks>
		public System.Decimal AdmPrecondQualId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalAdmPrecondQualId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// AS_CODE_DEGREE_CLASS_ID : 
		/// </summary>
		public System.Decimal		  AsCodeDegreeClassId = 0.0m;
		
		/// <summary>
		/// AS_CODE_DEGREE_ID : 
		/// </summary>
		public System.Decimal		  AsCodeDegreeId = 0.0m;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// ENT_MAIN_ID : 
		/// </summary>
		public System.Decimal?		  EntMainId = null;
		
		/// <summary>
		/// QUAL_NAT_FLG : 
		/// </summary>
		public System.Boolean?		  QualNatFlg = null;
		
		/// <summary>
		/// CITIZEN_FLG : 
		/// </summary>
		public System.Boolean?		  CitizenFlg = null;
		
		/// <summary>
		/// FOREIGN_FLG : 
		/// </summary>
		public System.Boolean?		  ForeignFlg = null;
		
		/// <summary>
		/// GS_COUNTRY_NODE_INFO_ID : 
		/// </summary>
		public System.Decimal?		  GsCountryNodeInfoId = null;
		
		/// <summary>
		/// ED_CODE_QUAL_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeQualId = null;
		
		/// <summary>
		/// ED_CDE_QUAL_BRN_ID : 
		/// </summary>
		public System.Decimal?		  EdCdeQualBrnId = null;
		
		/// <summary>
		/// MIN_PERCNT : 
		/// </summary>
		public System.Decimal		  MinPercnt = 0.0m;
		
		/// <summary>
		/// ADM_CDE_EXAM_GRDNG_ID : NU:PG QUAL GRADE
		/// </summary>
		public System.Decimal?		  AdmCdeExamGrdngId = null;
		
		/// <summary>
		/// MIN_CGPA : 
		/// </summary>
		public System.Decimal?		  MinCgpa = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdmCdeExamGrdng _admCdeExamGrdngIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdeExamGrdng"/>.
		/// </summary>
		/// <value>The source AdmCdeExamGrdng for AdmCdeExamGrdngId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmCdeExamGrdng AdmCdeExamGrdngIdSource
      	{
            get { return this._admCdeExamGrdngIdSource; }
            set { this._admCdeExamGrdngIdSource = value; }
      	}
		private AsCodeDegree _asCodeDegreeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return this._asCodeDegreeIdSource; }
            set { this._asCodeDegreeIdSource = value; }
      	}
		private AsCodeDegreeClass _asCodeDegreeClassIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return this._asCodeDegreeClassIdSource; }
            set { this._asCodeDegreeClassIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdCdeQualBrn _edCdeQualBrnIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeQualBrn"/>.
		/// </summary>
		/// <value>The source EdCdeQualBrn for EdCdeQualBrnId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCdeQualBrn EdCdeQualBrnIdSource
      	{
            get { return this._edCdeQualBrnIdSource; }
            set { this._edCdeQualBrnIdSource = value; }
      	}
		private EdCodeQual _edCodeQualIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeQual"/>.
		/// </summary>
		/// <value>The source EdCodeQual for EdCodeQualId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeQual EdCodeQualIdSource
      	{
            get { return this._edCodeQualIdSource; }
            set { this._edCodeQualIdSource = value; }
      	}
		private EntityMain _entMainIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return this._entMainIdSource; }
            set { this._entMainIdSource = value; }
      	}
		private GsCountryNode _gsCountryNodeInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCountryNode"/>.
		/// </summary>
		/// <value>The source GsCountryNode for GsCountryNodeInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCountryNode GsCountryNodeInfoIdSource
      	{
            get { return this._gsCountryNodeInfoIdSource; }
            set { this._gsCountryNodeInfoIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AdmPrecondQualEntityData _tmp = new AdmPrecondQualEntityData();
						
			_tmp.AdmPrecondQualId = this.AdmPrecondQualId;
			_tmp.OriginalAdmPrecondQualId = this.OriginalAdmPrecondQualId;
			
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EntMainId = this.EntMainId;
			_tmp.QualNatFlg = this.QualNatFlg;
			_tmp.CitizenFlg = this.CitizenFlg;
			_tmp.ForeignFlg = this.ForeignFlg;
			_tmp.GsCountryNodeInfoId = this.GsCountryNodeInfoId;
			_tmp.EdCodeQualId = this.EdCodeQualId;
			_tmp.EdCdeQualBrnId = this.EdCdeQualBrnId;
			_tmp.MinPercnt = this.MinPercnt;
			_tmp.AdmCdeExamGrdngId = this.AdmCdeExamGrdngId;
			_tmp.MinCgpa = this.MinCgpa;
			
			#region Source Parent Composite Entities
			if (this.AdmCdeExamGrdngIdSource != null)
				_tmp.AdmCdeExamGrdngIdSource = MakeCopyOf(this.AdmCdeExamGrdngIdSource) as AdmCdeExamGrdng;
			if (this.AsCodeDegreeIdSource != null)
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null)
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdCdeQualBrnIdSource != null)
				_tmp.EdCdeQualBrnIdSource = MakeCopyOf(this.EdCdeQualBrnIdSource) as EdCdeQualBrn;
			if (this.EdCodeQualIdSource != null)
				_tmp.EdCodeQualIdSource = MakeCopyOf(this.EdCodeQualIdSource) as EdCodeQual;
			if (this.EntMainIdSource != null)
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource) as EntityMain;
			if (this.GsCountryNodeInfoIdSource != null)
				_tmp.GsCountryNodeInfoIdSource = MakeCopyOf(this.GsCountryNodeInfoIdSource) as GsCountryNode;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AdmPrecondQualEntityData _tmp = new AdmPrecondQualEntityData();
						
			_tmp.AdmPrecondQualId = this.AdmPrecondQualId;
			_tmp.OriginalAdmPrecondQualId = this.OriginalAdmPrecondQualId;
			
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EntMainId = this.EntMainId;
			_tmp.QualNatFlg = this.QualNatFlg;
			_tmp.CitizenFlg = this.CitizenFlg;
			_tmp.ForeignFlg = this.ForeignFlg;
			_tmp.GsCountryNodeInfoId = this.GsCountryNodeInfoId;
			_tmp.EdCodeQualId = this.EdCodeQualId;
			_tmp.EdCdeQualBrnId = this.EdCdeQualBrnId;
			_tmp.MinPercnt = this.MinPercnt;
			_tmp.AdmCdeExamGrdngId = this.AdmCdeExamGrdngId;
			_tmp.MinCgpa = this.MinCgpa;
			
			#region Source Parent Composite Entities
			if (this.AdmCdeExamGrdngIdSource != null && existingCopies.Contains(this.AdmCdeExamGrdngIdSource))
				_tmp.AdmCdeExamGrdngIdSource = existingCopies[this.AdmCdeExamGrdngIdSource] as AdmCdeExamGrdng;
			else
				_tmp.AdmCdeExamGrdngIdSource = MakeCopyOf(this.AdmCdeExamGrdngIdSource, existingCopies) as AdmCdeExamGrdng;
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				_tmp.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				_tmp.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdCdeQualBrnIdSource != null && existingCopies.Contains(this.EdCdeQualBrnIdSource))
				_tmp.EdCdeQualBrnIdSource = existingCopies[this.EdCdeQualBrnIdSource] as EdCdeQualBrn;
			else
				_tmp.EdCdeQualBrnIdSource = MakeCopyOf(this.EdCdeQualBrnIdSource, existingCopies) as EdCdeQualBrn;
			if (this.EdCodeQualIdSource != null && existingCopies.Contains(this.EdCodeQualIdSource))
				_tmp.EdCodeQualIdSource = existingCopies[this.EdCodeQualIdSource] as EdCodeQual;
			else
				_tmp.EdCodeQualIdSource = MakeCopyOf(this.EdCodeQualIdSource, existingCopies) as EdCodeQual;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				_tmp.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.GsCountryNodeInfoIdSource != null && existingCopies.Contains(this.GsCountryNodeInfoIdSource))
				_tmp.GsCountryNodeInfoIdSource = existingCopies[this.GsCountryNodeInfoIdSource] as GsCountryNode;
			else
				_tmp.GsCountryNodeInfoIdSource = MakeCopyOf(this.GsCountryNodeInfoIdSource, existingCopies) as GsCountryNode;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmPrecondQualColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AdmPrecondQualColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmPrecondQualColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AdmPrecondQualColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmPrecondQualColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AdmPrecondQualColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AdmPrecondQualEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AdmPrecondQualEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmPrecondQualColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AdmPrecondQualColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AdmPrecondQualEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AdmPrecondQualEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AdmPrecondQualEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AdmPrecondQual"/> object.
	/// </remarks>
	public class AdmPrecondQualEventArgs : System.EventArgs
	{
		private AdmPrecondQualColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AdmPrecondQualEventArgs class.
		///</summary>
		public AdmPrecondQualEventArgs(AdmPrecondQualColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AdmPrecondQualEventArgs class.
		///</summary>
		public AdmPrecondQualEventArgs(AdmPrecondQualColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AdmPrecondQualColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AdmPrecondQualColumn" />
		public AdmPrecondQualColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AdmPrecondQual related events.
	///</summary>
	public delegate void AdmPrecondQualEventHandler(object sender, AdmPrecondQualEventArgs e);
	
	#region AdmPrecondQualComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AdmPrecondQualComparer : System.Collections.Generic.IComparer<AdmPrecondQual>
	{
		AdmPrecondQualColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AdmPrecondQualComparer"/> class.
        /// </summary>
		public AdmPrecondQualComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AdmPrecondQualComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AdmPrecondQualComparer(AdmPrecondQualColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AdmPrecondQual"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AdmPrecondQual"/> to compare.</param>
        /// <param name="b">The second <c>AdmPrecondQual</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AdmPrecondQual a, AdmPrecondQual b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AdmPrecondQual entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AdmPrecondQual a, AdmPrecondQual b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AdmPrecondQualColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AdmPrecondQualKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AdmPrecondQual"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AdmPrecondQualKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AdmPrecondQualKey class.
		/// </summary>
		public AdmPrecondQualKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmPrecondQualKey class.
		/// </summary>
		public AdmPrecondQualKey(AdmPrecondQualBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AdmPrecondQualId = entity.AdmPrecondQualId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmPrecondQualKey class.
		/// </summary>
		public AdmPrecondQualKey(System.Decimal _admPrecondQualId)
		{
			#region Init Properties

			this.AdmPrecondQualId = _admPrecondQualId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AdmPrecondQualBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AdmPrecondQualBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AdmPrecondQualId property
		private System.Decimal _admPrecondQualId;
		
		/// <summary>
		/// Gets or sets the AdmPrecondQualId property.
		/// </summary>
		public System.Decimal AdmPrecondQualId
		{
			get { return _admPrecondQualId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AdmPrecondQualId = value;
				
				_admPrecondQualId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AdmPrecondQualId = ( values["AdmPrecondQualId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["AdmPrecondQualId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AdmPrecondQualId", AdmPrecondQualId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AdmPrecondQualId: {0}{1}",
								AdmPrecondQualId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AdmPrecondQualColumn Enum
	
	/// <summary>
	/// Enumerate the AdmPrecondQual columns.
	/// </summary>
	[Serializable]
	public enum AdmPrecondQualColumn : int
	{
		/// <summary>
		/// AdmPrecondQualId : 
		/// </summary>
		[EnumTextValue("ADM_PRECOND_QUAL_ID")]
		[ColumnEnum("ADM_PRECOND_QUAL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		AdmPrecondQualId = 1,
		/// <summary>
		/// AsCodeDegreeClassId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_CLASS_ID")]
		[ColumnEnum("AS_CODE_DEGREE_CLASS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsCodeDegreeClassId = 2,
		/// <summary>
		/// AsCodeDegreeId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_ID")]
		[ColumnEnum("AS_CODE_DEGREE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsCodeDegreeId = 3,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 4,
		/// <summary>
		/// EntMainId : 
		/// </summary>
		[EnumTextValue("ENT_MAIN_ID")]
		[ColumnEnum("ENT_MAIN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntMainId = 5,
		/// <summary>
		/// QualNatFlg : 
		/// </summary>
		[EnumTextValue("QUAL_NAT_FLG")]
		[ColumnEnum("QUAL_NAT_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		QualNatFlg = 6,
		/// <summary>
		/// CitizenFlg : 
		/// </summary>
		[EnumTextValue("CITIZEN_FLG")]
		[ColumnEnum("CITIZEN_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		CitizenFlg = 7,
		/// <summary>
		/// ForeignFlg : 
		/// </summary>
		[EnumTextValue("FOREIGN_FLG")]
		[ColumnEnum("FOREIGN_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ForeignFlg = 8,
		/// <summary>
		/// GsCountryNodeInfoId : 
		/// </summary>
		[EnumTextValue("GS_COUNTRY_NODE_INFO_ID")]
		[ColumnEnum("GS_COUNTRY_NODE_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCountryNodeInfoId = 9,
		/// <summary>
		/// EdCodeQualId : 
		/// </summary>
		[EnumTextValue("ED_CODE_QUAL_ID")]
		[ColumnEnum("ED_CODE_QUAL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeQualId = 10,
		/// <summary>
		/// EdCdeQualBrnId : 
		/// </summary>
		[EnumTextValue("ED_CDE_QUAL_BRN_ID")]
		[ColumnEnum("ED_CDE_QUAL_BRN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCdeQualBrnId = 11,
		/// <summary>
		/// MinPercnt : 
		/// </summary>
		[EnumTextValue("MIN_PERCNT")]
		[ColumnEnum("MIN_PERCNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		MinPercnt = 12,
		/// <summary>
		/// AdmCdeExamGrdngId : NU:PG QUAL GRADE
		/// </summary>
		[EnumTextValue("ADM_CDE_EXAM_GRDNG_ID")]
		[ColumnEnum("ADM_CDE_EXAM_GRDNG_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmCdeExamGrdngId = 13,
		/// <summary>
		/// MinCgpa : 
		/// </summary>
		[EnumTextValue("MIN_CGPA")]
		[ColumnEnum("MIN_CGPA", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MinCgpa = 14
	}//End enum

	#endregion AdmPrecondQualColumn Enum

} // end namespace
