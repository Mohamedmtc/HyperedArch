
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SpoOfferContinue.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SPO_OFFER_CONTINUE' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SpoOfferContinueBase : EntityBase, ISpoOfferContinue, IEntityId<SpoOfferContinueKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SpoOfferContinueEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SpoOfferContinueEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SpoOfferContinueEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SpoOfferContinue> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SpoOfferContinueEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SpoOfferContinueEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SpoOfferContinueBase"/> instance.
		///</summary>
		public SpoOfferContinueBase()
		{
			this.entityData = new SpoOfferContinueEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SpoOfferContinueBase"/> instance.
		///</summary>
		///<param name="_spoSponsorContinueId">شروط استمرار الكفالة</param>
		///<param name="_spoSponsorOfferId"></param>
		///<param name="_accumGpaFrom"></param>
		///<param name="_accumGpaTo"></param>
		///<param name="_accumChFrom"></param>
		///<param name="_accumChTo"></param>
		///<param name="_actvtyFlg">EJUST مؤشر حصول على نشاط فى العام</param>
		///<param name="_failCrsFlg">السماح برسوب فى مقررات</param>
		///<param name="_spoPercent">نوع الكفالة "نسبة /قيمةXXXXX"</param>
		///<param name="_spoAmount">نوع الكفالة "نسبة /قيمةXXXXX"</param>
		///<param name="_notes">ملاحظات</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public SpoOfferContinueBase(System.Decimal _spoSponsorContinueId, System.Decimal _spoSponsorOfferId, 
			System.Decimal? _accumGpaFrom, System.Decimal? _accumGpaTo, System.Decimal? _accumChFrom, 
			System.Decimal? _accumChTo, System.Boolean? _actvtyFlg, System.Boolean? _failCrsFlg, 
			System.Decimal? _spoPercent, System.Decimal? _spoAmount, System.String _notes, 
			System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			this.entityData = new SpoOfferContinueEntityData();
			this.backupData = null;

			this.SpoSponsorContinueId = _spoSponsorContinueId;
			this.SpoSponsorOfferId = _spoSponsorOfferId;
			this.AccumGpaFrom = _accumGpaFrom;
			this.AccumGpaTo = _accumGpaTo;
			this.AccumChFrom = _accumChFrom;
			this.AccumChTo = _accumChTo;
			this.ActvtyFlg = _actvtyFlg;
			this.FailCrsFlg = _failCrsFlg;
			this.SpoPercent = _spoPercent;
			this.SpoAmount = _spoAmount;
			this.Notes = _notes;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SpoOfferContinue"/> instance.
		///</summary>
		///<param name="_spoSponsorContinueId">شروط استمرار الكفالة</param>
		///<param name="_spoSponsorOfferId"></param>
		///<param name="_accumGpaFrom"></param>
		///<param name="_accumGpaTo"></param>
		///<param name="_accumChFrom"></param>
		///<param name="_accumChTo"></param>
		///<param name="_actvtyFlg">EJUST مؤشر حصول على نشاط فى العام</param>
		///<param name="_failCrsFlg">السماح برسوب فى مقررات</param>
		///<param name="_spoPercent">نوع الكفالة "نسبة /قيمةXXXXX"</param>
		///<param name="_spoAmount">نوع الكفالة "نسبة /قيمةXXXXX"</param>
		///<param name="_notes">ملاحظات</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static SpoOfferContinue CreateSpoOfferContinue(System.Decimal _spoSponsorContinueId, System.Decimal _spoSponsorOfferId, 
			System.Decimal? _accumGpaFrom, System.Decimal? _accumGpaTo, System.Decimal? _accumChFrom, 
			System.Decimal? _accumChTo, System.Boolean? _actvtyFlg, System.Boolean? _failCrsFlg, 
			System.Decimal? _spoPercent, System.Decimal? _spoAmount, System.String _notes, 
			System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			SpoOfferContinue newSpoOfferContinue = new SpoOfferContinue();
			newSpoOfferContinue.SpoSponsorContinueId = _spoSponsorContinueId;
			newSpoOfferContinue.SpoSponsorOfferId = _spoSponsorOfferId;
			newSpoOfferContinue.AccumGpaFrom = _accumGpaFrom;
			newSpoOfferContinue.AccumGpaTo = _accumGpaTo;
			newSpoOfferContinue.AccumChFrom = _accumChFrom;
			newSpoOfferContinue.AccumChTo = _accumChTo;
			newSpoOfferContinue.ActvtyFlg = _actvtyFlg;
			newSpoOfferContinue.FailCrsFlg = _failCrsFlg;
			newSpoOfferContinue.SpoPercent = _spoPercent;
			newSpoOfferContinue.SpoAmount = _spoAmount;
			newSpoOfferContinue.Notes = _notes;
			newSpoOfferContinue.SeUserId = _seUserId;
			newSpoOfferContinue.LastDate = _lastDate;
			return newSpoOfferContinue;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SpoSponsorContinueId property. 
		///		شروط استمرار الكفالة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"شروط استمرار الكفالة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SpoSponsorContinueId
		{
			get
			{
				return this.entityData.SpoSponsorContinueId; 
			}
			
			set
			{
				if (this.entityData.SpoSponsorContinueId == value)
					return;
					
				OnColumnChanging(SpoOfferContinueColumn.SpoSponsorContinueId, this.entityData.SpoSponsorContinueId);
				this.entityData.SpoSponsorContinueId = value;
				this.EntityId.SpoSponsorContinueId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoOfferContinueColumn.SpoSponsorContinueId, this.entityData.SpoSponsorContinueId);
				OnPropertyChanged("SpoSponsorContinueId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SPO_SPONSOR_CONTINUE_ID property.
		///		شروط استمرار الكفالة
		/// </summary>
		/// <remarks>This is the original value of the SPO_SPONSOR_CONTINUE_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSpoSponsorContinueId
		{
			get { return this.entityData.OriginalSpoSponsorContinueId; }
			set { this.entityData.OriginalSpoSponsorContinueId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the SpoSponsorOfferId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SpoSponsorOfferId
		{
			get
			{
				return this.entityData.SpoSponsorOfferId; 
			}
			
			set
			{
				if (this.entityData.SpoSponsorOfferId == value)
					return;
					
				OnColumnChanging(SpoOfferContinueColumn.SpoSponsorOfferId, this.entityData.SpoSponsorOfferId);
				this.entityData.SpoSponsorOfferId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoOfferContinueColumn.SpoSponsorOfferId, this.entityData.SpoSponsorOfferId);
				OnPropertyChanged("SpoSponsorOfferId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccumGpaFrom property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAccumGpaFromNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AccumGpaFrom
		{
			get
			{
				return this.entityData.AccumGpaFrom; 
			}
			
			set
			{
				if (this.entityData.AccumGpaFrom == value)
					return;
					
				OnColumnChanging(SpoOfferContinueColumn.AccumGpaFrom, this.entityData.AccumGpaFrom);
				this.entityData.AccumGpaFrom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoOfferContinueColumn.AccumGpaFrom, this.entityData.AccumGpaFrom);
				OnPropertyChanged("AccumGpaFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccumGpaTo property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAccumGpaToNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AccumGpaTo
		{
			get
			{
				return this.entityData.AccumGpaTo; 
			}
			
			set
			{
				if (this.entityData.AccumGpaTo == value)
					return;
					
				OnColumnChanging(SpoOfferContinueColumn.AccumGpaTo, this.entityData.AccumGpaTo);
				this.entityData.AccumGpaTo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoOfferContinueColumn.AccumGpaTo, this.entityData.AccumGpaTo);
				OnPropertyChanged("AccumGpaTo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccumChFrom property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAccumChFromNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AccumChFrom
		{
			get
			{
				return this.entityData.AccumChFrom; 
			}
			
			set
			{
				if (this.entityData.AccumChFrom == value)
					return;
					
				OnColumnChanging(SpoOfferContinueColumn.AccumChFrom, this.entityData.AccumChFrom);
				this.entityData.AccumChFrom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoOfferContinueColumn.AccumChFrom, this.entityData.AccumChFrom);
				OnPropertyChanged("AccumChFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccumChTo property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAccumChToNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AccumChTo
		{
			get
			{
				return this.entityData.AccumChTo; 
			}
			
			set
			{
				if (this.entityData.AccumChTo == value)
					return;
					
				OnColumnChanging(SpoOfferContinueColumn.AccumChTo, this.entityData.AccumChTo);
				this.entityData.AccumChTo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoOfferContinueColumn.AccumChTo, this.entityData.AccumChTo);
				OnPropertyChanged("AccumChTo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ActvtyFlg property. 
		///		EJUST مؤشر حصول على نشاط فى العام
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsActvtyFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"EJUST مؤشر حصول على نشاط فى العام"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ActvtyFlg
		{
			get
			{
				return this.entityData.ActvtyFlg; 
			}
			
			set
			{
				if (this.entityData.ActvtyFlg == value)
					return;
					
				OnColumnChanging(SpoOfferContinueColumn.ActvtyFlg, this.entityData.ActvtyFlg);
				this.entityData.ActvtyFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoOfferContinueColumn.ActvtyFlg, this.entityData.ActvtyFlg);
				OnPropertyChanged("ActvtyFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FailCrsFlg property. 
		///		السماح برسوب فى مقررات
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsFailCrsFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"السماح برسوب فى مقررات"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? FailCrsFlg
		{
			get
			{
				return this.entityData.FailCrsFlg; 
			}
			
			set
			{
				if (this.entityData.FailCrsFlg == value)
					return;
					
				OnColumnChanging(SpoOfferContinueColumn.FailCrsFlg, this.entityData.FailCrsFlg);
				this.entityData.FailCrsFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoOfferContinueColumn.FailCrsFlg, this.entityData.FailCrsFlg);
				OnPropertyChanged("FailCrsFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SpoPercent property. 
		///		نوع الكفالة "نسبة /قيمةXXXXX"
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSpoPercentNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"نوع الكفالة 'نسبة /قيمةXXXXX'"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SpoPercent
		{
			get
			{
				return this.entityData.SpoPercent; 
			}
			
			set
			{
				if (this.entityData.SpoPercent == value)
					return;
					
				OnColumnChanging(SpoOfferContinueColumn.SpoPercent, this.entityData.SpoPercent);
				this.entityData.SpoPercent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoOfferContinueColumn.SpoPercent, this.entityData.SpoPercent);
				OnPropertyChanged("SpoPercent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SpoAmount property. 
		///		نوع الكفالة "نسبة /قيمةXXXXX"
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSpoAmountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"نوع الكفالة 'نسبة /قيمةXXXXX'"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SpoAmount
		{
			get
			{
				return this.entityData.SpoAmount; 
			}
			
			set
			{
				if (this.entityData.SpoAmount == value)
					return;
					
				OnColumnChanging(SpoOfferContinueColumn.SpoAmount, this.entityData.SpoAmount);
				this.entityData.SpoAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoOfferContinueColumn.SpoAmount, this.entityData.SpoAmount);
				OnPropertyChanged("SpoAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		ملاحظات
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"ملاحظات"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(SpoOfferContinueColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoOfferContinueColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(SpoOfferContinueColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoOfferContinueColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(SpoOfferContinueColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SpoOfferContinueColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="SpoSponsorOffer"/>.
		/// </summary>
		/// <value>The source SpoSponsorOffer for SpoSponsorOfferId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SpoSponsorOffer SpoSponsorOfferIdSource
      	{
            get { return entityData.SpoSponsorOfferIdSource; }
            set { entityData.SpoSponsorOfferIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SPO_OFFER_CONTINUE"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SPO_SPONSOR_CONTINUE_ID", "SPO_SPONSOR_OFFER_ID", "ACCUM_GPA_FROM", "ACCUM_GPA_TO", "ACCUM_CH_FROM", "ACCUM_CH_TO", "ACTVTY_FLG", "FAIL_CRS_FLG", "SPO_PERCENT", "SPO_AMOUNT", "NOTES", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SpoOfferContinueEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SpoOfferContinue) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SpoOfferContinue>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SpoOfferContinue);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SpoOfferContinue Entity 
		///</summary>
		protected virtual SpoOfferContinue Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SpoOfferContinue copy = new SpoOfferContinue();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SpoSponsorContinueId = this.SpoSponsorContinueId;
					copy.OriginalSpoSponsorContinueId = this.OriginalSpoSponsorContinueId;
				copy.SpoSponsorOfferId = this.SpoSponsorOfferId;
				copy.AccumGpaFrom = this.AccumGpaFrom;
				copy.AccumGpaTo = this.AccumGpaTo;
				copy.AccumChFrom = this.AccumChFrom;
				copy.AccumChTo = this.AccumChTo;
				copy.ActvtyFlg = this.ActvtyFlg;
				copy.FailCrsFlg = this.FailCrsFlg;
				copy.SpoPercent = this.SpoPercent;
				copy.SpoAmount = this.SpoAmount;
				copy.Notes = this.Notes;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.SpoSponsorOfferIdSource != null && existingCopies.Contains(this.SpoSponsorOfferIdSource))
				copy.SpoSponsorOfferIdSource = existingCopies[this.SpoSponsorOfferIdSource] as SpoSponsorOffer;
			else
				copy.SpoSponsorOfferIdSource = MakeCopyOf(this.SpoSponsorOfferIdSource, existingCopies) as SpoSponsorOffer;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SpoOfferContinue Entity 
		///</summary>
		public virtual SpoOfferContinue Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SpoOfferContinue Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SpoOfferContinue DeepCopy()
		{
			return EntityHelper.Clone<SpoOfferContinue>(this as SpoOfferContinue);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SpoOfferContinueEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SpoOfferContinueEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SpoOfferContinueEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SpoOfferContinueColumn column)
		{
			switch(column)
			{
					case SpoOfferContinueColumn.SpoSponsorContinueId:
					return entityData.SpoSponsorContinueId != _originalData.SpoSponsorContinueId;
					case SpoOfferContinueColumn.SpoSponsorOfferId:
					return entityData.SpoSponsorOfferId != _originalData.SpoSponsorOfferId;
					case SpoOfferContinueColumn.AccumGpaFrom:
					return entityData.AccumGpaFrom != _originalData.AccumGpaFrom;
					case SpoOfferContinueColumn.AccumGpaTo:
					return entityData.AccumGpaTo != _originalData.AccumGpaTo;
					case SpoOfferContinueColumn.AccumChFrom:
					return entityData.AccumChFrom != _originalData.AccumChFrom;
					case SpoOfferContinueColumn.AccumChTo:
					return entityData.AccumChTo != _originalData.AccumChTo;
					case SpoOfferContinueColumn.ActvtyFlg:
					return entityData.ActvtyFlg != _originalData.ActvtyFlg;
					case SpoOfferContinueColumn.FailCrsFlg:
					return entityData.FailCrsFlg != _originalData.FailCrsFlg;
					case SpoOfferContinueColumn.SpoPercent:
					return entityData.SpoPercent != _originalData.SpoPercent;
					case SpoOfferContinueColumn.SpoAmount:
					return entityData.SpoAmount != _originalData.SpoAmount;
					case SpoOfferContinueColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case SpoOfferContinueColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case SpoOfferContinueColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SpoOfferContinueColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SpoSponsorContinueId != _originalData.SpoSponsorContinueId;
			result = result || entityData.SpoSponsorOfferId != _originalData.SpoSponsorOfferId;
			result = result || entityData.AccumGpaFrom != _originalData.AccumGpaFrom;
			result = result || entityData.AccumGpaTo != _originalData.AccumGpaTo;
			result = result || entityData.AccumChFrom != _originalData.AccumChFrom;
			result = result || entityData.AccumChTo != _originalData.AccumChTo;
			result = result || entityData.ActvtyFlg != _originalData.ActvtyFlg;
			result = result || entityData.FailCrsFlg != _originalData.FailCrsFlg;
			result = result || entityData.SpoPercent != _originalData.SpoPercent;
			result = result || entityData.SpoAmount != _originalData.SpoAmount;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a SpoOfferContinue Entity with the original data.
		///</summary>
		public SpoOfferContinue GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSpoOfferContinue(
				_originalData.SpoSponsorContinueId,
				_originalData.SpoSponsorOfferId,
				_originalData.AccumGpaFrom,
				_originalData.AccumGpaTo,
				_originalData.AccumChFrom,
				_originalData.AccumChTo,
				_originalData.ActvtyFlg,
				_originalData.FailCrsFlg,
				_originalData.SpoPercent,
				_originalData.SpoAmount,
				_originalData.Notes,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (SpoOfferContinue)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SpoOfferContinueBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SpoOfferContinueBase)
				return ValueEquals(this, (SpoOfferContinueBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SpoOfferContinueBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SpoSponsorContinueId.GetHashCode() ^ 
					this.SpoSponsorOfferId.GetHashCode() ^ 
					((this.AccumGpaFrom == null) ? string.Empty : this.AccumGpaFrom.ToString()).GetHashCode() ^ 
					((this.AccumGpaTo == null) ? string.Empty : this.AccumGpaTo.ToString()).GetHashCode() ^ 
					((this.AccumChFrom == null) ? string.Empty : this.AccumChFrom.ToString()).GetHashCode() ^ 
					((this.AccumChTo == null) ? string.Empty : this.AccumChTo.ToString()).GetHashCode() ^ 
					((this.ActvtyFlg == null) ? string.Empty : this.ActvtyFlg.ToString()).GetHashCode() ^ 
					((this.FailCrsFlg == null) ? string.Empty : this.FailCrsFlg.ToString()).GetHashCode() ^ 
					((this.SpoPercent == null) ? string.Empty : this.SpoPercent.ToString()).GetHashCode() ^ 
					((this.SpoAmount == null) ? string.Empty : this.SpoAmount.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SpoOfferContinueBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SpoOfferContinueBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SpoOfferContinueBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SpoOfferContinueBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SpoOfferContinueBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SpoOfferContinueBase Object1, SpoOfferContinueBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SpoSponsorContinueId != Object2.SpoSponsorContinueId)
				equal = false;
			if (Object1.SpoSponsorOfferId != Object2.SpoSponsorOfferId)
				equal = false;
			if ( Object1.AccumGpaFrom != null && Object2.AccumGpaFrom != null )
			{
				if (Object1.AccumGpaFrom != Object2.AccumGpaFrom)
					equal = false;
			}
			else if (Object1.AccumGpaFrom == null ^ Object2.AccumGpaFrom == null )
			{
				equal = false;
			}
			if ( Object1.AccumGpaTo != null && Object2.AccumGpaTo != null )
			{
				if (Object1.AccumGpaTo != Object2.AccumGpaTo)
					equal = false;
			}
			else if (Object1.AccumGpaTo == null ^ Object2.AccumGpaTo == null )
			{
				equal = false;
			}
			if ( Object1.AccumChFrom != null && Object2.AccumChFrom != null )
			{
				if (Object1.AccumChFrom != Object2.AccumChFrom)
					equal = false;
			}
			else if (Object1.AccumChFrom == null ^ Object2.AccumChFrom == null )
			{
				equal = false;
			}
			if ( Object1.AccumChTo != null && Object2.AccumChTo != null )
			{
				if (Object1.AccumChTo != Object2.AccumChTo)
					equal = false;
			}
			else if (Object1.AccumChTo == null ^ Object2.AccumChTo == null )
			{
				equal = false;
			}
			if ( Object1.ActvtyFlg != null && Object2.ActvtyFlg != null )
			{
				if (Object1.ActvtyFlg != Object2.ActvtyFlg)
					equal = false;
			}
			else if (Object1.ActvtyFlg == null ^ Object2.ActvtyFlg == null )
			{
				equal = false;
			}
			if ( Object1.FailCrsFlg != null && Object2.FailCrsFlg != null )
			{
				if (Object1.FailCrsFlg != Object2.FailCrsFlg)
					equal = false;
			}
			else if (Object1.FailCrsFlg == null ^ Object2.FailCrsFlg == null )
			{
				equal = false;
			}
			if ( Object1.SpoPercent != null && Object2.SpoPercent != null )
			{
				if (Object1.SpoPercent != Object2.SpoPercent)
					equal = false;
			}
			else if (Object1.SpoPercent == null ^ Object2.SpoPercent == null )
			{
				equal = false;
			}
			if ( Object1.SpoAmount != null && Object2.SpoAmount != null )
			{
				if (Object1.SpoAmount != Object2.SpoAmount)
					equal = false;
			}
			else if (Object1.SpoAmount == null ^ Object2.SpoAmount == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SpoOfferContinueBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SpoOfferContinueComparer GetComparer()
        {
            return new SpoOfferContinueComparer();
        }
        */

        // Comparer delegates back to SpoOfferContinue
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SpoOfferContinue rhs, SpoOfferContinueColumn which)
        {
            switch (which)
            {
            	
            	
            	case SpoOfferContinueColumn.SpoSponsorContinueId:
            		return this.SpoSponsorContinueId.CompareTo(rhs.SpoSponsorContinueId);
            		
            		                 
            	
            	
            	case SpoOfferContinueColumn.SpoSponsorOfferId:
            		return this.SpoSponsorOfferId.CompareTo(rhs.SpoSponsorOfferId);
            		
            		                 
            	
            	
            	case SpoOfferContinueColumn.AccumGpaFrom:
            		return this.AccumGpaFrom.Value.CompareTo(rhs.AccumGpaFrom.Value);
            		
            		                 
            	
            	
            	case SpoOfferContinueColumn.AccumGpaTo:
            		return this.AccumGpaTo.Value.CompareTo(rhs.AccumGpaTo.Value);
            		
            		                 
            	
            	
            	case SpoOfferContinueColumn.AccumChFrom:
            		return this.AccumChFrom.Value.CompareTo(rhs.AccumChFrom.Value);
            		
            		                 
            	
            	
            	case SpoOfferContinueColumn.AccumChTo:
            		return this.AccumChTo.Value.CompareTo(rhs.AccumChTo.Value);
            		
            		                 
            	
            	
            	case SpoOfferContinueColumn.ActvtyFlg:
            		return this.ActvtyFlg.Value.CompareTo(rhs.ActvtyFlg.Value);
            		
            		                 
            	
            	
            	case SpoOfferContinueColumn.FailCrsFlg:
            		return this.FailCrsFlg.Value.CompareTo(rhs.FailCrsFlg.Value);
            		
            		                 
            	
            	
            	case SpoOfferContinueColumn.SpoPercent:
            		return this.SpoPercent.Value.CompareTo(rhs.SpoPercent.Value);
            		
            		                 
            	
            	
            	case SpoOfferContinueColumn.SpoAmount:
            		return this.SpoAmount.Value.CompareTo(rhs.SpoAmount.Value);
            		
            		                 
            	
            	
            	case SpoOfferContinueColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case SpoOfferContinueColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case SpoOfferContinueColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SpoOfferContinueKey> Members
		
		// member variable for the EntityId property
		private SpoOfferContinueKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SpoOfferContinueKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SpoOfferContinueKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SpoOfferContinue")
					.Append("|").Append( this.SpoSponsorContinueId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{14}{13}- SpoSponsorContinueId: {0}{13}- SpoSponsorOfferId: {1}{13}- AccumGpaFrom: {2}{13}- AccumGpaTo: {3}{13}- AccumChFrom: {4}{13}- AccumChTo: {5}{13}- ActvtyFlg: {6}{13}- FailCrsFlg: {7}{13}- SpoPercent: {8}{13}- SpoAmount: {9}{13}- Notes: {10}{13}- SeUserId: {11}{13}- LastDate: {12}{13}{15}", 
				this.SpoSponsorContinueId,
				this.SpoSponsorOfferId,
				(this.AccumGpaFrom == null) ? string.Empty : this.AccumGpaFrom.ToString(),
				(this.AccumGpaTo == null) ? string.Empty : this.AccumGpaTo.ToString(),
				(this.AccumChFrom == null) ? string.Empty : this.AccumChFrom.ToString(),
				(this.AccumChTo == null) ? string.Empty : this.AccumChTo.ToString(),
				(this.ActvtyFlg == null) ? string.Empty : this.ActvtyFlg.ToString(),
				(this.FailCrsFlg == null) ? string.Empty : this.FailCrsFlg.ToString(),
				(this.SpoPercent == null) ? string.Empty : this.SpoPercent.ToString(),
				(this.SpoAmount == null) ? string.Empty : this.SpoAmount.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SPO_OFFER_CONTINUE' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SpoOfferContinueEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SPO_SPONSOR_CONTINUE_ID : شروط استمرار الكفالة
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SPO_OFFER_CONTINUE"</remarks>
		public System.Decimal SpoSponsorContinueId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSpoSponsorContinueId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SPO_SPONSOR_OFFER_ID : 
		/// </summary>
		public System.Decimal		  SpoSponsorOfferId = 0.0m;
		
		/// <summary>
		/// ACCUM_GPA_FROM : 
		/// </summary>
		public System.Decimal?		  AccumGpaFrom = null;
		
		/// <summary>
		/// ACCUM_GPA_TO : 
		/// </summary>
		public System.Decimal?		  AccumGpaTo = null;
		
		/// <summary>
		/// ACCUM_CH_FROM : 
		/// </summary>
		public System.Decimal?		  AccumChFrom = null;
		
		/// <summary>
		/// ACCUM_CH_TO : 
		/// </summary>
		public System.Decimal?		  AccumChTo = null;
		
		/// <summary>
		/// ACTVTY_FLG : EJUST مؤشر حصول على نشاط فى العام
		/// </summary>
		public System.Boolean?		  ActvtyFlg = null;
		
		/// <summary>
		/// FAIL_CRS_FLG : السماح برسوب فى مقررات
		/// </summary>
		public System.Boolean?		  FailCrsFlg = null;
		
		/// <summary>
		/// SPO_PERCENT : نوع الكفالة "نسبة /قيمةXXXXX"
		/// </summary>
		public System.Decimal?		  SpoPercent = null;
		
		/// <summary>
		/// SPO_AMOUNT : نوع الكفالة "نسبة /قيمةXXXXX"
		/// </summary>
		public System.Decimal?		  SpoAmount = null;
		
		/// <summary>
		/// NOTES : ملاحظات
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private SpoSponsorOffer _spoSponsorOfferIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SpoSponsorOffer"/>.
		/// </summary>
		/// <value>The source SpoSponsorOffer for SpoSponsorOfferId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SpoSponsorOffer SpoSponsorOfferIdSource
      	{
            get { return this._spoSponsorOfferIdSource; }
            set { this._spoSponsorOfferIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SpoOfferContinueEntityData _tmp = new SpoOfferContinueEntityData();
						
			_tmp.SpoSponsorContinueId = this.SpoSponsorContinueId;
			_tmp.OriginalSpoSponsorContinueId = this.OriginalSpoSponsorContinueId;
			
			_tmp.SpoSponsorOfferId = this.SpoSponsorOfferId;
			_tmp.AccumGpaFrom = this.AccumGpaFrom;
			_tmp.AccumGpaTo = this.AccumGpaTo;
			_tmp.AccumChFrom = this.AccumChFrom;
			_tmp.AccumChTo = this.AccumChTo;
			_tmp.ActvtyFlg = this.ActvtyFlg;
			_tmp.FailCrsFlg = this.FailCrsFlg;
			_tmp.SpoPercent = this.SpoPercent;
			_tmp.SpoAmount = this.SpoAmount;
			_tmp.Notes = this.Notes;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.SpoSponsorOfferIdSource != null)
				_tmp.SpoSponsorOfferIdSource = MakeCopyOf(this.SpoSponsorOfferIdSource) as SpoSponsorOffer;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SpoOfferContinueEntityData _tmp = new SpoOfferContinueEntityData();
						
			_tmp.SpoSponsorContinueId = this.SpoSponsorContinueId;
			_tmp.OriginalSpoSponsorContinueId = this.OriginalSpoSponsorContinueId;
			
			_tmp.SpoSponsorOfferId = this.SpoSponsorOfferId;
			_tmp.AccumGpaFrom = this.AccumGpaFrom;
			_tmp.AccumGpaTo = this.AccumGpaTo;
			_tmp.AccumChFrom = this.AccumChFrom;
			_tmp.AccumChTo = this.AccumChTo;
			_tmp.ActvtyFlg = this.ActvtyFlg;
			_tmp.FailCrsFlg = this.FailCrsFlg;
			_tmp.SpoPercent = this.SpoPercent;
			_tmp.SpoAmount = this.SpoAmount;
			_tmp.Notes = this.Notes;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.SpoSponsorOfferIdSource != null && existingCopies.Contains(this.SpoSponsorOfferIdSource))
				_tmp.SpoSponsorOfferIdSource = existingCopies[this.SpoSponsorOfferIdSource] as SpoSponsorOffer;
			else
				_tmp.SpoSponsorOfferIdSource = MakeCopyOf(this.SpoSponsorOfferIdSource, existingCopies) as SpoSponsorOffer;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SpoOfferContinueColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SpoOfferContinueColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SpoOfferContinueColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SpoOfferContinueColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SpoOfferContinueColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SpoOfferContinueColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SpoOfferContinueEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SpoOfferContinueEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SpoOfferContinueColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SpoOfferContinueColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SpoOfferContinueEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SpoOfferContinueEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SpoOfferContinueEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SpoOfferContinue"/> object.
	/// </remarks>
	public class SpoOfferContinueEventArgs : System.EventArgs
	{
		private SpoOfferContinueColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SpoOfferContinueEventArgs class.
		///</summary>
		public SpoOfferContinueEventArgs(SpoOfferContinueColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SpoOfferContinueEventArgs class.
		///</summary>
		public SpoOfferContinueEventArgs(SpoOfferContinueColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SpoOfferContinueColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SpoOfferContinueColumn" />
		public SpoOfferContinueColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SpoOfferContinue related events.
	///</summary>
	public delegate void SpoOfferContinueEventHandler(object sender, SpoOfferContinueEventArgs e);
	
	#region SpoOfferContinueComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SpoOfferContinueComparer : System.Collections.Generic.IComparer<SpoOfferContinue>
	{
		SpoOfferContinueColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SpoOfferContinueComparer"/> class.
        /// </summary>
		public SpoOfferContinueComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SpoOfferContinueComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SpoOfferContinueComparer(SpoOfferContinueColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SpoOfferContinue"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SpoOfferContinue"/> to compare.</param>
        /// <param name="b">The second <c>SpoOfferContinue</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SpoOfferContinue a, SpoOfferContinue b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SpoOfferContinue entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SpoOfferContinue a, SpoOfferContinue b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SpoOfferContinueColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SpoOfferContinueKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SpoOfferContinue"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SpoOfferContinueKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SpoOfferContinueKey class.
		/// </summary>
		public SpoOfferContinueKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SpoOfferContinueKey class.
		/// </summary>
		public SpoOfferContinueKey(SpoOfferContinueBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SpoSponsorContinueId = entity.SpoSponsorContinueId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SpoOfferContinueKey class.
		/// </summary>
		public SpoOfferContinueKey(System.Decimal _spoSponsorContinueId)
		{
			#region Init Properties

			this.SpoSponsorContinueId = _spoSponsorContinueId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SpoOfferContinueBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SpoOfferContinueBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SpoSponsorContinueId property
		private System.Decimal _spoSponsorContinueId;
		
		/// <summary>
		/// Gets or sets the SpoSponsorContinueId property.
		/// </summary>
		public System.Decimal SpoSponsorContinueId
		{
			get { return _spoSponsorContinueId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SpoSponsorContinueId = value;
				
				_spoSponsorContinueId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SpoSponsorContinueId = ( values["SpoSponsorContinueId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SpoSponsorContinueId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SpoSponsorContinueId", SpoSponsorContinueId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SpoSponsorContinueId: {0}{1}",
								SpoSponsorContinueId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SpoOfferContinueColumn Enum
	
	/// <summary>
	/// Enumerate the SpoOfferContinue columns.
	/// </summary>
	[Serializable]
	public enum SpoOfferContinueColumn : int
	{
		/// <summary>
		/// SpoSponsorContinueId : شروط استمرار الكفالة
		/// </summary>
		[EnumTextValue("SPO_SPONSOR_CONTINUE_ID")]
		[ColumnEnum("SPO_SPONSOR_CONTINUE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SpoSponsorContinueId = 1,
		/// <summary>
		/// SpoSponsorOfferId : 
		/// </summary>
		[EnumTextValue("SPO_SPONSOR_OFFER_ID")]
		[ColumnEnum("SPO_SPONSOR_OFFER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SpoSponsorOfferId = 2,
		/// <summary>
		/// AccumGpaFrom : 
		/// </summary>
		[EnumTextValue("ACCUM_GPA_FROM")]
		[ColumnEnum("ACCUM_GPA_FROM", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AccumGpaFrom = 3,
		/// <summary>
		/// AccumGpaTo : 
		/// </summary>
		[EnumTextValue("ACCUM_GPA_TO")]
		[ColumnEnum("ACCUM_GPA_TO", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AccumGpaTo = 4,
		/// <summary>
		/// AccumChFrom : 
		/// </summary>
		[EnumTextValue("ACCUM_CH_FROM")]
		[ColumnEnum("ACCUM_CH_FROM", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AccumChFrom = 5,
		/// <summary>
		/// AccumChTo : 
		/// </summary>
		[EnumTextValue("ACCUM_CH_TO")]
		[ColumnEnum("ACCUM_CH_TO", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AccumChTo = 6,
		/// <summary>
		/// ActvtyFlg : EJUST مؤشر حصول على نشاط فى العام
		/// </summary>
		[EnumTextValue("ACTVTY_FLG")]
		[ColumnEnum("ACTVTY_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ActvtyFlg = 7,
		/// <summary>
		/// FailCrsFlg : السماح برسوب فى مقررات
		/// </summary>
		[EnumTextValue("FAIL_CRS_FLG")]
		[ColumnEnum("FAIL_CRS_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		FailCrsFlg = 8,
		/// <summary>
		/// SpoPercent : نوع الكفالة "نسبة /قيمةXXXXX"
		/// </summary>
		[EnumTextValue("SPO_PERCENT")]
		[ColumnEnum("SPO_PERCENT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SpoPercent = 9,
		/// <summary>
		/// SpoAmount : نوع الكفالة "نسبة /قيمةXXXXX"
		/// </summary>
		[EnumTextValue("SPO_AMOUNT")]
		[ColumnEnum("SPO_AMOUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SpoAmount = 10,
		/// <summary>
		/// Notes : ملاحظات
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		Notes = 11,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 12,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 13
	}//End enum

	#endregion SpoOfferContinueColumn Enum

} // end namespace
