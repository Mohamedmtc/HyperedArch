
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SvStudComp.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SV_STUD_COMP' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SvStudCompBase : EntityBase, ISvStudComp, IEntityId<SvStudCompKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SvStudCompEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SvStudCompEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SvStudCompEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SvStudComp> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SvStudCompEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SvStudCompEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SvStudCompBase"/> instance.
		///</summary>
		public SvStudCompBase()
		{
			this.entityData = new SvStudCompEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SvStudCompBase"/> instance.
		///</summary>
		///<param name="_svStudCompId"></param>
		///<param name="_svCdeCompTypeId"></param>
		///<param name="_compDate"></param>
		///<param name="_edStudId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_compDtl"></param>
		///<param name="_svCdeReqStatusId"></param>
		///<param name="_compComments"></param>
		///<param name="_replyDate"></param>
		///<param name="_seUserId"></param>
		///<param name="_svCdeCompDId"></param>
		///<param name="_svCdeCompHId"></param>
		///<param name="_closeFlg"></param>
		///<param name="_closeDate"></param>
		///<param name="_svCdeCompReplyId"></param>
		public SvStudCompBase(System.Decimal _svStudCompId, System.Decimal _svCdeCompTypeId, 
			System.DateTime _compDate, System.Decimal _edStudId, System.Decimal _edAcadYearId, System.Decimal _edCodeSemesterId, 
			System.Decimal? _saStfMemberId, System.Decimal? _edCourseId, System.String _compDtl, 
			System.Decimal? _svCdeReqStatusId, System.String _compComments, System.DateTime? _replyDate, 
			System.Decimal? _seUserId, System.Decimal? _svCdeCompDId, System.Decimal? _svCdeCompHId, 
			System.Decimal? _closeFlg, System.DateTime? _closeDate, System.Decimal? _svCdeCompReplyId)
		{
			this.entityData = new SvStudCompEntityData();
			this.backupData = null;

			this.SvStudCompId = _svStudCompId;
			this.SvCdeCompTypeId = _svCdeCompTypeId;
			this.CompDate = _compDate;
			this.EdStudId = _edStudId;
			this.EdAcadYearId = _edAcadYearId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.SaStfMemberId = _saStfMemberId;
			this.EdCourseId = _edCourseId;
			this.CompDtl = _compDtl;
			this.SvCdeReqStatusId = _svCdeReqStatusId;
			this.CompComments = _compComments;
			this.ReplyDate = _replyDate;
			this.SeUserId = _seUserId;
			this.SvCdeCompDId = _svCdeCompDId;
			this.SvCdeCompHId = _svCdeCompHId;
			this.CloseFlg = _closeFlg;
			this.CloseDate = _closeDate;
			this.SvCdeCompReplyId = _svCdeCompReplyId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SvStudComp"/> instance.
		///</summary>
		///<param name="_svStudCompId"></param>
		///<param name="_svCdeCompTypeId"></param>
		///<param name="_compDate"></param>
		///<param name="_edStudId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_compDtl"></param>
		///<param name="_svCdeReqStatusId"></param>
		///<param name="_compComments"></param>
		///<param name="_replyDate"></param>
		///<param name="_seUserId"></param>
		///<param name="_svCdeCompDId"></param>
		///<param name="_svCdeCompHId"></param>
		///<param name="_closeFlg"></param>
		///<param name="_closeDate"></param>
		///<param name="_svCdeCompReplyId"></param>
		public static SvStudComp CreateSvStudComp(System.Decimal _svStudCompId, System.Decimal _svCdeCompTypeId, 
			System.DateTime _compDate, System.Decimal _edStudId, System.Decimal _edAcadYearId, System.Decimal _edCodeSemesterId, 
			System.Decimal? _saStfMemberId, System.Decimal? _edCourseId, System.String _compDtl, 
			System.Decimal? _svCdeReqStatusId, System.String _compComments, System.DateTime? _replyDate, 
			System.Decimal? _seUserId, System.Decimal? _svCdeCompDId, System.Decimal? _svCdeCompHId, 
			System.Decimal? _closeFlg, System.DateTime? _closeDate, System.Decimal? _svCdeCompReplyId)
		{
			SvStudComp newSvStudComp = new SvStudComp();
			newSvStudComp.SvStudCompId = _svStudCompId;
			newSvStudComp.SvCdeCompTypeId = _svCdeCompTypeId;
			newSvStudComp.CompDate = _compDate;
			newSvStudComp.EdStudId = _edStudId;
			newSvStudComp.EdAcadYearId = _edAcadYearId;
			newSvStudComp.EdCodeSemesterId = _edCodeSemesterId;
			newSvStudComp.SaStfMemberId = _saStfMemberId;
			newSvStudComp.EdCourseId = _edCourseId;
			newSvStudComp.CompDtl = _compDtl;
			newSvStudComp.SvCdeReqStatusId = _svCdeReqStatusId;
			newSvStudComp.CompComments = _compComments;
			newSvStudComp.ReplyDate = _replyDate;
			newSvStudComp.SeUserId = _seUserId;
			newSvStudComp.SvCdeCompDId = _svCdeCompDId;
			newSvStudComp.SvCdeCompHId = _svCdeCompHId;
			newSvStudComp.CloseFlg = _closeFlg;
			newSvStudComp.CloseDate = _closeDate;
			newSvStudComp.SvCdeCompReplyId = _svCdeCompReplyId;
			return newSvStudComp;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SvStudCompId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SvStudCompId
		{
			get
			{
				return this.entityData.SvStudCompId; 
			}
			
			set
			{
				if (this.entityData.SvStudCompId == value)
					return;
					
				OnColumnChanging(SvStudCompColumn.SvStudCompId, this.entityData.SvStudCompId);
				this.entityData.SvStudCompId = value;
				this.EntityId.SvStudCompId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudCompColumn.SvStudCompId, this.entityData.SvStudCompId);
				OnPropertyChanged("SvStudCompId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SV_STUD_COMP_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SV_STUD_COMP_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSvStudCompId
		{
			get { return this.entityData.OriginalSvStudCompId; }
			set { this.entityData.OriginalSvStudCompId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the SvCdeCompTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SvCdeCompTypeId
		{
			get
			{
				return this.entityData.SvCdeCompTypeId; 
			}
			
			set
			{
				if (this.entityData.SvCdeCompTypeId == value)
					return;
					
				OnColumnChanging(SvStudCompColumn.SvCdeCompTypeId, this.entityData.SvCdeCompTypeId);
				this.entityData.SvCdeCompTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudCompColumn.SvCdeCompTypeId, this.entityData.SvCdeCompTypeId);
				OnPropertyChanged("SvCdeCompTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CompDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CompDate
		{
			get
			{
				return this.entityData.CompDate; 
			}
			
			set
			{
				if (this.entityData.CompDate == value)
					return;
					
				OnColumnChanging(SvStudCompColumn.CompDate, this.entityData.CompDate);
				this.entityData.CompDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudCompColumn.CompDate, this.entityData.CompDate);
				OnPropertyChanged("CompDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(SvStudCompColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudCompColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(SvStudCompColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudCompColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(SvStudCompColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudCompColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaStfMemberId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSaStfMemberIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SaStfMemberId
		{
			get
			{
				return this.entityData.SaStfMemberId; 
			}
			
			set
			{
				if (this.entityData.SaStfMemberId == value)
					return;
					
				OnColumnChanging(SvStudCompColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				this.entityData.SaStfMemberId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudCompColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				OnPropertyChanged("SaStfMemberId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCourseIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCourseId
		{
			get
			{
				return this.entityData.EdCourseId; 
			}
			
			set
			{
				if (this.entityData.EdCourseId == value)
					return;
					
				OnColumnChanging(SvStudCompColumn.EdCourseId, this.entityData.EdCourseId);
				this.entityData.EdCourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudCompColumn.EdCourseId, this.entityData.EdCourseId);
				OnPropertyChanged("EdCourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CompDtl property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.String CompDtl
		{
			get
			{
				return this.entityData.CompDtl; 
			}
			
			set
			{
				if (this.entityData.CompDtl == value)
					return;
					
				OnColumnChanging(SvStudCompColumn.CompDtl, this.entityData.CompDtl);
				this.entityData.CompDtl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudCompColumn.CompDtl, this.entityData.CompDtl);
				OnPropertyChanged("CompDtl");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SvCdeReqStatusId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSvCdeReqStatusIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SvCdeReqStatusId
		{
			get
			{
				return this.entityData.SvCdeReqStatusId; 
			}
			
			set
			{
				if (this.entityData.SvCdeReqStatusId == value)
					return;
					
				OnColumnChanging(SvStudCompColumn.SvCdeReqStatusId, this.entityData.SvCdeReqStatusId);
				this.entityData.SvCdeReqStatusId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudCompColumn.SvCdeReqStatusId, this.entityData.SvCdeReqStatusId);
				OnPropertyChanged("SvCdeReqStatusId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CompComments property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1000)]
		public virtual System.String CompComments
		{
			get
			{
				return this.entityData.CompComments; 
			}
			
			set
			{
				if (this.entityData.CompComments == value)
					return;
					
				OnColumnChanging(SvStudCompColumn.CompComments, this.entityData.CompComments);
				this.entityData.CompComments = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudCompColumn.CompComments, this.entityData.CompComments);
				OnPropertyChanged("CompComments");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReplyDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsReplyDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ReplyDate
		{
			get
			{
				return this.entityData.ReplyDate; 
			}
			
			set
			{
				if (this.entityData.ReplyDate == value)
					return;
					
				OnColumnChanging(SvStudCompColumn.ReplyDate, this.entityData.ReplyDate);
				this.entityData.ReplyDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudCompColumn.ReplyDate, this.entityData.ReplyDate);
				OnPropertyChanged("ReplyDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(SvStudCompColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudCompColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SvCdeCompDId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSvCdeCompDIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SvCdeCompDId
		{
			get
			{
				return this.entityData.SvCdeCompDId; 
			}
			
			set
			{
				if (this.entityData.SvCdeCompDId == value)
					return;
					
				OnColumnChanging(SvStudCompColumn.SvCdeCompDId, this.entityData.SvCdeCompDId);
				this.entityData.SvCdeCompDId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudCompColumn.SvCdeCompDId, this.entityData.SvCdeCompDId);
				OnPropertyChanged("SvCdeCompDId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SvCdeCompHId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSvCdeCompHIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SvCdeCompHId
		{
			get
			{
				return this.entityData.SvCdeCompHId; 
			}
			
			set
			{
				if (this.entityData.SvCdeCompHId == value)
					return;
					
				OnColumnChanging(SvStudCompColumn.SvCdeCompHId, this.entityData.SvCdeCompHId);
				this.entityData.SvCdeCompHId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudCompColumn.SvCdeCompHId, this.entityData.SvCdeCompHId);
				OnPropertyChanged("SvCdeCompHId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CloseFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCloseFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CloseFlg
		{
			get
			{
				return this.entityData.CloseFlg; 
			}
			
			set
			{
				if (this.entityData.CloseFlg == value)
					return;
					
				OnColumnChanging(SvStudCompColumn.CloseFlg, this.entityData.CloseFlg);
				this.entityData.CloseFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudCompColumn.CloseFlg, this.entityData.CloseFlg);
				OnPropertyChanged("CloseFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CloseDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCloseDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CloseDate
		{
			get
			{
				return this.entityData.CloseDate; 
			}
			
			set
			{
				if (this.entityData.CloseDate == value)
					return;
					
				OnColumnChanging(SvStudCompColumn.CloseDate, this.entityData.CloseDate);
				this.entityData.CloseDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudCompColumn.CloseDate, this.entityData.CloseDate);
				OnPropertyChanged("CloseDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SvCdeCompReplyId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSvCdeCompReplyIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SvCdeCompReplyId
		{
			get
			{
				return this.entityData.SvCdeCompReplyId; 
			}
			
			set
			{
				if (this.entityData.SvCdeCompReplyId == value)
					return;
					
				OnColumnChanging(SvStudCompColumn.SvCdeCompReplyId, this.entityData.SvCdeCompReplyId);
				this.entityData.SvCdeCompReplyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudCompColumn.SvCdeCompReplyId, this.entityData.SvCdeCompReplyId);
				OnPropertyChanged("SvCdeCompReplyId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return entityData.EdCourseIdSource; }
            set { entityData.EdCourseIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return entityData.SaStfMemberIdSource; }
            set { entityData.SaStfMemberIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeUser SeUserIdSource
      	{
            get { return entityData.SeUserIdSource; }
            set { entityData.SeUserIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SvCdeCompD"/>.
		/// </summary>
		/// <value>The source SvCdeCompD for SvCdeCompDId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SvCdeCompD SvCdeCompDIdSource
      	{
            get { return entityData.SvCdeCompDIdSource; }
            set { entityData.SvCdeCompDIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SvCdeCompH"/>.
		/// </summary>
		/// <value>The source SvCdeCompH for SvCdeCompHId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SvCdeCompH SvCdeCompHIdSource
      	{
            get { return entityData.SvCdeCompHIdSource; }
            set { entityData.SvCdeCompHIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SvCdeCompReply"/>.
		/// </summary>
		/// <value>The source SvCdeCompReply for SvCdeCompReplyId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SvCdeCompReply SvCdeCompReplyIdSource
      	{
            get { return entityData.SvCdeCompReplyIdSource; }
            set { entityData.SvCdeCompReplyIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SvCdeCompType"/>.
		/// </summary>
		/// <value>The source SvCdeCompType for SvCdeCompTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SvCdeCompType SvCdeCompTypeIdSource
      	{
            get { return entityData.SvCdeCompTypeIdSource; }
            set { entityData.SvCdeCompTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SvCdeReqStatus"/>.
		/// </summary>
		/// <value>The source SvCdeReqStatus for SvCdeReqStatusId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SvCdeReqStatus SvCdeReqStatusIdSource
      	{
            get { return entityData.SvCdeReqStatusIdSource; }
            set { entityData.SvCdeReqStatusIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("CompDtl", "Comp Dtl"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CompComments", "Comp Comments", 1000));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SV_STUD_COMP"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SV_STUD_COMP_ID", "SV_CDE_COMP_TYPE_ID", "COMP_DATE", "ED_STUD_ID", "ED_ACAD_YEAR_ID", "ED_CODE_SEMESTER_ID", "SA_STF_MEMBER_ID", "ED_COURSE_ID", "COMP_DTL", "SV_CDE_REQ_STATUS_ID", "COMP_COMMENTS", "REPLY_DATE", "SE_USER_ID", "SV_CDE_COMP_D_ID", "SV_CDE_COMP_H_ID", "CLOSE_FLG", "CLOSE_DATE", "SV_CDE_COMP_REPLY_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SvStudCompEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SvStudComp) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SvStudComp>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SvStudComp);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SvStudComp Entity 
		///</summary>
		protected virtual SvStudComp Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SvStudComp copy = new SvStudComp();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SvStudCompId = this.SvStudCompId;
					copy.OriginalSvStudCompId = this.OriginalSvStudCompId;
				copy.SvCdeCompTypeId = this.SvCdeCompTypeId;
				copy.CompDate = this.CompDate;
				copy.EdStudId = this.EdStudId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.SaStfMemberId = this.SaStfMemberId;
				copy.EdCourseId = this.EdCourseId;
				copy.CompDtl = this.CompDtl;
				copy.SvCdeReqStatusId = this.SvCdeReqStatusId;
				copy.CompComments = this.CompComments;
				copy.ReplyDate = this.ReplyDate;
				copy.SeUserId = this.SeUserId;
				copy.SvCdeCompDId = this.SvCdeCompDId;
				copy.SvCdeCompHId = this.SvCdeCompHId;
				copy.CloseFlg = this.CloseFlg;
				copy.CloseDate = this.CloseDate;
				copy.SvCdeCompReplyId = this.SvCdeCompReplyId;
			
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				copy.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				copy.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				copy.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				copy.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				copy.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				copy.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			if (this.SvCdeCompDIdSource != null && existingCopies.Contains(this.SvCdeCompDIdSource))
				copy.SvCdeCompDIdSource = existingCopies[this.SvCdeCompDIdSource] as SvCdeCompD;
			else
				copy.SvCdeCompDIdSource = MakeCopyOf(this.SvCdeCompDIdSource, existingCopies) as SvCdeCompD;
			if (this.SvCdeCompHIdSource != null && existingCopies.Contains(this.SvCdeCompHIdSource))
				copy.SvCdeCompHIdSource = existingCopies[this.SvCdeCompHIdSource] as SvCdeCompH;
			else
				copy.SvCdeCompHIdSource = MakeCopyOf(this.SvCdeCompHIdSource, existingCopies) as SvCdeCompH;
			if (this.SvCdeCompReplyIdSource != null && existingCopies.Contains(this.SvCdeCompReplyIdSource))
				copy.SvCdeCompReplyIdSource = existingCopies[this.SvCdeCompReplyIdSource] as SvCdeCompReply;
			else
				copy.SvCdeCompReplyIdSource = MakeCopyOf(this.SvCdeCompReplyIdSource, existingCopies) as SvCdeCompReply;
			if (this.SvCdeCompTypeIdSource != null && existingCopies.Contains(this.SvCdeCompTypeIdSource))
				copy.SvCdeCompTypeIdSource = existingCopies[this.SvCdeCompTypeIdSource] as SvCdeCompType;
			else
				copy.SvCdeCompTypeIdSource = MakeCopyOf(this.SvCdeCompTypeIdSource, existingCopies) as SvCdeCompType;
			if (this.SvCdeReqStatusIdSource != null && existingCopies.Contains(this.SvCdeReqStatusIdSource))
				copy.SvCdeReqStatusIdSource = existingCopies[this.SvCdeReqStatusIdSource] as SvCdeReqStatus;
			else
				copy.SvCdeReqStatusIdSource = MakeCopyOf(this.SvCdeReqStatusIdSource, existingCopies) as SvCdeReqStatus;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SvStudComp Entity 
		///</summary>
		public virtual SvStudComp Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SvStudComp Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SvStudComp DeepCopy()
		{
			return EntityHelper.Clone<SvStudComp>(this as SvStudComp);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SvStudCompEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SvStudCompEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SvStudCompEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SvStudCompColumn column)
		{
			switch(column)
			{
					case SvStudCompColumn.SvStudCompId:
					return entityData.SvStudCompId != _originalData.SvStudCompId;
					case SvStudCompColumn.SvCdeCompTypeId:
					return entityData.SvCdeCompTypeId != _originalData.SvCdeCompTypeId;
					case SvStudCompColumn.CompDate:
					return entityData.CompDate != _originalData.CompDate;
					case SvStudCompColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case SvStudCompColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case SvStudCompColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case SvStudCompColumn.SaStfMemberId:
					return entityData.SaStfMemberId != _originalData.SaStfMemberId;
					case SvStudCompColumn.EdCourseId:
					return entityData.EdCourseId != _originalData.EdCourseId;
					case SvStudCompColumn.CompDtl:
					return entityData.CompDtl != _originalData.CompDtl;
					case SvStudCompColumn.SvCdeReqStatusId:
					return entityData.SvCdeReqStatusId != _originalData.SvCdeReqStatusId;
					case SvStudCompColumn.CompComments:
					return entityData.CompComments != _originalData.CompComments;
					case SvStudCompColumn.ReplyDate:
					return entityData.ReplyDate != _originalData.ReplyDate;
					case SvStudCompColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case SvStudCompColumn.SvCdeCompDId:
					return entityData.SvCdeCompDId != _originalData.SvCdeCompDId;
					case SvStudCompColumn.SvCdeCompHId:
					return entityData.SvCdeCompHId != _originalData.SvCdeCompHId;
					case SvStudCompColumn.CloseFlg:
					return entityData.CloseFlg != _originalData.CloseFlg;
					case SvStudCompColumn.CloseDate:
					return entityData.CloseDate != _originalData.CloseDate;
					case SvStudCompColumn.SvCdeCompReplyId:
					return entityData.SvCdeCompReplyId != _originalData.SvCdeCompReplyId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SvStudCompColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SvStudCompId != _originalData.SvStudCompId;
			result = result || entityData.SvCdeCompTypeId != _originalData.SvCdeCompTypeId;
			result = result || entityData.CompDate != _originalData.CompDate;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.SaStfMemberId != _originalData.SaStfMemberId;
			result = result || entityData.EdCourseId != _originalData.EdCourseId;
			result = result || entityData.CompDtl != _originalData.CompDtl;
			result = result || entityData.SvCdeReqStatusId != _originalData.SvCdeReqStatusId;
			result = result || entityData.CompComments != _originalData.CompComments;
			result = result || entityData.ReplyDate != _originalData.ReplyDate;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.SvCdeCompDId != _originalData.SvCdeCompDId;
			result = result || entityData.SvCdeCompHId != _originalData.SvCdeCompHId;
			result = result || entityData.CloseFlg != _originalData.CloseFlg;
			result = result || entityData.CloseDate != _originalData.CloseDate;
			result = result || entityData.SvCdeCompReplyId != _originalData.SvCdeCompReplyId;
			return result;
		}	
		
		///<summary>
		///  Returns a SvStudComp Entity with the original data.
		///</summary>
		public SvStudComp GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSvStudComp(
				_originalData.SvStudCompId,
				_originalData.SvCdeCompTypeId,
				_originalData.CompDate,
				_originalData.EdStudId,
				_originalData.EdAcadYearId,
				_originalData.EdCodeSemesterId,
				_originalData.SaStfMemberId,
				_originalData.EdCourseId,
				_originalData.CompDtl,
				_originalData.SvCdeReqStatusId,
				_originalData.CompComments,
				_originalData.ReplyDate,
				_originalData.SeUserId,
				_originalData.SvCdeCompDId,
				_originalData.SvCdeCompHId,
				_originalData.CloseFlg,
				_originalData.CloseDate,
				_originalData.SvCdeCompReplyId
				);
				
			return (SvStudComp)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SvStudCompBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SvStudCompBase)
				return ValueEquals(this, (SvStudCompBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SvStudCompBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SvStudCompId.GetHashCode() ^ 
					this.SvCdeCompTypeId.GetHashCode() ^ 
					this.CompDate.GetHashCode() ^ 
					this.EdStudId.GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					this.EdCodeSemesterId.GetHashCode() ^ 
					((this.SaStfMemberId == null) ? string.Empty : this.SaStfMemberId.ToString()).GetHashCode() ^ 
					((this.EdCourseId == null) ? string.Empty : this.EdCourseId.ToString()).GetHashCode() ^ 
					this.CompDtl.GetHashCode() ^ 
					((this.SvCdeReqStatusId == null) ? string.Empty : this.SvCdeReqStatusId.ToString()).GetHashCode() ^ 
					((this.CompComments == null) ? string.Empty : this.CompComments.ToString()).GetHashCode() ^ 
					((this.ReplyDate == null) ? string.Empty : this.ReplyDate.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.SvCdeCompDId == null) ? string.Empty : this.SvCdeCompDId.ToString()).GetHashCode() ^ 
					((this.SvCdeCompHId == null) ? string.Empty : this.SvCdeCompHId.ToString()).GetHashCode() ^ 
					((this.CloseFlg == null) ? string.Empty : this.CloseFlg.ToString()).GetHashCode() ^ 
					((this.CloseDate == null) ? string.Empty : this.CloseDate.ToString()).GetHashCode() ^ 
					((this.SvCdeCompReplyId == null) ? string.Empty : this.SvCdeCompReplyId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SvStudCompBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SvStudCompBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SvStudCompBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SvStudCompBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SvStudCompBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SvStudCompBase Object1, SvStudCompBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SvStudCompId != Object2.SvStudCompId)
				equal = false;
			if (Object1.SvCdeCompTypeId != Object2.SvCdeCompTypeId)
				equal = false;
			if (Object1.CompDate != Object2.CompDate)
				equal = false;
			if (Object1.EdStudId != Object2.EdStudId)
				equal = false;
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
				equal = false;
			if ( Object1.SaStfMemberId != null && Object2.SaStfMemberId != null )
			{
				if (Object1.SaStfMemberId != Object2.SaStfMemberId)
					equal = false;
			}
			else if (Object1.SaStfMemberId == null ^ Object2.SaStfMemberId == null )
			{
				equal = false;
			}
			if ( Object1.EdCourseId != null && Object2.EdCourseId != null )
			{
				if (Object1.EdCourseId != Object2.EdCourseId)
					equal = false;
			}
			else if (Object1.EdCourseId == null ^ Object2.EdCourseId == null )
			{
				equal = false;
			}
			if (Object1.CompDtl != Object2.CompDtl)
				equal = false;
			if ( Object1.SvCdeReqStatusId != null && Object2.SvCdeReqStatusId != null )
			{
				if (Object1.SvCdeReqStatusId != Object2.SvCdeReqStatusId)
					equal = false;
			}
			else if (Object1.SvCdeReqStatusId == null ^ Object2.SvCdeReqStatusId == null )
			{
				equal = false;
			}
			if ( Object1.CompComments != null && Object2.CompComments != null )
			{
				if (Object1.CompComments != Object2.CompComments)
					equal = false;
			}
			else if (Object1.CompComments == null ^ Object2.CompComments == null )
			{
				equal = false;
			}
			if ( Object1.ReplyDate != null && Object2.ReplyDate != null )
			{
				if (Object1.ReplyDate != Object2.ReplyDate)
					equal = false;
			}
			else if (Object1.ReplyDate == null ^ Object2.ReplyDate == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.SvCdeCompDId != null && Object2.SvCdeCompDId != null )
			{
				if (Object1.SvCdeCompDId != Object2.SvCdeCompDId)
					equal = false;
			}
			else if (Object1.SvCdeCompDId == null ^ Object2.SvCdeCompDId == null )
			{
				equal = false;
			}
			if ( Object1.SvCdeCompHId != null && Object2.SvCdeCompHId != null )
			{
				if (Object1.SvCdeCompHId != Object2.SvCdeCompHId)
					equal = false;
			}
			else if (Object1.SvCdeCompHId == null ^ Object2.SvCdeCompHId == null )
			{
				equal = false;
			}
			if ( Object1.CloseFlg != null && Object2.CloseFlg != null )
			{
				if (Object1.CloseFlg != Object2.CloseFlg)
					equal = false;
			}
			else if (Object1.CloseFlg == null ^ Object2.CloseFlg == null )
			{
				equal = false;
			}
			if ( Object1.CloseDate != null && Object2.CloseDate != null )
			{
				if (Object1.CloseDate != Object2.CloseDate)
					equal = false;
			}
			else if (Object1.CloseDate == null ^ Object2.CloseDate == null )
			{
				equal = false;
			}
			if ( Object1.SvCdeCompReplyId != null && Object2.SvCdeCompReplyId != null )
			{
				if (Object1.SvCdeCompReplyId != Object2.SvCdeCompReplyId)
					equal = false;
			}
			else if (Object1.SvCdeCompReplyId == null ^ Object2.SvCdeCompReplyId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SvStudCompBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SvStudCompComparer GetComparer()
        {
            return new SvStudCompComparer();
        }
        */

        // Comparer delegates back to SvStudComp
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SvStudComp rhs, SvStudCompColumn which)
        {
            switch (which)
            {
            	
            	
            	case SvStudCompColumn.SvStudCompId:
            		return this.SvStudCompId.CompareTo(rhs.SvStudCompId);
            		
            		                 
            	
            	
            	case SvStudCompColumn.SvCdeCompTypeId:
            		return this.SvCdeCompTypeId.CompareTo(rhs.SvCdeCompTypeId);
            		
            		                 
            	
            	
            	case SvStudCompColumn.CompDate:
            		return this.CompDate.CompareTo(rhs.CompDate);
            		
            		                 
            	
            	
            	case SvStudCompColumn.EdStudId:
            		return this.EdStudId.CompareTo(rhs.EdStudId);
            		
            		                 
            	
            	
            	case SvStudCompColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case SvStudCompColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.CompareTo(rhs.EdCodeSemesterId);
            		
            		                 
            	
            	
            	case SvStudCompColumn.SaStfMemberId:
            		return this.SaStfMemberId.Value.CompareTo(rhs.SaStfMemberId.Value);
            		
            		                 
            	
            	
            	case SvStudCompColumn.EdCourseId:
            		return this.EdCourseId.Value.CompareTo(rhs.EdCourseId.Value);
            		
            		                 
            	
            	
            	case SvStudCompColumn.CompDtl:
            		return this.CompDtl.CompareTo(rhs.CompDtl);
            		
            		                 
            	
            	
            	case SvStudCompColumn.SvCdeReqStatusId:
            		return this.SvCdeReqStatusId.Value.CompareTo(rhs.SvCdeReqStatusId.Value);
            		
            		                 
            	
            	
            	case SvStudCompColumn.CompComments:
            		return this.CompComments.CompareTo(rhs.CompComments);
            		
            		                 
            	
            	
            	case SvStudCompColumn.ReplyDate:
            		return this.ReplyDate.Value.CompareTo(rhs.ReplyDate.Value);
            		
            		                 
            	
            	
            	case SvStudCompColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case SvStudCompColumn.SvCdeCompDId:
            		return this.SvCdeCompDId.Value.CompareTo(rhs.SvCdeCompDId.Value);
            		
            		                 
            	
            	
            	case SvStudCompColumn.SvCdeCompHId:
            		return this.SvCdeCompHId.Value.CompareTo(rhs.SvCdeCompHId.Value);
            		
            		                 
            	
            	
            	case SvStudCompColumn.CloseFlg:
            		return this.CloseFlg.Value.CompareTo(rhs.CloseFlg.Value);
            		
            		                 
            	
            	
            	case SvStudCompColumn.CloseDate:
            		return this.CloseDate.Value.CompareTo(rhs.CloseDate.Value);
            		
            		                 
            	
            	
            	case SvStudCompColumn.SvCdeCompReplyId:
            		return this.SvCdeCompReplyId.Value.CompareTo(rhs.SvCdeCompReplyId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SvStudCompKey> Members
		
		// member variable for the EntityId property
		private SvStudCompKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SvStudCompKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SvStudCompKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SvStudComp")
					.Append("|").Append( this.SvStudCompId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{19}{18}- SvStudCompId: {0}{18}- SvCdeCompTypeId: {1}{18}- CompDate: {2}{18}- EdStudId: {3}{18}- EdAcadYearId: {4}{18}- EdCodeSemesterId: {5}{18}- SaStfMemberId: {6}{18}- EdCourseId: {7}{18}- CompDtl: {8}{18}- SvCdeReqStatusId: {9}{18}- CompComments: {10}{18}- ReplyDate: {11}{18}- SeUserId: {12}{18}- SvCdeCompDId: {13}{18}- SvCdeCompHId: {14}{18}- CloseFlg: {15}{18}- CloseDate: {16}{18}- SvCdeCompReplyId: {17}{18}{20}", 
				this.SvStudCompId,
				this.SvCdeCompTypeId,
				this.CompDate,
				this.EdStudId,
				this.EdAcadYearId,
				this.EdCodeSemesterId,
				(this.SaStfMemberId == null) ? string.Empty : this.SaStfMemberId.ToString(),
				(this.EdCourseId == null) ? string.Empty : this.EdCourseId.ToString(),
				this.CompDtl,
				(this.SvCdeReqStatusId == null) ? string.Empty : this.SvCdeReqStatusId.ToString(),
				(this.CompComments == null) ? string.Empty : this.CompComments.ToString(),
				(this.ReplyDate == null) ? string.Empty : this.ReplyDate.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.SvCdeCompDId == null) ? string.Empty : this.SvCdeCompDId.ToString(),
				(this.SvCdeCompHId == null) ? string.Empty : this.SvCdeCompHId.ToString(),
				(this.CloseFlg == null) ? string.Empty : this.CloseFlg.ToString(),
				(this.CloseDate == null) ? string.Empty : this.CloseDate.ToString(),
				(this.SvCdeCompReplyId == null) ? string.Empty : this.SvCdeCompReplyId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SV_STUD_COMP' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SvStudCompEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SV_STUD_COMP_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SV_STUD_COMP"</remarks>
		public System.Decimal SvStudCompId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSvStudCompId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SV_CDE_COMP_TYPE_ID : 
		/// </summary>
		public System.Decimal		  SvCdeCompTypeId = 0.0m;
		
		/// <summary>
		/// COMP_DATE : 
		/// </summary>
		public System.DateTime		  CompDate = DateTime.MinValue;
		
		/// <summary>
		/// ED_STUD_ID : 
		/// </summary>
		public System.Decimal		  EdStudId = 0.0m;
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : 
		/// </summary>
		public System.Decimal		  EdCodeSemesterId = 0.0m;
		
		/// <summary>
		/// SA_STF_MEMBER_ID : 
		/// </summary>
		public System.Decimal?		  SaStfMemberId = null;
		
		/// <summary>
		/// ED_COURSE_ID : 
		/// </summary>
		public System.Decimal?		  EdCourseId = null;
		
		/// <summary>
		/// COMP_DTL : 
		/// </summary>
		public System.String		  CompDtl = string.Empty;
		
		/// <summary>
		/// SV_CDE_REQ_STATUS_ID : 
		/// </summary>
		public System.Decimal?		  SvCdeReqStatusId = null;
		
		/// <summary>
		/// COMP_COMMENTS : 
		/// </summary>
		public System.String		  CompComments = null;
		
		/// <summary>
		/// REPLY_DATE : 
		/// </summary>
		public System.DateTime?		  ReplyDate = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// SV_CDE_COMP_D_ID : 
		/// </summary>
		public System.Decimal?		  SvCdeCompDId = null;
		
		/// <summary>
		/// SV_CDE_COMP_H_ID : 
		/// </summary>
		public System.Decimal?		  SvCdeCompHId = null;
		
		/// <summary>
		/// CLOSE_FLG : 
		/// </summary>
		public System.Decimal?		  CloseFlg = null;
		
		/// <summary>
		/// CLOSE_DATE : 
		/// </summary>
		public System.DateTime?		  CloseDate = null;
		
		/// <summary>
		/// SV_CDE_COMP_REPLY_ID : 
		/// </summary>
		public System.Decimal?		  SvCdeCompReplyId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private EdCourse _edCourseIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return this._edCourseIdSource; }
            set { this._edCourseIdSource = value; }
      	}
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		private SaStfMember _saStfMemberIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return this._saStfMemberIdSource; }
            set { this._saStfMemberIdSource = value; }
      	}
		private SeUser _seUserIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeUser SeUserIdSource
      	{
            get { return this._seUserIdSource; }
            set { this._seUserIdSource = value; }
      	}
		private SvCdeCompD _svCdeCompDidSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SvCdeCompD"/>.
		/// </summary>
		/// <value>The source SvCdeCompD for SvCdeCompDId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SvCdeCompD SvCdeCompDIdSource
      	{
            get { return this._svCdeCompDidSource; }
            set { this._svCdeCompDidSource = value; }
      	}
		private SvCdeCompH _svCdeCompHidSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SvCdeCompH"/>.
		/// </summary>
		/// <value>The source SvCdeCompH for SvCdeCompHId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SvCdeCompH SvCdeCompHIdSource
      	{
            get { return this._svCdeCompHidSource; }
            set { this._svCdeCompHidSource = value; }
      	}
		private SvCdeCompReply _svCdeCompReplyIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SvCdeCompReply"/>.
		/// </summary>
		/// <value>The source SvCdeCompReply for SvCdeCompReplyId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SvCdeCompReply SvCdeCompReplyIdSource
      	{
            get { return this._svCdeCompReplyIdSource; }
            set { this._svCdeCompReplyIdSource = value; }
      	}
		private SvCdeCompType _svCdeCompTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SvCdeCompType"/>.
		/// </summary>
		/// <value>The source SvCdeCompType for SvCdeCompTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SvCdeCompType SvCdeCompTypeIdSource
      	{
            get { return this._svCdeCompTypeIdSource; }
            set { this._svCdeCompTypeIdSource = value; }
      	}
		private SvCdeReqStatus _svCdeReqStatusIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SvCdeReqStatus"/>.
		/// </summary>
		/// <value>The source SvCdeReqStatus for SvCdeReqStatusId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SvCdeReqStatus SvCdeReqStatusIdSource
      	{
            get { return this._svCdeReqStatusIdSource; }
            set { this._svCdeReqStatusIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SvStudCompEntityData _tmp = new SvStudCompEntityData();
						
			_tmp.SvStudCompId = this.SvStudCompId;
			_tmp.OriginalSvStudCompId = this.OriginalSvStudCompId;
			
			_tmp.SvCdeCompTypeId = this.SvCdeCompTypeId;
			_tmp.CompDate = this.CompDate;
			_tmp.EdStudId = this.EdStudId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.CompDtl = this.CompDtl;
			_tmp.SvCdeReqStatusId = this.SvCdeReqStatusId;
			_tmp.CompComments = this.CompComments;
			_tmp.ReplyDate = this.ReplyDate;
			_tmp.SeUserId = this.SeUserId;
			_tmp.SvCdeCompDId = this.SvCdeCompDId;
			_tmp.SvCdeCompHId = this.SvCdeCompHId;
			_tmp.CloseFlg = this.CloseFlg;
			_tmp.CloseDate = this.CloseDate;
			_tmp.SvCdeCompReplyId = this.SvCdeCompReplyId;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.EdCourseIdSource != null)
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource) as EdCourse;
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			if (this.SaStfMemberIdSource != null)
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource) as SaStfMember;
			if (this.SeUserIdSource != null)
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource) as SeUser;
			if (this.SvCdeCompDIdSource != null)
				_tmp.SvCdeCompDIdSource = MakeCopyOf(this.SvCdeCompDIdSource) as SvCdeCompD;
			if (this.SvCdeCompHIdSource != null)
				_tmp.SvCdeCompHIdSource = MakeCopyOf(this.SvCdeCompHIdSource) as SvCdeCompH;
			if (this.SvCdeCompReplyIdSource != null)
				_tmp.SvCdeCompReplyIdSource = MakeCopyOf(this.SvCdeCompReplyIdSource) as SvCdeCompReply;
			if (this.SvCdeCompTypeIdSource != null)
				_tmp.SvCdeCompTypeIdSource = MakeCopyOf(this.SvCdeCompTypeIdSource) as SvCdeCompType;
			if (this.SvCdeReqStatusIdSource != null)
				_tmp.SvCdeReqStatusIdSource = MakeCopyOf(this.SvCdeReqStatusIdSource) as SvCdeReqStatus;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SvStudCompEntityData _tmp = new SvStudCompEntityData();
						
			_tmp.SvStudCompId = this.SvStudCompId;
			_tmp.OriginalSvStudCompId = this.OriginalSvStudCompId;
			
			_tmp.SvCdeCompTypeId = this.SvCdeCompTypeId;
			_tmp.CompDate = this.CompDate;
			_tmp.EdStudId = this.EdStudId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.CompDtl = this.CompDtl;
			_tmp.SvCdeReqStatusId = this.SvCdeReqStatusId;
			_tmp.CompComments = this.CompComments;
			_tmp.ReplyDate = this.ReplyDate;
			_tmp.SeUserId = this.SeUserId;
			_tmp.SvCdeCompDId = this.SvCdeCompDId;
			_tmp.SvCdeCompHId = this.SvCdeCompHId;
			_tmp.CloseFlg = this.CloseFlg;
			_tmp.CloseDate = this.CloseDate;
			_tmp.SvCdeCompReplyId = this.SvCdeCompReplyId;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				_tmp.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				_tmp.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				_tmp.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			if (this.SvCdeCompDIdSource != null && existingCopies.Contains(this.SvCdeCompDIdSource))
				_tmp.SvCdeCompDIdSource = existingCopies[this.SvCdeCompDIdSource] as SvCdeCompD;
			else
				_tmp.SvCdeCompDIdSource = MakeCopyOf(this.SvCdeCompDIdSource, existingCopies) as SvCdeCompD;
			if (this.SvCdeCompHIdSource != null && existingCopies.Contains(this.SvCdeCompHIdSource))
				_tmp.SvCdeCompHIdSource = existingCopies[this.SvCdeCompHIdSource] as SvCdeCompH;
			else
				_tmp.SvCdeCompHIdSource = MakeCopyOf(this.SvCdeCompHIdSource, existingCopies) as SvCdeCompH;
			if (this.SvCdeCompReplyIdSource != null && existingCopies.Contains(this.SvCdeCompReplyIdSource))
				_tmp.SvCdeCompReplyIdSource = existingCopies[this.SvCdeCompReplyIdSource] as SvCdeCompReply;
			else
				_tmp.SvCdeCompReplyIdSource = MakeCopyOf(this.SvCdeCompReplyIdSource, existingCopies) as SvCdeCompReply;
			if (this.SvCdeCompTypeIdSource != null && existingCopies.Contains(this.SvCdeCompTypeIdSource))
				_tmp.SvCdeCompTypeIdSource = existingCopies[this.SvCdeCompTypeIdSource] as SvCdeCompType;
			else
				_tmp.SvCdeCompTypeIdSource = MakeCopyOf(this.SvCdeCompTypeIdSource, existingCopies) as SvCdeCompType;
			if (this.SvCdeReqStatusIdSource != null && existingCopies.Contains(this.SvCdeReqStatusIdSource))
				_tmp.SvCdeReqStatusIdSource = existingCopies[this.SvCdeReqStatusIdSource] as SvCdeReqStatus;
			else
				_tmp.SvCdeReqStatusIdSource = MakeCopyOf(this.SvCdeReqStatusIdSource, existingCopies) as SvCdeReqStatus;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvStudCompColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SvStudCompColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvStudCompColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SvStudCompColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvStudCompColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SvStudCompColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SvStudCompEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SvStudCompEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvStudCompColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SvStudCompColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SvStudCompEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SvStudCompEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SvStudCompEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SvStudComp"/> object.
	/// </remarks>
	public class SvStudCompEventArgs : System.EventArgs
	{
		private SvStudCompColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SvStudCompEventArgs class.
		///</summary>
		public SvStudCompEventArgs(SvStudCompColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SvStudCompEventArgs class.
		///</summary>
		public SvStudCompEventArgs(SvStudCompColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SvStudCompColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SvStudCompColumn" />
		public SvStudCompColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SvStudComp related events.
	///</summary>
	public delegate void SvStudCompEventHandler(object sender, SvStudCompEventArgs e);
	
	#region SvStudCompComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SvStudCompComparer : System.Collections.Generic.IComparer<SvStudComp>
	{
		SvStudCompColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SvStudCompComparer"/> class.
        /// </summary>
		public SvStudCompComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SvStudCompComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SvStudCompComparer(SvStudCompColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SvStudComp"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SvStudComp"/> to compare.</param>
        /// <param name="b">The second <c>SvStudComp</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SvStudComp a, SvStudComp b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SvStudComp entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SvStudComp a, SvStudComp b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SvStudCompColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SvStudCompKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SvStudComp"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SvStudCompKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SvStudCompKey class.
		/// </summary>
		public SvStudCompKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SvStudCompKey class.
		/// </summary>
		public SvStudCompKey(SvStudCompBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SvStudCompId = entity.SvStudCompId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SvStudCompKey class.
		/// </summary>
		public SvStudCompKey(System.Decimal _svStudCompId)
		{
			#region Init Properties

			this.SvStudCompId = _svStudCompId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SvStudCompBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SvStudCompBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SvStudCompId property
		private System.Decimal _svStudCompId;
		
		/// <summary>
		/// Gets or sets the SvStudCompId property.
		/// </summary>
		public System.Decimal SvStudCompId
		{
			get { return _svStudCompId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SvStudCompId = value;
				
				_svStudCompId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SvStudCompId = ( values["SvStudCompId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SvStudCompId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SvStudCompId", SvStudCompId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SvStudCompId: {0}{1}",
								SvStudCompId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SvStudCompColumn Enum
	
	/// <summary>
	/// Enumerate the SvStudComp columns.
	/// </summary>
	[Serializable]
	public enum SvStudCompColumn : int
	{
		/// <summary>
		/// SvStudCompId : 
		/// </summary>
		[EnumTextValue("SV_STUD_COMP_ID")]
		[ColumnEnum("SV_STUD_COMP_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SvStudCompId = 1,
		/// <summary>
		/// SvCdeCompTypeId : 
		/// </summary>
		[EnumTextValue("SV_CDE_COMP_TYPE_ID")]
		[ColumnEnum("SV_CDE_COMP_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SvCdeCompTypeId = 2,
		/// <summary>
		/// CompDate : 
		/// </summary>
		[EnumTextValue("COMP_DATE")]
		[ColumnEnum("COMP_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CompDate = 3,
		/// <summary>
		/// EdStudId : 
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudId = 4,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 5,
		/// <summary>
		/// EdCodeSemesterId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeSemesterId = 6,
		/// <summary>
		/// SaStfMemberId : 
		/// </summary>
		[EnumTextValue("SA_STF_MEMBER_ID")]
		[ColumnEnum("SA_STF_MEMBER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SaStfMemberId = 7,
		/// <summary>
		/// EdCourseId : 
		/// </summary>
		[EnumTextValue("ED_COURSE_ID")]
		[ColumnEnum("ED_COURSE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCourseId = 8,
		/// <summary>
		/// CompDtl : 
		/// </summary>
		[EnumTextValue("COMP_DTL")]
		[ColumnEnum("COMP_DTL", typeof(System.String), System.Data.DbType.String, false, false, false)]
		CompDtl = 9,
		/// <summary>
		/// SvCdeReqStatusId : 
		/// </summary>
		[EnumTextValue("SV_CDE_REQ_STATUS_ID")]
		[ColumnEnum("SV_CDE_REQ_STATUS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SvCdeReqStatusId = 10,
		/// <summary>
		/// CompComments : 
		/// </summary>
		[EnumTextValue("COMP_COMMENTS")]
		[ColumnEnum("COMP_COMMENTS", typeof(System.String), System.Data.DbType.String, false, false, true, 1000)]
		CompComments = 11,
		/// <summary>
		/// ReplyDate : 
		/// </summary>
		[EnumTextValue("REPLY_DATE")]
		[ColumnEnum("REPLY_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ReplyDate = 12,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 13,
		/// <summary>
		/// SvCdeCompDId : 
		/// </summary>
		[EnumTextValue("SV_CDE_COMP_D_ID")]
		[ColumnEnum("SV_CDE_COMP_D_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SvCdeCompDId = 14,
		/// <summary>
		/// SvCdeCompHId : 
		/// </summary>
		[EnumTextValue("SV_CDE_COMP_H_ID")]
		[ColumnEnum("SV_CDE_COMP_H_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SvCdeCompHId = 15,
		/// <summary>
		/// CloseFlg : 
		/// </summary>
		[EnumTextValue("CLOSE_FLG")]
		[ColumnEnum("CLOSE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CloseFlg = 16,
		/// <summary>
		/// CloseDate : 
		/// </summary>
		[EnumTextValue("CLOSE_DATE")]
		[ColumnEnum("CLOSE_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CloseDate = 17,
		/// <summary>
		/// SvCdeCompReplyId : 
		/// </summary>
		[EnumTextValue("SV_CDE_COMP_REPLY_ID")]
		[ColumnEnum("SV_CDE_COMP_REPLY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SvCdeCompReplyId = 18
	}//End enum

	#endregion SvStudCompColumn Enum

} // end namespace
