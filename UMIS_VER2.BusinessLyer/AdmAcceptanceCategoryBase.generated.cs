
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AdmAcceptanceCategory.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ADM_ACCEPTANCE_CATEGORY' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AdmAcceptanceCategoryBase : EntityBase, IAdmAcceptanceCategory, IEntityId<AdmAcceptanceCategoryKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AdmAcceptanceCategoryEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AdmAcceptanceCategoryEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AdmAcceptanceCategoryEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AdmAcceptanceCategory> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmAcceptanceCategoryEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmAcceptanceCategoryEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AdmAcceptanceCategoryBase"/> instance.
		///</summary>
		public AdmAcceptanceCategoryBase()
		{
			this.entityData = new AdmAcceptanceCategoryEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AdmAcceptanceCategoryBase"/> instance.
		///</summary>
		///<param name="_admAcceptanceCategoryId">شروط وقواعد</param>
		///<param name="_categoryNameEn"></param>
		///<param name="_categoryNameAr"></param>
		///<param name="_categoryType">0  شرط عام
		/// 		/// 1  شرط ثابت
		/// 		/// </param>
		///<param name="_categoryValue">قيمة default</param>
		///<param name="_abbreviationEn"></param>
		///<param name="_abbreviationAr"></param>
		///<param name="_orientationFlg">0-معفى من تمهيدى    
		/// 		/// 1-تحميل تمهيدى</param>
		///<param name="_regExpiration">Validator regular expression--0=sum  1-percent --Y/N</param>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_asCodeDegreeId"></param>
		///<param name="_asFacultyInfoId">جامعة-كلية</param>
		///<param name="_gsCdeOperator">محدد</param>
		///<param name="_examLoadFlg">0</param>
		///<param name="_catTypeId">text,radio,checkbox,...
		/// 		/// 
		/// 		/// 
		/// 		/// 0 review
		/// 		/// 1 accept
		/// 		/// 2 enroll</param>
		///<param name="_enumId"></param>
		///<param name="_showFlg"></param>
		public AdmAcceptanceCategoryBase(System.Decimal _admAcceptanceCategoryId, System.String _categoryNameEn, 
			System.String _categoryNameAr, System.Decimal _categoryType, System.Decimal _categoryValue, 
			System.String _abbreviationEn, System.String _abbreviationAr, System.Decimal? _orientationFlg, 
			System.String _regExpiration, System.Decimal _asCodeDegreeClassId, System.Decimal? _asCodeDegreeId, 
			System.Decimal? _asFacultyInfoId, System.String _gsCdeOperator, System.Boolean? _examLoadFlg, 
			System.Decimal? _catTypeId, System.Int16? _enumId, System.Boolean? _showFlg)
		{
			this.entityData = new AdmAcceptanceCategoryEntityData();
			this.backupData = null;

			this.AdmAcceptanceCategoryId = _admAcceptanceCategoryId;
			this.CategoryNameEn = _categoryNameEn;
			this.CategoryNameAr = _categoryNameAr;
			this.CategoryType = _categoryType;
			this.CategoryValue = _categoryValue;
			this.AbbreviationEn = _abbreviationEn;
			this.AbbreviationAr = _abbreviationAr;
			this.OrientationFlg = _orientationFlg;
			this.RegExpiration = _regExpiration;
			this.AsCodeDegreeClassId = _asCodeDegreeClassId;
			this.AsCodeDegreeId = _asCodeDegreeId;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.GsCdeOperator = _gsCdeOperator;
			this.ExamLoadFlg = _examLoadFlg;
			this.CatTypeId = _catTypeId;
			this.EnumId = _enumId;
			this.ShowFlg = _showFlg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AdmAcceptanceCategory"/> instance.
		///</summary>
		///<param name="_admAcceptanceCategoryId">شروط وقواعد</param>
		///<param name="_categoryNameEn"></param>
		///<param name="_categoryNameAr"></param>
		///<param name="_categoryType">0  شرط عام
		/// 		/// 1  شرط ثابت
		/// 		/// </param>
		///<param name="_categoryValue">قيمة default</param>
		///<param name="_abbreviationEn"></param>
		///<param name="_abbreviationAr"></param>
		///<param name="_orientationFlg">0-معفى من تمهيدى    
		/// 		/// 1-تحميل تمهيدى</param>
		///<param name="_regExpiration">Validator regular expression--0=sum  1-percent --Y/N</param>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_asCodeDegreeId"></param>
		///<param name="_asFacultyInfoId">جامعة-كلية</param>
		///<param name="_gsCdeOperator">محدد</param>
		///<param name="_examLoadFlg">0</param>
		///<param name="_catTypeId">text,radio,checkbox,...
		/// 		/// 
		/// 		/// 
		/// 		/// 0 review
		/// 		/// 1 accept
		/// 		/// 2 enroll</param>
		///<param name="_enumId"></param>
		///<param name="_showFlg"></param>
		public static AdmAcceptanceCategory CreateAdmAcceptanceCategory(System.Decimal _admAcceptanceCategoryId, System.String _categoryNameEn, 
			System.String _categoryNameAr, System.Decimal _categoryType, System.Decimal _categoryValue, 
			System.String _abbreviationEn, System.String _abbreviationAr, System.Decimal? _orientationFlg, 
			System.String _regExpiration, System.Decimal _asCodeDegreeClassId, System.Decimal? _asCodeDegreeId, 
			System.Decimal? _asFacultyInfoId, System.String _gsCdeOperator, System.Boolean? _examLoadFlg, 
			System.Decimal? _catTypeId, System.Int16? _enumId, System.Boolean? _showFlg)
		{
			AdmAcceptanceCategory newAdmAcceptanceCategory = new AdmAcceptanceCategory();
			newAdmAcceptanceCategory.AdmAcceptanceCategoryId = _admAcceptanceCategoryId;
			newAdmAcceptanceCategory.CategoryNameEn = _categoryNameEn;
			newAdmAcceptanceCategory.CategoryNameAr = _categoryNameAr;
			newAdmAcceptanceCategory.CategoryType = _categoryType;
			newAdmAcceptanceCategory.CategoryValue = _categoryValue;
			newAdmAcceptanceCategory.AbbreviationEn = _abbreviationEn;
			newAdmAcceptanceCategory.AbbreviationAr = _abbreviationAr;
			newAdmAcceptanceCategory.OrientationFlg = _orientationFlg;
			newAdmAcceptanceCategory.RegExpiration = _regExpiration;
			newAdmAcceptanceCategory.AsCodeDegreeClassId = _asCodeDegreeClassId;
			newAdmAcceptanceCategory.AsCodeDegreeId = _asCodeDegreeId;
			newAdmAcceptanceCategory.AsFacultyInfoId = _asFacultyInfoId;
			newAdmAcceptanceCategory.GsCdeOperator = _gsCdeOperator;
			newAdmAcceptanceCategory.ExamLoadFlg = _examLoadFlg;
			newAdmAcceptanceCategory.CatTypeId = _catTypeId;
			newAdmAcceptanceCategory.EnumId = _enumId;
			newAdmAcceptanceCategory.ShowFlg = _showFlg;
			return newAdmAcceptanceCategory;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AdmAcceptanceCategoryId property. 
		///		شروط وقواعد
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"شروط وقواعد"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal AdmAcceptanceCategoryId
		{
			get
			{
				return this.entityData.AdmAcceptanceCategoryId; 
			}
			
			set
			{
				if (this.entityData.AdmAcceptanceCategoryId == value)
					return;
					
				OnColumnChanging(AdmAcceptanceCategoryColumn.AdmAcceptanceCategoryId, this.entityData.AdmAcceptanceCategoryId);
				this.entityData.AdmAcceptanceCategoryId = value;
				this.EntityId.AdmAcceptanceCategoryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAcceptanceCategoryColumn.AdmAcceptanceCategoryId, this.entityData.AdmAcceptanceCategoryId);
				OnPropertyChanged("AdmAcceptanceCategoryId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ADM_ACCEPTANCE_CATEGORY_ID property.
		///		شروط وقواعد
		/// </summary>
		/// <remarks>This is the original value of the ADM_ACCEPTANCE_CATEGORY_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalAdmAcceptanceCategoryId
		{
			get { return this.entityData.OriginalAdmAcceptanceCategoryId; }
			set { this.entityData.OriginalAdmAcceptanceCategoryId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the CategoryNameEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String CategoryNameEn
		{
			get
			{
				return this.entityData.CategoryNameEn; 
			}
			
			set
			{
				if (this.entityData.CategoryNameEn == value)
					return;
					
				OnColumnChanging(AdmAcceptanceCategoryColumn.CategoryNameEn, this.entityData.CategoryNameEn);
				this.entityData.CategoryNameEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAcceptanceCategoryColumn.CategoryNameEn, this.entityData.CategoryNameEn);
				OnPropertyChanged("CategoryNameEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CategoryNameAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String CategoryNameAr
		{
			get
			{
				return this.entityData.CategoryNameAr; 
			}
			
			set
			{
				if (this.entityData.CategoryNameAr == value)
					return;
					
				OnColumnChanging(AdmAcceptanceCategoryColumn.CategoryNameAr, this.entityData.CategoryNameAr);
				this.entityData.CategoryNameAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAcceptanceCategoryColumn.CategoryNameAr, this.entityData.CategoryNameAr);
				OnPropertyChanged("CategoryNameAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CategoryType property. 
		///		0  شرط عام
		/// 		/// 1  شرط ثابت
		/// 		/// 
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"0  شرط عام 1  شرط ثابت "), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal CategoryType
		{
			get
			{
				return this.entityData.CategoryType; 
			}
			
			set
			{
				if (this.entityData.CategoryType == value)
					return;
					
				OnColumnChanging(AdmAcceptanceCategoryColumn.CategoryType, this.entityData.CategoryType);
				this.entityData.CategoryType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAcceptanceCategoryColumn.CategoryType, this.entityData.CategoryType);
				OnPropertyChanged("CategoryType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CategoryValue property. 
		///		قيمة default
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"قيمة default"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal CategoryValue
		{
			get
			{
				return this.entityData.CategoryValue; 
			}
			
			set
			{
				if (this.entityData.CategoryValue == value)
					return;
					
				OnColumnChanging(AdmAcceptanceCategoryColumn.CategoryValue, this.entityData.CategoryValue);
				this.entityData.CategoryValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAcceptanceCategoryColumn.CategoryValue, this.entityData.CategoryValue);
				OnPropertyChanged("CategoryValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AbbreviationEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String AbbreviationEn
		{
			get
			{
				return this.entityData.AbbreviationEn; 
			}
			
			set
			{
				if (this.entityData.AbbreviationEn == value)
					return;
					
				OnColumnChanging(AdmAcceptanceCategoryColumn.AbbreviationEn, this.entityData.AbbreviationEn);
				this.entityData.AbbreviationEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAcceptanceCategoryColumn.AbbreviationEn, this.entityData.AbbreviationEn);
				OnPropertyChanged("AbbreviationEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AbbreviationAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String AbbreviationAr
		{
			get
			{
				return this.entityData.AbbreviationAr; 
			}
			
			set
			{
				if (this.entityData.AbbreviationAr == value)
					return;
					
				OnColumnChanging(AdmAcceptanceCategoryColumn.AbbreviationAr, this.entityData.AbbreviationAr);
				this.entityData.AbbreviationAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAcceptanceCategoryColumn.AbbreviationAr, this.entityData.AbbreviationAr);
				OnPropertyChanged("AbbreviationAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrientationFlg property. 
		///		0-معفى من تمهيدى    
		/// 		/// 1-تحميل تمهيدى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsOrientationFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"0-معفى من تمهيدى     1-تحميل تمهيدى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? OrientationFlg
		{
			get
			{
				return this.entityData.OrientationFlg; 
			}
			
			set
			{
				if (this.entityData.OrientationFlg == value)
					return;
					
				OnColumnChanging(AdmAcceptanceCategoryColumn.OrientationFlg, this.entityData.OrientationFlg);
				this.entityData.OrientationFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAcceptanceCategoryColumn.OrientationFlg, this.entityData.OrientationFlg);
				OnPropertyChanged("OrientationFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RegExpiration property. 
		///		Validator regular expression--0=sum  1-percent --Y/N
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Validator regular expression--0=sum  1-percent --Y/N"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String RegExpiration
		{
			get
			{
				return this.entityData.RegExpiration; 
			}
			
			set
			{
				if (this.entityData.RegExpiration == value)
					return;
					
				OnColumnChanging(AdmAcceptanceCategoryColumn.RegExpiration, this.entityData.RegExpiration);
				this.entityData.RegExpiration = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAcceptanceCategoryColumn.RegExpiration, this.entityData.RegExpiration);
				OnPropertyChanged("RegExpiration");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeClassId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsCodeDegreeClassId
		{
			get
			{
				return this.entityData.AsCodeDegreeClassId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeClassId == value)
					return;
					
				OnColumnChanging(AdmAcceptanceCategoryColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				this.entityData.AsCodeDegreeClassId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAcceptanceCategoryColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				OnPropertyChanged("AsCodeDegreeClassId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeId
		{
			get
			{
				return this.entityData.AsCodeDegreeId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeId == value)
					return;
					
				OnColumnChanging(AdmAcceptanceCategoryColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				this.entityData.AsCodeDegreeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAcceptanceCategoryColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				OnPropertyChanged("AsCodeDegreeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		جامعة-كلية
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"جامعة-كلية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(AdmAcceptanceCategoryColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAcceptanceCategoryColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCdeOperator property. 
		///		محدد
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"محدد"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 2)]
		public virtual System.String GsCdeOperator
		{
			get
			{
				return this.entityData.GsCdeOperator; 
			}
			
			set
			{
				if (this.entityData.GsCdeOperator == value)
					return;
					
				OnColumnChanging(AdmAcceptanceCategoryColumn.GsCdeOperator, this.entityData.GsCdeOperator);
				this.entityData.GsCdeOperator = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAcceptanceCategoryColumn.GsCdeOperator, this.entityData.GsCdeOperator);
				OnPropertyChanged("GsCdeOperator");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExamLoadFlg property. 
		///		0
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsExamLoadFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"0"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ExamLoadFlg
		{
			get
			{
				return this.entityData.ExamLoadFlg; 
			}
			
			set
			{
				if (this.entityData.ExamLoadFlg == value)
					return;
					
				OnColumnChanging(AdmAcceptanceCategoryColumn.ExamLoadFlg, this.entityData.ExamLoadFlg);
				this.entityData.ExamLoadFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAcceptanceCategoryColumn.ExamLoadFlg, this.entityData.ExamLoadFlg);
				OnPropertyChanged("ExamLoadFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CatTypeId property. 
		///		text,radio,checkbox,...
		/// 		/// 
		/// 		/// 
		/// 		/// 0 review
		/// 		/// 1 accept
		/// 		/// 2 enroll
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCatTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"text,radio,checkbox,...   0 review 1 accept 2 enroll"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CatTypeId
		{
			get
			{
				return this.entityData.CatTypeId; 
			}
			
			set
			{
				if (this.entityData.CatTypeId == value)
					return;
					
				OnColumnChanging(AdmAcceptanceCategoryColumn.CatTypeId, this.entityData.CatTypeId);
				this.entityData.CatTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAcceptanceCategoryColumn.CatTypeId, this.entityData.CatTypeId);
				OnPropertyChanged("CatTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EnumId property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsEnumIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? EnumId
		{
			get
			{
				return this.entityData.EnumId; 
			}
			
			set
			{
				if (this.entityData.EnumId == value)
					return;
					
				OnColumnChanging(AdmAcceptanceCategoryColumn.EnumId, this.entityData.EnumId);
				this.entityData.EnumId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAcceptanceCategoryColumn.EnumId, this.entityData.EnumId);
				OnPropertyChanged("EnumId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShowFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsShowFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ShowFlg
		{
			get
			{
				return this.entityData.ShowFlg; 
			}
			
			set
			{
				if (this.entityData.ShowFlg == value)
					return;
					
				OnColumnChanging(AdmAcceptanceCategoryColumn.ShowFlg, this.entityData.ShowFlg);
				this.entityData.ShowFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAcceptanceCategoryColumn.ShowFlg, this.entityData.ShowFlg);
				OnPropertyChanged("ShowFlg");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return entityData.AsCodeDegreeIdSource; }
            set { entityData.AsCodeDegreeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return entityData.AsCodeDegreeClassIdSource; }
            set { entityData.AsCodeDegreeClassIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of AdmApplicantAcceptance objects
		///	which are related to this object through the relation FK_ADM_APPLICANT_ACCEPTANCE_ADM_ACCEPTANCE_CATEGORY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmApplicantAcceptance> AdmApplicantAcceptanceCollection
		{
			get { return entityData.AdmApplicantAcceptanceCollection; }
			set { entityData.AdmApplicantAcceptanceCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("CategoryNameEn", "Category Name En"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CategoryNameEn", "Category Name En", 100));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("CategoryNameAr", "Category Name Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CategoryNameAr", "Category Name Ar", 100));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("AbbreviationEn", "Abbreviation En"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AbbreviationEn", "Abbreviation En", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("AbbreviationAr", "Abbreviation Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AbbreviationAr", "Abbreviation Ar", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("RegExpiration", "Reg Expiration", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GsCdeOperator", "Gs Cde Operator", 2));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ADM_ACCEPTANCE_CATEGORY"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ADM_ACCEPTANCE_CATEGORY_ID", "CATEGORY_NAME_EN", "CATEGORY_NAME_AR", "CATEGORY_TYPE", "CATEGORY_VALUE", "ABBREVIATION_EN", "ABBREVIATION_AR", "ORIENTATION_FLG", "REG_EXPIRATION", "AS_CODE_DEGREE_CLASS_ID", "AS_CODE_DEGREE_ID", "AS_FACULTY_INFO_ID", "GS_CDE_OPERATOR", "EXAM_LOAD_FLG", "CAT_TYPE_ID", "ENUM_ID", "SHOW_FLG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AdmAcceptanceCategoryEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AdmAcceptanceCategory) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AdmAcceptanceCategory>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AdmAcceptanceCategory);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AdmAcceptanceCategory Entity 
		///</summary>
		protected virtual AdmAcceptanceCategory Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AdmAcceptanceCategory copy = new AdmAcceptanceCategory();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AdmAcceptanceCategoryId = this.AdmAcceptanceCategoryId;
					copy.OriginalAdmAcceptanceCategoryId = this.OriginalAdmAcceptanceCategoryId;
				copy.CategoryNameEn = this.CategoryNameEn;
				copy.CategoryNameAr = this.CategoryNameAr;
				copy.CategoryType = this.CategoryType;
				copy.CategoryValue = this.CategoryValue;
				copy.AbbreviationEn = this.AbbreviationEn;
				copy.AbbreviationAr = this.AbbreviationAr;
				copy.OrientationFlg = this.OrientationFlg;
				copy.RegExpiration = this.RegExpiration;
				copy.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
				copy.AsCodeDegreeId = this.AsCodeDegreeId;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.GsCdeOperator = this.GsCdeOperator;
				copy.ExamLoadFlg = this.ExamLoadFlg;
				copy.CatTypeId = this.CatTypeId;
				copy.EnumId = this.EnumId;
				copy.ShowFlg = this.ShowFlg;
			
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				copy.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				copy.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				copy.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				copy.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
		
			//deep copy nested objects
			copy.AdmApplicantAcceptanceCollection = (TList<AdmApplicantAcceptance>) MakeCopyOf(this.AdmApplicantAcceptanceCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AdmAcceptanceCategory Entity 
		///</summary>
		public virtual AdmAcceptanceCategory Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AdmAcceptanceCategory Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AdmAcceptanceCategory DeepCopy()
		{
			return EntityHelper.Clone<AdmAcceptanceCategory>(this as AdmAcceptanceCategory);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AdmAcceptanceCategoryEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AdmAcceptanceCategoryEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AdmAcceptanceCategoryEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AdmAcceptanceCategoryColumn column)
		{
			switch(column)
			{
					case AdmAcceptanceCategoryColumn.AdmAcceptanceCategoryId:
					return entityData.AdmAcceptanceCategoryId != _originalData.AdmAcceptanceCategoryId;
					case AdmAcceptanceCategoryColumn.CategoryNameEn:
					return entityData.CategoryNameEn != _originalData.CategoryNameEn;
					case AdmAcceptanceCategoryColumn.CategoryNameAr:
					return entityData.CategoryNameAr != _originalData.CategoryNameAr;
					case AdmAcceptanceCategoryColumn.CategoryType:
					return entityData.CategoryType != _originalData.CategoryType;
					case AdmAcceptanceCategoryColumn.CategoryValue:
					return entityData.CategoryValue != _originalData.CategoryValue;
					case AdmAcceptanceCategoryColumn.AbbreviationEn:
					return entityData.AbbreviationEn != _originalData.AbbreviationEn;
					case AdmAcceptanceCategoryColumn.AbbreviationAr:
					return entityData.AbbreviationAr != _originalData.AbbreviationAr;
					case AdmAcceptanceCategoryColumn.OrientationFlg:
					return entityData.OrientationFlg != _originalData.OrientationFlg;
					case AdmAcceptanceCategoryColumn.RegExpiration:
					return entityData.RegExpiration != _originalData.RegExpiration;
					case AdmAcceptanceCategoryColumn.AsCodeDegreeClassId:
					return entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
					case AdmAcceptanceCategoryColumn.AsCodeDegreeId:
					return entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
					case AdmAcceptanceCategoryColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case AdmAcceptanceCategoryColumn.GsCdeOperator:
					return entityData.GsCdeOperator != _originalData.GsCdeOperator;
					case AdmAcceptanceCategoryColumn.ExamLoadFlg:
					return entityData.ExamLoadFlg != _originalData.ExamLoadFlg;
					case AdmAcceptanceCategoryColumn.CatTypeId:
					return entityData.CatTypeId != _originalData.CatTypeId;
					case AdmAcceptanceCategoryColumn.EnumId:
					return entityData.EnumId != _originalData.EnumId;
					case AdmAcceptanceCategoryColumn.ShowFlg:
					return entityData.ShowFlg != _originalData.ShowFlg;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AdmAcceptanceCategoryColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AdmAcceptanceCategoryId != _originalData.AdmAcceptanceCategoryId;
			result = result || entityData.CategoryNameEn != _originalData.CategoryNameEn;
			result = result || entityData.CategoryNameAr != _originalData.CategoryNameAr;
			result = result || entityData.CategoryType != _originalData.CategoryType;
			result = result || entityData.CategoryValue != _originalData.CategoryValue;
			result = result || entityData.AbbreviationEn != _originalData.AbbreviationEn;
			result = result || entityData.AbbreviationAr != _originalData.AbbreviationAr;
			result = result || entityData.OrientationFlg != _originalData.OrientationFlg;
			result = result || entityData.RegExpiration != _originalData.RegExpiration;
			result = result || entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
			result = result || entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.GsCdeOperator != _originalData.GsCdeOperator;
			result = result || entityData.ExamLoadFlg != _originalData.ExamLoadFlg;
			result = result || entityData.CatTypeId != _originalData.CatTypeId;
			result = result || entityData.EnumId != _originalData.EnumId;
			result = result || entityData.ShowFlg != _originalData.ShowFlg;
			return result;
		}	
		
		///<summary>
		///  Returns a AdmAcceptanceCategory Entity with the original data.
		///</summary>
		public AdmAcceptanceCategory GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAdmAcceptanceCategory(
				_originalData.AdmAcceptanceCategoryId,
				_originalData.CategoryNameEn,
				_originalData.CategoryNameAr,
				_originalData.CategoryType,
				_originalData.CategoryValue,
				_originalData.AbbreviationEn,
				_originalData.AbbreviationAr,
				_originalData.OrientationFlg,
				_originalData.RegExpiration,
				_originalData.AsCodeDegreeClassId,
				_originalData.AsCodeDegreeId,
				_originalData.AsFacultyInfoId,
				_originalData.GsCdeOperator,
				_originalData.ExamLoadFlg,
				_originalData.CatTypeId,
				_originalData.EnumId,
				_originalData.ShowFlg
				);
				
			return (AdmAcceptanceCategory)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AdmAcceptanceCategoryBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AdmAcceptanceCategoryBase)
				return ValueEquals(this, (AdmAcceptanceCategoryBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AdmAcceptanceCategoryBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AdmAcceptanceCategoryId.GetHashCode() ^ 
					this.CategoryNameEn.GetHashCode() ^ 
					this.CategoryNameAr.GetHashCode() ^ 
					this.CategoryType.GetHashCode() ^ 
					this.CategoryValue.GetHashCode() ^ 
					this.AbbreviationEn.GetHashCode() ^ 
					this.AbbreviationAr.GetHashCode() ^ 
					((this.OrientationFlg == null) ? string.Empty : this.OrientationFlg.ToString()).GetHashCode() ^ 
					((this.RegExpiration == null) ? string.Empty : this.RegExpiration.ToString()).GetHashCode() ^ 
					this.AsCodeDegreeClassId.GetHashCode() ^ 
					((this.AsCodeDegreeId == null) ? string.Empty : this.AsCodeDegreeId.ToString()).GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					((this.GsCdeOperator == null) ? string.Empty : this.GsCdeOperator.ToString()).GetHashCode() ^ 
					((this.ExamLoadFlg == null) ? string.Empty : this.ExamLoadFlg.ToString()).GetHashCode() ^ 
					((this.CatTypeId == null) ? string.Empty : this.CatTypeId.ToString()).GetHashCode() ^ 
					((this.EnumId == null) ? string.Empty : this.EnumId.ToString()).GetHashCode() ^ 
					((this.ShowFlg == null) ? string.Empty : this.ShowFlg.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AdmAcceptanceCategoryBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AdmAcceptanceCategoryBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AdmAcceptanceCategoryBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AdmAcceptanceCategoryBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AdmAcceptanceCategoryBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AdmAcceptanceCategoryBase Object1, AdmAcceptanceCategoryBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AdmAcceptanceCategoryId != Object2.AdmAcceptanceCategoryId)
				equal = false;
			if (Object1.CategoryNameEn != Object2.CategoryNameEn)
				equal = false;
			if (Object1.CategoryNameAr != Object2.CategoryNameAr)
				equal = false;
			if (Object1.CategoryType != Object2.CategoryType)
				equal = false;
			if (Object1.CategoryValue != Object2.CategoryValue)
				equal = false;
			if (Object1.AbbreviationEn != Object2.AbbreviationEn)
				equal = false;
			if (Object1.AbbreviationAr != Object2.AbbreviationAr)
				equal = false;
			if ( Object1.OrientationFlg != null && Object2.OrientationFlg != null )
			{
				if (Object1.OrientationFlg != Object2.OrientationFlg)
					equal = false;
			}
			else if (Object1.OrientationFlg == null ^ Object2.OrientationFlg == null )
			{
				equal = false;
			}
			if ( Object1.RegExpiration != null && Object2.RegExpiration != null )
			{
				if (Object1.RegExpiration != Object2.RegExpiration)
					equal = false;
			}
			else if (Object1.RegExpiration == null ^ Object2.RegExpiration == null )
			{
				equal = false;
			}
			if (Object1.AsCodeDegreeClassId != Object2.AsCodeDegreeClassId)
				equal = false;
			if ( Object1.AsCodeDegreeId != null && Object2.AsCodeDegreeId != null )
			{
				if (Object1.AsCodeDegreeId != Object2.AsCodeDegreeId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeId == null ^ Object2.AsCodeDegreeId == null )
			{
				equal = false;
			}
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if ( Object1.GsCdeOperator != null && Object2.GsCdeOperator != null )
			{
				if (Object1.GsCdeOperator != Object2.GsCdeOperator)
					equal = false;
			}
			else if (Object1.GsCdeOperator == null ^ Object2.GsCdeOperator == null )
			{
				equal = false;
			}
			if ( Object1.ExamLoadFlg != null && Object2.ExamLoadFlg != null )
			{
				if (Object1.ExamLoadFlg != Object2.ExamLoadFlg)
					equal = false;
			}
			else if (Object1.ExamLoadFlg == null ^ Object2.ExamLoadFlg == null )
			{
				equal = false;
			}
			if ( Object1.CatTypeId != null && Object2.CatTypeId != null )
			{
				if (Object1.CatTypeId != Object2.CatTypeId)
					equal = false;
			}
			else if (Object1.CatTypeId == null ^ Object2.CatTypeId == null )
			{
				equal = false;
			}
			if ( Object1.EnumId != null && Object2.EnumId != null )
			{
				if (Object1.EnumId != Object2.EnumId)
					equal = false;
			}
			else if (Object1.EnumId == null ^ Object2.EnumId == null )
			{
				equal = false;
			}
			if ( Object1.ShowFlg != null && Object2.ShowFlg != null )
			{
				if (Object1.ShowFlg != Object2.ShowFlg)
					equal = false;
			}
			else if (Object1.ShowFlg == null ^ Object2.ShowFlg == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AdmAcceptanceCategoryBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AdmAcceptanceCategoryComparer GetComparer()
        {
            return new AdmAcceptanceCategoryComparer();
        }
        */

        // Comparer delegates back to AdmAcceptanceCategory
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AdmAcceptanceCategory rhs, AdmAcceptanceCategoryColumn which)
        {
            switch (which)
            {
            	
            	
            	case AdmAcceptanceCategoryColumn.AdmAcceptanceCategoryId:
            		return this.AdmAcceptanceCategoryId.CompareTo(rhs.AdmAcceptanceCategoryId);
            		
            		                 
            	
            	
            	case AdmAcceptanceCategoryColumn.CategoryNameEn:
            		return this.CategoryNameEn.CompareTo(rhs.CategoryNameEn);
            		
            		                 
            	
            	
            	case AdmAcceptanceCategoryColumn.CategoryNameAr:
            		return this.CategoryNameAr.CompareTo(rhs.CategoryNameAr);
            		
            		                 
            	
            	
            	case AdmAcceptanceCategoryColumn.CategoryType:
            		return this.CategoryType.CompareTo(rhs.CategoryType);
            		
            		                 
            	
            	
            	case AdmAcceptanceCategoryColumn.CategoryValue:
            		return this.CategoryValue.CompareTo(rhs.CategoryValue);
            		
            		                 
            	
            	
            	case AdmAcceptanceCategoryColumn.AbbreviationEn:
            		return this.AbbreviationEn.CompareTo(rhs.AbbreviationEn);
            		
            		                 
            	
            	
            	case AdmAcceptanceCategoryColumn.AbbreviationAr:
            		return this.AbbreviationAr.CompareTo(rhs.AbbreviationAr);
            		
            		                 
            	
            	
            	case AdmAcceptanceCategoryColumn.OrientationFlg:
            		return this.OrientationFlg.Value.CompareTo(rhs.OrientationFlg.Value);
            		
            		                 
            	
            	
            	case AdmAcceptanceCategoryColumn.RegExpiration:
            		return this.RegExpiration.CompareTo(rhs.RegExpiration);
            		
            		                 
            	
            	
            	case AdmAcceptanceCategoryColumn.AsCodeDegreeClassId:
            		return this.AsCodeDegreeClassId.CompareTo(rhs.AsCodeDegreeClassId);
            		
            		                 
            	
            	
            	case AdmAcceptanceCategoryColumn.AsCodeDegreeId:
            		return this.AsCodeDegreeId.Value.CompareTo(rhs.AsCodeDegreeId.Value);
            		
            		                 
            	
            	
            	case AdmAcceptanceCategoryColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case AdmAcceptanceCategoryColumn.GsCdeOperator:
            		return this.GsCdeOperator.CompareTo(rhs.GsCdeOperator);
            		
            		                 
            	
            	
            	case AdmAcceptanceCategoryColumn.ExamLoadFlg:
            		return this.ExamLoadFlg.Value.CompareTo(rhs.ExamLoadFlg.Value);
            		
            		                 
            	
            	
            	case AdmAcceptanceCategoryColumn.CatTypeId:
            		return this.CatTypeId.Value.CompareTo(rhs.CatTypeId.Value);
            		
            		                 
            	
            	
            	case AdmAcceptanceCategoryColumn.EnumId:
            		return this.EnumId.Value.CompareTo(rhs.EnumId.Value);
            		
            		                 
            	
            	
            	case AdmAcceptanceCategoryColumn.ShowFlg:
            		return this.ShowFlg.Value.CompareTo(rhs.ShowFlg.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AdmAcceptanceCategoryKey> Members
		
		// member variable for the EntityId property
		private AdmAcceptanceCategoryKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AdmAcceptanceCategoryKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AdmAcceptanceCategoryKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AdmAcceptanceCategory")
					.Append("|").Append( this.AdmAcceptanceCategoryId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{18}{17}- AdmAcceptanceCategoryId: {0}{17}- CategoryNameEn: {1}{17}- CategoryNameAr: {2}{17}- CategoryType: {3}{17}- CategoryValue: {4}{17}- AbbreviationEn: {5}{17}- AbbreviationAr: {6}{17}- OrientationFlg: {7}{17}- RegExpiration: {8}{17}- AsCodeDegreeClassId: {9}{17}- AsCodeDegreeId: {10}{17}- AsFacultyInfoId: {11}{17}- GsCdeOperator: {12}{17}- ExamLoadFlg: {13}{17}- CatTypeId: {14}{17}- EnumId: {15}{17}- ShowFlg: {16}{17}{19}", 
				this.AdmAcceptanceCategoryId,
				this.CategoryNameEn,
				this.CategoryNameAr,
				this.CategoryType,
				this.CategoryValue,
				this.AbbreviationEn,
				this.AbbreviationAr,
				(this.OrientationFlg == null) ? string.Empty : this.OrientationFlg.ToString(),
				(this.RegExpiration == null) ? string.Empty : this.RegExpiration.ToString(),
				this.AsCodeDegreeClassId,
				(this.AsCodeDegreeId == null) ? string.Empty : this.AsCodeDegreeId.ToString(),
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				(this.GsCdeOperator == null) ? string.Empty : this.GsCdeOperator.ToString(),
				(this.ExamLoadFlg == null) ? string.Empty : this.ExamLoadFlg.ToString(),
				(this.CatTypeId == null) ? string.Empty : this.CatTypeId.ToString(),
				(this.EnumId == null) ? string.Empty : this.EnumId.ToString(),
				(this.ShowFlg == null) ? string.Empty : this.ShowFlg.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ADM_ACCEPTANCE_CATEGORY' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AdmAcceptanceCategoryEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ADM_ACCEPTANCE_CATEGORY_ID : شروط وقواعد
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ADM_ACCEPTANCE_CATEGORY"</remarks>
		public System.Decimal AdmAcceptanceCategoryId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalAdmAcceptanceCategoryId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// CATEGORY_NAME_EN : 
		/// </summary>
		public System.String		  CategoryNameEn = string.Empty;
		
		/// <summary>
		/// CATEGORY_NAME_AR : 
		/// </summary>
		public System.String		  CategoryNameAr = string.Empty;
		
		/// <summary>
		/// CATEGORY_TYPE : 0  شرط عام
		/// 		/// 1  شرط ثابت
		/// 		/// 
		/// </summary>
		public System.Decimal		  CategoryType = 0.0m;
		
		/// <summary>
		/// CATEGORY_VALUE : قيمة default
		/// </summary>
		public System.Decimal		  CategoryValue = 0.0m;
		
		/// <summary>
		/// ABBREVIATION_EN : 
		/// </summary>
		public System.String		  AbbreviationEn = string.Empty;
		
		/// <summary>
		/// ABBREVIATION_AR : 
		/// </summary>
		public System.String		  AbbreviationAr = string.Empty;
		
		/// <summary>
		/// ORIENTATION_FLG : 0-معفى من تمهيدى    
		/// 		/// 1-تحميل تمهيدى
		/// </summary>
		public System.Decimal?		  OrientationFlg = null;
		
		/// <summary>
		/// REG_EXPIRATION : Validator regular expression--0=sum  1-percent --Y/N
		/// </summary>
		public System.String		  RegExpiration = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_CLASS_ID : 
		/// </summary>
		public System.Decimal		  AsCodeDegreeClassId = 0.0m;
		
		/// <summary>
		/// AS_CODE_DEGREE_ID : 
		/// </summary>
		public System.Decimal?		  AsCodeDegreeId = null;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : جامعة-كلية
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// GS_CDE_OPERATOR : محدد
		/// </summary>
		public System.String		  GsCdeOperator = null;
		
		/// <summary>
		/// EXAM_LOAD_FLG : 0
		/// </summary>
		public System.Boolean?		  ExamLoadFlg = null;
		
		/// <summary>
		/// CAT_TYPE_ID : text,radio,checkbox,...
		/// 		/// 
		/// 		/// 
		/// 		/// 0 review
		/// 		/// 1 accept
		/// 		/// 2 enroll
		/// </summary>
		public System.Decimal?		  CatTypeId = null;
		
		/// <summary>
		/// ENUM_ID : 
		/// </summary>
		public System.Int16?		  EnumId = null;
		
		/// <summary>
		/// SHOW_FLG : 
		/// </summary>
		public System.Boolean?		  ShowFlg = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsCodeDegree _asCodeDegreeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return this._asCodeDegreeIdSource; }
            set { this._asCodeDegreeIdSource = value; }
      	}
		private AsCodeDegreeClass _asCodeDegreeClassIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return this._asCodeDegreeClassIdSource; }
            set { this._asCodeDegreeClassIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region AdmApplicantAcceptanceCollection
		
		private TList<AdmApplicantAcceptance> _admApplicantAcceptanceAdmAcceptanceCategoryId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admApplicantAcceptanceAdmAcceptanceCategoryId
		/// </summary>
		
		public TList<AdmApplicantAcceptance> AdmApplicantAcceptanceCollection
		{
			get
			{
				if (_admApplicantAcceptanceAdmAcceptanceCategoryId == null)
				{
				_admApplicantAcceptanceAdmAcceptanceCategoryId = new TList<AdmApplicantAcceptance>();
				}
	
				return _admApplicantAcceptanceAdmAcceptanceCategoryId;
			}
			set { _admApplicantAcceptanceAdmAcceptanceCategoryId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AdmAcceptanceCategoryEntityData _tmp = new AdmAcceptanceCategoryEntityData();
						
			_tmp.AdmAcceptanceCategoryId = this.AdmAcceptanceCategoryId;
			_tmp.OriginalAdmAcceptanceCategoryId = this.OriginalAdmAcceptanceCategoryId;
			
			_tmp.CategoryNameEn = this.CategoryNameEn;
			_tmp.CategoryNameAr = this.CategoryNameAr;
			_tmp.CategoryType = this.CategoryType;
			_tmp.CategoryValue = this.CategoryValue;
			_tmp.AbbreviationEn = this.AbbreviationEn;
			_tmp.AbbreviationAr = this.AbbreviationAr;
			_tmp.OrientationFlg = this.OrientationFlg;
			_tmp.RegExpiration = this.RegExpiration;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.GsCdeOperator = this.GsCdeOperator;
			_tmp.ExamLoadFlg = this.ExamLoadFlg;
			_tmp.CatTypeId = this.CatTypeId;
			_tmp.EnumId = this.EnumId;
			_tmp.ShowFlg = this.ShowFlg;
			
			#region Source Parent Composite Entities
			if (this.AsCodeDegreeIdSource != null)
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null)
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._admApplicantAcceptanceAdmAcceptanceCategoryId != null)
				_tmp.AdmApplicantAcceptanceCollection = (TList<AdmApplicantAcceptance>) MakeCopyOf(this.AdmApplicantAcceptanceCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AdmAcceptanceCategoryEntityData _tmp = new AdmAcceptanceCategoryEntityData();
						
			_tmp.AdmAcceptanceCategoryId = this.AdmAcceptanceCategoryId;
			_tmp.OriginalAdmAcceptanceCategoryId = this.OriginalAdmAcceptanceCategoryId;
			
			_tmp.CategoryNameEn = this.CategoryNameEn;
			_tmp.CategoryNameAr = this.CategoryNameAr;
			_tmp.CategoryType = this.CategoryType;
			_tmp.CategoryValue = this.CategoryValue;
			_tmp.AbbreviationEn = this.AbbreviationEn;
			_tmp.AbbreviationAr = this.AbbreviationAr;
			_tmp.OrientationFlg = this.OrientationFlg;
			_tmp.RegExpiration = this.RegExpiration;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.GsCdeOperator = this.GsCdeOperator;
			_tmp.ExamLoadFlg = this.ExamLoadFlg;
			_tmp.CatTypeId = this.CatTypeId;
			_tmp.EnumId = this.EnumId;
			_tmp.ShowFlg = this.ShowFlg;
			
			#region Source Parent Composite Entities
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				_tmp.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				_tmp.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.AdmApplicantAcceptanceCollection = (TList<AdmApplicantAcceptance>) MakeCopyOf(this.AdmApplicantAcceptanceCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmAcceptanceCategoryColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AdmAcceptanceCategoryColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmAcceptanceCategoryColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AdmAcceptanceCategoryColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmAcceptanceCategoryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AdmAcceptanceCategoryColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AdmAcceptanceCategoryEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AdmAcceptanceCategoryEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmAcceptanceCategoryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AdmAcceptanceCategoryColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AdmAcceptanceCategoryEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AdmAcceptanceCategoryEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AdmAcceptanceCategoryEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AdmAcceptanceCategory"/> object.
	/// </remarks>
	public class AdmAcceptanceCategoryEventArgs : System.EventArgs
	{
		private AdmAcceptanceCategoryColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AdmAcceptanceCategoryEventArgs class.
		///</summary>
		public AdmAcceptanceCategoryEventArgs(AdmAcceptanceCategoryColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AdmAcceptanceCategoryEventArgs class.
		///</summary>
		public AdmAcceptanceCategoryEventArgs(AdmAcceptanceCategoryColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AdmAcceptanceCategoryColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AdmAcceptanceCategoryColumn" />
		public AdmAcceptanceCategoryColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AdmAcceptanceCategory related events.
	///</summary>
	public delegate void AdmAcceptanceCategoryEventHandler(object sender, AdmAcceptanceCategoryEventArgs e);
	
	#region AdmAcceptanceCategoryComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AdmAcceptanceCategoryComparer : System.Collections.Generic.IComparer<AdmAcceptanceCategory>
	{
		AdmAcceptanceCategoryColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AdmAcceptanceCategoryComparer"/> class.
        /// </summary>
		public AdmAcceptanceCategoryComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AdmAcceptanceCategoryComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AdmAcceptanceCategoryComparer(AdmAcceptanceCategoryColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AdmAcceptanceCategory"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AdmAcceptanceCategory"/> to compare.</param>
        /// <param name="b">The second <c>AdmAcceptanceCategory</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AdmAcceptanceCategory a, AdmAcceptanceCategory b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AdmAcceptanceCategory entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AdmAcceptanceCategory a, AdmAcceptanceCategory b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AdmAcceptanceCategoryColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AdmAcceptanceCategoryKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AdmAcceptanceCategory"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AdmAcceptanceCategoryKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AdmAcceptanceCategoryKey class.
		/// </summary>
		public AdmAcceptanceCategoryKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmAcceptanceCategoryKey class.
		/// </summary>
		public AdmAcceptanceCategoryKey(AdmAcceptanceCategoryBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AdmAcceptanceCategoryId = entity.AdmAcceptanceCategoryId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmAcceptanceCategoryKey class.
		/// </summary>
		public AdmAcceptanceCategoryKey(System.Decimal _admAcceptanceCategoryId)
		{
			#region Init Properties

			this.AdmAcceptanceCategoryId = _admAcceptanceCategoryId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AdmAcceptanceCategoryBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AdmAcceptanceCategoryBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AdmAcceptanceCategoryId property
		private System.Decimal _admAcceptanceCategoryId;
		
		/// <summary>
		/// Gets or sets the AdmAcceptanceCategoryId property.
		/// </summary>
		public System.Decimal AdmAcceptanceCategoryId
		{
			get { return _admAcceptanceCategoryId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AdmAcceptanceCategoryId = value;
				
				_admAcceptanceCategoryId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AdmAcceptanceCategoryId = ( values["AdmAcceptanceCategoryId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["AdmAcceptanceCategoryId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AdmAcceptanceCategoryId", AdmAcceptanceCategoryId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AdmAcceptanceCategoryId: {0}{1}",
								AdmAcceptanceCategoryId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AdmAcceptanceCategoryColumn Enum
	
	/// <summary>
	/// Enumerate the AdmAcceptanceCategory columns.
	/// </summary>
	[Serializable]
	public enum AdmAcceptanceCategoryColumn : int
	{
		/// <summary>
		/// AdmAcceptanceCategoryId : شروط وقواعد
		/// </summary>
		[EnumTextValue("ADM_ACCEPTANCE_CATEGORY_ID")]
		[ColumnEnum("ADM_ACCEPTANCE_CATEGORY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		AdmAcceptanceCategoryId = 1,
		/// <summary>
		/// CategoryNameEn : 
		/// </summary>
		[EnumTextValue("CATEGORY_NAME_EN")]
		[ColumnEnum("CATEGORY_NAME_EN", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		CategoryNameEn = 2,
		/// <summary>
		/// CategoryNameAr : 
		/// </summary>
		[EnumTextValue("CATEGORY_NAME_AR")]
		[ColumnEnum("CATEGORY_NAME_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		CategoryNameAr = 3,
		/// <summary>
		/// CategoryType : 0  شرط عام
		/// 		/// 1  شرط ثابت
		/// 		/// 
		/// </summary>
		[EnumTextValue("CATEGORY_TYPE")]
		[ColumnEnum("CATEGORY_TYPE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		CategoryType = 4,
		/// <summary>
		/// CategoryValue : قيمة default
		/// </summary>
		[EnumTextValue("CATEGORY_VALUE")]
		[ColumnEnum("CATEGORY_VALUE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		CategoryValue = 5,
		/// <summary>
		/// AbbreviationEn : 
		/// </summary>
		[EnumTextValue("ABBREVIATION_EN")]
		[ColumnEnum("ABBREVIATION_EN", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		AbbreviationEn = 6,
		/// <summary>
		/// AbbreviationAr : 
		/// </summary>
		[EnumTextValue("ABBREVIATION_AR")]
		[ColumnEnum("ABBREVIATION_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		AbbreviationAr = 7,
		/// <summary>
		/// OrientationFlg : 0-معفى من تمهيدى    
		/// 		/// 1-تحميل تمهيدى
		/// </summary>
		[EnumTextValue("ORIENTATION_FLG")]
		[ColumnEnum("ORIENTATION_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		OrientationFlg = 8,
		/// <summary>
		/// RegExpiration : Validator regular expression--0=sum  1-percent --Y/N
		/// </summary>
		[EnumTextValue("REG_EXPIRATION")]
		[ColumnEnum("REG_EXPIRATION", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		RegExpiration = 9,
		/// <summary>
		/// AsCodeDegreeClassId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_CLASS_ID")]
		[ColumnEnum("AS_CODE_DEGREE_CLASS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsCodeDegreeClassId = 10,
		/// <summary>
		/// AsCodeDegreeId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_ID")]
		[ColumnEnum("AS_CODE_DEGREE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeId = 11,
		/// <summary>
		/// AsFacultyInfoId : جامعة-كلية
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 12,
		/// <summary>
		/// GsCdeOperator : محدد
		/// </summary>
		[EnumTextValue("GS_CDE_OPERATOR")]
		[ColumnEnum("GS_CDE_OPERATOR", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 2)]
		GsCdeOperator = 13,
		/// <summary>
		/// ExamLoadFlg : 0
		/// </summary>
		[EnumTextValue("EXAM_LOAD_FLG")]
		[ColumnEnum("EXAM_LOAD_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ExamLoadFlg = 14,
		/// <summary>
		/// CatTypeId : text,radio,checkbox,...
		/// 		/// 
		/// 		/// 
		/// 		/// 0 review
		/// 		/// 1 accept
		/// 		/// 2 enroll
		/// </summary>
		[EnumTextValue("CAT_TYPE_ID")]
		[ColumnEnum("CAT_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CatTypeId = 15,
		/// <summary>
		/// EnumId : 
		/// </summary>
		[EnumTextValue("ENUM_ID")]
		[ColumnEnum("ENUM_ID", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		EnumId = 16,
		/// <summary>
		/// ShowFlg : 
		/// </summary>
		[EnumTextValue("SHOW_FLG")]
		[ColumnEnum("SHOW_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ShowFlg = 17
	}//End enum

	#endregion AdmAcceptanceCategoryColumn Enum

} // end namespace
