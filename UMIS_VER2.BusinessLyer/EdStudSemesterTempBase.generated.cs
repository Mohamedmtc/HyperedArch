
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdStudSemesterTemp.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_STUD_SEMESTER_TEMP' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdStudSemesterTempBase : EntityBase, IEdStudSemesterTemp, IEntityId<EdStudSemesterTempKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdStudSemesterTempEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdStudSemesterTempEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdStudSemesterTempEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdStudSemesterTemp> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudSemesterTempEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudSemesterTempEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdStudSemesterTempBase"/> instance.
		///</summary>
		public EdStudSemesterTempBase()
		{
			this.entityData = new EdStudSemesterTempEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdStudSemesterTempBase"/> instance.
		///</summary>
		///<param name="_edStudSemesterId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_edStudId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_edCodeLevelId"></param>
		///<param name="_isLast"></param>
		///<param name="_edCodeLoadTypeId"></param>
		///<param name="_edCodeEnrollTypeId"></param>
		///<param name="_accumCh"></param>
		///<param name="_accumGpa"></param>
		///<param name="_isCourseApproved"></param>
		///<param name="_courseApproveDate"></param>
		///<param name="_accumPoint"></param>
		///<param name="_semCh"></param>
		///<param name="_semGpa"></param>
		///<param name="_semPoint"></param>
		///<param name="_isClosed"></param>
		///<param name="_majorCgpa"></param>
		///<param name="_majorGpa"></param>
		///<param name="_acdPlnLoadFlg"></param>
		///<param name="_onlineFlg"></param>
		///<param name="_expForGrad"></param>
		///<param name="_holdForGrad"></param>
		///<param name="_orientFlg"></param>
		///<param name="_haveSponsor"></param>
		///<param name="_haveInstallment"></param>
		///<param name="_nationalitySimilarityFlg"></param>
		///<param name="_haveDiscount"></param>
		///<param name="_haveRetrieve"></param>
		///<param name="_havePostponement"></param>
		///<param name="_haveRemission"></param>
		///<param name="_feeFacultyRuleId"></param>
		///<param name="_studCardStkrFlg"></param>
		///<param name="_studCardStkrDate"></param>
		///<param name="_feeTotAmnt"></param>
		///<param name="_feePayAmnt"></param>
		///<param name="_feeRefundAmnt"></param>
		///<param name="_payFlg"></param>
		///<param name="_freezeFlg"></param>
		///<param name="_asCodeDegreeId"></param>
		///<param name="_edCdeAcadWarnTypeId"></param>
		///<param name="_notes"></param>
		///<param name="_semCount"></param>
		///<param name="_edCdeExamTypeId">نوع الامتحان: تكميلى- اعادة</param>
		public EdStudSemesterTempBase(System.Decimal _edStudSemesterId, System.Decimal _edCodeSemesterId, 
			System.Decimal _edStudId, System.Decimal _edAcadYearId, System.Decimal? _asFacultyInfoId, 
			System.Decimal? _edCodeLevelId, System.Decimal? _isLast, System.Decimal? _edCodeLoadTypeId, 
			System.Decimal? _edCodeEnrollTypeId, System.Decimal? _accumCh, System.Decimal? _accumGpa, 
			System.Decimal? _isCourseApproved, System.DateTime? _courseApproveDate, System.Decimal? _accumPoint, 
			System.Decimal? _semCh, System.Decimal? _semGpa, System.Decimal? _semPoint, 
			System.Decimal? _isClosed, System.Decimal? _majorCgpa, System.Decimal? _majorGpa, 
			System.Decimal? _acdPlnLoadFlg, System.Decimal? _onlineFlg, System.Decimal? _expForGrad, 
			System.Decimal? _holdForGrad, System.Decimal? _orientFlg, System.Decimal? _haveSponsor, 
			System.Decimal? _haveInstallment, System.Decimal? _nationalitySimilarityFlg, System.Decimal? _haveDiscount, 
			System.Decimal? _haveRetrieve, System.Decimal? _havePostponement, System.Decimal? _haveRemission, 
			System.Decimal? _feeFacultyRuleId, System.Decimal? _studCardStkrFlg, System.DateTime? _studCardStkrDate, 
			System.Decimal? _feeTotAmnt, System.Decimal? _feePayAmnt, System.Decimal? _feeRefundAmnt, 
			System.Decimal? _payFlg, System.Decimal? _freezeFlg, System.Decimal? _asCodeDegreeId, 
			System.Decimal? _edCdeAcadWarnTypeId, System.String _notes, System.Decimal? _semCount, 
			System.Decimal? _edCdeExamTypeId)
		{
			this.entityData = new EdStudSemesterTempEntityData();
			this.backupData = null;

			this.EdStudSemesterId = _edStudSemesterId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.EdStudId = _edStudId;
			this.EdAcadYearId = _edAcadYearId;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.EdCodeLevelId = _edCodeLevelId;
			this.IsLast = _isLast;
			this.EdCodeLoadTypeId = _edCodeLoadTypeId;
			this.EdCodeEnrollTypeId = _edCodeEnrollTypeId;
			this.AccumCh = _accumCh;
			this.AccumGpa = _accumGpa;
			this.IsCourseApproved = _isCourseApproved;
			this.CourseApproveDate = _courseApproveDate;
			this.AccumPoint = _accumPoint;
			this.SemCh = _semCh;
			this.SemGpa = _semGpa;
			this.SemPoint = _semPoint;
			this.IsClosed = _isClosed;
			this.MajorCgpa = _majorCgpa;
			this.MajorGpa = _majorGpa;
			this.AcdPlnLoadFlg = _acdPlnLoadFlg;
			this.OnlineFlg = _onlineFlg;
			this.ExpForGrad = _expForGrad;
			this.HoldForGrad = _holdForGrad;
			this.OrientFlg = _orientFlg;
			this.HaveSponsor = _haveSponsor;
			this.HaveInstallment = _haveInstallment;
			this.NationalitySimilarityFlg = _nationalitySimilarityFlg;
			this.HaveDiscount = _haveDiscount;
			this.HaveRetrieve = _haveRetrieve;
			this.HavePostponement = _havePostponement;
			this.HaveRemission = _haveRemission;
			this.FeeFacultyRuleId = _feeFacultyRuleId;
			this.StudCardStkrFlg = _studCardStkrFlg;
			this.StudCardStkrDate = _studCardStkrDate;
			this.FeeTotAmnt = _feeTotAmnt;
			this.FeePayAmnt = _feePayAmnt;
			this.FeeRefundAmnt = _feeRefundAmnt;
			this.PayFlg = _payFlg;
			this.FreezeFlg = _freezeFlg;
			this.AsCodeDegreeId = _asCodeDegreeId;
			this.EdCdeAcadWarnTypeId = _edCdeAcadWarnTypeId;
			this.Notes = _notes;
			this.SemCount = _semCount;
			this.EdCdeExamTypeId = _edCdeExamTypeId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdStudSemesterTemp"/> instance.
		///</summary>
		///<param name="_edStudSemesterId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_edStudId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_edCodeLevelId"></param>
		///<param name="_isLast"></param>
		///<param name="_edCodeLoadTypeId"></param>
		///<param name="_edCodeEnrollTypeId"></param>
		///<param name="_accumCh"></param>
		///<param name="_accumGpa"></param>
		///<param name="_isCourseApproved"></param>
		///<param name="_courseApproveDate"></param>
		///<param name="_accumPoint"></param>
		///<param name="_semCh"></param>
		///<param name="_semGpa"></param>
		///<param name="_semPoint"></param>
		///<param name="_isClosed"></param>
		///<param name="_majorCgpa"></param>
		///<param name="_majorGpa"></param>
		///<param name="_acdPlnLoadFlg"></param>
		///<param name="_onlineFlg"></param>
		///<param name="_expForGrad"></param>
		///<param name="_holdForGrad"></param>
		///<param name="_orientFlg"></param>
		///<param name="_haveSponsor"></param>
		///<param name="_haveInstallment"></param>
		///<param name="_nationalitySimilarityFlg"></param>
		///<param name="_haveDiscount"></param>
		///<param name="_haveRetrieve"></param>
		///<param name="_havePostponement"></param>
		///<param name="_haveRemission"></param>
		///<param name="_feeFacultyRuleId"></param>
		///<param name="_studCardStkrFlg"></param>
		///<param name="_studCardStkrDate"></param>
		///<param name="_feeTotAmnt"></param>
		///<param name="_feePayAmnt"></param>
		///<param name="_feeRefundAmnt"></param>
		///<param name="_payFlg"></param>
		///<param name="_freezeFlg"></param>
		///<param name="_asCodeDegreeId"></param>
		///<param name="_edCdeAcadWarnTypeId"></param>
		///<param name="_notes"></param>
		///<param name="_semCount"></param>
		///<param name="_edCdeExamTypeId">نوع الامتحان: تكميلى- اعادة</param>
		public static EdStudSemesterTemp CreateEdStudSemesterTemp(System.Decimal _edStudSemesterId, System.Decimal _edCodeSemesterId, 
			System.Decimal _edStudId, System.Decimal _edAcadYearId, System.Decimal? _asFacultyInfoId, 
			System.Decimal? _edCodeLevelId, System.Decimal? _isLast, System.Decimal? _edCodeLoadTypeId, 
			System.Decimal? _edCodeEnrollTypeId, System.Decimal? _accumCh, System.Decimal? _accumGpa, 
			System.Decimal? _isCourseApproved, System.DateTime? _courseApproveDate, System.Decimal? _accumPoint, 
			System.Decimal? _semCh, System.Decimal? _semGpa, System.Decimal? _semPoint, 
			System.Decimal? _isClosed, System.Decimal? _majorCgpa, System.Decimal? _majorGpa, 
			System.Decimal? _acdPlnLoadFlg, System.Decimal? _onlineFlg, System.Decimal? _expForGrad, 
			System.Decimal? _holdForGrad, System.Decimal? _orientFlg, System.Decimal? _haveSponsor, 
			System.Decimal? _haveInstallment, System.Decimal? _nationalitySimilarityFlg, System.Decimal? _haveDiscount, 
			System.Decimal? _haveRetrieve, System.Decimal? _havePostponement, System.Decimal? _haveRemission, 
			System.Decimal? _feeFacultyRuleId, System.Decimal? _studCardStkrFlg, System.DateTime? _studCardStkrDate, 
			System.Decimal? _feeTotAmnt, System.Decimal? _feePayAmnt, System.Decimal? _feeRefundAmnt, 
			System.Decimal? _payFlg, System.Decimal? _freezeFlg, System.Decimal? _asCodeDegreeId, 
			System.Decimal? _edCdeAcadWarnTypeId, System.String _notes, System.Decimal? _semCount, 
			System.Decimal? _edCdeExamTypeId)
		{
			EdStudSemesterTemp newEdStudSemesterTemp = new EdStudSemesterTemp();
			newEdStudSemesterTemp.EdStudSemesterId = _edStudSemesterId;
			newEdStudSemesterTemp.EdCodeSemesterId = _edCodeSemesterId;
			newEdStudSemesterTemp.EdStudId = _edStudId;
			newEdStudSemesterTemp.EdAcadYearId = _edAcadYearId;
			newEdStudSemesterTemp.AsFacultyInfoId = _asFacultyInfoId;
			newEdStudSemesterTemp.EdCodeLevelId = _edCodeLevelId;
			newEdStudSemesterTemp.IsLast = _isLast;
			newEdStudSemesterTemp.EdCodeLoadTypeId = _edCodeLoadTypeId;
			newEdStudSemesterTemp.EdCodeEnrollTypeId = _edCodeEnrollTypeId;
			newEdStudSemesterTemp.AccumCh = _accumCh;
			newEdStudSemesterTemp.AccumGpa = _accumGpa;
			newEdStudSemesterTemp.IsCourseApproved = _isCourseApproved;
			newEdStudSemesterTemp.CourseApproveDate = _courseApproveDate;
			newEdStudSemesterTemp.AccumPoint = _accumPoint;
			newEdStudSemesterTemp.SemCh = _semCh;
			newEdStudSemesterTemp.SemGpa = _semGpa;
			newEdStudSemesterTemp.SemPoint = _semPoint;
			newEdStudSemesterTemp.IsClosed = _isClosed;
			newEdStudSemesterTemp.MajorCgpa = _majorCgpa;
			newEdStudSemesterTemp.MajorGpa = _majorGpa;
			newEdStudSemesterTemp.AcdPlnLoadFlg = _acdPlnLoadFlg;
			newEdStudSemesterTemp.OnlineFlg = _onlineFlg;
			newEdStudSemesterTemp.ExpForGrad = _expForGrad;
			newEdStudSemesterTemp.HoldForGrad = _holdForGrad;
			newEdStudSemesterTemp.OrientFlg = _orientFlg;
			newEdStudSemesterTemp.HaveSponsor = _haveSponsor;
			newEdStudSemesterTemp.HaveInstallment = _haveInstallment;
			newEdStudSemesterTemp.NationalitySimilarityFlg = _nationalitySimilarityFlg;
			newEdStudSemesterTemp.HaveDiscount = _haveDiscount;
			newEdStudSemesterTemp.HaveRetrieve = _haveRetrieve;
			newEdStudSemesterTemp.HavePostponement = _havePostponement;
			newEdStudSemesterTemp.HaveRemission = _haveRemission;
			newEdStudSemesterTemp.FeeFacultyRuleId = _feeFacultyRuleId;
			newEdStudSemesterTemp.StudCardStkrFlg = _studCardStkrFlg;
			newEdStudSemesterTemp.StudCardStkrDate = _studCardStkrDate;
			newEdStudSemesterTemp.FeeTotAmnt = _feeTotAmnt;
			newEdStudSemesterTemp.FeePayAmnt = _feePayAmnt;
			newEdStudSemesterTemp.FeeRefundAmnt = _feeRefundAmnt;
			newEdStudSemesterTemp.PayFlg = _payFlg;
			newEdStudSemesterTemp.FreezeFlg = _freezeFlg;
			newEdStudSemesterTemp.AsCodeDegreeId = _asCodeDegreeId;
			newEdStudSemesterTemp.EdCdeAcadWarnTypeId = _edCdeAcadWarnTypeId;
			newEdStudSemesterTemp.Notes = _notes;
			newEdStudSemesterTemp.SemCount = _semCount;
			newEdStudSemesterTemp.EdCdeExamTypeId = _edCdeExamTypeId;
			return newEdStudSemesterTemp;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdStudSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdStudSemesterId
		{
			get
			{
				return this.entityData.EdStudSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdStudSemesterId == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.EdStudSemesterId, this.entityData.EdStudSemesterId);
				this.entityData.EdStudSemesterId = value;
				this.EntityId.EdStudSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.EdStudSemesterId, this.entityData.EdStudSemesterId);
				OnPropertyChanged("EdStudSemesterId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_STUD_SEMESTER_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ED_STUD_SEMESTER_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdStudSemesterId
		{
			get { return this.entityData.OriginalEdStudSemesterId; }
			set { this.entityData.OriginalEdStudSemesterId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeLevelId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeLevelIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeLevelId
		{
			get
			{
				return this.entityData.EdCodeLevelId; 
			}
			
			set
			{
				if (this.entityData.EdCodeLevelId == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.EdCodeLevelId, this.entityData.EdCodeLevelId);
				this.entityData.EdCodeLevelId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.EdCodeLevelId, this.entityData.EdCodeLevelId);
				OnPropertyChanged("EdCodeLevelId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsLast property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsIsLastNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? IsLast
		{
			get
			{
				return this.entityData.IsLast; 
			}
			
			set
			{
				if (this.entityData.IsLast == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.IsLast, this.entityData.IsLast);
				this.entityData.IsLast = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.IsLast, this.entityData.IsLast);
				OnPropertyChanged("IsLast");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeLoadTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeLoadTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeLoadTypeId
		{
			get
			{
				return this.entityData.EdCodeLoadTypeId; 
			}
			
			set
			{
				if (this.entityData.EdCodeLoadTypeId == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.EdCodeLoadTypeId, this.entityData.EdCodeLoadTypeId);
				this.entityData.EdCodeLoadTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.EdCodeLoadTypeId, this.entityData.EdCodeLoadTypeId);
				OnPropertyChanged("EdCodeLoadTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeEnrollTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeEnrollTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeEnrollTypeId
		{
			get
			{
				return this.entityData.EdCodeEnrollTypeId; 
			}
			
			set
			{
				if (this.entityData.EdCodeEnrollTypeId == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.EdCodeEnrollTypeId, this.entityData.EdCodeEnrollTypeId);
				this.entityData.EdCodeEnrollTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.EdCodeEnrollTypeId, this.entityData.EdCodeEnrollTypeId);
				OnPropertyChanged("EdCodeEnrollTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccumCh property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAccumChNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AccumCh
		{
			get
			{
				return this.entityData.AccumCh; 
			}
			
			set
			{
				if (this.entityData.AccumCh == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.AccumCh, this.entityData.AccumCh);
				this.entityData.AccumCh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.AccumCh, this.entityData.AccumCh);
				OnPropertyChanged("AccumCh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccumGpa property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAccumGpaNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AccumGpa
		{
			get
			{
				return this.entityData.AccumGpa; 
			}
			
			set
			{
				if (this.entityData.AccumGpa == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.AccumGpa, this.entityData.AccumGpa);
				this.entityData.AccumGpa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.AccumGpa, this.entityData.AccumGpa);
				OnPropertyChanged("AccumGpa");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsCourseApproved property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsIsCourseApprovedNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? IsCourseApproved
		{
			get
			{
				return this.entityData.IsCourseApproved; 
			}
			
			set
			{
				if (this.entityData.IsCourseApproved == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.IsCourseApproved, this.entityData.IsCourseApproved);
				this.entityData.IsCourseApproved = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.IsCourseApproved, this.entityData.IsCourseApproved);
				OnPropertyChanged("IsCourseApproved");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CourseApproveDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCourseApproveDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CourseApproveDate
		{
			get
			{
				return this.entityData.CourseApproveDate; 
			}
			
			set
			{
				if (this.entityData.CourseApproveDate == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.CourseApproveDate, this.entityData.CourseApproveDate);
				this.entityData.CourseApproveDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.CourseApproveDate, this.entityData.CourseApproveDate);
				OnPropertyChanged("CourseApproveDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccumPoint property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAccumPointNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AccumPoint
		{
			get
			{
				return this.entityData.AccumPoint; 
			}
			
			set
			{
				if (this.entityData.AccumPoint == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.AccumPoint, this.entityData.AccumPoint);
				this.entityData.AccumPoint = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.AccumPoint, this.entityData.AccumPoint);
				OnPropertyChanged("AccumPoint");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SemCh property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSemChNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SemCh
		{
			get
			{
				return this.entityData.SemCh; 
			}
			
			set
			{
				if (this.entityData.SemCh == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.SemCh, this.entityData.SemCh);
				this.entityData.SemCh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.SemCh, this.entityData.SemCh);
				OnPropertyChanged("SemCh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SemGpa property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSemGpaNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SemGpa
		{
			get
			{
				return this.entityData.SemGpa; 
			}
			
			set
			{
				if (this.entityData.SemGpa == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.SemGpa, this.entityData.SemGpa);
				this.entityData.SemGpa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.SemGpa, this.entityData.SemGpa);
				OnPropertyChanged("SemGpa");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SemPoint property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSemPointNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SemPoint
		{
			get
			{
				return this.entityData.SemPoint; 
			}
			
			set
			{
				if (this.entityData.SemPoint == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.SemPoint, this.entityData.SemPoint);
				this.entityData.SemPoint = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.SemPoint, this.entityData.SemPoint);
				OnPropertyChanged("SemPoint");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsClosed property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsIsClosedNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? IsClosed
		{
			get
			{
				return this.entityData.IsClosed; 
			}
			
			set
			{
				if (this.entityData.IsClosed == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.IsClosed, this.entityData.IsClosed);
				this.entityData.IsClosed = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.IsClosed, this.entityData.IsClosed);
				OnPropertyChanged("IsClosed");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MajorCgpa property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMajorCgpaNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MajorCgpa
		{
			get
			{
				return this.entityData.MajorCgpa; 
			}
			
			set
			{
				if (this.entityData.MajorCgpa == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.MajorCgpa, this.entityData.MajorCgpa);
				this.entityData.MajorCgpa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.MajorCgpa, this.entityData.MajorCgpa);
				OnPropertyChanged("MajorCgpa");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MajorGpa property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMajorGpaNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MajorGpa
		{
			get
			{
				return this.entityData.MajorGpa; 
			}
			
			set
			{
				if (this.entityData.MajorGpa == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.MajorGpa, this.entityData.MajorGpa);
				this.entityData.MajorGpa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.MajorGpa, this.entityData.MajorGpa);
				OnPropertyChanged("MajorGpa");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AcdPlnLoadFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAcdPlnLoadFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AcdPlnLoadFlg
		{
			get
			{
				return this.entityData.AcdPlnLoadFlg; 
			}
			
			set
			{
				if (this.entityData.AcdPlnLoadFlg == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.AcdPlnLoadFlg, this.entityData.AcdPlnLoadFlg);
				this.entityData.AcdPlnLoadFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.AcdPlnLoadFlg, this.entityData.AcdPlnLoadFlg);
				OnPropertyChanged("AcdPlnLoadFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OnlineFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsOnlineFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? OnlineFlg
		{
			get
			{
				return this.entityData.OnlineFlg; 
			}
			
			set
			{
				if (this.entityData.OnlineFlg == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.OnlineFlg, this.entityData.OnlineFlg);
				this.entityData.OnlineFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.OnlineFlg, this.entityData.OnlineFlg);
				OnPropertyChanged("OnlineFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExpForGrad property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsExpForGradNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ExpForGrad
		{
			get
			{
				return this.entityData.ExpForGrad; 
			}
			
			set
			{
				if (this.entityData.ExpForGrad == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.ExpForGrad, this.entityData.ExpForGrad);
				this.entityData.ExpForGrad = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.ExpForGrad, this.entityData.ExpForGrad);
				OnPropertyChanged("ExpForGrad");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HoldForGrad property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsHoldForGradNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HoldForGrad
		{
			get
			{
				return this.entityData.HoldForGrad; 
			}
			
			set
			{
				if (this.entityData.HoldForGrad == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.HoldForGrad, this.entityData.HoldForGrad);
				this.entityData.HoldForGrad = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.HoldForGrad, this.entityData.HoldForGrad);
				OnPropertyChanged("HoldForGrad");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrientFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsOrientFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? OrientFlg
		{
			get
			{
				return this.entityData.OrientFlg; 
			}
			
			set
			{
				if (this.entityData.OrientFlg == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.OrientFlg, this.entityData.OrientFlg);
				this.entityData.OrientFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.OrientFlg, this.entityData.OrientFlg);
				OnPropertyChanged("OrientFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HaveSponsor property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsHaveSponsorNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HaveSponsor
		{
			get
			{
				return this.entityData.HaveSponsor; 
			}
			
			set
			{
				if (this.entityData.HaveSponsor == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.HaveSponsor, this.entityData.HaveSponsor);
				this.entityData.HaveSponsor = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.HaveSponsor, this.entityData.HaveSponsor);
				OnPropertyChanged("HaveSponsor");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HaveInstallment property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsHaveInstallmentNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HaveInstallment
		{
			get
			{
				return this.entityData.HaveInstallment; 
			}
			
			set
			{
				if (this.entityData.HaveInstallment == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.HaveInstallment, this.entityData.HaveInstallment);
				this.entityData.HaveInstallment = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.HaveInstallment, this.entityData.HaveInstallment);
				OnPropertyChanged("HaveInstallment");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NationalitySimilarityFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsNationalitySimilarityFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? NationalitySimilarityFlg
		{
			get
			{
				return this.entityData.NationalitySimilarityFlg; 
			}
			
			set
			{
				if (this.entityData.NationalitySimilarityFlg == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.NationalitySimilarityFlg, this.entityData.NationalitySimilarityFlg);
				this.entityData.NationalitySimilarityFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.NationalitySimilarityFlg, this.entityData.NationalitySimilarityFlg);
				OnPropertyChanged("NationalitySimilarityFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HaveDiscount property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsHaveDiscountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HaveDiscount
		{
			get
			{
				return this.entityData.HaveDiscount; 
			}
			
			set
			{
				if (this.entityData.HaveDiscount == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.HaveDiscount, this.entityData.HaveDiscount);
				this.entityData.HaveDiscount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.HaveDiscount, this.entityData.HaveDiscount);
				OnPropertyChanged("HaveDiscount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HaveRetrieve property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsHaveRetrieveNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HaveRetrieve
		{
			get
			{
				return this.entityData.HaveRetrieve; 
			}
			
			set
			{
				if (this.entityData.HaveRetrieve == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.HaveRetrieve, this.entityData.HaveRetrieve);
				this.entityData.HaveRetrieve = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.HaveRetrieve, this.entityData.HaveRetrieve);
				OnPropertyChanged("HaveRetrieve");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HavePostponement property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsHavePostponementNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HavePostponement
		{
			get
			{
				return this.entityData.HavePostponement; 
			}
			
			set
			{
				if (this.entityData.HavePostponement == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.HavePostponement, this.entityData.HavePostponement);
				this.entityData.HavePostponement = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.HavePostponement, this.entityData.HavePostponement);
				OnPropertyChanged("HavePostponement");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HaveRemission property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsHaveRemissionNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HaveRemission
		{
			get
			{
				return this.entityData.HaveRemission; 
			}
			
			set
			{
				if (this.entityData.HaveRemission == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.HaveRemission, this.entityData.HaveRemission);
				this.entityData.HaveRemission = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.HaveRemission, this.entityData.HaveRemission);
				OnPropertyChanged("HaveRemission");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeFacultyRuleId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeFacultyRuleIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeeFacultyRuleId
		{
			get
			{
				return this.entityData.FeeFacultyRuleId; 
			}
			
			set
			{
				if (this.entityData.FeeFacultyRuleId == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.FeeFacultyRuleId, this.entityData.FeeFacultyRuleId);
				this.entityData.FeeFacultyRuleId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.FeeFacultyRuleId, this.entityData.FeeFacultyRuleId);
				OnPropertyChanged("FeeFacultyRuleId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StudCardStkrFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsStudCardStkrFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? StudCardStkrFlg
		{
			get
			{
				return this.entityData.StudCardStkrFlg; 
			}
			
			set
			{
				if (this.entityData.StudCardStkrFlg == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.StudCardStkrFlg, this.entityData.StudCardStkrFlg);
				this.entityData.StudCardStkrFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.StudCardStkrFlg, this.entityData.StudCardStkrFlg);
				OnPropertyChanged("StudCardStkrFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StudCardStkrDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsStudCardStkrDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? StudCardStkrDate
		{
			get
			{
				return this.entityData.StudCardStkrDate; 
			}
			
			set
			{
				if (this.entityData.StudCardStkrDate == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.StudCardStkrDate, this.entityData.StudCardStkrDate);
				this.entityData.StudCardStkrDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.StudCardStkrDate, this.entityData.StudCardStkrDate);
				OnPropertyChanged("StudCardStkrDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeTotAmnt property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeTotAmntNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeeTotAmnt
		{
			get
			{
				return this.entityData.FeeTotAmnt; 
			}
			
			set
			{
				if (this.entityData.FeeTotAmnt == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.FeeTotAmnt, this.entityData.FeeTotAmnt);
				this.entityData.FeeTotAmnt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.FeeTotAmnt, this.entityData.FeeTotAmnt);
				OnPropertyChanged("FeeTotAmnt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeePayAmnt property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeePayAmntNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeePayAmnt
		{
			get
			{
				return this.entityData.FeePayAmnt; 
			}
			
			set
			{
				if (this.entityData.FeePayAmnt == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.FeePayAmnt, this.entityData.FeePayAmnt);
				this.entityData.FeePayAmnt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.FeePayAmnt, this.entityData.FeePayAmnt);
				OnPropertyChanged("FeePayAmnt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeRefundAmnt property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeRefundAmntNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeeRefundAmnt
		{
			get
			{
				return this.entityData.FeeRefundAmnt; 
			}
			
			set
			{
				if (this.entityData.FeeRefundAmnt == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.FeeRefundAmnt, this.entityData.FeeRefundAmnt);
				this.entityData.FeeRefundAmnt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.FeeRefundAmnt, this.entityData.FeeRefundAmnt);
				OnPropertyChanged("FeeRefundAmnt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PayFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPayFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PayFlg
		{
			get
			{
				return this.entityData.PayFlg; 
			}
			
			set
			{
				if (this.entityData.PayFlg == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.PayFlg, this.entityData.PayFlg);
				this.entityData.PayFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.PayFlg, this.entityData.PayFlg);
				OnPropertyChanged("PayFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FreezeFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFreezeFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FreezeFlg
		{
			get
			{
				return this.entityData.FreezeFlg; 
			}
			
			set
			{
				if (this.entityData.FreezeFlg == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.FreezeFlg, this.entityData.FreezeFlg);
				this.entityData.FreezeFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.FreezeFlg, this.entityData.FreezeFlg);
				OnPropertyChanged("FreezeFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeId
		{
			get
			{
				return this.entityData.AsCodeDegreeId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeId == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				this.entityData.AsCodeDegreeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				OnPropertyChanged("AsCodeDegreeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCdeAcadWarnTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCdeAcadWarnTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCdeAcadWarnTypeId
		{
			get
			{
				return this.entityData.EdCdeAcadWarnTypeId; 
			}
			
			set
			{
				if (this.entityData.EdCdeAcadWarnTypeId == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.EdCdeAcadWarnTypeId, this.entityData.EdCdeAcadWarnTypeId);
				this.entityData.EdCdeAcadWarnTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.EdCdeAcadWarnTypeId, this.entityData.EdCdeAcadWarnTypeId);
				OnPropertyChanged("EdCdeAcadWarnTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 300)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SemCount property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSemCountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SemCount
		{
			get
			{
				return this.entityData.SemCount; 
			}
			
			set
			{
				if (this.entityData.SemCount == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.SemCount, this.entityData.SemCount);
				this.entityData.SemCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.SemCount, this.entityData.SemCount);
				OnPropertyChanged("SemCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCdeExamTypeId property. 
		///		نوع الامتحان: تكميلى- اعادة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCdeExamTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"نوع الامتحان: تكميلى- اعادة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCdeExamTypeId
		{
			get
			{
				return this.entityData.EdCdeExamTypeId; 
			}
			
			set
			{
				if (this.entityData.EdCdeExamTypeId == value)
					return;
					
				OnColumnChanging(EdStudSemesterTempColumn.EdCdeExamTypeId, this.entityData.EdCdeExamTypeId);
				this.entityData.EdCdeExamTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterTempColumn.EdCdeExamTypeId, this.entityData.EdCdeExamTypeId);
				OnPropertyChanged("EdCdeExamTypeId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeAcadWarnType"/>.
		/// </summary>
		/// <value>The source EdCdeAcadWarnType for EdCdeAcadWarnTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCdeAcadWarnType EdCdeAcadWarnTypeIdSource
      	{
            get { return entityData.EdCdeAcadWarnTypeIdSource; }
            set { entityData.EdCdeAcadWarnTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeEnrollType"/>.
		/// </summary>
		/// <value>The source EdCodeEnrollType for EdCodeEnrollTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeEnrollType EdCodeEnrollTypeIdSource
      	{
            get { return entityData.EdCodeEnrollTypeIdSource; }
            set { entityData.EdCodeEnrollTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeLevel EdCodeLevelIdSource
      	{
            get { return entityData.EdCodeLevelIdSource; }
            set { entityData.EdCodeLevelIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLoadType"/>.
		/// </summary>
		/// <value>The source EdCodeLoadType for EdCodeLoadTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeLoadType EdCodeLoadTypeIdSource
      	{
            get { return entityData.EdCodeLoadTypeIdSource; }
            set { entityData.EdCodeLoadTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeFacultyRule"/>.
		/// </summary>
		/// <value>The source FeeFacultyRule for FeeFacultyRuleId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeFacultyRule FeeFacultyRuleIdSource
      	{
            get { return entityData.FeeFacultyRuleIdSource; }
            set { entityData.FeeFacultyRuleIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeExamType"/>.
		/// </summary>
		/// <value>The source EdCdeExamType for EdCdeExamTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCdeExamType EdCdeExamTypeIdSource
      	{
            get { return entityData.EdCdeExamTypeIdSource; }
            set { entityData.EdCdeExamTypeIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 300));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_STUD_SEMESTER_TEMP"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_STUD_SEMESTER_ID", "ED_CODE_SEMESTER_ID", "ED_STUD_ID", "ED_ACAD_YEAR_ID", "AS_FACULTY_INFO_ID", "ED_CODE_LEVEL_ID", "IS_LAST", "ED_CODE_LOAD_TYPE_ID", "ED_CODE_ENROLL_TYPE_ID", "ACCUM_CH", "ACCUM_GPA", "IS_COURSE_APPROVED", "COURSE_APPROVE_DATE", "ACCUM_POINT", "SEM_CH", "SEM_GPA", "SEM_POINT", "IS_CLOSED", "MAJOR_CGPA", "MAJOR_GPA", "ACD_PLN_LOAD_FLG", "ONLINE_FLG", "EXP_FOR_GRAD", "HOLD_FOR_GRAD", "ORIENT_FLG", "HAVE_SPONSOR", "HAVE_INSTALLMENT", "NATIONALITY_SIMILARITY_FLG", "HAVE_DISCOUNT", "HAVE_RETRIEVE", "HAVE_POSTPONEMENT", "HAVE_REMISSION", "FEE_FACULTY_RULE_ID", "STUD_CARD_STKR_FLG", "STUD_CARD_STKR_DATE", "FEE_TOT_AMNT", "FEE_PAY_AMNT", "FEE_REFUND_AMNT", "PAY_FLG", "FREEZE_FLG", "AS_CODE_DEGREE_ID", "ED_CDE_ACAD_WARN_TYPE_ID", "NOTES", "SEM_COUNT", "ED_CDE_EXAM_TYPE_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdStudSemesterTempEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdStudSemesterTemp) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdStudSemesterTemp>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdStudSemesterTemp);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdStudSemesterTemp Entity 
		///</summary>
		protected virtual EdStudSemesterTemp Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdStudSemesterTemp copy = new EdStudSemesterTemp();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdStudSemesterId = this.EdStudSemesterId;
					copy.OriginalEdStudSemesterId = this.OriginalEdStudSemesterId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.EdStudId = this.EdStudId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.EdCodeLevelId = this.EdCodeLevelId;
				copy.IsLast = this.IsLast;
				copy.EdCodeLoadTypeId = this.EdCodeLoadTypeId;
				copy.EdCodeEnrollTypeId = this.EdCodeEnrollTypeId;
				copy.AccumCh = this.AccumCh;
				copy.AccumGpa = this.AccumGpa;
				copy.IsCourseApproved = this.IsCourseApproved;
				copy.CourseApproveDate = this.CourseApproveDate;
				copy.AccumPoint = this.AccumPoint;
				copy.SemCh = this.SemCh;
				copy.SemGpa = this.SemGpa;
				copy.SemPoint = this.SemPoint;
				copy.IsClosed = this.IsClosed;
				copy.MajorCgpa = this.MajorCgpa;
				copy.MajorGpa = this.MajorGpa;
				copy.AcdPlnLoadFlg = this.AcdPlnLoadFlg;
				copy.OnlineFlg = this.OnlineFlg;
				copy.ExpForGrad = this.ExpForGrad;
				copy.HoldForGrad = this.HoldForGrad;
				copy.OrientFlg = this.OrientFlg;
				copy.HaveSponsor = this.HaveSponsor;
				copy.HaveInstallment = this.HaveInstallment;
				copy.NationalitySimilarityFlg = this.NationalitySimilarityFlg;
				copy.HaveDiscount = this.HaveDiscount;
				copy.HaveRetrieve = this.HaveRetrieve;
				copy.HavePostponement = this.HavePostponement;
				copy.HaveRemission = this.HaveRemission;
				copy.FeeFacultyRuleId = this.FeeFacultyRuleId;
				copy.StudCardStkrFlg = this.StudCardStkrFlg;
				copy.StudCardStkrDate = this.StudCardStkrDate;
				copy.FeeTotAmnt = this.FeeTotAmnt;
				copy.FeePayAmnt = this.FeePayAmnt;
				copy.FeeRefundAmnt = this.FeeRefundAmnt;
				copy.PayFlg = this.PayFlg;
				copy.FreezeFlg = this.FreezeFlg;
				copy.AsCodeDegreeId = this.AsCodeDegreeId;
				copy.EdCdeAcadWarnTypeId = this.EdCdeAcadWarnTypeId;
				copy.Notes = this.Notes;
				copy.SemCount = this.SemCount;
				copy.EdCdeExamTypeId = this.EdCdeExamTypeId;
			
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCdeAcadWarnTypeIdSource != null && existingCopies.Contains(this.EdCdeAcadWarnTypeIdSource))
				copy.EdCdeAcadWarnTypeIdSource = existingCopies[this.EdCdeAcadWarnTypeIdSource] as EdCdeAcadWarnType;
			else
				copy.EdCdeAcadWarnTypeIdSource = MakeCopyOf(this.EdCdeAcadWarnTypeIdSource, existingCopies) as EdCdeAcadWarnType;
			if (this.EdCodeEnrollTypeIdSource != null && existingCopies.Contains(this.EdCodeEnrollTypeIdSource))
				copy.EdCodeEnrollTypeIdSource = existingCopies[this.EdCodeEnrollTypeIdSource] as EdCodeEnrollType;
			else
				copy.EdCodeEnrollTypeIdSource = MakeCopyOf(this.EdCodeEnrollTypeIdSource, existingCopies) as EdCodeEnrollType;
			if (this.EdCodeLevelIdSource != null && existingCopies.Contains(this.EdCodeLevelIdSource))
				copy.EdCodeLevelIdSource = existingCopies[this.EdCodeLevelIdSource] as EdCodeLevel;
			else
				copy.EdCodeLevelIdSource = MakeCopyOf(this.EdCodeLevelIdSource, existingCopies) as EdCodeLevel;
			if (this.EdCodeLoadTypeIdSource != null && existingCopies.Contains(this.EdCodeLoadTypeIdSource))
				copy.EdCodeLoadTypeIdSource = existingCopies[this.EdCodeLoadTypeIdSource] as EdCodeLoadType;
			else
				copy.EdCodeLoadTypeIdSource = MakeCopyOf(this.EdCodeLoadTypeIdSource, existingCopies) as EdCodeLoadType;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.FeeFacultyRuleIdSource != null && existingCopies.Contains(this.FeeFacultyRuleIdSource))
				copy.FeeFacultyRuleIdSource = existingCopies[this.FeeFacultyRuleIdSource] as FeeFacultyRule;
			else
				copy.FeeFacultyRuleIdSource = MakeCopyOf(this.FeeFacultyRuleIdSource, existingCopies) as FeeFacultyRule;
			if (this.EdCdeExamTypeIdSource != null && existingCopies.Contains(this.EdCdeExamTypeIdSource))
				copy.EdCdeExamTypeIdSource = existingCopies[this.EdCdeExamTypeIdSource] as EdCdeExamType;
			else
				copy.EdCdeExamTypeIdSource = MakeCopyOf(this.EdCdeExamTypeIdSource, existingCopies) as EdCdeExamType;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdStudSemesterTemp Entity 
		///</summary>
		public virtual EdStudSemesterTemp Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdStudSemesterTemp Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdStudSemesterTemp DeepCopy()
		{
			return EntityHelper.Clone<EdStudSemesterTemp>(this as EdStudSemesterTemp);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdStudSemesterTempEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdStudSemesterTempEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdStudSemesterTempEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdStudSemesterTempColumn column)
		{
			switch(column)
			{
					case EdStudSemesterTempColumn.EdStudSemesterId:
					return entityData.EdStudSemesterId != _originalData.EdStudSemesterId;
					case EdStudSemesterTempColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case EdStudSemesterTempColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case EdStudSemesterTempColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case EdStudSemesterTempColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case EdStudSemesterTempColumn.EdCodeLevelId:
					return entityData.EdCodeLevelId != _originalData.EdCodeLevelId;
					case EdStudSemesterTempColumn.IsLast:
					return entityData.IsLast != _originalData.IsLast;
					case EdStudSemesterTempColumn.EdCodeLoadTypeId:
					return entityData.EdCodeLoadTypeId != _originalData.EdCodeLoadTypeId;
					case EdStudSemesterTempColumn.EdCodeEnrollTypeId:
					return entityData.EdCodeEnrollTypeId != _originalData.EdCodeEnrollTypeId;
					case EdStudSemesterTempColumn.AccumCh:
					return entityData.AccumCh != _originalData.AccumCh;
					case EdStudSemesterTempColumn.AccumGpa:
					return entityData.AccumGpa != _originalData.AccumGpa;
					case EdStudSemesterTempColumn.IsCourseApproved:
					return entityData.IsCourseApproved != _originalData.IsCourseApproved;
					case EdStudSemesterTempColumn.CourseApproveDate:
					return entityData.CourseApproveDate != _originalData.CourseApproveDate;
					case EdStudSemesterTempColumn.AccumPoint:
					return entityData.AccumPoint != _originalData.AccumPoint;
					case EdStudSemesterTempColumn.SemCh:
					return entityData.SemCh != _originalData.SemCh;
					case EdStudSemesterTempColumn.SemGpa:
					return entityData.SemGpa != _originalData.SemGpa;
					case EdStudSemesterTempColumn.SemPoint:
					return entityData.SemPoint != _originalData.SemPoint;
					case EdStudSemesterTempColumn.IsClosed:
					return entityData.IsClosed != _originalData.IsClosed;
					case EdStudSemesterTempColumn.MajorCgpa:
					return entityData.MajorCgpa != _originalData.MajorCgpa;
					case EdStudSemesterTempColumn.MajorGpa:
					return entityData.MajorGpa != _originalData.MajorGpa;
					case EdStudSemesterTempColumn.AcdPlnLoadFlg:
					return entityData.AcdPlnLoadFlg != _originalData.AcdPlnLoadFlg;
					case EdStudSemesterTempColumn.OnlineFlg:
					return entityData.OnlineFlg != _originalData.OnlineFlg;
					case EdStudSemesterTempColumn.ExpForGrad:
					return entityData.ExpForGrad != _originalData.ExpForGrad;
					case EdStudSemesterTempColumn.HoldForGrad:
					return entityData.HoldForGrad != _originalData.HoldForGrad;
					case EdStudSemesterTempColumn.OrientFlg:
					return entityData.OrientFlg != _originalData.OrientFlg;
					case EdStudSemesterTempColumn.HaveSponsor:
					return entityData.HaveSponsor != _originalData.HaveSponsor;
					case EdStudSemesterTempColumn.HaveInstallment:
					return entityData.HaveInstallment != _originalData.HaveInstallment;
					case EdStudSemesterTempColumn.NationalitySimilarityFlg:
					return entityData.NationalitySimilarityFlg != _originalData.NationalitySimilarityFlg;
					case EdStudSemesterTempColumn.HaveDiscount:
					return entityData.HaveDiscount != _originalData.HaveDiscount;
					case EdStudSemesterTempColumn.HaveRetrieve:
					return entityData.HaveRetrieve != _originalData.HaveRetrieve;
					case EdStudSemesterTempColumn.HavePostponement:
					return entityData.HavePostponement != _originalData.HavePostponement;
					case EdStudSemesterTempColumn.HaveRemission:
					return entityData.HaveRemission != _originalData.HaveRemission;
					case EdStudSemesterTempColumn.FeeFacultyRuleId:
					return entityData.FeeFacultyRuleId != _originalData.FeeFacultyRuleId;
					case EdStudSemesterTempColumn.StudCardStkrFlg:
					return entityData.StudCardStkrFlg != _originalData.StudCardStkrFlg;
					case EdStudSemesterTempColumn.StudCardStkrDate:
					return entityData.StudCardStkrDate != _originalData.StudCardStkrDate;
					case EdStudSemesterTempColumn.FeeTotAmnt:
					return entityData.FeeTotAmnt != _originalData.FeeTotAmnt;
					case EdStudSemesterTempColumn.FeePayAmnt:
					return entityData.FeePayAmnt != _originalData.FeePayAmnt;
					case EdStudSemesterTempColumn.FeeRefundAmnt:
					return entityData.FeeRefundAmnt != _originalData.FeeRefundAmnt;
					case EdStudSemesterTempColumn.PayFlg:
					return entityData.PayFlg != _originalData.PayFlg;
					case EdStudSemesterTempColumn.FreezeFlg:
					return entityData.FreezeFlg != _originalData.FreezeFlg;
					case EdStudSemesterTempColumn.AsCodeDegreeId:
					return entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
					case EdStudSemesterTempColumn.EdCdeAcadWarnTypeId:
					return entityData.EdCdeAcadWarnTypeId != _originalData.EdCdeAcadWarnTypeId;
					case EdStudSemesterTempColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case EdStudSemesterTempColumn.SemCount:
					return entityData.SemCount != _originalData.SemCount;
					case EdStudSemesterTempColumn.EdCdeExamTypeId:
					return entityData.EdCdeExamTypeId != _originalData.EdCdeExamTypeId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdStudSemesterTempColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdStudSemesterId != _originalData.EdStudSemesterId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.EdCodeLevelId != _originalData.EdCodeLevelId;
			result = result || entityData.IsLast != _originalData.IsLast;
			result = result || entityData.EdCodeLoadTypeId != _originalData.EdCodeLoadTypeId;
			result = result || entityData.EdCodeEnrollTypeId != _originalData.EdCodeEnrollTypeId;
			result = result || entityData.AccumCh != _originalData.AccumCh;
			result = result || entityData.AccumGpa != _originalData.AccumGpa;
			result = result || entityData.IsCourseApproved != _originalData.IsCourseApproved;
			result = result || entityData.CourseApproveDate != _originalData.CourseApproveDate;
			result = result || entityData.AccumPoint != _originalData.AccumPoint;
			result = result || entityData.SemCh != _originalData.SemCh;
			result = result || entityData.SemGpa != _originalData.SemGpa;
			result = result || entityData.SemPoint != _originalData.SemPoint;
			result = result || entityData.IsClosed != _originalData.IsClosed;
			result = result || entityData.MajorCgpa != _originalData.MajorCgpa;
			result = result || entityData.MajorGpa != _originalData.MajorGpa;
			result = result || entityData.AcdPlnLoadFlg != _originalData.AcdPlnLoadFlg;
			result = result || entityData.OnlineFlg != _originalData.OnlineFlg;
			result = result || entityData.ExpForGrad != _originalData.ExpForGrad;
			result = result || entityData.HoldForGrad != _originalData.HoldForGrad;
			result = result || entityData.OrientFlg != _originalData.OrientFlg;
			result = result || entityData.HaveSponsor != _originalData.HaveSponsor;
			result = result || entityData.HaveInstallment != _originalData.HaveInstallment;
			result = result || entityData.NationalitySimilarityFlg != _originalData.NationalitySimilarityFlg;
			result = result || entityData.HaveDiscount != _originalData.HaveDiscount;
			result = result || entityData.HaveRetrieve != _originalData.HaveRetrieve;
			result = result || entityData.HavePostponement != _originalData.HavePostponement;
			result = result || entityData.HaveRemission != _originalData.HaveRemission;
			result = result || entityData.FeeFacultyRuleId != _originalData.FeeFacultyRuleId;
			result = result || entityData.StudCardStkrFlg != _originalData.StudCardStkrFlg;
			result = result || entityData.StudCardStkrDate != _originalData.StudCardStkrDate;
			result = result || entityData.FeeTotAmnt != _originalData.FeeTotAmnt;
			result = result || entityData.FeePayAmnt != _originalData.FeePayAmnt;
			result = result || entityData.FeeRefundAmnt != _originalData.FeeRefundAmnt;
			result = result || entityData.PayFlg != _originalData.PayFlg;
			result = result || entityData.FreezeFlg != _originalData.FreezeFlg;
			result = result || entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
			result = result || entityData.EdCdeAcadWarnTypeId != _originalData.EdCdeAcadWarnTypeId;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.SemCount != _originalData.SemCount;
			result = result || entityData.EdCdeExamTypeId != _originalData.EdCdeExamTypeId;
			return result;
		}	
		
		///<summary>
		///  Returns a EdStudSemesterTemp Entity with the original data.
		///</summary>
		public EdStudSemesterTemp GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdStudSemesterTemp(
				_originalData.EdStudSemesterId,
				_originalData.EdCodeSemesterId,
				_originalData.EdStudId,
				_originalData.EdAcadYearId,
				_originalData.AsFacultyInfoId,
				_originalData.EdCodeLevelId,
				_originalData.IsLast,
				_originalData.EdCodeLoadTypeId,
				_originalData.EdCodeEnrollTypeId,
				_originalData.AccumCh,
				_originalData.AccumGpa,
				_originalData.IsCourseApproved,
				_originalData.CourseApproveDate,
				_originalData.AccumPoint,
				_originalData.SemCh,
				_originalData.SemGpa,
				_originalData.SemPoint,
				_originalData.IsClosed,
				_originalData.MajorCgpa,
				_originalData.MajorGpa,
				_originalData.AcdPlnLoadFlg,
				_originalData.OnlineFlg,
				_originalData.ExpForGrad,
				_originalData.HoldForGrad,
				_originalData.OrientFlg,
				_originalData.HaveSponsor,
				_originalData.HaveInstallment,
				_originalData.NationalitySimilarityFlg,
				_originalData.HaveDiscount,
				_originalData.HaveRetrieve,
				_originalData.HavePostponement,
				_originalData.HaveRemission,
				_originalData.FeeFacultyRuleId,
				_originalData.StudCardStkrFlg,
				_originalData.StudCardStkrDate,
				_originalData.FeeTotAmnt,
				_originalData.FeePayAmnt,
				_originalData.FeeRefundAmnt,
				_originalData.PayFlg,
				_originalData.FreezeFlg,
				_originalData.AsCodeDegreeId,
				_originalData.EdCdeAcadWarnTypeId,
				_originalData.Notes,
				_originalData.SemCount,
				_originalData.EdCdeExamTypeId
				);
				
			return (EdStudSemesterTemp)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdStudSemesterTempBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdStudSemesterTempBase)
				return ValueEquals(this, (EdStudSemesterTempBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdStudSemesterTempBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdStudSemesterId.GetHashCode() ^ 
					this.EdCodeSemesterId.GetHashCode() ^ 
					this.EdStudId.GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					((this.EdCodeLevelId == null) ? string.Empty : this.EdCodeLevelId.ToString()).GetHashCode() ^ 
					((this.IsLast == null) ? string.Empty : this.IsLast.ToString()).GetHashCode() ^ 
					((this.EdCodeLoadTypeId == null) ? string.Empty : this.EdCodeLoadTypeId.ToString()).GetHashCode() ^ 
					((this.EdCodeEnrollTypeId == null) ? string.Empty : this.EdCodeEnrollTypeId.ToString()).GetHashCode() ^ 
					((this.AccumCh == null) ? string.Empty : this.AccumCh.ToString()).GetHashCode() ^ 
					((this.AccumGpa == null) ? string.Empty : this.AccumGpa.ToString()).GetHashCode() ^ 
					((this.IsCourseApproved == null) ? string.Empty : this.IsCourseApproved.ToString()).GetHashCode() ^ 
					((this.CourseApproveDate == null) ? string.Empty : this.CourseApproveDate.ToString()).GetHashCode() ^ 
					((this.AccumPoint == null) ? string.Empty : this.AccumPoint.ToString()).GetHashCode() ^ 
					((this.SemCh == null) ? string.Empty : this.SemCh.ToString()).GetHashCode() ^ 
					((this.SemGpa == null) ? string.Empty : this.SemGpa.ToString()).GetHashCode() ^ 
					((this.SemPoint == null) ? string.Empty : this.SemPoint.ToString()).GetHashCode() ^ 
					((this.IsClosed == null) ? string.Empty : this.IsClosed.ToString()).GetHashCode() ^ 
					((this.MajorCgpa == null) ? string.Empty : this.MajorCgpa.ToString()).GetHashCode() ^ 
					((this.MajorGpa == null) ? string.Empty : this.MajorGpa.ToString()).GetHashCode() ^ 
					((this.AcdPlnLoadFlg == null) ? string.Empty : this.AcdPlnLoadFlg.ToString()).GetHashCode() ^ 
					((this.OnlineFlg == null) ? string.Empty : this.OnlineFlg.ToString()).GetHashCode() ^ 
					((this.ExpForGrad == null) ? string.Empty : this.ExpForGrad.ToString()).GetHashCode() ^ 
					((this.HoldForGrad == null) ? string.Empty : this.HoldForGrad.ToString()).GetHashCode() ^ 
					((this.OrientFlg == null) ? string.Empty : this.OrientFlg.ToString()).GetHashCode() ^ 
					((this.HaveSponsor == null) ? string.Empty : this.HaveSponsor.ToString()).GetHashCode() ^ 
					((this.HaveInstallment == null) ? string.Empty : this.HaveInstallment.ToString()).GetHashCode() ^ 
					((this.NationalitySimilarityFlg == null) ? string.Empty : this.NationalitySimilarityFlg.ToString()).GetHashCode() ^ 
					((this.HaveDiscount == null) ? string.Empty : this.HaveDiscount.ToString()).GetHashCode() ^ 
					((this.HaveRetrieve == null) ? string.Empty : this.HaveRetrieve.ToString()).GetHashCode() ^ 
					((this.HavePostponement == null) ? string.Empty : this.HavePostponement.ToString()).GetHashCode() ^ 
					((this.HaveRemission == null) ? string.Empty : this.HaveRemission.ToString()).GetHashCode() ^ 
					((this.FeeFacultyRuleId == null) ? string.Empty : this.FeeFacultyRuleId.ToString()).GetHashCode() ^ 
					((this.StudCardStkrFlg == null) ? string.Empty : this.StudCardStkrFlg.ToString()).GetHashCode() ^ 
					((this.StudCardStkrDate == null) ? string.Empty : this.StudCardStkrDate.ToString()).GetHashCode() ^ 
					((this.FeeTotAmnt == null) ? string.Empty : this.FeeTotAmnt.ToString()).GetHashCode() ^ 
					((this.FeePayAmnt == null) ? string.Empty : this.FeePayAmnt.ToString()).GetHashCode() ^ 
					((this.FeeRefundAmnt == null) ? string.Empty : this.FeeRefundAmnt.ToString()).GetHashCode() ^ 
					((this.PayFlg == null) ? string.Empty : this.PayFlg.ToString()).GetHashCode() ^ 
					((this.FreezeFlg == null) ? string.Empty : this.FreezeFlg.ToString()).GetHashCode() ^ 
					((this.AsCodeDegreeId == null) ? string.Empty : this.AsCodeDegreeId.ToString()).GetHashCode() ^ 
					((this.EdCdeAcadWarnTypeId == null) ? string.Empty : this.EdCdeAcadWarnTypeId.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.SemCount == null) ? string.Empty : this.SemCount.ToString()).GetHashCode() ^ 
					((this.EdCdeExamTypeId == null) ? string.Empty : this.EdCdeExamTypeId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdStudSemesterTempBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdStudSemesterTempBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdStudSemesterTempBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdStudSemesterTempBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdStudSemesterTempBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdStudSemesterTempBase Object1, EdStudSemesterTempBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdStudSemesterId != Object2.EdStudSemesterId)
				equal = false;
			if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
				equal = false;
			if (Object1.EdStudId != Object2.EdStudId)
				equal = false;
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeLevelId != null && Object2.EdCodeLevelId != null )
			{
				if (Object1.EdCodeLevelId != Object2.EdCodeLevelId)
					equal = false;
			}
			else if (Object1.EdCodeLevelId == null ^ Object2.EdCodeLevelId == null )
			{
				equal = false;
			}
			if ( Object1.IsLast != null && Object2.IsLast != null )
			{
				if (Object1.IsLast != Object2.IsLast)
					equal = false;
			}
			else if (Object1.IsLast == null ^ Object2.IsLast == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeLoadTypeId != null && Object2.EdCodeLoadTypeId != null )
			{
				if (Object1.EdCodeLoadTypeId != Object2.EdCodeLoadTypeId)
					equal = false;
			}
			else if (Object1.EdCodeLoadTypeId == null ^ Object2.EdCodeLoadTypeId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeEnrollTypeId != null && Object2.EdCodeEnrollTypeId != null )
			{
				if (Object1.EdCodeEnrollTypeId != Object2.EdCodeEnrollTypeId)
					equal = false;
			}
			else if (Object1.EdCodeEnrollTypeId == null ^ Object2.EdCodeEnrollTypeId == null )
			{
				equal = false;
			}
			if ( Object1.AccumCh != null && Object2.AccumCh != null )
			{
				if (Object1.AccumCh != Object2.AccumCh)
					equal = false;
			}
			else if (Object1.AccumCh == null ^ Object2.AccumCh == null )
			{
				equal = false;
			}
			if ( Object1.AccumGpa != null && Object2.AccumGpa != null )
			{
				if (Object1.AccumGpa != Object2.AccumGpa)
					equal = false;
			}
			else if (Object1.AccumGpa == null ^ Object2.AccumGpa == null )
			{
				equal = false;
			}
			if ( Object1.IsCourseApproved != null && Object2.IsCourseApproved != null )
			{
				if (Object1.IsCourseApproved != Object2.IsCourseApproved)
					equal = false;
			}
			else if (Object1.IsCourseApproved == null ^ Object2.IsCourseApproved == null )
			{
				equal = false;
			}
			if ( Object1.CourseApproveDate != null && Object2.CourseApproveDate != null )
			{
				if (Object1.CourseApproveDate != Object2.CourseApproveDate)
					equal = false;
			}
			else if (Object1.CourseApproveDate == null ^ Object2.CourseApproveDate == null )
			{
				equal = false;
			}
			if ( Object1.AccumPoint != null && Object2.AccumPoint != null )
			{
				if (Object1.AccumPoint != Object2.AccumPoint)
					equal = false;
			}
			else if (Object1.AccumPoint == null ^ Object2.AccumPoint == null )
			{
				equal = false;
			}
			if ( Object1.SemCh != null && Object2.SemCh != null )
			{
				if (Object1.SemCh != Object2.SemCh)
					equal = false;
			}
			else if (Object1.SemCh == null ^ Object2.SemCh == null )
			{
				equal = false;
			}
			if ( Object1.SemGpa != null && Object2.SemGpa != null )
			{
				if (Object1.SemGpa != Object2.SemGpa)
					equal = false;
			}
			else if (Object1.SemGpa == null ^ Object2.SemGpa == null )
			{
				equal = false;
			}
			if ( Object1.SemPoint != null && Object2.SemPoint != null )
			{
				if (Object1.SemPoint != Object2.SemPoint)
					equal = false;
			}
			else if (Object1.SemPoint == null ^ Object2.SemPoint == null )
			{
				equal = false;
			}
			if ( Object1.IsClosed != null && Object2.IsClosed != null )
			{
				if (Object1.IsClosed != Object2.IsClosed)
					equal = false;
			}
			else if (Object1.IsClosed == null ^ Object2.IsClosed == null )
			{
				equal = false;
			}
			if ( Object1.MajorCgpa != null && Object2.MajorCgpa != null )
			{
				if (Object1.MajorCgpa != Object2.MajorCgpa)
					equal = false;
			}
			else if (Object1.MajorCgpa == null ^ Object2.MajorCgpa == null )
			{
				equal = false;
			}
			if ( Object1.MajorGpa != null && Object2.MajorGpa != null )
			{
				if (Object1.MajorGpa != Object2.MajorGpa)
					equal = false;
			}
			else if (Object1.MajorGpa == null ^ Object2.MajorGpa == null )
			{
				equal = false;
			}
			if ( Object1.AcdPlnLoadFlg != null && Object2.AcdPlnLoadFlg != null )
			{
				if (Object1.AcdPlnLoadFlg != Object2.AcdPlnLoadFlg)
					equal = false;
			}
			else if (Object1.AcdPlnLoadFlg == null ^ Object2.AcdPlnLoadFlg == null )
			{
				equal = false;
			}
			if ( Object1.OnlineFlg != null && Object2.OnlineFlg != null )
			{
				if (Object1.OnlineFlg != Object2.OnlineFlg)
					equal = false;
			}
			else if (Object1.OnlineFlg == null ^ Object2.OnlineFlg == null )
			{
				equal = false;
			}
			if ( Object1.ExpForGrad != null && Object2.ExpForGrad != null )
			{
				if (Object1.ExpForGrad != Object2.ExpForGrad)
					equal = false;
			}
			else if (Object1.ExpForGrad == null ^ Object2.ExpForGrad == null )
			{
				equal = false;
			}
			if ( Object1.HoldForGrad != null && Object2.HoldForGrad != null )
			{
				if (Object1.HoldForGrad != Object2.HoldForGrad)
					equal = false;
			}
			else if (Object1.HoldForGrad == null ^ Object2.HoldForGrad == null )
			{
				equal = false;
			}
			if ( Object1.OrientFlg != null && Object2.OrientFlg != null )
			{
				if (Object1.OrientFlg != Object2.OrientFlg)
					equal = false;
			}
			else if (Object1.OrientFlg == null ^ Object2.OrientFlg == null )
			{
				equal = false;
			}
			if ( Object1.HaveSponsor != null && Object2.HaveSponsor != null )
			{
				if (Object1.HaveSponsor != Object2.HaveSponsor)
					equal = false;
			}
			else if (Object1.HaveSponsor == null ^ Object2.HaveSponsor == null )
			{
				equal = false;
			}
			if ( Object1.HaveInstallment != null && Object2.HaveInstallment != null )
			{
				if (Object1.HaveInstallment != Object2.HaveInstallment)
					equal = false;
			}
			else if (Object1.HaveInstallment == null ^ Object2.HaveInstallment == null )
			{
				equal = false;
			}
			if ( Object1.NationalitySimilarityFlg != null && Object2.NationalitySimilarityFlg != null )
			{
				if (Object1.NationalitySimilarityFlg != Object2.NationalitySimilarityFlg)
					equal = false;
			}
			else if (Object1.NationalitySimilarityFlg == null ^ Object2.NationalitySimilarityFlg == null )
			{
				equal = false;
			}
			if ( Object1.HaveDiscount != null && Object2.HaveDiscount != null )
			{
				if (Object1.HaveDiscount != Object2.HaveDiscount)
					equal = false;
			}
			else if (Object1.HaveDiscount == null ^ Object2.HaveDiscount == null )
			{
				equal = false;
			}
			if ( Object1.HaveRetrieve != null && Object2.HaveRetrieve != null )
			{
				if (Object1.HaveRetrieve != Object2.HaveRetrieve)
					equal = false;
			}
			else if (Object1.HaveRetrieve == null ^ Object2.HaveRetrieve == null )
			{
				equal = false;
			}
			if ( Object1.HavePostponement != null && Object2.HavePostponement != null )
			{
				if (Object1.HavePostponement != Object2.HavePostponement)
					equal = false;
			}
			else if (Object1.HavePostponement == null ^ Object2.HavePostponement == null )
			{
				equal = false;
			}
			if ( Object1.HaveRemission != null && Object2.HaveRemission != null )
			{
				if (Object1.HaveRemission != Object2.HaveRemission)
					equal = false;
			}
			else if (Object1.HaveRemission == null ^ Object2.HaveRemission == null )
			{
				equal = false;
			}
			if ( Object1.FeeFacultyRuleId != null && Object2.FeeFacultyRuleId != null )
			{
				if (Object1.FeeFacultyRuleId != Object2.FeeFacultyRuleId)
					equal = false;
			}
			else if (Object1.FeeFacultyRuleId == null ^ Object2.FeeFacultyRuleId == null )
			{
				equal = false;
			}
			if ( Object1.StudCardStkrFlg != null && Object2.StudCardStkrFlg != null )
			{
				if (Object1.StudCardStkrFlg != Object2.StudCardStkrFlg)
					equal = false;
			}
			else if (Object1.StudCardStkrFlg == null ^ Object2.StudCardStkrFlg == null )
			{
				equal = false;
			}
			if ( Object1.StudCardStkrDate != null && Object2.StudCardStkrDate != null )
			{
				if (Object1.StudCardStkrDate != Object2.StudCardStkrDate)
					equal = false;
			}
			else if (Object1.StudCardStkrDate == null ^ Object2.StudCardStkrDate == null )
			{
				equal = false;
			}
			if ( Object1.FeeTotAmnt != null && Object2.FeeTotAmnt != null )
			{
				if (Object1.FeeTotAmnt != Object2.FeeTotAmnt)
					equal = false;
			}
			else if (Object1.FeeTotAmnt == null ^ Object2.FeeTotAmnt == null )
			{
				equal = false;
			}
			if ( Object1.FeePayAmnt != null && Object2.FeePayAmnt != null )
			{
				if (Object1.FeePayAmnt != Object2.FeePayAmnt)
					equal = false;
			}
			else if (Object1.FeePayAmnt == null ^ Object2.FeePayAmnt == null )
			{
				equal = false;
			}
			if ( Object1.FeeRefundAmnt != null && Object2.FeeRefundAmnt != null )
			{
				if (Object1.FeeRefundAmnt != Object2.FeeRefundAmnt)
					equal = false;
			}
			else if (Object1.FeeRefundAmnt == null ^ Object2.FeeRefundAmnt == null )
			{
				equal = false;
			}
			if ( Object1.PayFlg != null && Object2.PayFlg != null )
			{
				if (Object1.PayFlg != Object2.PayFlg)
					equal = false;
			}
			else if (Object1.PayFlg == null ^ Object2.PayFlg == null )
			{
				equal = false;
			}
			if ( Object1.FreezeFlg != null && Object2.FreezeFlg != null )
			{
				if (Object1.FreezeFlg != Object2.FreezeFlg)
					equal = false;
			}
			else if (Object1.FreezeFlg == null ^ Object2.FreezeFlg == null )
			{
				equal = false;
			}
			if ( Object1.AsCodeDegreeId != null && Object2.AsCodeDegreeId != null )
			{
				if (Object1.AsCodeDegreeId != Object2.AsCodeDegreeId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeId == null ^ Object2.AsCodeDegreeId == null )
			{
				equal = false;
			}
			if ( Object1.EdCdeAcadWarnTypeId != null && Object2.EdCdeAcadWarnTypeId != null )
			{
				if (Object1.EdCdeAcadWarnTypeId != Object2.EdCdeAcadWarnTypeId)
					equal = false;
			}
			else if (Object1.EdCdeAcadWarnTypeId == null ^ Object2.EdCdeAcadWarnTypeId == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.SemCount != null && Object2.SemCount != null )
			{
				if (Object1.SemCount != Object2.SemCount)
					equal = false;
			}
			else if (Object1.SemCount == null ^ Object2.SemCount == null )
			{
				equal = false;
			}
			if ( Object1.EdCdeExamTypeId != null && Object2.EdCdeExamTypeId != null )
			{
				if (Object1.EdCdeExamTypeId != Object2.EdCdeExamTypeId)
					equal = false;
			}
			else if (Object1.EdCdeExamTypeId == null ^ Object2.EdCdeExamTypeId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdStudSemesterTempBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdStudSemesterTempComparer GetComparer()
        {
            return new EdStudSemesterTempComparer();
        }
        */

        // Comparer delegates back to EdStudSemesterTemp
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdStudSemesterTemp rhs, EdStudSemesterTempColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdStudSemesterTempColumn.EdStudSemesterId:
            		return this.EdStudSemesterId.CompareTo(rhs.EdStudSemesterId);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.CompareTo(rhs.EdCodeSemesterId);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.EdStudId:
            		return this.EdStudId.CompareTo(rhs.EdStudId);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.EdCodeLevelId:
            		return this.EdCodeLevelId.Value.CompareTo(rhs.EdCodeLevelId.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.IsLast:
            		return this.IsLast.Value.CompareTo(rhs.IsLast.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.EdCodeLoadTypeId:
            		return this.EdCodeLoadTypeId.Value.CompareTo(rhs.EdCodeLoadTypeId.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.EdCodeEnrollTypeId:
            		return this.EdCodeEnrollTypeId.Value.CompareTo(rhs.EdCodeEnrollTypeId.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.AccumCh:
            		return this.AccumCh.Value.CompareTo(rhs.AccumCh.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.AccumGpa:
            		return this.AccumGpa.Value.CompareTo(rhs.AccumGpa.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.IsCourseApproved:
            		return this.IsCourseApproved.Value.CompareTo(rhs.IsCourseApproved.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.CourseApproveDate:
            		return this.CourseApproveDate.Value.CompareTo(rhs.CourseApproveDate.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.AccumPoint:
            		return this.AccumPoint.Value.CompareTo(rhs.AccumPoint.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.SemCh:
            		return this.SemCh.Value.CompareTo(rhs.SemCh.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.SemGpa:
            		return this.SemGpa.Value.CompareTo(rhs.SemGpa.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.SemPoint:
            		return this.SemPoint.Value.CompareTo(rhs.SemPoint.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.IsClosed:
            		return this.IsClosed.Value.CompareTo(rhs.IsClosed.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.MajorCgpa:
            		return this.MajorCgpa.Value.CompareTo(rhs.MajorCgpa.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.MajorGpa:
            		return this.MajorGpa.Value.CompareTo(rhs.MajorGpa.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.AcdPlnLoadFlg:
            		return this.AcdPlnLoadFlg.Value.CompareTo(rhs.AcdPlnLoadFlg.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.OnlineFlg:
            		return this.OnlineFlg.Value.CompareTo(rhs.OnlineFlg.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.ExpForGrad:
            		return this.ExpForGrad.Value.CompareTo(rhs.ExpForGrad.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.HoldForGrad:
            		return this.HoldForGrad.Value.CompareTo(rhs.HoldForGrad.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.OrientFlg:
            		return this.OrientFlg.Value.CompareTo(rhs.OrientFlg.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.HaveSponsor:
            		return this.HaveSponsor.Value.CompareTo(rhs.HaveSponsor.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.HaveInstallment:
            		return this.HaveInstallment.Value.CompareTo(rhs.HaveInstallment.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.NationalitySimilarityFlg:
            		return this.NationalitySimilarityFlg.Value.CompareTo(rhs.NationalitySimilarityFlg.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.HaveDiscount:
            		return this.HaveDiscount.Value.CompareTo(rhs.HaveDiscount.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.HaveRetrieve:
            		return this.HaveRetrieve.Value.CompareTo(rhs.HaveRetrieve.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.HavePostponement:
            		return this.HavePostponement.Value.CompareTo(rhs.HavePostponement.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.HaveRemission:
            		return this.HaveRemission.Value.CompareTo(rhs.HaveRemission.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.FeeFacultyRuleId:
            		return this.FeeFacultyRuleId.Value.CompareTo(rhs.FeeFacultyRuleId.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.StudCardStkrFlg:
            		return this.StudCardStkrFlg.Value.CompareTo(rhs.StudCardStkrFlg.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.StudCardStkrDate:
            		return this.StudCardStkrDate.Value.CompareTo(rhs.StudCardStkrDate.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.FeeTotAmnt:
            		return this.FeeTotAmnt.Value.CompareTo(rhs.FeeTotAmnt.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.FeePayAmnt:
            		return this.FeePayAmnt.Value.CompareTo(rhs.FeePayAmnt.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.FeeRefundAmnt:
            		return this.FeeRefundAmnt.Value.CompareTo(rhs.FeeRefundAmnt.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.PayFlg:
            		return this.PayFlg.Value.CompareTo(rhs.PayFlg.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.FreezeFlg:
            		return this.FreezeFlg.Value.CompareTo(rhs.FreezeFlg.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.AsCodeDegreeId:
            		return this.AsCodeDegreeId.Value.CompareTo(rhs.AsCodeDegreeId.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.EdCdeAcadWarnTypeId:
            		return this.EdCdeAcadWarnTypeId.Value.CompareTo(rhs.EdCdeAcadWarnTypeId.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.SemCount:
            		return this.SemCount.Value.CompareTo(rhs.SemCount.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterTempColumn.EdCdeExamTypeId:
            		return this.EdCdeExamTypeId.Value.CompareTo(rhs.EdCdeExamTypeId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdStudSemesterTempKey> Members
		
		// member variable for the EntityId property
		private EdStudSemesterTempKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdStudSemesterTempKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdStudSemesterTempKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdStudSemesterTemp")
					.Append("|").Append( this.EdStudSemesterId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{46}{45}- EdStudSemesterId: {0}{45}- EdCodeSemesterId: {1}{45}- EdStudId: {2}{45}- EdAcadYearId: {3}{45}- AsFacultyInfoId: {4}{45}- EdCodeLevelId: {5}{45}- IsLast: {6}{45}- EdCodeLoadTypeId: {7}{45}- EdCodeEnrollTypeId: {8}{45}- AccumCh: {9}{45}- AccumGpa: {10}{45}- IsCourseApproved: {11}{45}- CourseApproveDate: {12}{45}- AccumPoint: {13}{45}- SemCh: {14}{45}- SemGpa: {15}{45}- SemPoint: {16}{45}- IsClosed: {17}{45}- MajorCgpa: {18}{45}- MajorGpa: {19}{45}- AcdPlnLoadFlg: {20}{45}- OnlineFlg: {21}{45}- ExpForGrad: {22}{45}- HoldForGrad: {23}{45}- OrientFlg: {24}{45}- HaveSponsor: {25}{45}- HaveInstallment: {26}{45}- NationalitySimilarityFlg: {27}{45}- HaveDiscount: {28}{45}- HaveRetrieve: {29}{45}- HavePostponement: {30}{45}- HaveRemission: {31}{45}- FeeFacultyRuleId: {32}{45}- StudCardStkrFlg: {33}{45}- StudCardStkrDate: {34}{45}- FeeTotAmnt: {35}{45}- FeePayAmnt: {36}{45}- FeeRefundAmnt: {37}{45}- PayFlg: {38}{45}- FreezeFlg: {39}{45}- AsCodeDegreeId: {40}{45}- EdCdeAcadWarnTypeId: {41}{45}- Notes: {42}{45}- SemCount: {43}{45}- EdCdeExamTypeId: {44}{45}{47}", 
				this.EdStudSemesterId,
				this.EdCodeSemesterId,
				this.EdStudId,
				this.EdAcadYearId,
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				(this.EdCodeLevelId == null) ? string.Empty : this.EdCodeLevelId.ToString(),
				(this.IsLast == null) ? string.Empty : this.IsLast.ToString(),
				(this.EdCodeLoadTypeId == null) ? string.Empty : this.EdCodeLoadTypeId.ToString(),
				(this.EdCodeEnrollTypeId == null) ? string.Empty : this.EdCodeEnrollTypeId.ToString(),
				(this.AccumCh == null) ? string.Empty : this.AccumCh.ToString(),
				(this.AccumGpa == null) ? string.Empty : this.AccumGpa.ToString(),
				(this.IsCourseApproved == null) ? string.Empty : this.IsCourseApproved.ToString(),
				(this.CourseApproveDate == null) ? string.Empty : this.CourseApproveDate.ToString(),
				(this.AccumPoint == null) ? string.Empty : this.AccumPoint.ToString(),
				(this.SemCh == null) ? string.Empty : this.SemCh.ToString(),
				(this.SemGpa == null) ? string.Empty : this.SemGpa.ToString(),
				(this.SemPoint == null) ? string.Empty : this.SemPoint.ToString(),
				(this.IsClosed == null) ? string.Empty : this.IsClosed.ToString(),
				(this.MajorCgpa == null) ? string.Empty : this.MajorCgpa.ToString(),
				(this.MajorGpa == null) ? string.Empty : this.MajorGpa.ToString(),
				(this.AcdPlnLoadFlg == null) ? string.Empty : this.AcdPlnLoadFlg.ToString(),
				(this.OnlineFlg == null) ? string.Empty : this.OnlineFlg.ToString(),
				(this.ExpForGrad == null) ? string.Empty : this.ExpForGrad.ToString(),
				(this.HoldForGrad == null) ? string.Empty : this.HoldForGrad.ToString(),
				(this.OrientFlg == null) ? string.Empty : this.OrientFlg.ToString(),
				(this.HaveSponsor == null) ? string.Empty : this.HaveSponsor.ToString(),
				(this.HaveInstallment == null) ? string.Empty : this.HaveInstallment.ToString(),
				(this.NationalitySimilarityFlg == null) ? string.Empty : this.NationalitySimilarityFlg.ToString(),
				(this.HaveDiscount == null) ? string.Empty : this.HaveDiscount.ToString(),
				(this.HaveRetrieve == null) ? string.Empty : this.HaveRetrieve.ToString(),
				(this.HavePostponement == null) ? string.Empty : this.HavePostponement.ToString(),
				(this.HaveRemission == null) ? string.Empty : this.HaveRemission.ToString(),
				(this.FeeFacultyRuleId == null) ? string.Empty : this.FeeFacultyRuleId.ToString(),
				(this.StudCardStkrFlg == null) ? string.Empty : this.StudCardStkrFlg.ToString(),
				(this.StudCardStkrDate == null) ? string.Empty : this.StudCardStkrDate.ToString(),
				(this.FeeTotAmnt == null) ? string.Empty : this.FeeTotAmnt.ToString(),
				(this.FeePayAmnt == null) ? string.Empty : this.FeePayAmnt.ToString(),
				(this.FeeRefundAmnt == null) ? string.Empty : this.FeeRefundAmnt.ToString(),
				(this.PayFlg == null) ? string.Empty : this.PayFlg.ToString(),
				(this.FreezeFlg == null) ? string.Empty : this.FreezeFlg.ToString(),
				(this.AsCodeDegreeId == null) ? string.Empty : this.AsCodeDegreeId.ToString(),
				(this.EdCdeAcadWarnTypeId == null) ? string.Empty : this.EdCdeAcadWarnTypeId.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.SemCount == null) ? string.Empty : this.SemCount.ToString(),
				(this.EdCdeExamTypeId == null) ? string.Empty : this.EdCdeExamTypeId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_STUD_SEMESTER_TEMP' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdStudSemesterTempEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_STUD_SEMESTER_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_STUD_SEMESTER_TEMP"</remarks>
		public System.Decimal EdStudSemesterId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdStudSemesterId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : 
		/// </summary>
		public System.Decimal		  EdCodeSemesterId = 0.0m;
		
		/// <summary>
		/// ED_STUD_ID : 
		/// </summary>
		public System.Decimal		  EdStudId = 0.0m;
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// ED_CODE_LEVEL_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeLevelId = null;
		
		/// <summary>
		/// IS_LAST : 
		/// </summary>
		public System.Decimal?		  IsLast = null;
		
		/// <summary>
		/// ED_CODE_LOAD_TYPE_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeLoadTypeId = null;
		
		/// <summary>
		/// ED_CODE_ENROLL_TYPE_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeEnrollTypeId = null;
		
		/// <summary>
		/// ACCUM_CH : 
		/// </summary>
		public System.Decimal?		  AccumCh = null;
		
		/// <summary>
		/// ACCUM_GPA : 
		/// </summary>
		public System.Decimal?		  AccumGpa = null;
		
		/// <summary>
		/// IS_COURSE_APPROVED : 
		/// </summary>
		public System.Decimal?		  IsCourseApproved = null;
		
		/// <summary>
		/// COURSE_APPROVE_DATE : 
		/// </summary>
		public System.DateTime?		  CourseApproveDate = null;
		
		/// <summary>
		/// ACCUM_POINT : 
		/// </summary>
		public System.Decimal?		  AccumPoint = null;
		
		/// <summary>
		/// SEM_CH : 
		/// </summary>
		public System.Decimal?		  SemCh = null;
		
		/// <summary>
		/// SEM_GPA : 
		/// </summary>
		public System.Decimal?		  SemGpa = null;
		
		/// <summary>
		/// SEM_POINT : 
		/// </summary>
		public System.Decimal?		  SemPoint = null;
		
		/// <summary>
		/// IS_CLOSED : 
		/// </summary>
		public System.Decimal?		  IsClosed = null;
		
		/// <summary>
		/// MAJOR_CGPA : 
		/// </summary>
		public System.Decimal?		  MajorCgpa = null;
		
		/// <summary>
		/// MAJOR_GPA : 
		/// </summary>
		public System.Decimal?		  MajorGpa = null;
		
		/// <summary>
		/// ACD_PLN_LOAD_FLG : 
		/// </summary>
		public System.Decimal?		  AcdPlnLoadFlg = null;
		
		/// <summary>
		/// ONLINE_FLG : 
		/// </summary>
		public System.Decimal?		  OnlineFlg = null;
		
		/// <summary>
		/// EXP_FOR_GRAD : 
		/// </summary>
		public System.Decimal?		  ExpForGrad = null;
		
		/// <summary>
		/// HOLD_FOR_GRAD : 
		/// </summary>
		public System.Decimal?		  HoldForGrad = null;
		
		/// <summary>
		/// ORIENT_FLG : 
		/// </summary>
		public System.Decimal?		  OrientFlg = null;
		
		/// <summary>
		/// HAVE_SPONSOR : 
		/// </summary>
		public System.Decimal?		  HaveSponsor = null;
		
		/// <summary>
		/// HAVE_INSTALLMENT : 
		/// </summary>
		public System.Decimal?		  HaveInstallment = null;
		
		/// <summary>
		/// NATIONALITY_SIMILARITY_FLG : 
		/// </summary>
		public System.Decimal?		  NationalitySimilarityFlg = null;
		
		/// <summary>
		/// HAVE_DISCOUNT : 
		/// </summary>
		public System.Decimal?		  HaveDiscount = null;
		
		/// <summary>
		/// HAVE_RETRIEVE : 
		/// </summary>
		public System.Decimal?		  HaveRetrieve = null;
		
		/// <summary>
		/// HAVE_POSTPONEMENT : 
		/// </summary>
		public System.Decimal?		  HavePostponement = null;
		
		/// <summary>
		/// HAVE_REMISSION : 
		/// </summary>
		public System.Decimal?		  HaveRemission = null;
		
		/// <summary>
		/// FEE_FACULTY_RULE_ID : 
		/// </summary>
		public System.Decimal?		  FeeFacultyRuleId = null;
		
		/// <summary>
		/// STUD_CARD_STKR_FLG : 
		/// </summary>
		public System.Decimal?		  StudCardStkrFlg = null;
		
		/// <summary>
		/// STUD_CARD_STKR_DATE : 
		/// </summary>
		public System.DateTime?		  StudCardStkrDate = null;
		
		/// <summary>
		/// FEE_TOT_AMNT : 
		/// </summary>
		public System.Decimal?		  FeeTotAmnt = null;
		
		/// <summary>
		/// FEE_PAY_AMNT : 
		/// </summary>
		public System.Decimal?		  FeePayAmnt = null;
		
		/// <summary>
		/// FEE_REFUND_AMNT : 
		/// </summary>
		public System.Decimal?		  FeeRefundAmnt = null;
		
		/// <summary>
		/// PAY_FLG : 
		/// </summary>
		public System.Decimal?		  PayFlg = null;
		
		/// <summary>
		/// FREEZE_FLG : 
		/// </summary>
		public System.Decimal?		  FreezeFlg = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_ID : 
		/// </summary>
		public System.Decimal?		  AsCodeDegreeId = null;
		
		/// <summary>
		/// ED_CDE_ACAD_WARN_TYPE_ID : 
		/// </summary>
		public System.Decimal?		  EdCdeAcadWarnTypeId = null;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// SEM_COUNT : 
		/// </summary>
		public System.Decimal?		  SemCount = null;
		
		/// <summary>
		/// ED_CDE_EXAM_TYPE_ID : نوع الامتحان: تكميلى- اعادة
		/// </summary>
		public System.Decimal?		  EdCdeExamTypeId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCdeAcadWarnType _edCdeAcadWarnTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeAcadWarnType"/>.
		/// </summary>
		/// <value>The source EdCdeAcadWarnType for EdCdeAcadWarnTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCdeAcadWarnType EdCdeAcadWarnTypeIdSource
      	{
            get { return this._edCdeAcadWarnTypeIdSource; }
            set { this._edCdeAcadWarnTypeIdSource = value; }
      	}
		private EdCodeEnrollType _edCodeEnrollTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeEnrollType"/>.
		/// </summary>
		/// <value>The source EdCodeEnrollType for EdCodeEnrollTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeEnrollType EdCodeEnrollTypeIdSource
      	{
            get { return this._edCodeEnrollTypeIdSource; }
            set { this._edCodeEnrollTypeIdSource = value; }
      	}
		private EdCodeLevel _edCodeLevelIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeLevel EdCodeLevelIdSource
      	{
            get { return this._edCodeLevelIdSource; }
            set { this._edCodeLevelIdSource = value; }
      	}
		private EdCodeLoadType _edCodeLoadTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLoadType"/>.
		/// </summary>
		/// <value>The source EdCodeLoadType for EdCodeLoadTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeLoadType EdCodeLoadTypeIdSource
      	{
            get { return this._edCodeLoadTypeIdSource; }
            set { this._edCodeLoadTypeIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		private FeeFacultyRule _feeFacultyRuleIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeFacultyRule"/>.
		/// </summary>
		/// <value>The source FeeFacultyRule for FeeFacultyRuleId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeFacultyRule FeeFacultyRuleIdSource
      	{
            get { return this._feeFacultyRuleIdSource; }
            set { this._feeFacultyRuleIdSource = value; }
      	}
		private EdCdeExamType _edCdeExamTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeExamType"/>.
		/// </summary>
		/// <value>The source EdCdeExamType for EdCdeExamTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCdeExamType EdCdeExamTypeIdSource
      	{
            get { return this._edCdeExamTypeIdSource; }
            set { this._edCdeExamTypeIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdStudSemesterTempEntityData _tmp = new EdStudSemesterTempEntityData();
						
			_tmp.EdStudSemesterId = this.EdStudSemesterId;
			_tmp.OriginalEdStudSemesterId = this.OriginalEdStudSemesterId;
			
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdCodeLevelId = this.EdCodeLevelId;
			_tmp.IsLast = this.IsLast;
			_tmp.EdCodeLoadTypeId = this.EdCodeLoadTypeId;
			_tmp.EdCodeEnrollTypeId = this.EdCodeEnrollTypeId;
			_tmp.AccumCh = this.AccumCh;
			_tmp.AccumGpa = this.AccumGpa;
			_tmp.IsCourseApproved = this.IsCourseApproved;
			_tmp.CourseApproveDate = this.CourseApproveDate;
			_tmp.AccumPoint = this.AccumPoint;
			_tmp.SemCh = this.SemCh;
			_tmp.SemGpa = this.SemGpa;
			_tmp.SemPoint = this.SemPoint;
			_tmp.IsClosed = this.IsClosed;
			_tmp.MajorCgpa = this.MajorCgpa;
			_tmp.MajorGpa = this.MajorGpa;
			_tmp.AcdPlnLoadFlg = this.AcdPlnLoadFlg;
			_tmp.OnlineFlg = this.OnlineFlg;
			_tmp.ExpForGrad = this.ExpForGrad;
			_tmp.HoldForGrad = this.HoldForGrad;
			_tmp.OrientFlg = this.OrientFlg;
			_tmp.HaveSponsor = this.HaveSponsor;
			_tmp.HaveInstallment = this.HaveInstallment;
			_tmp.NationalitySimilarityFlg = this.NationalitySimilarityFlg;
			_tmp.HaveDiscount = this.HaveDiscount;
			_tmp.HaveRetrieve = this.HaveRetrieve;
			_tmp.HavePostponement = this.HavePostponement;
			_tmp.HaveRemission = this.HaveRemission;
			_tmp.FeeFacultyRuleId = this.FeeFacultyRuleId;
			_tmp.StudCardStkrFlg = this.StudCardStkrFlg;
			_tmp.StudCardStkrDate = this.StudCardStkrDate;
			_tmp.FeeTotAmnt = this.FeeTotAmnt;
			_tmp.FeePayAmnt = this.FeePayAmnt;
			_tmp.FeeRefundAmnt = this.FeeRefundAmnt;
			_tmp.PayFlg = this.PayFlg;
			_tmp.FreezeFlg = this.FreezeFlg;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.EdCdeAcadWarnTypeId = this.EdCdeAcadWarnTypeId;
			_tmp.Notes = this.Notes;
			_tmp.SemCount = this.SemCount;
			_tmp.EdCdeExamTypeId = this.EdCdeExamTypeId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCdeAcadWarnTypeIdSource != null)
				_tmp.EdCdeAcadWarnTypeIdSource = MakeCopyOf(this.EdCdeAcadWarnTypeIdSource) as EdCdeAcadWarnType;
			if (this.EdCodeEnrollTypeIdSource != null)
				_tmp.EdCodeEnrollTypeIdSource = MakeCopyOf(this.EdCodeEnrollTypeIdSource) as EdCodeEnrollType;
			if (this.EdCodeLevelIdSource != null)
				_tmp.EdCodeLevelIdSource = MakeCopyOf(this.EdCodeLevelIdSource) as EdCodeLevel;
			if (this.EdCodeLoadTypeIdSource != null)
				_tmp.EdCodeLoadTypeIdSource = MakeCopyOf(this.EdCodeLoadTypeIdSource) as EdCodeLoadType;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			if (this.FeeFacultyRuleIdSource != null)
				_tmp.FeeFacultyRuleIdSource = MakeCopyOf(this.FeeFacultyRuleIdSource) as FeeFacultyRule;
			if (this.EdCdeExamTypeIdSource != null)
				_tmp.EdCdeExamTypeIdSource = MakeCopyOf(this.EdCdeExamTypeIdSource) as EdCdeExamType;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdStudSemesterTempEntityData _tmp = new EdStudSemesterTempEntityData();
						
			_tmp.EdStudSemesterId = this.EdStudSemesterId;
			_tmp.OriginalEdStudSemesterId = this.OriginalEdStudSemesterId;
			
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdCodeLevelId = this.EdCodeLevelId;
			_tmp.IsLast = this.IsLast;
			_tmp.EdCodeLoadTypeId = this.EdCodeLoadTypeId;
			_tmp.EdCodeEnrollTypeId = this.EdCodeEnrollTypeId;
			_tmp.AccumCh = this.AccumCh;
			_tmp.AccumGpa = this.AccumGpa;
			_tmp.IsCourseApproved = this.IsCourseApproved;
			_tmp.CourseApproveDate = this.CourseApproveDate;
			_tmp.AccumPoint = this.AccumPoint;
			_tmp.SemCh = this.SemCh;
			_tmp.SemGpa = this.SemGpa;
			_tmp.SemPoint = this.SemPoint;
			_tmp.IsClosed = this.IsClosed;
			_tmp.MajorCgpa = this.MajorCgpa;
			_tmp.MajorGpa = this.MajorGpa;
			_tmp.AcdPlnLoadFlg = this.AcdPlnLoadFlg;
			_tmp.OnlineFlg = this.OnlineFlg;
			_tmp.ExpForGrad = this.ExpForGrad;
			_tmp.HoldForGrad = this.HoldForGrad;
			_tmp.OrientFlg = this.OrientFlg;
			_tmp.HaveSponsor = this.HaveSponsor;
			_tmp.HaveInstallment = this.HaveInstallment;
			_tmp.NationalitySimilarityFlg = this.NationalitySimilarityFlg;
			_tmp.HaveDiscount = this.HaveDiscount;
			_tmp.HaveRetrieve = this.HaveRetrieve;
			_tmp.HavePostponement = this.HavePostponement;
			_tmp.HaveRemission = this.HaveRemission;
			_tmp.FeeFacultyRuleId = this.FeeFacultyRuleId;
			_tmp.StudCardStkrFlg = this.StudCardStkrFlg;
			_tmp.StudCardStkrDate = this.StudCardStkrDate;
			_tmp.FeeTotAmnt = this.FeeTotAmnt;
			_tmp.FeePayAmnt = this.FeePayAmnt;
			_tmp.FeeRefundAmnt = this.FeeRefundAmnt;
			_tmp.PayFlg = this.PayFlg;
			_tmp.FreezeFlg = this.FreezeFlg;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.EdCdeAcadWarnTypeId = this.EdCdeAcadWarnTypeId;
			_tmp.Notes = this.Notes;
			_tmp.SemCount = this.SemCount;
			_tmp.EdCdeExamTypeId = this.EdCdeExamTypeId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCdeAcadWarnTypeIdSource != null && existingCopies.Contains(this.EdCdeAcadWarnTypeIdSource))
				_tmp.EdCdeAcadWarnTypeIdSource = existingCopies[this.EdCdeAcadWarnTypeIdSource] as EdCdeAcadWarnType;
			else
				_tmp.EdCdeAcadWarnTypeIdSource = MakeCopyOf(this.EdCdeAcadWarnTypeIdSource, existingCopies) as EdCdeAcadWarnType;
			if (this.EdCodeEnrollTypeIdSource != null && existingCopies.Contains(this.EdCodeEnrollTypeIdSource))
				_tmp.EdCodeEnrollTypeIdSource = existingCopies[this.EdCodeEnrollTypeIdSource] as EdCodeEnrollType;
			else
				_tmp.EdCodeEnrollTypeIdSource = MakeCopyOf(this.EdCodeEnrollTypeIdSource, existingCopies) as EdCodeEnrollType;
			if (this.EdCodeLevelIdSource != null && existingCopies.Contains(this.EdCodeLevelIdSource))
				_tmp.EdCodeLevelIdSource = existingCopies[this.EdCodeLevelIdSource] as EdCodeLevel;
			else
				_tmp.EdCodeLevelIdSource = MakeCopyOf(this.EdCodeLevelIdSource, existingCopies) as EdCodeLevel;
			if (this.EdCodeLoadTypeIdSource != null && existingCopies.Contains(this.EdCodeLoadTypeIdSource))
				_tmp.EdCodeLoadTypeIdSource = existingCopies[this.EdCodeLoadTypeIdSource] as EdCodeLoadType;
			else
				_tmp.EdCodeLoadTypeIdSource = MakeCopyOf(this.EdCodeLoadTypeIdSource, existingCopies) as EdCodeLoadType;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.FeeFacultyRuleIdSource != null && existingCopies.Contains(this.FeeFacultyRuleIdSource))
				_tmp.FeeFacultyRuleIdSource = existingCopies[this.FeeFacultyRuleIdSource] as FeeFacultyRule;
			else
				_tmp.FeeFacultyRuleIdSource = MakeCopyOf(this.FeeFacultyRuleIdSource, existingCopies) as FeeFacultyRule;
			if (this.EdCdeExamTypeIdSource != null && existingCopies.Contains(this.EdCdeExamTypeIdSource))
				_tmp.EdCdeExamTypeIdSource = existingCopies[this.EdCdeExamTypeIdSource] as EdCdeExamType;
			else
				_tmp.EdCdeExamTypeIdSource = MakeCopyOf(this.EdCdeExamTypeIdSource, existingCopies) as EdCdeExamType;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudSemesterTempColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdStudSemesterTempColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudSemesterTempColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdStudSemesterTempColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudSemesterTempColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdStudSemesterTempColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdStudSemesterTempEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdStudSemesterTempEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudSemesterTempColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdStudSemesterTempColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdStudSemesterTempEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdStudSemesterTempEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdStudSemesterTempEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdStudSemesterTemp"/> object.
	/// </remarks>
	public class EdStudSemesterTempEventArgs : System.EventArgs
	{
		private EdStudSemesterTempColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdStudSemesterTempEventArgs class.
		///</summary>
		public EdStudSemesterTempEventArgs(EdStudSemesterTempColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdStudSemesterTempEventArgs class.
		///</summary>
		public EdStudSemesterTempEventArgs(EdStudSemesterTempColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdStudSemesterTempColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdStudSemesterTempColumn" />
		public EdStudSemesterTempColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdStudSemesterTemp related events.
	///</summary>
	public delegate void EdStudSemesterTempEventHandler(object sender, EdStudSemesterTempEventArgs e);
	
	#region EdStudSemesterTempComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdStudSemesterTempComparer : System.Collections.Generic.IComparer<EdStudSemesterTemp>
	{
		EdStudSemesterTempColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudSemesterTempComparer"/> class.
        /// </summary>
		public EdStudSemesterTempComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudSemesterTempComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdStudSemesterTempComparer(EdStudSemesterTempColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdStudSemesterTemp"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdStudSemesterTemp"/> to compare.</param>
        /// <param name="b">The second <c>EdStudSemesterTemp</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdStudSemesterTemp a, EdStudSemesterTemp b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdStudSemesterTemp entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdStudSemesterTemp a, EdStudSemesterTemp b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdStudSemesterTempColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdStudSemesterTempKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdStudSemesterTemp"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdStudSemesterTempKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdStudSemesterTempKey class.
		/// </summary>
		public EdStudSemesterTempKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudSemesterTempKey class.
		/// </summary>
		public EdStudSemesterTempKey(EdStudSemesterTempBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdStudSemesterId = entity.EdStudSemesterId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudSemesterTempKey class.
		/// </summary>
		public EdStudSemesterTempKey(System.Decimal _edStudSemesterId)
		{
			#region Init Properties

			this.EdStudSemesterId = _edStudSemesterId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdStudSemesterTempBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdStudSemesterTempBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdStudSemesterId property
		private System.Decimal _edStudSemesterId;
		
		/// <summary>
		/// Gets or sets the EdStudSemesterId property.
		/// </summary>
		public System.Decimal EdStudSemesterId
		{
			get { return _edStudSemesterId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdStudSemesterId = value;
				
				_edStudSemesterId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdStudSemesterId = ( values["EdStudSemesterId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdStudSemesterId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdStudSemesterId", EdStudSemesterId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdStudSemesterId: {0}{1}",
								EdStudSemesterId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdStudSemesterTempColumn Enum
	
	/// <summary>
	/// Enumerate the EdStudSemesterTemp columns.
	/// </summary>
	[Serializable]
	public enum EdStudSemesterTempColumn : int
	{
		/// <summary>
		/// EdStudSemesterId : 
		/// </summary>
		[EnumTextValue("ED_STUD_SEMESTER_ID")]
		[ColumnEnum("ED_STUD_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdStudSemesterId = 1,
		/// <summary>
		/// EdCodeSemesterId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeSemesterId = 2,
		/// <summary>
		/// EdStudId : 
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudId = 3,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 4,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 5,
		/// <summary>
		/// EdCodeLevelId : 
		/// </summary>
		[EnumTextValue("ED_CODE_LEVEL_ID")]
		[ColumnEnum("ED_CODE_LEVEL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeLevelId = 6,
		/// <summary>
		/// IsLast : 
		/// </summary>
		[EnumTextValue("IS_LAST")]
		[ColumnEnum("IS_LAST", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		IsLast = 7,
		/// <summary>
		/// EdCodeLoadTypeId : 
		/// </summary>
		[EnumTextValue("ED_CODE_LOAD_TYPE_ID")]
		[ColumnEnum("ED_CODE_LOAD_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeLoadTypeId = 8,
		/// <summary>
		/// EdCodeEnrollTypeId : 
		/// </summary>
		[EnumTextValue("ED_CODE_ENROLL_TYPE_ID")]
		[ColumnEnum("ED_CODE_ENROLL_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeEnrollTypeId = 9,
		/// <summary>
		/// AccumCh : 
		/// </summary>
		[EnumTextValue("ACCUM_CH")]
		[ColumnEnum("ACCUM_CH", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AccumCh = 10,
		/// <summary>
		/// AccumGpa : 
		/// </summary>
		[EnumTextValue("ACCUM_GPA")]
		[ColumnEnum("ACCUM_GPA", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AccumGpa = 11,
		/// <summary>
		/// IsCourseApproved : 
		/// </summary>
		[EnumTextValue("IS_COURSE_APPROVED")]
		[ColumnEnum("IS_COURSE_APPROVED", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		IsCourseApproved = 12,
		/// <summary>
		/// CourseApproveDate : 
		/// </summary>
		[EnumTextValue("COURSE_APPROVE_DATE")]
		[ColumnEnum("COURSE_APPROVE_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CourseApproveDate = 13,
		/// <summary>
		/// AccumPoint : 
		/// </summary>
		[EnumTextValue("ACCUM_POINT")]
		[ColumnEnum("ACCUM_POINT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AccumPoint = 14,
		/// <summary>
		/// SemCh : 
		/// </summary>
		[EnumTextValue("SEM_CH")]
		[ColumnEnum("SEM_CH", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SemCh = 15,
		/// <summary>
		/// SemGpa : 
		/// </summary>
		[EnumTextValue("SEM_GPA")]
		[ColumnEnum("SEM_GPA", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SemGpa = 16,
		/// <summary>
		/// SemPoint : 
		/// </summary>
		[EnumTextValue("SEM_POINT")]
		[ColumnEnum("SEM_POINT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SemPoint = 17,
		/// <summary>
		/// IsClosed : 
		/// </summary>
		[EnumTextValue("IS_CLOSED")]
		[ColumnEnum("IS_CLOSED", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		IsClosed = 18,
		/// <summary>
		/// MajorCgpa : 
		/// </summary>
		[EnumTextValue("MAJOR_CGPA")]
		[ColumnEnum("MAJOR_CGPA", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MajorCgpa = 19,
		/// <summary>
		/// MajorGpa : 
		/// </summary>
		[EnumTextValue("MAJOR_GPA")]
		[ColumnEnum("MAJOR_GPA", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MajorGpa = 20,
		/// <summary>
		/// AcdPlnLoadFlg : 
		/// </summary>
		[EnumTextValue("ACD_PLN_LOAD_FLG")]
		[ColumnEnum("ACD_PLN_LOAD_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AcdPlnLoadFlg = 21,
		/// <summary>
		/// OnlineFlg : 
		/// </summary>
		[EnumTextValue("ONLINE_FLG")]
		[ColumnEnum("ONLINE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		OnlineFlg = 22,
		/// <summary>
		/// ExpForGrad : 
		/// </summary>
		[EnumTextValue("EXP_FOR_GRAD")]
		[ColumnEnum("EXP_FOR_GRAD", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ExpForGrad = 23,
		/// <summary>
		/// HoldForGrad : 
		/// </summary>
		[EnumTextValue("HOLD_FOR_GRAD")]
		[ColumnEnum("HOLD_FOR_GRAD", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HoldForGrad = 24,
		/// <summary>
		/// OrientFlg : 
		/// </summary>
		[EnumTextValue("ORIENT_FLG")]
		[ColumnEnum("ORIENT_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		OrientFlg = 25,
		/// <summary>
		/// HaveSponsor : 
		/// </summary>
		[EnumTextValue("HAVE_SPONSOR")]
		[ColumnEnum("HAVE_SPONSOR", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HaveSponsor = 26,
		/// <summary>
		/// HaveInstallment : 
		/// </summary>
		[EnumTextValue("HAVE_INSTALLMENT")]
		[ColumnEnum("HAVE_INSTALLMENT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HaveInstallment = 27,
		/// <summary>
		/// NationalitySimilarityFlg : 
		/// </summary>
		[EnumTextValue("NATIONALITY_SIMILARITY_FLG")]
		[ColumnEnum("NATIONALITY_SIMILARITY_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		NationalitySimilarityFlg = 28,
		/// <summary>
		/// HaveDiscount : 
		/// </summary>
		[EnumTextValue("HAVE_DISCOUNT")]
		[ColumnEnum("HAVE_DISCOUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HaveDiscount = 29,
		/// <summary>
		/// HaveRetrieve : 
		/// </summary>
		[EnumTextValue("HAVE_RETRIEVE")]
		[ColumnEnum("HAVE_RETRIEVE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HaveRetrieve = 30,
		/// <summary>
		/// HavePostponement : 
		/// </summary>
		[EnumTextValue("HAVE_POSTPONEMENT")]
		[ColumnEnum("HAVE_POSTPONEMENT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HavePostponement = 31,
		/// <summary>
		/// HaveRemission : 
		/// </summary>
		[EnumTextValue("HAVE_REMISSION")]
		[ColumnEnum("HAVE_REMISSION", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HaveRemission = 32,
		/// <summary>
		/// FeeFacultyRuleId : 
		/// </summary>
		[EnumTextValue("FEE_FACULTY_RULE_ID")]
		[ColumnEnum("FEE_FACULTY_RULE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeeFacultyRuleId = 33,
		/// <summary>
		/// StudCardStkrFlg : 
		/// </summary>
		[EnumTextValue("STUD_CARD_STKR_FLG")]
		[ColumnEnum("STUD_CARD_STKR_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		StudCardStkrFlg = 34,
		/// <summary>
		/// StudCardStkrDate : 
		/// </summary>
		[EnumTextValue("STUD_CARD_STKR_DATE")]
		[ColumnEnum("STUD_CARD_STKR_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		StudCardStkrDate = 35,
		/// <summary>
		/// FeeTotAmnt : 
		/// </summary>
		[EnumTextValue("FEE_TOT_AMNT")]
		[ColumnEnum("FEE_TOT_AMNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeeTotAmnt = 36,
		/// <summary>
		/// FeePayAmnt : 
		/// </summary>
		[EnumTextValue("FEE_PAY_AMNT")]
		[ColumnEnum("FEE_PAY_AMNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeePayAmnt = 37,
		/// <summary>
		/// FeeRefundAmnt : 
		/// </summary>
		[EnumTextValue("FEE_REFUND_AMNT")]
		[ColumnEnum("FEE_REFUND_AMNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeeRefundAmnt = 38,
		/// <summary>
		/// PayFlg : 
		/// </summary>
		[EnumTextValue("PAY_FLG")]
		[ColumnEnum("PAY_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PayFlg = 39,
		/// <summary>
		/// FreezeFlg : 
		/// </summary>
		[EnumTextValue("FREEZE_FLG")]
		[ColumnEnum("FREEZE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FreezeFlg = 40,
		/// <summary>
		/// AsCodeDegreeId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_ID")]
		[ColumnEnum("AS_CODE_DEGREE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeId = 41,
		/// <summary>
		/// EdCdeAcadWarnTypeId : 
		/// </summary>
		[EnumTextValue("ED_CDE_ACAD_WARN_TYPE_ID")]
		[ColumnEnum("ED_CDE_ACAD_WARN_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCdeAcadWarnTypeId = 42,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 300)]
		Notes = 43,
		/// <summary>
		/// SemCount : 
		/// </summary>
		[EnumTextValue("SEM_COUNT")]
		[ColumnEnum("SEM_COUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SemCount = 44,
		/// <summary>
		/// EdCdeExamTypeId : نوع الامتحان: تكميلى- اعادة
		/// </summary>
		[EnumTextValue("ED_CDE_EXAM_TYPE_ID")]
		[ColumnEnum("ED_CDE_EXAM_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCdeExamTypeId = 45
	}//End enum

	#endregion EdStudSemesterTempColumn Enum

} // end namespace
