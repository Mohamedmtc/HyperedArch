
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AdmOpenAcadSemester.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ADM_OPEN_ACAD_SEMESTER' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AdmOpenAcadSemesterBase : EntityBase, IAdmOpenAcadSemester, IEntityId<AdmOpenAcadSemesterKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AdmOpenAcadSemesterEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AdmOpenAcadSemesterEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AdmOpenAcadSemesterEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AdmOpenAcadSemester> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmOpenAcadSemesterEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmOpenAcadSemesterEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AdmOpenAcadSemesterBase"/> instance.
		///</summary>
		public AdmOpenAcadSemesterBase()
		{
			this.entityData = new AdmOpenAcadSemesterEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AdmOpenAcadSemesterBase"/> instance.
		///</summary>
		///<param name="_admOpenAcadSemesterId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_fromDate"></param>
		///<param name="_toDate"></param>
		///<param name="_isCurrent"></param>
		///<param name="_isClosed"></param>
		///<param name="_closeWeb"></param>
		///<param name="_restrictUpdate"></param>
		///<param name="_comptitiveRateFlg"></param>
		///<param name="_admissionValidationFlg"></param>
		///<param name="_distributionFlg"></param>
		///<param name="_earlyFromDate">early Admission</param>
		///<param name="_earlyToDate">early Admission</param>
		///<param name="_minTrnsCgpa">"الحد الأدنى للمعدل المقبول للطلاب المحولين"</param>
		///<param name="_notes"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public AdmOpenAcadSemesterBase(System.Decimal _admOpenAcadSemesterId, System.Decimal _edCodeSemesterId, 
			System.Decimal _edAcadYearId, System.DateTime _fromDate, System.DateTime _toDate, 
			System.Decimal _isCurrent, System.Decimal _isClosed, System.Decimal _closeWeb, 
			System.Decimal _restrictUpdate, System.Decimal _comptitiveRateFlg, System.Decimal _admissionValidationFlg, 
			System.Decimal _distributionFlg, System.DateTime? _earlyFromDate, System.DateTime? _earlyToDate, 
			System.Decimal? _minTrnsCgpa, System.String _notes, System.Decimal? _seUserId, 
			System.DateTime? _lastDate)
		{
			this.entityData = new AdmOpenAcadSemesterEntityData();
			this.backupData = null;

			this.AdmOpenAcadSemesterId = _admOpenAcadSemesterId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.EdAcadYearId = _edAcadYearId;
			this.FromDate = _fromDate;
			this.ToDate = _toDate;
			this.IsCurrent = _isCurrent;
			this.IsClosed = _isClosed;
			this.CloseWeb = _closeWeb;
			this.RestrictUpdate = _restrictUpdate;
			this.ComptitiveRateFlg = _comptitiveRateFlg;
			this.AdmissionValidationFlg = _admissionValidationFlg;
			this.DistributionFlg = _distributionFlg;
			this.EarlyFromDate = _earlyFromDate;
			this.EarlyToDate = _earlyToDate;
			this.MinTrnsCgpa = _minTrnsCgpa;
			this.Notes = _notes;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AdmOpenAcadSemester"/> instance.
		///</summary>
		///<param name="_admOpenAcadSemesterId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_fromDate"></param>
		///<param name="_toDate"></param>
		///<param name="_isCurrent"></param>
		///<param name="_isClosed"></param>
		///<param name="_closeWeb"></param>
		///<param name="_restrictUpdate"></param>
		///<param name="_comptitiveRateFlg"></param>
		///<param name="_admissionValidationFlg"></param>
		///<param name="_distributionFlg"></param>
		///<param name="_earlyFromDate">early Admission</param>
		///<param name="_earlyToDate">early Admission</param>
		///<param name="_minTrnsCgpa">"الحد الأدنى للمعدل المقبول للطلاب المحولين"</param>
		///<param name="_notes"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static AdmOpenAcadSemester CreateAdmOpenAcadSemester(System.Decimal _admOpenAcadSemesterId, System.Decimal _edCodeSemesterId, 
			System.Decimal _edAcadYearId, System.DateTime _fromDate, System.DateTime _toDate, 
			System.Decimal _isCurrent, System.Decimal _isClosed, System.Decimal _closeWeb, 
			System.Decimal _restrictUpdate, System.Decimal _comptitiveRateFlg, System.Decimal _admissionValidationFlg, 
			System.Decimal _distributionFlg, System.DateTime? _earlyFromDate, System.DateTime? _earlyToDate, 
			System.Decimal? _minTrnsCgpa, System.String _notes, System.Decimal? _seUserId, 
			System.DateTime? _lastDate)
		{
			AdmOpenAcadSemester newAdmOpenAcadSemester = new AdmOpenAcadSemester();
			newAdmOpenAcadSemester.AdmOpenAcadSemesterId = _admOpenAcadSemesterId;
			newAdmOpenAcadSemester.EdCodeSemesterId = _edCodeSemesterId;
			newAdmOpenAcadSemester.EdAcadYearId = _edAcadYearId;
			newAdmOpenAcadSemester.FromDate = _fromDate;
			newAdmOpenAcadSemester.ToDate = _toDate;
			newAdmOpenAcadSemester.IsCurrent = _isCurrent;
			newAdmOpenAcadSemester.IsClosed = _isClosed;
			newAdmOpenAcadSemester.CloseWeb = _closeWeb;
			newAdmOpenAcadSemester.RestrictUpdate = _restrictUpdate;
			newAdmOpenAcadSemester.ComptitiveRateFlg = _comptitiveRateFlg;
			newAdmOpenAcadSemester.AdmissionValidationFlg = _admissionValidationFlg;
			newAdmOpenAcadSemester.DistributionFlg = _distributionFlg;
			newAdmOpenAcadSemester.EarlyFromDate = _earlyFromDate;
			newAdmOpenAcadSemester.EarlyToDate = _earlyToDate;
			newAdmOpenAcadSemester.MinTrnsCgpa = _minTrnsCgpa;
			newAdmOpenAcadSemester.Notes = _notes;
			newAdmOpenAcadSemester.SeUserId = _seUserId;
			newAdmOpenAcadSemester.LastDate = _lastDate;
			return newAdmOpenAcadSemester;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AdmOpenAcadSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal AdmOpenAcadSemesterId
		{
			get
			{
				return this.entityData.AdmOpenAcadSemesterId; 
			}
			
			set
			{
				if (this.entityData.AdmOpenAcadSemesterId == value)
					return;
					
				OnColumnChanging(AdmOpenAcadSemesterColumn.AdmOpenAcadSemesterId, this.entityData.AdmOpenAcadSemesterId);
				this.entityData.AdmOpenAcadSemesterId = value;
				this.EntityId.AdmOpenAcadSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmOpenAcadSemesterColumn.AdmOpenAcadSemesterId, this.entityData.AdmOpenAcadSemesterId);
				OnPropertyChanged("AdmOpenAcadSemesterId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ADM_OPEN_ACAD_SEMESTER_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ADM_OPEN_ACAD_SEMESTER_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalAdmOpenAcadSemesterId
		{
			get { return this.entityData.OriginalAdmOpenAcadSemesterId; }
			set { this.entityData.OriginalAdmOpenAcadSemesterId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(AdmOpenAcadSemesterColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmOpenAcadSemesterColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(AdmOpenAcadSemesterColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmOpenAcadSemesterColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FromDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime FromDate
		{
			get
			{
				return this.entityData.FromDate; 
			}
			
			set
			{
				if (this.entityData.FromDate == value)
					return;
					
				OnColumnChanging(AdmOpenAcadSemesterColumn.FromDate, this.entityData.FromDate);
				this.entityData.FromDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmOpenAcadSemesterColumn.FromDate, this.entityData.FromDate);
				OnPropertyChanged("FromDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ToDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ToDate
		{
			get
			{
				return this.entityData.ToDate; 
			}
			
			set
			{
				if (this.entityData.ToDate == value)
					return;
					
				OnColumnChanging(AdmOpenAcadSemesterColumn.ToDate, this.entityData.ToDate);
				this.entityData.ToDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmOpenAcadSemesterColumn.ToDate, this.entityData.ToDate);
				OnPropertyChanged("ToDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsCurrent property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsCurrent
		{
			get
			{
				return this.entityData.IsCurrent; 
			}
			
			set
			{
				if (this.entityData.IsCurrent == value)
					return;
					
				OnColumnChanging(AdmOpenAcadSemesterColumn.IsCurrent, this.entityData.IsCurrent);
				this.entityData.IsCurrent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmOpenAcadSemesterColumn.IsCurrent, this.entityData.IsCurrent);
				OnPropertyChanged("IsCurrent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsClosed property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsClosed
		{
			get
			{
				return this.entityData.IsClosed; 
			}
			
			set
			{
				if (this.entityData.IsClosed == value)
					return;
					
				OnColumnChanging(AdmOpenAcadSemesterColumn.IsClosed, this.entityData.IsClosed);
				this.entityData.IsClosed = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmOpenAcadSemesterColumn.IsClosed, this.entityData.IsClosed);
				OnPropertyChanged("IsClosed");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CloseWeb property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal CloseWeb
		{
			get
			{
				return this.entityData.CloseWeb; 
			}
			
			set
			{
				if (this.entityData.CloseWeb == value)
					return;
					
				OnColumnChanging(AdmOpenAcadSemesterColumn.CloseWeb, this.entityData.CloseWeb);
				this.entityData.CloseWeb = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmOpenAcadSemesterColumn.CloseWeb, this.entityData.CloseWeb);
				OnPropertyChanged("CloseWeb");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RestrictUpdate property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal RestrictUpdate
		{
			get
			{
				return this.entityData.RestrictUpdate; 
			}
			
			set
			{
				if (this.entityData.RestrictUpdate == value)
					return;
					
				OnColumnChanging(AdmOpenAcadSemesterColumn.RestrictUpdate, this.entityData.RestrictUpdate);
				this.entityData.RestrictUpdate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmOpenAcadSemesterColumn.RestrictUpdate, this.entityData.RestrictUpdate);
				OnPropertyChanged("RestrictUpdate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ComptitiveRateFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ComptitiveRateFlg
		{
			get
			{
				return this.entityData.ComptitiveRateFlg; 
			}
			
			set
			{
				if (this.entityData.ComptitiveRateFlg == value)
					return;
					
				OnColumnChanging(AdmOpenAcadSemesterColumn.ComptitiveRateFlg, this.entityData.ComptitiveRateFlg);
				this.entityData.ComptitiveRateFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmOpenAcadSemesterColumn.ComptitiveRateFlg, this.entityData.ComptitiveRateFlg);
				OnPropertyChanged("ComptitiveRateFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmissionValidationFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AdmissionValidationFlg
		{
			get
			{
				return this.entityData.AdmissionValidationFlg; 
			}
			
			set
			{
				if (this.entityData.AdmissionValidationFlg == value)
					return;
					
				OnColumnChanging(AdmOpenAcadSemesterColumn.AdmissionValidationFlg, this.entityData.AdmissionValidationFlg);
				this.entityData.AdmissionValidationFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmOpenAcadSemesterColumn.AdmissionValidationFlg, this.entityData.AdmissionValidationFlg);
				OnPropertyChanged("AdmissionValidationFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DistributionFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal DistributionFlg
		{
			get
			{
				return this.entityData.DistributionFlg; 
			}
			
			set
			{
				if (this.entityData.DistributionFlg == value)
					return;
					
				OnColumnChanging(AdmOpenAcadSemesterColumn.DistributionFlg, this.entityData.DistributionFlg);
				this.entityData.DistributionFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmOpenAcadSemesterColumn.DistributionFlg, this.entityData.DistributionFlg);
				OnPropertyChanged("DistributionFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EarlyFromDate property. 
		///		early Admission
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsEarlyFromDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"early Admission"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? EarlyFromDate
		{
			get
			{
				return this.entityData.EarlyFromDate; 
			}
			
			set
			{
				if (this.entityData.EarlyFromDate == value)
					return;
					
				OnColumnChanging(AdmOpenAcadSemesterColumn.EarlyFromDate, this.entityData.EarlyFromDate);
				this.entityData.EarlyFromDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmOpenAcadSemesterColumn.EarlyFromDate, this.entityData.EarlyFromDate);
				OnPropertyChanged("EarlyFromDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EarlyToDate property. 
		///		early Admission
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsEarlyToDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"early Admission"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? EarlyToDate
		{
			get
			{
				return this.entityData.EarlyToDate; 
			}
			
			set
			{
				if (this.entityData.EarlyToDate == value)
					return;
					
				OnColumnChanging(AdmOpenAcadSemesterColumn.EarlyToDate, this.entityData.EarlyToDate);
				this.entityData.EarlyToDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmOpenAcadSemesterColumn.EarlyToDate, this.entityData.EarlyToDate);
				OnPropertyChanged("EarlyToDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MinTrnsCgpa property. 
		///		"الحد الأدنى للمعدل المقبول للطلاب المحولين"
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMinTrnsCgpaNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"'الحد الأدنى للمعدل المقبول للطلاب المحولين'"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MinTrnsCgpa
		{
			get
			{
				return this.entityData.MinTrnsCgpa; 
			}
			
			set
			{
				if (this.entityData.MinTrnsCgpa == value)
					return;
					
				OnColumnChanging(AdmOpenAcadSemesterColumn.MinTrnsCgpa, this.entityData.MinTrnsCgpa);
				this.entityData.MinTrnsCgpa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmOpenAcadSemesterColumn.MinTrnsCgpa, this.entityData.MinTrnsCgpa);
				OnPropertyChanged("MinTrnsCgpa");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 300)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(AdmOpenAcadSemesterColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmOpenAcadSemesterColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(AdmOpenAcadSemesterColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmOpenAcadSemesterColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(AdmOpenAcadSemesterColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmOpenAcadSemesterColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of AdmRatingParametersMajors objects
		///	which are related to this object through the relation FK_ADM_RATING_PARAMETERS_MAJORS_ADM_OPEN_ACAD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmRatingParametersMajors> AdmRatingParametersMajorsCollection
		{
			get { return entityData.AdmRatingParametersMajorsCollection; }
			set { entityData.AdmRatingParametersMajorsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmAppFees objects
		///	which are related to this object through the relation FK_ADM_APP_FEES_ADM_OPEN_ACAD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppFees> AdmAppFeesCollection
		{
			get { return entityData.AdmAppFeesCollection; }
			set { entityData.AdmAppFeesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmTansikMajorsCodes objects
		///	which are related to this object through the relation FK_ADM_Tansik_Majors_Codes_ADM_OPEN_ACAD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmTansikMajorsCodes> AdmTansikMajorsCodesCollection
		{
			get { return entityData.AdmTansikMajorsCodesCollection; }
			set { entityData.AdmTansikMajorsCodesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmPlaceExamDatetime objects
		///	which are related to this object through the relation FK_ADM_PLACE_EXAM_DATETIME_ADM_OPEN_ACAD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmPlaceExamDatetime> AdmPlaceExamDatetimeCollection
		{
			get { return entityData.AdmPlaceExamDatetimeCollection; }
			set { entityData.AdmPlaceExamDatetimeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmAppRegHistory objects
		///	which are related to this object through the relation FK_ADM_APP_REG_HISTORY_ADM_OPEN_ACAD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppRegHistory> AdmAppRegHistoryCollection
		{
			get { return entityData.AdmAppRegHistoryCollection; }
			set { entityData.AdmAppRegHistoryCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmCompetitiveAvg objects
		///	which are related to this object through the relation FK_ADM_COMPETITIVE_AVG_ADM_OPEN_ACAD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmCompetitiveAvg> AdmCompetitiveAvgCollection
		{
			get { return entityData.AdmCompetitiveAvgCollection; }
			set { entityData.AdmCompetitiveAvgCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmRsrvdCode objects
		///	which are related to this object through the relation FK_ADM_RSRVD_CODE_ADM_OPEN_ACAD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmRsrvdCode> AdmRsrvdCodeCollection
		{
			get { return entityData.AdmRsrvdCodeCollection; }
			set { entityData.AdmRsrvdCodeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdSemesterAgenda objects
		///	which are related to this object through the relation FK_ED_SEMESTER_AGENDA_ADM_OPEN_ACAD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdSemesterAgenda> EdSemesterAgendaCollection
		{
			get { return entityData.EdSemesterAgendaCollection; }
			set { entityData.EdSemesterAgendaCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 300));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ADM_OPEN_ACAD_SEMESTER"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ADM_OPEN_ACAD_SEMESTER_ID", "ED_CODE_SEMESTER_ID", "ED_ACAD_YEAR_ID", "FROM_DATE", "TO_DATE", "IS_CURRENT", "IS_CLOSED", "CLOSE_WEB", "RESTRICT_UPDATE", "COMPTITIVE_RATE_FLG", "ADMISSION_VALIDATION_FLG", "DISTRIBUTION_FLG", "EARLY_FROM_DATE", "EARLY_TO_DATE", "MIN_TRNS_CGPA", "NOTES", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AdmOpenAcadSemesterEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AdmOpenAcadSemester) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AdmOpenAcadSemester>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AdmOpenAcadSemester);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AdmOpenAcadSemester Entity 
		///</summary>
		protected virtual AdmOpenAcadSemester Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AdmOpenAcadSemester copy = new AdmOpenAcadSemester();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AdmOpenAcadSemesterId = this.AdmOpenAcadSemesterId;
					copy.OriginalAdmOpenAcadSemesterId = this.OriginalAdmOpenAcadSemesterId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.FromDate = this.FromDate;
				copy.ToDate = this.ToDate;
				copy.IsCurrent = this.IsCurrent;
				copy.IsClosed = this.IsClosed;
				copy.CloseWeb = this.CloseWeb;
				copy.RestrictUpdate = this.RestrictUpdate;
				copy.ComptitiveRateFlg = this.ComptitiveRateFlg;
				copy.AdmissionValidationFlg = this.AdmissionValidationFlg;
				copy.DistributionFlg = this.DistributionFlg;
				copy.EarlyFromDate = this.EarlyFromDate;
				copy.EarlyToDate = this.EarlyToDate;
				copy.MinTrnsCgpa = this.MinTrnsCgpa;
				copy.Notes = this.Notes;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
		
			//deep copy nested objects
			copy.AdmRatingParametersMajorsCollection = (TList<AdmRatingParametersMajors>) MakeCopyOf(this.AdmRatingParametersMajorsCollection, existingCopies); 
			copy.AdmAppFeesCollection = (TList<AdmAppFees>) MakeCopyOf(this.AdmAppFeesCollection, existingCopies); 
			copy.AdmTansikMajorsCodesCollection = (TList<AdmTansikMajorsCodes>) MakeCopyOf(this.AdmTansikMajorsCodesCollection, existingCopies); 
			copy.AdmPlaceExamDatetimeCollection = (TList<AdmPlaceExamDatetime>) MakeCopyOf(this.AdmPlaceExamDatetimeCollection, existingCopies); 
			copy.AdmAppRegHistoryCollection = (TList<AdmAppRegHistory>) MakeCopyOf(this.AdmAppRegHistoryCollection, existingCopies); 
			copy.AdmCompetitiveAvgCollection = (TList<AdmCompetitiveAvg>) MakeCopyOf(this.AdmCompetitiveAvgCollection, existingCopies); 
			copy.AdmRsrvdCodeCollection = (TList<AdmRsrvdCode>) MakeCopyOf(this.AdmRsrvdCodeCollection, existingCopies); 
			copy.EdSemesterAgendaCollection = (TList<EdSemesterAgenda>) MakeCopyOf(this.EdSemesterAgendaCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AdmOpenAcadSemester Entity 
		///</summary>
		public virtual AdmOpenAcadSemester Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AdmOpenAcadSemester Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AdmOpenAcadSemester DeepCopy()
		{
			return EntityHelper.Clone<AdmOpenAcadSemester>(this as AdmOpenAcadSemester);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AdmOpenAcadSemesterEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AdmOpenAcadSemesterEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AdmOpenAcadSemesterEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AdmOpenAcadSemesterColumn column)
		{
			switch(column)
			{
					case AdmOpenAcadSemesterColumn.AdmOpenAcadSemesterId:
					return entityData.AdmOpenAcadSemesterId != _originalData.AdmOpenAcadSemesterId;
					case AdmOpenAcadSemesterColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case AdmOpenAcadSemesterColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case AdmOpenAcadSemesterColumn.FromDate:
					return entityData.FromDate != _originalData.FromDate;
					case AdmOpenAcadSemesterColumn.ToDate:
					return entityData.ToDate != _originalData.ToDate;
					case AdmOpenAcadSemesterColumn.IsCurrent:
					return entityData.IsCurrent != _originalData.IsCurrent;
					case AdmOpenAcadSemesterColumn.IsClosed:
					return entityData.IsClosed != _originalData.IsClosed;
					case AdmOpenAcadSemesterColumn.CloseWeb:
					return entityData.CloseWeb != _originalData.CloseWeb;
					case AdmOpenAcadSemesterColumn.RestrictUpdate:
					return entityData.RestrictUpdate != _originalData.RestrictUpdate;
					case AdmOpenAcadSemesterColumn.ComptitiveRateFlg:
					return entityData.ComptitiveRateFlg != _originalData.ComptitiveRateFlg;
					case AdmOpenAcadSemesterColumn.AdmissionValidationFlg:
					return entityData.AdmissionValidationFlg != _originalData.AdmissionValidationFlg;
					case AdmOpenAcadSemesterColumn.DistributionFlg:
					return entityData.DistributionFlg != _originalData.DistributionFlg;
					case AdmOpenAcadSemesterColumn.EarlyFromDate:
					return entityData.EarlyFromDate != _originalData.EarlyFromDate;
					case AdmOpenAcadSemesterColumn.EarlyToDate:
					return entityData.EarlyToDate != _originalData.EarlyToDate;
					case AdmOpenAcadSemesterColumn.MinTrnsCgpa:
					return entityData.MinTrnsCgpa != _originalData.MinTrnsCgpa;
					case AdmOpenAcadSemesterColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case AdmOpenAcadSemesterColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case AdmOpenAcadSemesterColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AdmOpenAcadSemesterColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AdmOpenAcadSemesterId != _originalData.AdmOpenAcadSemesterId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.FromDate != _originalData.FromDate;
			result = result || entityData.ToDate != _originalData.ToDate;
			result = result || entityData.IsCurrent != _originalData.IsCurrent;
			result = result || entityData.IsClosed != _originalData.IsClosed;
			result = result || entityData.CloseWeb != _originalData.CloseWeb;
			result = result || entityData.RestrictUpdate != _originalData.RestrictUpdate;
			result = result || entityData.ComptitiveRateFlg != _originalData.ComptitiveRateFlg;
			result = result || entityData.AdmissionValidationFlg != _originalData.AdmissionValidationFlg;
			result = result || entityData.DistributionFlg != _originalData.DistributionFlg;
			result = result || entityData.EarlyFromDate != _originalData.EarlyFromDate;
			result = result || entityData.EarlyToDate != _originalData.EarlyToDate;
			result = result || entityData.MinTrnsCgpa != _originalData.MinTrnsCgpa;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a AdmOpenAcadSemester Entity with the original data.
		///</summary>
		public AdmOpenAcadSemester GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAdmOpenAcadSemester(
				_originalData.AdmOpenAcadSemesterId,
				_originalData.EdCodeSemesterId,
				_originalData.EdAcadYearId,
				_originalData.FromDate,
				_originalData.ToDate,
				_originalData.IsCurrent,
				_originalData.IsClosed,
				_originalData.CloseWeb,
				_originalData.RestrictUpdate,
				_originalData.ComptitiveRateFlg,
				_originalData.AdmissionValidationFlg,
				_originalData.DistributionFlg,
				_originalData.EarlyFromDate,
				_originalData.EarlyToDate,
				_originalData.MinTrnsCgpa,
				_originalData.Notes,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (AdmOpenAcadSemester)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AdmOpenAcadSemesterBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AdmOpenAcadSemesterBase)
				return ValueEquals(this, (AdmOpenAcadSemesterBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AdmOpenAcadSemesterBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AdmOpenAcadSemesterId.GetHashCode() ^ 
					this.EdCodeSemesterId.GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					this.FromDate.GetHashCode() ^ 
					this.ToDate.GetHashCode() ^ 
					this.IsCurrent.GetHashCode() ^ 
					this.IsClosed.GetHashCode() ^ 
					this.CloseWeb.GetHashCode() ^ 
					this.RestrictUpdate.GetHashCode() ^ 
					this.ComptitiveRateFlg.GetHashCode() ^ 
					this.AdmissionValidationFlg.GetHashCode() ^ 
					this.DistributionFlg.GetHashCode() ^ 
					((this.EarlyFromDate == null) ? string.Empty : this.EarlyFromDate.ToString()).GetHashCode() ^ 
					((this.EarlyToDate == null) ? string.Empty : this.EarlyToDate.ToString()).GetHashCode() ^ 
					((this.MinTrnsCgpa == null) ? string.Empty : this.MinTrnsCgpa.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AdmOpenAcadSemesterBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AdmOpenAcadSemesterBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AdmOpenAcadSemesterBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AdmOpenAcadSemesterBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AdmOpenAcadSemesterBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AdmOpenAcadSemesterBase Object1, AdmOpenAcadSemesterBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AdmOpenAcadSemesterId != Object2.AdmOpenAcadSemesterId)
				equal = false;
			if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
				equal = false;
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if (Object1.FromDate != Object2.FromDate)
				equal = false;
			if (Object1.ToDate != Object2.ToDate)
				equal = false;
			if (Object1.IsCurrent != Object2.IsCurrent)
				equal = false;
			if (Object1.IsClosed != Object2.IsClosed)
				equal = false;
			if (Object1.CloseWeb != Object2.CloseWeb)
				equal = false;
			if (Object1.RestrictUpdate != Object2.RestrictUpdate)
				equal = false;
			if (Object1.ComptitiveRateFlg != Object2.ComptitiveRateFlg)
				equal = false;
			if (Object1.AdmissionValidationFlg != Object2.AdmissionValidationFlg)
				equal = false;
			if (Object1.DistributionFlg != Object2.DistributionFlg)
				equal = false;
			if ( Object1.EarlyFromDate != null && Object2.EarlyFromDate != null )
			{
				if (Object1.EarlyFromDate != Object2.EarlyFromDate)
					equal = false;
			}
			else if (Object1.EarlyFromDate == null ^ Object2.EarlyFromDate == null )
			{
				equal = false;
			}
			if ( Object1.EarlyToDate != null && Object2.EarlyToDate != null )
			{
				if (Object1.EarlyToDate != Object2.EarlyToDate)
					equal = false;
			}
			else if (Object1.EarlyToDate == null ^ Object2.EarlyToDate == null )
			{
				equal = false;
			}
			if ( Object1.MinTrnsCgpa != null && Object2.MinTrnsCgpa != null )
			{
				if (Object1.MinTrnsCgpa != Object2.MinTrnsCgpa)
					equal = false;
			}
			else if (Object1.MinTrnsCgpa == null ^ Object2.MinTrnsCgpa == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AdmOpenAcadSemesterBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AdmOpenAcadSemesterComparer GetComparer()
        {
            return new AdmOpenAcadSemesterComparer();
        }
        */

        // Comparer delegates back to AdmOpenAcadSemester
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AdmOpenAcadSemester rhs, AdmOpenAcadSemesterColumn which)
        {
            switch (which)
            {
            	
            	
            	case AdmOpenAcadSemesterColumn.AdmOpenAcadSemesterId:
            		return this.AdmOpenAcadSemesterId.CompareTo(rhs.AdmOpenAcadSemesterId);
            		
            		                 
            	
            	
            	case AdmOpenAcadSemesterColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.CompareTo(rhs.EdCodeSemesterId);
            		
            		                 
            	
            	
            	case AdmOpenAcadSemesterColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case AdmOpenAcadSemesterColumn.FromDate:
            		return this.FromDate.CompareTo(rhs.FromDate);
            		
            		                 
            	
            	
            	case AdmOpenAcadSemesterColumn.ToDate:
            		return this.ToDate.CompareTo(rhs.ToDate);
            		
            		                 
            	
            	
            	case AdmOpenAcadSemesterColumn.IsCurrent:
            		return this.IsCurrent.CompareTo(rhs.IsCurrent);
            		
            		                 
            	
            	
            	case AdmOpenAcadSemesterColumn.IsClosed:
            		return this.IsClosed.CompareTo(rhs.IsClosed);
            		
            		                 
            	
            	
            	case AdmOpenAcadSemesterColumn.CloseWeb:
            		return this.CloseWeb.CompareTo(rhs.CloseWeb);
            		
            		                 
            	
            	
            	case AdmOpenAcadSemesterColumn.RestrictUpdate:
            		return this.RestrictUpdate.CompareTo(rhs.RestrictUpdate);
            		
            		                 
            	
            	
            	case AdmOpenAcadSemesterColumn.ComptitiveRateFlg:
            		return this.ComptitiveRateFlg.CompareTo(rhs.ComptitiveRateFlg);
            		
            		                 
            	
            	
            	case AdmOpenAcadSemesterColumn.AdmissionValidationFlg:
            		return this.AdmissionValidationFlg.CompareTo(rhs.AdmissionValidationFlg);
            		
            		                 
            	
            	
            	case AdmOpenAcadSemesterColumn.DistributionFlg:
            		return this.DistributionFlg.CompareTo(rhs.DistributionFlg);
            		
            		                 
            	
            	
            	case AdmOpenAcadSemesterColumn.EarlyFromDate:
            		return this.EarlyFromDate.Value.CompareTo(rhs.EarlyFromDate.Value);
            		
            		                 
            	
            	
            	case AdmOpenAcadSemesterColumn.EarlyToDate:
            		return this.EarlyToDate.Value.CompareTo(rhs.EarlyToDate.Value);
            		
            		                 
            	
            	
            	case AdmOpenAcadSemesterColumn.MinTrnsCgpa:
            		return this.MinTrnsCgpa.Value.CompareTo(rhs.MinTrnsCgpa.Value);
            		
            		                 
            	
            	
            	case AdmOpenAcadSemesterColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case AdmOpenAcadSemesterColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case AdmOpenAcadSemesterColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AdmOpenAcadSemesterKey> Members
		
		// member variable for the EntityId property
		private AdmOpenAcadSemesterKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AdmOpenAcadSemesterKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AdmOpenAcadSemesterKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AdmOpenAcadSemester")
					.Append("|").Append( this.AdmOpenAcadSemesterId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{19}{18}- AdmOpenAcadSemesterId: {0}{18}- EdCodeSemesterId: {1}{18}- EdAcadYearId: {2}{18}- FromDate: {3}{18}- ToDate: {4}{18}- IsCurrent: {5}{18}- IsClosed: {6}{18}- CloseWeb: {7}{18}- RestrictUpdate: {8}{18}- ComptitiveRateFlg: {9}{18}- AdmissionValidationFlg: {10}{18}- DistributionFlg: {11}{18}- EarlyFromDate: {12}{18}- EarlyToDate: {13}{18}- MinTrnsCgpa: {14}{18}- Notes: {15}{18}- SeUserId: {16}{18}- LastDate: {17}{18}{20}", 
				this.AdmOpenAcadSemesterId,
				this.EdCodeSemesterId,
				this.EdAcadYearId,
				this.FromDate,
				this.ToDate,
				this.IsCurrent,
				this.IsClosed,
				this.CloseWeb,
				this.RestrictUpdate,
				this.ComptitiveRateFlg,
				this.AdmissionValidationFlg,
				this.DistributionFlg,
				(this.EarlyFromDate == null) ? string.Empty : this.EarlyFromDate.ToString(),
				(this.EarlyToDate == null) ? string.Empty : this.EarlyToDate.ToString(),
				(this.MinTrnsCgpa == null) ? string.Empty : this.MinTrnsCgpa.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ADM_OPEN_ACAD_SEMESTER' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AdmOpenAcadSemesterEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ADM_OPEN_ACAD_SEMESTER_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ADM_OPEN_ACAD_SEMESTER"</remarks>
		public System.Decimal AdmOpenAcadSemesterId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalAdmOpenAcadSemesterId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : 
		/// </summary>
		public System.Decimal		  EdCodeSemesterId = 0.0m;
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// FROM_DATE : 
		/// </summary>
		public System.DateTime		  FromDate = DateTime.MinValue;
		
		/// <summary>
		/// TO_DATE : 
		/// </summary>
		public System.DateTime		  ToDate = DateTime.MinValue;
		
		/// <summary>
		/// IS_CURRENT : 
		/// </summary>
		public System.Decimal		  IsCurrent = 0.0m;
		
		/// <summary>
		/// IS_CLOSED : 
		/// </summary>
		public System.Decimal		  IsClosed = 0.0m;
		
		/// <summary>
		/// CLOSE_WEB : 
		/// </summary>
		public System.Decimal		  CloseWeb = 0.0m;
		
		/// <summary>
		/// RESTRICT_UPDATE : 
		/// </summary>
		public System.Decimal		  RestrictUpdate = 0.0m;
		
		/// <summary>
		/// COMPTITIVE_RATE_FLG : 
		/// </summary>
		public System.Decimal		  ComptitiveRateFlg = 0.0m;
		
		/// <summary>
		/// ADMISSION_VALIDATION_FLG : 
		/// </summary>
		public System.Decimal		  AdmissionValidationFlg = 0.0m;
		
		/// <summary>
		/// DISTRIBUTION_FLG : 
		/// </summary>
		public System.Decimal		  DistributionFlg = 0.0m;
		
		/// <summary>
		/// EARLY_FROM_DATE : early Admission
		/// </summary>
		public System.DateTime?		  EarlyFromDate = null;
		
		/// <summary>
		/// EARLY_TO_DATE : early Admission
		/// </summary>
		public System.DateTime?		  EarlyToDate = null;
		
		/// <summary>
		/// MIN_TRNS_CGPA : "الحد الأدنى للمعدل المقبول للطلاب المحولين"
		/// </summary>
		public System.Decimal?		  MinTrnsCgpa = null;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region AdmRatingParametersMajorsCollection
		
		private TList<AdmRatingParametersMajors> _admRatingParametersMajorsAdmOpenAcadSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admRatingParametersMajorsAdmOpenAcadSemesterId
		/// </summary>
		
		public TList<AdmRatingParametersMajors> AdmRatingParametersMajorsCollection
		{
			get
			{
				if (_admRatingParametersMajorsAdmOpenAcadSemesterId == null)
				{
				_admRatingParametersMajorsAdmOpenAcadSemesterId = new TList<AdmRatingParametersMajors>();
				}
	
				return _admRatingParametersMajorsAdmOpenAcadSemesterId;
			}
			set { _admRatingParametersMajorsAdmOpenAcadSemesterId = value; }
		}
		
		#endregion

		#region AdmAppFeesCollection
		
		private TList<AdmAppFees> _admAppFeesAdmOpenAcadSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppFeesAdmOpenAcadSemesterId
		/// </summary>
		
		public TList<AdmAppFees> AdmAppFeesCollection
		{
			get
			{
				if (_admAppFeesAdmOpenAcadSemesterId == null)
				{
				_admAppFeesAdmOpenAcadSemesterId = new TList<AdmAppFees>();
				}
	
				return _admAppFeesAdmOpenAcadSemesterId;
			}
			set { _admAppFeesAdmOpenAcadSemesterId = value; }
		}
		
		#endregion

		#region AdmTansikMajorsCodesCollection
		
		private TList<AdmTansikMajorsCodes> _admTansikMajorsCodesAdmOpenAcadSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admTansikMajorsCodesAdmOpenAcadSemesterId
		/// </summary>
		
		public TList<AdmTansikMajorsCodes> AdmTansikMajorsCodesCollection
		{
			get
			{
				if (_admTansikMajorsCodesAdmOpenAcadSemesterId == null)
				{
				_admTansikMajorsCodesAdmOpenAcadSemesterId = new TList<AdmTansikMajorsCodes>();
				}
	
				return _admTansikMajorsCodesAdmOpenAcadSemesterId;
			}
			set { _admTansikMajorsCodesAdmOpenAcadSemesterId = value; }
		}
		
		#endregion

		#region AdmPlaceExamDatetimeCollection
		
		private TList<AdmPlaceExamDatetime> _admPlaceExamDatetimeAdmOpenAcadSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admPlaceExamDatetimeAdmOpenAcadSemesterId
		/// </summary>
		
		public TList<AdmPlaceExamDatetime> AdmPlaceExamDatetimeCollection
		{
			get
			{
				if (_admPlaceExamDatetimeAdmOpenAcadSemesterId == null)
				{
				_admPlaceExamDatetimeAdmOpenAcadSemesterId = new TList<AdmPlaceExamDatetime>();
				}
	
				return _admPlaceExamDatetimeAdmOpenAcadSemesterId;
			}
			set { _admPlaceExamDatetimeAdmOpenAcadSemesterId = value; }
		}
		
		#endregion

		#region AdmAppRegHistoryCollection
		
		private TList<AdmAppRegHistory> _admAppRegHistoryAdmOpenAcadSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppRegHistoryAdmOpenAcadSemesterId
		/// </summary>
		
		public TList<AdmAppRegHistory> AdmAppRegHistoryCollection
		{
			get
			{
				if (_admAppRegHistoryAdmOpenAcadSemesterId == null)
				{
				_admAppRegHistoryAdmOpenAcadSemesterId = new TList<AdmAppRegHistory>();
				}
	
				return _admAppRegHistoryAdmOpenAcadSemesterId;
			}
			set { _admAppRegHistoryAdmOpenAcadSemesterId = value; }
		}
		
		#endregion

		#region AdmCompetitiveAvgCollection
		
		private TList<AdmCompetitiveAvg> _admCompetitiveAvgAdmOpenAcadSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admCompetitiveAvgAdmOpenAcadSemesterId
		/// </summary>
		
		public TList<AdmCompetitiveAvg> AdmCompetitiveAvgCollection
		{
			get
			{
				if (_admCompetitiveAvgAdmOpenAcadSemesterId == null)
				{
				_admCompetitiveAvgAdmOpenAcadSemesterId = new TList<AdmCompetitiveAvg>();
				}
	
				return _admCompetitiveAvgAdmOpenAcadSemesterId;
			}
			set { _admCompetitiveAvgAdmOpenAcadSemesterId = value; }
		}
		
		#endregion

		#region AdmRsrvdCodeCollection
		
		private TList<AdmRsrvdCode> _admRsrvdCodeAdmOpenAcadSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admRsrvdCodeAdmOpenAcadSemesterId
		/// </summary>
		
		public TList<AdmRsrvdCode> AdmRsrvdCodeCollection
		{
			get
			{
				if (_admRsrvdCodeAdmOpenAcadSemesterId == null)
				{
				_admRsrvdCodeAdmOpenAcadSemesterId = new TList<AdmRsrvdCode>();
				}
	
				return _admRsrvdCodeAdmOpenAcadSemesterId;
			}
			set { _admRsrvdCodeAdmOpenAcadSemesterId = value; }
		}
		
		#endregion

		#region EdSemesterAgendaCollection
		
		private TList<EdSemesterAgenda> _edSemesterAgendaAdmOpenAcadSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edSemesterAgendaAdmOpenAcadSemesterId
		/// </summary>
		
		public TList<EdSemesterAgenda> EdSemesterAgendaCollection
		{
			get
			{
				if (_edSemesterAgendaAdmOpenAcadSemesterId == null)
				{
				_edSemesterAgendaAdmOpenAcadSemesterId = new TList<EdSemesterAgenda>();
				}
	
				return _edSemesterAgendaAdmOpenAcadSemesterId;
			}
			set { _edSemesterAgendaAdmOpenAcadSemesterId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AdmOpenAcadSemesterEntityData _tmp = new AdmOpenAcadSemesterEntityData();
						
			_tmp.AdmOpenAcadSemesterId = this.AdmOpenAcadSemesterId;
			_tmp.OriginalAdmOpenAcadSemesterId = this.OriginalAdmOpenAcadSemesterId;
			
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.FromDate = this.FromDate;
			_tmp.ToDate = this.ToDate;
			_tmp.IsCurrent = this.IsCurrent;
			_tmp.IsClosed = this.IsClosed;
			_tmp.CloseWeb = this.CloseWeb;
			_tmp.RestrictUpdate = this.RestrictUpdate;
			_tmp.ComptitiveRateFlg = this.ComptitiveRateFlg;
			_tmp.AdmissionValidationFlg = this.AdmissionValidationFlg;
			_tmp.DistributionFlg = this.DistributionFlg;
			_tmp.EarlyFromDate = this.EarlyFromDate;
			_tmp.EarlyToDate = this.EarlyToDate;
			_tmp.MinTrnsCgpa = this.MinTrnsCgpa;
			_tmp.Notes = this.Notes;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._admRatingParametersMajorsAdmOpenAcadSemesterId != null)
				_tmp.AdmRatingParametersMajorsCollection = (TList<AdmRatingParametersMajors>) MakeCopyOf(this.AdmRatingParametersMajorsCollection); 
			if (this._admAppFeesAdmOpenAcadSemesterId != null)
				_tmp.AdmAppFeesCollection = (TList<AdmAppFees>) MakeCopyOf(this.AdmAppFeesCollection); 
			if (this._admTansikMajorsCodesAdmOpenAcadSemesterId != null)
				_tmp.AdmTansikMajorsCodesCollection = (TList<AdmTansikMajorsCodes>) MakeCopyOf(this.AdmTansikMajorsCodesCollection); 
			if (this._admPlaceExamDatetimeAdmOpenAcadSemesterId != null)
				_tmp.AdmPlaceExamDatetimeCollection = (TList<AdmPlaceExamDatetime>) MakeCopyOf(this.AdmPlaceExamDatetimeCollection); 
			if (this._admAppRegHistoryAdmOpenAcadSemesterId != null)
				_tmp.AdmAppRegHistoryCollection = (TList<AdmAppRegHistory>) MakeCopyOf(this.AdmAppRegHistoryCollection); 
			if (this._admCompetitiveAvgAdmOpenAcadSemesterId != null)
				_tmp.AdmCompetitiveAvgCollection = (TList<AdmCompetitiveAvg>) MakeCopyOf(this.AdmCompetitiveAvgCollection); 
			if (this._admRsrvdCodeAdmOpenAcadSemesterId != null)
				_tmp.AdmRsrvdCodeCollection = (TList<AdmRsrvdCode>) MakeCopyOf(this.AdmRsrvdCodeCollection); 
			if (this._edSemesterAgendaAdmOpenAcadSemesterId != null)
				_tmp.EdSemesterAgendaCollection = (TList<EdSemesterAgenda>) MakeCopyOf(this.EdSemesterAgendaCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AdmOpenAcadSemesterEntityData _tmp = new AdmOpenAcadSemesterEntityData();
						
			_tmp.AdmOpenAcadSemesterId = this.AdmOpenAcadSemesterId;
			_tmp.OriginalAdmOpenAcadSemesterId = this.OriginalAdmOpenAcadSemesterId;
			
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.FromDate = this.FromDate;
			_tmp.ToDate = this.ToDate;
			_tmp.IsCurrent = this.IsCurrent;
			_tmp.IsClosed = this.IsClosed;
			_tmp.CloseWeb = this.CloseWeb;
			_tmp.RestrictUpdate = this.RestrictUpdate;
			_tmp.ComptitiveRateFlg = this.ComptitiveRateFlg;
			_tmp.AdmissionValidationFlg = this.AdmissionValidationFlg;
			_tmp.DistributionFlg = this.DistributionFlg;
			_tmp.EarlyFromDate = this.EarlyFromDate;
			_tmp.EarlyToDate = this.EarlyToDate;
			_tmp.MinTrnsCgpa = this.MinTrnsCgpa;
			_tmp.Notes = this.Notes;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.AdmRatingParametersMajorsCollection = (TList<AdmRatingParametersMajors>) MakeCopyOf(this.AdmRatingParametersMajorsCollection, existingCopies); 
			_tmp.AdmAppFeesCollection = (TList<AdmAppFees>) MakeCopyOf(this.AdmAppFeesCollection, existingCopies); 
			_tmp.AdmTansikMajorsCodesCollection = (TList<AdmTansikMajorsCodes>) MakeCopyOf(this.AdmTansikMajorsCodesCollection, existingCopies); 
			_tmp.AdmPlaceExamDatetimeCollection = (TList<AdmPlaceExamDatetime>) MakeCopyOf(this.AdmPlaceExamDatetimeCollection, existingCopies); 
			_tmp.AdmAppRegHistoryCollection = (TList<AdmAppRegHistory>) MakeCopyOf(this.AdmAppRegHistoryCollection, existingCopies); 
			_tmp.AdmCompetitiveAvgCollection = (TList<AdmCompetitiveAvg>) MakeCopyOf(this.AdmCompetitiveAvgCollection, existingCopies); 
			_tmp.AdmRsrvdCodeCollection = (TList<AdmRsrvdCode>) MakeCopyOf(this.AdmRsrvdCodeCollection, existingCopies); 
			_tmp.EdSemesterAgendaCollection = (TList<EdSemesterAgenda>) MakeCopyOf(this.EdSemesterAgendaCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmOpenAcadSemesterColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AdmOpenAcadSemesterColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmOpenAcadSemesterColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AdmOpenAcadSemesterColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmOpenAcadSemesterColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AdmOpenAcadSemesterColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AdmOpenAcadSemesterEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AdmOpenAcadSemesterEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmOpenAcadSemesterColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AdmOpenAcadSemesterColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AdmOpenAcadSemesterEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AdmOpenAcadSemesterEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AdmOpenAcadSemesterEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AdmOpenAcadSemester"/> object.
	/// </remarks>
	public class AdmOpenAcadSemesterEventArgs : System.EventArgs
	{
		private AdmOpenAcadSemesterColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AdmOpenAcadSemesterEventArgs class.
		///</summary>
		public AdmOpenAcadSemesterEventArgs(AdmOpenAcadSemesterColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AdmOpenAcadSemesterEventArgs class.
		///</summary>
		public AdmOpenAcadSemesterEventArgs(AdmOpenAcadSemesterColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AdmOpenAcadSemesterColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AdmOpenAcadSemesterColumn" />
		public AdmOpenAcadSemesterColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AdmOpenAcadSemester related events.
	///</summary>
	public delegate void AdmOpenAcadSemesterEventHandler(object sender, AdmOpenAcadSemesterEventArgs e);
	
	#region AdmOpenAcadSemesterComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AdmOpenAcadSemesterComparer : System.Collections.Generic.IComparer<AdmOpenAcadSemester>
	{
		AdmOpenAcadSemesterColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AdmOpenAcadSemesterComparer"/> class.
        /// </summary>
		public AdmOpenAcadSemesterComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AdmOpenAcadSemesterComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AdmOpenAcadSemesterComparer(AdmOpenAcadSemesterColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AdmOpenAcadSemester"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AdmOpenAcadSemester"/> to compare.</param>
        /// <param name="b">The second <c>AdmOpenAcadSemester</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AdmOpenAcadSemester a, AdmOpenAcadSemester b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AdmOpenAcadSemester entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AdmOpenAcadSemester a, AdmOpenAcadSemester b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AdmOpenAcadSemesterColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AdmOpenAcadSemesterKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AdmOpenAcadSemester"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AdmOpenAcadSemesterKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AdmOpenAcadSemesterKey class.
		/// </summary>
		public AdmOpenAcadSemesterKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmOpenAcadSemesterKey class.
		/// </summary>
		public AdmOpenAcadSemesterKey(AdmOpenAcadSemesterBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AdmOpenAcadSemesterId = entity.AdmOpenAcadSemesterId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmOpenAcadSemesterKey class.
		/// </summary>
		public AdmOpenAcadSemesterKey(System.Decimal _admOpenAcadSemesterId)
		{
			#region Init Properties

			this.AdmOpenAcadSemesterId = _admOpenAcadSemesterId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AdmOpenAcadSemesterBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AdmOpenAcadSemesterBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AdmOpenAcadSemesterId property
		private System.Decimal _admOpenAcadSemesterId;
		
		/// <summary>
		/// Gets or sets the AdmOpenAcadSemesterId property.
		/// </summary>
		public System.Decimal AdmOpenAcadSemesterId
		{
			get { return _admOpenAcadSemesterId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AdmOpenAcadSemesterId = value;
				
				_admOpenAcadSemesterId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AdmOpenAcadSemesterId = ( values["AdmOpenAcadSemesterId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["AdmOpenAcadSemesterId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AdmOpenAcadSemesterId", AdmOpenAcadSemesterId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AdmOpenAcadSemesterId: {0}{1}",
								AdmOpenAcadSemesterId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AdmOpenAcadSemesterColumn Enum
	
	/// <summary>
	/// Enumerate the AdmOpenAcadSemester columns.
	/// </summary>
	[Serializable]
	public enum AdmOpenAcadSemesterColumn : int
	{
		/// <summary>
		/// AdmOpenAcadSemesterId : 
		/// </summary>
		[EnumTextValue("ADM_OPEN_ACAD_SEMESTER_ID")]
		[ColumnEnum("ADM_OPEN_ACAD_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		AdmOpenAcadSemesterId = 1,
		/// <summary>
		/// EdCodeSemesterId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeSemesterId = 2,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 3,
		/// <summary>
		/// FromDate : 
		/// </summary>
		[EnumTextValue("FROM_DATE")]
		[ColumnEnum("FROM_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, false)]
		FromDate = 4,
		/// <summary>
		/// ToDate : 
		/// </summary>
		[EnumTextValue("TO_DATE")]
		[ColumnEnum("TO_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, false)]
		ToDate = 5,
		/// <summary>
		/// IsCurrent : 
		/// </summary>
		[EnumTextValue("IS_CURRENT")]
		[ColumnEnum("IS_CURRENT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsCurrent = 6,
		/// <summary>
		/// IsClosed : 
		/// </summary>
		[EnumTextValue("IS_CLOSED")]
		[ColumnEnum("IS_CLOSED", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsClosed = 7,
		/// <summary>
		/// CloseWeb : 
		/// </summary>
		[EnumTextValue("CLOSE_WEB")]
		[ColumnEnum("CLOSE_WEB", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		CloseWeb = 8,
		/// <summary>
		/// RestrictUpdate : 
		/// </summary>
		[EnumTextValue("RESTRICT_UPDATE")]
		[ColumnEnum("RESTRICT_UPDATE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		RestrictUpdate = 9,
		/// <summary>
		/// ComptitiveRateFlg : 
		/// </summary>
		[EnumTextValue("COMPTITIVE_RATE_FLG")]
		[ColumnEnum("COMPTITIVE_RATE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ComptitiveRateFlg = 10,
		/// <summary>
		/// AdmissionValidationFlg : 
		/// </summary>
		[EnumTextValue("ADMISSION_VALIDATION_FLG")]
		[ColumnEnum("ADMISSION_VALIDATION_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AdmissionValidationFlg = 11,
		/// <summary>
		/// DistributionFlg : 
		/// </summary>
		[EnumTextValue("DISTRIBUTION_FLG")]
		[ColumnEnum("DISTRIBUTION_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		DistributionFlg = 12,
		/// <summary>
		/// EarlyFromDate : early Admission
		/// </summary>
		[EnumTextValue("EARLY_FROM_DATE")]
		[ColumnEnum("EARLY_FROM_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		EarlyFromDate = 13,
		/// <summary>
		/// EarlyToDate : early Admission
		/// </summary>
		[EnumTextValue("EARLY_TO_DATE")]
		[ColumnEnum("EARLY_TO_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		EarlyToDate = 14,
		/// <summary>
		/// MinTrnsCgpa : "الحد الأدنى للمعدل المقبول للطلاب المحولين"
		/// </summary>
		[EnumTextValue("MIN_TRNS_CGPA")]
		[ColumnEnum("MIN_TRNS_CGPA", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MinTrnsCgpa = 15,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 300)]
		Notes = 16,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 17,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 18
	}//End enum

	#endregion AdmOpenAcadSemesterColumn Enum

} // end namespace
