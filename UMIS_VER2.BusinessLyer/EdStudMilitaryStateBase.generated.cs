
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdStudMilitaryState.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_STUD_MILITARY_STATE' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdStudMilitaryStateBase : EntityBase, IEdStudMilitaryState, IEntityId<EdStudMilitaryStateKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdStudMilitaryStateEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdStudMilitaryStateEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdStudMilitaryStateEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdStudMilitaryState> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudMilitaryStateEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudMilitaryStateEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdStudMilitaryStateBase"/> instance.
		///</summary>
		public EdStudMilitaryStateBase()
		{
			this.entityData = new EdStudMilitaryStateEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdStudMilitaryStateBase"/> instance.
		///</summary>
		///<param name="_edStudMilitaryStateId">بيانات دورة التربية العسكرية</param>
		///<param name="_edStudId">مسلسل الطالب</param>
		///<param name="_stateNotes">ملاحظات</param>
		///<param name="_gsCodeMilitaryStateId">موقف الطالب من التجنيد</param>
		///<param name="_stateDate">تاريخ التجنيد</param>
		///<param name="_expireDate">تاريخ انتهاء التجنيد</param>
		///<param name="_resolutionNumber"></param>
		///<param name="_isCurState">اخر دورة-حالة</param>
		///<param name="_resolutionStatement"></param>
		///<param name="_resolutionDate"></param>
		///<param name="_admAppRegHistoryId"></param>
		public EdStudMilitaryStateBase(System.Decimal _edStudMilitaryStateId, System.Decimal? _edStudId, 
			System.String _stateNotes, System.Decimal _gsCodeMilitaryStateId, System.DateTime? _stateDate, 
			System.DateTime? _expireDate, System.String _resolutionNumber, System.Decimal _isCurState, 
			System.String _resolutionStatement, System.DateTime? _resolutionDate, System.Decimal? _admAppRegHistoryId)
		{
			this.entityData = new EdStudMilitaryStateEntityData();
			this.backupData = null;

			this.EdStudMilitaryStateId = _edStudMilitaryStateId;
			this.EdStudId = _edStudId;
			this.StateNotes = _stateNotes;
			this.GsCodeMilitaryStateId = _gsCodeMilitaryStateId;
			this.StateDate = _stateDate;
			this.ExpireDate = _expireDate;
			this.ResolutionNumber = _resolutionNumber;
			this.IsCurState = _isCurState;
			this.ResolutionStatement = _resolutionStatement;
			this.ResolutionDate = _resolutionDate;
			this.AdmAppRegHistoryId = _admAppRegHistoryId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdStudMilitaryState"/> instance.
		///</summary>
		///<param name="_edStudMilitaryStateId">بيانات دورة التربية العسكرية</param>
		///<param name="_edStudId">مسلسل الطالب</param>
		///<param name="_stateNotes">ملاحظات</param>
		///<param name="_gsCodeMilitaryStateId">موقف الطالب من التجنيد</param>
		///<param name="_stateDate">تاريخ التجنيد</param>
		///<param name="_expireDate">تاريخ انتهاء التجنيد</param>
		///<param name="_resolutionNumber"></param>
		///<param name="_isCurState">اخر دورة-حالة</param>
		///<param name="_resolutionStatement"></param>
		///<param name="_resolutionDate"></param>
		///<param name="_admAppRegHistoryId"></param>
		public static EdStudMilitaryState CreateEdStudMilitaryState(System.Decimal _edStudMilitaryStateId, System.Decimal? _edStudId, 
			System.String _stateNotes, System.Decimal _gsCodeMilitaryStateId, System.DateTime? _stateDate, 
			System.DateTime? _expireDate, System.String _resolutionNumber, System.Decimal _isCurState, 
			System.String _resolutionStatement, System.DateTime? _resolutionDate, System.Decimal? _admAppRegHistoryId)
		{
			EdStudMilitaryState newEdStudMilitaryState = new EdStudMilitaryState();
			newEdStudMilitaryState.EdStudMilitaryStateId = _edStudMilitaryStateId;
			newEdStudMilitaryState.EdStudId = _edStudId;
			newEdStudMilitaryState.StateNotes = _stateNotes;
			newEdStudMilitaryState.GsCodeMilitaryStateId = _gsCodeMilitaryStateId;
			newEdStudMilitaryState.StateDate = _stateDate;
			newEdStudMilitaryState.ExpireDate = _expireDate;
			newEdStudMilitaryState.ResolutionNumber = _resolutionNumber;
			newEdStudMilitaryState.IsCurState = _isCurState;
			newEdStudMilitaryState.ResolutionStatement = _resolutionStatement;
			newEdStudMilitaryState.ResolutionDate = _resolutionDate;
			newEdStudMilitaryState.AdmAppRegHistoryId = _admAppRegHistoryId;
			return newEdStudMilitaryState;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdStudMilitaryStateId property. 
		///		بيانات دورة التربية العسكرية
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"بيانات دورة التربية العسكرية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdStudMilitaryStateId
		{
			get
			{
				return this.entityData.EdStudMilitaryStateId; 
			}
			
			set
			{
				if (this.entityData.EdStudMilitaryStateId == value)
					return;
					
				OnColumnChanging(EdStudMilitaryStateColumn.EdStudMilitaryStateId, this.entityData.EdStudMilitaryStateId);
				this.entityData.EdStudMilitaryStateId = value;
				this.EntityId.EdStudMilitaryStateId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudMilitaryStateColumn.EdStudMilitaryStateId, this.entityData.EdStudMilitaryStateId);
				OnPropertyChanged("EdStudMilitaryStateId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_STUD_MILITARY_STATE_ID property.
		///		بيانات دورة التربية العسكرية
		/// </summary>
		/// <remarks>This is the original value of the ED_STUD_MILITARY_STATE_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdStudMilitaryStateId
		{
			get { return this.entityData.OriginalEdStudMilitaryStateId; }
			set { this.entityData.OriginalEdStudMilitaryStateId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		مسلسل الطالب
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdStudIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مسلسل الطالب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(EdStudMilitaryStateColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudMilitaryStateColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StateNotes property. 
		///		ملاحظات
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"ملاحظات"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 400)]
		public virtual System.String StateNotes
		{
			get
			{
				return this.entityData.StateNotes; 
			}
			
			set
			{
				if (this.entityData.StateNotes == value)
					return;
					
				OnColumnChanging(EdStudMilitaryStateColumn.StateNotes, this.entityData.StateNotes);
				this.entityData.StateNotes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudMilitaryStateColumn.StateNotes, this.entityData.StateNotes);
				OnPropertyChanged("StateNotes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeMilitaryStateId property. 
		///		موقف الطالب من التجنيد
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"موقف الطالب من التجنيد"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsCodeMilitaryStateId
		{
			get
			{
				return this.entityData.GsCodeMilitaryStateId; 
			}
			
			set
			{
				if (this.entityData.GsCodeMilitaryStateId == value)
					return;
					
				OnColumnChanging(EdStudMilitaryStateColumn.GsCodeMilitaryStateId, this.entityData.GsCodeMilitaryStateId);
				this.entityData.GsCodeMilitaryStateId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudMilitaryStateColumn.GsCodeMilitaryStateId, this.entityData.GsCodeMilitaryStateId);
				OnPropertyChanged("GsCodeMilitaryStateId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StateDate property. 
		///		تاريخ التجنيد
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsStateDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ التجنيد"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? StateDate
		{
			get
			{
				return this.entityData.StateDate; 
			}
			
			set
			{
				if (this.entityData.StateDate == value)
					return;
					
				OnColumnChanging(EdStudMilitaryStateColumn.StateDate, this.entityData.StateDate);
				this.entityData.StateDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudMilitaryStateColumn.StateDate, this.entityData.StateDate);
				OnPropertyChanged("StateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExpireDate property. 
		///		تاريخ انتهاء التجنيد
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsExpireDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ انتهاء التجنيد"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ExpireDate
		{
			get
			{
				return this.entityData.ExpireDate; 
			}
			
			set
			{
				if (this.entityData.ExpireDate == value)
					return;
					
				OnColumnChanging(EdStudMilitaryStateColumn.ExpireDate, this.entityData.ExpireDate);
				this.entityData.ExpireDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudMilitaryStateColumn.ExpireDate, this.entityData.ExpireDate);
				OnPropertyChanged("ExpireDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResolutionNumber property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String ResolutionNumber
		{
			get
			{
				return this.entityData.ResolutionNumber; 
			}
			
			set
			{
				if (this.entityData.ResolutionNumber == value)
					return;
					
				OnColumnChanging(EdStudMilitaryStateColumn.ResolutionNumber, this.entityData.ResolutionNumber);
				this.entityData.ResolutionNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudMilitaryStateColumn.ResolutionNumber, this.entityData.ResolutionNumber);
				OnPropertyChanged("ResolutionNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsCurState property. 
		///		اخر دورة-حالة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"اخر دورة-حالة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsCurState
		{
			get
			{
				return this.entityData.IsCurState; 
			}
			
			set
			{
				if (this.entityData.IsCurState == value)
					return;
					
				OnColumnChanging(EdStudMilitaryStateColumn.IsCurState, this.entityData.IsCurState);
				this.entityData.IsCurState = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudMilitaryStateColumn.IsCurState, this.entityData.IsCurState);
				OnPropertyChanged("IsCurState");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResolutionStatement property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 400)]
		public virtual System.String ResolutionStatement
		{
			get
			{
				return this.entityData.ResolutionStatement; 
			}
			
			set
			{
				if (this.entityData.ResolutionStatement == value)
					return;
					
				OnColumnChanging(EdStudMilitaryStateColumn.ResolutionStatement, this.entityData.ResolutionStatement);
				this.entityData.ResolutionStatement = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudMilitaryStateColumn.ResolutionStatement, this.entityData.ResolutionStatement);
				OnPropertyChanged("ResolutionStatement");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResolutionDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsResolutionDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ResolutionDate
		{
			get
			{
				return this.entityData.ResolutionDate; 
			}
			
			set
			{
				if (this.entityData.ResolutionDate == value)
					return;
					
				OnColumnChanging(EdStudMilitaryStateColumn.ResolutionDate, this.entityData.ResolutionDate);
				this.entityData.ResolutionDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudMilitaryStateColumn.ResolutionDate, this.entityData.ResolutionDate);
				OnPropertyChanged("ResolutionDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmAppRegHistoryId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmAppRegHistoryIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmAppRegHistoryId
		{
			get
			{
				return this.entityData.AdmAppRegHistoryId; 
			}
			
			set
			{
				if (this.entityData.AdmAppRegHistoryId == value)
					return;
					
				OnColumnChanging(EdStudMilitaryStateColumn.AdmAppRegHistoryId, this.entityData.AdmAppRegHistoryId);
				this.entityData.AdmAppRegHistoryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudMilitaryStateColumn.AdmAppRegHistoryId, this.entityData.AdmAppRegHistoryId);
				OnPropertyChanged("AdmAppRegHistoryId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdmAppRegHistory"/>.
		/// </summary>
		/// <value>The source AdmAppRegHistory for AdmAppRegHistoryId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmAppRegHistory AdmAppRegHistoryIdSource
      	{
            get { return entityData.AdmAppRegHistoryIdSource; }
            set { entityData.AdmAppRegHistoryIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeMilitaryState"/>.
		/// </summary>
		/// <value>The source GsCodeMilitaryState for GsCodeMilitaryStateId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeMilitaryState GsCodeMilitaryStateIdSource
      	{
            get { return entityData.GsCodeMilitaryStateIdSource; }
            set { entityData.GsCodeMilitaryStateIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("StateNotes", "State Notes", 400));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ResolutionNumber", "Resolution Number", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ResolutionStatement", "Resolution Statement", 400));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_STUD_MILITARY_STATE"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_STUD_MILITARY_STATE_ID", "ED_STUD_ID", "STATE_NOTES", "GS_CODE_MILITARY_STATE_ID", "STATE_DATE", "EXPIRE_DATE", "RESOLUTION_NUMBER", "IS_CUR_STATE", "RESOLUTION_STATEMENT", "RESOLUTION_DATE", "ADM_APP_REG_HISTORY_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdStudMilitaryStateEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdStudMilitaryState) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdStudMilitaryState>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdStudMilitaryState);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdStudMilitaryState Entity 
		///</summary>
		protected virtual EdStudMilitaryState Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdStudMilitaryState copy = new EdStudMilitaryState();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdStudMilitaryStateId = this.EdStudMilitaryStateId;
					copy.OriginalEdStudMilitaryStateId = this.OriginalEdStudMilitaryStateId;
				copy.EdStudId = this.EdStudId;
				copy.StateNotes = this.StateNotes;
				copy.GsCodeMilitaryStateId = this.GsCodeMilitaryStateId;
				copy.StateDate = this.StateDate;
				copy.ExpireDate = this.ExpireDate;
				copy.ResolutionNumber = this.ResolutionNumber;
				copy.IsCurState = this.IsCurState;
				copy.ResolutionStatement = this.ResolutionStatement;
				copy.ResolutionDate = this.ResolutionDate;
				copy.AdmAppRegHistoryId = this.AdmAppRegHistoryId;
			
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.AdmAppRegHistoryIdSource != null && existingCopies.Contains(this.AdmAppRegHistoryIdSource))
				copy.AdmAppRegHistoryIdSource = existingCopies[this.AdmAppRegHistoryIdSource] as AdmAppRegHistory;
			else
				copy.AdmAppRegHistoryIdSource = MakeCopyOf(this.AdmAppRegHistoryIdSource, existingCopies) as AdmAppRegHistory;
			if (this.GsCodeMilitaryStateIdSource != null && existingCopies.Contains(this.GsCodeMilitaryStateIdSource))
				copy.GsCodeMilitaryStateIdSource = existingCopies[this.GsCodeMilitaryStateIdSource] as GsCodeMilitaryState;
			else
				copy.GsCodeMilitaryStateIdSource = MakeCopyOf(this.GsCodeMilitaryStateIdSource, existingCopies) as GsCodeMilitaryState;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdStudMilitaryState Entity 
		///</summary>
		public virtual EdStudMilitaryState Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdStudMilitaryState Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdStudMilitaryState DeepCopy()
		{
			return EntityHelper.Clone<EdStudMilitaryState>(this as EdStudMilitaryState);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdStudMilitaryStateEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdStudMilitaryStateEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdStudMilitaryStateEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdStudMilitaryStateColumn column)
		{
			switch(column)
			{
					case EdStudMilitaryStateColumn.EdStudMilitaryStateId:
					return entityData.EdStudMilitaryStateId != _originalData.EdStudMilitaryStateId;
					case EdStudMilitaryStateColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case EdStudMilitaryStateColumn.StateNotes:
					return entityData.StateNotes != _originalData.StateNotes;
					case EdStudMilitaryStateColumn.GsCodeMilitaryStateId:
					return entityData.GsCodeMilitaryStateId != _originalData.GsCodeMilitaryStateId;
					case EdStudMilitaryStateColumn.StateDate:
					return entityData.StateDate != _originalData.StateDate;
					case EdStudMilitaryStateColumn.ExpireDate:
					return entityData.ExpireDate != _originalData.ExpireDate;
					case EdStudMilitaryStateColumn.ResolutionNumber:
					return entityData.ResolutionNumber != _originalData.ResolutionNumber;
					case EdStudMilitaryStateColumn.IsCurState:
					return entityData.IsCurState != _originalData.IsCurState;
					case EdStudMilitaryStateColumn.ResolutionStatement:
					return entityData.ResolutionStatement != _originalData.ResolutionStatement;
					case EdStudMilitaryStateColumn.ResolutionDate:
					return entityData.ResolutionDate != _originalData.ResolutionDate;
					case EdStudMilitaryStateColumn.AdmAppRegHistoryId:
					return entityData.AdmAppRegHistoryId != _originalData.AdmAppRegHistoryId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdStudMilitaryStateColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdStudMilitaryStateId != _originalData.EdStudMilitaryStateId;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.StateNotes != _originalData.StateNotes;
			result = result || entityData.GsCodeMilitaryStateId != _originalData.GsCodeMilitaryStateId;
			result = result || entityData.StateDate != _originalData.StateDate;
			result = result || entityData.ExpireDate != _originalData.ExpireDate;
			result = result || entityData.ResolutionNumber != _originalData.ResolutionNumber;
			result = result || entityData.IsCurState != _originalData.IsCurState;
			result = result || entityData.ResolutionStatement != _originalData.ResolutionStatement;
			result = result || entityData.ResolutionDate != _originalData.ResolutionDate;
			result = result || entityData.AdmAppRegHistoryId != _originalData.AdmAppRegHistoryId;
			return result;
		}	
		
		///<summary>
		///  Returns a EdStudMilitaryState Entity with the original data.
		///</summary>
		public EdStudMilitaryState GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdStudMilitaryState(
				_originalData.EdStudMilitaryStateId,
				_originalData.EdStudId,
				_originalData.StateNotes,
				_originalData.GsCodeMilitaryStateId,
				_originalData.StateDate,
				_originalData.ExpireDate,
				_originalData.ResolutionNumber,
				_originalData.IsCurState,
				_originalData.ResolutionStatement,
				_originalData.ResolutionDate,
				_originalData.AdmAppRegHistoryId
				);
				
			return (EdStudMilitaryState)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdStudMilitaryStateBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdStudMilitaryStateBase)
				return ValueEquals(this, (EdStudMilitaryStateBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdStudMilitaryStateBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdStudMilitaryStateId.GetHashCode() ^ 
					((this.EdStudId == null) ? string.Empty : this.EdStudId.ToString()).GetHashCode() ^ 
					((this.StateNotes == null) ? string.Empty : this.StateNotes.ToString()).GetHashCode() ^ 
					this.GsCodeMilitaryStateId.GetHashCode() ^ 
					((this.StateDate == null) ? string.Empty : this.StateDate.ToString()).GetHashCode() ^ 
					((this.ExpireDate == null) ? string.Empty : this.ExpireDate.ToString()).GetHashCode() ^ 
					((this.ResolutionNumber == null) ? string.Empty : this.ResolutionNumber.ToString()).GetHashCode() ^ 
					this.IsCurState.GetHashCode() ^ 
					((this.ResolutionStatement == null) ? string.Empty : this.ResolutionStatement.ToString()).GetHashCode() ^ 
					((this.ResolutionDate == null) ? string.Empty : this.ResolutionDate.ToString()).GetHashCode() ^ 
					((this.AdmAppRegHistoryId == null) ? string.Empty : this.AdmAppRegHistoryId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdStudMilitaryStateBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdStudMilitaryStateBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdStudMilitaryStateBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdStudMilitaryStateBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdStudMilitaryStateBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdStudMilitaryStateBase Object1, EdStudMilitaryStateBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdStudMilitaryStateId != Object2.EdStudMilitaryStateId)
				equal = false;
			if ( Object1.EdStudId != null && Object2.EdStudId != null )
			{
				if (Object1.EdStudId != Object2.EdStudId)
					equal = false;
			}
			else if (Object1.EdStudId == null ^ Object2.EdStudId == null )
			{
				equal = false;
			}
			if ( Object1.StateNotes != null && Object2.StateNotes != null )
			{
				if (Object1.StateNotes != Object2.StateNotes)
					equal = false;
			}
			else if (Object1.StateNotes == null ^ Object2.StateNotes == null )
			{
				equal = false;
			}
			if (Object1.GsCodeMilitaryStateId != Object2.GsCodeMilitaryStateId)
				equal = false;
			if ( Object1.StateDate != null && Object2.StateDate != null )
			{
				if (Object1.StateDate != Object2.StateDate)
					equal = false;
			}
			else if (Object1.StateDate == null ^ Object2.StateDate == null )
			{
				equal = false;
			}
			if ( Object1.ExpireDate != null && Object2.ExpireDate != null )
			{
				if (Object1.ExpireDate != Object2.ExpireDate)
					equal = false;
			}
			else if (Object1.ExpireDate == null ^ Object2.ExpireDate == null )
			{
				equal = false;
			}
			if ( Object1.ResolutionNumber != null && Object2.ResolutionNumber != null )
			{
				if (Object1.ResolutionNumber != Object2.ResolutionNumber)
					equal = false;
			}
			else if (Object1.ResolutionNumber == null ^ Object2.ResolutionNumber == null )
			{
				equal = false;
			}
			if (Object1.IsCurState != Object2.IsCurState)
				equal = false;
			if ( Object1.ResolutionStatement != null && Object2.ResolutionStatement != null )
			{
				if (Object1.ResolutionStatement != Object2.ResolutionStatement)
					equal = false;
			}
			else if (Object1.ResolutionStatement == null ^ Object2.ResolutionStatement == null )
			{
				equal = false;
			}
			if ( Object1.ResolutionDate != null && Object2.ResolutionDate != null )
			{
				if (Object1.ResolutionDate != Object2.ResolutionDate)
					equal = false;
			}
			else if (Object1.ResolutionDate == null ^ Object2.ResolutionDate == null )
			{
				equal = false;
			}
			if ( Object1.AdmAppRegHistoryId != null && Object2.AdmAppRegHistoryId != null )
			{
				if (Object1.AdmAppRegHistoryId != Object2.AdmAppRegHistoryId)
					equal = false;
			}
			else if (Object1.AdmAppRegHistoryId == null ^ Object2.AdmAppRegHistoryId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdStudMilitaryStateBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdStudMilitaryStateComparer GetComparer()
        {
            return new EdStudMilitaryStateComparer();
        }
        */

        // Comparer delegates back to EdStudMilitaryState
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdStudMilitaryState rhs, EdStudMilitaryStateColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdStudMilitaryStateColumn.EdStudMilitaryStateId:
            		return this.EdStudMilitaryStateId.CompareTo(rhs.EdStudMilitaryStateId);
            		
            		                 
            	
            	
            	case EdStudMilitaryStateColumn.EdStudId:
            		return this.EdStudId.Value.CompareTo(rhs.EdStudId.Value);
            		
            		                 
            	
            	
            	case EdStudMilitaryStateColumn.StateNotes:
            		return this.StateNotes.CompareTo(rhs.StateNotes);
            		
            		                 
            	
            	
            	case EdStudMilitaryStateColumn.GsCodeMilitaryStateId:
            		return this.GsCodeMilitaryStateId.CompareTo(rhs.GsCodeMilitaryStateId);
            		
            		                 
            	
            	
            	case EdStudMilitaryStateColumn.StateDate:
            		return this.StateDate.Value.CompareTo(rhs.StateDate.Value);
            		
            		                 
            	
            	
            	case EdStudMilitaryStateColumn.ExpireDate:
            		return this.ExpireDate.Value.CompareTo(rhs.ExpireDate.Value);
            		
            		                 
            	
            	
            	case EdStudMilitaryStateColumn.ResolutionNumber:
            		return this.ResolutionNumber.CompareTo(rhs.ResolutionNumber);
            		
            		                 
            	
            	
            	case EdStudMilitaryStateColumn.IsCurState:
            		return this.IsCurState.CompareTo(rhs.IsCurState);
            		
            		                 
            	
            	
            	case EdStudMilitaryStateColumn.ResolutionStatement:
            		return this.ResolutionStatement.CompareTo(rhs.ResolutionStatement);
            		
            		                 
            	
            	
            	case EdStudMilitaryStateColumn.ResolutionDate:
            		return this.ResolutionDate.Value.CompareTo(rhs.ResolutionDate.Value);
            		
            		                 
            	
            	
            	case EdStudMilitaryStateColumn.AdmAppRegHistoryId:
            		return this.AdmAppRegHistoryId.Value.CompareTo(rhs.AdmAppRegHistoryId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdStudMilitaryStateKey> Members
		
		// member variable for the EntityId property
		private EdStudMilitaryStateKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdStudMilitaryStateKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdStudMilitaryStateKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdStudMilitaryState")
					.Append("|").Append( this.EdStudMilitaryStateId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- EdStudMilitaryStateId: {0}{11}- EdStudId: {1}{11}- StateNotes: {2}{11}- GsCodeMilitaryStateId: {3}{11}- StateDate: {4}{11}- ExpireDate: {5}{11}- ResolutionNumber: {6}{11}- IsCurState: {7}{11}- ResolutionStatement: {8}{11}- ResolutionDate: {9}{11}- AdmAppRegHistoryId: {10}{11}{13}", 
				this.EdStudMilitaryStateId,
				(this.EdStudId == null) ? string.Empty : this.EdStudId.ToString(),
				(this.StateNotes == null) ? string.Empty : this.StateNotes.ToString(),
				this.GsCodeMilitaryStateId,
				(this.StateDate == null) ? string.Empty : this.StateDate.ToString(),
				(this.ExpireDate == null) ? string.Empty : this.ExpireDate.ToString(),
				(this.ResolutionNumber == null) ? string.Empty : this.ResolutionNumber.ToString(),
				this.IsCurState,
				(this.ResolutionStatement == null) ? string.Empty : this.ResolutionStatement.ToString(),
				(this.ResolutionDate == null) ? string.Empty : this.ResolutionDate.ToString(),
				(this.AdmAppRegHistoryId == null) ? string.Empty : this.AdmAppRegHistoryId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_STUD_MILITARY_STATE' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdStudMilitaryStateEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_STUD_MILITARY_STATE_ID : بيانات دورة التربية العسكرية
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_STUD_MILITARY_STATE"</remarks>
		public System.Decimal EdStudMilitaryStateId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdStudMilitaryStateId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_STUD_ID : مسلسل الطالب
		/// </summary>
		public System.Decimal?		  EdStudId = null;
		
		/// <summary>
		/// STATE_NOTES : ملاحظات
		/// </summary>
		public System.String		  StateNotes = null;
		
		/// <summary>
		/// GS_CODE_MILITARY_STATE_ID : موقف الطالب من التجنيد
		/// </summary>
		public System.Decimal		  GsCodeMilitaryStateId = 0.0m;
		
		/// <summary>
		/// STATE_DATE : تاريخ التجنيد
		/// </summary>
		public System.DateTime?		  StateDate = null;
		
		/// <summary>
		/// EXPIRE_DATE : تاريخ انتهاء التجنيد
		/// </summary>
		public System.DateTime?		  ExpireDate = null;
		
		/// <summary>
		/// RESOLUTION_NUMBER : 
		/// </summary>
		public System.String		  ResolutionNumber = null;
		
		/// <summary>
		/// IS_CUR_STATE : اخر دورة-حالة
		/// </summary>
		public System.Decimal		  IsCurState = 0.0m;
		
		/// <summary>
		/// RESOLUTION_STATEMENT : 
		/// </summary>
		public System.String		  ResolutionStatement = null;
		
		/// <summary>
		/// RESOLUTION_DATE : 
		/// </summary>
		public System.DateTime?		  ResolutionDate = null;
		
		/// <summary>
		/// ADM_APP_REG_HISTORY_ID : 
		/// </summary>
		public System.Decimal?		  AdmAppRegHistoryId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		private AdmAppRegHistory _admAppRegHistoryIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmAppRegHistory"/>.
		/// </summary>
		/// <value>The source AdmAppRegHistory for AdmAppRegHistoryId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmAppRegHistory AdmAppRegHistoryIdSource
      	{
            get { return this._admAppRegHistoryIdSource; }
            set { this._admAppRegHistoryIdSource = value; }
      	}
		private GsCodeMilitaryState _gsCodeMilitaryStateIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeMilitaryState"/>.
		/// </summary>
		/// <value>The source GsCodeMilitaryState for GsCodeMilitaryStateId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeMilitaryState GsCodeMilitaryStateIdSource
      	{
            get { return this._gsCodeMilitaryStateIdSource; }
            set { this._gsCodeMilitaryStateIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdStudMilitaryStateEntityData _tmp = new EdStudMilitaryStateEntityData();
						
			_tmp.EdStudMilitaryStateId = this.EdStudMilitaryStateId;
			_tmp.OriginalEdStudMilitaryStateId = this.OriginalEdStudMilitaryStateId;
			
			_tmp.EdStudId = this.EdStudId;
			_tmp.StateNotes = this.StateNotes;
			_tmp.GsCodeMilitaryStateId = this.GsCodeMilitaryStateId;
			_tmp.StateDate = this.StateDate;
			_tmp.ExpireDate = this.ExpireDate;
			_tmp.ResolutionNumber = this.ResolutionNumber;
			_tmp.IsCurState = this.IsCurState;
			_tmp.ResolutionStatement = this.ResolutionStatement;
			_tmp.ResolutionDate = this.ResolutionDate;
			_tmp.AdmAppRegHistoryId = this.AdmAppRegHistoryId;
			
			#region Source Parent Composite Entities
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			if (this.AdmAppRegHistoryIdSource != null)
				_tmp.AdmAppRegHistoryIdSource = MakeCopyOf(this.AdmAppRegHistoryIdSource) as AdmAppRegHistory;
			if (this.GsCodeMilitaryStateIdSource != null)
				_tmp.GsCodeMilitaryStateIdSource = MakeCopyOf(this.GsCodeMilitaryStateIdSource) as GsCodeMilitaryState;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdStudMilitaryStateEntityData _tmp = new EdStudMilitaryStateEntityData();
						
			_tmp.EdStudMilitaryStateId = this.EdStudMilitaryStateId;
			_tmp.OriginalEdStudMilitaryStateId = this.OriginalEdStudMilitaryStateId;
			
			_tmp.EdStudId = this.EdStudId;
			_tmp.StateNotes = this.StateNotes;
			_tmp.GsCodeMilitaryStateId = this.GsCodeMilitaryStateId;
			_tmp.StateDate = this.StateDate;
			_tmp.ExpireDate = this.ExpireDate;
			_tmp.ResolutionNumber = this.ResolutionNumber;
			_tmp.IsCurState = this.IsCurState;
			_tmp.ResolutionStatement = this.ResolutionStatement;
			_tmp.ResolutionDate = this.ResolutionDate;
			_tmp.AdmAppRegHistoryId = this.AdmAppRegHistoryId;
			
			#region Source Parent Composite Entities
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.AdmAppRegHistoryIdSource != null && existingCopies.Contains(this.AdmAppRegHistoryIdSource))
				_tmp.AdmAppRegHistoryIdSource = existingCopies[this.AdmAppRegHistoryIdSource] as AdmAppRegHistory;
			else
				_tmp.AdmAppRegHistoryIdSource = MakeCopyOf(this.AdmAppRegHistoryIdSource, existingCopies) as AdmAppRegHistory;
			if (this.GsCodeMilitaryStateIdSource != null && existingCopies.Contains(this.GsCodeMilitaryStateIdSource))
				_tmp.GsCodeMilitaryStateIdSource = existingCopies[this.GsCodeMilitaryStateIdSource] as GsCodeMilitaryState;
			else
				_tmp.GsCodeMilitaryStateIdSource = MakeCopyOf(this.GsCodeMilitaryStateIdSource, existingCopies) as GsCodeMilitaryState;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudMilitaryStateColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdStudMilitaryStateColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudMilitaryStateColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdStudMilitaryStateColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudMilitaryStateColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdStudMilitaryStateColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdStudMilitaryStateEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdStudMilitaryStateEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudMilitaryStateColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdStudMilitaryStateColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdStudMilitaryStateEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdStudMilitaryStateEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdStudMilitaryStateEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdStudMilitaryState"/> object.
	/// </remarks>
	public class EdStudMilitaryStateEventArgs : System.EventArgs
	{
		private EdStudMilitaryStateColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdStudMilitaryStateEventArgs class.
		///</summary>
		public EdStudMilitaryStateEventArgs(EdStudMilitaryStateColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdStudMilitaryStateEventArgs class.
		///</summary>
		public EdStudMilitaryStateEventArgs(EdStudMilitaryStateColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdStudMilitaryStateColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdStudMilitaryStateColumn" />
		public EdStudMilitaryStateColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdStudMilitaryState related events.
	///</summary>
	public delegate void EdStudMilitaryStateEventHandler(object sender, EdStudMilitaryStateEventArgs e);
	
	#region EdStudMilitaryStateComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdStudMilitaryStateComparer : System.Collections.Generic.IComparer<EdStudMilitaryState>
	{
		EdStudMilitaryStateColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudMilitaryStateComparer"/> class.
        /// </summary>
		public EdStudMilitaryStateComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudMilitaryStateComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdStudMilitaryStateComparer(EdStudMilitaryStateColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdStudMilitaryState"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdStudMilitaryState"/> to compare.</param>
        /// <param name="b">The second <c>EdStudMilitaryState</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdStudMilitaryState a, EdStudMilitaryState b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdStudMilitaryState entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdStudMilitaryState a, EdStudMilitaryState b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdStudMilitaryStateColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdStudMilitaryStateKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdStudMilitaryState"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdStudMilitaryStateKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdStudMilitaryStateKey class.
		/// </summary>
		public EdStudMilitaryStateKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudMilitaryStateKey class.
		/// </summary>
		public EdStudMilitaryStateKey(EdStudMilitaryStateBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdStudMilitaryStateId = entity.EdStudMilitaryStateId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudMilitaryStateKey class.
		/// </summary>
		public EdStudMilitaryStateKey(System.Decimal _edStudMilitaryStateId)
		{
			#region Init Properties

			this.EdStudMilitaryStateId = _edStudMilitaryStateId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdStudMilitaryStateBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdStudMilitaryStateBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdStudMilitaryStateId property
		private System.Decimal _edStudMilitaryStateId;
		
		/// <summary>
		/// Gets or sets the EdStudMilitaryStateId property.
		/// </summary>
		public System.Decimal EdStudMilitaryStateId
		{
			get { return _edStudMilitaryStateId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdStudMilitaryStateId = value;
				
				_edStudMilitaryStateId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdStudMilitaryStateId = ( values["EdStudMilitaryStateId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdStudMilitaryStateId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdStudMilitaryStateId", EdStudMilitaryStateId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdStudMilitaryStateId: {0}{1}",
								EdStudMilitaryStateId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdStudMilitaryStateColumn Enum
	
	/// <summary>
	/// Enumerate the EdStudMilitaryState columns.
	/// </summary>
	[Serializable]
	public enum EdStudMilitaryStateColumn : int
	{
		/// <summary>
		/// EdStudMilitaryStateId : بيانات دورة التربية العسكرية
		/// </summary>
		[EnumTextValue("ED_STUD_MILITARY_STATE_ID")]
		[ColumnEnum("ED_STUD_MILITARY_STATE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdStudMilitaryStateId = 1,
		/// <summary>
		/// EdStudId : مسلسل الطالب
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdStudId = 2,
		/// <summary>
		/// StateNotes : ملاحظات
		/// </summary>
		[EnumTextValue("STATE_NOTES")]
		[ColumnEnum("STATE_NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 400)]
		StateNotes = 3,
		/// <summary>
		/// GsCodeMilitaryStateId : موقف الطالب من التجنيد
		/// </summary>
		[EnumTextValue("GS_CODE_MILITARY_STATE_ID")]
		[ColumnEnum("GS_CODE_MILITARY_STATE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsCodeMilitaryStateId = 4,
		/// <summary>
		/// StateDate : تاريخ التجنيد
		/// </summary>
		[EnumTextValue("STATE_DATE")]
		[ColumnEnum("STATE_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		StateDate = 5,
		/// <summary>
		/// ExpireDate : تاريخ انتهاء التجنيد
		/// </summary>
		[EnumTextValue("EXPIRE_DATE")]
		[ColumnEnum("EXPIRE_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ExpireDate = 6,
		/// <summary>
		/// ResolutionNumber : 
		/// </summary>
		[EnumTextValue("RESOLUTION_NUMBER")]
		[ColumnEnum("RESOLUTION_NUMBER", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		ResolutionNumber = 7,
		/// <summary>
		/// IsCurState : اخر دورة-حالة
		/// </summary>
		[EnumTextValue("IS_CUR_STATE")]
		[ColumnEnum("IS_CUR_STATE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsCurState = 8,
		/// <summary>
		/// ResolutionStatement : 
		/// </summary>
		[EnumTextValue("RESOLUTION_STATEMENT")]
		[ColumnEnum("RESOLUTION_STATEMENT", typeof(System.String), System.Data.DbType.String, false, false, true, 400)]
		ResolutionStatement = 9,
		/// <summary>
		/// ResolutionDate : 
		/// </summary>
		[EnumTextValue("RESOLUTION_DATE")]
		[ColumnEnum("RESOLUTION_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ResolutionDate = 10,
		/// <summary>
		/// AdmAppRegHistoryId : 
		/// </summary>
		[EnumTextValue("ADM_APP_REG_HISTORY_ID")]
		[ColumnEnum("ADM_APP_REG_HISTORY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmAppRegHistoryId = 11
	}//End enum

	#endregion EdStudMilitaryStateColumn Enum

} // end namespace
