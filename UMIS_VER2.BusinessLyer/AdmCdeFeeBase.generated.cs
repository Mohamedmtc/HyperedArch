
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AdmCdeFee.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ADM_CDE_FEE' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AdmCdeFeeBase : EntityBase, IAdmCdeFee, IEntityId<AdmCdeFeeKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AdmCdeFeeEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AdmCdeFeeEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AdmCdeFeeEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AdmCdeFee> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmCdeFeeEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmCdeFeeEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AdmCdeFeeBase"/> instance.
		///</summary>
		public AdmCdeFeeBase()
		{
			this.entityData = new AdmCdeFeeEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AdmCdeFeeBase"/> instance.
		///</summary>
		///<param name="_admCdeFeeId">لائحة بنود مصروفات القبول</param>
		///<param name="_entMainId"></param>
		///<param name="_descrAr">auto load from fee_code_item</param>
		///<param name="_descrEn">auto load from fee_code_item</param>
		///<param name="_amount"></param>
		///<param name="_nationalityFlg">FOREIGN_FLG
		/// 		/// 0 مواطن
		/// 		/// 2 وافد
		/// 		/// 3 الكل
		/// 		/// 
		/// 		/// 
		/// 		/// مواطن >> 0
		/// 		/// 
		/// 		/// خليجي >> 1
		/// 		/// 
		/// 		/// وافد>> 2
		/// 		/// 
		/// 		/// الكل >> 3</param>
		///<param name="_gsCodeCurrencyId"></param>
		///<param name="_autoloadFlg"></param>
		///<param name="_transAppFlg"></param>
		///<param name="_asCodeDegreeId"></param>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_delFlg"></param>
		///<param name="_admCdePlacementExamId">NU</param>
		///<param name="_refundFlg">لتمييز البنود القابلة  "للاستيرداد"</param>
		///<param name="_feeCodeItemId"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public AdmCdeFeeBase(System.Decimal _admCdeFeeId, System.Decimal _entMainId, System.String _descrAr, 
			System.String _descrEn, System.Decimal _amount, System.Decimal _nationalityFlg, System.Decimal _gsCodeCurrencyId, 
			System.Decimal _autoloadFlg, System.Decimal _transAppFlg, System.Decimal? _asCodeDegreeId, 
			System.Decimal? _asCodeDegreeClassId, System.Decimal? _delFlg, System.Decimal? _admCdePlacementExamId, 
			System.Boolean? _refundFlg, System.Decimal? _feeCodeItemId, System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			this.entityData = new AdmCdeFeeEntityData();
			this.backupData = null;

			this.AdmCdeFeeId = _admCdeFeeId;
			this.EntMainId = _entMainId;
			this.DescrAr = _descrAr;
			this.DescrEn = _descrEn;
			this.Amount = _amount;
			this.NationalityFlg = _nationalityFlg;
			this.GsCodeCurrencyId = _gsCodeCurrencyId;
			this.AutoloadFlg = _autoloadFlg;
			this.TransAppFlg = _transAppFlg;
			this.AsCodeDegreeId = _asCodeDegreeId;
			this.AsCodeDegreeClassId = _asCodeDegreeClassId;
			this.DelFlg = _delFlg;
			this.AdmCdePlacementExamId = _admCdePlacementExamId;
			this.RefundFlg = _refundFlg;
			this.FeeCodeItemId = _feeCodeItemId;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AdmCdeFee"/> instance.
		///</summary>
		///<param name="_admCdeFeeId">لائحة بنود مصروفات القبول</param>
		///<param name="_entMainId"></param>
		///<param name="_descrAr">auto load from fee_code_item</param>
		///<param name="_descrEn">auto load from fee_code_item</param>
		///<param name="_amount"></param>
		///<param name="_nationalityFlg">FOREIGN_FLG
		/// 		/// 0 مواطن
		/// 		/// 2 وافد
		/// 		/// 3 الكل
		/// 		/// 
		/// 		/// 
		/// 		/// مواطن >> 0
		/// 		/// 
		/// 		/// خليجي >> 1
		/// 		/// 
		/// 		/// وافد>> 2
		/// 		/// 
		/// 		/// الكل >> 3</param>
		///<param name="_gsCodeCurrencyId"></param>
		///<param name="_autoloadFlg"></param>
		///<param name="_transAppFlg"></param>
		///<param name="_asCodeDegreeId"></param>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_delFlg"></param>
		///<param name="_admCdePlacementExamId">NU</param>
		///<param name="_refundFlg">لتمييز البنود القابلة  "للاستيرداد"</param>
		///<param name="_feeCodeItemId"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static AdmCdeFee CreateAdmCdeFee(System.Decimal _admCdeFeeId, System.Decimal _entMainId, System.String _descrAr, 
			System.String _descrEn, System.Decimal _amount, System.Decimal _nationalityFlg, System.Decimal _gsCodeCurrencyId, 
			System.Decimal _autoloadFlg, System.Decimal _transAppFlg, System.Decimal? _asCodeDegreeId, 
			System.Decimal? _asCodeDegreeClassId, System.Decimal? _delFlg, System.Decimal? _admCdePlacementExamId, 
			System.Boolean? _refundFlg, System.Decimal? _feeCodeItemId, System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			AdmCdeFee newAdmCdeFee = new AdmCdeFee();
			newAdmCdeFee.AdmCdeFeeId = _admCdeFeeId;
			newAdmCdeFee.EntMainId = _entMainId;
			newAdmCdeFee.DescrAr = _descrAr;
			newAdmCdeFee.DescrEn = _descrEn;
			newAdmCdeFee.Amount = _amount;
			newAdmCdeFee.NationalityFlg = _nationalityFlg;
			newAdmCdeFee.GsCodeCurrencyId = _gsCodeCurrencyId;
			newAdmCdeFee.AutoloadFlg = _autoloadFlg;
			newAdmCdeFee.TransAppFlg = _transAppFlg;
			newAdmCdeFee.AsCodeDegreeId = _asCodeDegreeId;
			newAdmCdeFee.AsCodeDegreeClassId = _asCodeDegreeClassId;
			newAdmCdeFee.DelFlg = _delFlg;
			newAdmCdeFee.AdmCdePlacementExamId = _admCdePlacementExamId;
			newAdmCdeFee.RefundFlg = _refundFlg;
			newAdmCdeFee.FeeCodeItemId = _feeCodeItemId;
			newAdmCdeFee.SeUserId = _seUserId;
			newAdmCdeFee.LastDate = _lastDate;
			return newAdmCdeFee;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AdmCdeFeeId property. 
		///		لائحة بنود مصروفات القبول
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"لائحة بنود مصروفات القبول"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal AdmCdeFeeId
		{
			get
			{
				return this.entityData.AdmCdeFeeId; 
			}
			
			set
			{
				if (this.entityData.AdmCdeFeeId == value)
					return;
					
				OnColumnChanging(AdmCdeFeeColumn.AdmCdeFeeId, this.entityData.AdmCdeFeeId);
				this.entityData.AdmCdeFeeId = value;
				this.EntityId.AdmCdeFeeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeFeeColumn.AdmCdeFeeId, this.entityData.AdmCdeFeeId);
				OnPropertyChanged("AdmCdeFeeId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ADM_CDE_FEE_ID property.
		///		لائحة بنود مصروفات القبول
		/// </summary>
		/// <remarks>This is the original value of the ADM_CDE_FEE_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalAdmCdeFeeId
		{
			get { return this.entityData.OriginalAdmCdeFeeId; }
			set { this.entityData.OriginalAdmCdeFeeId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EntMainId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EntMainId
		{
			get
			{
				return this.entityData.EntMainId; 
			}
			
			set
			{
				if (this.entityData.EntMainId == value)
					return;
					
				OnColumnChanging(AdmCdeFeeColumn.EntMainId, this.entityData.EntMainId);
				this.entityData.EntMainId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeFeeColumn.EntMainId, this.entityData.EntMainId);
				OnPropertyChanged("EntMainId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescrAr property. 
		///		auto load from fee_code_item
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"auto load from fee_code_item"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String DescrAr
		{
			get
			{
				return this.entityData.DescrAr; 
			}
			
			set
			{
				if (this.entityData.DescrAr == value)
					return;
					
				OnColumnChanging(AdmCdeFeeColumn.DescrAr, this.entityData.DescrAr);
				this.entityData.DescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeFeeColumn.DescrAr, this.entityData.DescrAr);
				OnPropertyChanged("DescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescrEn property. 
		///		auto load from fee_code_item
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"auto load from fee_code_item"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String DescrEn
		{
			get
			{
				return this.entityData.DescrEn; 
			}
			
			set
			{
				if (this.entityData.DescrEn == value)
					return;
					
				OnColumnChanging(AdmCdeFeeColumn.DescrEn, this.entityData.DescrEn);
				this.entityData.DescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeFeeColumn.DescrEn, this.entityData.DescrEn);
				OnPropertyChanged("DescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Amount property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal Amount
		{
			get
			{
				return this.entityData.Amount; 
			}
			
			set
			{
				if (this.entityData.Amount == value)
					return;
					
				OnColumnChanging(AdmCdeFeeColumn.Amount, this.entityData.Amount);
				this.entityData.Amount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeFeeColumn.Amount, this.entityData.Amount);
				OnPropertyChanged("Amount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NationalityFlg property. 
		///		FOREIGN_FLG
		/// 		/// 0 مواطن
		/// 		/// 2 وافد
		/// 		/// 3 الكل
		/// 		/// 
		/// 		/// 
		/// 		/// مواطن >> 0
		/// 		/// 
		/// 		/// خليجي >> 1
		/// 		/// 
		/// 		/// وافد>> 2
		/// 		/// 
		/// 		/// الكل >> 3
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"FOREIGN_FLG 0 مواطن 2 وافد 3 الكل   مواطن >> 0  خليجي >> 1  وافد>> 2  الكل >> 3"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal NationalityFlg
		{
			get
			{
				return this.entityData.NationalityFlg; 
			}
			
			set
			{
				if (this.entityData.NationalityFlg == value)
					return;
					
				OnColumnChanging(AdmCdeFeeColumn.NationalityFlg, this.entityData.NationalityFlg);
				this.entityData.NationalityFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeFeeColumn.NationalityFlg, this.entityData.NationalityFlg);
				OnPropertyChanged("NationalityFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeCurrencyId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsCodeCurrencyId
		{
			get
			{
				return this.entityData.GsCodeCurrencyId; 
			}
			
			set
			{
				if (this.entityData.GsCodeCurrencyId == value)
					return;
					
				OnColumnChanging(AdmCdeFeeColumn.GsCodeCurrencyId, this.entityData.GsCodeCurrencyId);
				this.entityData.GsCodeCurrencyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeFeeColumn.GsCodeCurrencyId, this.entityData.GsCodeCurrencyId);
				OnPropertyChanged("GsCodeCurrencyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AutoloadFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AutoloadFlg
		{
			get
			{
				return this.entityData.AutoloadFlg; 
			}
			
			set
			{
				if (this.entityData.AutoloadFlg == value)
					return;
					
				OnColumnChanging(AdmCdeFeeColumn.AutoloadFlg, this.entityData.AutoloadFlg);
				this.entityData.AutoloadFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeFeeColumn.AutoloadFlg, this.entityData.AutoloadFlg);
				OnPropertyChanged("AutoloadFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransAppFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal TransAppFlg
		{
			get
			{
				return this.entityData.TransAppFlg; 
			}
			
			set
			{
				if (this.entityData.TransAppFlg == value)
					return;
					
				OnColumnChanging(AdmCdeFeeColumn.TransAppFlg, this.entityData.TransAppFlg);
				this.entityData.TransAppFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeFeeColumn.TransAppFlg, this.entityData.TransAppFlg);
				OnPropertyChanged("TransAppFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeId
		{
			get
			{
				return this.entityData.AsCodeDegreeId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeId == value)
					return;
					
				OnColumnChanging(AdmCdeFeeColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				this.entityData.AsCodeDegreeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeFeeColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				OnPropertyChanged("AsCodeDegreeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeClassId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeClassIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeClassId
		{
			get
			{
				return this.entityData.AsCodeDegreeClassId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeClassId == value)
					return;
					
				OnColumnChanging(AdmCdeFeeColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				this.entityData.AsCodeDegreeClassId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeFeeColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				OnPropertyChanged("AsCodeDegreeClassId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DelFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDelFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DelFlg
		{
			get
			{
				return this.entityData.DelFlg; 
			}
			
			set
			{
				if (this.entityData.DelFlg == value)
					return;
					
				OnColumnChanging(AdmCdeFeeColumn.DelFlg, this.entityData.DelFlg);
				this.entityData.DelFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeFeeColumn.DelFlg, this.entityData.DelFlg);
				OnPropertyChanged("DelFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmCdePlacementExamId property. 
		///		NU
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmCdePlacementExamIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"NU"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmCdePlacementExamId
		{
			get
			{
				return this.entityData.AdmCdePlacementExamId; 
			}
			
			set
			{
				if (this.entityData.AdmCdePlacementExamId == value)
					return;
					
				OnColumnChanging(AdmCdeFeeColumn.AdmCdePlacementExamId, this.entityData.AdmCdePlacementExamId);
				this.entityData.AdmCdePlacementExamId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeFeeColumn.AdmCdePlacementExamId, this.entityData.AdmCdePlacementExamId);
				OnPropertyChanged("AdmCdePlacementExamId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RefundFlg property. 
		///		لتمييز البنود القابلة  "للاستيرداد"
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsRefundFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"لتمييز البنود القابلة  'للاستيرداد'"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? RefundFlg
		{
			get
			{
				return this.entityData.RefundFlg; 
			}
			
			set
			{
				if (this.entityData.RefundFlg == value)
					return;
					
				OnColumnChanging(AdmCdeFeeColumn.RefundFlg, this.entityData.RefundFlg);
				this.entityData.RefundFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeFeeColumn.RefundFlg, this.entityData.RefundFlg);
				OnPropertyChanged("RefundFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeCodeItemId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeCodeItemIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeeCodeItemId
		{
			get
			{
				return this.entityData.FeeCodeItemId; 
			}
			
			set
			{
				if (this.entityData.FeeCodeItemId == value)
					return;
					
				OnColumnChanging(AdmCdeFeeColumn.FeeCodeItemId, this.entityData.FeeCodeItemId);
				this.entityData.FeeCodeItemId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeFeeColumn.FeeCodeItemId, this.entityData.FeeCodeItemId);
				OnPropertyChanged("FeeCodeItemId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(AdmCdeFeeColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeFeeColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(AdmCdeFeeColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeFeeColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdePlacementExam"/>.
		/// </summary>
		/// <value>The source AdmCdePlacementExam for AdmCdePlacementExamId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmCdePlacementExam AdmCdePlacementExamIdSource
      	{
            get { return entityData.AdmCdePlacementExamIdSource; }
            set { entityData.AdmCdePlacementExamIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return entityData.AsCodeDegreeIdSource; }
            set { entityData.AsCodeDegreeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return entityData.AsCodeDegreeClassIdSource; }
            set { entityData.AsCodeDegreeClassIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return entityData.EntMainIdSource; }
            set { entityData.EntMainIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeItem"/>.
		/// </summary>
		/// <value>The source FeeCodeItem for FeeCodeItemId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeCodeItem FeeCodeItemIdSource
      	{
            get { return entityData.FeeCodeItemIdSource; }
            set { entityData.FeeCodeItemIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCurrency"/>.
		/// </summary>
		/// <value>The source GsCodeCurrency for GsCodeCurrencyId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeCurrency GsCodeCurrencyIdSource
      	{
            get { return entityData.GsCodeCurrencyIdSource; }
            set { entityData.GsCodeCurrencyIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of AdmAppFees objects
		///	which are related to this object through the relation FK_ADM_APP_FEES_ADM_CDE_FEE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppFees> AdmAppFeesCollection
		{
			get { return entityData.AdmAppFeesCollection; }
			set { entityData.AdmAppFeesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeRefundCodeDtl objects
		///	which are related to this object through the relation FK_FEE_REFUND_CODE_DTL_ADM_CDE_FEE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeRefundCodeDtl> FeeRefundCodeDtlCollection
		{
			get { return entityData.FeeRefundCodeDtlCollection; }
			set { entityData.FeeRefundCodeDtlCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmCdeAppStatus objects
		///	which are related to this object through the relation FK_ADM_CDE_APP_STATUS_ADM_CDE_FEE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmCdeAppStatus> AdmCdeAppStatusCollection
		{
			get { return entityData.AdmCdeAppStatusCollection; }
			set { entityData.AdmCdeAppStatusCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmFeeQualCat objects
		///	which are related to this object through the relation FK_ADM_FEE_QUAL_CAT_ADM_CDE_FEE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmFeeQualCat> AdmFeeQualCatCollection
		{
			get { return entityData.AdmFeeQualCatCollection; }
			set { entityData.AdmFeeQualCatCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DescrAr", "Descr Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrAr", "Descr Ar", 150));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DescrEn", "Descr En"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrEn", "Descr En", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ADM_CDE_FEE"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ADM_CDE_FEE_ID", "ENT_MAIN_ID", "DESCR_AR", "DESCR_EN", "AMOUNT", "NATIONALITY_FLG", "GS_CODE_CURRENCY_ID", "AUTOLOAD_FLG", "TRANS_APP_FLG", "AS_CODE_DEGREE_ID", "AS_CODE_DEGREE_CLASS_ID", "DEL_FLG", "ADM_CDE_PLACEMENT_EXAM_ID", "REFUND_FLG", "FEE_CODE_ITEM_ID", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AdmCdeFeeEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AdmCdeFee) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AdmCdeFee>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AdmCdeFee);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AdmCdeFee Entity 
		///</summary>
		protected virtual AdmCdeFee Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AdmCdeFee copy = new AdmCdeFee();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AdmCdeFeeId = this.AdmCdeFeeId;
					copy.OriginalAdmCdeFeeId = this.OriginalAdmCdeFeeId;
				copy.EntMainId = this.EntMainId;
				copy.DescrAr = this.DescrAr;
				copy.DescrEn = this.DescrEn;
				copy.Amount = this.Amount;
				copy.NationalityFlg = this.NationalityFlg;
				copy.GsCodeCurrencyId = this.GsCodeCurrencyId;
				copy.AutoloadFlg = this.AutoloadFlg;
				copy.TransAppFlg = this.TransAppFlg;
				copy.AsCodeDegreeId = this.AsCodeDegreeId;
				copy.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
				copy.DelFlg = this.DelFlg;
				copy.AdmCdePlacementExamId = this.AdmCdePlacementExamId;
				copy.RefundFlg = this.RefundFlg;
				copy.FeeCodeItemId = this.FeeCodeItemId;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.AdmCdePlacementExamIdSource != null && existingCopies.Contains(this.AdmCdePlacementExamIdSource))
				copy.AdmCdePlacementExamIdSource = existingCopies[this.AdmCdePlacementExamIdSource] as AdmCdePlacementExam;
			else
				copy.AdmCdePlacementExamIdSource = MakeCopyOf(this.AdmCdePlacementExamIdSource, existingCopies) as AdmCdePlacementExam;
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				copy.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				copy.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				copy.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				copy.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				copy.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				copy.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.FeeCodeItemIdSource != null && existingCopies.Contains(this.FeeCodeItemIdSource))
				copy.FeeCodeItemIdSource = existingCopies[this.FeeCodeItemIdSource] as FeeCodeItem;
			else
				copy.FeeCodeItemIdSource = MakeCopyOf(this.FeeCodeItemIdSource, existingCopies) as FeeCodeItem;
			if (this.GsCodeCurrencyIdSource != null && existingCopies.Contains(this.GsCodeCurrencyIdSource))
				copy.GsCodeCurrencyIdSource = existingCopies[this.GsCodeCurrencyIdSource] as GsCodeCurrency;
			else
				copy.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource, existingCopies) as GsCodeCurrency;
		
			//deep copy nested objects
			copy.AdmAppFeesCollection = (TList<AdmAppFees>) MakeCopyOf(this.AdmAppFeesCollection, existingCopies); 
			copy.FeeRefundCodeDtlCollection = (TList<FeeRefundCodeDtl>) MakeCopyOf(this.FeeRefundCodeDtlCollection, existingCopies); 
			copy.AdmCdeAppStatusCollection = (TList<AdmCdeAppStatus>) MakeCopyOf(this.AdmCdeAppStatusCollection, existingCopies); 
			copy.AdmFeeQualCatCollection = (TList<AdmFeeQualCat>) MakeCopyOf(this.AdmFeeQualCatCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AdmCdeFee Entity 
		///</summary>
		public virtual AdmCdeFee Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AdmCdeFee Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AdmCdeFee DeepCopy()
		{
			return EntityHelper.Clone<AdmCdeFee>(this as AdmCdeFee);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AdmCdeFeeEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AdmCdeFeeEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AdmCdeFeeEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AdmCdeFeeColumn column)
		{
			switch(column)
			{
					case AdmCdeFeeColumn.AdmCdeFeeId:
					return entityData.AdmCdeFeeId != _originalData.AdmCdeFeeId;
					case AdmCdeFeeColumn.EntMainId:
					return entityData.EntMainId != _originalData.EntMainId;
					case AdmCdeFeeColumn.DescrAr:
					return entityData.DescrAr != _originalData.DescrAr;
					case AdmCdeFeeColumn.DescrEn:
					return entityData.DescrEn != _originalData.DescrEn;
					case AdmCdeFeeColumn.Amount:
					return entityData.Amount != _originalData.Amount;
					case AdmCdeFeeColumn.NationalityFlg:
					return entityData.NationalityFlg != _originalData.NationalityFlg;
					case AdmCdeFeeColumn.GsCodeCurrencyId:
					return entityData.GsCodeCurrencyId != _originalData.GsCodeCurrencyId;
					case AdmCdeFeeColumn.AutoloadFlg:
					return entityData.AutoloadFlg != _originalData.AutoloadFlg;
					case AdmCdeFeeColumn.TransAppFlg:
					return entityData.TransAppFlg != _originalData.TransAppFlg;
					case AdmCdeFeeColumn.AsCodeDegreeId:
					return entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
					case AdmCdeFeeColumn.AsCodeDegreeClassId:
					return entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
					case AdmCdeFeeColumn.DelFlg:
					return entityData.DelFlg != _originalData.DelFlg;
					case AdmCdeFeeColumn.AdmCdePlacementExamId:
					return entityData.AdmCdePlacementExamId != _originalData.AdmCdePlacementExamId;
					case AdmCdeFeeColumn.RefundFlg:
					return entityData.RefundFlg != _originalData.RefundFlg;
					case AdmCdeFeeColumn.FeeCodeItemId:
					return entityData.FeeCodeItemId != _originalData.FeeCodeItemId;
					case AdmCdeFeeColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case AdmCdeFeeColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AdmCdeFeeColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AdmCdeFeeId != _originalData.AdmCdeFeeId;
			result = result || entityData.EntMainId != _originalData.EntMainId;
			result = result || entityData.DescrAr != _originalData.DescrAr;
			result = result || entityData.DescrEn != _originalData.DescrEn;
			result = result || entityData.Amount != _originalData.Amount;
			result = result || entityData.NationalityFlg != _originalData.NationalityFlg;
			result = result || entityData.GsCodeCurrencyId != _originalData.GsCodeCurrencyId;
			result = result || entityData.AutoloadFlg != _originalData.AutoloadFlg;
			result = result || entityData.TransAppFlg != _originalData.TransAppFlg;
			result = result || entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
			result = result || entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
			result = result || entityData.DelFlg != _originalData.DelFlg;
			result = result || entityData.AdmCdePlacementExamId != _originalData.AdmCdePlacementExamId;
			result = result || entityData.RefundFlg != _originalData.RefundFlg;
			result = result || entityData.FeeCodeItemId != _originalData.FeeCodeItemId;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a AdmCdeFee Entity with the original data.
		///</summary>
		public AdmCdeFee GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAdmCdeFee(
				_originalData.AdmCdeFeeId,
				_originalData.EntMainId,
				_originalData.DescrAr,
				_originalData.DescrEn,
				_originalData.Amount,
				_originalData.NationalityFlg,
				_originalData.GsCodeCurrencyId,
				_originalData.AutoloadFlg,
				_originalData.TransAppFlg,
				_originalData.AsCodeDegreeId,
				_originalData.AsCodeDegreeClassId,
				_originalData.DelFlg,
				_originalData.AdmCdePlacementExamId,
				_originalData.RefundFlg,
				_originalData.FeeCodeItemId,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (AdmCdeFee)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AdmCdeFeeBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AdmCdeFeeBase)
				return ValueEquals(this, (AdmCdeFeeBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AdmCdeFeeBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AdmCdeFeeId.GetHashCode() ^ 
					this.EntMainId.GetHashCode() ^ 
					this.DescrAr.GetHashCode() ^ 
					this.DescrEn.GetHashCode() ^ 
					this.Amount.GetHashCode() ^ 
					this.NationalityFlg.GetHashCode() ^ 
					this.GsCodeCurrencyId.GetHashCode() ^ 
					this.AutoloadFlg.GetHashCode() ^ 
					this.TransAppFlg.GetHashCode() ^ 
					((this.AsCodeDegreeId == null) ? string.Empty : this.AsCodeDegreeId.ToString()).GetHashCode() ^ 
					((this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString()).GetHashCode() ^ 
					((this.DelFlg == null) ? string.Empty : this.DelFlg.ToString()).GetHashCode() ^ 
					((this.AdmCdePlacementExamId == null) ? string.Empty : this.AdmCdePlacementExamId.ToString()).GetHashCode() ^ 
					((this.RefundFlg == null) ? string.Empty : this.RefundFlg.ToString()).GetHashCode() ^ 
					((this.FeeCodeItemId == null) ? string.Empty : this.FeeCodeItemId.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AdmCdeFeeBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AdmCdeFeeBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AdmCdeFeeBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AdmCdeFeeBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AdmCdeFeeBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AdmCdeFeeBase Object1, AdmCdeFeeBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AdmCdeFeeId != Object2.AdmCdeFeeId)
				equal = false;
			if (Object1.EntMainId != Object2.EntMainId)
				equal = false;
			if (Object1.DescrAr != Object2.DescrAr)
				equal = false;
			if (Object1.DescrEn != Object2.DescrEn)
				equal = false;
			if (Object1.Amount != Object2.Amount)
				equal = false;
			if (Object1.NationalityFlg != Object2.NationalityFlg)
				equal = false;
			if (Object1.GsCodeCurrencyId != Object2.GsCodeCurrencyId)
				equal = false;
			if (Object1.AutoloadFlg != Object2.AutoloadFlg)
				equal = false;
			if (Object1.TransAppFlg != Object2.TransAppFlg)
				equal = false;
			if ( Object1.AsCodeDegreeId != null && Object2.AsCodeDegreeId != null )
			{
				if (Object1.AsCodeDegreeId != Object2.AsCodeDegreeId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeId == null ^ Object2.AsCodeDegreeId == null )
			{
				equal = false;
			}
			if ( Object1.AsCodeDegreeClassId != null && Object2.AsCodeDegreeClassId != null )
			{
				if (Object1.AsCodeDegreeClassId != Object2.AsCodeDegreeClassId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeClassId == null ^ Object2.AsCodeDegreeClassId == null )
			{
				equal = false;
			}
			if ( Object1.DelFlg != null && Object2.DelFlg != null )
			{
				if (Object1.DelFlg != Object2.DelFlg)
					equal = false;
			}
			else if (Object1.DelFlg == null ^ Object2.DelFlg == null )
			{
				equal = false;
			}
			if ( Object1.AdmCdePlacementExamId != null && Object2.AdmCdePlacementExamId != null )
			{
				if (Object1.AdmCdePlacementExamId != Object2.AdmCdePlacementExamId)
					equal = false;
			}
			else if (Object1.AdmCdePlacementExamId == null ^ Object2.AdmCdePlacementExamId == null )
			{
				equal = false;
			}
			if ( Object1.RefundFlg != null && Object2.RefundFlg != null )
			{
				if (Object1.RefundFlg != Object2.RefundFlg)
					equal = false;
			}
			else if (Object1.RefundFlg == null ^ Object2.RefundFlg == null )
			{
				equal = false;
			}
			if ( Object1.FeeCodeItemId != null && Object2.FeeCodeItemId != null )
			{
				if (Object1.FeeCodeItemId != Object2.FeeCodeItemId)
					equal = false;
			}
			else if (Object1.FeeCodeItemId == null ^ Object2.FeeCodeItemId == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AdmCdeFeeBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AdmCdeFeeComparer GetComparer()
        {
            return new AdmCdeFeeComparer();
        }
        */

        // Comparer delegates back to AdmCdeFee
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AdmCdeFee rhs, AdmCdeFeeColumn which)
        {
            switch (which)
            {
            	
            	
            	case AdmCdeFeeColumn.AdmCdeFeeId:
            		return this.AdmCdeFeeId.CompareTo(rhs.AdmCdeFeeId);
            		
            		                 
            	
            	
            	case AdmCdeFeeColumn.EntMainId:
            		return this.EntMainId.CompareTo(rhs.EntMainId);
            		
            		                 
            	
            	
            	case AdmCdeFeeColumn.DescrAr:
            		return this.DescrAr.CompareTo(rhs.DescrAr);
            		
            		                 
            	
            	
            	case AdmCdeFeeColumn.DescrEn:
            		return this.DescrEn.CompareTo(rhs.DescrEn);
            		
            		                 
            	
            	
            	case AdmCdeFeeColumn.Amount:
            		return this.Amount.CompareTo(rhs.Amount);
            		
            		                 
            	
            	
            	case AdmCdeFeeColumn.NationalityFlg:
            		return this.NationalityFlg.CompareTo(rhs.NationalityFlg);
            		
            		                 
            	
            	
            	case AdmCdeFeeColumn.GsCodeCurrencyId:
            		return this.GsCodeCurrencyId.CompareTo(rhs.GsCodeCurrencyId);
            		
            		                 
            	
            	
            	case AdmCdeFeeColumn.AutoloadFlg:
            		return this.AutoloadFlg.CompareTo(rhs.AutoloadFlg);
            		
            		                 
            	
            	
            	case AdmCdeFeeColumn.TransAppFlg:
            		return this.TransAppFlg.CompareTo(rhs.TransAppFlg);
            		
            		                 
            	
            	
            	case AdmCdeFeeColumn.AsCodeDegreeId:
            		return this.AsCodeDegreeId.Value.CompareTo(rhs.AsCodeDegreeId.Value);
            		
            		                 
            	
            	
            	case AdmCdeFeeColumn.AsCodeDegreeClassId:
            		return this.AsCodeDegreeClassId.Value.CompareTo(rhs.AsCodeDegreeClassId.Value);
            		
            		                 
            	
            	
            	case AdmCdeFeeColumn.DelFlg:
            		return this.DelFlg.Value.CompareTo(rhs.DelFlg.Value);
            		
            		                 
            	
            	
            	case AdmCdeFeeColumn.AdmCdePlacementExamId:
            		return this.AdmCdePlacementExamId.Value.CompareTo(rhs.AdmCdePlacementExamId.Value);
            		
            		                 
            	
            	
            	case AdmCdeFeeColumn.RefundFlg:
            		return this.RefundFlg.Value.CompareTo(rhs.RefundFlg.Value);
            		
            		                 
            	
            	
            	case AdmCdeFeeColumn.FeeCodeItemId:
            		return this.FeeCodeItemId.Value.CompareTo(rhs.FeeCodeItemId.Value);
            		
            		                 
            	
            	
            	case AdmCdeFeeColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case AdmCdeFeeColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AdmCdeFeeKey> Members
		
		// member variable for the EntityId property
		private AdmCdeFeeKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AdmCdeFeeKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AdmCdeFeeKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AdmCdeFee")
					.Append("|").Append( this.AdmCdeFeeId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{18}{17}- AdmCdeFeeId: {0}{17}- EntMainId: {1}{17}- DescrAr: {2}{17}- DescrEn: {3}{17}- Amount: {4}{17}- NationalityFlg: {5}{17}- GsCodeCurrencyId: {6}{17}- AutoloadFlg: {7}{17}- TransAppFlg: {8}{17}- AsCodeDegreeId: {9}{17}- AsCodeDegreeClassId: {10}{17}- DelFlg: {11}{17}- AdmCdePlacementExamId: {12}{17}- RefundFlg: {13}{17}- FeeCodeItemId: {14}{17}- SeUserId: {15}{17}- LastDate: {16}{17}{19}", 
				this.AdmCdeFeeId,
				this.EntMainId,
				this.DescrAr,
				this.DescrEn,
				this.Amount,
				this.NationalityFlg,
				this.GsCodeCurrencyId,
				this.AutoloadFlg,
				this.TransAppFlg,
				(this.AsCodeDegreeId == null) ? string.Empty : this.AsCodeDegreeId.ToString(),
				(this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString(),
				(this.DelFlg == null) ? string.Empty : this.DelFlg.ToString(),
				(this.AdmCdePlacementExamId == null) ? string.Empty : this.AdmCdePlacementExamId.ToString(),
				(this.RefundFlg == null) ? string.Empty : this.RefundFlg.ToString(),
				(this.FeeCodeItemId == null) ? string.Empty : this.FeeCodeItemId.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ADM_CDE_FEE' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AdmCdeFeeEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ADM_CDE_FEE_ID : لائحة بنود مصروفات القبول
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ADM_CDE_FEE"</remarks>
		public System.Decimal AdmCdeFeeId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalAdmCdeFeeId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ENT_MAIN_ID : 
		/// </summary>
		public System.Decimal		  EntMainId = 0.0m;
		
		/// <summary>
		/// DESCR_AR : auto load from fee_code_item
		/// </summary>
		public System.String		  DescrAr = string.Empty;
		
		/// <summary>
		/// DESCR_EN : auto load from fee_code_item
		/// </summary>
		public System.String		  DescrEn = string.Empty;
		
		/// <summary>
		/// AMOUNT : 
		/// </summary>
		public System.Decimal		  Amount = 0.0m;
		
		/// <summary>
		/// NATIONALITY_FLG : FOREIGN_FLG
		/// 		/// 0 مواطن
		/// 		/// 2 وافد
		/// 		/// 3 الكل
		/// 		/// 
		/// 		/// 
		/// 		/// مواطن >> 0
		/// 		/// 
		/// 		/// خليجي >> 1
		/// 		/// 
		/// 		/// وافد>> 2
		/// 		/// 
		/// 		/// الكل >> 3
		/// </summary>
		public System.Decimal		  NationalityFlg = 0.0m;
		
		/// <summary>
		/// GS_CODE_CURRENCY_ID : 
		/// </summary>
		public System.Decimal		  GsCodeCurrencyId = 0.0m;
		
		/// <summary>
		/// AUTOLOAD_FLG : 
		/// </summary>
		public System.Decimal		  AutoloadFlg = 0.0m;
		
		/// <summary>
		/// TRANS_APP_FLG : 
		/// </summary>
		public System.Decimal		  TransAppFlg = 0.0m;
		
		/// <summary>
		/// AS_CODE_DEGREE_ID : 
		/// </summary>
		public System.Decimal?		  AsCodeDegreeId = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_CLASS_ID : 
		/// </summary>
		public System.Decimal?		  AsCodeDegreeClassId = null;
		
		/// <summary>
		/// DEL_FLG : 
		/// </summary>
		public System.Decimal?		  DelFlg = null;
		
		/// <summary>
		/// ADM_CDE_PLACEMENT_EXAM_ID : NU
		/// </summary>
		public System.Decimal?		  AdmCdePlacementExamId = null;
		
		/// <summary>
		/// REFUND_FLG : لتمييز البنود القابلة  "للاستيرداد"
		/// </summary>
		public System.Boolean?		  RefundFlg = null;
		
		/// <summary>
		/// FEE_CODE_ITEM_ID : 
		/// </summary>
		public System.Decimal?		  FeeCodeItemId = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdmCdePlacementExam _admCdePlacementExamIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdePlacementExam"/>.
		/// </summary>
		/// <value>The source AdmCdePlacementExam for AdmCdePlacementExamId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmCdePlacementExam AdmCdePlacementExamIdSource
      	{
            get { return this._admCdePlacementExamIdSource; }
            set { this._admCdePlacementExamIdSource = value; }
      	}
		private AsCodeDegree _asCodeDegreeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return this._asCodeDegreeIdSource; }
            set { this._asCodeDegreeIdSource = value; }
      	}
		private AsCodeDegreeClass _asCodeDegreeClassIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return this._asCodeDegreeClassIdSource; }
            set { this._asCodeDegreeClassIdSource = value; }
      	}
		private EntityMain _entMainIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return this._entMainIdSource; }
            set { this._entMainIdSource = value; }
      	}
		private FeeCodeItem _feeCodeItemIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeItem"/>.
		/// </summary>
		/// <value>The source FeeCodeItem for FeeCodeItemId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeCodeItem FeeCodeItemIdSource
      	{
            get { return this._feeCodeItemIdSource; }
            set { this._feeCodeItemIdSource = value; }
      	}
		private GsCodeCurrency _gsCodeCurrencyIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCurrency"/>.
		/// </summary>
		/// <value>The source GsCodeCurrency for GsCodeCurrencyId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeCurrency GsCodeCurrencyIdSource
      	{
            get { return this._gsCodeCurrencyIdSource; }
            set { this._gsCodeCurrencyIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region AdmAppFeesCollection
		
		private TList<AdmAppFees> _admAppFeesAdmCdeFeeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppFeesAdmCdeFeeId
		/// </summary>
		
		public TList<AdmAppFees> AdmAppFeesCollection
		{
			get
			{
				if (_admAppFeesAdmCdeFeeId == null)
				{
				_admAppFeesAdmCdeFeeId = new TList<AdmAppFees>();
				}
	
				return _admAppFeesAdmCdeFeeId;
			}
			set { _admAppFeesAdmCdeFeeId = value; }
		}
		
		#endregion

		#region FeeRefundCodeDtlCollection
		
		private TList<FeeRefundCodeDtl> _feeRefundCodeDtlAdmCdeFeeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeRefundCodeDtlAdmCdeFeeId
		/// </summary>
		
		public TList<FeeRefundCodeDtl> FeeRefundCodeDtlCollection
		{
			get
			{
				if (_feeRefundCodeDtlAdmCdeFeeId == null)
				{
				_feeRefundCodeDtlAdmCdeFeeId = new TList<FeeRefundCodeDtl>();
				}
	
				return _feeRefundCodeDtlAdmCdeFeeId;
			}
			set { _feeRefundCodeDtlAdmCdeFeeId = value; }
		}
		
		#endregion

		#region AdmCdeAppStatusCollection
		
		private TList<AdmCdeAppStatus> _admCdeAppStatusAdmCdeFeeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admCdeAppStatusAdmCdeFeeId
		/// </summary>
		
		public TList<AdmCdeAppStatus> AdmCdeAppStatusCollection
		{
			get
			{
				if (_admCdeAppStatusAdmCdeFeeId == null)
				{
				_admCdeAppStatusAdmCdeFeeId = new TList<AdmCdeAppStatus>();
				}
	
				return _admCdeAppStatusAdmCdeFeeId;
			}
			set { _admCdeAppStatusAdmCdeFeeId = value; }
		}
		
		#endregion

		#region AdmFeeQualCatCollection
		
		private TList<AdmFeeQualCat> _admFeeQualCatAdmCdeFeeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admFeeQualCatAdmCdeFeeId
		/// </summary>
		
		public TList<AdmFeeQualCat> AdmFeeQualCatCollection
		{
			get
			{
				if (_admFeeQualCatAdmCdeFeeId == null)
				{
				_admFeeQualCatAdmCdeFeeId = new TList<AdmFeeQualCat>();
				}
	
				return _admFeeQualCatAdmCdeFeeId;
			}
			set { _admFeeQualCatAdmCdeFeeId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AdmCdeFeeEntityData _tmp = new AdmCdeFeeEntityData();
						
			_tmp.AdmCdeFeeId = this.AdmCdeFeeId;
			_tmp.OriginalAdmCdeFeeId = this.OriginalAdmCdeFeeId;
			
			_tmp.EntMainId = this.EntMainId;
			_tmp.DescrAr = this.DescrAr;
			_tmp.DescrEn = this.DescrEn;
			_tmp.Amount = this.Amount;
			_tmp.NationalityFlg = this.NationalityFlg;
			_tmp.GsCodeCurrencyId = this.GsCodeCurrencyId;
			_tmp.AutoloadFlg = this.AutoloadFlg;
			_tmp.TransAppFlg = this.TransAppFlg;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.DelFlg = this.DelFlg;
			_tmp.AdmCdePlacementExamId = this.AdmCdePlacementExamId;
			_tmp.RefundFlg = this.RefundFlg;
			_tmp.FeeCodeItemId = this.FeeCodeItemId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.AdmCdePlacementExamIdSource != null)
				_tmp.AdmCdePlacementExamIdSource = MakeCopyOf(this.AdmCdePlacementExamIdSource) as AdmCdePlacementExam;
			if (this.AsCodeDegreeIdSource != null)
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null)
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource) as AsCodeDegreeClass;
			if (this.EntMainIdSource != null)
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource) as EntityMain;
			if (this.FeeCodeItemIdSource != null)
				_tmp.FeeCodeItemIdSource = MakeCopyOf(this.FeeCodeItemIdSource) as FeeCodeItem;
			if (this.GsCodeCurrencyIdSource != null)
				_tmp.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource) as GsCodeCurrency;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._admAppFeesAdmCdeFeeId != null)
				_tmp.AdmAppFeesCollection = (TList<AdmAppFees>) MakeCopyOf(this.AdmAppFeesCollection); 
			if (this._feeRefundCodeDtlAdmCdeFeeId != null)
				_tmp.FeeRefundCodeDtlCollection = (TList<FeeRefundCodeDtl>) MakeCopyOf(this.FeeRefundCodeDtlCollection); 
			if (this._admCdeAppStatusAdmCdeFeeId != null)
				_tmp.AdmCdeAppStatusCollection = (TList<AdmCdeAppStatus>) MakeCopyOf(this.AdmCdeAppStatusCollection); 
			if (this._admFeeQualCatAdmCdeFeeId != null)
				_tmp.AdmFeeQualCatCollection = (TList<AdmFeeQualCat>) MakeCopyOf(this.AdmFeeQualCatCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AdmCdeFeeEntityData _tmp = new AdmCdeFeeEntityData();
						
			_tmp.AdmCdeFeeId = this.AdmCdeFeeId;
			_tmp.OriginalAdmCdeFeeId = this.OriginalAdmCdeFeeId;
			
			_tmp.EntMainId = this.EntMainId;
			_tmp.DescrAr = this.DescrAr;
			_tmp.DescrEn = this.DescrEn;
			_tmp.Amount = this.Amount;
			_tmp.NationalityFlg = this.NationalityFlg;
			_tmp.GsCodeCurrencyId = this.GsCodeCurrencyId;
			_tmp.AutoloadFlg = this.AutoloadFlg;
			_tmp.TransAppFlg = this.TransAppFlg;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.DelFlg = this.DelFlg;
			_tmp.AdmCdePlacementExamId = this.AdmCdePlacementExamId;
			_tmp.RefundFlg = this.RefundFlg;
			_tmp.FeeCodeItemId = this.FeeCodeItemId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.AdmCdePlacementExamIdSource != null && existingCopies.Contains(this.AdmCdePlacementExamIdSource))
				_tmp.AdmCdePlacementExamIdSource = existingCopies[this.AdmCdePlacementExamIdSource] as AdmCdePlacementExam;
			else
				_tmp.AdmCdePlacementExamIdSource = MakeCopyOf(this.AdmCdePlacementExamIdSource, existingCopies) as AdmCdePlacementExam;
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				_tmp.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				_tmp.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				_tmp.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.FeeCodeItemIdSource != null && existingCopies.Contains(this.FeeCodeItemIdSource))
				_tmp.FeeCodeItemIdSource = existingCopies[this.FeeCodeItemIdSource] as FeeCodeItem;
			else
				_tmp.FeeCodeItemIdSource = MakeCopyOf(this.FeeCodeItemIdSource, existingCopies) as FeeCodeItem;
			if (this.GsCodeCurrencyIdSource != null && existingCopies.Contains(this.GsCodeCurrencyIdSource))
				_tmp.GsCodeCurrencyIdSource = existingCopies[this.GsCodeCurrencyIdSource] as GsCodeCurrency;
			else
				_tmp.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource, existingCopies) as GsCodeCurrency;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.AdmAppFeesCollection = (TList<AdmAppFees>) MakeCopyOf(this.AdmAppFeesCollection, existingCopies); 
			_tmp.FeeRefundCodeDtlCollection = (TList<FeeRefundCodeDtl>) MakeCopyOf(this.FeeRefundCodeDtlCollection, existingCopies); 
			_tmp.AdmCdeAppStatusCollection = (TList<AdmCdeAppStatus>) MakeCopyOf(this.AdmCdeAppStatusCollection, existingCopies); 
			_tmp.AdmFeeQualCatCollection = (TList<AdmFeeQualCat>) MakeCopyOf(this.AdmFeeQualCatCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmCdeFeeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AdmCdeFeeColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmCdeFeeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AdmCdeFeeColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmCdeFeeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AdmCdeFeeColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AdmCdeFeeEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AdmCdeFeeEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmCdeFeeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AdmCdeFeeColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AdmCdeFeeEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AdmCdeFeeEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AdmCdeFeeEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AdmCdeFee"/> object.
	/// </remarks>
	public class AdmCdeFeeEventArgs : System.EventArgs
	{
		private AdmCdeFeeColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AdmCdeFeeEventArgs class.
		///</summary>
		public AdmCdeFeeEventArgs(AdmCdeFeeColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AdmCdeFeeEventArgs class.
		///</summary>
		public AdmCdeFeeEventArgs(AdmCdeFeeColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AdmCdeFeeColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AdmCdeFeeColumn" />
		public AdmCdeFeeColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AdmCdeFee related events.
	///</summary>
	public delegate void AdmCdeFeeEventHandler(object sender, AdmCdeFeeEventArgs e);
	
	#region AdmCdeFeeComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AdmCdeFeeComparer : System.Collections.Generic.IComparer<AdmCdeFee>
	{
		AdmCdeFeeColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AdmCdeFeeComparer"/> class.
        /// </summary>
		public AdmCdeFeeComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AdmCdeFeeComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AdmCdeFeeComparer(AdmCdeFeeColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AdmCdeFee"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AdmCdeFee"/> to compare.</param>
        /// <param name="b">The second <c>AdmCdeFee</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AdmCdeFee a, AdmCdeFee b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AdmCdeFee entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AdmCdeFee a, AdmCdeFee b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AdmCdeFeeColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AdmCdeFeeKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AdmCdeFee"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AdmCdeFeeKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AdmCdeFeeKey class.
		/// </summary>
		public AdmCdeFeeKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmCdeFeeKey class.
		/// </summary>
		public AdmCdeFeeKey(AdmCdeFeeBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AdmCdeFeeId = entity.AdmCdeFeeId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmCdeFeeKey class.
		/// </summary>
		public AdmCdeFeeKey(System.Decimal _admCdeFeeId)
		{
			#region Init Properties

			this.AdmCdeFeeId = _admCdeFeeId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AdmCdeFeeBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AdmCdeFeeBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AdmCdeFeeId property
		private System.Decimal _admCdeFeeId;
		
		/// <summary>
		/// Gets or sets the AdmCdeFeeId property.
		/// </summary>
		public System.Decimal AdmCdeFeeId
		{
			get { return _admCdeFeeId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AdmCdeFeeId = value;
				
				_admCdeFeeId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AdmCdeFeeId = ( values["AdmCdeFeeId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["AdmCdeFeeId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AdmCdeFeeId", AdmCdeFeeId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AdmCdeFeeId: {0}{1}",
								AdmCdeFeeId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AdmCdeFeeColumn Enum
	
	/// <summary>
	/// Enumerate the AdmCdeFee columns.
	/// </summary>
	[Serializable]
	public enum AdmCdeFeeColumn : int
	{
		/// <summary>
		/// AdmCdeFeeId : لائحة بنود مصروفات القبول
		/// </summary>
		[EnumTextValue("ADM_CDE_FEE_ID")]
		[ColumnEnum("ADM_CDE_FEE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		AdmCdeFeeId = 1,
		/// <summary>
		/// EntMainId : 
		/// </summary>
		[EnumTextValue("ENT_MAIN_ID")]
		[ColumnEnum("ENT_MAIN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EntMainId = 2,
		/// <summary>
		/// DescrAr : auto load from fee_code_item
		/// </summary>
		[EnumTextValue("DESCR_AR")]
		[ColumnEnum("DESCR_AR", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 150)]
		DescrAr = 3,
		/// <summary>
		/// DescrEn : auto load from fee_code_item
		/// </summary>
		[EnumTextValue("DESCR_EN")]
		[ColumnEnum("DESCR_EN", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 150)]
		DescrEn = 4,
		/// <summary>
		/// Amount : 
		/// </summary>
		[EnumTextValue("AMOUNT")]
		[ColumnEnum("AMOUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		Amount = 5,
		/// <summary>
		/// NationalityFlg : FOREIGN_FLG
		/// 		/// 0 مواطن
		/// 		/// 2 وافد
		/// 		/// 3 الكل
		/// 		/// 
		/// 		/// 
		/// 		/// مواطن >> 0
		/// 		/// 
		/// 		/// خليجي >> 1
		/// 		/// 
		/// 		/// وافد>> 2
		/// 		/// 
		/// 		/// الكل >> 3
		/// </summary>
		[EnumTextValue("NATIONALITY_FLG")]
		[ColumnEnum("NATIONALITY_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		NationalityFlg = 6,
		/// <summary>
		/// GsCodeCurrencyId : 
		/// </summary>
		[EnumTextValue("GS_CODE_CURRENCY_ID")]
		[ColumnEnum("GS_CODE_CURRENCY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsCodeCurrencyId = 7,
		/// <summary>
		/// AutoloadFlg : 
		/// </summary>
		[EnumTextValue("AUTOLOAD_FLG")]
		[ColumnEnum("AUTOLOAD_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AutoloadFlg = 8,
		/// <summary>
		/// TransAppFlg : 
		/// </summary>
		[EnumTextValue("TRANS_APP_FLG")]
		[ColumnEnum("TRANS_APP_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		TransAppFlg = 9,
		/// <summary>
		/// AsCodeDegreeId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_ID")]
		[ColumnEnum("AS_CODE_DEGREE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeId = 10,
		/// <summary>
		/// AsCodeDegreeClassId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_CLASS_ID")]
		[ColumnEnum("AS_CODE_DEGREE_CLASS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeClassId = 11,
		/// <summary>
		/// DelFlg : 
		/// </summary>
		[EnumTextValue("DEL_FLG")]
		[ColumnEnum("DEL_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DelFlg = 12,
		/// <summary>
		/// AdmCdePlacementExamId : NU
		/// </summary>
		[EnumTextValue("ADM_CDE_PLACEMENT_EXAM_ID")]
		[ColumnEnum("ADM_CDE_PLACEMENT_EXAM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmCdePlacementExamId = 13,
		/// <summary>
		/// RefundFlg : لتمييز البنود القابلة  "للاستيرداد"
		/// </summary>
		[EnumTextValue("REFUND_FLG")]
		[ColumnEnum("REFUND_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		RefundFlg = 14,
		/// <summary>
		/// FeeCodeItemId : 
		/// </summary>
		[EnumTextValue("FEE_CODE_ITEM_ID")]
		[ColumnEnum("FEE_CODE_ITEM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeeCodeItemId = 15,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 16,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 17
	}//End enum

	#endregion AdmCdeFeeColumn Enum

} // end namespace
