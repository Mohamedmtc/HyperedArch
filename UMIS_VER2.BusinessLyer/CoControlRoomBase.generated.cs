
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file CoControlRoom.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'CO_CONTROL_ROOM' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class CoControlRoomBase : EntityBase, ICoControlRoom, IEntityId<CoControlRoomKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CoControlRoomEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CoControlRoomEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CoControlRoomEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<CoControlRoom> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CoControlRoomEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CoControlRoomEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CoControlRoomBase"/> instance.
		///</summary>
		public CoControlRoomBase()
		{
			this.entityData = new CoControlRoomEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CoControlRoomBase"/> instance.
		///</summary>
		///<param name="_coControlRoomId"></param>
		///<param name="_entMainId"></param>
		///<param name="_edCodeLevelId"></param>
		///<param name="_coControlId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_markMethod"></param>
		///<param name="_closeFlg"></param>
		public CoControlRoomBase(System.Decimal _coControlRoomId, System.Decimal _entMainId, 
			System.Decimal? _edCodeLevelId, System.Decimal _coControlId, System.Decimal _asFacultyInfoId, 
			System.Decimal _markMethod, System.Decimal _closeFlg)
		{
			this.entityData = new CoControlRoomEntityData();
			this.backupData = null;

			this.CoControlRoomId = _coControlRoomId;
			this.EntMainId = _entMainId;
			this.EdCodeLevelId = _edCodeLevelId;
			this.CoControlId = _coControlId;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.MarkMethod = _markMethod;
			this.CloseFlg = _closeFlg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="CoControlRoom"/> instance.
		///</summary>
		///<param name="_coControlRoomId"></param>
		///<param name="_entMainId"></param>
		///<param name="_edCodeLevelId"></param>
		///<param name="_coControlId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_markMethod"></param>
		///<param name="_closeFlg"></param>
		public static CoControlRoom CreateCoControlRoom(System.Decimal _coControlRoomId, System.Decimal _entMainId, 
			System.Decimal? _edCodeLevelId, System.Decimal _coControlId, System.Decimal _asFacultyInfoId, 
			System.Decimal _markMethod, System.Decimal _closeFlg)
		{
			CoControlRoom newCoControlRoom = new CoControlRoom();
			newCoControlRoom.CoControlRoomId = _coControlRoomId;
			newCoControlRoom.EntMainId = _entMainId;
			newCoControlRoom.EdCodeLevelId = _edCodeLevelId;
			newCoControlRoom.CoControlId = _coControlId;
			newCoControlRoom.AsFacultyInfoId = _asFacultyInfoId;
			newCoControlRoom.MarkMethod = _markMethod;
			newCoControlRoom.CloseFlg = _closeFlg;
			return newCoControlRoom;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the CoControlRoomId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal CoControlRoomId
		{
			get
			{
				return this.entityData.CoControlRoomId; 
			}
			
			set
			{
				if (this.entityData.CoControlRoomId == value)
					return;
					
				OnColumnChanging(CoControlRoomColumn.CoControlRoomId, this.entityData.CoControlRoomId);
				this.entityData.CoControlRoomId = value;
				this.EntityId.CoControlRoomId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlRoomColumn.CoControlRoomId, this.entityData.CoControlRoomId);
				OnPropertyChanged("CoControlRoomId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the CO_CONTROL_ROOM_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the CO_CONTROL_ROOM_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalCoControlRoomId
		{
			get { return this.entityData.OriginalCoControlRoomId; }
			set { this.entityData.OriginalCoControlRoomId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EntMainId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EntMainId
		{
			get
			{
				return this.entityData.EntMainId; 
			}
			
			set
			{
				if (this.entityData.EntMainId == value)
					return;
					
				OnColumnChanging(CoControlRoomColumn.EntMainId, this.entityData.EntMainId);
				this.entityData.EntMainId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlRoomColumn.EntMainId, this.entityData.EntMainId);
				OnPropertyChanged("EntMainId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeLevelId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeLevelIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeLevelId
		{
			get
			{
				return this.entityData.EdCodeLevelId; 
			}
			
			set
			{
				if (this.entityData.EdCodeLevelId == value)
					return;
					
				OnColumnChanging(CoControlRoomColumn.EdCodeLevelId, this.entityData.EdCodeLevelId);
				this.entityData.EdCodeLevelId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlRoomColumn.EdCodeLevelId, this.entityData.EdCodeLevelId);
				OnPropertyChanged("EdCodeLevelId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CoControlId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal CoControlId
		{
			get
			{
				return this.entityData.CoControlId; 
			}
			
			set
			{
				if (this.entityData.CoControlId == value)
					return;
					
				OnColumnChanging(CoControlRoomColumn.CoControlId, this.entityData.CoControlId);
				this.entityData.CoControlId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlRoomColumn.CoControlId, this.entityData.CoControlId);
				OnPropertyChanged("CoControlId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(CoControlRoomColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlRoomColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MarkMethod property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal MarkMethod
		{
			get
			{
				return this.entityData.MarkMethod; 
			}
			
			set
			{
				if (this.entityData.MarkMethod == value)
					return;
					
				OnColumnChanging(CoControlRoomColumn.MarkMethod, this.entityData.MarkMethod);
				this.entityData.MarkMethod = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlRoomColumn.MarkMethod, this.entityData.MarkMethod);
				OnPropertyChanged("MarkMethod");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CloseFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal CloseFlg
		{
			get
			{
				return this.entityData.CloseFlg; 
			}
			
			set
			{
				if (this.entityData.CloseFlg == value)
					return;
					
				OnColumnChanging(CoControlRoomColumn.CloseFlg, this.entityData.CloseFlg);
				this.entityData.CloseFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlRoomColumn.CloseFlg, this.entityData.CloseFlg);
				OnPropertyChanged("CloseFlg");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="CoControl"/>.
		/// </summary>
		/// <value>The source CoControl for CoControlId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual CoControl CoControlIdSource
      	{
            get { return entityData.CoControlIdSource; }
            set { entityData.CoControlIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeLevel EdCodeLevelIdSource
      	{
            get { return entityData.EdCodeLevelIdSource; }
            set { entityData.EdCodeLevelIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return entityData.EntMainIdSource; }
            set { entityData.EntMainIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of CoCourseResult objects
		///	which are related to this object through the relation FK_CO_COURSE_RESULT_CO_CONTROL_ROOM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoCourseResult> CoCourseResultCollection
		{
			get { return entityData.CoCourseResultCollection; }
			set { entityData.CoCourseResultCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CoContRoomMember objects
		///	which are related to this object through the relation FK_CO_CONT_ROOM_MEMBER_CO_CONTROL_ROOM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoContRoomMember> CoContRoomMemberCollection
		{
			get { return entityData.CoContRoomMemberCollection; }
			set { entityData.CoContRoomMemberCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "CO_CONTROL_ROOM"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"CO_CONTROL_ROOM_ID", "ENT_MAIN_ID", "ED_CODE_LEVEL_ID", "CO_CONTROL_ID", "AS_FACULTY_INFO_ID", "MARK_METHOD", "CLOSE_FLG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CoControlRoomEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (CoControlRoom) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<CoControlRoom>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as CoControlRoom);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed CoControlRoom Entity 
		///</summary>
		protected virtual CoControlRoom Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			CoControlRoom copy = new CoControlRoom();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.CoControlRoomId = this.CoControlRoomId;
					copy.OriginalCoControlRoomId = this.OriginalCoControlRoomId;
				copy.EntMainId = this.EntMainId;
				copy.EdCodeLevelId = this.EdCodeLevelId;
				copy.CoControlId = this.CoControlId;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.MarkMethod = this.MarkMethod;
				copy.CloseFlg = this.CloseFlg;
			
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.CoControlIdSource != null && existingCopies.Contains(this.CoControlIdSource))
				copy.CoControlIdSource = existingCopies[this.CoControlIdSource] as CoControl;
			else
				copy.CoControlIdSource = MakeCopyOf(this.CoControlIdSource, existingCopies) as CoControl;
			if (this.EdCodeLevelIdSource != null && existingCopies.Contains(this.EdCodeLevelIdSource))
				copy.EdCodeLevelIdSource = existingCopies[this.EdCodeLevelIdSource] as EdCodeLevel;
			else
				copy.EdCodeLevelIdSource = MakeCopyOf(this.EdCodeLevelIdSource, existingCopies) as EdCodeLevel;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				copy.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				copy.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
		
			//deep copy nested objects
			copy.CoCourseResultCollection = (TList<CoCourseResult>) MakeCopyOf(this.CoCourseResultCollection, existingCopies); 
			copy.CoContRoomMemberCollection = (TList<CoContRoomMember>) MakeCopyOf(this.CoContRoomMemberCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed CoControlRoom Entity 
		///</summary>
		public virtual CoControlRoom Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed CoControlRoom Entity which is a deep copy of the current entity.
		///</summary>
		public virtual CoControlRoom DeepCopy()
		{
			return EntityHelper.Clone<CoControlRoom>(this as CoControlRoom);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CoControlRoomEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new CoControlRoomEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CoControlRoomEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CoControlRoomColumn column)
		{
			switch(column)
			{
					case CoControlRoomColumn.CoControlRoomId:
					return entityData.CoControlRoomId != _originalData.CoControlRoomId;
					case CoControlRoomColumn.EntMainId:
					return entityData.EntMainId != _originalData.EntMainId;
					case CoControlRoomColumn.EdCodeLevelId:
					return entityData.EdCodeLevelId != _originalData.EdCodeLevelId;
					case CoControlRoomColumn.CoControlId:
					return entityData.CoControlId != _originalData.CoControlId;
					case CoControlRoomColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case CoControlRoomColumn.MarkMethod:
					return entityData.MarkMethod != _originalData.MarkMethod;
					case CoControlRoomColumn.CloseFlg:
					return entityData.CloseFlg != _originalData.CloseFlg;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< CoControlRoomColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.CoControlRoomId != _originalData.CoControlRoomId;
			result = result || entityData.EntMainId != _originalData.EntMainId;
			result = result || entityData.EdCodeLevelId != _originalData.EdCodeLevelId;
			result = result || entityData.CoControlId != _originalData.CoControlId;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.MarkMethod != _originalData.MarkMethod;
			result = result || entityData.CloseFlg != _originalData.CloseFlg;
			return result;
		}	
		
		///<summary>
		///  Returns a CoControlRoom Entity with the original data.
		///</summary>
		public CoControlRoom GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateCoControlRoom(
				_originalData.CoControlRoomId,
				_originalData.EntMainId,
				_originalData.EdCodeLevelId,
				_originalData.CoControlId,
				_originalData.AsFacultyInfoId,
				_originalData.MarkMethod,
				_originalData.CloseFlg
				);
				
			return (CoControlRoom)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CoControlRoomBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is CoControlRoomBase)
				return ValueEquals(this, (CoControlRoomBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CoControlRoomBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.CoControlRoomId.GetHashCode() ^ 
					this.EntMainId.GetHashCode() ^ 
					((this.EdCodeLevelId == null) ? string.Empty : this.EdCodeLevelId.ToString()).GetHashCode() ^ 
					this.CoControlId.GetHashCode() ^ 
					this.AsFacultyInfoId.GetHashCode() ^ 
					this.MarkMethod.GetHashCode() ^ 
					this.CloseFlg.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CoControlRoomBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CoControlRoomBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="CoControlRoomBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="CoControlRoomBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CoControlRoomBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(CoControlRoomBase Object1, CoControlRoomBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.CoControlRoomId != Object2.CoControlRoomId)
				equal = false;
			if (Object1.EntMainId != Object2.EntMainId)
				equal = false;
			if ( Object1.EdCodeLevelId != null && Object2.EdCodeLevelId != null )
			{
				if (Object1.EdCodeLevelId != Object2.EdCodeLevelId)
					equal = false;
			}
			else if (Object1.EdCodeLevelId == null ^ Object2.EdCodeLevelId == null )
			{
				equal = false;
			}
			if (Object1.CoControlId != Object2.CoControlId)
				equal = false;
			if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
				equal = false;
			if (Object1.MarkMethod != Object2.MarkMethod)
				equal = false;
			if (Object1.CloseFlg != Object2.CloseFlg)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CoControlRoomBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CoControlRoomComparer GetComparer()
        {
            return new CoControlRoomComparer();
        }
        */

        // Comparer delegates back to CoControlRoom
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(CoControlRoom rhs, CoControlRoomColumn which)
        {
            switch (which)
            {
            	
            	
            	case CoControlRoomColumn.CoControlRoomId:
            		return this.CoControlRoomId.CompareTo(rhs.CoControlRoomId);
            		
            		                 
            	
            	
            	case CoControlRoomColumn.EntMainId:
            		return this.EntMainId.CompareTo(rhs.EntMainId);
            		
            		                 
            	
            	
            	case CoControlRoomColumn.EdCodeLevelId:
            		return this.EdCodeLevelId.Value.CompareTo(rhs.EdCodeLevelId.Value);
            		
            		                 
            	
            	
            	case CoControlRoomColumn.CoControlId:
            		return this.CoControlId.CompareTo(rhs.CoControlId);
            		
            		                 
            	
            	
            	case CoControlRoomColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.CompareTo(rhs.AsFacultyInfoId);
            		
            		                 
            	
            	
            	case CoControlRoomColumn.MarkMethod:
            		return this.MarkMethod.CompareTo(rhs.MarkMethod);
            		
            		                 
            	
            	
            	case CoControlRoomColumn.CloseFlg:
            		return this.CloseFlg.CompareTo(rhs.CloseFlg);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CoControlRoomKey> Members
		
		// member variable for the EntityId property
		private CoControlRoomKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual CoControlRoomKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CoControlRoomKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("CoControlRoom")
					.Append("|").Append( this.CoControlRoomId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{8}{7}- CoControlRoomId: {0}{7}- EntMainId: {1}{7}- EdCodeLevelId: {2}{7}- CoControlId: {3}{7}- AsFacultyInfoId: {4}{7}- MarkMethod: {5}{7}- CloseFlg: {6}{7}{9}", 
				this.CoControlRoomId,
				this.EntMainId,
				(this.EdCodeLevelId == null) ? string.Empty : this.EdCodeLevelId.ToString(),
				this.CoControlId,
				this.AsFacultyInfoId,
				this.MarkMethod,
				this.CloseFlg,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'CO_CONTROL_ROOM' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CoControlRoomEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// CO_CONTROL_ROOM_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "CO_CONTROL_ROOM"</remarks>
		public System.Decimal CoControlRoomId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalCoControlRoomId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ENT_MAIN_ID : 
		/// </summary>
		public System.Decimal		  EntMainId = 0.0m;
		
		/// <summary>
		/// ED_CODE_LEVEL_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeLevelId = null;
		
		/// <summary>
		/// CO_CONTROL_ID : 
		/// </summary>
		public System.Decimal		  CoControlId = 0.0m;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal		  AsFacultyInfoId = 0.0m;
		
		/// <summary>
		/// MARK_METHOD : 
		/// </summary>
		public System.Decimal		  MarkMethod = 0.0m;
		
		/// <summary>
		/// CLOSE_FLG : 
		/// </summary>
		public System.Decimal		  CloseFlg = 0.0m;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private CoControl _coControlIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="CoControl"/>.
		/// </summary>
		/// <value>The source CoControl for CoControlId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual CoControl CoControlIdSource
      	{
            get { return this._coControlIdSource; }
            set { this._coControlIdSource = value; }
      	}
		private EdCodeLevel _edCodeLevelIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeLevel EdCodeLevelIdSource
      	{
            get { return this._edCodeLevelIdSource; }
            set { this._edCodeLevelIdSource = value; }
      	}
		private EntityMain _entMainIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return this._entMainIdSource; }
            set { this._entMainIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region CoCourseResultCollection
		
		private TList<CoCourseResult> _coCourseResultCoControlRoomId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coCourseResultCoControlRoomId
		/// </summary>
		
		public TList<CoCourseResult> CoCourseResultCollection
		{
			get
			{
				if (_coCourseResultCoControlRoomId == null)
				{
				_coCourseResultCoControlRoomId = new TList<CoCourseResult>();
				}
	
				return _coCourseResultCoControlRoomId;
			}
			set { _coCourseResultCoControlRoomId = value; }
		}
		
		#endregion

		#region CoContRoomMemberCollection
		
		private TList<CoContRoomMember> _coContRoomMemberCoControlRoomId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coContRoomMemberCoControlRoomId
		/// </summary>
		
		public TList<CoContRoomMember> CoContRoomMemberCollection
		{
			get
			{
				if (_coContRoomMemberCoControlRoomId == null)
				{
				_coContRoomMemberCoControlRoomId = new TList<CoContRoomMember>();
				}
	
				return _coContRoomMemberCoControlRoomId;
			}
			set { _coContRoomMemberCoControlRoomId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CoControlRoomEntityData _tmp = new CoControlRoomEntityData();
						
			_tmp.CoControlRoomId = this.CoControlRoomId;
			_tmp.OriginalCoControlRoomId = this.OriginalCoControlRoomId;
			
			_tmp.EntMainId = this.EntMainId;
			_tmp.EdCodeLevelId = this.EdCodeLevelId;
			_tmp.CoControlId = this.CoControlId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.MarkMethod = this.MarkMethod;
			_tmp.CloseFlg = this.CloseFlg;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.CoControlIdSource != null)
				_tmp.CoControlIdSource = MakeCopyOf(this.CoControlIdSource) as CoControl;
			if (this.EdCodeLevelIdSource != null)
				_tmp.EdCodeLevelIdSource = MakeCopyOf(this.EdCodeLevelIdSource) as EdCodeLevel;
			if (this.EntMainIdSource != null)
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource) as EntityMain;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._coCourseResultCoControlRoomId != null)
				_tmp.CoCourseResultCollection = (TList<CoCourseResult>) MakeCopyOf(this.CoCourseResultCollection); 
			if (this._coContRoomMemberCoControlRoomId != null)
				_tmp.CoContRoomMemberCollection = (TList<CoContRoomMember>) MakeCopyOf(this.CoContRoomMemberCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			CoControlRoomEntityData _tmp = new CoControlRoomEntityData();
						
			_tmp.CoControlRoomId = this.CoControlRoomId;
			_tmp.OriginalCoControlRoomId = this.OriginalCoControlRoomId;
			
			_tmp.EntMainId = this.EntMainId;
			_tmp.EdCodeLevelId = this.EdCodeLevelId;
			_tmp.CoControlId = this.CoControlId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.MarkMethod = this.MarkMethod;
			_tmp.CloseFlg = this.CloseFlg;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.CoControlIdSource != null && existingCopies.Contains(this.CoControlIdSource))
				_tmp.CoControlIdSource = existingCopies[this.CoControlIdSource] as CoControl;
			else
				_tmp.CoControlIdSource = MakeCopyOf(this.CoControlIdSource, existingCopies) as CoControl;
			if (this.EdCodeLevelIdSource != null && existingCopies.Contains(this.EdCodeLevelIdSource))
				_tmp.EdCodeLevelIdSource = existingCopies[this.EdCodeLevelIdSource] as EdCodeLevel;
			else
				_tmp.EdCodeLevelIdSource = MakeCopyOf(this.EdCodeLevelIdSource, existingCopies) as EdCodeLevel;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				_tmp.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.CoCourseResultCollection = (TList<CoCourseResult>) MakeCopyOf(this.CoCourseResultCollection, existingCopies); 
			_tmp.CoContRoomMemberCollection = (TList<CoContRoomMember>) MakeCopyOf(this.CoContRoomMemberCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CoControlRoomColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(CoControlRoomColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CoControlRoomColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(CoControlRoomColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CoControlRoomColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(CoControlRoomColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				CoControlRoomEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CoControlRoomEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CoControlRoomColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(CoControlRoomColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CoControlRoomEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CoControlRoomEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CoControlRoomEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="CoControlRoom"/> object.
	/// </remarks>
	public class CoControlRoomEventArgs : System.EventArgs
	{
		private CoControlRoomColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CoControlRoomEventArgs class.
		///</summary>
		public CoControlRoomEventArgs(CoControlRoomColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CoControlRoomEventArgs class.
		///</summary>
		public CoControlRoomEventArgs(CoControlRoomColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CoControlRoomColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CoControlRoomColumn" />
		public CoControlRoomColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all CoControlRoom related events.
	///</summary>
	public delegate void CoControlRoomEventHandler(object sender, CoControlRoomEventArgs e);
	
	#region CoControlRoomComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CoControlRoomComparer : System.Collections.Generic.IComparer<CoControlRoom>
	{
		CoControlRoomColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CoControlRoomComparer"/> class.
        /// </summary>
		public CoControlRoomComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CoControlRoomComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CoControlRoomComparer(CoControlRoomColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="CoControlRoom"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="CoControlRoom"/> to compare.</param>
        /// <param name="b">The second <c>CoControlRoom</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(CoControlRoom a, CoControlRoom b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(CoControlRoom entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(CoControlRoom a, CoControlRoom b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CoControlRoomColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CoControlRoomKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="CoControlRoom"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CoControlRoomKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CoControlRoomKey class.
		/// </summary>
		public CoControlRoomKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CoControlRoomKey class.
		/// </summary>
		public CoControlRoomKey(CoControlRoomBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.CoControlRoomId = entity.CoControlRoomId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CoControlRoomKey class.
		/// </summary>
		public CoControlRoomKey(System.Decimal _coControlRoomId)
		{
			#region Init Properties

			this.CoControlRoomId = _coControlRoomId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CoControlRoomBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CoControlRoomBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the CoControlRoomId property
		private System.Decimal _coControlRoomId;
		
		/// <summary>
		/// Gets or sets the CoControlRoomId property.
		/// </summary>
		public System.Decimal CoControlRoomId
		{
			get { return _coControlRoomId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.CoControlRoomId = value;
				
				_coControlRoomId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				CoControlRoomId = ( values["CoControlRoomId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["CoControlRoomId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("CoControlRoomId", CoControlRoomId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("CoControlRoomId: {0}{1}",
								CoControlRoomId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CoControlRoomColumn Enum
	
	/// <summary>
	/// Enumerate the CoControlRoom columns.
	/// </summary>
	[Serializable]
	public enum CoControlRoomColumn : int
	{
		/// <summary>
		/// CoControlRoomId : 
		/// </summary>
		[EnumTextValue("CO_CONTROL_ROOM_ID")]
		[ColumnEnum("CO_CONTROL_ROOM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		CoControlRoomId = 1,
		/// <summary>
		/// EntMainId : 
		/// </summary>
		[EnumTextValue("ENT_MAIN_ID")]
		[ColumnEnum("ENT_MAIN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EntMainId = 2,
		/// <summary>
		/// EdCodeLevelId : 
		/// </summary>
		[EnumTextValue("ED_CODE_LEVEL_ID")]
		[ColumnEnum("ED_CODE_LEVEL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeLevelId = 3,
		/// <summary>
		/// CoControlId : 
		/// </summary>
		[EnumTextValue("CO_CONTROL_ID")]
		[ColumnEnum("CO_CONTROL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		CoControlId = 4,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsFacultyInfoId = 5,
		/// <summary>
		/// MarkMethod : 
		/// </summary>
		[EnumTextValue("MARK_METHOD")]
		[ColumnEnum("MARK_METHOD", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		MarkMethod = 6,
		/// <summary>
		/// CloseFlg : 
		/// </summary>
		[EnumTextValue("CLOSE_FLG")]
		[ColumnEnum("CLOSE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		CloseFlg = 7
	}//End enum

	#endregion CoControlRoomColumn Enum

} // end namespace
