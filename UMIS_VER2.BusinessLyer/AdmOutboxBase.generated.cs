
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AdmOutbox.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ADM_OUTBOX' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AdmOutboxBase : EntityBase, IAdmOutbox, IEntityId<AdmOutboxKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AdmOutboxEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AdmOutboxEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AdmOutboxEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AdmOutbox> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmOutboxEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmOutboxEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AdmOutboxBase"/> instance.
		///</summary>
		public AdmOutboxBase()
		{
			this.entityData = new AdmOutboxEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AdmOutboxBase"/> instance.
		///</summary>
		///<param name="_admOutboxId"></param>
		///<param name="_admAppMessageId"></param>
		///<param name="_outMsgUserFrom"></param>
		///<param name="_outMsgUserTo"></param>
		///<param name="_outMsgAppFrom"></param>
		///<param name="_outMsgAppTo"></param>
		public AdmOutboxBase(System.Decimal _admOutboxId, System.Decimal _admAppMessageId, 
			System.Decimal? _outMsgUserFrom, System.Decimal? _outMsgUserTo, System.Decimal? _outMsgAppFrom, 
			System.Decimal? _outMsgAppTo)
		{
			this.entityData = new AdmOutboxEntityData();
			this.backupData = null;

			this.AdmOutboxId = _admOutboxId;
			this.AdmAppMessageId = _admAppMessageId;
			this.OutMsgUserFrom = _outMsgUserFrom;
			this.OutMsgUserTo = _outMsgUserTo;
			this.OutMsgAppFrom = _outMsgAppFrom;
			this.OutMsgAppTo = _outMsgAppTo;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AdmOutbox"/> instance.
		///</summary>
		///<param name="_admOutboxId"></param>
		///<param name="_admAppMessageId"></param>
		///<param name="_outMsgUserFrom"></param>
		///<param name="_outMsgUserTo"></param>
		///<param name="_outMsgAppFrom"></param>
		///<param name="_outMsgAppTo"></param>
		public static AdmOutbox CreateAdmOutbox(System.Decimal _admOutboxId, System.Decimal _admAppMessageId, 
			System.Decimal? _outMsgUserFrom, System.Decimal? _outMsgUserTo, System.Decimal? _outMsgAppFrom, 
			System.Decimal? _outMsgAppTo)
		{
			AdmOutbox newAdmOutbox = new AdmOutbox();
			newAdmOutbox.AdmOutboxId = _admOutboxId;
			newAdmOutbox.AdmAppMessageId = _admAppMessageId;
			newAdmOutbox.OutMsgUserFrom = _outMsgUserFrom;
			newAdmOutbox.OutMsgUserTo = _outMsgUserTo;
			newAdmOutbox.OutMsgAppFrom = _outMsgAppFrom;
			newAdmOutbox.OutMsgAppTo = _outMsgAppTo;
			return newAdmOutbox;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AdmOutboxId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal AdmOutboxId
		{
			get
			{
				return this.entityData.AdmOutboxId; 
			}
			
			set
			{
				if (this.entityData.AdmOutboxId == value)
					return;
					
				OnColumnChanging(AdmOutboxColumn.AdmOutboxId, this.entityData.AdmOutboxId);
				this.entityData.AdmOutboxId = value;
				this.EntityId.AdmOutboxId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmOutboxColumn.AdmOutboxId, this.entityData.AdmOutboxId);
				OnPropertyChanged("AdmOutboxId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ADM_OUTBOX_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ADM_OUTBOX_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalAdmOutboxId
		{
			get { return this.entityData.OriginalAdmOutboxId; }
			set { this.entityData.OriginalAdmOutboxId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the AdmAppMessageId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AdmAppMessageId
		{
			get
			{
				return this.entityData.AdmAppMessageId; 
			}
			
			set
			{
				if (this.entityData.AdmAppMessageId == value)
					return;
					
				OnColumnChanging(AdmOutboxColumn.AdmAppMessageId, this.entityData.AdmAppMessageId);
				this.entityData.AdmAppMessageId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmOutboxColumn.AdmAppMessageId, this.entityData.AdmAppMessageId);
				OnPropertyChanged("AdmAppMessageId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OutMsgUserFrom property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsOutMsgUserFromNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? OutMsgUserFrom
		{
			get
			{
				return this.entityData.OutMsgUserFrom; 
			}
			
			set
			{
				if (this.entityData.OutMsgUserFrom == value)
					return;
					
				OnColumnChanging(AdmOutboxColumn.OutMsgUserFrom, this.entityData.OutMsgUserFrom);
				this.entityData.OutMsgUserFrom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmOutboxColumn.OutMsgUserFrom, this.entityData.OutMsgUserFrom);
				OnPropertyChanged("OutMsgUserFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OutMsgUserTo property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsOutMsgUserToNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? OutMsgUserTo
		{
			get
			{
				return this.entityData.OutMsgUserTo; 
			}
			
			set
			{
				if (this.entityData.OutMsgUserTo == value)
					return;
					
				OnColumnChanging(AdmOutboxColumn.OutMsgUserTo, this.entityData.OutMsgUserTo);
				this.entityData.OutMsgUserTo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmOutboxColumn.OutMsgUserTo, this.entityData.OutMsgUserTo);
				OnPropertyChanged("OutMsgUserTo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OutMsgAppFrom property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsOutMsgAppFromNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? OutMsgAppFrom
		{
			get
			{
				return this.entityData.OutMsgAppFrom; 
			}
			
			set
			{
				if (this.entityData.OutMsgAppFrom == value)
					return;
					
				OnColumnChanging(AdmOutboxColumn.OutMsgAppFrom, this.entityData.OutMsgAppFrom);
				this.entityData.OutMsgAppFrom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmOutboxColumn.OutMsgAppFrom, this.entityData.OutMsgAppFrom);
				OnPropertyChanged("OutMsgAppFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OutMsgAppTo property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsOutMsgAppToNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? OutMsgAppTo
		{
			get
			{
				return this.entityData.OutMsgAppTo; 
			}
			
			set
			{
				if (this.entityData.OutMsgAppTo == value)
					return;
					
				OnColumnChanging(AdmOutboxColumn.OutMsgAppTo, this.entityData.OutMsgAppTo);
				this.entityData.OutMsgAppTo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmOutboxColumn.OutMsgAppTo, this.entityData.OutMsgAppTo);
				OnPropertyChanged("OutMsgAppTo");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdmAppMessage"/>.
		/// </summary>
		/// <value>The source AdmAppMessage for AdmAppMessageId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmAppMessage AdmAppMessageIdSource
      	{
            get { return entityData.AdmAppMessageIdSource; }
            set { entityData.AdmAppMessageIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdmApplicant"/>.
		/// </summary>
		/// <value>The source AdmApplicant for OutMsgAppFrom.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmApplicant OutMsgAppFromSource
      	{
            get { return entityData.OutMsgAppFromSource; }
            set { entityData.OutMsgAppFromSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdmApplicant"/>.
		/// </summary>
		/// <value>The source AdmApplicant for OutMsgAppTo.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmApplicant OutMsgAppToSource
      	{
            get { return entityData.OutMsgAppToSource; }
            set { entityData.OutMsgAppToSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for OutMsgUserFrom.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeUser OutMsgUserFromSource
      	{
            get { return entityData.OutMsgUserFromSource; }
            set { entityData.OutMsgUserFromSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for OutMsgUserTo.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeUser OutMsgUserToSource
      	{
            get { return entityData.OutMsgUserToSource; }
            set { entityData.OutMsgUserToSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ADM_OUTBOX"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ADM_OUTBOX_ID", "ADM_APP_MESSAGE_ID", "OUT_MSG_USER_FROM", "OUT_MSG_USER_TO", "OUT_MSG_APP_FROM", "OUT_MSG_APP_TO"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AdmOutboxEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AdmOutbox) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AdmOutbox>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AdmOutbox);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AdmOutbox Entity 
		///</summary>
		protected virtual AdmOutbox Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AdmOutbox copy = new AdmOutbox();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AdmOutboxId = this.AdmOutboxId;
					copy.OriginalAdmOutboxId = this.OriginalAdmOutboxId;
				copy.AdmAppMessageId = this.AdmAppMessageId;
				copy.OutMsgUserFrom = this.OutMsgUserFrom;
				copy.OutMsgUserTo = this.OutMsgUserTo;
				copy.OutMsgAppFrom = this.OutMsgAppFrom;
				copy.OutMsgAppTo = this.OutMsgAppTo;
			
			if (this.AdmAppMessageIdSource != null && existingCopies.Contains(this.AdmAppMessageIdSource))
				copy.AdmAppMessageIdSource = existingCopies[this.AdmAppMessageIdSource] as AdmAppMessage;
			else
				copy.AdmAppMessageIdSource = MakeCopyOf(this.AdmAppMessageIdSource, existingCopies) as AdmAppMessage;
			if (this.OutMsgAppFromSource != null && existingCopies.Contains(this.OutMsgAppFromSource))
				copy.OutMsgAppFromSource = existingCopies[this.OutMsgAppFromSource] as AdmApplicant;
			else
				copy.OutMsgAppFromSource = MakeCopyOf(this.OutMsgAppFromSource, existingCopies) as AdmApplicant;
			if (this.OutMsgAppToSource != null && existingCopies.Contains(this.OutMsgAppToSource))
				copy.OutMsgAppToSource = existingCopies[this.OutMsgAppToSource] as AdmApplicant;
			else
				copy.OutMsgAppToSource = MakeCopyOf(this.OutMsgAppToSource, existingCopies) as AdmApplicant;
			if (this.OutMsgUserFromSource != null && existingCopies.Contains(this.OutMsgUserFromSource))
				copy.OutMsgUserFromSource = existingCopies[this.OutMsgUserFromSource] as SeUser;
			else
				copy.OutMsgUserFromSource = MakeCopyOf(this.OutMsgUserFromSource, existingCopies) as SeUser;
			if (this.OutMsgUserToSource != null && existingCopies.Contains(this.OutMsgUserToSource))
				copy.OutMsgUserToSource = existingCopies[this.OutMsgUserToSource] as SeUser;
			else
				copy.OutMsgUserToSource = MakeCopyOf(this.OutMsgUserToSource, existingCopies) as SeUser;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AdmOutbox Entity 
		///</summary>
		public virtual AdmOutbox Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AdmOutbox Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AdmOutbox DeepCopy()
		{
			return EntityHelper.Clone<AdmOutbox>(this as AdmOutbox);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AdmOutboxEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AdmOutboxEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AdmOutboxEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AdmOutboxColumn column)
		{
			switch(column)
			{
					case AdmOutboxColumn.AdmOutboxId:
					return entityData.AdmOutboxId != _originalData.AdmOutboxId;
					case AdmOutboxColumn.AdmAppMessageId:
					return entityData.AdmAppMessageId != _originalData.AdmAppMessageId;
					case AdmOutboxColumn.OutMsgUserFrom:
					return entityData.OutMsgUserFrom != _originalData.OutMsgUserFrom;
					case AdmOutboxColumn.OutMsgUserTo:
					return entityData.OutMsgUserTo != _originalData.OutMsgUserTo;
					case AdmOutboxColumn.OutMsgAppFrom:
					return entityData.OutMsgAppFrom != _originalData.OutMsgAppFrom;
					case AdmOutboxColumn.OutMsgAppTo:
					return entityData.OutMsgAppTo != _originalData.OutMsgAppTo;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AdmOutboxColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AdmOutboxId != _originalData.AdmOutboxId;
			result = result || entityData.AdmAppMessageId != _originalData.AdmAppMessageId;
			result = result || entityData.OutMsgUserFrom != _originalData.OutMsgUserFrom;
			result = result || entityData.OutMsgUserTo != _originalData.OutMsgUserTo;
			result = result || entityData.OutMsgAppFrom != _originalData.OutMsgAppFrom;
			result = result || entityData.OutMsgAppTo != _originalData.OutMsgAppTo;
			return result;
		}	
		
		///<summary>
		///  Returns a AdmOutbox Entity with the original data.
		///</summary>
		public AdmOutbox GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAdmOutbox(
				_originalData.AdmOutboxId,
				_originalData.AdmAppMessageId,
				_originalData.OutMsgUserFrom,
				_originalData.OutMsgUserTo,
				_originalData.OutMsgAppFrom,
				_originalData.OutMsgAppTo
				);
				
			return (AdmOutbox)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AdmOutboxBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AdmOutboxBase)
				return ValueEquals(this, (AdmOutboxBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AdmOutboxBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AdmOutboxId.GetHashCode() ^ 
					this.AdmAppMessageId.GetHashCode() ^ 
					((this.OutMsgUserFrom == null) ? string.Empty : this.OutMsgUserFrom.ToString()).GetHashCode() ^ 
					((this.OutMsgUserTo == null) ? string.Empty : this.OutMsgUserTo.ToString()).GetHashCode() ^ 
					((this.OutMsgAppFrom == null) ? string.Empty : this.OutMsgAppFrom.ToString()).GetHashCode() ^ 
					((this.OutMsgAppTo == null) ? string.Empty : this.OutMsgAppTo.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AdmOutboxBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AdmOutboxBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AdmOutboxBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AdmOutboxBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AdmOutboxBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AdmOutboxBase Object1, AdmOutboxBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AdmOutboxId != Object2.AdmOutboxId)
				equal = false;
			if (Object1.AdmAppMessageId != Object2.AdmAppMessageId)
				equal = false;
			if ( Object1.OutMsgUserFrom != null && Object2.OutMsgUserFrom != null )
			{
				if (Object1.OutMsgUserFrom != Object2.OutMsgUserFrom)
					equal = false;
			}
			else if (Object1.OutMsgUserFrom == null ^ Object2.OutMsgUserFrom == null )
			{
				equal = false;
			}
			if ( Object1.OutMsgUserTo != null && Object2.OutMsgUserTo != null )
			{
				if (Object1.OutMsgUserTo != Object2.OutMsgUserTo)
					equal = false;
			}
			else if (Object1.OutMsgUserTo == null ^ Object2.OutMsgUserTo == null )
			{
				equal = false;
			}
			if ( Object1.OutMsgAppFrom != null && Object2.OutMsgAppFrom != null )
			{
				if (Object1.OutMsgAppFrom != Object2.OutMsgAppFrom)
					equal = false;
			}
			else if (Object1.OutMsgAppFrom == null ^ Object2.OutMsgAppFrom == null )
			{
				equal = false;
			}
			if ( Object1.OutMsgAppTo != null && Object2.OutMsgAppTo != null )
			{
				if (Object1.OutMsgAppTo != Object2.OutMsgAppTo)
					equal = false;
			}
			else if (Object1.OutMsgAppTo == null ^ Object2.OutMsgAppTo == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AdmOutboxBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AdmOutboxComparer GetComparer()
        {
            return new AdmOutboxComparer();
        }
        */

        // Comparer delegates back to AdmOutbox
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AdmOutbox rhs, AdmOutboxColumn which)
        {
            switch (which)
            {
            	
            	
            	case AdmOutboxColumn.AdmOutboxId:
            		return this.AdmOutboxId.CompareTo(rhs.AdmOutboxId);
            		
            		                 
            	
            	
            	case AdmOutboxColumn.AdmAppMessageId:
            		return this.AdmAppMessageId.CompareTo(rhs.AdmAppMessageId);
            		
            		                 
            	
            	
            	case AdmOutboxColumn.OutMsgUserFrom:
            		return this.OutMsgUserFrom.Value.CompareTo(rhs.OutMsgUserFrom.Value);
            		
            		                 
            	
            	
            	case AdmOutboxColumn.OutMsgUserTo:
            		return this.OutMsgUserTo.Value.CompareTo(rhs.OutMsgUserTo.Value);
            		
            		                 
            	
            	
            	case AdmOutboxColumn.OutMsgAppFrom:
            		return this.OutMsgAppFrom.Value.CompareTo(rhs.OutMsgAppFrom.Value);
            		
            		                 
            	
            	
            	case AdmOutboxColumn.OutMsgAppTo:
            		return this.OutMsgAppTo.Value.CompareTo(rhs.OutMsgAppTo.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AdmOutboxKey> Members
		
		// member variable for the EntityId property
		private AdmOutboxKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AdmOutboxKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AdmOutboxKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AdmOutbox")
					.Append("|").Append( this.AdmOutboxId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{7}{6}- AdmOutboxId: {0}{6}- AdmAppMessageId: {1}{6}- OutMsgUserFrom: {2}{6}- OutMsgUserTo: {3}{6}- OutMsgAppFrom: {4}{6}- OutMsgAppTo: {5}{6}{8}", 
				this.AdmOutboxId,
				this.AdmAppMessageId,
				(this.OutMsgUserFrom == null) ? string.Empty : this.OutMsgUserFrom.ToString(),
				(this.OutMsgUserTo == null) ? string.Empty : this.OutMsgUserTo.ToString(),
				(this.OutMsgAppFrom == null) ? string.Empty : this.OutMsgAppFrom.ToString(),
				(this.OutMsgAppTo == null) ? string.Empty : this.OutMsgAppTo.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ADM_OUTBOX' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AdmOutboxEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ADM_OUTBOX_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ADM_OUTBOX"</remarks>
		public System.Decimal AdmOutboxId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalAdmOutboxId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ADM_APP_MESSAGE_ID : 
		/// </summary>
		public System.Decimal		  AdmAppMessageId = 0.0m;
		
		/// <summary>
		/// OUT_MSG_USER_FROM : 
		/// </summary>
		public System.Decimal?		  OutMsgUserFrom = null;
		
		/// <summary>
		/// OUT_MSG_USER_TO : 
		/// </summary>
		public System.Decimal?		  OutMsgUserTo = null;
		
		/// <summary>
		/// OUT_MSG_APP_FROM : 
		/// </summary>
		public System.Decimal?		  OutMsgAppFrom = null;
		
		/// <summary>
		/// OUT_MSG_APP_TO : 
		/// </summary>
		public System.Decimal?		  OutMsgAppTo = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdmAppMessage _admAppMessageIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmAppMessage"/>.
		/// </summary>
		/// <value>The source AdmAppMessage for AdmAppMessageId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmAppMessage AdmAppMessageIdSource
      	{
            get { return this._admAppMessageIdSource; }
            set { this._admAppMessageIdSource = value; }
      	}
		private AdmApplicant _outMsgAppFromSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmApplicant"/>.
		/// </summary>
		/// <value>The source AdmApplicant for OutMsgAppFrom.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmApplicant OutMsgAppFromSource
      	{
            get { return this._outMsgAppFromSource; }
            set { this._outMsgAppFromSource = value; }
      	}
		private AdmApplicant _outMsgAppToSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmApplicant"/>.
		/// </summary>
		/// <value>The source AdmApplicant for OutMsgAppTo.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmApplicant OutMsgAppToSource
      	{
            get { return this._outMsgAppToSource; }
            set { this._outMsgAppToSource = value; }
      	}
		private SeUser _outMsgUserFromSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for OutMsgUserFrom.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeUser OutMsgUserFromSource
      	{
            get { return this._outMsgUserFromSource; }
            set { this._outMsgUserFromSource = value; }
      	}
		private SeUser _outMsgUserToSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for OutMsgUserTo.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeUser OutMsgUserToSource
      	{
            get { return this._outMsgUserToSource; }
            set { this._outMsgUserToSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AdmOutboxEntityData _tmp = new AdmOutboxEntityData();
						
			_tmp.AdmOutboxId = this.AdmOutboxId;
			_tmp.OriginalAdmOutboxId = this.OriginalAdmOutboxId;
			
			_tmp.AdmAppMessageId = this.AdmAppMessageId;
			_tmp.OutMsgUserFrom = this.OutMsgUserFrom;
			_tmp.OutMsgUserTo = this.OutMsgUserTo;
			_tmp.OutMsgAppFrom = this.OutMsgAppFrom;
			_tmp.OutMsgAppTo = this.OutMsgAppTo;
			
			#region Source Parent Composite Entities
			if (this.AdmAppMessageIdSource != null)
				_tmp.AdmAppMessageIdSource = MakeCopyOf(this.AdmAppMessageIdSource) as AdmAppMessage;
			if (this.OutMsgAppFromSource != null)
				_tmp.OutMsgAppFromSource = MakeCopyOf(this.OutMsgAppFromSource) as AdmApplicant;
			if (this.OutMsgAppToSource != null)
				_tmp.OutMsgAppToSource = MakeCopyOf(this.OutMsgAppToSource) as AdmApplicant;
			if (this.OutMsgUserFromSource != null)
				_tmp.OutMsgUserFromSource = MakeCopyOf(this.OutMsgUserFromSource) as SeUser;
			if (this.OutMsgUserToSource != null)
				_tmp.OutMsgUserToSource = MakeCopyOf(this.OutMsgUserToSource) as SeUser;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AdmOutboxEntityData _tmp = new AdmOutboxEntityData();
						
			_tmp.AdmOutboxId = this.AdmOutboxId;
			_tmp.OriginalAdmOutboxId = this.OriginalAdmOutboxId;
			
			_tmp.AdmAppMessageId = this.AdmAppMessageId;
			_tmp.OutMsgUserFrom = this.OutMsgUserFrom;
			_tmp.OutMsgUserTo = this.OutMsgUserTo;
			_tmp.OutMsgAppFrom = this.OutMsgAppFrom;
			_tmp.OutMsgAppTo = this.OutMsgAppTo;
			
			#region Source Parent Composite Entities
			if (this.AdmAppMessageIdSource != null && existingCopies.Contains(this.AdmAppMessageIdSource))
				_tmp.AdmAppMessageIdSource = existingCopies[this.AdmAppMessageIdSource] as AdmAppMessage;
			else
				_tmp.AdmAppMessageIdSource = MakeCopyOf(this.AdmAppMessageIdSource, existingCopies) as AdmAppMessage;
			if (this.OutMsgAppFromSource != null && existingCopies.Contains(this.OutMsgAppFromSource))
				_tmp.OutMsgAppFromSource = existingCopies[this.OutMsgAppFromSource] as AdmApplicant;
			else
				_tmp.OutMsgAppFromSource = MakeCopyOf(this.OutMsgAppFromSource, existingCopies) as AdmApplicant;
			if (this.OutMsgAppToSource != null && existingCopies.Contains(this.OutMsgAppToSource))
				_tmp.OutMsgAppToSource = existingCopies[this.OutMsgAppToSource] as AdmApplicant;
			else
				_tmp.OutMsgAppToSource = MakeCopyOf(this.OutMsgAppToSource, existingCopies) as AdmApplicant;
			if (this.OutMsgUserFromSource != null && existingCopies.Contains(this.OutMsgUserFromSource))
				_tmp.OutMsgUserFromSource = existingCopies[this.OutMsgUserFromSource] as SeUser;
			else
				_tmp.OutMsgUserFromSource = MakeCopyOf(this.OutMsgUserFromSource, existingCopies) as SeUser;
			if (this.OutMsgUserToSource != null && existingCopies.Contains(this.OutMsgUserToSource))
				_tmp.OutMsgUserToSource = existingCopies[this.OutMsgUserToSource] as SeUser;
			else
				_tmp.OutMsgUserToSource = MakeCopyOf(this.OutMsgUserToSource, existingCopies) as SeUser;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmOutboxColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AdmOutboxColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmOutboxColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AdmOutboxColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmOutboxColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AdmOutboxColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AdmOutboxEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AdmOutboxEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmOutboxColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AdmOutboxColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AdmOutboxEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AdmOutboxEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AdmOutboxEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AdmOutbox"/> object.
	/// </remarks>
	public class AdmOutboxEventArgs : System.EventArgs
	{
		private AdmOutboxColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AdmOutboxEventArgs class.
		///</summary>
		public AdmOutboxEventArgs(AdmOutboxColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AdmOutboxEventArgs class.
		///</summary>
		public AdmOutboxEventArgs(AdmOutboxColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AdmOutboxColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AdmOutboxColumn" />
		public AdmOutboxColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AdmOutbox related events.
	///</summary>
	public delegate void AdmOutboxEventHandler(object sender, AdmOutboxEventArgs e);
	
	#region AdmOutboxComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AdmOutboxComparer : System.Collections.Generic.IComparer<AdmOutbox>
	{
		AdmOutboxColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AdmOutboxComparer"/> class.
        /// </summary>
		public AdmOutboxComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AdmOutboxComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AdmOutboxComparer(AdmOutboxColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AdmOutbox"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AdmOutbox"/> to compare.</param>
        /// <param name="b">The second <c>AdmOutbox</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AdmOutbox a, AdmOutbox b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AdmOutbox entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AdmOutbox a, AdmOutbox b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AdmOutboxColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AdmOutboxKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AdmOutbox"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AdmOutboxKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AdmOutboxKey class.
		/// </summary>
		public AdmOutboxKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmOutboxKey class.
		/// </summary>
		public AdmOutboxKey(AdmOutboxBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AdmOutboxId = entity.AdmOutboxId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmOutboxKey class.
		/// </summary>
		public AdmOutboxKey(System.Decimal _admOutboxId)
		{
			#region Init Properties

			this.AdmOutboxId = _admOutboxId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AdmOutboxBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AdmOutboxBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AdmOutboxId property
		private System.Decimal _admOutboxId;
		
		/// <summary>
		/// Gets or sets the AdmOutboxId property.
		/// </summary>
		public System.Decimal AdmOutboxId
		{
			get { return _admOutboxId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AdmOutboxId = value;
				
				_admOutboxId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AdmOutboxId = ( values["AdmOutboxId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["AdmOutboxId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AdmOutboxId", AdmOutboxId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AdmOutboxId: {0}{1}",
								AdmOutboxId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AdmOutboxColumn Enum
	
	/// <summary>
	/// Enumerate the AdmOutbox columns.
	/// </summary>
	[Serializable]
	public enum AdmOutboxColumn : int
	{
		/// <summary>
		/// AdmOutboxId : 
		/// </summary>
		[EnumTextValue("ADM_OUTBOX_ID")]
		[ColumnEnum("ADM_OUTBOX_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		AdmOutboxId = 1,
		/// <summary>
		/// AdmAppMessageId : 
		/// </summary>
		[EnumTextValue("ADM_APP_MESSAGE_ID")]
		[ColumnEnum("ADM_APP_MESSAGE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AdmAppMessageId = 2,
		/// <summary>
		/// OutMsgUserFrom : 
		/// </summary>
		[EnumTextValue("OUT_MSG_USER_FROM")]
		[ColumnEnum("OUT_MSG_USER_FROM", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		OutMsgUserFrom = 3,
		/// <summary>
		/// OutMsgUserTo : 
		/// </summary>
		[EnumTextValue("OUT_MSG_USER_TO")]
		[ColumnEnum("OUT_MSG_USER_TO", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		OutMsgUserTo = 4,
		/// <summary>
		/// OutMsgAppFrom : 
		/// </summary>
		[EnumTextValue("OUT_MSG_APP_FROM")]
		[ColumnEnum("OUT_MSG_APP_FROM", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		OutMsgAppFrom = 5,
		/// <summary>
		/// OutMsgAppTo : 
		/// </summary>
		[EnumTextValue("OUT_MSG_APP_TO")]
		[ColumnEnum("OUT_MSG_APP_TO", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		OutMsgAppTo = 6
	}//End enum

	#endregion AdmOutboxColumn Enum

} // end namespace
