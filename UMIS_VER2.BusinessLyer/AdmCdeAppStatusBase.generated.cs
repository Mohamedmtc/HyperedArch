
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AdmCdeAppStatus.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ADM_CDE_APP_STATUS' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AdmCdeAppStatusBase : EntityBase, IAdmCdeAppStatus, IEntityId<AdmCdeAppStatusKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AdmCdeAppStatusEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AdmCdeAppStatusEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AdmCdeAppStatusEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AdmCdeAppStatus> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmCdeAppStatusEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmCdeAppStatusEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AdmCdeAppStatusBase"/> instance.
		///</summary>
		public AdmCdeAppStatusBase()
		{
			this.entityData = new AdmCdeAppStatusEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AdmCdeAppStatusBase"/> instance.
		///</summary>
		///<param name="_admCdeAppStatusId">حالة المتقدم</param>
		///<param name="_entMainId">الكليه-default =NULL</param>
		///<param name="_appStatusAr"></param>
		///<param name="_appStatusEn">wait- withdraw - .....   not used yet</param>
		///<param name="_statusOrder"></param>
		///<param name="_svAutoMsgTmpltId">notification message</param>
		///<param name="_orientFlg"></param>
		///<param name="_isLast"></param>
		///<param name="_admCdeStatusPrereqId"></param>
		///<param name="_admCdeFeeId">لائحة بنود مصروفات القبول</param>
		///<param name="_enumId">not used yet</param>
		public AdmCdeAppStatusBase(System.Decimal _admCdeAppStatusId, System.Decimal? _entMainId, 
			System.String _appStatusAr, System.String _appStatusEn, System.Int32? _statusOrder, 
			System.Decimal? _svAutoMsgTmpltId, System.Int32? _orientFlg, System.Boolean? _isLast, 
			System.Decimal? _admCdeStatusPrereqId, System.Decimal? _admCdeFeeId, System.Int32? _enumId)
		{
			this.entityData = new AdmCdeAppStatusEntityData();
			this.backupData = null;

			this.AdmCdeAppStatusId = _admCdeAppStatusId;
			this.EntMainId = _entMainId;
			this.AppStatusAr = _appStatusAr;
			this.AppStatusEn = _appStatusEn;
			this.StatusOrder = _statusOrder;
			this.SvAutoMsgTmpltId = _svAutoMsgTmpltId;
			this.OrientFlg = _orientFlg;
			this.IsLast = _isLast;
			this.AdmCdeStatusPrereqId = _admCdeStatusPrereqId;
			this.AdmCdeFeeId = _admCdeFeeId;
			this.EnumId = _enumId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AdmCdeAppStatus"/> instance.
		///</summary>
		///<param name="_admCdeAppStatusId">حالة المتقدم</param>
		///<param name="_entMainId">الكليه-default =NULL</param>
		///<param name="_appStatusAr"></param>
		///<param name="_appStatusEn">wait- withdraw - .....   not used yet</param>
		///<param name="_statusOrder"></param>
		///<param name="_svAutoMsgTmpltId">notification message</param>
		///<param name="_orientFlg"></param>
		///<param name="_isLast"></param>
		///<param name="_admCdeStatusPrereqId"></param>
		///<param name="_admCdeFeeId">لائحة بنود مصروفات القبول</param>
		///<param name="_enumId">not used yet</param>
		public static AdmCdeAppStatus CreateAdmCdeAppStatus(System.Decimal _admCdeAppStatusId, System.Decimal? _entMainId, 
			System.String _appStatusAr, System.String _appStatusEn, System.Int32? _statusOrder, 
			System.Decimal? _svAutoMsgTmpltId, System.Int32? _orientFlg, System.Boolean? _isLast, 
			System.Decimal? _admCdeStatusPrereqId, System.Decimal? _admCdeFeeId, System.Int32? _enumId)
		{
			AdmCdeAppStatus newAdmCdeAppStatus = new AdmCdeAppStatus();
			newAdmCdeAppStatus.AdmCdeAppStatusId = _admCdeAppStatusId;
			newAdmCdeAppStatus.EntMainId = _entMainId;
			newAdmCdeAppStatus.AppStatusAr = _appStatusAr;
			newAdmCdeAppStatus.AppStatusEn = _appStatusEn;
			newAdmCdeAppStatus.StatusOrder = _statusOrder;
			newAdmCdeAppStatus.SvAutoMsgTmpltId = _svAutoMsgTmpltId;
			newAdmCdeAppStatus.OrientFlg = _orientFlg;
			newAdmCdeAppStatus.IsLast = _isLast;
			newAdmCdeAppStatus.AdmCdeStatusPrereqId = _admCdeStatusPrereqId;
			newAdmCdeAppStatus.AdmCdeFeeId = _admCdeFeeId;
			newAdmCdeAppStatus.EnumId = _enumId;
			return newAdmCdeAppStatus;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AdmCdeAppStatusId property. 
		///		حالة المتقدم
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"حالة المتقدم"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal AdmCdeAppStatusId
		{
			get
			{
				return this.entityData.AdmCdeAppStatusId; 
			}
			
			set
			{
				if (this.entityData.AdmCdeAppStatusId == value)
					return;
					
				OnColumnChanging(AdmCdeAppStatusColumn.AdmCdeAppStatusId, this.entityData.AdmCdeAppStatusId);
				this.entityData.AdmCdeAppStatusId = value;
				this.EntityId.AdmCdeAppStatusId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeAppStatusColumn.AdmCdeAppStatusId, this.entityData.AdmCdeAppStatusId);
				OnPropertyChanged("AdmCdeAppStatusId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ADM_CDE_APP_STATUS_ID property.
		///		حالة المتقدم
		/// </summary>
		/// <remarks>This is the original value of the ADM_CDE_APP_STATUS_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalAdmCdeAppStatusId
		{
			get { return this.entityData.OriginalAdmCdeAppStatusId; }
			set { this.entityData.OriginalAdmCdeAppStatusId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EntMainId property. 
		///		الكليه-default =NULL
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntMainIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"الكليه-default =NULL"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntMainId
		{
			get
			{
				return this.entityData.EntMainId; 
			}
			
			set
			{
				if (this.entityData.EntMainId == value)
					return;
					
				OnColumnChanging(AdmCdeAppStatusColumn.EntMainId, this.entityData.EntMainId);
				this.entityData.EntMainId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeAppStatusColumn.EntMainId, this.entityData.EntMainId);
				OnPropertyChanged("EntMainId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AppStatusAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String AppStatusAr
		{
			get
			{
				return this.entityData.AppStatusAr; 
			}
			
			set
			{
				if (this.entityData.AppStatusAr == value)
					return;
					
				OnColumnChanging(AdmCdeAppStatusColumn.AppStatusAr, this.entityData.AppStatusAr);
				this.entityData.AppStatusAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeAppStatusColumn.AppStatusAr, this.entityData.AppStatusAr);
				OnPropertyChanged("AppStatusAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AppStatusEn property. 
		///		wait- withdraw - .....   not used yet
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"wait- withdraw - .....   not used yet"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String AppStatusEn
		{
			get
			{
				return this.entityData.AppStatusEn; 
			}
			
			set
			{
				if (this.entityData.AppStatusEn == value)
					return;
					
				OnColumnChanging(AdmCdeAppStatusColumn.AppStatusEn, this.entityData.AppStatusEn);
				this.entityData.AppStatusEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeAppStatusColumn.AppStatusEn, this.entityData.AppStatusEn);
				OnPropertyChanged("AppStatusEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StatusOrder property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsStatusOrderNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? StatusOrder
		{
			get
			{
				return this.entityData.StatusOrder; 
			}
			
			set
			{
				if (this.entityData.StatusOrder == value)
					return;
					
				OnColumnChanging(AdmCdeAppStatusColumn.StatusOrder, this.entityData.StatusOrder);
				this.entityData.StatusOrder = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeAppStatusColumn.StatusOrder, this.entityData.StatusOrder);
				OnPropertyChanged("StatusOrder");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SvAutoMsgTmpltId property. 
		///		notification message
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSvAutoMsgTmpltIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"notification message"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SvAutoMsgTmpltId
		{
			get
			{
				return this.entityData.SvAutoMsgTmpltId; 
			}
			
			set
			{
				if (this.entityData.SvAutoMsgTmpltId == value)
					return;
					
				OnColumnChanging(AdmCdeAppStatusColumn.SvAutoMsgTmpltId, this.entityData.SvAutoMsgTmpltId);
				this.entityData.SvAutoMsgTmpltId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeAppStatusColumn.SvAutoMsgTmpltId, this.entityData.SvAutoMsgTmpltId);
				OnPropertyChanged("SvAutoMsgTmpltId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrientFlg property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsOrientFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? OrientFlg
		{
			get
			{
				return this.entityData.OrientFlg; 
			}
			
			set
			{
				if (this.entityData.OrientFlg == value)
					return;
					
				OnColumnChanging(AdmCdeAppStatusColumn.OrientFlg, this.entityData.OrientFlg);
				this.entityData.OrientFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeAppStatusColumn.OrientFlg, this.entityData.OrientFlg);
				OnPropertyChanged("OrientFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsLast property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsLastNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsLast
		{
			get
			{
				return this.entityData.IsLast; 
			}
			
			set
			{
				if (this.entityData.IsLast == value)
					return;
					
				OnColumnChanging(AdmCdeAppStatusColumn.IsLast, this.entityData.IsLast);
				this.entityData.IsLast = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeAppStatusColumn.IsLast, this.entityData.IsLast);
				OnPropertyChanged("IsLast");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmCdeStatusPrereqId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmCdeStatusPrereqIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmCdeStatusPrereqId
		{
			get
			{
				return this.entityData.AdmCdeStatusPrereqId; 
			}
			
			set
			{
				if (this.entityData.AdmCdeStatusPrereqId == value)
					return;
					
				OnColumnChanging(AdmCdeAppStatusColumn.AdmCdeStatusPrereqId, this.entityData.AdmCdeStatusPrereqId);
				this.entityData.AdmCdeStatusPrereqId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeAppStatusColumn.AdmCdeStatusPrereqId, this.entityData.AdmCdeStatusPrereqId);
				OnPropertyChanged("AdmCdeStatusPrereqId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmCdeFeeId property. 
		///		لائحة بنود مصروفات القبول
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmCdeFeeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"لائحة بنود مصروفات القبول"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmCdeFeeId
		{
			get
			{
				return this.entityData.AdmCdeFeeId; 
			}
			
			set
			{
				if (this.entityData.AdmCdeFeeId == value)
					return;
					
				OnColumnChanging(AdmCdeAppStatusColumn.AdmCdeFeeId, this.entityData.AdmCdeFeeId);
				this.entityData.AdmCdeFeeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeAppStatusColumn.AdmCdeFeeId, this.entityData.AdmCdeFeeId);
				OnPropertyChanged("AdmCdeFeeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EnumId property. 
		///		not used yet
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsEnumIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"not used yet"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? EnumId
		{
			get
			{
				return this.entityData.EnumId; 
			}
			
			set
			{
				if (this.entityData.EnumId == value)
					return;
					
				OnColumnChanging(AdmCdeAppStatusColumn.EnumId, this.entityData.EnumId);
				this.entityData.EnumId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdeAppStatusColumn.EnumId, this.entityData.EnumId);
				OnPropertyChanged("EnumId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdeFee"/>.
		/// </summary>
		/// <value>The source AdmCdeFee for AdmCdeFeeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmCdeFee AdmCdeFeeIdSource
      	{
            get { return entityData.AdmCdeFeeIdSource; }
            set { entityData.AdmCdeFeeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdeStatus"/>.
		/// </summary>
		/// <value>The source AdmCdeStatus for AdmCdeStatusPrereqId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmCdeStatus AdmCdeStatusPrereqIdSource
      	{
            get { return entityData.AdmCdeStatusPrereqIdSource; }
            set { entityData.AdmCdeStatusPrereqIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return entityData.EntMainIdSource; }
            set { entityData.EntMainIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SvAutoMsgTmplt"/>.
		/// </summary>
		/// <value>The source SvAutoMsgTmplt for SvAutoMsgTmpltId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SvAutoMsgTmplt SvAutoMsgTmpltIdSource
      	{
            get { return entityData.SvAutoMsgTmpltIdSource; }
            set { entityData.SvAutoMsgTmpltIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of AdmAppRegHistory objects
		///	which are related to this object through the relation FK_ADM_APP_REG_HISTORY_ADM_CDE_APP_STATUS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppRegHistory> AdmAppRegHistoryCollection
		{
			get { return entityData.AdmAppRegHistoryCollection; }
			set { entityData.AdmAppRegHistoryCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AppStatusAr", "App Status Ar", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AppStatusEn", "App Status En", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ADM_CDE_APP_STATUS"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ADM_CDE_APP_STATUS_ID", "ENT_MAIN_ID", "APP_STATUS_AR", "APP_STATUS_EN", "STATUS_ORDER", "SV_AUTO_MSG_TMPLT_ID", "ORIENT_FLG", "IS_LAST", "ADM_CDE_STATUS_PREREQ_ID", "ADM_CDE_FEE_ID", "ENUM_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AdmCdeAppStatusEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AdmCdeAppStatus) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AdmCdeAppStatus>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AdmCdeAppStatus);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AdmCdeAppStatus Entity 
		///</summary>
		protected virtual AdmCdeAppStatus Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AdmCdeAppStatus copy = new AdmCdeAppStatus();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AdmCdeAppStatusId = this.AdmCdeAppStatusId;
					copy.OriginalAdmCdeAppStatusId = this.OriginalAdmCdeAppStatusId;
				copy.EntMainId = this.EntMainId;
				copy.AppStatusAr = this.AppStatusAr;
				copy.AppStatusEn = this.AppStatusEn;
				copy.StatusOrder = this.StatusOrder;
				copy.SvAutoMsgTmpltId = this.SvAutoMsgTmpltId;
				copy.OrientFlg = this.OrientFlg;
				copy.IsLast = this.IsLast;
				copy.AdmCdeStatusPrereqId = this.AdmCdeStatusPrereqId;
				copy.AdmCdeFeeId = this.AdmCdeFeeId;
				copy.EnumId = this.EnumId;
			
			if (this.AdmCdeFeeIdSource != null && existingCopies.Contains(this.AdmCdeFeeIdSource))
				copy.AdmCdeFeeIdSource = existingCopies[this.AdmCdeFeeIdSource] as AdmCdeFee;
			else
				copy.AdmCdeFeeIdSource = MakeCopyOf(this.AdmCdeFeeIdSource, existingCopies) as AdmCdeFee;
			if (this.AdmCdeStatusPrereqIdSource != null && existingCopies.Contains(this.AdmCdeStatusPrereqIdSource))
				copy.AdmCdeStatusPrereqIdSource = existingCopies[this.AdmCdeStatusPrereqIdSource] as AdmCdeStatus;
			else
				copy.AdmCdeStatusPrereqIdSource = MakeCopyOf(this.AdmCdeStatusPrereqIdSource, existingCopies) as AdmCdeStatus;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				copy.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				copy.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.SvAutoMsgTmpltIdSource != null && existingCopies.Contains(this.SvAutoMsgTmpltIdSource))
				copy.SvAutoMsgTmpltIdSource = existingCopies[this.SvAutoMsgTmpltIdSource] as SvAutoMsgTmplt;
			else
				copy.SvAutoMsgTmpltIdSource = MakeCopyOf(this.SvAutoMsgTmpltIdSource, existingCopies) as SvAutoMsgTmplt;
		
			//deep copy nested objects
			copy.AdmAppRegHistoryCollection = (TList<AdmAppRegHistory>) MakeCopyOf(this.AdmAppRegHistoryCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AdmCdeAppStatus Entity 
		///</summary>
		public virtual AdmCdeAppStatus Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AdmCdeAppStatus Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AdmCdeAppStatus DeepCopy()
		{
			return EntityHelper.Clone<AdmCdeAppStatus>(this as AdmCdeAppStatus);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AdmCdeAppStatusEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AdmCdeAppStatusEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AdmCdeAppStatusEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AdmCdeAppStatusColumn column)
		{
			switch(column)
			{
					case AdmCdeAppStatusColumn.AdmCdeAppStatusId:
					return entityData.AdmCdeAppStatusId != _originalData.AdmCdeAppStatusId;
					case AdmCdeAppStatusColumn.EntMainId:
					return entityData.EntMainId != _originalData.EntMainId;
					case AdmCdeAppStatusColumn.AppStatusAr:
					return entityData.AppStatusAr != _originalData.AppStatusAr;
					case AdmCdeAppStatusColumn.AppStatusEn:
					return entityData.AppStatusEn != _originalData.AppStatusEn;
					case AdmCdeAppStatusColumn.StatusOrder:
					return entityData.StatusOrder != _originalData.StatusOrder;
					case AdmCdeAppStatusColumn.SvAutoMsgTmpltId:
					return entityData.SvAutoMsgTmpltId != _originalData.SvAutoMsgTmpltId;
					case AdmCdeAppStatusColumn.OrientFlg:
					return entityData.OrientFlg != _originalData.OrientFlg;
					case AdmCdeAppStatusColumn.IsLast:
					return entityData.IsLast != _originalData.IsLast;
					case AdmCdeAppStatusColumn.AdmCdeStatusPrereqId:
					return entityData.AdmCdeStatusPrereqId != _originalData.AdmCdeStatusPrereqId;
					case AdmCdeAppStatusColumn.AdmCdeFeeId:
					return entityData.AdmCdeFeeId != _originalData.AdmCdeFeeId;
					case AdmCdeAppStatusColumn.EnumId:
					return entityData.EnumId != _originalData.EnumId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AdmCdeAppStatusColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AdmCdeAppStatusId != _originalData.AdmCdeAppStatusId;
			result = result || entityData.EntMainId != _originalData.EntMainId;
			result = result || entityData.AppStatusAr != _originalData.AppStatusAr;
			result = result || entityData.AppStatusEn != _originalData.AppStatusEn;
			result = result || entityData.StatusOrder != _originalData.StatusOrder;
			result = result || entityData.SvAutoMsgTmpltId != _originalData.SvAutoMsgTmpltId;
			result = result || entityData.OrientFlg != _originalData.OrientFlg;
			result = result || entityData.IsLast != _originalData.IsLast;
			result = result || entityData.AdmCdeStatusPrereqId != _originalData.AdmCdeStatusPrereqId;
			result = result || entityData.AdmCdeFeeId != _originalData.AdmCdeFeeId;
			result = result || entityData.EnumId != _originalData.EnumId;
			return result;
		}	
		
		///<summary>
		///  Returns a AdmCdeAppStatus Entity with the original data.
		///</summary>
		public AdmCdeAppStatus GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAdmCdeAppStatus(
				_originalData.AdmCdeAppStatusId,
				_originalData.EntMainId,
				_originalData.AppStatusAr,
				_originalData.AppStatusEn,
				_originalData.StatusOrder,
				_originalData.SvAutoMsgTmpltId,
				_originalData.OrientFlg,
				_originalData.IsLast,
				_originalData.AdmCdeStatusPrereqId,
				_originalData.AdmCdeFeeId,
				_originalData.EnumId
				);
				
			return (AdmCdeAppStatus)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AdmCdeAppStatusBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AdmCdeAppStatusBase)
				return ValueEquals(this, (AdmCdeAppStatusBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AdmCdeAppStatusBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AdmCdeAppStatusId.GetHashCode() ^ 
					((this.EntMainId == null) ? string.Empty : this.EntMainId.ToString()).GetHashCode() ^ 
					((this.AppStatusAr == null) ? string.Empty : this.AppStatusAr.ToString()).GetHashCode() ^ 
					((this.AppStatusEn == null) ? string.Empty : this.AppStatusEn.ToString()).GetHashCode() ^ 
					((this.StatusOrder == null) ? string.Empty : this.StatusOrder.ToString()).GetHashCode() ^ 
					((this.SvAutoMsgTmpltId == null) ? string.Empty : this.SvAutoMsgTmpltId.ToString()).GetHashCode() ^ 
					((this.OrientFlg == null) ? string.Empty : this.OrientFlg.ToString()).GetHashCode() ^ 
					((this.IsLast == null) ? string.Empty : this.IsLast.ToString()).GetHashCode() ^ 
					((this.AdmCdeStatusPrereqId == null) ? string.Empty : this.AdmCdeStatusPrereqId.ToString()).GetHashCode() ^ 
					((this.AdmCdeFeeId == null) ? string.Empty : this.AdmCdeFeeId.ToString()).GetHashCode() ^ 
					((this.EnumId == null) ? string.Empty : this.EnumId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AdmCdeAppStatusBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AdmCdeAppStatusBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AdmCdeAppStatusBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AdmCdeAppStatusBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AdmCdeAppStatusBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AdmCdeAppStatusBase Object1, AdmCdeAppStatusBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AdmCdeAppStatusId != Object2.AdmCdeAppStatusId)
				equal = false;
			if ( Object1.EntMainId != null && Object2.EntMainId != null )
			{
				if (Object1.EntMainId != Object2.EntMainId)
					equal = false;
			}
			else if (Object1.EntMainId == null ^ Object2.EntMainId == null )
			{
				equal = false;
			}
			if ( Object1.AppStatusAr != null && Object2.AppStatusAr != null )
			{
				if (Object1.AppStatusAr != Object2.AppStatusAr)
					equal = false;
			}
			else if (Object1.AppStatusAr == null ^ Object2.AppStatusAr == null )
			{
				equal = false;
			}
			if ( Object1.AppStatusEn != null && Object2.AppStatusEn != null )
			{
				if (Object1.AppStatusEn != Object2.AppStatusEn)
					equal = false;
			}
			else if (Object1.AppStatusEn == null ^ Object2.AppStatusEn == null )
			{
				equal = false;
			}
			if ( Object1.StatusOrder != null && Object2.StatusOrder != null )
			{
				if (Object1.StatusOrder != Object2.StatusOrder)
					equal = false;
			}
			else if (Object1.StatusOrder == null ^ Object2.StatusOrder == null )
			{
				equal = false;
			}
			if ( Object1.SvAutoMsgTmpltId != null && Object2.SvAutoMsgTmpltId != null )
			{
				if (Object1.SvAutoMsgTmpltId != Object2.SvAutoMsgTmpltId)
					equal = false;
			}
			else if (Object1.SvAutoMsgTmpltId == null ^ Object2.SvAutoMsgTmpltId == null )
			{
				equal = false;
			}
			if ( Object1.OrientFlg != null && Object2.OrientFlg != null )
			{
				if (Object1.OrientFlg != Object2.OrientFlg)
					equal = false;
			}
			else if (Object1.OrientFlg == null ^ Object2.OrientFlg == null )
			{
				equal = false;
			}
			if ( Object1.IsLast != null && Object2.IsLast != null )
			{
				if (Object1.IsLast != Object2.IsLast)
					equal = false;
			}
			else if (Object1.IsLast == null ^ Object2.IsLast == null )
			{
				equal = false;
			}
			if ( Object1.AdmCdeStatusPrereqId != null && Object2.AdmCdeStatusPrereqId != null )
			{
				if (Object1.AdmCdeStatusPrereqId != Object2.AdmCdeStatusPrereqId)
					equal = false;
			}
			else if (Object1.AdmCdeStatusPrereqId == null ^ Object2.AdmCdeStatusPrereqId == null )
			{
				equal = false;
			}
			if ( Object1.AdmCdeFeeId != null && Object2.AdmCdeFeeId != null )
			{
				if (Object1.AdmCdeFeeId != Object2.AdmCdeFeeId)
					equal = false;
			}
			else if (Object1.AdmCdeFeeId == null ^ Object2.AdmCdeFeeId == null )
			{
				equal = false;
			}
			if ( Object1.EnumId != null && Object2.EnumId != null )
			{
				if (Object1.EnumId != Object2.EnumId)
					equal = false;
			}
			else if (Object1.EnumId == null ^ Object2.EnumId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AdmCdeAppStatusBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AdmCdeAppStatusComparer GetComparer()
        {
            return new AdmCdeAppStatusComparer();
        }
        */

        // Comparer delegates back to AdmCdeAppStatus
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AdmCdeAppStatus rhs, AdmCdeAppStatusColumn which)
        {
            switch (which)
            {
            	
            	
            	case AdmCdeAppStatusColumn.AdmCdeAppStatusId:
            		return this.AdmCdeAppStatusId.CompareTo(rhs.AdmCdeAppStatusId);
            		
            		                 
            	
            	
            	case AdmCdeAppStatusColumn.EntMainId:
            		return this.EntMainId.Value.CompareTo(rhs.EntMainId.Value);
            		
            		                 
            	
            	
            	case AdmCdeAppStatusColumn.AppStatusAr:
            		return this.AppStatusAr.CompareTo(rhs.AppStatusAr);
            		
            		                 
            	
            	
            	case AdmCdeAppStatusColumn.AppStatusEn:
            		return this.AppStatusEn.CompareTo(rhs.AppStatusEn);
            		
            		                 
            	
            	
            	case AdmCdeAppStatusColumn.StatusOrder:
            		return this.StatusOrder.Value.CompareTo(rhs.StatusOrder.Value);
            		
            		                 
            	
            	
            	case AdmCdeAppStatusColumn.SvAutoMsgTmpltId:
            		return this.SvAutoMsgTmpltId.Value.CompareTo(rhs.SvAutoMsgTmpltId.Value);
            		
            		                 
            	
            	
            	case AdmCdeAppStatusColumn.OrientFlg:
            		return this.OrientFlg.Value.CompareTo(rhs.OrientFlg.Value);
            		
            		                 
            	
            	
            	case AdmCdeAppStatusColumn.IsLast:
            		return this.IsLast.Value.CompareTo(rhs.IsLast.Value);
            		
            		                 
            	
            	
            	case AdmCdeAppStatusColumn.AdmCdeStatusPrereqId:
            		return this.AdmCdeStatusPrereqId.Value.CompareTo(rhs.AdmCdeStatusPrereqId.Value);
            		
            		                 
            	
            	
            	case AdmCdeAppStatusColumn.AdmCdeFeeId:
            		return this.AdmCdeFeeId.Value.CompareTo(rhs.AdmCdeFeeId.Value);
            		
            		                 
            	
            	
            	case AdmCdeAppStatusColumn.EnumId:
            		return this.EnumId.Value.CompareTo(rhs.EnumId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AdmCdeAppStatusKey> Members
		
		// member variable for the EntityId property
		private AdmCdeAppStatusKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AdmCdeAppStatusKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AdmCdeAppStatusKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AdmCdeAppStatus")
					.Append("|").Append( this.AdmCdeAppStatusId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- AdmCdeAppStatusId: {0}{11}- EntMainId: {1}{11}- AppStatusAr: {2}{11}- AppStatusEn: {3}{11}- StatusOrder: {4}{11}- SvAutoMsgTmpltId: {5}{11}- OrientFlg: {6}{11}- IsLast: {7}{11}- AdmCdeStatusPrereqId: {8}{11}- AdmCdeFeeId: {9}{11}- EnumId: {10}{11}{13}", 
				this.AdmCdeAppStatusId,
				(this.EntMainId == null) ? string.Empty : this.EntMainId.ToString(),
				(this.AppStatusAr == null) ? string.Empty : this.AppStatusAr.ToString(),
				(this.AppStatusEn == null) ? string.Empty : this.AppStatusEn.ToString(),
				(this.StatusOrder == null) ? string.Empty : this.StatusOrder.ToString(),
				(this.SvAutoMsgTmpltId == null) ? string.Empty : this.SvAutoMsgTmpltId.ToString(),
				(this.OrientFlg == null) ? string.Empty : this.OrientFlg.ToString(),
				(this.IsLast == null) ? string.Empty : this.IsLast.ToString(),
				(this.AdmCdeStatusPrereqId == null) ? string.Empty : this.AdmCdeStatusPrereqId.ToString(),
				(this.AdmCdeFeeId == null) ? string.Empty : this.AdmCdeFeeId.ToString(),
				(this.EnumId == null) ? string.Empty : this.EnumId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ADM_CDE_APP_STATUS' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AdmCdeAppStatusEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ADM_CDE_APP_STATUS_ID : حالة المتقدم
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ADM_CDE_APP_STATUS"</remarks>
		public System.Decimal AdmCdeAppStatusId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalAdmCdeAppStatusId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ENT_MAIN_ID : الكليه-default =NULL
		/// </summary>
		public System.Decimal?		  EntMainId = null;
		
		/// <summary>
		/// APP_STATUS_AR : 
		/// </summary>
		public System.String		  AppStatusAr = null;
		
		/// <summary>
		/// APP_STATUS_EN : wait- withdraw - .....   not used yet
		/// </summary>
		public System.String		  AppStatusEn = null;
		
		/// <summary>
		/// STATUS_ORDER : 
		/// </summary>
		public System.Int32?		  StatusOrder = null;
		
		/// <summary>
		/// SV_AUTO_MSG_TMPLT_ID : notification message
		/// </summary>
		public System.Decimal?		  SvAutoMsgTmpltId = null;
		
		/// <summary>
		/// ORIENT_FLG : 
		/// </summary>
		public System.Int32?		  OrientFlg = null;
		
		/// <summary>
		/// IS_LAST : 
		/// </summary>
		public System.Boolean?		  IsLast = null;
		
		/// <summary>
		/// ADM_CDE_STATUS_PREREQ_ID : 
		/// </summary>
		public System.Decimal?		  AdmCdeStatusPrereqId = null;
		
		/// <summary>
		/// ADM_CDE_FEE_ID : لائحة بنود مصروفات القبول
		/// </summary>
		public System.Decimal?		  AdmCdeFeeId = null;
		
		/// <summary>
		/// ENUM_ID : not used yet
		/// </summary>
		public System.Int32?		  EnumId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdmCdeFee _admCdeFeeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdeFee"/>.
		/// </summary>
		/// <value>The source AdmCdeFee for AdmCdeFeeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmCdeFee AdmCdeFeeIdSource
      	{
            get { return this._admCdeFeeIdSource; }
            set { this._admCdeFeeIdSource = value; }
      	}
		private AdmCdeStatus _admCdeStatusPrereqIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdeStatus"/>.
		/// </summary>
		/// <value>The source AdmCdeStatus for AdmCdeStatusPrereqId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmCdeStatus AdmCdeStatusPrereqIdSource
      	{
            get { return this._admCdeStatusPrereqIdSource; }
            set { this._admCdeStatusPrereqIdSource = value; }
      	}
		private EntityMain _entMainIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return this._entMainIdSource; }
            set { this._entMainIdSource = value; }
      	}
		private SvAutoMsgTmplt _svAutoMsgTmpltIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SvAutoMsgTmplt"/>.
		/// </summary>
		/// <value>The source SvAutoMsgTmplt for SvAutoMsgTmpltId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SvAutoMsgTmplt SvAutoMsgTmpltIdSource
      	{
            get { return this._svAutoMsgTmpltIdSource; }
            set { this._svAutoMsgTmpltIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region AdmAppRegHistoryCollection
		
		private TList<AdmAppRegHistory> _admAppRegHistoryAdmCdeAppStatusId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppRegHistoryAdmCdeAppStatusId
		/// </summary>
		
		public TList<AdmAppRegHistory> AdmAppRegHistoryCollection
		{
			get
			{
				if (_admAppRegHistoryAdmCdeAppStatusId == null)
				{
				_admAppRegHistoryAdmCdeAppStatusId = new TList<AdmAppRegHistory>();
				}
	
				return _admAppRegHistoryAdmCdeAppStatusId;
			}
			set { _admAppRegHistoryAdmCdeAppStatusId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AdmCdeAppStatusEntityData _tmp = new AdmCdeAppStatusEntityData();
						
			_tmp.AdmCdeAppStatusId = this.AdmCdeAppStatusId;
			_tmp.OriginalAdmCdeAppStatusId = this.OriginalAdmCdeAppStatusId;
			
			_tmp.EntMainId = this.EntMainId;
			_tmp.AppStatusAr = this.AppStatusAr;
			_tmp.AppStatusEn = this.AppStatusEn;
			_tmp.StatusOrder = this.StatusOrder;
			_tmp.SvAutoMsgTmpltId = this.SvAutoMsgTmpltId;
			_tmp.OrientFlg = this.OrientFlg;
			_tmp.IsLast = this.IsLast;
			_tmp.AdmCdeStatusPrereqId = this.AdmCdeStatusPrereqId;
			_tmp.AdmCdeFeeId = this.AdmCdeFeeId;
			_tmp.EnumId = this.EnumId;
			
			#region Source Parent Composite Entities
			if (this.AdmCdeFeeIdSource != null)
				_tmp.AdmCdeFeeIdSource = MakeCopyOf(this.AdmCdeFeeIdSource) as AdmCdeFee;
			if (this.AdmCdeStatusPrereqIdSource != null)
				_tmp.AdmCdeStatusPrereqIdSource = MakeCopyOf(this.AdmCdeStatusPrereqIdSource) as AdmCdeStatus;
			if (this.EntMainIdSource != null)
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource) as EntityMain;
			if (this.SvAutoMsgTmpltIdSource != null)
				_tmp.SvAutoMsgTmpltIdSource = MakeCopyOf(this.SvAutoMsgTmpltIdSource) as SvAutoMsgTmplt;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._admAppRegHistoryAdmCdeAppStatusId != null)
				_tmp.AdmAppRegHistoryCollection = (TList<AdmAppRegHistory>) MakeCopyOf(this.AdmAppRegHistoryCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AdmCdeAppStatusEntityData _tmp = new AdmCdeAppStatusEntityData();
						
			_tmp.AdmCdeAppStatusId = this.AdmCdeAppStatusId;
			_tmp.OriginalAdmCdeAppStatusId = this.OriginalAdmCdeAppStatusId;
			
			_tmp.EntMainId = this.EntMainId;
			_tmp.AppStatusAr = this.AppStatusAr;
			_tmp.AppStatusEn = this.AppStatusEn;
			_tmp.StatusOrder = this.StatusOrder;
			_tmp.SvAutoMsgTmpltId = this.SvAutoMsgTmpltId;
			_tmp.OrientFlg = this.OrientFlg;
			_tmp.IsLast = this.IsLast;
			_tmp.AdmCdeStatusPrereqId = this.AdmCdeStatusPrereqId;
			_tmp.AdmCdeFeeId = this.AdmCdeFeeId;
			_tmp.EnumId = this.EnumId;
			
			#region Source Parent Composite Entities
			if (this.AdmCdeFeeIdSource != null && existingCopies.Contains(this.AdmCdeFeeIdSource))
				_tmp.AdmCdeFeeIdSource = existingCopies[this.AdmCdeFeeIdSource] as AdmCdeFee;
			else
				_tmp.AdmCdeFeeIdSource = MakeCopyOf(this.AdmCdeFeeIdSource, existingCopies) as AdmCdeFee;
			if (this.AdmCdeStatusPrereqIdSource != null && existingCopies.Contains(this.AdmCdeStatusPrereqIdSource))
				_tmp.AdmCdeStatusPrereqIdSource = existingCopies[this.AdmCdeStatusPrereqIdSource] as AdmCdeStatus;
			else
				_tmp.AdmCdeStatusPrereqIdSource = MakeCopyOf(this.AdmCdeStatusPrereqIdSource, existingCopies) as AdmCdeStatus;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				_tmp.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.SvAutoMsgTmpltIdSource != null && existingCopies.Contains(this.SvAutoMsgTmpltIdSource))
				_tmp.SvAutoMsgTmpltIdSource = existingCopies[this.SvAutoMsgTmpltIdSource] as SvAutoMsgTmplt;
			else
				_tmp.SvAutoMsgTmpltIdSource = MakeCopyOf(this.SvAutoMsgTmpltIdSource, existingCopies) as SvAutoMsgTmplt;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.AdmAppRegHistoryCollection = (TList<AdmAppRegHistory>) MakeCopyOf(this.AdmAppRegHistoryCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmCdeAppStatusColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AdmCdeAppStatusColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmCdeAppStatusColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AdmCdeAppStatusColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmCdeAppStatusColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AdmCdeAppStatusColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AdmCdeAppStatusEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AdmCdeAppStatusEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmCdeAppStatusColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AdmCdeAppStatusColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AdmCdeAppStatusEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AdmCdeAppStatusEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AdmCdeAppStatusEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AdmCdeAppStatus"/> object.
	/// </remarks>
	public class AdmCdeAppStatusEventArgs : System.EventArgs
	{
		private AdmCdeAppStatusColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AdmCdeAppStatusEventArgs class.
		///</summary>
		public AdmCdeAppStatusEventArgs(AdmCdeAppStatusColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AdmCdeAppStatusEventArgs class.
		///</summary>
		public AdmCdeAppStatusEventArgs(AdmCdeAppStatusColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AdmCdeAppStatusColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AdmCdeAppStatusColumn" />
		public AdmCdeAppStatusColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AdmCdeAppStatus related events.
	///</summary>
	public delegate void AdmCdeAppStatusEventHandler(object sender, AdmCdeAppStatusEventArgs e);
	
	#region AdmCdeAppStatusComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AdmCdeAppStatusComparer : System.Collections.Generic.IComparer<AdmCdeAppStatus>
	{
		AdmCdeAppStatusColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AdmCdeAppStatusComparer"/> class.
        /// </summary>
		public AdmCdeAppStatusComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AdmCdeAppStatusComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AdmCdeAppStatusComparer(AdmCdeAppStatusColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AdmCdeAppStatus"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AdmCdeAppStatus"/> to compare.</param>
        /// <param name="b">The second <c>AdmCdeAppStatus</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AdmCdeAppStatus a, AdmCdeAppStatus b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AdmCdeAppStatus entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AdmCdeAppStatus a, AdmCdeAppStatus b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AdmCdeAppStatusColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AdmCdeAppStatusKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AdmCdeAppStatus"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AdmCdeAppStatusKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AdmCdeAppStatusKey class.
		/// </summary>
		public AdmCdeAppStatusKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmCdeAppStatusKey class.
		/// </summary>
		public AdmCdeAppStatusKey(AdmCdeAppStatusBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AdmCdeAppStatusId = entity.AdmCdeAppStatusId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmCdeAppStatusKey class.
		/// </summary>
		public AdmCdeAppStatusKey(System.Decimal _admCdeAppStatusId)
		{
			#region Init Properties

			this.AdmCdeAppStatusId = _admCdeAppStatusId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AdmCdeAppStatusBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AdmCdeAppStatusBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AdmCdeAppStatusId property
		private System.Decimal _admCdeAppStatusId;
		
		/// <summary>
		/// Gets or sets the AdmCdeAppStatusId property.
		/// </summary>
		public System.Decimal AdmCdeAppStatusId
		{
			get { return _admCdeAppStatusId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AdmCdeAppStatusId = value;
				
				_admCdeAppStatusId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AdmCdeAppStatusId = ( values["AdmCdeAppStatusId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["AdmCdeAppStatusId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AdmCdeAppStatusId", AdmCdeAppStatusId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AdmCdeAppStatusId: {0}{1}",
								AdmCdeAppStatusId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AdmCdeAppStatusColumn Enum
	
	/// <summary>
	/// Enumerate the AdmCdeAppStatus columns.
	/// </summary>
	[Serializable]
	public enum AdmCdeAppStatusColumn : int
	{
		/// <summary>
		/// AdmCdeAppStatusId : حالة المتقدم
		/// </summary>
		[EnumTextValue("ADM_CDE_APP_STATUS_ID")]
		[ColumnEnum("ADM_CDE_APP_STATUS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		AdmCdeAppStatusId = 1,
		/// <summary>
		/// EntMainId : الكليه-default =NULL
		/// </summary>
		[EnumTextValue("ENT_MAIN_ID")]
		[ColumnEnum("ENT_MAIN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntMainId = 2,
		/// <summary>
		/// AppStatusAr : 
		/// </summary>
		[EnumTextValue("APP_STATUS_AR")]
		[ColumnEnum("APP_STATUS_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		AppStatusAr = 3,
		/// <summary>
		/// AppStatusEn : wait- withdraw - .....   not used yet
		/// </summary>
		[EnumTextValue("APP_STATUS_EN")]
		[ColumnEnum("APP_STATUS_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		AppStatusEn = 4,
		/// <summary>
		/// StatusOrder : 
		/// </summary>
		[EnumTextValue("STATUS_ORDER")]
		[ColumnEnum("STATUS_ORDER", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		StatusOrder = 5,
		/// <summary>
		/// SvAutoMsgTmpltId : notification message
		/// </summary>
		[EnumTextValue("SV_AUTO_MSG_TMPLT_ID")]
		[ColumnEnum("SV_AUTO_MSG_TMPLT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SvAutoMsgTmpltId = 6,
		/// <summary>
		/// OrientFlg : 
		/// </summary>
		[EnumTextValue("ORIENT_FLG")]
		[ColumnEnum("ORIENT_FLG", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		OrientFlg = 7,
		/// <summary>
		/// IsLast : 
		/// </summary>
		[EnumTextValue("IS_LAST")]
		[ColumnEnum("IS_LAST", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsLast = 8,
		/// <summary>
		/// AdmCdeStatusPrereqId : 
		/// </summary>
		[EnumTextValue("ADM_CDE_STATUS_PREREQ_ID")]
		[ColumnEnum("ADM_CDE_STATUS_PREREQ_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmCdeStatusPrereqId = 9,
		/// <summary>
		/// AdmCdeFeeId : لائحة بنود مصروفات القبول
		/// </summary>
		[EnumTextValue("ADM_CDE_FEE_ID")]
		[ColumnEnum("ADM_CDE_FEE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmCdeFeeId = 10,
		/// <summary>
		/// EnumId : not used yet
		/// </summary>
		[EnumTextValue("ENUM_ID")]
		[ColumnEnum("ENUM_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		EnumId = 11
	}//End enum

	#endregion AdmCdeAppStatusColumn Enum

} // end namespace
