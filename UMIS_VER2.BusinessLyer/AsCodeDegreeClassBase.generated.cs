
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AsCodeDegreeClass.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'AS_CODE_DEGREE_CLASS' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AsCodeDegreeClassBase : EntityBase, IAsCodeDegreeClass, IEntityId<AsCodeDegreeClassKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AsCodeDegreeClassEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AsCodeDegreeClassEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AsCodeDegreeClassEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AsCodeDegreeClass> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AsCodeDegreeClassEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AsCodeDegreeClassEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AsCodeDegreeClassBase"/> instance.
		///</summary>
		public AsCodeDegreeClassBase()
		{
			this.entityData = new AsCodeDegreeClassEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AsCodeDegreeClassBase"/> instance.
		///</summary>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_classDescrAr"></param>
		///<param name="_classDescrEn"></param>
		///<param name="_classCode"></param>
		public AsCodeDegreeClassBase(System.Decimal _asCodeDegreeClassId, System.String _classDescrAr, 
			System.String _classDescrEn, System.String _classCode)
		{
			this.entityData = new AsCodeDegreeClassEntityData();
			this.backupData = null;

			this.AsCodeDegreeClassId = _asCodeDegreeClassId;
			this.ClassDescrAr = _classDescrAr;
			this.ClassDescrEn = _classDescrEn;
			this.ClassCode = _classCode;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AsCodeDegreeClass"/> instance.
		///</summary>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_classDescrAr"></param>
		///<param name="_classDescrEn"></param>
		///<param name="_classCode"></param>
		public static AsCodeDegreeClass CreateAsCodeDegreeClass(System.Decimal _asCodeDegreeClassId, System.String _classDescrAr, 
			System.String _classDescrEn, System.String _classCode)
		{
			AsCodeDegreeClass newAsCodeDegreeClass = new AsCodeDegreeClass();
			newAsCodeDegreeClass.AsCodeDegreeClassId = _asCodeDegreeClassId;
			newAsCodeDegreeClass.ClassDescrAr = _classDescrAr;
			newAsCodeDegreeClass.ClassDescrEn = _classDescrEn;
			newAsCodeDegreeClass.ClassCode = _classCode;
			return newAsCodeDegreeClass;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeClassId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal AsCodeDegreeClassId
		{
			get
			{
				return this.entityData.AsCodeDegreeClassId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeClassId == value)
					return;
					
				OnColumnChanging(AsCodeDegreeClassColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				this.entityData.AsCodeDegreeClassId = value;
				this.EntityId.AsCodeDegreeClassId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AsCodeDegreeClassColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				OnPropertyChanged("AsCodeDegreeClassId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the AS_CODE_DEGREE_CLASS_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the AS_CODE_DEGREE_CLASS_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalAsCodeDegreeClassId
		{
			get { return this.entityData.OriginalAsCodeDegreeClassId; }
			set { this.entityData.OriginalAsCodeDegreeClassId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the ClassDescrAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String ClassDescrAr
		{
			get
			{
				return this.entityData.ClassDescrAr; 
			}
			
			set
			{
				if (this.entityData.ClassDescrAr == value)
					return;
					
				OnColumnChanging(AsCodeDegreeClassColumn.ClassDescrAr, this.entityData.ClassDescrAr);
				this.entityData.ClassDescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AsCodeDegreeClassColumn.ClassDescrAr, this.entityData.ClassDescrAr);
				OnPropertyChanged("ClassDescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ClassDescrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String ClassDescrEn
		{
			get
			{
				return this.entityData.ClassDescrEn; 
			}
			
			set
			{
				if (this.entityData.ClassDescrEn == value)
					return;
					
				OnColumnChanging(AsCodeDegreeClassColumn.ClassDescrEn, this.entityData.ClassDescrEn);
				this.entityData.ClassDescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AsCodeDegreeClassColumn.ClassDescrEn, this.entityData.ClassDescrEn);
				OnPropertyChanged("ClassDescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ClassCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String ClassCode
		{
			get
			{
				return this.entityData.ClassCode; 
			}
			
			set
			{
				if (this.entityData.ClassCode == value)
					return;
					
				OnColumnChanging(AsCodeDegreeClassColumn.ClassCode, this.entityData.ClassCode);
				this.entityData.ClassCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AsCodeDegreeClassColumn.ClassCode, this.entityData.ClassCode);
				OnPropertyChanged("ClassCode");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EdAcadYearFaculty objects
		///	which are related to this object through the relation FK_ED_ACAD_YEAR_FACULTY_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdAcadYearFaculty> EdAcadYearFacultyCollection
		{
			get { return entityData.EdAcadYearFacultyCollection; }
			set { entityData.EdAcadYearFacultyCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmAppRegHistory objects
		///	which are related to this object through the relation FK_ADM_APP_REG_HISTORY_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppRegHistory> AdmAppRegHistoryCollection
		{
			get { return entityData.AdmAppRegHistoryCollection; }
			set { entityData.AdmAppRegHistoryCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdSemesterOpen objects
		///	which are related to this object through the relation FK_ED_SEMESTER_OPEN_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdSemesterOpen> EdSemesterOpenCollection
		{
			get { return entityData.EdSemesterOpenCollection; }
			set { entityData.EdSemesterOpenCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SeUserAccnt objects
		///	which are related to this object through the relation FK_SE_USER_ACCNT_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SeUserAccnt> SeUserAccntCollection
		{
			get { return entityData.SeUserAccntCollection; }
			set { entityData.SeUserAccntCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ScSectionGroupHdr objects
		///	which are related to this object through the relation FK_SC_SECTION_GROUP_HDR_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScSectionGroupHdr> ScSectionGroupHdrCollection
		{
			get { return entityData.ScSectionGroupHdrCollection; }
			set { entityData.ScSectionGroupHdrCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmCodeEngTest objects
		///	which are related to this object through the relation FK_ADM_CODE_ENG_TEST_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmCodeEngTest> AdmCodeEngTestCollection
		{
			get { return entityData.AdmCodeEngTestCollection; }
			set { entityData.AdmCodeEngTestCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AsCodeDegree objects
		///	which are related to this object through the relation FK_AS_CODE_DEGREE_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AsCodeDegree> AsCodeDegreeCollection
		{
			get { return entityData.AsCodeDegreeCollection; }
			set { entityData.AsCodeDegreeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SeForm objects
		///	which are related to this object through the relation FK_SE_FORM_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SeForm> SeFormCollection
		{
			get { return entityData.SeFormCollection; }
			set { entityData.SeFormCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SpoSponsorOffer objects
		///	which are related to this object through the relation FK_SPO_SPONSOR_OFFER_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SpoSponsorOffer> SpoSponsorOfferCollection
		{
			get { return entityData.SpoSponsorOfferCollection; }
			set { entityData.SpoSponsorOfferCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of PgThesisGrantDegree objects
		///	which are related to this object through the relation FK_PG_THESIS_GRANT_DEGREE_AS_CODE_DEGREE_CLASS1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgThesisGrantDegree> PgThesisGrantDegreeCollection
		{
			get { return entityData.PgThesisGrantDegreeCollection; }
			set { entityData.PgThesisGrantDegreeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeRefundCode objects
		///	which are related to this object through the relation FK_FEE_REFUND_CODE_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeRefundCode> FeeRefundCodeCollection
		{
			get { return entityData.FeeRefundCodeCollection; }
			set { entityData.FeeRefundCodeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeInstlmntRule objects
		///	which are related to this object through the relation FK_FEE_INSTLMNT_RULE_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeInstlmntRule> FeeInstlmntRuleCollection
		{
			get { return entityData.FeeInstlmntRuleCollection; }
			set { entityData.FeeInstlmntRuleCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeCdeSchshipType objects
		///	which are related to this object through the relation FK_FEE_CDE_SCHSHIP_TYPE_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeCdeSchshipType> FeeCdeSchshipTypeCollection
		{
			get { return entityData.FeeCdeSchshipTypeCollection; }
			set { entityData.FeeCdeSchshipTypeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdCdeCrsRegType objects
		///	which are related to this object through the relation FK_ED_CDE_CRS_REG_TYPE_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdCdeCrsRegType> EdCdeCrsRegTypeCollection
		{
			get { return entityData.EdCdeCrsRegTypeCollection; }
			set { entityData.EdCdeCrsRegTypeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeAllowanceRule objects
		///	which are related to this object through the relation FK_FEE_ALLOWANCE_RULE_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeAllowanceRule> FeeAllowanceRuleCollection
		{
			get { return entityData.FeeAllowanceRuleCollection; }
			set { entityData.FeeAllowanceRuleCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdCourse objects
		///	which are related to this object through the relation FK_ED_COURSE_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdCourse> EdCourseCollection
		{
			get { return entityData.EdCourseCollection; }
			set { entityData.EdCourseCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdBylaw objects
		///	which are related to this object through the relation FK_ED_BYLAW_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdBylaw> EdBylawCollection
		{
			get { return entityData.EdBylawCollection; }
			set { entityData.EdBylawCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmPrecondQual objects
		///	which are related to this object through the relation FK_ADM_PRECOND_QUAL_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmPrecondQual> AdmPrecondQualCollection
		{
			get { return entityData.AdmPrecondQualCollection; }
			set { entityData.AdmPrecondQualCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdCdeQualCat objects
		///	which are related to this object through the relation FK_ED_CDE_QUAL_CAT_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdCdeQualCat> EdCdeQualCatCollection
		{
			get { return entityData.EdCdeQualCatCollection; }
			set { entityData.EdCdeQualCatCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AppTypeRegSteps objects
		///	which are related to this object through the relation FK_APP_TYPE_REG_STEPS_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AppTypeRegSteps> AppTypeRegStepsCollection
		{
			get { return entityData.AppTypeRegStepsCollection; }
			set { entityData.AppTypeRegStepsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmRatingParametersMajors objects
		///	which are related to this object through the relation FK_ADM_RATING_PARAMETERS_MAJORS_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmRatingParametersMajors> AdmRatingParametersMajorsCollection
		{
			get { return entityData.AdmRatingParametersMajorsCollection; }
			set { entityData.AdmRatingParametersMajorsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeCdeDiscType objects
		///	which are related to this object through the relation FK_FEE_CDE_DISC_TYPE_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeCdeDiscType> FeeCdeDiscTypeCollection
		{
			get { return entityData.FeeCdeDiscTypeCollection; }
			set { entityData.FeeCdeDiscTypeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmReqDoc objects
		///	which are related to this object through the relation FK_ADM_REQ_DOC_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmReqDoc> AdmReqDocCollection
		{
			get { return entityData.AdmReqDocCollection; }
			set { entityData.AdmReqDocCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmAppCount objects
		///	which are related to this object through the relation FK_ADM_APP_COUNT_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppCount> AdmAppCountCollection
		{
			get { return entityData.AdmAppCountCollection; }
			set { entityData.AdmAppCountCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdOffering objects
		///	which are related to this object through the relation FK_ED_OFFERING_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdOffering> EdOfferingCollection
		{
			get { return entityData.EdOfferingCollection; }
			set { entityData.EdOfferingCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of PgOffering objects
		///	which are related to this object through the relation FK_PG_OFFERING_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgOffering> PgOfferingCollection
		{
			get { return entityData.PgOfferingCollection; }
			set { entityData.PgOfferingCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmAcceptanceCategory objects
		///	which are related to this object through the relation FK_ADM_ACCEPTANCE_CATEGORY_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAcceptanceCategory> AdmAcceptanceCategoryCollection
		{
			get { return entityData.AdmAcceptanceCategoryCollection; }
			set { entityData.AdmAcceptanceCategoryCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmTransAcceptanceCategory objects
		///	which are related to this object through the relation FK_ADM_TRANS_ACCEPTANCE_CATEGORY_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmTransAcceptanceCategory> AdmTransAcceptanceCategoryCollection
		{
			get { return entityData.AdmTransAcceptanceCategoryCollection; }
			set { entityData.AdmTransAcceptanceCategoryCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdResultApprove objects
		///	which are related to this object through the relation FK_ED_RESULT_APPROVE_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdResultApprove> EdResultApproveCollection
		{
			get { return entityData.EdResultApproveCollection; }
			set { entityData.EdResultApproveCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmCdePlacementExam objects
		///	which are related to this object through the relation FK_ADM_CDE_PLACEMENT_EXAM_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmCdePlacementExam> AdmCdePlacementExamCollection
		{
			get { return entityData.AdmCdePlacementExamCollection; }
			set { entityData.AdmCdePlacementExamCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeLimitRule objects
		///	which are related to this object through the relation FK_FEE_LIMIT_RULE_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeLimitRule> FeeLimitRuleCollection
		{
			get { return entityData.FeeLimitRuleCollection; }
			set { entityData.FeeLimitRuleCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdSemesterAgenda objects
		///	which are related to this object through the relation FK_ED_SEMESTER_AGENDA_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdSemesterAgenda> EdSemesterAgendaCollection
		{
			get { return entityData.EdSemesterAgendaCollection; }
			set { entityData.EdSemesterAgendaCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeCodeItem objects
		///	which are related to this object through the relation FK_FEE_CODE_ITEM_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeCodeItem> FeeCodeItemCollection
		{
			get { return entityData.FeeCodeItemCollection; }
			set { entityData.FeeCodeItemCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntCodeFullfillMetadata objects
		///	which are related to this object through the relation FK_ENT_CODE_FULLFILL_METADATA_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntCodeFullfillMetadata> EntCodeFullfillMetadataCollection
		{
			get { return entityData.EntCodeFullfillMetadataCollection; }
			set { entityData.EntCodeFullfillMetadataCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmCompetitiveAvg objects
		///	which are related to this object through the relation FK_ADM_COMPETITIVE_AVG_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmCompetitiveAvg> AdmCompetitiveAvgCollection
		{
			get { return entityData.AdmCompetitiveAvgCollection; }
			set { entityData.AdmCompetitiveAvgCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmTansikCodes objects
		///	which are related to this object through the relation FK_ADM_Tansik_Codes_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmTansikCodes> AdmTansikCodesCollection
		{
			get { return entityData.AdmTansikCodesCollection; }
			set { entityData.AdmTansikCodesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeFacultyRule objects
		///	which are related to this object through the relation FK_FEE_FACULTY_RULE_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeFacultyRule> FeeFacultyRuleCollection
		{
			get { return entityData.FeeFacultyRuleCollection; }
			set { entityData.FeeFacultyRuleCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdGraduationAward objects
		///	which are related to this object through the relation FK_ED_GRADUATION_AWARD_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdGraduationAward> EdGraduationAwardCollection
		{
			get { return entityData.EdGraduationAwardCollection; }
			set { entityData.EdGraduationAwardCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CoControl objects
		///	which are related to this object through the relation FK_CO_CONTROL_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoControl> CoControlCollection
		{
			get { return entityData.CoControlCollection; }
			set { entityData.CoControlCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmCdeFee objects
		///	which are related to this object through the relation FK_ADM_CDE_FEE_AS_CODE_DEGREE_CLASS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmCdeFee> AdmCdeFeeCollection
		{
			get { return entityData.AdmCdeFeeCollection; }
			set { entityData.AdmCdeFeeCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ClassDescrAr", "Class Descr Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ClassDescrAr", "Class Descr Ar", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ClassDescrEn", "Class Descr En", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ClassCode", "Class Code", 30));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "AS_CODE_DEGREE_CLASS"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"AS_CODE_DEGREE_CLASS_ID", "CLASS_DESCR_AR", "CLASS_DESCR_EN", "CLASS_CODE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AsCodeDegreeClassEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AsCodeDegreeClass) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AsCodeDegreeClass>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AsCodeDegreeClass);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AsCodeDegreeClass Entity 
		///</summary>
		protected virtual AsCodeDegreeClass Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AsCodeDegreeClass copy = new AsCodeDegreeClass();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
					copy.OriginalAsCodeDegreeClassId = this.OriginalAsCodeDegreeClassId;
				copy.ClassDescrAr = this.ClassDescrAr;
				copy.ClassDescrEn = this.ClassDescrEn;
				copy.ClassCode = this.ClassCode;
			
		
			//deep copy nested objects
			copy.EdAcadYearFacultyCollection = (TList<EdAcadYearFaculty>) MakeCopyOf(this.EdAcadYearFacultyCollection, existingCopies); 
			copy.AdmAppRegHistoryCollection = (TList<AdmAppRegHistory>) MakeCopyOf(this.AdmAppRegHistoryCollection, existingCopies); 
			copy.EdSemesterOpenCollection = (TList<EdSemesterOpen>) MakeCopyOf(this.EdSemesterOpenCollection, existingCopies); 
			copy.SeUserAccntCollection = (TList<SeUserAccnt>) MakeCopyOf(this.SeUserAccntCollection, existingCopies); 
			copy.ScSectionGroupHdrCollection = (TList<ScSectionGroupHdr>) MakeCopyOf(this.ScSectionGroupHdrCollection, existingCopies); 
			copy.AdmCodeEngTestCollection = (TList<AdmCodeEngTest>) MakeCopyOf(this.AdmCodeEngTestCollection, existingCopies); 
			copy.AsCodeDegreeCollection = (TList<AsCodeDegree>) MakeCopyOf(this.AsCodeDegreeCollection, existingCopies); 
			copy.SeFormCollection = (TList<SeForm>) MakeCopyOf(this.SeFormCollection, existingCopies); 
			copy.SpoSponsorOfferCollection = (TList<SpoSponsorOffer>) MakeCopyOf(this.SpoSponsorOfferCollection, existingCopies); 
			copy.PgThesisGrantDegreeCollection = (TList<PgThesisGrantDegree>) MakeCopyOf(this.PgThesisGrantDegreeCollection, existingCopies); 
			copy.FeeRefundCodeCollection = (TList<FeeRefundCode>) MakeCopyOf(this.FeeRefundCodeCollection, existingCopies); 
			copy.FeeInstlmntRuleCollection = (TList<FeeInstlmntRule>) MakeCopyOf(this.FeeInstlmntRuleCollection, existingCopies); 
			copy.FeeCdeSchshipTypeCollection = (TList<FeeCdeSchshipType>) MakeCopyOf(this.FeeCdeSchshipTypeCollection, existingCopies); 
			copy.EdCdeCrsRegTypeCollection = (TList<EdCdeCrsRegType>) MakeCopyOf(this.EdCdeCrsRegTypeCollection, existingCopies); 
			copy.FeeAllowanceRuleCollection = (TList<FeeAllowanceRule>) MakeCopyOf(this.FeeAllowanceRuleCollection, existingCopies); 
			copy.EdCourseCollection = (TList<EdCourse>) MakeCopyOf(this.EdCourseCollection, existingCopies); 
			copy.EdBylawCollection = (TList<EdBylaw>) MakeCopyOf(this.EdBylawCollection, existingCopies); 
			copy.AdmPrecondQualCollection = (TList<AdmPrecondQual>) MakeCopyOf(this.AdmPrecondQualCollection, existingCopies); 
			copy.EdCdeQualCatCollection = (TList<EdCdeQualCat>) MakeCopyOf(this.EdCdeQualCatCollection, existingCopies); 
			copy.AppTypeRegStepsCollection = (TList<AppTypeRegSteps>) MakeCopyOf(this.AppTypeRegStepsCollection, existingCopies); 
			copy.AdmRatingParametersMajorsCollection = (TList<AdmRatingParametersMajors>) MakeCopyOf(this.AdmRatingParametersMajorsCollection, existingCopies); 
			copy.FeeCdeDiscTypeCollection = (TList<FeeCdeDiscType>) MakeCopyOf(this.FeeCdeDiscTypeCollection, existingCopies); 
			copy.AdmReqDocCollection = (TList<AdmReqDoc>) MakeCopyOf(this.AdmReqDocCollection, existingCopies); 
			copy.AdmAppCountCollection = (TList<AdmAppCount>) MakeCopyOf(this.AdmAppCountCollection, existingCopies); 
			copy.EdOfferingCollection = (TList<EdOffering>) MakeCopyOf(this.EdOfferingCollection, existingCopies); 
			copy.PgOfferingCollection = (TList<PgOffering>) MakeCopyOf(this.PgOfferingCollection, existingCopies); 
			copy.AdmAcceptanceCategoryCollection = (TList<AdmAcceptanceCategory>) MakeCopyOf(this.AdmAcceptanceCategoryCollection, existingCopies); 
			copy.AdmTransAcceptanceCategoryCollection = (TList<AdmTransAcceptanceCategory>) MakeCopyOf(this.AdmTransAcceptanceCategoryCollection, existingCopies); 
			copy.EdResultApproveCollection = (TList<EdResultApprove>) MakeCopyOf(this.EdResultApproveCollection, existingCopies); 
			copy.AdmCdePlacementExamCollection = (TList<AdmCdePlacementExam>) MakeCopyOf(this.AdmCdePlacementExamCollection, existingCopies); 
			copy.FeeLimitRuleCollection = (TList<FeeLimitRule>) MakeCopyOf(this.FeeLimitRuleCollection, existingCopies); 
			copy.EdSemesterAgendaCollection = (TList<EdSemesterAgenda>) MakeCopyOf(this.EdSemesterAgendaCollection, existingCopies); 
			copy.FeeCodeItemCollection = (TList<FeeCodeItem>) MakeCopyOf(this.FeeCodeItemCollection, existingCopies); 
			copy.EntCodeFullfillMetadataCollection = (TList<EntCodeFullfillMetadata>) MakeCopyOf(this.EntCodeFullfillMetadataCollection, existingCopies); 
			copy.AdmCompetitiveAvgCollection = (TList<AdmCompetitiveAvg>) MakeCopyOf(this.AdmCompetitiveAvgCollection, existingCopies); 
			copy.AdmTansikCodesCollection = (TList<AdmTansikCodes>) MakeCopyOf(this.AdmTansikCodesCollection, existingCopies); 
			copy.FeeFacultyRuleCollection = (TList<FeeFacultyRule>) MakeCopyOf(this.FeeFacultyRuleCollection, existingCopies); 
			copy.EdGraduationAwardCollection = (TList<EdGraduationAward>) MakeCopyOf(this.EdGraduationAwardCollection, existingCopies); 
			copy.CoControlCollection = (TList<CoControl>) MakeCopyOf(this.CoControlCollection, existingCopies); 
			copy.AdmCdeFeeCollection = (TList<AdmCdeFee>) MakeCopyOf(this.AdmCdeFeeCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AsCodeDegreeClass Entity 
		///</summary>
		public virtual AsCodeDegreeClass Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AsCodeDegreeClass Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AsCodeDegreeClass DeepCopy()
		{
			return EntityHelper.Clone<AsCodeDegreeClass>(this as AsCodeDegreeClass);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AsCodeDegreeClassEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AsCodeDegreeClassEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AsCodeDegreeClassEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AsCodeDegreeClassColumn column)
		{
			switch(column)
			{
					case AsCodeDegreeClassColumn.AsCodeDegreeClassId:
					return entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
					case AsCodeDegreeClassColumn.ClassDescrAr:
					return entityData.ClassDescrAr != _originalData.ClassDescrAr;
					case AsCodeDegreeClassColumn.ClassDescrEn:
					return entityData.ClassDescrEn != _originalData.ClassDescrEn;
					case AsCodeDegreeClassColumn.ClassCode:
					return entityData.ClassCode != _originalData.ClassCode;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AsCodeDegreeClassColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
			result = result || entityData.ClassDescrAr != _originalData.ClassDescrAr;
			result = result || entityData.ClassDescrEn != _originalData.ClassDescrEn;
			result = result || entityData.ClassCode != _originalData.ClassCode;
			return result;
		}	
		
		///<summary>
		///  Returns a AsCodeDegreeClass Entity with the original data.
		///</summary>
		public AsCodeDegreeClass GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAsCodeDegreeClass(
				_originalData.AsCodeDegreeClassId,
				_originalData.ClassDescrAr,
				_originalData.ClassDescrEn,
				_originalData.ClassCode
				);
				
			return (AsCodeDegreeClass)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AsCodeDegreeClassBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AsCodeDegreeClassBase)
				return ValueEquals(this, (AsCodeDegreeClassBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AsCodeDegreeClassBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AsCodeDegreeClassId.GetHashCode() ^ 
					this.ClassDescrAr.GetHashCode() ^ 
					((this.ClassDescrEn == null) ? string.Empty : this.ClassDescrEn.ToString()).GetHashCode() ^ 
					((this.ClassCode == null) ? string.Empty : this.ClassCode.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AsCodeDegreeClassBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AsCodeDegreeClassBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AsCodeDegreeClassBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AsCodeDegreeClassBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AsCodeDegreeClassBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AsCodeDegreeClassBase Object1, AsCodeDegreeClassBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AsCodeDegreeClassId != Object2.AsCodeDegreeClassId)
				equal = false;
			if (Object1.ClassDescrAr != Object2.ClassDescrAr)
				equal = false;
			if ( Object1.ClassDescrEn != null && Object2.ClassDescrEn != null )
			{
				if (Object1.ClassDescrEn != Object2.ClassDescrEn)
					equal = false;
			}
			else if (Object1.ClassDescrEn == null ^ Object2.ClassDescrEn == null )
			{
				equal = false;
			}
			if ( Object1.ClassCode != null && Object2.ClassCode != null )
			{
				if (Object1.ClassCode != Object2.ClassCode)
					equal = false;
			}
			else if (Object1.ClassCode == null ^ Object2.ClassCode == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AsCodeDegreeClassBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AsCodeDegreeClassComparer GetComparer()
        {
            return new AsCodeDegreeClassComparer();
        }
        */

        // Comparer delegates back to AsCodeDegreeClass
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AsCodeDegreeClass rhs, AsCodeDegreeClassColumn which)
        {
            switch (which)
            {
            	
            	
            	case AsCodeDegreeClassColumn.AsCodeDegreeClassId:
            		return this.AsCodeDegreeClassId.CompareTo(rhs.AsCodeDegreeClassId);
            		
            		                 
            	
            	
            	case AsCodeDegreeClassColumn.ClassDescrAr:
            		return this.ClassDescrAr.CompareTo(rhs.ClassDescrAr);
            		
            		                 
            	
            	
            	case AsCodeDegreeClassColumn.ClassDescrEn:
            		return this.ClassDescrEn.CompareTo(rhs.ClassDescrEn);
            		
            		                 
            	
            	
            	case AsCodeDegreeClassColumn.ClassCode:
            		return this.ClassCode.CompareTo(rhs.ClassCode);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AsCodeDegreeClassKey> Members
		
		// member variable for the EntityId property
		private AsCodeDegreeClassKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AsCodeDegreeClassKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AsCodeDegreeClassKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AsCodeDegreeClass")
					.Append("|").Append( this.AsCodeDegreeClassId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{5}{4}- AsCodeDegreeClassId: {0}{4}- ClassDescrAr: {1}{4}- ClassDescrEn: {2}{4}- ClassCode: {3}{4}{6}", 
				this.AsCodeDegreeClassId,
				this.ClassDescrAr,
				(this.ClassDescrEn == null) ? string.Empty : this.ClassDescrEn.ToString(),
				(this.ClassCode == null) ? string.Empty : this.ClassCode.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'AS_CODE_DEGREE_CLASS' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AsCodeDegreeClassEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// AS_CODE_DEGREE_CLASS_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "AS_CODE_DEGREE_CLASS"</remarks>
		public System.Decimal AsCodeDegreeClassId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalAsCodeDegreeClassId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// CLASS_DESCR_AR : 
		/// </summary>
		public System.String		  ClassDescrAr = string.Empty;
		
		/// <summary>
		/// CLASS_DESCR_EN : 
		/// </summary>
		public System.String		  ClassDescrEn = null;
		
		/// <summary>
		/// CLASS_CODE : 
		/// </summary>
		public System.String		  ClassCode = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EdAcadYearFacultyCollection
		
		private TList<EdAcadYearFaculty> _edAcadYearFacultyAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edAcadYearFacultyAsCodeDegreeClassId
		/// </summary>
		
		public TList<EdAcadYearFaculty> EdAcadYearFacultyCollection
		{
			get
			{
				if (_edAcadYearFacultyAsCodeDegreeClassId == null)
				{
				_edAcadYearFacultyAsCodeDegreeClassId = new TList<EdAcadYearFaculty>();
				}
	
				return _edAcadYearFacultyAsCodeDegreeClassId;
			}
			set { _edAcadYearFacultyAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region AdmAppRegHistoryCollection
		
		private TList<AdmAppRegHistory> _admAppRegHistoryAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppRegHistoryAsCodeDegreeClassId
		/// </summary>
		
		public TList<AdmAppRegHistory> AdmAppRegHistoryCollection
		{
			get
			{
				if (_admAppRegHistoryAsCodeDegreeClassId == null)
				{
				_admAppRegHistoryAsCodeDegreeClassId = new TList<AdmAppRegHistory>();
				}
	
				return _admAppRegHistoryAsCodeDegreeClassId;
			}
			set { _admAppRegHistoryAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region EdSemesterOpenCollection
		
		private TList<EdSemesterOpen> _edSemesterOpenAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edSemesterOpenAsCodeDegreeClassId
		/// </summary>
		
		public TList<EdSemesterOpen> EdSemesterOpenCollection
		{
			get
			{
				if (_edSemesterOpenAsCodeDegreeClassId == null)
				{
				_edSemesterOpenAsCodeDegreeClassId = new TList<EdSemesterOpen>();
				}
	
				return _edSemesterOpenAsCodeDegreeClassId;
			}
			set { _edSemesterOpenAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region SeUserAccntCollection
		
		private TList<SeUserAccnt> _seUserAccntAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _seUserAccntAsCodeDegreeClassId
		/// </summary>
		
		public TList<SeUserAccnt> SeUserAccntCollection
		{
			get
			{
				if (_seUserAccntAsCodeDegreeClassId == null)
				{
				_seUserAccntAsCodeDegreeClassId = new TList<SeUserAccnt>();
				}
	
				return _seUserAccntAsCodeDegreeClassId;
			}
			set { _seUserAccntAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region ScSectionGroupHdrCollection
		
		private TList<ScSectionGroupHdr> _scSectionGroupHdrAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scSectionGroupHdrAsCodeDegreeClassId
		/// </summary>
		
		public TList<ScSectionGroupHdr> ScSectionGroupHdrCollection
		{
			get
			{
				if (_scSectionGroupHdrAsCodeDegreeClassId == null)
				{
				_scSectionGroupHdrAsCodeDegreeClassId = new TList<ScSectionGroupHdr>();
				}
	
				return _scSectionGroupHdrAsCodeDegreeClassId;
			}
			set { _scSectionGroupHdrAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region AdmCodeEngTestCollection
		
		private TList<AdmCodeEngTest> _admCodeEngTestAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admCodeEngTestAsCodeDegreeClassId
		/// </summary>
		
		public TList<AdmCodeEngTest> AdmCodeEngTestCollection
		{
			get
			{
				if (_admCodeEngTestAsCodeDegreeClassId == null)
				{
				_admCodeEngTestAsCodeDegreeClassId = new TList<AdmCodeEngTest>();
				}
	
				return _admCodeEngTestAsCodeDegreeClassId;
			}
			set { _admCodeEngTestAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region AsCodeDegreeCollection
		
		private TList<AsCodeDegree> _asCodeDegreeAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _asCodeDegreeAsCodeDegreeClassId
		/// </summary>
		
		public TList<AsCodeDegree> AsCodeDegreeCollection
		{
			get
			{
				if (_asCodeDegreeAsCodeDegreeClassId == null)
				{
				_asCodeDegreeAsCodeDegreeClassId = new TList<AsCodeDegree>();
				}
	
				return _asCodeDegreeAsCodeDegreeClassId;
			}
			set { _asCodeDegreeAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region SeFormCollection
		
		private TList<SeForm> _seFormAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _seFormAsCodeDegreeClassId
		/// </summary>
		
		public TList<SeForm> SeFormCollection
		{
			get
			{
				if (_seFormAsCodeDegreeClassId == null)
				{
				_seFormAsCodeDegreeClassId = new TList<SeForm>();
				}
	
				return _seFormAsCodeDegreeClassId;
			}
			set { _seFormAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region SpoSponsorOfferCollection
		
		private TList<SpoSponsorOffer> _spoSponsorOfferAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _spoSponsorOfferAsCodeDegreeClassId
		/// </summary>
		
		public TList<SpoSponsorOffer> SpoSponsorOfferCollection
		{
			get
			{
				if (_spoSponsorOfferAsCodeDegreeClassId == null)
				{
				_spoSponsorOfferAsCodeDegreeClassId = new TList<SpoSponsorOffer>();
				}
	
				return _spoSponsorOfferAsCodeDegreeClassId;
			}
			set { _spoSponsorOfferAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region PgThesisGrantDegreeCollection
		
		private TList<PgThesisGrantDegree> _pgThesisGrantDegreeAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgThesisGrantDegreeAsCodeDegreeClassId
		/// </summary>
		
		public TList<PgThesisGrantDegree> PgThesisGrantDegreeCollection
		{
			get
			{
				if (_pgThesisGrantDegreeAsCodeDegreeClassId == null)
				{
				_pgThesisGrantDegreeAsCodeDegreeClassId = new TList<PgThesisGrantDegree>();
				}
	
				return _pgThesisGrantDegreeAsCodeDegreeClassId;
			}
			set { _pgThesisGrantDegreeAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region FeeRefundCodeCollection
		
		private TList<FeeRefundCode> _feeRefundCodeAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeRefundCodeAsCodeDegreeClassId
		/// </summary>
		
		public TList<FeeRefundCode> FeeRefundCodeCollection
		{
			get
			{
				if (_feeRefundCodeAsCodeDegreeClassId == null)
				{
				_feeRefundCodeAsCodeDegreeClassId = new TList<FeeRefundCode>();
				}
	
				return _feeRefundCodeAsCodeDegreeClassId;
			}
			set { _feeRefundCodeAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region FeeInstlmntRuleCollection
		
		private TList<FeeInstlmntRule> _feeInstlmntRuleAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeInstlmntRuleAsCodeDegreeClassId
		/// </summary>
		
		public TList<FeeInstlmntRule> FeeInstlmntRuleCollection
		{
			get
			{
				if (_feeInstlmntRuleAsCodeDegreeClassId == null)
				{
				_feeInstlmntRuleAsCodeDegreeClassId = new TList<FeeInstlmntRule>();
				}
	
				return _feeInstlmntRuleAsCodeDegreeClassId;
			}
			set { _feeInstlmntRuleAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region FeeCdeSchshipTypeCollection
		
		private TList<FeeCdeSchshipType> _feeCdeSchshipTypeAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeCdeSchshipTypeAsCodeDegreeClassId
		/// </summary>
		
		public TList<FeeCdeSchshipType> FeeCdeSchshipTypeCollection
		{
			get
			{
				if (_feeCdeSchshipTypeAsCodeDegreeClassId == null)
				{
				_feeCdeSchshipTypeAsCodeDegreeClassId = new TList<FeeCdeSchshipType>();
				}
	
				return _feeCdeSchshipTypeAsCodeDegreeClassId;
			}
			set { _feeCdeSchshipTypeAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region EdCdeCrsRegTypeCollection
		
		private TList<EdCdeCrsRegType> _edCdeCrsRegTypeAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edCdeCrsRegTypeAsCodeDegreeClassId
		/// </summary>
		
		public TList<EdCdeCrsRegType> EdCdeCrsRegTypeCollection
		{
			get
			{
				if (_edCdeCrsRegTypeAsCodeDegreeClassId == null)
				{
				_edCdeCrsRegTypeAsCodeDegreeClassId = new TList<EdCdeCrsRegType>();
				}
	
				return _edCdeCrsRegTypeAsCodeDegreeClassId;
			}
			set { _edCdeCrsRegTypeAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region FeeAllowanceRuleCollection
		
		private TList<FeeAllowanceRule> _feeAllowanceRuleAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeAllowanceRuleAsCodeDegreeClassId
		/// </summary>
		
		public TList<FeeAllowanceRule> FeeAllowanceRuleCollection
		{
			get
			{
				if (_feeAllowanceRuleAsCodeDegreeClassId == null)
				{
				_feeAllowanceRuleAsCodeDegreeClassId = new TList<FeeAllowanceRule>();
				}
	
				return _feeAllowanceRuleAsCodeDegreeClassId;
			}
			set { _feeAllowanceRuleAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region EdCourseCollection
		
		private TList<EdCourse> _edCourseAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edCourseAsCodeDegreeClassId
		/// </summary>
		
		public TList<EdCourse> EdCourseCollection
		{
			get
			{
				if (_edCourseAsCodeDegreeClassId == null)
				{
				_edCourseAsCodeDegreeClassId = new TList<EdCourse>();
				}
	
				return _edCourseAsCodeDegreeClassId;
			}
			set { _edCourseAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region EdBylawCollection
		
		private TList<EdBylaw> _edBylawAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edBylawAsCodeDegreeClassId
		/// </summary>
		
		public TList<EdBylaw> EdBylawCollection
		{
			get
			{
				if (_edBylawAsCodeDegreeClassId == null)
				{
				_edBylawAsCodeDegreeClassId = new TList<EdBylaw>();
				}
	
				return _edBylawAsCodeDegreeClassId;
			}
			set { _edBylawAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region AdmPrecondQualCollection
		
		private TList<AdmPrecondQual> _admPrecondQualAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admPrecondQualAsCodeDegreeClassId
		/// </summary>
		
		public TList<AdmPrecondQual> AdmPrecondQualCollection
		{
			get
			{
				if (_admPrecondQualAsCodeDegreeClassId == null)
				{
				_admPrecondQualAsCodeDegreeClassId = new TList<AdmPrecondQual>();
				}
	
				return _admPrecondQualAsCodeDegreeClassId;
			}
			set { _admPrecondQualAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region EdCdeQualCatCollection
		
		private TList<EdCdeQualCat> _edCdeQualCatAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edCdeQualCatAsCodeDegreeClassId
		/// </summary>
		
		public TList<EdCdeQualCat> EdCdeQualCatCollection
		{
			get
			{
				if (_edCdeQualCatAsCodeDegreeClassId == null)
				{
				_edCdeQualCatAsCodeDegreeClassId = new TList<EdCdeQualCat>();
				}
	
				return _edCdeQualCatAsCodeDegreeClassId;
			}
			set { _edCdeQualCatAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region AppTypeRegStepsCollection
		
		private TList<AppTypeRegSteps> _appTypeRegStepsAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _appTypeRegStepsAsCodeDegreeClassId
		/// </summary>
		
		public TList<AppTypeRegSteps> AppTypeRegStepsCollection
		{
			get
			{
				if (_appTypeRegStepsAsCodeDegreeClassId == null)
				{
				_appTypeRegStepsAsCodeDegreeClassId = new TList<AppTypeRegSteps>();
				}
	
				return _appTypeRegStepsAsCodeDegreeClassId;
			}
			set { _appTypeRegStepsAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region AdmRatingParametersMajorsCollection
		
		private TList<AdmRatingParametersMajors> _admRatingParametersMajorsAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admRatingParametersMajorsAsCodeDegreeClassId
		/// </summary>
		
		public TList<AdmRatingParametersMajors> AdmRatingParametersMajorsCollection
		{
			get
			{
				if (_admRatingParametersMajorsAsCodeDegreeClassId == null)
				{
				_admRatingParametersMajorsAsCodeDegreeClassId = new TList<AdmRatingParametersMajors>();
				}
	
				return _admRatingParametersMajorsAsCodeDegreeClassId;
			}
			set { _admRatingParametersMajorsAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region FeeCdeDiscTypeCollection
		
		private TList<FeeCdeDiscType> _feeCdeDiscTypeAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeCdeDiscTypeAsCodeDegreeClassId
		/// </summary>
		
		public TList<FeeCdeDiscType> FeeCdeDiscTypeCollection
		{
			get
			{
				if (_feeCdeDiscTypeAsCodeDegreeClassId == null)
				{
				_feeCdeDiscTypeAsCodeDegreeClassId = new TList<FeeCdeDiscType>();
				}
	
				return _feeCdeDiscTypeAsCodeDegreeClassId;
			}
			set { _feeCdeDiscTypeAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region AdmReqDocCollection
		
		private TList<AdmReqDoc> _admReqDocAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admReqDocAsCodeDegreeClassId
		/// </summary>
		
		public TList<AdmReqDoc> AdmReqDocCollection
		{
			get
			{
				if (_admReqDocAsCodeDegreeClassId == null)
				{
				_admReqDocAsCodeDegreeClassId = new TList<AdmReqDoc>();
				}
	
				return _admReqDocAsCodeDegreeClassId;
			}
			set { _admReqDocAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region AdmAppCountCollection
		
		private TList<AdmAppCount> _admAppCountAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppCountAsCodeDegreeClassId
		/// </summary>
		
		public TList<AdmAppCount> AdmAppCountCollection
		{
			get
			{
				if (_admAppCountAsCodeDegreeClassId == null)
				{
				_admAppCountAsCodeDegreeClassId = new TList<AdmAppCount>();
				}
	
				return _admAppCountAsCodeDegreeClassId;
			}
			set { _admAppCountAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region EdOfferingCollection
		
		private TList<EdOffering> _edOfferingAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edOfferingAsCodeDegreeClassId
		/// </summary>
		
		public TList<EdOffering> EdOfferingCollection
		{
			get
			{
				if (_edOfferingAsCodeDegreeClassId == null)
				{
				_edOfferingAsCodeDegreeClassId = new TList<EdOffering>();
				}
	
				return _edOfferingAsCodeDegreeClassId;
			}
			set { _edOfferingAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region PgOfferingCollection
		
		private TList<PgOffering> _pgOfferingAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgOfferingAsCodeDegreeClassId
		/// </summary>
		
		public TList<PgOffering> PgOfferingCollection
		{
			get
			{
				if (_pgOfferingAsCodeDegreeClassId == null)
				{
				_pgOfferingAsCodeDegreeClassId = new TList<PgOffering>();
				}
	
				return _pgOfferingAsCodeDegreeClassId;
			}
			set { _pgOfferingAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region AdmAcceptanceCategoryCollection
		
		private TList<AdmAcceptanceCategory> _admAcceptanceCategoryAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAcceptanceCategoryAsCodeDegreeClassId
		/// </summary>
		
		public TList<AdmAcceptanceCategory> AdmAcceptanceCategoryCollection
		{
			get
			{
				if (_admAcceptanceCategoryAsCodeDegreeClassId == null)
				{
				_admAcceptanceCategoryAsCodeDegreeClassId = new TList<AdmAcceptanceCategory>();
				}
	
				return _admAcceptanceCategoryAsCodeDegreeClassId;
			}
			set { _admAcceptanceCategoryAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region AdmTransAcceptanceCategoryCollection
		
		private TList<AdmTransAcceptanceCategory> _admTransAcceptanceCategoryAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admTransAcceptanceCategoryAsCodeDegreeClassId
		/// </summary>
		
		public TList<AdmTransAcceptanceCategory> AdmTransAcceptanceCategoryCollection
		{
			get
			{
				if (_admTransAcceptanceCategoryAsCodeDegreeClassId == null)
				{
				_admTransAcceptanceCategoryAsCodeDegreeClassId = new TList<AdmTransAcceptanceCategory>();
				}
	
				return _admTransAcceptanceCategoryAsCodeDegreeClassId;
			}
			set { _admTransAcceptanceCategoryAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region EdResultApproveCollection
		
		private TList<EdResultApprove> _edResultApproveAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edResultApproveAsCodeDegreeClassId
		/// </summary>
		
		public TList<EdResultApprove> EdResultApproveCollection
		{
			get
			{
				if (_edResultApproveAsCodeDegreeClassId == null)
				{
				_edResultApproveAsCodeDegreeClassId = new TList<EdResultApprove>();
				}
	
				return _edResultApproveAsCodeDegreeClassId;
			}
			set { _edResultApproveAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region AdmCdePlacementExamCollection
		
		private TList<AdmCdePlacementExam> _admCdePlacementExamAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admCdePlacementExamAsCodeDegreeClassId
		/// </summary>
		
		public TList<AdmCdePlacementExam> AdmCdePlacementExamCollection
		{
			get
			{
				if (_admCdePlacementExamAsCodeDegreeClassId == null)
				{
				_admCdePlacementExamAsCodeDegreeClassId = new TList<AdmCdePlacementExam>();
				}
	
				return _admCdePlacementExamAsCodeDegreeClassId;
			}
			set { _admCdePlacementExamAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region FeeLimitRuleCollection
		
		private TList<FeeLimitRule> _feeLimitRuleAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeLimitRuleAsCodeDegreeClassId
		/// </summary>
		
		public TList<FeeLimitRule> FeeLimitRuleCollection
		{
			get
			{
				if (_feeLimitRuleAsCodeDegreeClassId == null)
				{
				_feeLimitRuleAsCodeDegreeClassId = new TList<FeeLimitRule>();
				}
	
				return _feeLimitRuleAsCodeDegreeClassId;
			}
			set { _feeLimitRuleAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region EdSemesterAgendaCollection
		
		private TList<EdSemesterAgenda> _edSemesterAgendaAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edSemesterAgendaAsCodeDegreeClassId
		/// </summary>
		
		public TList<EdSemesterAgenda> EdSemesterAgendaCollection
		{
			get
			{
				if (_edSemesterAgendaAsCodeDegreeClassId == null)
				{
				_edSemesterAgendaAsCodeDegreeClassId = new TList<EdSemesterAgenda>();
				}
	
				return _edSemesterAgendaAsCodeDegreeClassId;
			}
			set { _edSemesterAgendaAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region FeeCodeItemCollection
		
		private TList<FeeCodeItem> _feeCodeItemAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeCodeItemAsCodeDegreeClassId
		/// </summary>
		
		public TList<FeeCodeItem> FeeCodeItemCollection
		{
			get
			{
				if (_feeCodeItemAsCodeDegreeClassId == null)
				{
				_feeCodeItemAsCodeDegreeClassId = new TList<FeeCodeItem>();
				}
	
				return _feeCodeItemAsCodeDegreeClassId;
			}
			set { _feeCodeItemAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region EntCodeFullfillMetadataCollection
		
		private TList<EntCodeFullfillMetadata> _entCodeFullfillMetadataAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entCodeFullfillMetadataAsCodeDegreeClassId
		/// </summary>
		
		public TList<EntCodeFullfillMetadata> EntCodeFullfillMetadataCollection
		{
			get
			{
				if (_entCodeFullfillMetadataAsCodeDegreeClassId == null)
				{
				_entCodeFullfillMetadataAsCodeDegreeClassId = new TList<EntCodeFullfillMetadata>();
				}
	
				return _entCodeFullfillMetadataAsCodeDegreeClassId;
			}
			set { _entCodeFullfillMetadataAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region AdmCompetitiveAvgCollection
		
		private TList<AdmCompetitiveAvg> _admCompetitiveAvgAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admCompetitiveAvgAsCodeDegreeClassId
		/// </summary>
		
		public TList<AdmCompetitiveAvg> AdmCompetitiveAvgCollection
		{
			get
			{
				if (_admCompetitiveAvgAsCodeDegreeClassId == null)
				{
				_admCompetitiveAvgAsCodeDegreeClassId = new TList<AdmCompetitiveAvg>();
				}
	
				return _admCompetitiveAvgAsCodeDegreeClassId;
			}
			set { _admCompetitiveAvgAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region AdmTansikCodesCollection
		
		private TList<AdmTansikCodes> _admTansikCodesAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admTansikCodesAsCodeDegreeClassId
		/// </summary>
		
		public TList<AdmTansikCodes> AdmTansikCodesCollection
		{
			get
			{
				if (_admTansikCodesAsCodeDegreeClassId == null)
				{
				_admTansikCodesAsCodeDegreeClassId = new TList<AdmTansikCodes>();
				}
	
				return _admTansikCodesAsCodeDegreeClassId;
			}
			set { _admTansikCodesAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region FeeFacultyRuleCollection
		
		private TList<FeeFacultyRule> _feeFacultyRuleAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeFacultyRuleAsCodeDegreeClassId
		/// </summary>
		
		public TList<FeeFacultyRule> FeeFacultyRuleCollection
		{
			get
			{
				if (_feeFacultyRuleAsCodeDegreeClassId == null)
				{
				_feeFacultyRuleAsCodeDegreeClassId = new TList<FeeFacultyRule>();
				}
	
				return _feeFacultyRuleAsCodeDegreeClassId;
			}
			set { _feeFacultyRuleAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region EdGraduationAwardCollection
		
		private TList<EdGraduationAward> _edGraduationAwardAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edGraduationAwardAsCodeDegreeClassId
		/// </summary>
		
		public TList<EdGraduationAward> EdGraduationAwardCollection
		{
			get
			{
				if (_edGraduationAwardAsCodeDegreeClassId == null)
				{
				_edGraduationAwardAsCodeDegreeClassId = new TList<EdGraduationAward>();
				}
	
				return _edGraduationAwardAsCodeDegreeClassId;
			}
			set { _edGraduationAwardAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region CoControlCollection
		
		private TList<CoControl> _coControlAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coControlAsCodeDegreeClassId
		/// </summary>
		
		public TList<CoControl> CoControlCollection
		{
			get
			{
				if (_coControlAsCodeDegreeClassId == null)
				{
				_coControlAsCodeDegreeClassId = new TList<CoControl>();
				}
	
				return _coControlAsCodeDegreeClassId;
			}
			set { _coControlAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#region AdmCdeFeeCollection
		
		private TList<AdmCdeFee> _admCdeFeeAsCodeDegreeClassId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admCdeFeeAsCodeDegreeClassId
		/// </summary>
		
		public TList<AdmCdeFee> AdmCdeFeeCollection
		{
			get
			{
				if (_admCdeFeeAsCodeDegreeClassId == null)
				{
				_admCdeFeeAsCodeDegreeClassId = new TList<AdmCdeFee>();
				}
	
				return _admCdeFeeAsCodeDegreeClassId;
			}
			set { _admCdeFeeAsCodeDegreeClassId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AsCodeDegreeClassEntityData _tmp = new AsCodeDegreeClassEntityData();
						
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.OriginalAsCodeDegreeClassId = this.OriginalAsCodeDegreeClassId;
			
			_tmp.ClassDescrAr = this.ClassDescrAr;
			_tmp.ClassDescrEn = this.ClassDescrEn;
			_tmp.ClassCode = this.ClassCode;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._edAcadYearFacultyAsCodeDegreeClassId != null)
				_tmp.EdAcadYearFacultyCollection = (TList<EdAcadYearFaculty>) MakeCopyOf(this.EdAcadYearFacultyCollection); 
			if (this._admAppRegHistoryAsCodeDegreeClassId != null)
				_tmp.AdmAppRegHistoryCollection = (TList<AdmAppRegHistory>) MakeCopyOf(this.AdmAppRegHistoryCollection); 
			if (this._edSemesterOpenAsCodeDegreeClassId != null)
				_tmp.EdSemesterOpenCollection = (TList<EdSemesterOpen>) MakeCopyOf(this.EdSemesterOpenCollection); 
			if (this._seUserAccntAsCodeDegreeClassId != null)
				_tmp.SeUserAccntCollection = (TList<SeUserAccnt>) MakeCopyOf(this.SeUserAccntCollection); 
			if (this._scSectionGroupHdrAsCodeDegreeClassId != null)
				_tmp.ScSectionGroupHdrCollection = (TList<ScSectionGroupHdr>) MakeCopyOf(this.ScSectionGroupHdrCollection); 
			if (this._admCodeEngTestAsCodeDegreeClassId != null)
				_tmp.AdmCodeEngTestCollection = (TList<AdmCodeEngTest>) MakeCopyOf(this.AdmCodeEngTestCollection); 
			if (this._asCodeDegreeAsCodeDegreeClassId != null)
				_tmp.AsCodeDegreeCollection = (TList<AsCodeDegree>) MakeCopyOf(this.AsCodeDegreeCollection); 
			if (this._seFormAsCodeDegreeClassId != null)
				_tmp.SeFormCollection = (TList<SeForm>) MakeCopyOf(this.SeFormCollection); 
			if (this._spoSponsorOfferAsCodeDegreeClassId != null)
				_tmp.SpoSponsorOfferCollection = (TList<SpoSponsorOffer>) MakeCopyOf(this.SpoSponsorOfferCollection); 
			if (this._pgThesisGrantDegreeAsCodeDegreeClassId != null)
				_tmp.PgThesisGrantDegreeCollection = (TList<PgThesisGrantDegree>) MakeCopyOf(this.PgThesisGrantDegreeCollection); 
			if (this._feeRefundCodeAsCodeDegreeClassId != null)
				_tmp.FeeRefundCodeCollection = (TList<FeeRefundCode>) MakeCopyOf(this.FeeRefundCodeCollection); 
			if (this._feeInstlmntRuleAsCodeDegreeClassId != null)
				_tmp.FeeInstlmntRuleCollection = (TList<FeeInstlmntRule>) MakeCopyOf(this.FeeInstlmntRuleCollection); 
			if (this._feeCdeSchshipTypeAsCodeDegreeClassId != null)
				_tmp.FeeCdeSchshipTypeCollection = (TList<FeeCdeSchshipType>) MakeCopyOf(this.FeeCdeSchshipTypeCollection); 
			if (this._edCdeCrsRegTypeAsCodeDegreeClassId != null)
				_tmp.EdCdeCrsRegTypeCollection = (TList<EdCdeCrsRegType>) MakeCopyOf(this.EdCdeCrsRegTypeCollection); 
			if (this._feeAllowanceRuleAsCodeDegreeClassId != null)
				_tmp.FeeAllowanceRuleCollection = (TList<FeeAllowanceRule>) MakeCopyOf(this.FeeAllowanceRuleCollection); 
			if (this._edCourseAsCodeDegreeClassId != null)
				_tmp.EdCourseCollection = (TList<EdCourse>) MakeCopyOf(this.EdCourseCollection); 
			if (this._edBylawAsCodeDegreeClassId != null)
				_tmp.EdBylawCollection = (TList<EdBylaw>) MakeCopyOf(this.EdBylawCollection); 
			if (this._admPrecondQualAsCodeDegreeClassId != null)
				_tmp.AdmPrecondQualCollection = (TList<AdmPrecondQual>) MakeCopyOf(this.AdmPrecondQualCollection); 
			if (this._edCdeQualCatAsCodeDegreeClassId != null)
				_tmp.EdCdeQualCatCollection = (TList<EdCdeQualCat>) MakeCopyOf(this.EdCdeQualCatCollection); 
			if (this._appTypeRegStepsAsCodeDegreeClassId != null)
				_tmp.AppTypeRegStepsCollection = (TList<AppTypeRegSteps>) MakeCopyOf(this.AppTypeRegStepsCollection); 
			if (this._admRatingParametersMajorsAsCodeDegreeClassId != null)
				_tmp.AdmRatingParametersMajorsCollection = (TList<AdmRatingParametersMajors>) MakeCopyOf(this.AdmRatingParametersMajorsCollection); 
			if (this._feeCdeDiscTypeAsCodeDegreeClassId != null)
				_tmp.FeeCdeDiscTypeCollection = (TList<FeeCdeDiscType>) MakeCopyOf(this.FeeCdeDiscTypeCollection); 
			if (this._admReqDocAsCodeDegreeClassId != null)
				_tmp.AdmReqDocCollection = (TList<AdmReqDoc>) MakeCopyOf(this.AdmReqDocCollection); 
			if (this._admAppCountAsCodeDegreeClassId != null)
				_tmp.AdmAppCountCollection = (TList<AdmAppCount>) MakeCopyOf(this.AdmAppCountCollection); 
			if (this._edOfferingAsCodeDegreeClassId != null)
				_tmp.EdOfferingCollection = (TList<EdOffering>) MakeCopyOf(this.EdOfferingCollection); 
			if (this._pgOfferingAsCodeDegreeClassId != null)
				_tmp.PgOfferingCollection = (TList<PgOffering>) MakeCopyOf(this.PgOfferingCollection); 
			if (this._admAcceptanceCategoryAsCodeDegreeClassId != null)
				_tmp.AdmAcceptanceCategoryCollection = (TList<AdmAcceptanceCategory>) MakeCopyOf(this.AdmAcceptanceCategoryCollection); 
			if (this._admTransAcceptanceCategoryAsCodeDegreeClassId != null)
				_tmp.AdmTransAcceptanceCategoryCollection = (TList<AdmTransAcceptanceCategory>) MakeCopyOf(this.AdmTransAcceptanceCategoryCollection); 
			if (this._edResultApproveAsCodeDegreeClassId != null)
				_tmp.EdResultApproveCollection = (TList<EdResultApprove>) MakeCopyOf(this.EdResultApproveCollection); 
			if (this._admCdePlacementExamAsCodeDegreeClassId != null)
				_tmp.AdmCdePlacementExamCollection = (TList<AdmCdePlacementExam>) MakeCopyOf(this.AdmCdePlacementExamCollection); 
			if (this._feeLimitRuleAsCodeDegreeClassId != null)
				_tmp.FeeLimitRuleCollection = (TList<FeeLimitRule>) MakeCopyOf(this.FeeLimitRuleCollection); 
			if (this._edSemesterAgendaAsCodeDegreeClassId != null)
				_tmp.EdSemesterAgendaCollection = (TList<EdSemesterAgenda>) MakeCopyOf(this.EdSemesterAgendaCollection); 
			if (this._feeCodeItemAsCodeDegreeClassId != null)
				_tmp.FeeCodeItemCollection = (TList<FeeCodeItem>) MakeCopyOf(this.FeeCodeItemCollection); 
			if (this._entCodeFullfillMetadataAsCodeDegreeClassId != null)
				_tmp.EntCodeFullfillMetadataCollection = (TList<EntCodeFullfillMetadata>) MakeCopyOf(this.EntCodeFullfillMetadataCollection); 
			if (this._admCompetitiveAvgAsCodeDegreeClassId != null)
				_tmp.AdmCompetitiveAvgCollection = (TList<AdmCompetitiveAvg>) MakeCopyOf(this.AdmCompetitiveAvgCollection); 
			if (this._admTansikCodesAsCodeDegreeClassId != null)
				_tmp.AdmTansikCodesCollection = (TList<AdmTansikCodes>) MakeCopyOf(this.AdmTansikCodesCollection); 
			if (this._feeFacultyRuleAsCodeDegreeClassId != null)
				_tmp.FeeFacultyRuleCollection = (TList<FeeFacultyRule>) MakeCopyOf(this.FeeFacultyRuleCollection); 
			if (this._edGraduationAwardAsCodeDegreeClassId != null)
				_tmp.EdGraduationAwardCollection = (TList<EdGraduationAward>) MakeCopyOf(this.EdGraduationAwardCollection); 
			if (this._coControlAsCodeDegreeClassId != null)
				_tmp.CoControlCollection = (TList<CoControl>) MakeCopyOf(this.CoControlCollection); 
			if (this._admCdeFeeAsCodeDegreeClassId != null)
				_tmp.AdmCdeFeeCollection = (TList<AdmCdeFee>) MakeCopyOf(this.AdmCdeFeeCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AsCodeDegreeClassEntityData _tmp = new AsCodeDegreeClassEntityData();
						
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.OriginalAsCodeDegreeClassId = this.OriginalAsCodeDegreeClassId;
			
			_tmp.ClassDescrAr = this.ClassDescrAr;
			_tmp.ClassDescrEn = this.ClassDescrEn;
			_tmp.ClassCode = this.ClassCode;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EdAcadYearFacultyCollection = (TList<EdAcadYearFaculty>) MakeCopyOf(this.EdAcadYearFacultyCollection, existingCopies); 
			_tmp.AdmAppRegHistoryCollection = (TList<AdmAppRegHistory>) MakeCopyOf(this.AdmAppRegHistoryCollection, existingCopies); 
			_tmp.EdSemesterOpenCollection = (TList<EdSemesterOpen>) MakeCopyOf(this.EdSemesterOpenCollection, existingCopies); 
			_tmp.SeUserAccntCollection = (TList<SeUserAccnt>) MakeCopyOf(this.SeUserAccntCollection, existingCopies); 
			_tmp.ScSectionGroupHdrCollection = (TList<ScSectionGroupHdr>) MakeCopyOf(this.ScSectionGroupHdrCollection, existingCopies); 
			_tmp.AdmCodeEngTestCollection = (TList<AdmCodeEngTest>) MakeCopyOf(this.AdmCodeEngTestCollection, existingCopies); 
			_tmp.AsCodeDegreeCollection = (TList<AsCodeDegree>) MakeCopyOf(this.AsCodeDegreeCollection, existingCopies); 
			_tmp.SeFormCollection = (TList<SeForm>) MakeCopyOf(this.SeFormCollection, existingCopies); 
			_tmp.SpoSponsorOfferCollection = (TList<SpoSponsorOffer>) MakeCopyOf(this.SpoSponsorOfferCollection, existingCopies); 
			_tmp.PgThesisGrantDegreeCollection = (TList<PgThesisGrantDegree>) MakeCopyOf(this.PgThesisGrantDegreeCollection, existingCopies); 
			_tmp.FeeRefundCodeCollection = (TList<FeeRefundCode>) MakeCopyOf(this.FeeRefundCodeCollection, existingCopies); 
			_tmp.FeeInstlmntRuleCollection = (TList<FeeInstlmntRule>) MakeCopyOf(this.FeeInstlmntRuleCollection, existingCopies); 
			_tmp.FeeCdeSchshipTypeCollection = (TList<FeeCdeSchshipType>) MakeCopyOf(this.FeeCdeSchshipTypeCollection, existingCopies); 
			_tmp.EdCdeCrsRegTypeCollection = (TList<EdCdeCrsRegType>) MakeCopyOf(this.EdCdeCrsRegTypeCollection, existingCopies); 
			_tmp.FeeAllowanceRuleCollection = (TList<FeeAllowanceRule>) MakeCopyOf(this.FeeAllowanceRuleCollection, existingCopies); 
			_tmp.EdCourseCollection = (TList<EdCourse>) MakeCopyOf(this.EdCourseCollection, existingCopies); 
			_tmp.EdBylawCollection = (TList<EdBylaw>) MakeCopyOf(this.EdBylawCollection, existingCopies); 
			_tmp.AdmPrecondQualCollection = (TList<AdmPrecondQual>) MakeCopyOf(this.AdmPrecondQualCollection, existingCopies); 
			_tmp.EdCdeQualCatCollection = (TList<EdCdeQualCat>) MakeCopyOf(this.EdCdeQualCatCollection, existingCopies); 
			_tmp.AppTypeRegStepsCollection = (TList<AppTypeRegSteps>) MakeCopyOf(this.AppTypeRegStepsCollection, existingCopies); 
			_tmp.AdmRatingParametersMajorsCollection = (TList<AdmRatingParametersMajors>) MakeCopyOf(this.AdmRatingParametersMajorsCollection, existingCopies); 
			_tmp.FeeCdeDiscTypeCollection = (TList<FeeCdeDiscType>) MakeCopyOf(this.FeeCdeDiscTypeCollection, existingCopies); 
			_tmp.AdmReqDocCollection = (TList<AdmReqDoc>) MakeCopyOf(this.AdmReqDocCollection, existingCopies); 
			_tmp.AdmAppCountCollection = (TList<AdmAppCount>) MakeCopyOf(this.AdmAppCountCollection, existingCopies); 
			_tmp.EdOfferingCollection = (TList<EdOffering>) MakeCopyOf(this.EdOfferingCollection, existingCopies); 
			_tmp.PgOfferingCollection = (TList<PgOffering>) MakeCopyOf(this.PgOfferingCollection, existingCopies); 
			_tmp.AdmAcceptanceCategoryCollection = (TList<AdmAcceptanceCategory>) MakeCopyOf(this.AdmAcceptanceCategoryCollection, existingCopies); 
			_tmp.AdmTransAcceptanceCategoryCollection = (TList<AdmTransAcceptanceCategory>) MakeCopyOf(this.AdmTransAcceptanceCategoryCollection, existingCopies); 
			_tmp.EdResultApproveCollection = (TList<EdResultApprove>) MakeCopyOf(this.EdResultApproveCollection, existingCopies); 
			_tmp.AdmCdePlacementExamCollection = (TList<AdmCdePlacementExam>) MakeCopyOf(this.AdmCdePlacementExamCollection, existingCopies); 
			_tmp.FeeLimitRuleCollection = (TList<FeeLimitRule>) MakeCopyOf(this.FeeLimitRuleCollection, existingCopies); 
			_tmp.EdSemesterAgendaCollection = (TList<EdSemesterAgenda>) MakeCopyOf(this.EdSemesterAgendaCollection, existingCopies); 
			_tmp.FeeCodeItemCollection = (TList<FeeCodeItem>) MakeCopyOf(this.FeeCodeItemCollection, existingCopies); 
			_tmp.EntCodeFullfillMetadataCollection = (TList<EntCodeFullfillMetadata>) MakeCopyOf(this.EntCodeFullfillMetadataCollection, existingCopies); 
			_tmp.AdmCompetitiveAvgCollection = (TList<AdmCompetitiveAvg>) MakeCopyOf(this.AdmCompetitiveAvgCollection, existingCopies); 
			_tmp.AdmTansikCodesCollection = (TList<AdmTansikCodes>) MakeCopyOf(this.AdmTansikCodesCollection, existingCopies); 
			_tmp.FeeFacultyRuleCollection = (TList<FeeFacultyRule>) MakeCopyOf(this.FeeFacultyRuleCollection, existingCopies); 
			_tmp.EdGraduationAwardCollection = (TList<EdGraduationAward>) MakeCopyOf(this.EdGraduationAwardCollection, existingCopies); 
			_tmp.CoControlCollection = (TList<CoControl>) MakeCopyOf(this.CoControlCollection, existingCopies); 
			_tmp.AdmCdeFeeCollection = (TList<AdmCdeFee>) MakeCopyOf(this.AdmCdeFeeCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AsCodeDegreeClassColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AsCodeDegreeClassColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AsCodeDegreeClassColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AsCodeDegreeClassColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AsCodeDegreeClassColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AsCodeDegreeClassColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AsCodeDegreeClassEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AsCodeDegreeClassEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AsCodeDegreeClassColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AsCodeDegreeClassColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AsCodeDegreeClassEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AsCodeDegreeClassEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AsCodeDegreeClassEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AsCodeDegreeClass"/> object.
	/// </remarks>
	public class AsCodeDegreeClassEventArgs : System.EventArgs
	{
		private AsCodeDegreeClassColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AsCodeDegreeClassEventArgs class.
		///</summary>
		public AsCodeDegreeClassEventArgs(AsCodeDegreeClassColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AsCodeDegreeClassEventArgs class.
		///</summary>
		public AsCodeDegreeClassEventArgs(AsCodeDegreeClassColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AsCodeDegreeClassColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AsCodeDegreeClassColumn" />
		public AsCodeDegreeClassColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AsCodeDegreeClass related events.
	///</summary>
	public delegate void AsCodeDegreeClassEventHandler(object sender, AsCodeDegreeClassEventArgs e);
	
	#region AsCodeDegreeClassComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AsCodeDegreeClassComparer : System.Collections.Generic.IComparer<AsCodeDegreeClass>
	{
		AsCodeDegreeClassColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AsCodeDegreeClassComparer"/> class.
        /// </summary>
		public AsCodeDegreeClassComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AsCodeDegreeClassComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AsCodeDegreeClassComparer(AsCodeDegreeClassColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AsCodeDegreeClass"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AsCodeDegreeClass"/> to compare.</param>
        /// <param name="b">The second <c>AsCodeDegreeClass</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AsCodeDegreeClass a, AsCodeDegreeClass b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AsCodeDegreeClass entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AsCodeDegreeClass a, AsCodeDegreeClass b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AsCodeDegreeClassColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AsCodeDegreeClassKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AsCodeDegreeClass"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AsCodeDegreeClassKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AsCodeDegreeClassKey class.
		/// </summary>
		public AsCodeDegreeClassKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AsCodeDegreeClassKey class.
		/// </summary>
		public AsCodeDegreeClassKey(AsCodeDegreeClassBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AsCodeDegreeClassId = entity.AsCodeDegreeClassId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AsCodeDegreeClassKey class.
		/// </summary>
		public AsCodeDegreeClassKey(System.Decimal _asCodeDegreeClassId)
		{
			#region Init Properties

			this.AsCodeDegreeClassId = _asCodeDegreeClassId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AsCodeDegreeClassBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AsCodeDegreeClassBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AsCodeDegreeClassId property
		private System.Decimal _asCodeDegreeClassId;
		
		/// <summary>
		/// Gets or sets the AsCodeDegreeClassId property.
		/// </summary>
		public System.Decimal AsCodeDegreeClassId
		{
			get { return _asCodeDegreeClassId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AsCodeDegreeClassId = value;
				
				_asCodeDegreeClassId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AsCodeDegreeClassId = ( values["AsCodeDegreeClassId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["AsCodeDegreeClassId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AsCodeDegreeClassId", AsCodeDegreeClassId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AsCodeDegreeClassId: {0}{1}",
								AsCodeDegreeClassId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AsCodeDegreeClassColumn Enum
	
	/// <summary>
	/// Enumerate the AsCodeDegreeClass columns.
	/// </summary>
	[Serializable]
	public enum AsCodeDegreeClassColumn : int
	{
		/// <summary>
		/// AsCodeDegreeClassId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_CLASS_ID")]
		[ColumnEnum("AS_CODE_DEGREE_CLASS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		AsCodeDegreeClassId = 1,
		/// <summary>
		/// ClassDescrAr : 
		/// </summary>
		[EnumTextValue("CLASS_DESCR_AR")]
		[ColumnEnum("CLASS_DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		ClassDescrAr = 2,
		/// <summary>
		/// ClassDescrEn : 
		/// </summary>
		[EnumTextValue("CLASS_DESCR_EN")]
		[ColumnEnum("CLASS_DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		ClassDescrEn = 3,
		/// <summary>
		/// ClassCode : 
		/// </summary>
		[EnumTextValue("CLASS_CODE")]
		[ColumnEnum("CLASS_CODE", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		ClassCode = 4
	}//End enum

	#endregion AsCodeDegreeClassColumn Enum

} // end namespace
