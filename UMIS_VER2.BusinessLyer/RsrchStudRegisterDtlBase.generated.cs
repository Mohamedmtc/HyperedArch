
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file RsrchStudRegisterDtl.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'RSRCH_STUD_REGISTER_DTL' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class RsrchStudRegisterDtlBase : EntityBase, IRsrchStudRegisterDtl, IEntityId<RsrchStudRegisterDtlKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private RsrchStudRegisterDtlEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private RsrchStudRegisterDtlEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private RsrchStudRegisterDtlEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<RsrchStudRegisterDtl> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event RsrchStudRegisterDtlEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event RsrchStudRegisterDtlEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="RsrchStudRegisterDtlBase"/> instance.
		///</summary>
		public RsrchStudRegisterDtlBase()
		{
			this.entityData = new RsrchStudRegisterDtlEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="RsrchStudRegisterDtlBase"/> instance.
		///</summary>
		///<param name="_rsrchStudRegisterDtlId">عنواين البحث العلمى</param>
		///<param name="_rsrchStudRegisterId">اختيار العنوان المقترح للبحث العلمى</param>
		///<param name="_titleAr">عنوان البحث العلمى</param>
		///<param name="_rsrchTypeFlg">نوع البحث:
		/// 		/// 1: بحث
		/// 		/// 2: تحقيق</param>
		///<param name="_rsrchCdeStatusId">حالة عنوان البحث العلمى</param>
		///<param name="_rsrchValue">أهمية الموضوع</param>
		///<param name="_rsrchReason">سبب الاختيار</param>
		///<param name="_rsrchReference">اهم المصادر و المراجع</param>
		///<param name="_rsrchSummary">اهم المباحث "ملخص البحث"</param>
		///<param name="_auditStatusFlg">حالة التدقيق
		/// 		/// 1- غير مبحوث
		/// 		/// 2- مبحوث</param>
		///<param name="_auditNote">ملاحظات التدقيق</param>
		///<param name="_rsrchOrdr">ترتيب الموضوع</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public RsrchStudRegisterDtlBase(System.Decimal _rsrchStudRegisterDtlId, System.Decimal _rsrchStudRegisterId, 
			System.String _titleAr, System.Int16? _rsrchTypeFlg, System.Int32 _rsrchCdeStatusId, 
			System.String _rsrchValue, System.String _rsrchReason, System.String _rsrchReference, 
			System.String _rsrchSummary, System.Int16? _auditStatusFlg, System.String _auditNote, 
			System.Int32? _rsrchOrdr, System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			this.entityData = new RsrchStudRegisterDtlEntityData();
			this.backupData = null;

			this.RsrchStudRegisterDtlId = _rsrchStudRegisterDtlId;
			this.RsrchStudRegisterId = _rsrchStudRegisterId;
			this.TitleAr = _titleAr;
			this.RsrchTypeFlg = _rsrchTypeFlg;
			this.RsrchCdeStatusId = _rsrchCdeStatusId;
			this.RsrchValue = _rsrchValue;
			this.RsrchReason = _rsrchReason;
			this.RsrchReference = _rsrchReference;
			this.RsrchSummary = _rsrchSummary;
			this.AuditStatusFlg = _auditStatusFlg;
			this.AuditNote = _auditNote;
			this.RsrchOrdr = _rsrchOrdr;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="RsrchStudRegisterDtl"/> instance.
		///</summary>
		///<param name="_rsrchStudRegisterDtlId">عنواين البحث العلمى</param>
		///<param name="_rsrchStudRegisterId">اختيار العنوان المقترح للبحث العلمى</param>
		///<param name="_titleAr">عنوان البحث العلمى</param>
		///<param name="_rsrchTypeFlg">نوع البحث:
		/// 		/// 1: بحث
		/// 		/// 2: تحقيق</param>
		///<param name="_rsrchCdeStatusId">حالة عنوان البحث العلمى</param>
		///<param name="_rsrchValue">أهمية الموضوع</param>
		///<param name="_rsrchReason">سبب الاختيار</param>
		///<param name="_rsrchReference">اهم المصادر و المراجع</param>
		///<param name="_rsrchSummary">اهم المباحث "ملخص البحث"</param>
		///<param name="_auditStatusFlg">حالة التدقيق
		/// 		/// 1- غير مبحوث
		/// 		/// 2- مبحوث</param>
		///<param name="_auditNote">ملاحظات التدقيق</param>
		///<param name="_rsrchOrdr">ترتيب الموضوع</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static RsrchStudRegisterDtl CreateRsrchStudRegisterDtl(System.Decimal _rsrchStudRegisterDtlId, System.Decimal _rsrchStudRegisterId, 
			System.String _titleAr, System.Int16? _rsrchTypeFlg, System.Int32 _rsrchCdeStatusId, 
			System.String _rsrchValue, System.String _rsrchReason, System.String _rsrchReference, 
			System.String _rsrchSummary, System.Int16? _auditStatusFlg, System.String _auditNote, 
			System.Int32? _rsrchOrdr, System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			RsrchStudRegisterDtl newRsrchStudRegisterDtl = new RsrchStudRegisterDtl();
			newRsrchStudRegisterDtl.RsrchStudRegisterDtlId = _rsrchStudRegisterDtlId;
			newRsrchStudRegisterDtl.RsrchStudRegisterId = _rsrchStudRegisterId;
			newRsrchStudRegisterDtl.TitleAr = _titleAr;
			newRsrchStudRegisterDtl.RsrchTypeFlg = _rsrchTypeFlg;
			newRsrchStudRegisterDtl.RsrchCdeStatusId = _rsrchCdeStatusId;
			newRsrchStudRegisterDtl.RsrchValue = _rsrchValue;
			newRsrchStudRegisterDtl.RsrchReason = _rsrchReason;
			newRsrchStudRegisterDtl.RsrchReference = _rsrchReference;
			newRsrchStudRegisterDtl.RsrchSummary = _rsrchSummary;
			newRsrchStudRegisterDtl.AuditStatusFlg = _auditStatusFlg;
			newRsrchStudRegisterDtl.AuditNote = _auditNote;
			newRsrchStudRegisterDtl.RsrchOrdr = _rsrchOrdr;
			newRsrchStudRegisterDtl.SeUserId = _seUserId;
			newRsrchStudRegisterDtl.LastDate = _lastDate;
			return newRsrchStudRegisterDtl;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the RsrchStudRegisterDtlId property. 
		///		عنواين البحث العلمى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"عنواين البحث العلمى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal RsrchStudRegisterDtlId
		{
			get
			{
				return this.entityData.RsrchStudRegisterDtlId; 
			}
			
			set
			{
				if (this.entityData.RsrchStudRegisterDtlId == value)
					return;
					
				OnColumnChanging(RsrchStudRegisterDtlColumn.RsrchStudRegisterDtlId, this.entityData.RsrchStudRegisterDtlId);
				this.entityData.RsrchStudRegisterDtlId = value;
				this.EntityId.RsrchStudRegisterDtlId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RsrchStudRegisterDtlColumn.RsrchStudRegisterDtlId, this.entityData.RsrchStudRegisterDtlId);
				OnPropertyChanged("RsrchStudRegisterDtlId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the RSRCH_STUD_REGISTER_DTL_ID property.
		///		عنواين البحث العلمى
		/// </summary>
		/// <remarks>This is the original value of the RSRCH_STUD_REGISTER_DTL_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalRsrchStudRegisterDtlId
		{
			get { return this.entityData.OriginalRsrchStudRegisterDtlId; }
			set { this.entityData.OriginalRsrchStudRegisterDtlId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the RsrchStudRegisterId property. 
		///		اختيار العنوان المقترح للبحث العلمى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"اختيار العنوان المقترح للبحث العلمى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal RsrchStudRegisterId
		{
			get
			{
				return this.entityData.RsrchStudRegisterId; 
			}
			
			set
			{
				if (this.entityData.RsrchStudRegisterId == value)
					return;
					
				OnColumnChanging(RsrchStudRegisterDtlColumn.RsrchStudRegisterId, this.entityData.RsrchStudRegisterId);
				this.entityData.RsrchStudRegisterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RsrchStudRegisterDtlColumn.RsrchStudRegisterId, this.entityData.RsrchStudRegisterId);
				OnPropertyChanged("RsrchStudRegisterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TitleAr property. 
		///		عنوان البحث العلمى
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"عنوان البحث العلمى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 250)]
		public virtual System.String TitleAr
		{
			get
			{
				return this.entityData.TitleAr; 
			}
			
			set
			{
				if (this.entityData.TitleAr == value)
					return;
					
				OnColumnChanging(RsrchStudRegisterDtlColumn.TitleAr, this.entityData.TitleAr);
				this.entityData.TitleAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RsrchStudRegisterDtlColumn.TitleAr, this.entityData.TitleAr);
				OnPropertyChanged("TitleAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RsrchTypeFlg property. 
		///		نوع البحث:
		/// 		/// 1: بحث
		/// 		/// 2: تحقيق
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsRsrchTypeFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"نوع البحث: 1: بحث 2: تحقيق"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? RsrchTypeFlg
		{
			get
			{
				return this.entityData.RsrchTypeFlg; 
			}
			
			set
			{
				if (this.entityData.RsrchTypeFlg == value)
					return;
					
				OnColumnChanging(RsrchStudRegisterDtlColumn.RsrchTypeFlg, this.entityData.RsrchTypeFlg);
				this.entityData.RsrchTypeFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RsrchStudRegisterDtlColumn.RsrchTypeFlg, this.entityData.RsrchTypeFlg);
				OnPropertyChanged("RsrchTypeFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RsrchCdeStatusId property. 
		///		حالة عنوان البحث العلمى
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"حالة عنوان البحث العلمى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 RsrchCdeStatusId
		{
			get
			{
				return this.entityData.RsrchCdeStatusId; 
			}
			
			set
			{
				if (this.entityData.RsrchCdeStatusId == value)
					return;
					
				OnColumnChanging(RsrchStudRegisterDtlColumn.RsrchCdeStatusId, this.entityData.RsrchCdeStatusId);
				this.entityData.RsrchCdeStatusId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RsrchStudRegisterDtlColumn.RsrchCdeStatusId, this.entityData.RsrchCdeStatusId);
				OnPropertyChanged("RsrchCdeStatusId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RsrchValue property. 
		///		أهمية الموضوع
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"أهمية الموضوع"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String RsrchValue
		{
			get
			{
				return this.entityData.RsrchValue; 
			}
			
			set
			{
				if (this.entityData.RsrchValue == value)
					return;
					
				OnColumnChanging(RsrchStudRegisterDtlColumn.RsrchValue, this.entityData.RsrchValue);
				this.entityData.RsrchValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RsrchStudRegisterDtlColumn.RsrchValue, this.entityData.RsrchValue);
				OnPropertyChanged("RsrchValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RsrchReason property. 
		///		سبب الاختيار
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"سبب الاختيار"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String RsrchReason
		{
			get
			{
				return this.entityData.RsrchReason; 
			}
			
			set
			{
				if (this.entityData.RsrchReason == value)
					return;
					
				OnColumnChanging(RsrchStudRegisterDtlColumn.RsrchReason, this.entityData.RsrchReason);
				this.entityData.RsrchReason = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RsrchStudRegisterDtlColumn.RsrchReason, this.entityData.RsrchReason);
				OnPropertyChanged("RsrchReason");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RsrchReference property. 
		///		اهم المصادر و المراجع
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"اهم المصادر و المراجع"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String RsrchReference
		{
			get
			{
				return this.entityData.RsrchReference; 
			}
			
			set
			{
				if (this.entityData.RsrchReference == value)
					return;
					
				OnColumnChanging(RsrchStudRegisterDtlColumn.RsrchReference, this.entityData.RsrchReference);
				this.entityData.RsrchReference = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RsrchStudRegisterDtlColumn.RsrchReference, this.entityData.RsrchReference);
				OnPropertyChanged("RsrchReference");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RsrchSummary property. 
		///		اهم المباحث "ملخص البحث"
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"اهم المباحث 'ملخص البحث'"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String RsrchSummary
		{
			get
			{
				return this.entityData.RsrchSummary; 
			}
			
			set
			{
				if (this.entityData.RsrchSummary == value)
					return;
					
				OnColumnChanging(RsrchStudRegisterDtlColumn.RsrchSummary, this.entityData.RsrchSummary);
				this.entityData.RsrchSummary = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RsrchStudRegisterDtlColumn.RsrchSummary, this.entityData.RsrchSummary);
				OnPropertyChanged("RsrchSummary");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AuditStatusFlg property. 
		///		حالة التدقيق
		/// 		/// 1- غير مبحوث
		/// 		/// 2- مبحوث
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsAuditStatusFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"حالة التدقيق 1- غير مبحوث 2- مبحوث"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? AuditStatusFlg
		{
			get
			{
				return this.entityData.AuditStatusFlg; 
			}
			
			set
			{
				if (this.entityData.AuditStatusFlg == value)
					return;
					
				OnColumnChanging(RsrchStudRegisterDtlColumn.AuditStatusFlg, this.entityData.AuditStatusFlg);
				this.entityData.AuditStatusFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RsrchStudRegisterDtlColumn.AuditStatusFlg, this.entityData.AuditStatusFlg);
				OnPropertyChanged("AuditStatusFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AuditNote property. 
		///		ملاحظات التدقيق
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"ملاحظات التدقيق"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String AuditNote
		{
			get
			{
				return this.entityData.AuditNote; 
			}
			
			set
			{
				if (this.entityData.AuditNote == value)
					return;
					
				OnColumnChanging(RsrchStudRegisterDtlColumn.AuditNote, this.entityData.AuditNote);
				this.entityData.AuditNote = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RsrchStudRegisterDtlColumn.AuditNote, this.entityData.AuditNote);
				OnPropertyChanged("AuditNote");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RsrchOrdr property. 
		///		ترتيب الموضوع
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsRsrchOrdrNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"ترتيب الموضوع"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? RsrchOrdr
		{
			get
			{
				return this.entityData.RsrchOrdr; 
			}
			
			set
			{
				if (this.entityData.RsrchOrdr == value)
					return;
					
				OnColumnChanging(RsrchStudRegisterDtlColumn.RsrchOrdr, this.entityData.RsrchOrdr);
				this.entityData.RsrchOrdr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RsrchStudRegisterDtlColumn.RsrchOrdr, this.entityData.RsrchOrdr);
				OnPropertyChanged("RsrchOrdr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(RsrchStudRegisterDtlColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RsrchStudRegisterDtlColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(RsrchStudRegisterDtlColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RsrchStudRegisterDtlColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="RsrchCdeStatus"/>.
		/// </summary>
		/// <value>The source RsrchCdeStatus for RsrchCdeStatusId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual RsrchCdeStatus RsrchCdeStatusIdSource
      	{
            get { return entityData.RsrchCdeStatusIdSource; }
            set { entityData.RsrchCdeStatusIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="RsrchStudRegister"/>.
		/// </summary>
		/// <value>The source RsrchStudRegister for RsrchStudRegisterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual RsrchStudRegister RsrchStudRegisterIdSource
      	{
            get { return entityData.RsrchStudRegisterIdSource; }
            set { entityData.RsrchStudRegisterIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of RsrchCommStaffRecom objects
		///	which are related to this object through the relation FK_RSRCH_COMM_STAFF_RECOM_RSRCH_STUD_REGISTER_DTL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<RsrchCommStaffRecom> RsrchCommStaffRecomCollection
		{
			get { return entityData.RsrchCommStaffRecomCollection; }
			set { entityData.RsrchCommStaffRecomCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of PgThesisStud objects
		///	which are related to this object through the relation FK_PG_THESIS_STUD_RSRCH_STUD_REGISTER_DTL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgThesisStud> PgThesisStudCollection
		{
			get { return entityData.PgThesisStudCollection; }
			set { entityData.PgThesisStudCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("TitleAr", "Title Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TitleAr", "Title Ar", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("RsrchValue", "Rsrch Value", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("RsrchReason", "Rsrch Reason", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("RsrchReference", "Rsrch Reference", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AuditNote", "Audit Note", 250));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "RSRCH_STUD_REGISTER_DTL"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"RSRCH_STUD_REGISTER_DTL_ID", "RSRCH_STUD_REGISTER_ID", "TITLE_AR", "RSRCH_TYPE_FLG", "RSRCH_CDE_STATUS_ID", "RSRCH_VALUE", "RSRCH_REASON", "RSRCH_REFERENCE", "RSRCH_SUMMARY", "AUDIT_STATUS_FLG", "AUDIT_NOTE", "RSRCH_ORDR", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as RsrchStudRegisterDtlEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (RsrchStudRegisterDtl) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<RsrchStudRegisterDtl>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as RsrchStudRegisterDtl);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed RsrchStudRegisterDtl Entity 
		///</summary>
		protected virtual RsrchStudRegisterDtl Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			RsrchStudRegisterDtl copy = new RsrchStudRegisterDtl();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.RsrchStudRegisterDtlId = this.RsrchStudRegisterDtlId;
					copy.OriginalRsrchStudRegisterDtlId = this.OriginalRsrchStudRegisterDtlId;
				copy.RsrchStudRegisterId = this.RsrchStudRegisterId;
				copy.TitleAr = this.TitleAr;
				copy.RsrchTypeFlg = this.RsrchTypeFlg;
				copy.RsrchCdeStatusId = this.RsrchCdeStatusId;
				copy.RsrchValue = this.RsrchValue;
				copy.RsrchReason = this.RsrchReason;
				copy.RsrchReference = this.RsrchReference;
				copy.RsrchSummary = this.RsrchSummary;
				copy.AuditStatusFlg = this.AuditStatusFlg;
				copy.AuditNote = this.AuditNote;
				copy.RsrchOrdr = this.RsrchOrdr;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.RsrchCdeStatusIdSource != null && existingCopies.Contains(this.RsrchCdeStatusIdSource))
				copy.RsrchCdeStatusIdSource = existingCopies[this.RsrchCdeStatusIdSource] as RsrchCdeStatus;
			else
				copy.RsrchCdeStatusIdSource = MakeCopyOf(this.RsrchCdeStatusIdSource, existingCopies) as RsrchCdeStatus;
			if (this.RsrchStudRegisterIdSource != null && existingCopies.Contains(this.RsrchStudRegisterIdSource))
				copy.RsrchStudRegisterIdSource = existingCopies[this.RsrchStudRegisterIdSource] as RsrchStudRegister;
			else
				copy.RsrchStudRegisterIdSource = MakeCopyOf(this.RsrchStudRegisterIdSource, existingCopies) as RsrchStudRegister;
		
			//deep copy nested objects
			copy.RsrchCommStaffRecomCollection = (TList<RsrchCommStaffRecom>) MakeCopyOf(this.RsrchCommStaffRecomCollection, existingCopies); 
			copy.PgThesisStudCollection = (TList<PgThesisStud>) MakeCopyOf(this.PgThesisStudCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed RsrchStudRegisterDtl Entity 
		///</summary>
		public virtual RsrchStudRegisterDtl Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed RsrchStudRegisterDtl Entity which is a deep copy of the current entity.
		///</summary>
		public virtual RsrchStudRegisterDtl DeepCopy()
		{
			return EntityHelper.Clone<RsrchStudRegisterDtl>(this as RsrchStudRegisterDtl);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as RsrchStudRegisterDtlEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new RsrchStudRegisterDtlEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as RsrchStudRegisterDtlEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(RsrchStudRegisterDtlColumn column)
		{
			switch(column)
			{
					case RsrchStudRegisterDtlColumn.RsrchStudRegisterDtlId:
					return entityData.RsrchStudRegisterDtlId != _originalData.RsrchStudRegisterDtlId;
					case RsrchStudRegisterDtlColumn.RsrchStudRegisterId:
					return entityData.RsrchStudRegisterId != _originalData.RsrchStudRegisterId;
					case RsrchStudRegisterDtlColumn.TitleAr:
					return entityData.TitleAr != _originalData.TitleAr;
					case RsrchStudRegisterDtlColumn.RsrchTypeFlg:
					return entityData.RsrchTypeFlg != _originalData.RsrchTypeFlg;
					case RsrchStudRegisterDtlColumn.RsrchCdeStatusId:
					return entityData.RsrchCdeStatusId != _originalData.RsrchCdeStatusId;
					case RsrchStudRegisterDtlColumn.RsrchValue:
					return entityData.RsrchValue != _originalData.RsrchValue;
					case RsrchStudRegisterDtlColumn.RsrchReason:
					return entityData.RsrchReason != _originalData.RsrchReason;
					case RsrchStudRegisterDtlColumn.RsrchReference:
					return entityData.RsrchReference != _originalData.RsrchReference;
					case RsrchStudRegisterDtlColumn.RsrchSummary:
					return entityData.RsrchSummary != _originalData.RsrchSummary;
					case RsrchStudRegisterDtlColumn.AuditStatusFlg:
					return entityData.AuditStatusFlg != _originalData.AuditStatusFlg;
					case RsrchStudRegisterDtlColumn.AuditNote:
					return entityData.AuditNote != _originalData.AuditNote;
					case RsrchStudRegisterDtlColumn.RsrchOrdr:
					return entityData.RsrchOrdr != _originalData.RsrchOrdr;
					case RsrchStudRegisterDtlColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case RsrchStudRegisterDtlColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< RsrchStudRegisterDtlColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.RsrchStudRegisterDtlId != _originalData.RsrchStudRegisterDtlId;
			result = result || entityData.RsrchStudRegisterId != _originalData.RsrchStudRegisterId;
			result = result || entityData.TitleAr != _originalData.TitleAr;
			result = result || entityData.RsrchTypeFlg != _originalData.RsrchTypeFlg;
			result = result || entityData.RsrchCdeStatusId != _originalData.RsrchCdeStatusId;
			result = result || entityData.RsrchValue != _originalData.RsrchValue;
			result = result || entityData.RsrchReason != _originalData.RsrchReason;
			result = result || entityData.RsrchReference != _originalData.RsrchReference;
			result = result || entityData.RsrchSummary != _originalData.RsrchSummary;
			result = result || entityData.AuditStatusFlg != _originalData.AuditStatusFlg;
			result = result || entityData.AuditNote != _originalData.AuditNote;
			result = result || entityData.RsrchOrdr != _originalData.RsrchOrdr;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a RsrchStudRegisterDtl Entity with the original data.
		///</summary>
		public RsrchStudRegisterDtl GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateRsrchStudRegisterDtl(
				_originalData.RsrchStudRegisterDtlId,
				_originalData.RsrchStudRegisterId,
				_originalData.TitleAr,
				_originalData.RsrchTypeFlg,
				_originalData.RsrchCdeStatusId,
				_originalData.RsrchValue,
				_originalData.RsrchReason,
				_originalData.RsrchReference,
				_originalData.RsrchSummary,
				_originalData.AuditStatusFlg,
				_originalData.AuditNote,
				_originalData.RsrchOrdr,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (RsrchStudRegisterDtl)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="RsrchStudRegisterDtlBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is RsrchStudRegisterDtlBase)
				return ValueEquals(this, (RsrchStudRegisterDtlBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="RsrchStudRegisterDtlBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.RsrchStudRegisterDtlId.GetHashCode() ^ 
					this.RsrchStudRegisterId.GetHashCode() ^ 
					this.TitleAr.GetHashCode() ^ 
					((this.RsrchTypeFlg == null) ? string.Empty : this.RsrchTypeFlg.ToString()).GetHashCode() ^ 
					this.RsrchCdeStatusId.GetHashCode() ^ 
					((this.RsrchValue == null) ? string.Empty : this.RsrchValue.ToString()).GetHashCode() ^ 
					((this.RsrchReason == null) ? string.Empty : this.RsrchReason.ToString()).GetHashCode() ^ 
					((this.RsrchReference == null) ? string.Empty : this.RsrchReference.ToString()).GetHashCode() ^ 
					((this.RsrchSummary == null) ? string.Empty : this.RsrchSummary.ToString()).GetHashCode() ^ 
					((this.AuditStatusFlg == null) ? string.Empty : this.AuditStatusFlg.ToString()).GetHashCode() ^ 
					((this.AuditNote == null) ? string.Empty : this.AuditNote.ToString()).GetHashCode() ^ 
					((this.RsrchOrdr == null) ? string.Empty : this.RsrchOrdr.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="RsrchStudRegisterDtlBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(RsrchStudRegisterDtlBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="RsrchStudRegisterDtlBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="RsrchStudRegisterDtlBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="RsrchStudRegisterDtlBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(RsrchStudRegisterDtlBase Object1, RsrchStudRegisterDtlBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.RsrchStudRegisterDtlId != Object2.RsrchStudRegisterDtlId)
				equal = false;
			if (Object1.RsrchStudRegisterId != Object2.RsrchStudRegisterId)
				equal = false;
			if (Object1.TitleAr != Object2.TitleAr)
				equal = false;
			if ( Object1.RsrchTypeFlg != null && Object2.RsrchTypeFlg != null )
			{
				if (Object1.RsrchTypeFlg != Object2.RsrchTypeFlg)
					equal = false;
			}
			else if (Object1.RsrchTypeFlg == null ^ Object2.RsrchTypeFlg == null )
			{
				equal = false;
			}
			if (Object1.RsrchCdeStatusId != Object2.RsrchCdeStatusId)
				equal = false;
			if ( Object1.RsrchValue != null && Object2.RsrchValue != null )
			{
				if (Object1.RsrchValue != Object2.RsrchValue)
					equal = false;
			}
			else if (Object1.RsrchValue == null ^ Object2.RsrchValue == null )
			{
				equal = false;
			}
			if ( Object1.RsrchReason != null && Object2.RsrchReason != null )
			{
				if (Object1.RsrchReason != Object2.RsrchReason)
					equal = false;
			}
			else if (Object1.RsrchReason == null ^ Object2.RsrchReason == null )
			{
				equal = false;
			}
			if ( Object1.RsrchReference != null && Object2.RsrchReference != null )
			{
				if (Object1.RsrchReference != Object2.RsrchReference)
					equal = false;
			}
			else if (Object1.RsrchReference == null ^ Object2.RsrchReference == null )
			{
				equal = false;
			}
			if ( Object1.RsrchSummary != null && Object2.RsrchSummary != null )
			{
				if (Object1.RsrchSummary != Object2.RsrchSummary)
					equal = false;
			}
			else if (Object1.RsrchSummary == null ^ Object2.RsrchSummary == null )
			{
				equal = false;
			}
			if ( Object1.AuditStatusFlg != null && Object2.AuditStatusFlg != null )
			{
				if (Object1.AuditStatusFlg != Object2.AuditStatusFlg)
					equal = false;
			}
			else if (Object1.AuditStatusFlg == null ^ Object2.AuditStatusFlg == null )
			{
				equal = false;
			}
			if ( Object1.AuditNote != null && Object2.AuditNote != null )
			{
				if (Object1.AuditNote != Object2.AuditNote)
					equal = false;
			}
			else if (Object1.AuditNote == null ^ Object2.AuditNote == null )
			{
				equal = false;
			}
			if ( Object1.RsrchOrdr != null && Object2.RsrchOrdr != null )
			{
				if (Object1.RsrchOrdr != Object2.RsrchOrdr)
					equal = false;
			}
			else if (Object1.RsrchOrdr == null ^ Object2.RsrchOrdr == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((RsrchStudRegisterDtlBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static RsrchStudRegisterDtlComparer GetComparer()
        {
            return new RsrchStudRegisterDtlComparer();
        }
        */

        // Comparer delegates back to RsrchStudRegisterDtl
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(RsrchStudRegisterDtl rhs, RsrchStudRegisterDtlColumn which)
        {
            switch (which)
            {
            	
            	
            	case RsrchStudRegisterDtlColumn.RsrchStudRegisterDtlId:
            		return this.RsrchStudRegisterDtlId.CompareTo(rhs.RsrchStudRegisterDtlId);
            		
            		                 
            	
            	
            	case RsrchStudRegisterDtlColumn.RsrchStudRegisterId:
            		return this.RsrchStudRegisterId.CompareTo(rhs.RsrchStudRegisterId);
            		
            		                 
            	
            	
            	case RsrchStudRegisterDtlColumn.TitleAr:
            		return this.TitleAr.CompareTo(rhs.TitleAr);
            		
            		                 
            	
            	
            	case RsrchStudRegisterDtlColumn.RsrchTypeFlg:
            		return this.RsrchTypeFlg.Value.CompareTo(rhs.RsrchTypeFlg.Value);
            		
            		                 
            	
            	
            	case RsrchStudRegisterDtlColumn.RsrchCdeStatusId:
            		return this.RsrchCdeStatusId.CompareTo(rhs.RsrchCdeStatusId);
            		
            		                 
            	
            	
            	case RsrchStudRegisterDtlColumn.RsrchValue:
            		return this.RsrchValue.CompareTo(rhs.RsrchValue);
            		
            		                 
            	
            	
            	case RsrchStudRegisterDtlColumn.RsrchReason:
            		return this.RsrchReason.CompareTo(rhs.RsrchReason);
            		
            		                 
            	
            	
            	case RsrchStudRegisterDtlColumn.RsrchReference:
            		return this.RsrchReference.CompareTo(rhs.RsrchReference);
            		
            		                 
            	
            	
            	case RsrchStudRegisterDtlColumn.RsrchSummary:
            		return this.RsrchSummary.CompareTo(rhs.RsrchSummary);
            		
            		                 
            	
            	
            	case RsrchStudRegisterDtlColumn.AuditStatusFlg:
            		return this.AuditStatusFlg.Value.CompareTo(rhs.AuditStatusFlg.Value);
            		
            		                 
            	
            	
            	case RsrchStudRegisterDtlColumn.AuditNote:
            		return this.AuditNote.CompareTo(rhs.AuditNote);
            		
            		                 
            	
            	
            	case RsrchStudRegisterDtlColumn.RsrchOrdr:
            		return this.RsrchOrdr.Value.CompareTo(rhs.RsrchOrdr.Value);
            		
            		                 
            	
            	
            	case RsrchStudRegisterDtlColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case RsrchStudRegisterDtlColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<RsrchStudRegisterDtlKey> Members
		
		// member variable for the EntityId property
		private RsrchStudRegisterDtlKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual RsrchStudRegisterDtlKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new RsrchStudRegisterDtlKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("RsrchStudRegisterDtl")
					.Append("|").Append( this.RsrchStudRegisterDtlId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{15}{14}- RsrchStudRegisterDtlId: {0}{14}- RsrchStudRegisterId: {1}{14}- TitleAr: {2}{14}- RsrchTypeFlg: {3}{14}- RsrchCdeStatusId: {4}{14}- RsrchValue: {5}{14}- RsrchReason: {6}{14}- RsrchReference: {7}{14}- RsrchSummary: {8}{14}- AuditStatusFlg: {9}{14}- AuditNote: {10}{14}- RsrchOrdr: {11}{14}- SeUserId: {12}{14}- LastDate: {13}{14}{16}", 
				this.RsrchStudRegisterDtlId,
				this.RsrchStudRegisterId,
				this.TitleAr,
				(this.RsrchTypeFlg == null) ? string.Empty : this.RsrchTypeFlg.ToString(),
				this.RsrchCdeStatusId,
				(this.RsrchValue == null) ? string.Empty : this.RsrchValue.ToString(),
				(this.RsrchReason == null) ? string.Empty : this.RsrchReason.ToString(),
				(this.RsrchReference == null) ? string.Empty : this.RsrchReference.ToString(),
				(this.RsrchSummary == null) ? string.Empty : this.RsrchSummary.ToString(),
				(this.AuditStatusFlg == null) ? string.Empty : this.AuditStatusFlg.ToString(),
				(this.AuditNote == null) ? string.Empty : this.AuditNote.ToString(),
				(this.RsrchOrdr == null) ? string.Empty : this.RsrchOrdr.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'RSRCH_STUD_REGISTER_DTL' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class RsrchStudRegisterDtlEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// RSRCH_STUD_REGISTER_DTL_ID : عنواين البحث العلمى
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "RSRCH_STUD_REGISTER_DTL"</remarks>
		public System.Decimal RsrchStudRegisterDtlId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalRsrchStudRegisterDtlId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// RSRCH_STUD_REGISTER_ID : اختيار العنوان المقترح للبحث العلمى
		/// </summary>
		public System.Decimal		  RsrchStudRegisterId = 0.0m;
		
		/// <summary>
		/// TITLE_AR : عنوان البحث العلمى
		/// </summary>
		public System.String		  TitleAr = string.Empty;
		
		/// <summary>
		/// RSRCH_TYPE_FLG : نوع البحث:
		/// 		/// 1: بحث
		/// 		/// 2: تحقيق
		/// </summary>
		public System.Int16?		  RsrchTypeFlg = null;
		
		/// <summary>
		/// RSRCH_CDE_STATUS_ID : حالة عنوان البحث العلمى
		/// </summary>
		public System.Int32		  RsrchCdeStatusId = (int)0;
		
		/// <summary>
		/// RSRCH_VALUE : أهمية الموضوع
		/// </summary>
		public System.String		  RsrchValue = null;
		
		/// <summary>
		/// RSRCH_REASON : سبب الاختيار
		/// </summary>
		public System.String		  RsrchReason = null;
		
		/// <summary>
		/// RSRCH_REFERENCE : اهم المصادر و المراجع
		/// </summary>
		public System.String		  RsrchReference = null;
		
		/// <summary>
		/// RSRCH_SUMMARY : اهم المباحث "ملخص البحث"
		/// </summary>
		public System.String		  RsrchSummary = null;
		
		/// <summary>
		/// AUDIT_STATUS_FLG : حالة التدقيق
		/// 		/// 1- غير مبحوث
		/// 		/// 2- مبحوث
		/// </summary>
		public System.Int16?		  AuditStatusFlg = null;
		
		/// <summary>
		/// AUDIT_NOTE : ملاحظات التدقيق
		/// </summary>
		public System.String		  AuditNote = null;
		
		/// <summary>
		/// RSRCH_ORDR : ترتيب الموضوع
		/// </summary>
		public System.Int32?		  RsrchOrdr = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private RsrchCdeStatus _rsrchCdeStatusIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="RsrchCdeStatus"/>.
		/// </summary>
		/// <value>The source RsrchCdeStatus for RsrchCdeStatusId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual RsrchCdeStatus RsrchCdeStatusIdSource
      	{
            get { return this._rsrchCdeStatusIdSource; }
            set { this._rsrchCdeStatusIdSource = value; }
      	}
		private RsrchStudRegister _rsrchStudRegisterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="RsrchStudRegister"/>.
		/// </summary>
		/// <value>The source RsrchStudRegister for RsrchStudRegisterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual RsrchStudRegister RsrchStudRegisterIdSource
      	{
            get { return this._rsrchStudRegisterIdSource; }
            set { this._rsrchStudRegisterIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region RsrchCommStaffRecomCollection
		
		private TList<RsrchCommStaffRecom> _rsrchCommStaffRecomRsrchStudRegisterDtlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _rsrchCommStaffRecomRsrchStudRegisterDtlId
		/// </summary>
		
		public TList<RsrchCommStaffRecom> RsrchCommStaffRecomCollection
		{
			get
			{
				if (_rsrchCommStaffRecomRsrchStudRegisterDtlId == null)
				{
				_rsrchCommStaffRecomRsrchStudRegisterDtlId = new TList<RsrchCommStaffRecom>();
				}
	
				return _rsrchCommStaffRecomRsrchStudRegisterDtlId;
			}
			set { _rsrchCommStaffRecomRsrchStudRegisterDtlId = value; }
		}
		
		#endregion

		#region PgThesisStudCollection
		
		private TList<PgThesisStud> _pgThesisStudRsrchStudRegisterDtlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgThesisStudRsrchStudRegisterDtlId
		/// </summary>
		
		public TList<PgThesisStud> PgThesisStudCollection
		{
			get
			{
				if (_pgThesisStudRsrchStudRegisterDtlId == null)
				{
				_pgThesisStudRsrchStudRegisterDtlId = new TList<PgThesisStud>();
				}
	
				return _pgThesisStudRsrchStudRegisterDtlId;
			}
			set { _pgThesisStudRsrchStudRegisterDtlId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			RsrchStudRegisterDtlEntityData _tmp = new RsrchStudRegisterDtlEntityData();
						
			_tmp.RsrchStudRegisterDtlId = this.RsrchStudRegisterDtlId;
			_tmp.OriginalRsrchStudRegisterDtlId = this.OriginalRsrchStudRegisterDtlId;
			
			_tmp.RsrchStudRegisterId = this.RsrchStudRegisterId;
			_tmp.TitleAr = this.TitleAr;
			_tmp.RsrchTypeFlg = this.RsrchTypeFlg;
			_tmp.RsrchCdeStatusId = this.RsrchCdeStatusId;
			_tmp.RsrchValue = this.RsrchValue;
			_tmp.RsrchReason = this.RsrchReason;
			_tmp.RsrchReference = this.RsrchReference;
			_tmp.RsrchSummary = this.RsrchSummary;
			_tmp.AuditStatusFlg = this.AuditStatusFlg;
			_tmp.AuditNote = this.AuditNote;
			_tmp.RsrchOrdr = this.RsrchOrdr;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.RsrchCdeStatusIdSource != null)
				_tmp.RsrchCdeStatusIdSource = MakeCopyOf(this.RsrchCdeStatusIdSource) as RsrchCdeStatus;
			if (this.RsrchStudRegisterIdSource != null)
				_tmp.RsrchStudRegisterIdSource = MakeCopyOf(this.RsrchStudRegisterIdSource) as RsrchStudRegister;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._rsrchCommStaffRecomRsrchStudRegisterDtlId != null)
				_tmp.RsrchCommStaffRecomCollection = (TList<RsrchCommStaffRecom>) MakeCopyOf(this.RsrchCommStaffRecomCollection); 
			if (this._pgThesisStudRsrchStudRegisterDtlId != null)
				_tmp.PgThesisStudCollection = (TList<PgThesisStud>) MakeCopyOf(this.PgThesisStudCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			RsrchStudRegisterDtlEntityData _tmp = new RsrchStudRegisterDtlEntityData();
						
			_tmp.RsrchStudRegisterDtlId = this.RsrchStudRegisterDtlId;
			_tmp.OriginalRsrchStudRegisterDtlId = this.OriginalRsrchStudRegisterDtlId;
			
			_tmp.RsrchStudRegisterId = this.RsrchStudRegisterId;
			_tmp.TitleAr = this.TitleAr;
			_tmp.RsrchTypeFlg = this.RsrchTypeFlg;
			_tmp.RsrchCdeStatusId = this.RsrchCdeStatusId;
			_tmp.RsrchValue = this.RsrchValue;
			_tmp.RsrchReason = this.RsrchReason;
			_tmp.RsrchReference = this.RsrchReference;
			_tmp.RsrchSummary = this.RsrchSummary;
			_tmp.AuditStatusFlg = this.AuditStatusFlg;
			_tmp.AuditNote = this.AuditNote;
			_tmp.RsrchOrdr = this.RsrchOrdr;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.RsrchCdeStatusIdSource != null && existingCopies.Contains(this.RsrchCdeStatusIdSource))
				_tmp.RsrchCdeStatusIdSource = existingCopies[this.RsrchCdeStatusIdSource] as RsrchCdeStatus;
			else
				_tmp.RsrchCdeStatusIdSource = MakeCopyOf(this.RsrchCdeStatusIdSource, existingCopies) as RsrchCdeStatus;
			if (this.RsrchStudRegisterIdSource != null && existingCopies.Contains(this.RsrchStudRegisterIdSource))
				_tmp.RsrchStudRegisterIdSource = existingCopies[this.RsrchStudRegisterIdSource] as RsrchStudRegister;
			else
				_tmp.RsrchStudRegisterIdSource = MakeCopyOf(this.RsrchStudRegisterIdSource, existingCopies) as RsrchStudRegister;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.RsrchCommStaffRecomCollection = (TList<RsrchCommStaffRecom>) MakeCopyOf(this.RsrchCommStaffRecomCollection, existingCopies); 
			_tmp.PgThesisStudCollection = (TList<PgThesisStud>) MakeCopyOf(this.PgThesisStudCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="RsrchStudRegisterDtlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(RsrchStudRegisterDtlColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="RsrchStudRegisterDtlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(RsrchStudRegisterDtlColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="RsrchStudRegisterDtlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(RsrchStudRegisterDtlColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				RsrchStudRegisterDtlEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new RsrchStudRegisterDtlEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="RsrchStudRegisterDtlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(RsrchStudRegisterDtlColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				RsrchStudRegisterDtlEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new RsrchStudRegisterDtlEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region RsrchStudRegisterDtlEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="RsrchStudRegisterDtl"/> object.
	/// </remarks>
	public class RsrchStudRegisterDtlEventArgs : System.EventArgs
	{
		private RsrchStudRegisterDtlColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the RsrchStudRegisterDtlEventArgs class.
		///</summary>
		public RsrchStudRegisterDtlEventArgs(RsrchStudRegisterDtlColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the RsrchStudRegisterDtlEventArgs class.
		///</summary>
		public RsrchStudRegisterDtlEventArgs(RsrchStudRegisterDtlColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The RsrchStudRegisterDtlColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="RsrchStudRegisterDtlColumn" />
		public RsrchStudRegisterDtlColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all RsrchStudRegisterDtl related events.
	///</summary>
	public delegate void RsrchStudRegisterDtlEventHandler(object sender, RsrchStudRegisterDtlEventArgs e);
	
	#region RsrchStudRegisterDtlComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class RsrchStudRegisterDtlComparer : System.Collections.Generic.IComparer<RsrchStudRegisterDtl>
	{
		RsrchStudRegisterDtlColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:RsrchStudRegisterDtlComparer"/> class.
        /// </summary>
		public RsrchStudRegisterDtlComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:RsrchStudRegisterDtlComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public RsrchStudRegisterDtlComparer(RsrchStudRegisterDtlColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="RsrchStudRegisterDtl"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="RsrchStudRegisterDtl"/> to compare.</param>
        /// <param name="b">The second <c>RsrchStudRegisterDtl</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(RsrchStudRegisterDtl a, RsrchStudRegisterDtl b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(RsrchStudRegisterDtl entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(RsrchStudRegisterDtl a, RsrchStudRegisterDtl b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public RsrchStudRegisterDtlColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region RsrchStudRegisterDtlKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="RsrchStudRegisterDtl"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class RsrchStudRegisterDtlKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the RsrchStudRegisterDtlKey class.
		/// </summary>
		public RsrchStudRegisterDtlKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the RsrchStudRegisterDtlKey class.
		/// </summary>
		public RsrchStudRegisterDtlKey(RsrchStudRegisterDtlBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.RsrchStudRegisterDtlId = entity.RsrchStudRegisterDtlId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the RsrchStudRegisterDtlKey class.
		/// </summary>
		public RsrchStudRegisterDtlKey(System.Decimal _rsrchStudRegisterDtlId)
		{
			#region Init Properties

			this.RsrchStudRegisterDtlId = _rsrchStudRegisterDtlId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private RsrchStudRegisterDtlBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public RsrchStudRegisterDtlBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the RsrchStudRegisterDtlId property
		private System.Decimal _rsrchStudRegisterDtlId;
		
		/// <summary>
		/// Gets or sets the RsrchStudRegisterDtlId property.
		/// </summary>
		public System.Decimal RsrchStudRegisterDtlId
		{
			get { return _rsrchStudRegisterDtlId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.RsrchStudRegisterDtlId = value;
				
				_rsrchStudRegisterDtlId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				RsrchStudRegisterDtlId = ( values["RsrchStudRegisterDtlId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["RsrchStudRegisterDtlId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("RsrchStudRegisterDtlId", RsrchStudRegisterDtlId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("RsrchStudRegisterDtlId: {0}{1}",
								RsrchStudRegisterDtlId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region RsrchStudRegisterDtlColumn Enum
	
	/// <summary>
	/// Enumerate the RsrchStudRegisterDtl columns.
	/// </summary>
	[Serializable]
	public enum RsrchStudRegisterDtlColumn : int
	{
		/// <summary>
		/// RsrchStudRegisterDtlId : عنواين البحث العلمى
		/// </summary>
		[EnumTextValue("RSRCH_STUD_REGISTER_DTL_ID")]
		[ColumnEnum("RSRCH_STUD_REGISTER_DTL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		RsrchStudRegisterDtlId = 1,
		/// <summary>
		/// RsrchStudRegisterId : اختيار العنوان المقترح للبحث العلمى
		/// </summary>
		[EnumTextValue("RSRCH_STUD_REGISTER_ID")]
		[ColumnEnum("RSRCH_STUD_REGISTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		RsrchStudRegisterId = 2,
		/// <summary>
		/// TitleAr : عنوان البحث العلمى
		/// </summary>
		[EnumTextValue("TITLE_AR")]
		[ColumnEnum("TITLE_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 250)]
		TitleAr = 3,
		/// <summary>
		/// RsrchTypeFlg : نوع البحث:
		/// 		/// 1: بحث
		/// 		/// 2: تحقيق
		/// </summary>
		[EnumTextValue("RSRCH_TYPE_FLG")]
		[ColumnEnum("RSRCH_TYPE_FLG", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		RsrchTypeFlg = 4,
		/// <summary>
		/// RsrchCdeStatusId : حالة عنوان البحث العلمى
		/// </summary>
		[EnumTextValue("RSRCH_CDE_STATUS_ID")]
		[ColumnEnum("RSRCH_CDE_STATUS_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		RsrchCdeStatusId = 5,
		/// <summary>
		/// RsrchValue : أهمية الموضوع
		/// </summary>
		[EnumTextValue("RSRCH_VALUE")]
		[ColumnEnum("RSRCH_VALUE", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		RsrchValue = 6,
		/// <summary>
		/// RsrchReason : سبب الاختيار
		/// </summary>
		[EnumTextValue("RSRCH_REASON")]
		[ColumnEnum("RSRCH_REASON", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		RsrchReason = 7,
		/// <summary>
		/// RsrchReference : اهم المصادر و المراجع
		/// </summary>
		[EnumTextValue("RSRCH_REFERENCE")]
		[ColumnEnum("RSRCH_REFERENCE", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		RsrchReference = 8,
		/// <summary>
		/// RsrchSummary : اهم المباحث "ملخص البحث"
		/// </summary>
		[EnumTextValue("RSRCH_SUMMARY")]
		[ColumnEnum("RSRCH_SUMMARY", typeof(System.String), System.Data.DbType.String, false, false, true)]
		RsrchSummary = 9,
		/// <summary>
		/// AuditStatusFlg : حالة التدقيق
		/// 		/// 1- غير مبحوث
		/// 		/// 2- مبحوث
		/// </summary>
		[EnumTextValue("AUDIT_STATUS_FLG")]
		[ColumnEnum("AUDIT_STATUS_FLG", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		AuditStatusFlg = 10,
		/// <summary>
		/// AuditNote : ملاحظات التدقيق
		/// </summary>
		[EnumTextValue("AUDIT_NOTE")]
		[ColumnEnum("AUDIT_NOTE", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		AuditNote = 11,
		/// <summary>
		/// RsrchOrdr : ترتيب الموضوع
		/// </summary>
		[EnumTextValue("RSRCH_ORDR")]
		[ColumnEnum("RSRCH_ORDR", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		RsrchOrdr = 12,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 13,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 14
	}//End enum

	#endregion RsrchStudRegisterDtlColumn Enum

} // end namespace
