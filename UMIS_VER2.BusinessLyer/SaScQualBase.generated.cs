
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SaScQual.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SA_SC_QUAL' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SaScQualBase : EntityBase, ISaScQual, IEntityId<SaScQualKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SaScQualEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SaScQualEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SaScQualEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SaScQual> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaScQualEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaScQualEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SaScQualBase"/> instance.
		///</summary>
		public SaScQualBase()
		{
			this.entityData = new SaScQualEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SaScQualBase"/> instance.
		///</summary>
		///<param name="_saScQualId"></param>
		///<param name="_scDegDate"></param>
		///<param name="_scDegValidTil"></param>
		///<param name="_round"></param>
		///<param name="_thesisTitleAr"></param>
		///<param name="_thesisTitleEn"></param>
		///<param name="_thesisTopicAr"></param>
		///<param name="_thesisTopicEn"></param>
		///<param name="_specSub"></param>
		///<param name="_isComplementry"></param>
		///<param name="_comments"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_saCodeRatingId"></param>
		///<param name="_saCodeRatingId2"></param>
		///<param name="_gsCountryNodeId"></param>
		///<param name="_asCodeDegreeId"></param>
		///<param name="_asNodeId"></param>
		///<param name="_pgThesisDetailedSpecId"></param>
		///<param name="_pgThesisGeneralSpecId"></param>
		///<param name="_asFacultyInfoId"></param>
		public SaScQualBase(System.Decimal _saScQualId, System.DateTime _scDegDate, System.DateTime? _scDegValidTil, 
			System.String _round, System.String _thesisTitleAr, System.String _thesisTitleEn, System.String _thesisTopicAr, 
			System.String _thesisTopicEn, System.String _specSub, System.Decimal? _isComplementry, System.String _comments, 
			System.Decimal _saStfMemberId, System.Decimal? _saCodeRatingId, System.Decimal? _saCodeRatingId2, 
			System.Decimal? _gsCountryNodeId, System.Decimal _asCodeDegreeId, System.Decimal _asNodeId, 
			System.Decimal? _pgThesisDetailedSpecId, System.Decimal? _pgThesisGeneralSpecId, System.Decimal _asFacultyInfoId)
		{
			this.entityData = new SaScQualEntityData();
			this.backupData = null;

			this.SaScQualId = _saScQualId;
			this.ScDegDate = _scDegDate;
			this.ScDegValidTil = _scDegValidTil;
			this.Round = _round;
			this.ThesisTitleAr = _thesisTitleAr;
			this.ThesisTitleEn = _thesisTitleEn;
			this.ThesisTopicAr = _thesisTopicAr;
			this.ThesisTopicEn = _thesisTopicEn;
			this.SpecSub = _specSub;
			this.IsComplementry = _isComplementry;
			this.Comments = _comments;
			this.SaStfMemberId = _saStfMemberId;
			this.SaCodeRatingId = _saCodeRatingId;
			this.SaCodeRatingId2 = _saCodeRatingId2;
			this.GsCountryNodeId = _gsCountryNodeId;
			this.AsCodeDegreeId = _asCodeDegreeId;
			this.AsNodeId = _asNodeId;
			this.PgThesisDetailedSpecId = _pgThesisDetailedSpecId;
			this.PgThesisGeneralSpecId = _pgThesisGeneralSpecId;
			this.AsFacultyInfoId = _asFacultyInfoId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SaScQual"/> instance.
		///</summary>
		///<param name="_saScQualId"></param>
		///<param name="_scDegDate"></param>
		///<param name="_scDegValidTil"></param>
		///<param name="_round"></param>
		///<param name="_thesisTitleAr"></param>
		///<param name="_thesisTitleEn"></param>
		///<param name="_thesisTopicAr"></param>
		///<param name="_thesisTopicEn"></param>
		///<param name="_specSub"></param>
		///<param name="_isComplementry"></param>
		///<param name="_comments"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_saCodeRatingId"></param>
		///<param name="_saCodeRatingId2"></param>
		///<param name="_gsCountryNodeId"></param>
		///<param name="_asCodeDegreeId"></param>
		///<param name="_asNodeId"></param>
		///<param name="_pgThesisDetailedSpecId"></param>
		///<param name="_pgThesisGeneralSpecId"></param>
		///<param name="_asFacultyInfoId"></param>
		public static SaScQual CreateSaScQual(System.Decimal _saScQualId, System.DateTime _scDegDate, System.DateTime? _scDegValidTil, 
			System.String _round, System.String _thesisTitleAr, System.String _thesisTitleEn, System.String _thesisTopicAr, 
			System.String _thesisTopicEn, System.String _specSub, System.Decimal? _isComplementry, System.String _comments, 
			System.Decimal _saStfMemberId, System.Decimal? _saCodeRatingId, System.Decimal? _saCodeRatingId2, 
			System.Decimal? _gsCountryNodeId, System.Decimal _asCodeDegreeId, System.Decimal _asNodeId, 
			System.Decimal? _pgThesisDetailedSpecId, System.Decimal? _pgThesisGeneralSpecId, System.Decimal _asFacultyInfoId)
		{
			SaScQual newSaScQual = new SaScQual();
			newSaScQual.SaScQualId = _saScQualId;
			newSaScQual.ScDegDate = _scDegDate;
			newSaScQual.ScDegValidTil = _scDegValidTil;
			newSaScQual.Round = _round;
			newSaScQual.ThesisTitleAr = _thesisTitleAr;
			newSaScQual.ThesisTitleEn = _thesisTitleEn;
			newSaScQual.ThesisTopicAr = _thesisTopicAr;
			newSaScQual.ThesisTopicEn = _thesisTopicEn;
			newSaScQual.SpecSub = _specSub;
			newSaScQual.IsComplementry = _isComplementry;
			newSaScQual.Comments = _comments;
			newSaScQual.SaStfMemberId = _saStfMemberId;
			newSaScQual.SaCodeRatingId = _saCodeRatingId;
			newSaScQual.SaCodeRatingId2 = _saCodeRatingId2;
			newSaScQual.GsCountryNodeId = _gsCountryNodeId;
			newSaScQual.AsCodeDegreeId = _asCodeDegreeId;
			newSaScQual.AsNodeId = _asNodeId;
			newSaScQual.PgThesisDetailedSpecId = _pgThesisDetailedSpecId;
			newSaScQual.PgThesisGeneralSpecId = _pgThesisGeneralSpecId;
			newSaScQual.AsFacultyInfoId = _asFacultyInfoId;
			return newSaScQual;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SaScQualId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SaScQualId
		{
			get
			{
				return this.entityData.SaScQualId; 
			}
			
			set
			{
				if (this.entityData.SaScQualId == value)
					return;
					
				OnColumnChanging(SaScQualColumn.SaScQualId, this.entityData.SaScQualId);
				this.entityData.SaScQualId = value;
				this.EntityId.SaScQualId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaScQualColumn.SaScQualId, this.entityData.SaScQualId);
				OnPropertyChanged("SaScQualId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SA_SC_QUAL_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SA_SC_QUAL_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSaScQualId
		{
			get { return this.entityData.OriginalSaScQualId; }
			set { this.entityData.OriginalSaScQualId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the ScDegDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ScDegDate
		{
			get
			{
				return this.entityData.ScDegDate; 
			}
			
			set
			{
				if (this.entityData.ScDegDate == value)
					return;
					
				OnColumnChanging(SaScQualColumn.ScDegDate, this.entityData.ScDegDate);
				this.entityData.ScDegDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaScQualColumn.ScDegDate, this.entityData.ScDegDate);
				OnPropertyChanged("ScDegDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScDegValidTil property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsScDegValidTilNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ScDegValidTil
		{
			get
			{
				return this.entityData.ScDegValidTil; 
			}
			
			set
			{
				if (this.entityData.ScDegValidTil == value)
					return;
					
				OnColumnChanging(SaScQualColumn.ScDegValidTil, this.entityData.ScDegValidTil);
				this.entityData.ScDegValidTil = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaScQualColumn.ScDegValidTil, this.entityData.ScDegValidTil);
				OnPropertyChanged("ScDegValidTil");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Round property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String Round
		{
			get
			{
				return this.entityData.Round; 
			}
			
			set
			{
				if (this.entityData.Round == value)
					return;
					
				OnColumnChanging(SaScQualColumn.Round, this.entityData.Round);
				this.entityData.Round = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaScQualColumn.Round, this.entityData.Round);
				OnPropertyChanged("Round");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThesisTitleAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 400)]
		public virtual System.String ThesisTitleAr
		{
			get
			{
				return this.entityData.ThesisTitleAr; 
			}
			
			set
			{
				if (this.entityData.ThesisTitleAr == value)
					return;
					
				OnColumnChanging(SaScQualColumn.ThesisTitleAr, this.entityData.ThesisTitleAr);
				this.entityData.ThesisTitleAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaScQualColumn.ThesisTitleAr, this.entityData.ThesisTitleAr);
				OnPropertyChanged("ThesisTitleAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThesisTitleEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 400)]
		public virtual System.String ThesisTitleEn
		{
			get
			{
				return this.entityData.ThesisTitleEn; 
			}
			
			set
			{
				if (this.entityData.ThesisTitleEn == value)
					return;
					
				OnColumnChanging(SaScQualColumn.ThesisTitleEn, this.entityData.ThesisTitleEn);
				this.entityData.ThesisTitleEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaScQualColumn.ThesisTitleEn, this.entityData.ThesisTitleEn);
				OnPropertyChanged("ThesisTitleEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThesisTopicAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 400)]
		public virtual System.String ThesisTopicAr
		{
			get
			{
				return this.entityData.ThesisTopicAr; 
			}
			
			set
			{
				if (this.entityData.ThesisTopicAr == value)
					return;
					
				OnColumnChanging(SaScQualColumn.ThesisTopicAr, this.entityData.ThesisTopicAr);
				this.entityData.ThesisTopicAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaScQualColumn.ThesisTopicAr, this.entityData.ThesisTopicAr);
				OnPropertyChanged("ThesisTopicAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThesisTopicEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 400)]
		public virtual System.String ThesisTopicEn
		{
			get
			{
				return this.entityData.ThesisTopicEn; 
			}
			
			set
			{
				if (this.entityData.ThesisTopicEn == value)
					return;
					
				OnColumnChanging(SaScQualColumn.ThesisTopicEn, this.entityData.ThesisTopicEn);
				this.entityData.ThesisTopicEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaScQualColumn.ThesisTopicEn, this.entityData.ThesisTopicEn);
				OnPropertyChanged("ThesisTopicEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SpecSub property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String SpecSub
		{
			get
			{
				return this.entityData.SpecSub; 
			}
			
			set
			{
				if (this.entityData.SpecSub == value)
					return;
					
				OnColumnChanging(SaScQualColumn.SpecSub, this.entityData.SpecSub);
				this.entityData.SpecSub = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaScQualColumn.SpecSub, this.entityData.SpecSub);
				OnPropertyChanged("SpecSub");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsComplementry property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsIsComplementryNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? IsComplementry
		{
			get
			{
				return this.entityData.IsComplementry; 
			}
			
			set
			{
				if (this.entityData.IsComplementry == value)
					return;
					
				OnColumnChanging(SaScQualColumn.IsComplementry, this.entityData.IsComplementry);
				this.entityData.IsComplementry = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaScQualColumn.IsComplementry, this.entityData.IsComplementry);
				OnPropertyChanged("IsComplementry");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Comments property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Comments
		{
			get
			{
				return this.entityData.Comments; 
			}
			
			set
			{
				if (this.entityData.Comments == value)
					return;
					
				OnColumnChanging(SaScQualColumn.Comments, this.entityData.Comments);
				this.entityData.Comments = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaScQualColumn.Comments, this.entityData.Comments);
				OnPropertyChanged("Comments");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaStfMemberId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaStfMemberId
		{
			get
			{
				return this.entityData.SaStfMemberId; 
			}
			
			set
			{
				if (this.entityData.SaStfMemberId == value)
					return;
					
				OnColumnChanging(SaScQualColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				this.entityData.SaStfMemberId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaScQualColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				OnPropertyChanged("SaStfMemberId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaCodeRatingId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSaCodeRatingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SaCodeRatingId
		{
			get
			{
				return this.entityData.SaCodeRatingId; 
			}
			
			set
			{
				if (this.entityData.SaCodeRatingId == value)
					return;
					
				OnColumnChanging(SaScQualColumn.SaCodeRatingId, this.entityData.SaCodeRatingId);
				this.entityData.SaCodeRatingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaScQualColumn.SaCodeRatingId, this.entityData.SaCodeRatingId);
				OnPropertyChanged("SaCodeRatingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaCodeRatingId2 property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSaCodeRatingId2Null() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SaCodeRatingId2
		{
			get
			{
				return this.entityData.SaCodeRatingId2; 
			}
			
			set
			{
				if (this.entityData.SaCodeRatingId2 == value)
					return;
					
				OnColumnChanging(SaScQualColumn.SaCodeRatingId2, this.entityData.SaCodeRatingId2);
				this.entityData.SaCodeRatingId2 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaScQualColumn.SaCodeRatingId2, this.entityData.SaCodeRatingId2);
				OnPropertyChanged("SaCodeRatingId2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCountryNodeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCountryNodeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCountryNodeId
		{
			get
			{
				return this.entityData.GsCountryNodeId; 
			}
			
			set
			{
				if (this.entityData.GsCountryNodeId == value)
					return;
					
				OnColumnChanging(SaScQualColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				this.entityData.GsCountryNodeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaScQualColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				OnPropertyChanged("GsCountryNodeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsCodeDegreeId
		{
			get
			{
				return this.entityData.AsCodeDegreeId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeId == value)
					return;
					
				OnColumnChanging(SaScQualColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				this.entityData.AsCodeDegreeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaScQualColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				OnPropertyChanged("AsCodeDegreeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsNodeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsNodeId
		{
			get
			{
				return this.entityData.AsNodeId; 
			}
			
			set
			{
				if (this.entityData.AsNodeId == value)
					return;
					
				OnColumnChanging(SaScQualColumn.AsNodeId, this.entityData.AsNodeId);
				this.entityData.AsNodeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaScQualColumn.AsNodeId, this.entityData.AsNodeId);
				OnPropertyChanged("AsNodeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PgThesisDetailedSpecId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPgThesisDetailedSpecIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PgThesisDetailedSpecId
		{
			get
			{
				return this.entityData.PgThesisDetailedSpecId; 
			}
			
			set
			{
				if (this.entityData.PgThesisDetailedSpecId == value)
					return;
					
				OnColumnChanging(SaScQualColumn.PgThesisDetailedSpecId, this.entityData.PgThesisDetailedSpecId);
				this.entityData.PgThesisDetailedSpecId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaScQualColumn.PgThesisDetailedSpecId, this.entityData.PgThesisDetailedSpecId);
				OnPropertyChanged("PgThesisDetailedSpecId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PgThesisGeneralSpecId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPgThesisGeneralSpecIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PgThesisGeneralSpecId
		{
			get
			{
				return this.entityData.PgThesisGeneralSpecId; 
			}
			
			set
			{
				if (this.entityData.PgThesisGeneralSpecId == value)
					return;
					
				OnColumnChanging(SaScQualColumn.PgThesisGeneralSpecId, this.entityData.PgThesisGeneralSpecId);
				this.entityData.PgThesisGeneralSpecId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaScQualColumn.PgThesisGeneralSpecId, this.entityData.PgThesisGeneralSpecId);
				OnPropertyChanged("PgThesisGeneralSpecId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(SaScQualColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaScQualColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeRating"/>.
		/// </summary>
		/// <value>The source SaCodeRating for SaCodeRatingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaCodeRating SaCodeRatingIdSource
      	{
            get { return entityData.SaCodeRatingIdSource; }
            set { entityData.SaCodeRatingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeRating"/>.
		/// </summary>
		/// <value>The source SaCodeRating for SaCodeRatingId2.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaCodeRating SaCodeRatingId2Source
      	{
            get { return entityData.SaCodeRatingId2Source; }
            set { entityData.SaCodeRatingId2Source = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return entityData.AsCodeDegreeIdSource; }
            set { entityData.AsCodeDegreeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for AsNodeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain AsNodeIdSource
      	{
            get { return entityData.AsNodeIdSource; }
            set { entityData.AsNodeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="PgThesisDetailedSpec"/>.
		/// </summary>
		/// <value>The source PgThesisDetailedSpec for PgThesisDetailedSpecId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual PgThesisDetailedSpec PgThesisDetailedSpecIdSource
      	{
            get { return entityData.PgThesisDetailedSpecIdSource; }
            set { entityData.PgThesisDetailedSpecIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="PgThesisGeneralSpec"/>.
		/// </summary>
		/// <value>The source PgThesisGeneralSpec for PgThesisGeneralSpecId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual PgThesisGeneralSpec PgThesisGeneralSpecIdSource
      	{
            get { return entityData.PgThesisGeneralSpecIdSource; }
            set { entityData.PgThesisGeneralSpecIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return entityData.SaStfMemberIdSource; }
            set { entityData.SaStfMemberIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of SaEmployment objects
		///	which are related to this object through the relation FK_AUTO_0017
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SaEmployment> SaEmploymentCollection
		{
			get { return entityData.SaEmploymentCollection; }
			set { entityData.SaEmploymentCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Round", "Round", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ThesisTitleAr", "Thesis Title Ar", 400));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ThesisTitleEn", "Thesis Title En", 400));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ThesisTopicAr", "Thesis Topic Ar", 400));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ThesisTopicEn", "Thesis Topic En", 400));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SpecSub", "Spec Sub", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Comments", "Comments", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SA_SC_QUAL"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SA_SC_QUAL_ID", "SC_DEG_DATE", "SC_DEG_VALID_TIL", "ROUND", "THESIS_TITLE_AR", "THESIS_TITLE_EN", "THESIS_TOPIC_AR", "THESIS_TOPIC_EN", "SPEC_SUB", "IS_COMPLEMENTRY", "COMMENTS", "SA_STF_MEMBER_ID", "SA_CODE_RATING_ID", "SA_CODE_RATING_ID2", "GS_COUNTRY_NODE_ID", "AS_CODE_DEGREE_ID", "AS_NODE_ID", "PG_THESIS_DETAILED_SPEC_ID", "PG_THESIS_GENERAL_SPEC_ID", "AS_FACULTY_INFO_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SaScQualEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SaScQual) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SaScQual>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SaScQual);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SaScQual Entity 
		///</summary>
		protected virtual SaScQual Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SaScQual copy = new SaScQual();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SaScQualId = this.SaScQualId;
					copy.OriginalSaScQualId = this.OriginalSaScQualId;
				copy.ScDegDate = this.ScDegDate;
				copy.ScDegValidTil = this.ScDegValidTil;
				copy.Round = this.Round;
				copy.ThesisTitleAr = this.ThesisTitleAr;
				copy.ThesisTitleEn = this.ThesisTitleEn;
				copy.ThesisTopicAr = this.ThesisTopicAr;
				copy.ThesisTopicEn = this.ThesisTopicEn;
				copy.SpecSub = this.SpecSub;
				copy.IsComplementry = this.IsComplementry;
				copy.Comments = this.Comments;
				copy.SaStfMemberId = this.SaStfMemberId;
				copy.SaCodeRatingId = this.SaCodeRatingId;
				copy.SaCodeRatingId2 = this.SaCodeRatingId2;
				copy.GsCountryNodeId = this.GsCountryNodeId;
				copy.AsCodeDegreeId = this.AsCodeDegreeId;
				copy.AsNodeId = this.AsNodeId;
				copy.PgThesisDetailedSpecId = this.PgThesisDetailedSpecId;
				copy.PgThesisGeneralSpecId = this.PgThesisGeneralSpecId;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
			
			if (this.SaCodeRatingIdSource != null && existingCopies.Contains(this.SaCodeRatingIdSource))
				copy.SaCodeRatingIdSource = existingCopies[this.SaCodeRatingIdSource] as SaCodeRating;
			else
				copy.SaCodeRatingIdSource = MakeCopyOf(this.SaCodeRatingIdSource, existingCopies) as SaCodeRating;
			if (this.SaCodeRatingId2Source != null && existingCopies.Contains(this.SaCodeRatingId2Source))
				copy.SaCodeRatingId2Source = existingCopies[this.SaCodeRatingId2Source] as SaCodeRating;
			else
				copy.SaCodeRatingId2Source = MakeCopyOf(this.SaCodeRatingId2Source, existingCopies) as SaCodeRating;
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				copy.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				copy.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.AsNodeIdSource != null && existingCopies.Contains(this.AsNodeIdSource))
				copy.AsNodeIdSource = existingCopies[this.AsNodeIdSource] as EntityMain;
			else
				copy.AsNodeIdSource = MakeCopyOf(this.AsNodeIdSource, existingCopies) as EntityMain;
			if (this.PgThesisDetailedSpecIdSource != null && existingCopies.Contains(this.PgThesisDetailedSpecIdSource))
				copy.PgThesisDetailedSpecIdSource = existingCopies[this.PgThesisDetailedSpecIdSource] as PgThesisDetailedSpec;
			else
				copy.PgThesisDetailedSpecIdSource = MakeCopyOf(this.PgThesisDetailedSpecIdSource, existingCopies) as PgThesisDetailedSpec;
			if (this.PgThesisGeneralSpecIdSource != null && existingCopies.Contains(this.PgThesisGeneralSpecIdSource))
				copy.PgThesisGeneralSpecIdSource = existingCopies[this.PgThesisGeneralSpecIdSource] as PgThesisGeneralSpec;
			else
				copy.PgThesisGeneralSpecIdSource = MakeCopyOf(this.PgThesisGeneralSpecIdSource, existingCopies) as PgThesisGeneralSpec;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				copy.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				copy.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
		
			//deep copy nested objects
			copy.SaEmploymentCollection = (TList<SaEmployment>) MakeCopyOf(this.SaEmploymentCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SaScQual Entity 
		///</summary>
		public virtual SaScQual Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SaScQual Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SaScQual DeepCopy()
		{
			return EntityHelper.Clone<SaScQual>(this as SaScQual);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SaScQualEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SaScQualEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SaScQualEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SaScQualColumn column)
		{
			switch(column)
			{
					case SaScQualColumn.SaScQualId:
					return entityData.SaScQualId != _originalData.SaScQualId;
					case SaScQualColumn.ScDegDate:
					return entityData.ScDegDate != _originalData.ScDegDate;
					case SaScQualColumn.ScDegValidTil:
					return entityData.ScDegValidTil != _originalData.ScDegValidTil;
					case SaScQualColumn.Round:
					return entityData.Round != _originalData.Round;
					case SaScQualColumn.ThesisTitleAr:
					return entityData.ThesisTitleAr != _originalData.ThesisTitleAr;
					case SaScQualColumn.ThesisTitleEn:
					return entityData.ThesisTitleEn != _originalData.ThesisTitleEn;
					case SaScQualColumn.ThesisTopicAr:
					return entityData.ThesisTopicAr != _originalData.ThesisTopicAr;
					case SaScQualColumn.ThesisTopicEn:
					return entityData.ThesisTopicEn != _originalData.ThesisTopicEn;
					case SaScQualColumn.SpecSub:
					return entityData.SpecSub != _originalData.SpecSub;
					case SaScQualColumn.IsComplementry:
					return entityData.IsComplementry != _originalData.IsComplementry;
					case SaScQualColumn.Comments:
					return entityData.Comments != _originalData.Comments;
					case SaScQualColumn.SaStfMemberId:
					return entityData.SaStfMemberId != _originalData.SaStfMemberId;
					case SaScQualColumn.SaCodeRatingId:
					return entityData.SaCodeRatingId != _originalData.SaCodeRatingId;
					case SaScQualColumn.SaCodeRatingId2:
					return entityData.SaCodeRatingId2 != _originalData.SaCodeRatingId2;
					case SaScQualColumn.GsCountryNodeId:
					return entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
					case SaScQualColumn.AsCodeDegreeId:
					return entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
					case SaScQualColumn.AsNodeId:
					return entityData.AsNodeId != _originalData.AsNodeId;
					case SaScQualColumn.PgThesisDetailedSpecId:
					return entityData.PgThesisDetailedSpecId != _originalData.PgThesisDetailedSpecId;
					case SaScQualColumn.PgThesisGeneralSpecId:
					return entityData.PgThesisGeneralSpecId != _originalData.PgThesisGeneralSpecId;
					case SaScQualColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SaScQualColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SaScQualId != _originalData.SaScQualId;
			result = result || entityData.ScDegDate != _originalData.ScDegDate;
			result = result || entityData.ScDegValidTil != _originalData.ScDegValidTil;
			result = result || entityData.Round != _originalData.Round;
			result = result || entityData.ThesisTitleAr != _originalData.ThesisTitleAr;
			result = result || entityData.ThesisTitleEn != _originalData.ThesisTitleEn;
			result = result || entityData.ThesisTopicAr != _originalData.ThesisTopicAr;
			result = result || entityData.ThesisTopicEn != _originalData.ThesisTopicEn;
			result = result || entityData.SpecSub != _originalData.SpecSub;
			result = result || entityData.IsComplementry != _originalData.IsComplementry;
			result = result || entityData.Comments != _originalData.Comments;
			result = result || entityData.SaStfMemberId != _originalData.SaStfMemberId;
			result = result || entityData.SaCodeRatingId != _originalData.SaCodeRatingId;
			result = result || entityData.SaCodeRatingId2 != _originalData.SaCodeRatingId2;
			result = result || entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
			result = result || entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
			result = result || entityData.AsNodeId != _originalData.AsNodeId;
			result = result || entityData.PgThesisDetailedSpecId != _originalData.PgThesisDetailedSpecId;
			result = result || entityData.PgThesisGeneralSpecId != _originalData.PgThesisGeneralSpecId;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			return result;
		}	
		
		///<summary>
		///  Returns a SaScQual Entity with the original data.
		///</summary>
		public SaScQual GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSaScQual(
				_originalData.SaScQualId,
				_originalData.ScDegDate,
				_originalData.ScDegValidTil,
				_originalData.Round,
				_originalData.ThesisTitleAr,
				_originalData.ThesisTitleEn,
				_originalData.ThesisTopicAr,
				_originalData.ThesisTopicEn,
				_originalData.SpecSub,
				_originalData.IsComplementry,
				_originalData.Comments,
				_originalData.SaStfMemberId,
				_originalData.SaCodeRatingId,
				_originalData.SaCodeRatingId2,
				_originalData.GsCountryNodeId,
				_originalData.AsCodeDegreeId,
				_originalData.AsNodeId,
				_originalData.PgThesisDetailedSpecId,
				_originalData.PgThesisGeneralSpecId,
				_originalData.AsFacultyInfoId
				);
				
			return (SaScQual)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SaScQualBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SaScQualBase)
				return ValueEquals(this, (SaScQualBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SaScQualBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SaScQualId.GetHashCode() ^ 
					this.ScDegDate.GetHashCode() ^ 
					((this.ScDegValidTil == null) ? string.Empty : this.ScDegValidTil.ToString()).GetHashCode() ^ 
					((this.Round == null) ? string.Empty : this.Round.ToString()).GetHashCode() ^ 
					((this.ThesisTitleAr == null) ? string.Empty : this.ThesisTitleAr.ToString()).GetHashCode() ^ 
					((this.ThesisTitleEn == null) ? string.Empty : this.ThesisTitleEn.ToString()).GetHashCode() ^ 
					((this.ThesisTopicAr == null) ? string.Empty : this.ThesisTopicAr.ToString()).GetHashCode() ^ 
					((this.ThesisTopicEn == null) ? string.Empty : this.ThesisTopicEn.ToString()).GetHashCode() ^ 
					((this.SpecSub == null) ? string.Empty : this.SpecSub.ToString()).GetHashCode() ^ 
					((this.IsComplementry == null) ? string.Empty : this.IsComplementry.ToString()).GetHashCode() ^ 
					((this.Comments == null) ? string.Empty : this.Comments.ToString()).GetHashCode() ^ 
					this.SaStfMemberId.GetHashCode() ^ 
					((this.SaCodeRatingId == null) ? string.Empty : this.SaCodeRatingId.ToString()).GetHashCode() ^ 
					((this.SaCodeRatingId2 == null) ? string.Empty : this.SaCodeRatingId2.ToString()).GetHashCode() ^ 
					((this.GsCountryNodeId == null) ? string.Empty : this.GsCountryNodeId.ToString()).GetHashCode() ^ 
					this.AsCodeDegreeId.GetHashCode() ^ 
					this.AsNodeId.GetHashCode() ^ 
					((this.PgThesisDetailedSpecId == null) ? string.Empty : this.PgThesisDetailedSpecId.ToString()).GetHashCode() ^ 
					((this.PgThesisGeneralSpecId == null) ? string.Empty : this.PgThesisGeneralSpecId.ToString()).GetHashCode() ^ 
					this.AsFacultyInfoId.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SaScQualBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SaScQualBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SaScQualBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SaScQualBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SaScQualBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SaScQualBase Object1, SaScQualBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SaScQualId != Object2.SaScQualId)
				equal = false;
			if (Object1.ScDegDate != Object2.ScDegDate)
				equal = false;
			if ( Object1.ScDegValidTil != null && Object2.ScDegValidTil != null )
			{
				if (Object1.ScDegValidTil != Object2.ScDegValidTil)
					equal = false;
			}
			else if (Object1.ScDegValidTil == null ^ Object2.ScDegValidTil == null )
			{
				equal = false;
			}
			if ( Object1.Round != null && Object2.Round != null )
			{
				if (Object1.Round != Object2.Round)
					equal = false;
			}
			else if (Object1.Round == null ^ Object2.Round == null )
			{
				equal = false;
			}
			if ( Object1.ThesisTitleAr != null && Object2.ThesisTitleAr != null )
			{
				if (Object1.ThesisTitleAr != Object2.ThesisTitleAr)
					equal = false;
			}
			else if (Object1.ThesisTitleAr == null ^ Object2.ThesisTitleAr == null )
			{
				equal = false;
			}
			if ( Object1.ThesisTitleEn != null && Object2.ThesisTitleEn != null )
			{
				if (Object1.ThesisTitleEn != Object2.ThesisTitleEn)
					equal = false;
			}
			else if (Object1.ThesisTitleEn == null ^ Object2.ThesisTitleEn == null )
			{
				equal = false;
			}
			if ( Object1.ThesisTopicAr != null && Object2.ThesisTopicAr != null )
			{
				if (Object1.ThesisTopicAr != Object2.ThesisTopicAr)
					equal = false;
			}
			else if (Object1.ThesisTopicAr == null ^ Object2.ThesisTopicAr == null )
			{
				equal = false;
			}
			if ( Object1.ThesisTopicEn != null && Object2.ThesisTopicEn != null )
			{
				if (Object1.ThesisTopicEn != Object2.ThesisTopicEn)
					equal = false;
			}
			else if (Object1.ThesisTopicEn == null ^ Object2.ThesisTopicEn == null )
			{
				equal = false;
			}
			if ( Object1.SpecSub != null && Object2.SpecSub != null )
			{
				if (Object1.SpecSub != Object2.SpecSub)
					equal = false;
			}
			else if (Object1.SpecSub == null ^ Object2.SpecSub == null )
			{
				equal = false;
			}
			if ( Object1.IsComplementry != null && Object2.IsComplementry != null )
			{
				if (Object1.IsComplementry != Object2.IsComplementry)
					equal = false;
			}
			else if (Object1.IsComplementry == null ^ Object2.IsComplementry == null )
			{
				equal = false;
			}
			if ( Object1.Comments != null && Object2.Comments != null )
			{
				if (Object1.Comments != Object2.Comments)
					equal = false;
			}
			else if (Object1.Comments == null ^ Object2.Comments == null )
			{
				equal = false;
			}
			if (Object1.SaStfMemberId != Object2.SaStfMemberId)
				equal = false;
			if ( Object1.SaCodeRatingId != null && Object2.SaCodeRatingId != null )
			{
				if (Object1.SaCodeRatingId != Object2.SaCodeRatingId)
					equal = false;
			}
			else if (Object1.SaCodeRatingId == null ^ Object2.SaCodeRatingId == null )
			{
				equal = false;
			}
			if ( Object1.SaCodeRatingId2 != null && Object2.SaCodeRatingId2 != null )
			{
				if (Object1.SaCodeRatingId2 != Object2.SaCodeRatingId2)
					equal = false;
			}
			else if (Object1.SaCodeRatingId2 == null ^ Object2.SaCodeRatingId2 == null )
			{
				equal = false;
			}
			if ( Object1.GsCountryNodeId != null && Object2.GsCountryNodeId != null )
			{
				if (Object1.GsCountryNodeId != Object2.GsCountryNodeId)
					equal = false;
			}
			else if (Object1.GsCountryNodeId == null ^ Object2.GsCountryNodeId == null )
			{
				equal = false;
			}
			if (Object1.AsCodeDegreeId != Object2.AsCodeDegreeId)
				equal = false;
			if (Object1.AsNodeId != Object2.AsNodeId)
				equal = false;
			if ( Object1.PgThesisDetailedSpecId != null && Object2.PgThesisDetailedSpecId != null )
			{
				if (Object1.PgThesisDetailedSpecId != Object2.PgThesisDetailedSpecId)
					equal = false;
			}
			else if (Object1.PgThesisDetailedSpecId == null ^ Object2.PgThesisDetailedSpecId == null )
			{
				equal = false;
			}
			if ( Object1.PgThesisGeneralSpecId != null && Object2.PgThesisGeneralSpecId != null )
			{
				if (Object1.PgThesisGeneralSpecId != Object2.PgThesisGeneralSpecId)
					equal = false;
			}
			else if (Object1.PgThesisGeneralSpecId == null ^ Object2.PgThesisGeneralSpecId == null )
			{
				equal = false;
			}
			if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SaScQualBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SaScQualComparer GetComparer()
        {
            return new SaScQualComparer();
        }
        */

        // Comparer delegates back to SaScQual
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SaScQual rhs, SaScQualColumn which)
        {
            switch (which)
            {
            	
            	
            	case SaScQualColumn.SaScQualId:
            		return this.SaScQualId.CompareTo(rhs.SaScQualId);
            		
            		                 
            	
            	
            	case SaScQualColumn.ScDegDate:
            		return this.ScDegDate.CompareTo(rhs.ScDegDate);
            		
            		                 
            	
            	
            	case SaScQualColumn.ScDegValidTil:
            		return this.ScDegValidTil.Value.CompareTo(rhs.ScDegValidTil.Value);
            		
            		                 
            	
            	
            	case SaScQualColumn.Round:
            		return this.Round.CompareTo(rhs.Round);
            		
            		                 
            	
            	
            	case SaScQualColumn.ThesisTitleAr:
            		return this.ThesisTitleAr.CompareTo(rhs.ThesisTitleAr);
            		
            		                 
            	
            	
            	case SaScQualColumn.ThesisTitleEn:
            		return this.ThesisTitleEn.CompareTo(rhs.ThesisTitleEn);
            		
            		                 
            	
            	
            	case SaScQualColumn.ThesisTopicAr:
            		return this.ThesisTopicAr.CompareTo(rhs.ThesisTopicAr);
            		
            		                 
            	
            	
            	case SaScQualColumn.ThesisTopicEn:
            		return this.ThesisTopicEn.CompareTo(rhs.ThesisTopicEn);
            		
            		                 
            	
            	
            	case SaScQualColumn.SpecSub:
            		return this.SpecSub.CompareTo(rhs.SpecSub);
            		
            		                 
            	
            	
            	case SaScQualColumn.IsComplementry:
            		return this.IsComplementry.Value.CompareTo(rhs.IsComplementry.Value);
            		
            		                 
            	
            	
            	case SaScQualColumn.Comments:
            		return this.Comments.CompareTo(rhs.Comments);
            		
            		                 
            	
            	
            	case SaScQualColumn.SaStfMemberId:
            		return this.SaStfMemberId.CompareTo(rhs.SaStfMemberId);
            		
            		                 
            	
            	
            	case SaScQualColumn.SaCodeRatingId:
            		return this.SaCodeRatingId.Value.CompareTo(rhs.SaCodeRatingId.Value);
            		
            		                 
            	
            	
            	case SaScQualColumn.SaCodeRatingId2:
            		return this.SaCodeRatingId2.Value.CompareTo(rhs.SaCodeRatingId2.Value);
            		
            		                 
            	
            	
            	case SaScQualColumn.GsCountryNodeId:
            		return this.GsCountryNodeId.Value.CompareTo(rhs.GsCountryNodeId.Value);
            		
            		                 
            	
            	
            	case SaScQualColumn.AsCodeDegreeId:
            		return this.AsCodeDegreeId.CompareTo(rhs.AsCodeDegreeId);
            		
            		                 
            	
            	
            	case SaScQualColumn.AsNodeId:
            		return this.AsNodeId.CompareTo(rhs.AsNodeId);
            		
            		                 
            	
            	
            	case SaScQualColumn.PgThesisDetailedSpecId:
            		return this.PgThesisDetailedSpecId.Value.CompareTo(rhs.PgThesisDetailedSpecId.Value);
            		
            		                 
            	
            	
            	case SaScQualColumn.PgThesisGeneralSpecId:
            		return this.PgThesisGeneralSpecId.Value.CompareTo(rhs.PgThesisGeneralSpecId.Value);
            		
            		                 
            	
            	
            	case SaScQualColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.CompareTo(rhs.AsFacultyInfoId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SaScQualKey> Members
		
		// member variable for the EntityId property
		private SaScQualKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SaScQualKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SaScQualKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SaScQual")
					.Append("|").Append( this.SaScQualId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{21}{20}- SaScQualId: {0}{20}- ScDegDate: {1}{20}- ScDegValidTil: {2}{20}- Round: {3}{20}- ThesisTitleAr: {4}{20}- ThesisTitleEn: {5}{20}- ThesisTopicAr: {6}{20}- ThesisTopicEn: {7}{20}- SpecSub: {8}{20}- IsComplementry: {9}{20}- Comments: {10}{20}- SaStfMemberId: {11}{20}- SaCodeRatingId: {12}{20}- SaCodeRatingId2: {13}{20}- GsCountryNodeId: {14}{20}- AsCodeDegreeId: {15}{20}- AsNodeId: {16}{20}- PgThesisDetailedSpecId: {17}{20}- PgThesisGeneralSpecId: {18}{20}- AsFacultyInfoId: {19}{20}{22}", 
				this.SaScQualId,
				this.ScDegDate,
				(this.ScDegValidTil == null) ? string.Empty : this.ScDegValidTil.ToString(),
				(this.Round == null) ? string.Empty : this.Round.ToString(),
				(this.ThesisTitleAr == null) ? string.Empty : this.ThesisTitleAr.ToString(),
				(this.ThesisTitleEn == null) ? string.Empty : this.ThesisTitleEn.ToString(),
				(this.ThesisTopicAr == null) ? string.Empty : this.ThesisTopicAr.ToString(),
				(this.ThesisTopicEn == null) ? string.Empty : this.ThesisTopicEn.ToString(),
				(this.SpecSub == null) ? string.Empty : this.SpecSub.ToString(),
				(this.IsComplementry == null) ? string.Empty : this.IsComplementry.ToString(),
				(this.Comments == null) ? string.Empty : this.Comments.ToString(),
				this.SaStfMemberId,
				(this.SaCodeRatingId == null) ? string.Empty : this.SaCodeRatingId.ToString(),
				(this.SaCodeRatingId2 == null) ? string.Empty : this.SaCodeRatingId2.ToString(),
				(this.GsCountryNodeId == null) ? string.Empty : this.GsCountryNodeId.ToString(),
				this.AsCodeDegreeId,
				this.AsNodeId,
				(this.PgThesisDetailedSpecId == null) ? string.Empty : this.PgThesisDetailedSpecId.ToString(),
				(this.PgThesisGeneralSpecId == null) ? string.Empty : this.PgThesisGeneralSpecId.ToString(),
				this.AsFacultyInfoId,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SA_SC_QUAL' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SaScQualEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SA_SC_QUAL_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SA_SC_QUAL"</remarks>
		public System.Decimal SaScQualId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSaScQualId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SC_DEG_DATE : 
		/// </summary>
		public System.DateTime		  ScDegDate = DateTime.MinValue;
		
		/// <summary>
		/// SC_DEG_VALID_TIL : 
		/// </summary>
		public System.DateTime?		  ScDegValidTil = null;
		
		/// <summary>
		/// ROUND : 
		/// </summary>
		public System.String		  Round = null;
		
		/// <summary>
		/// THESIS_TITLE_AR : 
		/// </summary>
		public System.String		  ThesisTitleAr = null;
		
		/// <summary>
		/// THESIS_TITLE_EN : 
		/// </summary>
		public System.String		  ThesisTitleEn = null;
		
		/// <summary>
		/// THESIS_TOPIC_AR : 
		/// </summary>
		public System.String		  ThesisTopicAr = null;
		
		/// <summary>
		/// THESIS_TOPIC_EN : 
		/// </summary>
		public System.String		  ThesisTopicEn = null;
		
		/// <summary>
		/// SPEC_SUB : 
		/// </summary>
		public System.String		  SpecSub = null;
		
		/// <summary>
		/// IS_COMPLEMENTRY : 
		/// </summary>
		public System.Decimal?		  IsComplementry = null;
		
		/// <summary>
		/// COMMENTS : 
		/// </summary>
		public System.String		  Comments = null;
		
		/// <summary>
		/// SA_STF_MEMBER_ID : 
		/// </summary>
		public System.Decimal		  SaStfMemberId = 0.0m;
		
		/// <summary>
		/// SA_CODE_RATING_ID : 
		/// </summary>
		public System.Decimal?		  SaCodeRatingId = null;
		
		/// <summary>
		/// SA_CODE_RATING_ID2 : 
		/// </summary>
		public System.Decimal?		  SaCodeRatingId2 = null;
		
		/// <summary>
		/// GS_COUNTRY_NODE_ID : 
		/// </summary>
		public System.Decimal?		  GsCountryNodeId = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_ID : 
		/// </summary>
		public System.Decimal		  AsCodeDegreeId = 0.0m;
		
		/// <summary>
		/// AS_NODE_ID : 
		/// </summary>
		public System.Decimal		  AsNodeId = 0.0m;
		
		/// <summary>
		/// PG_THESIS_DETAILED_SPEC_ID : 
		/// </summary>
		public System.Decimal?		  PgThesisDetailedSpecId = null;
		
		/// <summary>
		/// PG_THESIS_GENERAL_SPEC_ID : 
		/// </summary>
		public System.Decimal?		  PgThesisGeneralSpecId = null;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal		  AsFacultyInfoId = 0.0m;
		#endregion
			
		#region Source Foreign Key Property
				
		private SaCodeRating _saCodeRatingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeRating"/>.
		/// </summary>
		/// <value>The source SaCodeRating for SaCodeRatingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaCodeRating SaCodeRatingIdSource
      	{
            get { return this._saCodeRatingIdSource; }
            set { this._saCodeRatingIdSource = value; }
      	}
		private SaCodeRating _saCodeRatingId2Source = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeRating"/>.
		/// </summary>
		/// <value>The source SaCodeRating for SaCodeRatingId2.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaCodeRating SaCodeRatingId2Source
      	{
            get { return this._saCodeRatingId2Source; }
            set { this._saCodeRatingId2Source = value; }
      	}
		private AsCodeDegree _asCodeDegreeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return this._asCodeDegreeIdSource; }
            set { this._asCodeDegreeIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EntityMain _asNodeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for AsNodeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain AsNodeIdSource
      	{
            get { return this._asNodeIdSource; }
            set { this._asNodeIdSource = value; }
      	}
		private PgThesisDetailedSpec _pgThesisDetailedSpecIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="PgThesisDetailedSpec"/>.
		/// </summary>
		/// <value>The source PgThesisDetailedSpec for PgThesisDetailedSpecId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual PgThesisDetailedSpec PgThesisDetailedSpecIdSource
      	{
            get { return this._pgThesisDetailedSpecIdSource; }
            set { this._pgThesisDetailedSpecIdSource = value; }
      	}
		private PgThesisGeneralSpec _pgThesisGeneralSpecIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="PgThesisGeneralSpec"/>.
		/// </summary>
		/// <value>The source PgThesisGeneralSpec for PgThesisGeneralSpecId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual PgThesisGeneralSpec PgThesisGeneralSpecIdSource
      	{
            get { return this._pgThesisGeneralSpecIdSource; }
            set { this._pgThesisGeneralSpecIdSource = value; }
      	}
		private SaStfMember _saStfMemberIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return this._saStfMemberIdSource; }
            set { this._saStfMemberIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region SaEmploymentCollection
		
		private TList<SaEmployment> _saEmploymentSaScQualId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _saEmploymentSaScQualId
		/// </summary>
		
		public TList<SaEmployment> SaEmploymentCollection
		{
			get
			{
				if (_saEmploymentSaScQualId == null)
				{
				_saEmploymentSaScQualId = new TList<SaEmployment>();
				}
	
				return _saEmploymentSaScQualId;
			}
			set { _saEmploymentSaScQualId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SaScQualEntityData _tmp = new SaScQualEntityData();
						
			_tmp.SaScQualId = this.SaScQualId;
			_tmp.OriginalSaScQualId = this.OriginalSaScQualId;
			
			_tmp.ScDegDate = this.ScDegDate;
			_tmp.ScDegValidTil = this.ScDegValidTil;
			_tmp.Round = this.Round;
			_tmp.ThesisTitleAr = this.ThesisTitleAr;
			_tmp.ThesisTitleEn = this.ThesisTitleEn;
			_tmp.ThesisTopicAr = this.ThesisTopicAr;
			_tmp.ThesisTopicEn = this.ThesisTopicEn;
			_tmp.SpecSub = this.SpecSub;
			_tmp.IsComplementry = this.IsComplementry;
			_tmp.Comments = this.Comments;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.SaCodeRatingId = this.SaCodeRatingId;
			_tmp.SaCodeRatingId2 = this.SaCodeRatingId2;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.AsNodeId = this.AsNodeId;
			_tmp.PgThesisDetailedSpecId = this.PgThesisDetailedSpecId;
			_tmp.PgThesisGeneralSpecId = this.PgThesisGeneralSpecId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			
			#region Source Parent Composite Entities
			if (this.SaCodeRatingIdSource != null)
				_tmp.SaCodeRatingIdSource = MakeCopyOf(this.SaCodeRatingIdSource) as SaCodeRating;
			if (this.SaCodeRatingId2Source != null)
				_tmp.SaCodeRatingId2Source = MakeCopyOf(this.SaCodeRatingId2Source) as SaCodeRating;
			if (this.AsCodeDegreeIdSource != null)
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource) as AsCodeDegree;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.AsNodeIdSource != null)
				_tmp.AsNodeIdSource = MakeCopyOf(this.AsNodeIdSource) as EntityMain;
			if (this.PgThesisDetailedSpecIdSource != null)
				_tmp.PgThesisDetailedSpecIdSource = MakeCopyOf(this.PgThesisDetailedSpecIdSource) as PgThesisDetailedSpec;
			if (this.PgThesisGeneralSpecIdSource != null)
				_tmp.PgThesisGeneralSpecIdSource = MakeCopyOf(this.PgThesisGeneralSpecIdSource) as PgThesisGeneralSpec;
			if (this.SaStfMemberIdSource != null)
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource) as SaStfMember;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._saEmploymentSaScQualId != null)
				_tmp.SaEmploymentCollection = (TList<SaEmployment>) MakeCopyOf(this.SaEmploymentCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SaScQualEntityData _tmp = new SaScQualEntityData();
						
			_tmp.SaScQualId = this.SaScQualId;
			_tmp.OriginalSaScQualId = this.OriginalSaScQualId;
			
			_tmp.ScDegDate = this.ScDegDate;
			_tmp.ScDegValidTil = this.ScDegValidTil;
			_tmp.Round = this.Round;
			_tmp.ThesisTitleAr = this.ThesisTitleAr;
			_tmp.ThesisTitleEn = this.ThesisTitleEn;
			_tmp.ThesisTopicAr = this.ThesisTopicAr;
			_tmp.ThesisTopicEn = this.ThesisTopicEn;
			_tmp.SpecSub = this.SpecSub;
			_tmp.IsComplementry = this.IsComplementry;
			_tmp.Comments = this.Comments;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.SaCodeRatingId = this.SaCodeRatingId;
			_tmp.SaCodeRatingId2 = this.SaCodeRatingId2;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.AsNodeId = this.AsNodeId;
			_tmp.PgThesisDetailedSpecId = this.PgThesisDetailedSpecId;
			_tmp.PgThesisGeneralSpecId = this.PgThesisGeneralSpecId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			
			#region Source Parent Composite Entities
			if (this.SaCodeRatingIdSource != null && existingCopies.Contains(this.SaCodeRatingIdSource))
				_tmp.SaCodeRatingIdSource = existingCopies[this.SaCodeRatingIdSource] as SaCodeRating;
			else
				_tmp.SaCodeRatingIdSource = MakeCopyOf(this.SaCodeRatingIdSource, existingCopies) as SaCodeRating;
			if (this.SaCodeRatingId2Source != null && existingCopies.Contains(this.SaCodeRatingId2Source))
				_tmp.SaCodeRatingId2Source = existingCopies[this.SaCodeRatingId2Source] as SaCodeRating;
			else
				_tmp.SaCodeRatingId2Source = MakeCopyOf(this.SaCodeRatingId2Source, existingCopies) as SaCodeRating;
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				_tmp.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.AsNodeIdSource != null && existingCopies.Contains(this.AsNodeIdSource))
				_tmp.AsNodeIdSource = existingCopies[this.AsNodeIdSource] as EntityMain;
			else
				_tmp.AsNodeIdSource = MakeCopyOf(this.AsNodeIdSource, existingCopies) as EntityMain;
			if (this.PgThesisDetailedSpecIdSource != null && existingCopies.Contains(this.PgThesisDetailedSpecIdSource))
				_tmp.PgThesisDetailedSpecIdSource = existingCopies[this.PgThesisDetailedSpecIdSource] as PgThesisDetailedSpec;
			else
				_tmp.PgThesisDetailedSpecIdSource = MakeCopyOf(this.PgThesisDetailedSpecIdSource, existingCopies) as PgThesisDetailedSpec;
			if (this.PgThesisGeneralSpecIdSource != null && existingCopies.Contains(this.PgThesisGeneralSpecIdSource))
				_tmp.PgThesisGeneralSpecIdSource = existingCopies[this.PgThesisGeneralSpecIdSource] as PgThesisGeneralSpec;
			else
				_tmp.PgThesisGeneralSpecIdSource = MakeCopyOf(this.PgThesisGeneralSpecIdSource, existingCopies) as PgThesisGeneralSpec;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				_tmp.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.SaEmploymentCollection = (TList<SaEmployment>) MakeCopyOf(this.SaEmploymentCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaScQualColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SaScQualColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaScQualColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SaScQualColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaScQualColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SaScQualColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SaScQualEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SaScQualEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaScQualColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SaScQualColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SaScQualEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SaScQualEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SaScQualEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SaScQual"/> object.
	/// </remarks>
	public class SaScQualEventArgs : System.EventArgs
	{
		private SaScQualColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SaScQualEventArgs class.
		///</summary>
		public SaScQualEventArgs(SaScQualColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SaScQualEventArgs class.
		///</summary>
		public SaScQualEventArgs(SaScQualColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SaScQualColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SaScQualColumn" />
		public SaScQualColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SaScQual related events.
	///</summary>
	public delegate void SaScQualEventHandler(object sender, SaScQualEventArgs e);
	
	#region SaScQualComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SaScQualComparer : System.Collections.Generic.IComparer<SaScQual>
	{
		SaScQualColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SaScQualComparer"/> class.
        /// </summary>
		public SaScQualComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SaScQualComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SaScQualComparer(SaScQualColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SaScQual"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SaScQual"/> to compare.</param>
        /// <param name="b">The second <c>SaScQual</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SaScQual a, SaScQual b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SaScQual entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SaScQual a, SaScQual b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SaScQualColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SaScQualKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SaScQual"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SaScQualKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SaScQualKey class.
		/// </summary>
		public SaScQualKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SaScQualKey class.
		/// </summary>
		public SaScQualKey(SaScQualBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SaScQualId = entity.SaScQualId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SaScQualKey class.
		/// </summary>
		public SaScQualKey(System.Decimal _saScQualId)
		{
			#region Init Properties

			this.SaScQualId = _saScQualId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SaScQualBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SaScQualBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SaScQualId property
		private System.Decimal _saScQualId;
		
		/// <summary>
		/// Gets or sets the SaScQualId property.
		/// </summary>
		public System.Decimal SaScQualId
		{
			get { return _saScQualId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SaScQualId = value;
				
				_saScQualId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SaScQualId = ( values["SaScQualId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SaScQualId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SaScQualId", SaScQualId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SaScQualId: {0}{1}",
								SaScQualId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SaScQualColumn Enum
	
	/// <summary>
	/// Enumerate the SaScQual columns.
	/// </summary>
	[Serializable]
	public enum SaScQualColumn : int
	{
		/// <summary>
		/// SaScQualId : 
		/// </summary>
		[EnumTextValue("SA_SC_QUAL_ID")]
		[ColumnEnum("SA_SC_QUAL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SaScQualId = 1,
		/// <summary>
		/// ScDegDate : 
		/// </summary>
		[EnumTextValue("SC_DEG_DATE")]
		[ColumnEnum("SC_DEG_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ScDegDate = 2,
		/// <summary>
		/// ScDegValidTil : 
		/// </summary>
		[EnumTextValue("SC_DEG_VALID_TIL")]
		[ColumnEnum("SC_DEG_VALID_TIL", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ScDegValidTil = 3,
		/// <summary>
		/// Round : 
		/// </summary>
		[EnumTextValue("ROUND")]
		[ColumnEnum("ROUND", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		Round = 4,
		/// <summary>
		/// ThesisTitleAr : 
		/// </summary>
		[EnumTextValue("THESIS_TITLE_AR")]
		[ColumnEnum("THESIS_TITLE_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 400)]
		ThesisTitleAr = 5,
		/// <summary>
		/// ThesisTitleEn : 
		/// </summary>
		[EnumTextValue("THESIS_TITLE_EN")]
		[ColumnEnum("THESIS_TITLE_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 400)]
		ThesisTitleEn = 6,
		/// <summary>
		/// ThesisTopicAr : 
		/// </summary>
		[EnumTextValue("THESIS_TOPIC_AR")]
		[ColumnEnum("THESIS_TOPIC_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 400)]
		ThesisTopicAr = 7,
		/// <summary>
		/// ThesisTopicEn : 
		/// </summary>
		[EnumTextValue("THESIS_TOPIC_EN")]
		[ColumnEnum("THESIS_TOPIC_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 400)]
		ThesisTopicEn = 8,
		/// <summary>
		/// SpecSub : 
		/// </summary>
		[EnumTextValue("SPEC_SUB")]
		[ColumnEnum("SPEC_SUB", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		SpecSub = 9,
		/// <summary>
		/// IsComplementry : 
		/// </summary>
		[EnumTextValue("IS_COMPLEMENTRY")]
		[ColumnEnum("IS_COMPLEMENTRY", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		IsComplementry = 10,
		/// <summary>
		/// Comments : 
		/// </summary>
		[EnumTextValue("COMMENTS")]
		[ColumnEnum("COMMENTS", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		Comments = 11,
		/// <summary>
		/// SaStfMemberId : 
		/// </summary>
		[EnumTextValue("SA_STF_MEMBER_ID")]
		[ColumnEnum("SA_STF_MEMBER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaStfMemberId = 12,
		/// <summary>
		/// SaCodeRatingId : 
		/// </summary>
		[EnumTextValue("SA_CODE_RATING_ID")]
		[ColumnEnum("SA_CODE_RATING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SaCodeRatingId = 13,
		/// <summary>
		/// SaCodeRatingId2 : 
		/// </summary>
		[EnumTextValue("SA_CODE_RATING_ID2")]
		[ColumnEnum("SA_CODE_RATING_ID2", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SaCodeRatingId2 = 14,
		/// <summary>
		/// GsCountryNodeId : 
		/// </summary>
		[EnumTextValue("GS_COUNTRY_NODE_ID")]
		[ColumnEnum("GS_COUNTRY_NODE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCountryNodeId = 15,
		/// <summary>
		/// AsCodeDegreeId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_ID")]
		[ColumnEnum("AS_CODE_DEGREE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsCodeDegreeId = 16,
		/// <summary>
		/// AsNodeId : 
		/// </summary>
		[EnumTextValue("AS_NODE_ID")]
		[ColumnEnum("AS_NODE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsNodeId = 17,
		/// <summary>
		/// PgThesisDetailedSpecId : 
		/// </summary>
		[EnumTextValue("PG_THESIS_DETAILED_SPEC_ID")]
		[ColumnEnum("PG_THESIS_DETAILED_SPEC_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PgThesisDetailedSpecId = 18,
		/// <summary>
		/// PgThesisGeneralSpecId : 
		/// </summary>
		[EnumTextValue("PG_THESIS_GENERAL_SPEC_ID")]
		[ColumnEnum("PG_THESIS_GENERAL_SPEC_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PgThesisGeneralSpecId = 19,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsFacultyInfoId = 20
	}//End enum

	#endregion SaScQualColumn Enum

} // end namespace
