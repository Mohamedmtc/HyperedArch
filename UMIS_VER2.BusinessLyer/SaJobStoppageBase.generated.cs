
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SaJobStoppage.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SA_JOB_STOPPAGE' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SaJobStoppageBase : EntityBase, ISaJobStoppage, IEntityId<SaJobStoppageKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SaJobStoppageEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SaJobStoppageEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SaJobStoppageEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SaJobStoppage> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaJobStoppageEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaJobStoppageEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SaJobStoppageBase"/> instance.
		///</summary>
		public SaJobStoppageBase()
		{
			this.entityData = new SaJobStoppageEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SaJobStoppageBase"/> instance.
		///</summary>
		///<param name="_saJobStoppageId"></param>
		///<param name="_stoppingReason"></param>
		///<param name="_stoppingFrom"></param>
		///<param name="_stoppingTo"></param>
		///<param name="_stoppingDecisionText"></param>
		///<param name="_stoppingRuleText"></param>
		///<param name="_isExcuseAcceptedDept"></param>
		///<param name="_isExcuseAcceptedFaculty"></param>
		///<param name="_isExcuseAcceptedUni"></param>
		///<param name="_doesAffectStaffState"></param>
		///<param name="_comments"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_returnAffectsStatus"></param>
		///<param name="_saJobStartStatmentId"></param>
		public SaJobStoppageBase(System.Decimal _saJobStoppageId, System.String _stoppingReason, 
			System.DateTime _stoppingFrom, System.DateTime? _stoppingTo, System.String _stoppingDecisionText, 
			System.String _stoppingRuleText, System.Decimal _isExcuseAcceptedDept, System.Decimal _isExcuseAcceptedFaculty, 
			System.Decimal _isExcuseAcceptedUni, System.Decimal _doesAffectStaffState, System.String _comments, 
			System.Decimal _saStfMemberId, System.Decimal _asFacultyInfoId, System.Decimal _returnAffectsStatus, 
			System.Decimal? _saJobStartStatmentId)
		{
			this.entityData = new SaJobStoppageEntityData();
			this.backupData = null;

			this.SaJobStoppageId = _saJobStoppageId;
			this.StoppingReason = _stoppingReason;
			this.StoppingFrom = _stoppingFrom;
			this.StoppingTo = _stoppingTo;
			this.StoppingDecisionText = _stoppingDecisionText;
			this.StoppingRuleText = _stoppingRuleText;
			this.IsExcuseAcceptedDept = _isExcuseAcceptedDept;
			this.IsExcuseAcceptedFaculty = _isExcuseAcceptedFaculty;
			this.IsExcuseAcceptedUni = _isExcuseAcceptedUni;
			this.DoesAffectStaffState = _doesAffectStaffState;
			this.Comments = _comments;
			this.SaStfMemberId = _saStfMemberId;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.ReturnAffectsStatus = _returnAffectsStatus;
			this.SaJobStartStatmentId = _saJobStartStatmentId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SaJobStoppage"/> instance.
		///</summary>
		///<param name="_saJobStoppageId"></param>
		///<param name="_stoppingReason"></param>
		///<param name="_stoppingFrom"></param>
		///<param name="_stoppingTo"></param>
		///<param name="_stoppingDecisionText"></param>
		///<param name="_stoppingRuleText"></param>
		///<param name="_isExcuseAcceptedDept"></param>
		///<param name="_isExcuseAcceptedFaculty"></param>
		///<param name="_isExcuseAcceptedUni"></param>
		///<param name="_doesAffectStaffState"></param>
		///<param name="_comments"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_returnAffectsStatus"></param>
		///<param name="_saJobStartStatmentId"></param>
		public static SaJobStoppage CreateSaJobStoppage(System.Decimal _saJobStoppageId, System.String _stoppingReason, 
			System.DateTime _stoppingFrom, System.DateTime? _stoppingTo, System.String _stoppingDecisionText, 
			System.String _stoppingRuleText, System.Decimal _isExcuseAcceptedDept, System.Decimal _isExcuseAcceptedFaculty, 
			System.Decimal _isExcuseAcceptedUni, System.Decimal _doesAffectStaffState, System.String _comments, 
			System.Decimal _saStfMemberId, System.Decimal _asFacultyInfoId, System.Decimal _returnAffectsStatus, 
			System.Decimal? _saJobStartStatmentId)
		{
			SaJobStoppage newSaJobStoppage = new SaJobStoppage();
			newSaJobStoppage.SaJobStoppageId = _saJobStoppageId;
			newSaJobStoppage.StoppingReason = _stoppingReason;
			newSaJobStoppage.StoppingFrom = _stoppingFrom;
			newSaJobStoppage.StoppingTo = _stoppingTo;
			newSaJobStoppage.StoppingDecisionText = _stoppingDecisionText;
			newSaJobStoppage.StoppingRuleText = _stoppingRuleText;
			newSaJobStoppage.IsExcuseAcceptedDept = _isExcuseAcceptedDept;
			newSaJobStoppage.IsExcuseAcceptedFaculty = _isExcuseAcceptedFaculty;
			newSaJobStoppage.IsExcuseAcceptedUni = _isExcuseAcceptedUni;
			newSaJobStoppage.DoesAffectStaffState = _doesAffectStaffState;
			newSaJobStoppage.Comments = _comments;
			newSaJobStoppage.SaStfMemberId = _saStfMemberId;
			newSaJobStoppage.AsFacultyInfoId = _asFacultyInfoId;
			newSaJobStoppage.ReturnAffectsStatus = _returnAffectsStatus;
			newSaJobStoppage.SaJobStartStatmentId = _saJobStartStatmentId;
			return newSaJobStoppage;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SaJobStoppageId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SaJobStoppageId
		{
			get
			{
				return this.entityData.SaJobStoppageId; 
			}
			
			set
			{
				if (this.entityData.SaJobStoppageId == value)
					return;
					
				OnColumnChanging(SaJobStoppageColumn.SaJobStoppageId, this.entityData.SaJobStoppageId);
				this.entityData.SaJobStoppageId = value;
				this.EntityId.SaJobStoppageId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaJobStoppageColumn.SaJobStoppageId, this.entityData.SaJobStoppageId);
				OnPropertyChanged("SaJobStoppageId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SA_JOB_STOPPAGE_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SA_JOB_STOPPAGE_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSaJobStoppageId
		{
			get { return this.entityData.OriginalSaJobStoppageId; }
			set { this.entityData.OriginalSaJobStoppageId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the StoppingReason property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String StoppingReason
		{
			get
			{
				return this.entityData.StoppingReason; 
			}
			
			set
			{
				if (this.entityData.StoppingReason == value)
					return;
					
				OnColumnChanging(SaJobStoppageColumn.StoppingReason, this.entityData.StoppingReason);
				this.entityData.StoppingReason = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaJobStoppageColumn.StoppingReason, this.entityData.StoppingReason);
				OnPropertyChanged("StoppingReason");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StoppingFrom property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime StoppingFrom
		{
			get
			{
				return this.entityData.StoppingFrom; 
			}
			
			set
			{
				if (this.entityData.StoppingFrom == value)
					return;
					
				OnColumnChanging(SaJobStoppageColumn.StoppingFrom, this.entityData.StoppingFrom);
				this.entityData.StoppingFrom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaJobStoppageColumn.StoppingFrom, this.entityData.StoppingFrom);
				OnPropertyChanged("StoppingFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StoppingTo property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsStoppingToNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? StoppingTo
		{
			get
			{
				return this.entityData.StoppingTo; 
			}
			
			set
			{
				if (this.entityData.StoppingTo == value)
					return;
					
				OnColumnChanging(SaJobStoppageColumn.StoppingTo, this.entityData.StoppingTo);
				this.entityData.StoppingTo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaJobStoppageColumn.StoppingTo, this.entityData.StoppingTo);
				OnPropertyChanged("StoppingTo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StoppingDecisionText property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String StoppingDecisionText
		{
			get
			{
				return this.entityData.StoppingDecisionText; 
			}
			
			set
			{
				if (this.entityData.StoppingDecisionText == value)
					return;
					
				OnColumnChanging(SaJobStoppageColumn.StoppingDecisionText, this.entityData.StoppingDecisionText);
				this.entityData.StoppingDecisionText = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaJobStoppageColumn.StoppingDecisionText, this.entityData.StoppingDecisionText);
				OnPropertyChanged("StoppingDecisionText");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StoppingRuleText property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String StoppingRuleText
		{
			get
			{
				return this.entityData.StoppingRuleText; 
			}
			
			set
			{
				if (this.entityData.StoppingRuleText == value)
					return;
					
				OnColumnChanging(SaJobStoppageColumn.StoppingRuleText, this.entityData.StoppingRuleText);
				this.entityData.StoppingRuleText = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaJobStoppageColumn.StoppingRuleText, this.entityData.StoppingRuleText);
				OnPropertyChanged("StoppingRuleText");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsExcuseAcceptedDept property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsExcuseAcceptedDept
		{
			get
			{
				return this.entityData.IsExcuseAcceptedDept; 
			}
			
			set
			{
				if (this.entityData.IsExcuseAcceptedDept == value)
					return;
					
				OnColumnChanging(SaJobStoppageColumn.IsExcuseAcceptedDept, this.entityData.IsExcuseAcceptedDept);
				this.entityData.IsExcuseAcceptedDept = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaJobStoppageColumn.IsExcuseAcceptedDept, this.entityData.IsExcuseAcceptedDept);
				OnPropertyChanged("IsExcuseAcceptedDept");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsExcuseAcceptedFaculty property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsExcuseAcceptedFaculty
		{
			get
			{
				return this.entityData.IsExcuseAcceptedFaculty; 
			}
			
			set
			{
				if (this.entityData.IsExcuseAcceptedFaculty == value)
					return;
					
				OnColumnChanging(SaJobStoppageColumn.IsExcuseAcceptedFaculty, this.entityData.IsExcuseAcceptedFaculty);
				this.entityData.IsExcuseAcceptedFaculty = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaJobStoppageColumn.IsExcuseAcceptedFaculty, this.entityData.IsExcuseAcceptedFaculty);
				OnPropertyChanged("IsExcuseAcceptedFaculty");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsExcuseAcceptedUni property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsExcuseAcceptedUni
		{
			get
			{
				return this.entityData.IsExcuseAcceptedUni; 
			}
			
			set
			{
				if (this.entityData.IsExcuseAcceptedUni == value)
					return;
					
				OnColumnChanging(SaJobStoppageColumn.IsExcuseAcceptedUni, this.entityData.IsExcuseAcceptedUni);
				this.entityData.IsExcuseAcceptedUni = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaJobStoppageColumn.IsExcuseAcceptedUni, this.entityData.IsExcuseAcceptedUni);
				OnPropertyChanged("IsExcuseAcceptedUni");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DoesAffectStaffState property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal DoesAffectStaffState
		{
			get
			{
				return this.entityData.DoesAffectStaffState; 
			}
			
			set
			{
				if (this.entityData.DoesAffectStaffState == value)
					return;
					
				OnColumnChanging(SaJobStoppageColumn.DoesAffectStaffState, this.entityData.DoesAffectStaffState);
				this.entityData.DoesAffectStaffState = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaJobStoppageColumn.DoesAffectStaffState, this.entityData.DoesAffectStaffState);
				OnPropertyChanged("DoesAffectStaffState");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Comments property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Comments
		{
			get
			{
				return this.entityData.Comments; 
			}
			
			set
			{
				if (this.entityData.Comments == value)
					return;
					
				OnColumnChanging(SaJobStoppageColumn.Comments, this.entityData.Comments);
				this.entityData.Comments = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaJobStoppageColumn.Comments, this.entityData.Comments);
				OnPropertyChanged("Comments");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaStfMemberId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaStfMemberId
		{
			get
			{
				return this.entityData.SaStfMemberId; 
			}
			
			set
			{
				if (this.entityData.SaStfMemberId == value)
					return;
					
				OnColumnChanging(SaJobStoppageColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				this.entityData.SaStfMemberId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaJobStoppageColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				OnPropertyChanged("SaStfMemberId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(SaJobStoppageColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaJobStoppageColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReturnAffectsStatus property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ReturnAffectsStatus
		{
			get
			{
				return this.entityData.ReturnAffectsStatus; 
			}
			
			set
			{
				if (this.entityData.ReturnAffectsStatus == value)
					return;
					
				OnColumnChanging(SaJobStoppageColumn.ReturnAffectsStatus, this.entityData.ReturnAffectsStatus);
				this.entityData.ReturnAffectsStatus = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaJobStoppageColumn.ReturnAffectsStatus, this.entityData.ReturnAffectsStatus);
				OnPropertyChanged("ReturnAffectsStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaJobStartStatmentId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSaJobStartStatmentIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SaJobStartStatmentId
		{
			get
			{
				return this.entityData.SaJobStartStatmentId; 
			}
			
			set
			{
				if (this.entityData.SaJobStartStatmentId == value)
					return;
					
				OnColumnChanging(SaJobStoppageColumn.SaJobStartStatmentId, this.entityData.SaJobStartStatmentId);
				this.entityData.SaJobStartStatmentId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaJobStoppageColumn.SaJobStartStatmentId, this.entityData.SaJobStartStatmentId);
				OnPropertyChanged("SaJobStartStatmentId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaJobStartStatment"/>.
		/// </summary>
		/// <value>The source SaJobStartStatment for SaJobStartStatmentId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaJobStartStatment SaJobStartStatmentIdSource
      	{
            get { return entityData.SaJobStartStatmentIdSource; }
            set { entityData.SaJobStartStatmentIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return entityData.SaStfMemberIdSource; }
            set { entityData.SaStfMemberIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of SaWarning objects
		///	which are related to this object through the relation FK_AUTO_0538
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SaWarning> SaWarningCollection
		{
			get { return entityData.SaWarningCollection; }
			set { entityData.SaWarningCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("StoppingReason", "Stopping Reason"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("StoppingReason", "Stopping Reason", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("StoppingDecisionText", "Stopping Decision Text"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("StoppingDecisionText", "Stopping Decision Text", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("StoppingRuleText", "Stopping Rule Text", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Comments", "Comments", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SA_JOB_STOPPAGE"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SA_JOB_STOPPAGE_ID", "STOPPING_REASON", "STOPPING_FROM", "STOPPING_TO", "STOPPING_DECISION_TEXT", "STOPPING_RULE_TEXT", "IS_EXCUSE_ACCEPTED_DEPT", "IS_EXCUSE_ACCEPTED_FACULTY", "IS_EXCUSE_ACCEPTED_UNI", "DOES_AFFECT_STAFF_STATE", "COMMENTS", "SA_STF_MEMBER_ID", "AS_FACULTY_INFO_ID", "RETURN_AFFECTS_STATUS", "SA_JOB_START_STATMENT_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SaJobStoppageEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SaJobStoppage) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SaJobStoppage>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SaJobStoppage);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SaJobStoppage Entity 
		///</summary>
		protected virtual SaJobStoppage Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SaJobStoppage copy = new SaJobStoppage();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SaJobStoppageId = this.SaJobStoppageId;
					copy.OriginalSaJobStoppageId = this.OriginalSaJobStoppageId;
				copy.StoppingReason = this.StoppingReason;
				copy.StoppingFrom = this.StoppingFrom;
				copy.StoppingTo = this.StoppingTo;
				copy.StoppingDecisionText = this.StoppingDecisionText;
				copy.StoppingRuleText = this.StoppingRuleText;
				copy.IsExcuseAcceptedDept = this.IsExcuseAcceptedDept;
				copy.IsExcuseAcceptedFaculty = this.IsExcuseAcceptedFaculty;
				copy.IsExcuseAcceptedUni = this.IsExcuseAcceptedUni;
				copy.DoesAffectStaffState = this.DoesAffectStaffState;
				copy.Comments = this.Comments;
				copy.SaStfMemberId = this.SaStfMemberId;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.ReturnAffectsStatus = this.ReturnAffectsStatus;
				copy.SaJobStartStatmentId = this.SaJobStartStatmentId;
			
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.SaJobStartStatmentIdSource != null && existingCopies.Contains(this.SaJobStartStatmentIdSource))
				copy.SaJobStartStatmentIdSource = existingCopies[this.SaJobStartStatmentIdSource] as SaJobStartStatment;
			else
				copy.SaJobStartStatmentIdSource = MakeCopyOf(this.SaJobStartStatmentIdSource, existingCopies) as SaJobStartStatment;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				copy.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				copy.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
		
			//deep copy nested objects
			copy.SaWarningCollection = (TList<SaWarning>) MakeCopyOf(this.SaWarningCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SaJobStoppage Entity 
		///</summary>
		public virtual SaJobStoppage Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SaJobStoppage Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SaJobStoppage DeepCopy()
		{
			return EntityHelper.Clone<SaJobStoppage>(this as SaJobStoppage);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SaJobStoppageEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SaJobStoppageEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SaJobStoppageEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SaJobStoppageColumn column)
		{
			switch(column)
			{
					case SaJobStoppageColumn.SaJobStoppageId:
					return entityData.SaJobStoppageId != _originalData.SaJobStoppageId;
					case SaJobStoppageColumn.StoppingReason:
					return entityData.StoppingReason != _originalData.StoppingReason;
					case SaJobStoppageColumn.StoppingFrom:
					return entityData.StoppingFrom != _originalData.StoppingFrom;
					case SaJobStoppageColumn.StoppingTo:
					return entityData.StoppingTo != _originalData.StoppingTo;
					case SaJobStoppageColumn.StoppingDecisionText:
					return entityData.StoppingDecisionText != _originalData.StoppingDecisionText;
					case SaJobStoppageColumn.StoppingRuleText:
					return entityData.StoppingRuleText != _originalData.StoppingRuleText;
					case SaJobStoppageColumn.IsExcuseAcceptedDept:
					return entityData.IsExcuseAcceptedDept != _originalData.IsExcuseAcceptedDept;
					case SaJobStoppageColumn.IsExcuseAcceptedFaculty:
					return entityData.IsExcuseAcceptedFaculty != _originalData.IsExcuseAcceptedFaculty;
					case SaJobStoppageColumn.IsExcuseAcceptedUni:
					return entityData.IsExcuseAcceptedUni != _originalData.IsExcuseAcceptedUni;
					case SaJobStoppageColumn.DoesAffectStaffState:
					return entityData.DoesAffectStaffState != _originalData.DoesAffectStaffState;
					case SaJobStoppageColumn.Comments:
					return entityData.Comments != _originalData.Comments;
					case SaJobStoppageColumn.SaStfMemberId:
					return entityData.SaStfMemberId != _originalData.SaStfMemberId;
					case SaJobStoppageColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case SaJobStoppageColumn.ReturnAffectsStatus:
					return entityData.ReturnAffectsStatus != _originalData.ReturnAffectsStatus;
					case SaJobStoppageColumn.SaJobStartStatmentId:
					return entityData.SaJobStartStatmentId != _originalData.SaJobStartStatmentId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SaJobStoppageColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SaJobStoppageId != _originalData.SaJobStoppageId;
			result = result || entityData.StoppingReason != _originalData.StoppingReason;
			result = result || entityData.StoppingFrom != _originalData.StoppingFrom;
			result = result || entityData.StoppingTo != _originalData.StoppingTo;
			result = result || entityData.StoppingDecisionText != _originalData.StoppingDecisionText;
			result = result || entityData.StoppingRuleText != _originalData.StoppingRuleText;
			result = result || entityData.IsExcuseAcceptedDept != _originalData.IsExcuseAcceptedDept;
			result = result || entityData.IsExcuseAcceptedFaculty != _originalData.IsExcuseAcceptedFaculty;
			result = result || entityData.IsExcuseAcceptedUni != _originalData.IsExcuseAcceptedUni;
			result = result || entityData.DoesAffectStaffState != _originalData.DoesAffectStaffState;
			result = result || entityData.Comments != _originalData.Comments;
			result = result || entityData.SaStfMemberId != _originalData.SaStfMemberId;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.ReturnAffectsStatus != _originalData.ReturnAffectsStatus;
			result = result || entityData.SaJobStartStatmentId != _originalData.SaJobStartStatmentId;
			return result;
		}	
		
		///<summary>
		///  Returns a SaJobStoppage Entity with the original data.
		///</summary>
		public SaJobStoppage GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSaJobStoppage(
				_originalData.SaJobStoppageId,
				_originalData.StoppingReason,
				_originalData.StoppingFrom,
				_originalData.StoppingTo,
				_originalData.StoppingDecisionText,
				_originalData.StoppingRuleText,
				_originalData.IsExcuseAcceptedDept,
				_originalData.IsExcuseAcceptedFaculty,
				_originalData.IsExcuseAcceptedUni,
				_originalData.DoesAffectStaffState,
				_originalData.Comments,
				_originalData.SaStfMemberId,
				_originalData.AsFacultyInfoId,
				_originalData.ReturnAffectsStatus,
				_originalData.SaJobStartStatmentId
				);
				
			return (SaJobStoppage)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SaJobStoppageBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SaJobStoppageBase)
				return ValueEquals(this, (SaJobStoppageBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SaJobStoppageBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SaJobStoppageId.GetHashCode() ^ 
					this.StoppingReason.GetHashCode() ^ 
					this.StoppingFrom.GetHashCode() ^ 
					((this.StoppingTo == null) ? string.Empty : this.StoppingTo.ToString()).GetHashCode() ^ 
					this.StoppingDecisionText.GetHashCode() ^ 
					((this.StoppingRuleText == null) ? string.Empty : this.StoppingRuleText.ToString()).GetHashCode() ^ 
					this.IsExcuseAcceptedDept.GetHashCode() ^ 
					this.IsExcuseAcceptedFaculty.GetHashCode() ^ 
					this.IsExcuseAcceptedUni.GetHashCode() ^ 
					this.DoesAffectStaffState.GetHashCode() ^ 
					((this.Comments == null) ? string.Empty : this.Comments.ToString()).GetHashCode() ^ 
					this.SaStfMemberId.GetHashCode() ^ 
					this.AsFacultyInfoId.GetHashCode() ^ 
					this.ReturnAffectsStatus.GetHashCode() ^ 
					((this.SaJobStartStatmentId == null) ? string.Empty : this.SaJobStartStatmentId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SaJobStoppageBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SaJobStoppageBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SaJobStoppageBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SaJobStoppageBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SaJobStoppageBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SaJobStoppageBase Object1, SaJobStoppageBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SaJobStoppageId != Object2.SaJobStoppageId)
				equal = false;
			if (Object1.StoppingReason != Object2.StoppingReason)
				equal = false;
			if (Object1.StoppingFrom != Object2.StoppingFrom)
				equal = false;
			if ( Object1.StoppingTo != null && Object2.StoppingTo != null )
			{
				if (Object1.StoppingTo != Object2.StoppingTo)
					equal = false;
			}
			else if (Object1.StoppingTo == null ^ Object2.StoppingTo == null )
			{
				equal = false;
			}
			if (Object1.StoppingDecisionText != Object2.StoppingDecisionText)
				equal = false;
			if ( Object1.StoppingRuleText != null && Object2.StoppingRuleText != null )
			{
				if (Object1.StoppingRuleText != Object2.StoppingRuleText)
					equal = false;
			}
			else if (Object1.StoppingRuleText == null ^ Object2.StoppingRuleText == null )
			{
				equal = false;
			}
			if (Object1.IsExcuseAcceptedDept != Object2.IsExcuseAcceptedDept)
				equal = false;
			if (Object1.IsExcuseAcceptedFaculty != Object2.IsExcuseAcceptedFaculty)
				equal = false;
			if (Object1.IsExcuseAcceptedUni != Object2.IsExcuseAcceptedUni)
				equal = false;
			if (Object1.DoesAffectStaffState != Object2.DoesAffectStaffState)
				equal = false;
			if ( Object1.Comments != null && Object2.Comments != null )
			{
				if (Object1.Comments != Object2.Comments)
					equal = false;
			}
			else if (Object1.Comments == null ^ Object2.Comments == null )
			{
				equal = false;
			}
			if (Object1.SaStfMemberId != Object2.SaStfMemberId)
				equal = false;
			if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
				equal = false;
			if (Object1.ReturnAffectsStatus != Object2.ReturnAffectsStatus)
				equal = false;
			if ( Object1.SaJobStartStatmentId != null && Object2.SaJobStartStatmentId != null )
			{
				if (Object1.SaJobStartStatmentId != Object2.SaJobStartStatmentId)
					equal = false;
			}
			else if (Object1.SaJobStartStatmentId == null ^ Object2.SaJobStartStatmentId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SaJobStoppageBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SaJobStoppageComparer GetComparer()
        {
            return new SaJobStoppageComparer();
        }
        */

        // Comparer delegates back to SaJobStoppage
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SaJobStoppage rhs, SaJobStoppageColumn which)
        {
            switch (which)
            {
            	
            	
            	case SaJobStoppageColumn.SaJobStoppageId:
            		return this.SaJobStoppageId.CompareTo(rhs.SaJobStoppageId);
            		
            		                 
            	
            	
            	case SaJobStoppageColumn.StoppingReason:
            		return this.StoppingReason.CompareTo(rhs.StoppingReason);
            		
            		                 
            	
            	
            	case SaJobStoppageColumn.StoppingFrom:
            		return this.StoppingFrom.CompareTo(rhs.StoppingFrom);
            		
            		                 
            	
            	
            	case SaJobStoppageColumn.StoppingTo:
            		return this.StoppingTo.Value.CompareTo(rhs.StoppingTo.Value);
            		
            		                 
            	
            	
            	case SaJobStoppageColumn.StoppingDecisionText:
            		return this.StoppingDecisionText.CompareTo(rhs.StoppingDecisionText);
            		
            		                 
            	
            	
            	case SaJobStoppageColumn.StoppingRuleText:
            		return this.StoppingRuleText.CompareTo(rhs.StoppingRuleText);
            		
            		                 
            	
            	
            	case SaJobStoppageColumn.IsExcuseAcceptedDept:
            		return this.IsExcuseAcceptedDept.CompareTo(rhs.IsExcuseAcceptedDept);
            		
            		                 
            	
            	
            	case SaJobStoppageColumn.IsExcuseAcceptedFaculty:
            		return this.IsExcuseAcceptedFaculty.CompareTo(rhs.IsExcuseAcceptedFaculty);
            		
            		                 
            	
            	
            	case SaJobStoppageColumn.IsExcuseAcceptedUni:
            		return this.IsExcuseAcceptedUni.CompareTo(rhs.IsExcuseAcceptedUni);
            		
            		                 
            	
            	
            	case SaJobStoppageColumn.DoesAffectStaffState:
            		return this.DoesAffectStaffState.CompareTo(rhs.DoesAffectStaffState);
            		
            		                 
            	
            	
            	case SaJobStoppageColumn.Comments:
            		return this.Comments.CompareTo(rhs.Comments);
            		
            		                 
            	
            	
            	case SaJobStoppageColumn.SaStfMemberId:
            		return this.SaStfMemberId.CompareTo(rhs.SaStfMemberId);
            		
            		                 
            	
            	
            	case SaJobStoppageColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.CompareTo(rhs.AsFacultyInfoId);
            		
            		                 
            	
            	
            	case SaJobStoppageColumn.ReturnAffectsStatus:
            		return this.ReturnAffectsStatus.CompareTo(rhs.ReturnAffectsStatus);
            		
            		                 
            	
            	
            	case SaJobStoppageColumn.SaJobStartStatmentId:
            		return this.SaJobStartStatmentId.Value.CompareTo(rhs.SaJobStartStatmentId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SaJobStoppageKey> Members
		
		// member variable for the EntityId property
		private SaJobStoppageKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SaJobStoppageKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SaJobStoppageKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SaJobStoppage")
					.Append("|").Append( this.SaJobStoppageId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{16}{15}- SaJobStoppageId: {0}{15}- StoppingReason: {1}{15}- StoppingFrom: {2}{15}- StoppingTo: {3}{15}- StoppingDecisionText: {4}{15}- StoppingRuleText: {5}{15}- IsExcuseAcceptedDept: {6}{15}- IsExcuseAcceptedFaculty: {7}{15}- IsExcuseAcceptedUni: {8}{15}- DoesAffectStaffState: {9}{15}- Comments: {10}{15}- SaStfMemberId: {11}{15}- AsFacultyInfoId: {12}{15}- ReturnAffectsStatus: {13}{15}- SaJobStartStatmentId: {14}{15}{17}", 
				this.SaJobStoppageId,
				this.StoppingReason,
				this.StoppingFrom,
				(this.StoppingTo == null) ? string.Empty : this.StoppingTo.ToString(),
				this.StoppingDecisionText,
				(this.StoppingRuleText == null) ? string.Empty : this.StoppingRuleText.ToString(),
				this.IsExcuseAcceptedDept,
				this.IsExcuseAcceptedFaculty,
				this.IsExcuseAcceptedUni,
				this.DoesAffectStaffState,
				(this.Comments == null) ? string.Empty : this.Comments.ToString(),
				this.SaStfMemberId,
				this.AsFacultyInfoId,
				this.ReturnAffectsStatus,
				(this.SaJobStartStatmentId == null) ? string.Empty : this.SaJobStartStatmentId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SA_JOB_STOPPAGE' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SaJobStoppageEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SA_JOB_STOPPAGE_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SA_JOB_STOPPAGE"</remarks>
		public System.Decimal SaJobStoppageId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSaJobStoppageId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// STOPPING_REASON : 
		/// </summary>
		public System.String		  StoppingReason = string.Empty;
		
		/// <summary>
		/// STOPPING_FROM : 
		/// </summary>
		public System.DateTime		  StoppingFrom = DateTime.MinValue;
		
		/// <summary>
		/// STOPPING_TO : 
		/// </summary>
		public System.DateTime?		  StoppingTo = null;
		
		/// <summary>
		/// STOPPING_DECISION_TEXT : 
		/// </summary>
		public System.String		  StoppingDecisionText = string.Empty;
		
		/// <summary>
		/// STOPPING_RULE_TEXT : 
		/// </summary>
		public System.String		  StoppingRuleText = null;
		
		/// <summary>
		/// IS_EXCUSE_ACCEPTED_DEPT : 
		/// </summary>
		public System.Decimal		  IsExcuseAcceptedDept = 0.0m;
		
		/// <summary>
		/// IS_EXCUSE_ACCEPTED_FACULTY : 
		/// </summary>
		public System.Decimal		  IsExcuseAcceptedFaculty = 0.0m;
		
		/// <summary>
		/// IS_EXCUSE_ACCEPTED_UNI : 
		/// </summary>
		public System.Decimal		  IsExcuseAcceptedUni = 0.0m;
		
		/// <summary>
		/// DOES_AFFECT_STAFF_STATE : 
		/// </summary>
		public System.Decimal		  DoesAffectStaffState = 0.0m;
		
		/// <summary>
		/// COMMENTS : 
		/// </summary>
		public System.String		  Comments = null;
		
		/// <summary>
		/// SA_STF_MEMBER_ID : 
		/// </summary>
		public System.Decimal		  SaStfMemberId = 0.0m;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal		  AsFacultyInfoId = 0.0m;
		
		/// <summary>
		/// RETURN_AFFECTS_STATUS : 
		/// </summary>
		public System.Decimal		  ReturnAffectsStatus = 0.0m;
		
		/// <summary>
		/// SA_JOB_START_STATMENT_ID : 
		/// </summary>
		public System.Decimal?		  SaJobStartStatmentId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private SaJobStartStatment _saJobStartStatmentIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaJobStartStatment"/>.
		/// </summary>
		/// <value>The source SaJobStartStatment for SaJobStartStatmentId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaJobStartStatment SaJobStartStatmentIdSource
      	{
            get { return this._saJobStartStatmentIdSource; }
            set { this._saJobStartStatmentIdSource = value; }
      	}
		private SaStfMember _saStfMemberIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return this._saStfMemberIdSource; }
            set { this._saStfMemberIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region SaWarningCollection
		
		private TList<SaWarning> _saWarningSaJobStoppageId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _saWarningSaJobStoppageId
		/// </summary>
		
		public TList<SaWarning> SaWarningCollection
		{
			get
			{
				if (_saWarningSaJobStoppageId == null)
				{
				_saWarningSaJobStoppageId = new TList<SaWarning>();
				}
	
				return _saWarningSaJobStoppageId;
			}
			set { _saWarningSaJobStoppageId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SaJobStoppageEntityData _tmp = new SaJobStoppageEntityData();
						
			_tmp.SaJobStoppageId = this.SaJobStoppageId;
			_tmp.OriginalSaJobStoppageId = this.OriginalSaJobStoppageId;
			
			_tmp.StoppingReason = this.StoppingReason;
			_tmp.StoppingFrom = this.StoppingFrom;
			_tmp.StoppingTo = this.StoppingTo;
			_tmp.StoppingDecisionText = this.StoppingDecisionText;
			_tmp.StoppingRuleText = this.StoppingRuleText;
			_tmp.IsExcuseAcceptedDept = this.IsExcuseAcceptedDept;
			_tmp.IsExcuseAcceptedFaculty = this.IsExcuseAcceptedFaculty;
			_tmp.IsExcuseAcceptedUni = this.IsExcuseAcceptedUni;
			_tmp.DoesAffectStaffState = this.DoesAffectStaffState;
			_tmp.Comments = this.Comments;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.ReturnAffectsStatus = this.ReturnAffectsStatus;
			_tmp.SaJobStartStatmentId = this.SaJobStartStatmentId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.SaJobStartStatmentIdSource != null)
				_tmp.SaJobStartStatmentIdSource = MakeCopyOf(this.SaJobStartStatmentIdSource) as SaJobStartStatment;
			if (this.SaStfMemberIdSource != null)
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource) as SaStfMember;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._saWarningSaJobStoppageId != null)
				_tmp.SaWarningCollection = (TList<SaWarning>) MakeCopyOf(this.SaWarningCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SaJobStoppageEntityData _tmp = new SaJobStoppageEntityData();
						
			_tmp.SaJobStoppageId = this.SaJobStoppageId;
			_tmp.OriginalSaJobStoppageId = this.OriginalSaJobStoppageId;
			
			_tmp.StoppingReason = this.StoppingReason;
			_tmp.StoppingFrom = this.StoppingFrom;
			_tmp.StoppingTo = this.StoppingTo;
			_tmp.StoppingDecisionText = this.StoppingDecisionText;
			_tmp.StoppingRuleText = this.StoppingRuleText;
			_tmp.IsExcuseAcceptedDept = this.IsExcuseAcceptedDept;
			_tmp.IsExcuseAcceptedFaculty = this.IsExcuseAcceptedFaculty;
			_tmp.IsExcuseAcceptedUni = this.IsExcuseAcceptedUni;
			_tmp.DoesAffectStaffState = this.DoesAffectStaffState;
			_tmp.Comments = this.Comments;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.ReturnAffectsStatus = this.ReturnAffectsStatus;
			_tmp.SaJobStartStatmentId = this.SaJobStartStatmentId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.SaJobStartStatmentIdSource != null && existingCopies.Contains(this.SaJobStartStatmentIdSource))
				_tmp.SaJobStartStatmentIdSource = existingCopies[this.SaJobStartStatmentIdSource] as SaJobStartStatment;
			else
				_tmp.SaJobStartStatmentIdSource = MakeCopyOf(this.SaJobStartStatmentIdSource, existingCopies) as SaJobStartStatment;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				_tmp.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.SaWarningCollection = (TList<SaWarning>) MakeCopyOf(this.SaWarningCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaJobStoppageColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SaJobStoppageColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaJobStoppageColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SaJobStoppageColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaJobStoppageColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SaJobStoppageColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SaJobStoppageEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SaJobStoppageEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaJobStoppageColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SaJobStoppageColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SaJobStoppageEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SaJobStoppageEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SaJobStoppageEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SaJobStoppage"/> object.
	/// </remarks>
	public class SaJobStoppageEventArgs : System.EventArgs
	{
		private SaJobStoppageColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SaJobStoppageEventArgs class.
		///</summary>
		public SaJobStoppageEventArgs(SaJobStoppageColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SaJobStoppageEventArgs class.
		///</summary>
		public SaJobStoppageEventArgs(SaJobStoppageColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SaJobStoppageColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SaJobStoppageColumn" />
		public SaJobStoppageColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SaJobStoppage related events.
	///</summary>
	public delegate void SaJobStoppageEventHandler(object sender, SaJobStoppageEventArgs e);
	
	#region SaJobStoppageComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SaJobStoppageComparer : System.Collections.Generic.IComparer<SaJobStoppage>
	{
		SaJobStoppageColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SaJobStoppageComparer"/> class.
        /// </summary>
		public SaJobStoppageComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SaJobStoppageComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SaJobStoppageComparer(SaJobStoppageColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SaJobStoppage"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SaJobStoppage"/> to compare.</param>
        /// <param name="b">The second <c>SaJobStoppage</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SaJobStoppage a, SaJobStoppage b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SaJobStoppage entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SaJobStoppage a, SaJobStoppage b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SaJobStoppageColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SaJobStoppageKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SaJobStoppage"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SaJobStoppageKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SaJobStoppageKey class.
		/// </summary>
		public SaJobStoppageKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SaJobStoppageKey class.
		/// </summary>
		public SaJobStoppageKey(SaJobStoppageBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SaJobStoppageId = entity.SaJobStoppageId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SaJobStoppageKey class.
		/// </summary>
		public SaJobStoppageKey(System.Decimal _saJobStoppageId)
		{
			#region Init Properties

			this.SaJobStoppageId = _saJobStoppageId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SaJobStoppageBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SaJobStoppageBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SaJobStoppageId property
		private System.Decimal _saJobStoppageId;
		
		/// <summary>
		/// Gets or sets the SaJobStoppageId property.
		/// </summary>
		public System.Decimal SaJobStoppageId
		{
			get { return _saJobStoppageId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SaJobStoppageId = value;
				
				_saJobStoppageId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SaJobStoppageId = ( values["SaJobStoppageId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SaJobStoppageId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SaJobStoppageId", SaJobStoppageId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SaJobStoppageId: {0}{1}",
								SaJobStoppageId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SaJobStoppageColumn Enum
	
	/// <summary>
	/// Enumerate the SaJobStoppage columns.
	/// </summary>
	[Serializable]
	public enum SaJobStoppageColumn : int
	{
		/// <summary>
		/// SaJobStoppageId : 
		/// </summary>
		[EnumTextValue("SA_JOB_STOPPAGE_ID")]
		[ColumnEnum("SA_JOB_STOPPAGE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SaJobStoppageId = 1,
		/// <summary>
		/// StoppingReason : 
		/// </summary>
		[EnumTextValue("STOPPING_REASON")]
		[ColumnEnum("STOPPING_REASON", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		StoppingReason = 2,
		/// <summary>
		/// StoppingFrom : 
		/// </summary>
		[EnumTextValue("STOPPING_FROM")]
		[ColumnEnum("STOPPING_FROM", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		StoppingFrom = 3,
		/// <summary>
		/// StoppingTo : 
		/// </summary>
		[EnumTextValue("STOPPING_TO")]
		[ColumnEnum("STOPPING_TO", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		StoppingTo = 4,
		/// <summary>
		/// StoppingDecisionText : 
		/// </summary>
		[EnumTextValue("STOPPING_DECISION_TEXT")]
		[ColumnEnum("STOPPING_DECISION_TEXT", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		StoppingDecisionText = 5,
		/// <summary>
		/// StoppingRuleText : 
		/// </summary>
		[EnumTextValue("STOPPING_RULE_TEXT")]
		[ColumnEnum("STOPPING_RULE_TEXT", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		StoppingRuleText = 6,
		/// <summary>
		/// IsExcuseAcceptedDept : 
		/// </summary>
		[EnumTextValue("IS_EXCUSE_ACCEPTED_DEPT")]
		[ColumnEnum("IS_EXCUSE_ACCEPTED_DEPT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsExcuseAcceptedDept = 7,
		/// <summary>
		/// IsExcuseAcceptedFaculty : 
		/// </summary>
		[EnumTextValue("IS_EXCUSE_ACCEPTED_FACULTY")]
		[ColumnEnum("IS_EXCUSE_ACCEPTED_FACULTY", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsExcuseAcceptedFaculty = 8,
		/// <summary>
		/// IsExcuseAcceptedUni : 
		/// </summary>
		[EnumTextValue("IS_EXCUSE_ACCEPTED_UNI")]
		[ColumnEnum("IS_EXCUSE_ACCEPTED_UNI", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsExcuseAcceptedUni = 9,
		/// <summary>
		/// DoesAffectStaffState : 
		/// </summary>
		[EnumTextValue("DOES_AFFECT_STAFF_STATE")]
		[ColumnEnum("DOES_AFFECT_STAFF_STATE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		DoesAffectStaffState = 10,
		/// <summary>
		/// Comments : 
		/// </summary>
		[EnumTextValue("COMMENTS")]
		[ColumnEnum("COMMENTS", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		Comments = 11,
		/// <summary>
		/// SaStfMemberId : 
		/// </summary>
		[EnumTextValue("SA_STF_MEMBER_ID")]
		[ColumnEnum("SA_STF_MEMBER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaStfMemberId = 12,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsFacultyInfoId = 13,
		/// <summary>
		/// ReturnAffectsStatus : 
		/// </summary>
		[EnumTextValue("RETURN_AFFECTS_STATUS")]
		[ColumnEnum("RETURN_AFFECTS_STATUS", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ReturnAffectsStatus = 14,
		/// <summary>
		/// SaJobStartStatmentId : 
		/// </summary>
		[EnumTextValue("SA_JOB_START_STATMENT_ID")]
		[ColumnEnum("SA_JOB_START_STATMENT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SaJobStartStatmentId = 15
	}//End enum

	#endregion SaJobStoppageColumn Enum

} // end namespace
