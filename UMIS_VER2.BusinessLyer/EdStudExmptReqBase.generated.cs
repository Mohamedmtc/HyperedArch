
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdStudExmptReq.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_STUD_EXMPT_REQ' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdStudExmptReqBase : EntityBase, IEdStudExmptReq, IEntityId<EdStudExmptReqKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdStudExmptReqEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdStudExmptReqEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdStudExmptReqEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdStudExmptReq> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudExmptReqEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudExmptReqEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdStudExmptReqBase"/> instance.
		///</summary>
		public EdStudExmptReqBase()
		{
			this.entityData = new EdStudExmptReqEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdStudExmptReqBase"/> instance.
		///</summary>
		///<param name="_edStudExmptReqId">طلبات الاعفاء</param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_edStudId"></param>
		///<param name="_gsCodeReqStatusId">حالة الطلب</param>
		///<param name="_reqDate">last approve or cancel date</param>
		///<param name="_notes"></param>
		///<param name="_edCdeExmptId">نوع الاعفاء:credittransferRPL-crosscredit-trainingcourse</param>
		///<param name="_deptApproveDt">تاريخ مجلس القسم (Program)</param>
		///<param name="_facApproveDt">تاريخ مجلس المدرسة  (School)</param>
		///<param name="_univApproveDt">تاريخ مجلس التعليم (Education Council)</param>
		///<param name="_approveFlg">مؤشر اعتماد الطلب</param>
		///<param name="_exmptApproveDt">اعتماد طلب اعفاء</param>
		///<param name="_exmptApprvUsrId">اعتماد طلب اعفاء</param>
		public EdStudExmptReqBase(System.Decimal _edStudExmptReqId, System.Decimal _edAcadYearId, 
			System.Decimal _edCodeSemesterId, System.Decimal _edStudId, System.Decimal _gsCodeReqStatusId, 
			System.DateTime _reqDate, System.String _notes, System.Int32 _edCdeExmptId, 
			System.DateTime? _deptApproveDt, System.DateTime? _facApproveDt, System.DateTime? _univApproveDt, 
			System.Decimal _approveFlg, System.DateTime? _exmptApproveDt, System.Decimal? _exmptApprvUsrId)
		{
			this.entityData = new EdStudExmptReqEntityData();
			this.backupData = null;

			this.EdStudExmptReqId = _edStudExmptReqId;
			this.EdAcadYearId = _edAcadYearId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.EdStudId = _edStudId;
			this.GsCodeReqStatusId = _gsCodeReqStatusId;
			this.ReqDate = _reqDate;
			this.Notes = _notes;
			this.EdCdeExmptId = _edCdeExmptId;
			this.DeptApproveDt = _deptApproveDt;
			this.FacApproveDt = _facApproveDt;
			this.UnivApproveDt = _univApproveDt;
			this.ApproveFlg = _approveFlg;
			this.ExmptApproveDt = _exmptApproveDt;
			this.ExmptApprvUsrId = _exmptApprvUsrId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdStudExmptReq"/> instance.
		///</summary>
		///<param name="_edStudExmptReqId">طلبات الاعفاء</param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_edStudId"></param>
		///<param name="_gsCodeReqStatusId">حالة الطلب</param>
		///<param name="_reqDate">last approve or cancel date</param>
		///<param name="_notes"></param>
		///<param name="_edCdeExmptId">نوع الاعفاء:credittransferRPL-crosscredit-trainingcourse</param>
		///<param name="_deptApproveDt">تاريخ مجلس القسم (Program)</param>
		///<param name="_facApproveDt">تاريخ مجلس المدرسة  (School)</param>
		///<param name="_univApproveDt">تاريخ مجلس التعليم (Education Council)</param>
		///<param name="_approveFlg">مؤشر اعتماد الطلب</param>
		///<param name="_exmptApproveDt">اعتماد طلب اعفاء</param>
		///<param name="_exmptApprvUsrId">اعتماد طلب اعفاء</param>
		public static EdStudExmptReq CreateEdStudExmptReq(System.Decimal _edStudExmptReqId, System.Decimal _edAcadYearId, 
			System.Decimal _edCodeSemesterId, System.Decimal _edStudId, System.Decimal _gsCodeReqStatusId, 
			System.DateTime _reqDate, System.String _notes, System.Int32 _edCdeExmptId, 
			System.DateTime? _deptApproveDt, System.DateTime? _facApproveDt, System.DateTime? _univApproveDt, 
			System.Decimal _approveFlg, System.DateTime? _exmptApproveDt, System.Decimal? _exmptApprvUsrId)
		{
			EdStudExmptReq newEdStudExmptReq = new EdStudExmptReq();
			newEdStudExmptReq.EdStudExmptReqId = _edStudExmptReqId;
			newEdStudExmptReq.EdAcadYearId = _edAcadYearId;
			newEdStudExmptReq.EdCodeSemesterId = _edCodeSemesterId;
			newEdStudExmptReq.EdStudId = _edStudId;
			newEdStudExmptReq.GsCodeReqStatusId = _gsCodeReqStatusId;
			newEdStudExmptReq.ReqDate = _reqDate;
			newEdStudExmptReq.Notes = _notes;
			newEdStudExmptReq.EdCdeExmptId = _edCdeExmptId;
			newEdStudExmptReq.DeptApproveDt = _deptApproveDt;
			newEdStudExmptReq.FacApproveDt = _facApproveDt;
			newEdStudExmptReq.UnivApproveDt = _univApproveDt;
			newEdStudExmptReq.ApproveFlg = _approveFlg;
			newEdStudExmptReq.ExmptApproveDt = _exmptApproveDt;
			newEdStudExmptReq.ExmptApprvUsrId = _exmptApprvUsrId;
			return newEdStudExmptReq;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdStudExmptReqId property. 
		///		طلبات الاعفاء
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"طلبات الاعفاء"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdStudExmptReqId
		{
			get
			{
				return this.entityData.EdStudExmptReqId; 
			}
			
			set
			{
				if (this.entityData.EdStudExmptReqId == value)
					return;
					
				OnColumnChanging(EdStudExmptReqColumn.EdStudExmptReqId, this.entityData.EdStudExmptReqId);
				this.entityData.EdStudExmptReqId = value;
				this.EntityId.EdStudExmptReqId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudExmptReqColumn.EdStudExmptReqId, this.entityData.EdStudExmptReqId);
				OnPropertyChanged("EdStudExmptReqId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_STUD_EXMPT_REQ_ID property.
		///		طلبات الاعفاء
		/// </summary>
		/// <remarks>This is the original value of the ED_STUD_EXMPT_REQ_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdStudExmptReqId
		{
			get { return this.entityData.OriginalEdStudExmptReqId; }
			set { this.entityData.OriginalEdStudExmptReqId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(EdStudExmptReqColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudExmptReqColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(EdStudExmptReqColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudExmptReqColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(EdStudExmptReqColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudExmptReqColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeReqStatusId property. 
		///		حالة الطلب
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"حالة الطلب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsCodeReqStatusId
		{
			get
			{
				return this.entityData.GsCodeReqStatusId; 
			}
			
			set
			{
				if (this.entityData.GsCodeReqStatusId == value)
					return;
					
				OnColumnChanging(EdStudExmptReqColumn.GsCodeReqStatusId, this.entityData.GsCodeReqStatusId);
				this.entityData.GsCodeReqStatusId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudExmptReqColumn.GsCodeReqStatusId, this.entityData.GsCodeReqStatusId);
				OnPropertyChanged("GsCodeReqStatusId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReqDate property. 
		///		last approve or cancel date
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"last approve or cancel date"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ReqDate
		{
			get
			{
				return this.entityData.ReqDate; 
			}
			
			set
			{
				if (this.entityData.ReqDate == value)
					return;
					
				OnColumnChanging(EdStudExmptReqColumn.ReqDate, this.entityData.ReqDate);
				this.entityData.ReqDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudExmptReqColumn.ReqDate, this.entityData.ReqDate);
				OnPropertyChanged("ReqDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(EdStudExmptReqColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudExmptReqColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCdeExmptId property. 
		///		نوع الاعفاء:credittransferRPL-crosscredit-trainingcourse
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"نوع الاعفاء:credittransferRPL-crosscredit-trainingcourse"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 EdCdeExmptId
		{
			get
			{
				return this.entityData.EdCdeExmptId; 
			}
			
			set
			{
				if (this.entityData.EdCdeExmptId == value)
					return;
					
				OnColumnChanging(EdStudExmptReqColumn.EdCdeExmptId, this.entityData.EdCdeExmptId);
				this.entityData.EdCdeExmptId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudExmptReqColumn.EdCdeExmptId, this.entityData.EdCdeExmptId);
				OnPropertyChanged("EdCdeExmptId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DeptApproveDt property. 
		///		تاريخ مجلس القسم (Program)
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsDeptApproveDtNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ مجلس القسم (Program)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DeptApproveDt
		{
			get
			{
				return this.entityData.DeptApproveDt; 
			}
			
			set
			{
				if (this.entityData.DeptApproveDt == value)
					return;
					
				OnColumnChanging(EdStudExmptReqColumn.DeptApproveDt, this.entityData.DeptApproveDt);
				this.entityData.DeptApproveDt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudExmptReqColumn.DeptApproveDt, this.entityData.DeptApproveDt);
				OnPropertyChanged("DeptApproveDt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FacApproveDt property. 
		///		تاريخ مجلس المدرسة  (School)
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsFacApproveDtNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ مجلس المدرسة  (School)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? FacApproveDt
		{
			get
			{
				return this.entityData.FacApproveDt; 
			}
			
			set
			{
				if (this.entityData.FacApproveDt == value)
					return;
					
				OnColumnChanging(EdStudExmptReqColumn.FacApproveDt, this.entityData.FacApproveDt);
				this.entityData.FacApproveDt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudExmptReqColumn.FacApproveDt, this.entityData.FacApproveDt);
				OnPropertyChanged("FacApproveDt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UnivApproveDt property. 
		///		تاريخ مجلس التعليم (Education Council)
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsUnivApproveDtNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ مجلس التعليم (Education Council)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UnivApproveDt
		{
			get
			{
				return this.entityData.UnivApproveDt; 
			}
			
			set
			{
				if (this.entityData.UnivApproveDt == value)
					return;
					
				OnColumnChanging(EdStudExmptReqColumn.UnivApproveDt, this.entityData.UnivApproveDt);
				this.entityData.UnivApproveDt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudExmptReqColumn.UnivApproveDt, this.entityData.UnivApproveDt);
				OnPropertyChanged("UnivApproveDt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApproveFlg property. 
		///		مؤشر اعتماد الطلب
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"مؤشر اعتماد الطلب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ApproveFlg
		{
			get
			{
				return this.entityData.ApproveFlg; 
			}
			
			set
			{
				if (this.entityData.ApproveFlg == value)
					return;
					
				OnColumnChanging(EdStudExmptReqColumn.ApproveFlg, this.entityData.ApproveFlg);
				this.entityData.ApproveFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudExmptReqColumn.ApproveFlg, this.entityData.ApproveFlg);
				OnPropertyChanged("ApproveFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExmptApproveDt property. 
		///		اعتماد طلب اعفاء
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsExmptApproveDtNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"اعتماد طلب اعفاء"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ExmptApproveDt
		{
			get
			{
				return this.entityData.ExmptApproveDt; 
			}
			
			set
			{
				if (this.entityData.ExmptApproveDt == value)
					return;
					
				OnColumnChanging(EdStudExmptReqColumn.ExmptApproveDt, this.entityData.ExmptApproveDt);
				this.entityData.ExmptApproveDt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudExmptReqColumn.ExmptApproveDt, this.entityData.ExmptApproveDt);
				OnPropertyChanged("ExmptApproveDt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExmptApprvUsrId property. 
		///		اعتماد طلب اعفاء
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsExmptApprvUsrIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"اعتماد طلب اعفاء"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ExmptApprvUsrId
		{
			get
			{
				return this.entityData.ExmptApprvUsrId; 
			}
			
			set
			{
				if (this.entityData.ExmptApprvUsrId == value)
					return;
					
				OnColumnChanging(EdStudExmptReqColumn.ExmptApprvUsrId, this.entityData.ExmptApprvUsrId);
				this.entityData.ExmptApprvUsrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudExmptReqColumn.ExmptApprvUsrId, this.entityData.ExmptApprvUsrId);
				OnPropertyChanged("ExmptApprvUsrId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeExmpt"/>.
		/// </summary>
		/// <value>The source EdCdeExmpt for EdCdeExmptId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCdeExmpt EdCdeExmptIdSource
      	{
            get { return entityData.EdCdeExmptIdSource; }
            set { entityData.EdCdeExmptIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeReqStatus"/>.
		/// </summary>
		/// <value>The source GsCodeReqStatus for GsCodeReqStatusId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeReqStatus GsCodeReqStatusIdSource
      	{
            get { return entityData.GsCodeReqStatusIdSource; }
            set { entityData.GsCodeReqStatusIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EdStudExmptReqAttch objects
		///	which are related to this object through the relation FK_ED_STUD_EXMPT_REQ_ATTCH_ED_STUD_EXMPT_REQ
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudExmptReqAttch> EdStudExmptReqAttchCollection
		{
			get { return entityData.EdStudExmptReqAttchCollection; }
			set { entityData.EdStudExmptReqAttchCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudExmptCrsFrom objects
		///	which are related to this object through the relation FK_ED_STUD_EXMPT_CRS_FROM_ED_STUD_EXMPT_REQ
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudExmptCrsFrom> EdStudExmptCrsFromCollection
		{
			get { return entityData.EdStudExmptCrsFromCollection; }
			set { entityData.EdStudExmptCrsFromCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudExmptCrsTo objects
		///	which are related to this object through the relation FK_ED_STUD_EXMPT_CRS_TO_ED_STUD_EXMPT_REQ
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudExmptCrsTo> EdStudExmptCrsToCollection
		{
			get { return entityData.EdStudExmptCrsToCollection; }
			set { entityData.EdStudExmptCrsToCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 250));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_STUD_EXMPT_REQ"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_STUD_EXMPT_REQ_ID", "ED_ACAD_YEAR_ID", "ED_CODE_SEMESTER_ID", "ED_STUD_ID", "GS_CODE_REQ_STATUS_ID", "REQ_DATE", "NOTES", "ED_CDE_EXMPT_ID", "DEPT_APPROVE_DT", "FAC_APPROVE_DT", "UNIV_APPROVE_DT", "APPROVE_FLG", "EXMPT_APPROVE_DT", "EXMPT_APPRV_USR_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdStudExmptReqEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdStudExmptReq) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdStudExmptReq>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdStudExmptReq);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdStudExmptReq Entity 
		///</summary>
		protected virtual EdStudExmptReq Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdStudExmptReq copy = new EdStudExmptReq();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdStudExmptReqId = this.EdStudExmptReqId;
					copy.OriginalEdStudExmptReqId = this.OriginalEdStudExmptReqId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.EdStudId = this.EdStudId;
				copy.GsCodeReqStatusId = this.GsCodeReqStatusId;
				copy.ReqDate = this.ReqDate;
				copy.Notes = this.Notes;
				copy.EdCdeExmptId = this.EdCdeExmptId;
				copy.DeptApproveDt = this.DeptApproveDt;
				copy.FacApproveDt = this.FacApproveDt;
				copy.UnivApproveDt = this.UnivApproveDt;
				copy.ApproveFlg = this.ApproveFlg;
				copy.ExmptApproveDt = this.ExmptApproveDt;
				copy.ExmptApprvUsrId = this.ExmptApprvUsrId;
			
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCdeExmptIdSource != null && existingCopies.Contains(this.EdCdeExmptIdSource))
				copy.EdCdeExmptIdSource = existingCopies[this.EdCdeExmptIdSource] as EdCdeExmpt;
			else
				copy.EdCdeExmptIdSource = MakeCopyOf(this.EdCdeExmptIdSource, existingCopies) as EdCdeExmpt;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.GsCodeReqStatusIdSource != null && existingCopies.Contains(this.GsCodeReqStatusIdSource))
				copy.GsCodeReqStatusIdSource = existingCopies[this.GsCodeReqStatusIdSource] as GsCodeReqStatus;
			else
				copy.GsCodeReqStatusIdSource = MakeCopyOf(this.GsCodeReqStatusIdSource, existingCopies) as GsCodeReqStatus;
		
			//deep copy nested objects
			copy.EdStudExmptReqAttchCollection = (TList<EdStudExmptReqAttch>) MakeCopyOf(this.EdStudExmptReqAttchCollection, existingCopies); 
			copy.EdStudExmptCrsFromCollection = (TList<EdStudExmptCrsFrom>) MakeCopyOf(this.EdStudExmptCrsFromCollection, existingCopies); 
			copy.EdStudExmptCrsToCollection = (TList<EdStudExmptCrsTo>) MakeCopyOf(this.EdStudExmptCrsToCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdStudExmptReq Entity 
		///</summary>
		public virtual EdStudExmptReq Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdStudExmptReq Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdStudExmptReq DeepCopy()
		{
			return EntityHelper.Clone<EdStudExmptReq>(this as EdStudExmptReq);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdStudExmptReqEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdStudExmptReqEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdStudExmptReqEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdStudExmptReqColumn column)
		{
			switch(column)
			{
					case EdStudExmptReqColumn.EdStudExmptReqId:
					return entityData.EdStudExmptReqId != _originalData.EdStudExmptReqId;
					case EdStudExmptReqColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case EdStudExmptReqColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case EdStudExmptReqColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case EdStudExmptReqColumn.GsCodeReqStatusId:
					return entityData.GsCodeReqStatusId != _originalData.GsCodeReqStatusId;
					case EdStudExmptReqColumn.ReqDate:
					return entityData.ReqDate != _originalData.ReqDate;
					case EdStudExmptReqColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case EdStudExmptReqColumn.EdCdeExmptId:
					return entityData.EdCdeExmptId != _originalData.EdCdeExmptId;
					case EdStudExmptReqColumn.DeptApproveDt:
					return entityData.DeptApproveDt != _originalData.DeptApproveDt;
					case EdStudExmptReqColumn.FacApproveDt:
					return entityData.FacApproveDt != _originalData.FacApproveDt;
					case EdStudExmptReqColumn.UnivApproveDt:
					return entityData.UnivApproveDt != _originalData.UnivApproveDt;
					case EdStudExmptReqColumn.ApproveFlg:
					return entityData.ApproveFlg != _originalData.ApproveFlg;
					case EdStudExmptReqColumn.ExmptApproveDt:
					return entityData.ExmptApproveDt != _originalData.ExmptApproveDt;
					case EdStudExmptReqColumn.ExmptApprvUsrId:
					return entityData.ExmptApprvUsrId != _originalData.ExmptApprvUsrId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdStudExmptReqColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdStudExmptReqId != _originalData.EdStudExmptReqId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.GsCodeReqStatusId != _originalData.GsCodeReqStatusId;
			result = result || entityData.ReqDate != _originalData.ReqDate;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.EdCdeExmptId != _originalData.EdCdeExmptId;
			result = result || entityData.DeptApproveDt != _originalData.DeptApproveDt;
			result = result || entityData.FacApproveDt != _originalData.FacApproveDt;
			result = result || entityData.UnivApproveDt != _originalData.UnivApproveDt;
			result = result || entityData.ApproveFlg != _originalData.ApproveFlg;
			result = result || entityData.ExmptApproveDt != _originalData.ExmptApproveDt;
			result = result || entityData.ExmptApprvUsrId != _originalData.ExmptApprvUsrId;
			return result;
		}	
		
		///<summary>
		///  Returns a EdStudExmptReq Entity with the original data.
		///</summary>
		public EdStudExmptReq GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdStudExmptReq(
				_originalData.EdStudExmptReqId,
				_originalData.EdAcadYearId,
				_originalData.EdCodeSemesterId,
				_originalData.EdStudId,
				_originalData.GsCodeReqStatusId,
				_originalData.ReqDate,
				_originalData.Notes,
				_originalData.EdCdeExmptId,
				_originalData.DeptApproveDt,
				_originalData.FacApproveDt,
				_originalData.UnivApproveDt,
				_originalData.ApproveFlg,
				_originalData.ExmptApproveDt,
				_originalData.ExmptApprvUsrId
				);
				
			return (EdStudExmptReq)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdStudExmptReqBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdStudExmptReqBase)
				return ValueEquals(this, (EdStudExmptReqBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdStudExmptReqBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdStudExmptReqId.GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					this.EdCodeSemesterId.GetHashCode() ^ 
					this.EdStudId.GetHashCode() ^ 
					this.GsCodeReqStatusId.GetHashCode() ^ 
					this.ReqDate.GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					this.EdCdeExmptId.GetHashCode() ^ 
					((this.DeptApproveDt == null) ? string.Empty : this.DeptApproveDt.ToString()).GetHashCode() ^ 
					((this.FacApproveDt == null) ? string.Empty : this.FacApproveDt.ToString()).GetHashCode() ^ 
					((this.UnivApproveDt == null) ? string.Empty : this.UnivApproveDt.ToString()).GetHashCode() ^ 
					this.ApproveFlg.GetHashCode() ^ 
					((this.ExmptApproveDt == null) ? string.Empty : this.ExmptApproveDt.ToString()).GetHashCode() ^ 
					((this.ExmptApprvUsrId == null) ? string.Empty : this.ExmptApprvUsrId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdStudExmptReqBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdStudExmptReqBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdStudExmptReqBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdStudExmptReqBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdStudExmptReqBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdStudExmptReqBase Object1, EdStudExmptReqBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdStudExmptReqId != Object2.EdStudExmptReqId)
				equal = false;
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
				equal = false;
			if (Object1.EdStudId != Object2.EdStudId)
				equal = false;
			if (Object1.GsCodeReqStatusId != Object2.GsCodeReqStatusId)
				equal = false;
			if (Object1.ReqDate != Object2.ReqDate)
				equal = false;
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if (Object1.EdCdeExmptId != Object2.EdCdeExmptId)
				equal = false;
			if ( Object1.DeptApproveDt != null && Object2.DeptApproveDt != null )
			{
				if (Object1.DeptApproveDt != Object2.DeptApproveDt)
					equal = false;
			}
			else if (Object1.DeptApproveDt == null ^ Object2.DeptApproveDt == null )
			{
				equal = false;
			}
			if ( Object1.FacApproveDt != null && Object2.FacApproveDt != null )
			{
				if (Object1.FacApproveDt != Object2.FacApproveDt)
					equal = false;
			}
			else if (Object1.FacApproveDt == null ^ Object2.FacApproveDt == null )
			{
				equal = false;
			}
			if ( Object1.UnivApproveDt != null && Object2.UnivApproveDt != null )
			{
				if (Object1.UnivApproveDt != Object2.UnivApproveDt)
					equal = false;
			}
			else if (Object1.UnivApproveDt == null ^ Object2.UnivApproveDt == null )
			{
				equal = false;
			}
			if (Object1.ApproveFlg != Object2.ApproveFlg)
				equal = false;
			if ( Object1.ExmptApproveDt != null && Object2.ExmptApproveDt != null )
			{
				if (Object1.ExmptApproveDt != Object2.ExmptApproveDt)
					equal = false;
			}
			else if (Object1.ExmptApproveDt == null ^ Object2.ExmptApproveDt == null )
			{
				equal = false;
			}
			if ( Object1.ExmptApprvUsrId != null && Object2.ExmptApprvUsrId != null )
			{
				if (Object1.ExmptApprvUsrId != Object2.ExmptApprvUsrId)
					equal = false;
			}
			else if (Object1.ExmptApprvUsrId == null ^ Object2.ExmptApprvUsrId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdStudExmptReqBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdStudExmptReqComparer GetComparer()
        {
            return new EdStudExmptReqComparer();
        }
        */

        // Comparer delegates back to EdStudExmptReq
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdStudExmptReq rhs, EdStudExmptReqColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdStudExmptReqColumn.EdStudExmptReqId:
            		return this.EdStudExmptReqId.CompareTo(rhs.EdStudExmptReqId);
            		
            		                 
            	
            	
            	case EdStudExmptReqColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case EdStudExmptReqColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.CompareTo(rhs.EdCodeSemesterId);
            		
            		                 
            	
            	
            	case EdStudExmptReqColumn.EdStudId:
            		return this.EdStudId.CompareTo(rhs.EdStudId);
            		
            		                 
            	
            	
            	case EdStudExmptReqColumn.GsCodeReqStatusId:
            		return this.GsCodeReqStatusId.CompareTo(rhs.GsCodeReqStatusId);
            		
            		                 
            	
            	
            	case EdStudExmptReqColumn.ReqDate:
            		return this.ReqDate.CompareTo(rhs.ReqDate);
            		
            		                 
            	
            	
            	case EdStudExmptReqColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case EdStudExmptReqColumn.EdCdeExmptId:
            		return this.EdCdeExmptId.CompareTo(rhs.EdCdeExmptId);
            		
            		                 
            	
            	
            	case EdStudExmptReqColumn.DeptApproveDt:
            		return this.DeptApproveDt.Value.CompareTo(rhs.DeptApproveDt.Value);
            		
            		                 
            	
            	
            	case EdStudExmptReqColumn.FacApproveDt:
            		return this.FacApproveDt.Value.CompareTo(rhs.FacApproveDt.Value);
            		
            		                 
            	
            	
            	case EdStudExmptReqColumn.UnivApproveDt:
            		return this.UnivApproveDt.Value.CompareTo(rhs.UnivApproveDt.Value);
            		
            		                 
            	
            	
            	case EdStudExmptReqColumn.ApproveFlg:
            		return this.ApproveFlg.CompareTo(rhs.ApproveFlg);
            		
            		                 
            	
            	
            	case EdStudExmptReqColumn.ExmptApproveDt:
            		return this.ExmptApproveDt.Value.CompareTo(rhs.ExmptApproveDt.Value);
            		
            		                 
            	
            	
            	case EdStudExmptReqColumn.ExmptApprvUsrId:
            		return this.ExmptApprvUsrId.Value.CompareTo(rhs.ExmptApprvUsrId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdStudExmptReqKey> Members
		
		// member variable for the EntityId property
		private EdStudExmptReqKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdStudExmptReqKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdStudExmptReqKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdStudExmptReq")
					.Append("|").Append( this.EdStudExmptReqId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{15}{14}- EdStudExmptReqId: {0}{14}- EdAcadYearId: {1}{14}- EdCodeSemesterId: {2}{14}- EdStudId: {3}{14}- GsCodeReqStatusId: {4}{14}- ReqDate: {5}{14}- Notes: {6}{14}- EdCdeExmptId: {7}{14}- DeptApproveDt: {8}{14}- FacApproveDt: {9}{14}- UnivApproveDt: {10}{14}- ApproveFlg: {11}{14}- ExmptApproveDt: {12}{14}- ExmptApprvUsrId: {13}{14}{16}", 
				this.EdStudExmptReqId,
				this.EdAcadYearId,
				this.EdCodeSemesterId,
				this.EdStudId,
				this.GsCodeReqStatusId,
				this.ReqDate,
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				this.EdCdeExmptId,
				(this.DeptApproveDt == null) ? string.Empty : this.DeptApproveDt.ToString(),
				(this.FacApproveDt == null) ? string.Empty : this.FacApproveDt.ToString(),
				(this.UnivApproveDt == null) ? string.Empty : this.UnivApproveDt.ToString(),
				this.ApproveFlg,
				(this.ExmptApproveDt == null) ? string.Empty : this.ExmptApproveDt.ToString(),
				(this.ExmptApprvUsrId == null) ? string.Empty : this.ExmptApprvUsrId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_STUD_EXMPT_REQ' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdStudExmptReqEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_STUD_EXMPT_REQ_ID : طلبات الاعفاء
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_STUD_EXMPT_REQ"</remarks>
		public System.Decimal EdStudExmptReqId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdStudExmptReqId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : 
		/// </summary>
		public System.Decimal		  EdCodeSemesterId = 0.0m;
		
		/// <summary>
		/// ED_STUD_ID : 
		/// </summary>
		public System.Decimal		  EdStudId = 0.0m;
		
		/// <summary>
		/// GS_CODE_REQ_STATUS_ID : حالة الطلب
		/// </summary>
		public System.Decimal		  GsCodeReqStatusId = 0.0m;
		
		/// <summary>
		/// REQ_DATE : last approve or cancel date
		/// </summary>
		public System.DateTime		  ReqDate = DateTime.MinValue;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// ED_CDE_EXMPT_ID : نوع الاعفاء:credittransferRPL-crosscredit-trainingcourse
		/// </summary>
		public System.Int32		  EdCdeExmptId = (int)0;
		
		/// <summary>
		/// DEPT_APPROVE_DT : تاريخ مجلس القسم (Program)
		/// </summary>
		public System.DateTime?		  DeptApproveDt = null;
		
		/// <summary>
		/// FAC_APPROVE_DT : تاريخ مجلس المدرسة  (School)
		/// </summary>
		public System.DateTime?		  FacApproveDt = null;
		
		/// <summary>
		/// UNIV_APPROVE_DT : تاريخ مجلس التعليم (Education Council)
		/// </summary>
		public System.DateTime?		  UnivApproveDt = null;
		
		/// <summary>
		/// APPROVE_FLG : مؤشر اعتماد الطلب
		/// </summary>
		public System.Decimal		  ApproveFlg = 0.0m;
		
		/// <summary>
		/// EXMPT_APPROVE_DT : اعتماد طلب اعفاء
		/// </summary>
		public System.DateTime?		  ExmptApproveDt = null;
		
		/// <summary>
		/// EXMPT_APPRV_USR_ID : اعتماد طلب اعفاء
		/// </summary>
		public System.Decimal?		  ExmptApprvUsrId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCdeExmpt _edCdeExmptIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeExmpt"/>.
		/// </summary>
		/// <value>The source EdCdeExmpt for EdCdeExmptId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCdeExmpt EdCdeExmptIdSource
      	{
            get { return this._edCdeExmptIdSource; }
            set { this._edCdeExmptIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		private GsCodeReqStatus _gsCodeReqStatusIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeReqStatus"/>.
		/// </summary>
		/// <value>The source GsCodeReqStatus for GsCodeReqStatusId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeReqStatus GsCodeReqStatusIdSource
      	{
            get { return this._gsCodeReqStatusIdSource; }
            set { this._gsCodeReqStatusIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EdStudExmptReqAttchCollection
		
		private TList<EdStudExmptReqAttch> _edStudExmptReqAttchEdStudExmptReqId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudExmptReqAttchEdStudExmptReqId
		/// </summary>
		
		public TList<EdStudExmptReqAttch> EdStudExmptReqAttchCollection
		{
			get
			{
				if (_edStudExmptReqAttchEdStudExmptReqId == null)
				{
				_edStudExmptReqAttchEdStudExmptReqId = new TList<EdStudExmptReqAttch>();
				}
	
				return _edStudExmptReqAttchEdStudExmptReqId;
			}
			set { _edStudExmptReqAttchEdStudExmptReqId = value; }
		}
		
		#endregion

		#region EdStudExmptCrsFromCollection
		
		private TList<EdStudExmptCrsFrom> _edStudExmptCrsFromEdStudExmptReqId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudExmptCrsFromEdStudExmptReqId
		/// </summary>
		
		public TList<EdStudExmptCrsFrom> EdStudExmptCrsFromCollection
		{
			get
			{
				if (_edStudExmptCrsFromEdStudExmptReqId == null)
				{
				_edStudExmptCrsFromEdStudExmptReqId = new TList<EdStudExmptCrsFrom>();
				}
	
				return _edStudExmptCrsFromEdStudExmptReqId;
			}
			set { _edStudExmptCrsFromEdStudExmptReqId = value; }
		}
		
		#endregion

		#region EdStudExmptCrsToCollection
		
		private TList<EdStudExmptCrsTo> _edStudExmptCrsToEdStudExmptReqId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudExmptCrsToEdStudExmptReqId
		/// </summary>
		
		public TList<EdStudExmptCrsTo> EdStudExmptCrsToCollection
		{
			get
			{
				if (_edStudExmptCrsToEdStudExmptReqId == null)
				{
				_edStudExmptCrsToEdStudExmptReqId = new TList<EdStudExmptCrsTo>();
				}
	
				return _edStudExmptCrsToEdStudExmptReqId;
			}
			set { _edStudExmptCrsToEdStudExmptReqId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdStudExmptReqEntityData _tmp = new EdStudExmptReqEntityData();
						
			_tmp.EdStudExmptReqId = this.EdStudExmptReqId;
			_tmp.OriginalEdStudExmptReqId = this.OriginalEdStudExmptReqId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.GsCodeReqStatusId = this.GsCodeReqStatusId;
			_tmp.ReqDate = this.ReqDate;
			_tmp.Notes = this.Notes;
			_tmp.EdCdeExmptId = this.EdCdeExmptId;
			_tmp.DeptApproveDt = this.DeptApproveDt;
			_tmp.FacApproveDt = this.FacApproveDt;
			_tmp.UnivApproveDt = this.UnivApproveDt;
			_tmp.ApproveFlg = this.ApproveFlg;
			_tmp.ExmptApproveDt = this.ExmptApproveDt;
			_tmp.ExmptApprvUsrId = this.ExmptApprvUsrId;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCdeExmptIdSource != null)
				_tmp.EdCdeExmptIdSource = MakeCopyOf(this.EdCdeExmptIdSource) as EdCdeExmpt;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			if (this.GsCodeReqStatusIdSource != null)
				_tmp.GsCodeReqStatusIdSource = MakeCopyOf(this.GsCodeReqStatusIdSource) as GsCodeReqStatus;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._edStudExmptReqAttchEdStudExmptReqId != null)
				_tmp.EdStudExmptReqAttchCollection = (TList<EdStudExmptReqAttch>) MakeCopyOf(this.EdStudExmptReqAttchCollection); 
			if (this._edStudExmptCrsFromEdStudExmptReqId != null)
				_tmp.EdStudExmptCrsFromCollection = (TList<EdStudExmptCrsFrom>) MakeCopyOf(this.EdStudExmptCrsFromCollection); 
			if (this._edStudExmptCrsToEdStudExmptReqId != null)
				_tmp.EdStudExmptCrsToCollection = (TList<EdStudExmptCrsTo>) MakeCopyOf(this.EdStudExmptCrsToCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdStudExmptReqEntityData _tmp = new EdStudExmptReqEntityData();
						
			_tmp.EdStudExmptReqId = this.EdStudExmptReqId;
			_tmp.OriginalEdStudExmptReqId = this.OriginalEdStudExmptReqId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.GsCodeReqStatusId = this.GsCodeReqStatusId;
			_tmp.ReqDate = this.ReqDate;
			_tmp.Notes = this.Notes;
			_tmp.EdCdeExmptId = this.EdCdeExmptId;
			_tmp.DeptApproveDt = this.DeptApproveDt;
			_tmp.FacApproveDt = this.FacApproveDt;
			_tmp.UnivApproveDt = this.UnivApproveDt;
			_tmp.ApproveFlg = this.ApproveFlg;
			_tmp.ExmptApproveDt = this.ExmptApproveDt;
			_tmp.ExmptApprvUsrId = this.ExmptApprvUsrId;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCdeExmptIdSource != null && existingCopies.Contains(this.EdCdeExmptIdSource))
				_tmp.EdCdeExmptIdSource = existingCopies[this.EdCdeExmptIdSource] as EdCdeExmpt;
			else
				_tmp.EdCdeExmptIdSource = MakeCopyOf(this.EdCdeExmptIdSource, existingCopies) as EdCdeExmpt;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.GsCodeReqStatusIdSource != null && existingCopies.Contains(this.GsCodeReqStatusIdSource))
				_tmp.GsCodeReqStatusIdSource = existingCopies[this.GsCodeReqStatusIdSource] as GsCodeReqStatus;
			else
				_tmp.GsCodeReqStatusIdSource = MakeCopyOf(this.GsCodeReqStatusIdSource, existingCopies) as GsCodeReqStatus;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EdStudExmptReqAttchCollection = (TList<EdStudExmptReqAttch>) MakeCopyOf(this.EdStudExmptReqAttchCollection, existingCopies); 
			_tmp.EdStudExmptCrsFromCollection = (TList<EdStudExmptCrsFrom>) MakeCopyOf(this.EdStudExmptCrsFromCollection, existingCopies); 
			_tmp.EdStudExmptCrsToCollection = (TList<EdStudExmptCrsTo>) MakeCopyOf(this.EdStudExmptCrsToCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudExmptReqColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdStudExmptReqColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudExmptReqColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdStudExmptReqColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudExmptReqColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdStudExmptReqColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdStudExmptReqEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdStudExmptReqEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudExmptReqColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdStudExmptReqColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdStudExmptReqEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdStudExmptReqEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdStudExmptReqEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdStudExmptReq"/> object.
	/// </remarks>
	public class EdStudExmptReqEventArgs : System.EventArgs
	{
		private EdStudExmptReqColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdStudExmptReqEventArgs class.
		///</summary>
		public EdStudExmptReqEventArgs(EdStudExmptReqColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdStudExmptReqEventArgs class.
		///</summary>
		public EdStudExmptReqEventArgs(EdStudExmptReqColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdStudExmptReqColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdStudExmptReqColumn" />
		public EdStudExmptReqColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdStudExmptReq related events.
	///</summary>
	public delegate void EdStudExmptReqEventHandler(object sender, EdStudExmptReqEventArgs e);
	
	#region EdStudExmptReqComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdStudExmptReqComparer : System.Collections.Generic.IComparer<EdStudExmptReq>
	{
		EdStudExmptReqColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudExmptReqComparer"/> class.
        /// </summary>
		public EdStudExmptReqComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudExmptReqComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdStudExmptReqComparer(EdStudExmptReqColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdStudExmptReq"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdStudExmptReq"/> to compare.</param>
        /// <param name="b">The second <c>EdStudExmptReq</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdStudExmptReq a, EdStudExmptReq b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdStudExmptReq entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdStudExmptReq a, EdStudExmptReq b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdStudExmptReqColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdStudExmptReqKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdStudExmptReq"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdStudExmptReqKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdStudExmptReqKey class.
		/// </summary>
		public EdStudExmptReqKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudExmptReqKey class.
		/// </summary>
		public EdStudExmptReqKey(EdStudExmptReqBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdStudExmptReqId = entity.EdStudExmptReqId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudExmptReqKey class.
		/// </summary>
		public EdStudExmptReqKey(System.Decimal _edStudExmptReqId)
		{
			#region Init Properties

			this.EdStudExmptReqId = _edStudExmptReqId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdStudExmptReqBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdStudExmptReqBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdStudExmptReqId property
		private System.Decimal _edStudExmptReqId;
		
		/// <summary>
		/// Gets or sets the EdStudExmptReqId property.
		/// </summary>
		public System.Decimal EdStudExmptReqId
		{
			get { return _edStudExmptReqId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdStudExmptReqId = value;
				
				_edStudExmptReqId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdStudExmptReqId = ( values["EdStudExmptReqId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdStudExmptReqId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdStudExmptReqId", EdStudExmptReqId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdStudExmptReqId: {0}{1}",
								EdStudExmptReqId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdStudExmptReqColumn Enum
	
	/// <summary>
	/// Enumerate the EdStudExmptReq columns.
	/// </summary>
	[Serializable]
	public enum EdStudExmptReqColumn : int
	{
		/// <summary>
		/// EdStudExmptReqId : طلبات الاعفاء
		/// </summary>
		[EnumTextValue("ED_STUD_EXMPT_REQ_ID")]
		[ColumnEnum("ED_STUD_EXMPT_REQ_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdStudExmptReqId = 1,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 2,
		/// <summary>
		/// EdCodeSemesterId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeSemesterId = 3,
		/// <summary>
		/// EdStudId : 
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudId = 4,
		/// <summary>
		/// GsCodeReqStatusId : حالة الطلب
		/// </summary>
		[EnumTextValue("GS_CODE_REQ_STATUS_ID")]
		[ColumnEnum("GS_CODE_REQ_STATUS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsCodeReqStatusId = 5,
		/// <summary>
		/// ReqDate : last approve or cancel date
		/// </summary>
		[EnumTextValue("REQ_DATE")]
		[ColumnEnum("REQ_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ReqDate = 6,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		Notes = 7,
		/// <summary>
		/// EdCdeExmptId : نوع الاعفاء:credittransferRPL-crosscredit-trainingcourse
		/// </summary>
		[EnumTextValue("ED_CDE_EXMPT_ID")]
		[ColumnEnum("ED_CDE_EXMPT_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		EdCdeExmptId = 8,
		/// <summary>
		/// DeptApproveDt : تاريخ مجلس القسم (Program)
		/// </summary>
		[EnumTextValue("DEPT_APPROVE_DT")]
		[ColumnEnum("DEPT_APPROVE_DT", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		DeptApproveDt = 9,
		/// <summary>
		/// FacApproveDt : تاريخ مجلس المدرسة  (School)
		/// </summary>
		[EnumTextValue("FAC_APPROVE_DT")]
		[ColumnEnum("FAC_APPROVE_DT", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		FacApproveDt = 10,
		/// <summary>
		/// UnivApproveDt : تاريخ مجلس التعليم (Education Council)
		/// </summary>
		[EnumTextValue("UNIV_APPROVE_DT")]
		[ColumnEnum("UNIV_APPROVE_DT", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		UnivApproveDt = 11,
		/// <summary>
		/// ApproveFlg : مؤشر اعتماد الطلب
		/// </summary>
		[EnumTextValue("APPROVE_FLG")]
		[ColumnEnum("APPROVE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ApproveFlg = 12,
		/// <summary>
		/// ExmptApproveDt : اعتماد طلب اعفاء
		/// </summary>
		[EnumTextValue("EXMPT_APPROVE_DT")]
		[ColumnEnum("EXMPT_APPROVE_DT", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ExmptApproveDt = 13,
		/// <summary>
		/// ExmptApprvUsrId : اعتماد طلب اعفاء
		/// </summary>
		[EnumTextValue("EXMPT_APPRV_USR_ID")]
		[ColumnEnum("EXMPT_APPRV_USR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ExmptApprvUsrId = 14
	}//End enum

	#endregion EdStudExmptReqColumn Enum

} // end namespace
