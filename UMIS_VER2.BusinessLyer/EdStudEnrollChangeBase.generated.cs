
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdStudEnrollChange.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_STUD_ENROLL_CHANGE' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdStudEnrollChangeBase : EntityBase, IEdStudEnrollChange, IEntityId<EdStudEnrollChangeKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdStudEnrollChangeEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdStudEnrollChangeEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdStudEnrollChangeEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdStudEnrollChange> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudEnrollChangeEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudEnrollChangeEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdStudEnrollChangeBase"/> instance.
		///</summary>
		public EdStudEnrollChangeBase()
		{
			this.entityData = new EdStudEnrollChangeEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdStudEnrollChangeBase"/> instance.
		///</summary>
		///<param name="_edStudEnrollChangeId"></param>
		///<param name="_edStudSemesterId"></param>
		///<param name="_edCodeEnrollTypeOldId"></param>
		///<param name="_edCodeEnrollTypeNewId"></param>
		///<param name="_edAcadYearFromId"></param>
		///<param name="_edCodeSemesterFromId"></param>
		///<param name="_edAcadYearToId"></param>
		///<param name="_edCodeSemesterToId"></param>
		///<param name="_semCount"></param>
		///<param name="_edCdeEnrollChngRsnId"></param>
		///<param name="_reqDate"></param>
		///<param name="_decisionNo"></param>
		///<param name="_decisionDate"></param>
		///<param name="_approveFlg"></param>
		///<param name="_saStfMemApprovedById"></param>
		///<param name="_isLast"></param>
		///<param name="_notes"></param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		///<param name="_seFormId"></param>
		///<param name="_seUserInsrtId"></param>
		public EdStudEnrollChangeBase(System.Decimal _edStudEnrollChangeId, System.Decimal? _edStudSemesterId, 
			System.Decimal _edCodeEnrollTypeOldId, System.Decimal _edCodeEnrollTypeNewId, 
			System.Decimal? _edAcadYearFromId, System.Decimal? _edCodeSemesterFromId, System.Decimal? _edAcadYearToId, 
			System.Decimal? _edCodeSemesterToId, System.Decimal? _semCount, System.Decimal? _edCdeEnrollChngRsnId, 
			System.DateTime? _reqDate, System.String _decisionNo, System.DateTime? _decisionDate, 
			System.Decimal? _approveFlg, System.Decimal? _saStfMemApprovedById, System.Decimal _isLast, 
			System.String _notes, System.DateTime? _lastDate, System.Decimal? _seUserId, 
			System.Decimal? _seFormId, System.Decimal? _seUserInsrtId)
		{
			this.entityData = new EdStudEnrollChangeEntityData();
			this.backupData = null;

			this.EdStudEnrollChangeId = _edStudEnrollChangeId;
			this.EdStudSemesterId = _edStudSemesterId;
			this.EdCodeEnrollTypeOldId = _edCodeEnrollTypeOldId;
			this.EdCodeEnrollTypeNewId = _edCodeEnrollTypeNewId;
			this.EdAcadYearFromId = _edAcadYearFromId;
			this.EdCodeSemesterFromId = _edCodeSemesterFromId;
			this.EdAcadYearToId = _edAcadYearToId;
			this.EdCodeSemesterToId = _edCodeSemesterToId;
			this.SemCount = _semCount;
			this.EdCdeEnrollChngRsnId = _edCdeEnrollChngRsnId;
			this.ReqDate = _reqDate;
			this.DecisionNo = _decisionNo;
			this.DecisionDate = _decisionDate;
			this.ApproveFlg = _approveFlg;
			this.SaStfMemApprovedById = _saStfMemApprovedById;
			this.IsLast = _isLast;
			this.Notes = _notes;
			this.LastDate = _lastDate;
			this.SeUserId = _seUserId;
			this.SeFormId = _seFormId;
			this.SeUserInsrtId = _seUserInsrtId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdStudEnrollChange"/> instance.
		///</summary>
		///<param name="_edStudEnrollChangeId"></param>
		///<param name="_edStudSemesterId"></param>
		///<param name="_edCodeEnrollTypeOldId"></param>
		///<param name="_edCodeEnrollTypeNewId"></param>
		///<param name="_edAcadYearFromId"></param>
		///<param name="_edCodeSemesterFromId"></param>
		///<param name="_edAcadYearToId"></param>
		///<param name="_edCodeSemesterToId"></param>
		///<param name="_semCount"></param>
		///<param name="_edCdeEnrollChngRsnId"></param>
		///<param name="_reqDate"></param>
		///<param name="_decisionNo"></param>
		///<param name="_decisionDate"></param>
		///<param name="_approveFlg"></param>
		///<param name="_saStfMemApprovedById"></param>
		///<param name="_isLast"></param>
		///<param name="_notes"></param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		///<param name="_seFormId"></param>
		///<param name="_seUserInsrtId"></param>
		public static EdStudEnrollChange CreateEdStudEnrollChange(System.Decimal _edStudEnrollChangeId, System.Decimal? _edStudSemesterId, 
			System.Decimal _edCodeEnrollTypeOldId, System.Decimal _edCodeEnrollTypeNewId, 
			System.Decimal? _edAcadYearFromId, System.Decimal? _edCodeSemesterFromId, System.Decimal? _edAcadYearToId, 
			System.Decimal? _edCodeSemesterToId, System.Decimal? _semCount, System.Decimal? _edCdeEnrollChngRsnId, 
			System.DateTime? _reqDate, System.String _decisionNo, System.DateTime? _decisionDate, 
			System.Decimal? _approveFlg, System.Decimal? _saStfMemApprovedById, System.Decimal _isLast, 
			System.String _notes, System.DateTime? _lastDate, System.Decimal? _seUserId, 
			System.Decimal? _seFormId, System.Decimal? _seUserInsrtId)
		{
			EdStudEnrollChange newEdStudEnrollChange = new EdStudEnrollChange();
			newEdStudEnrollChange.EdStudEnrollChangeId = _edStudEnrollChangeId;
			newEdStudEnrollChange.EdStudSemesterId = _edStudSemesterId;
			newEdStudEnrollChange.EdCodeEnrollTypeOldId = _edCodeEnrollTypeOldId;
			newEdStudEnrollChange.EdCodeEnrollTypeNewId = _edCodeEnrollTypeNewId;
			newEdStudEnrollChange.EdAcadYearFromId = _edAcadYearFromId;
			newEdStudEnrollChange.EdCodeSemesterFromId = _edCodeSemesterFromId;
			newEdStudEnrollChange.EdAcadYearToId = _edAcadYearToId;
			newEdStudEnrollChange.EdCodeSemesterToId = _edCodeSemesterToId;
			newEdStudEnrollChange.SemCount = _semCount;
			newEdStudEnrollChange.EdCdeEnrollChngRsnId = _edCdeEnrollChngRsnId;
			newEdStudEnrollChange.ReqDate = _reqDate;
			newEdStudEnrollChange.DecisionNo = _decisionNo;
			newEdStudEnrollChange.DecisionDate = _decisionDate;
			newEdStudEnrollChange.ApproveFlg = _approveFlg;
			newEdStudEnrollChange.SaStfMemApprovedById = _saStfMemApprovedById;
			newEdStudEnrollChange.IsLast = _isLast;
			newEdStudEnrollChange.Notes = _notes;
			newEdStudEnrollChange.LastDate = _lastDate;
			newEdStudEnrollChange.SeUserId = _seUserId;
			newEdStudEnrollChange.SeFormId = _seFormId;
			newEdStudEnrollChange.SeUserInsrtId = _seUserInsrtId;
			return newEdStudEnrollChange;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdStudEnrollChangeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdStudEnrollChangeId
		{
			get
			{
				return this.entityData.EdStudEnrollChangeId; 
			}
			
			set
			{
				if (this.entityData.EdStudEnrollChangeId == value)
					return;
					
				OnColumnChanging(EdStudEnrollChangeColumn.EdStudEnrollChangeId, this.entityData.EdStudEnrollChangeId);
				this.entityData.EdStudEnrollChangeId = value;
				this.EntityId.EdStudEnrollChangeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudEnrollChangeColumn.EdStudEnrollChangeId, this.entityData.EdStudEnrollChangeId);
				OnPropertyChanged("EdStudEnrollChangeId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_STUD_ENROLL_CHANGE_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ED_STUD_ENROLL_CHANGE_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdStudEnrollChangeId
		{
			get { return this.entityData.OriginalEdStudEnrollChangeId; }
			set { this.entityData.OriginalEdStudEnrollChangeId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdStudSemesterIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdStudSemesterId
		{
			get
			{
				return this.entityData.EdStudSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdStudSemesterId == value)
					return;
					
				OnColumnChanging(EdStudEnrollChangeColumn.EdStudSemesterId, this.entityData.EdStudSemesterId);
				this.entityData.EdStudSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudEnrollChangeColumn.EdStudSemesterId, this.entityData.EdStudSemesterId);
				OnPropertyChanged("EdStudSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeEnrollTypeOldId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeEnrollTypeOldId
		{
			get
			{
				return this.entityData.EdCodeEnrollTypeOldId; 
			}
			
			set
			{
				if (this.entityData.EdCodeEnrollTypeOldId == value)
					return;
					
				OnColumnChanging(EdStudEnrollChangeColumn.EdCodeEnrollTypeOldId, this.entityData.EdCodeEnrollTypeOldId);
				this.entityData.EdCodeEnrollTypeOldId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudEnrollChangeColumn.EdCodeEnrollTypeOldId, this.entityData.EdCodeEnrollTypeOldId);
				OnPropertyChanged("EdCodeEnrollTypeOldId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeEnrollTypeNewId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeEnrollTypeNewId
		{
			get
			{
				return this.entityData.EdCodeEnrollTypeNewId; 
			}
			
			set
			{
				if (this.entityData.EdCodeEnrollTypeNewId == value)
					return;
					
				OnColumnChanging(EdStudEnrollChangeColumn.EdCodeEnrollTypeNewId, this.entityData.EdCodeEnrollTypeNewId);
				this.entityData.EdCodeEnrollTypeNewId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudEnrollChangeColumn.EdCodeEnrollTypeNewId, this.entityData.EdCodeEnrollTypeNewId);
				OnPropertyChanged("EdCodeEnrollTypeNewId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearFromId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdAcadYearFromIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdAcadYearFromId
		{
			get
			{
				return this.entityData.EdAcadYearFromId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearFromId == value)
					return;
					
				OnColumnChanging(EdStudEnrollChangeColumn.EdAcadYearFromId, this.entityData.EdAcadYearFromId);
				this.entityData.EdAcadYearFromId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudEnrollChangeColumn.EdAcadYearFromId, this.entityData.EdAcadYearFromId);
				OnPropertyChanged("EdAcadYearFromId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterFromId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeSemesterFromIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeSemesterFromId
		{
			get
			{
				return this.entityData.EdCodeSemesterFromId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterFromId == value)
					return;
					
				OnColumnChanging(EdStudEnrollChangeColumn.EdCodeSemesterFromId, this.entityData.EdCodeSemesterFromId);
				this.entityData.EdCodeSemesterFromId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudEnrollChangeColumn.EdCodeSemesterFromId, this.entityData.EdCodeSemesterFromId);
				OnPropertyChanged("EdCodeSemesterFromId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearToId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdAcadYearToIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdAcadYearToId
		{
			get
			{
				return this.entityData.EdAcadYearToId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearToId == value)
					return;
					
				OnColumnChanging(EdStudEnrollChangeColumn.EdAcadYearToId, this.entityData.EdAcadYearToId);
				this.entityData.EdAcadYearToId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudEnrollChangeColumn.EdAcadYearToId, this.entityData.EdAcadYearToId);
				OnPropertyChanged("EdAcadYearToId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterToId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeSemesterToIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeSemesterToId
		{
			get
			{
				return this.entityData.EdCodeSemesterToId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterToId == value)
					return;
					
				OnColumnChanging(EdStudEnrollChangeColumn.EdCodeSemesterToId, this.entityData.EdCodeSemesterToId);
				this.entityData.EdCodeSemesterToId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudEnrollChangeColumn.EdCodeSemesterToId, this.entityData.EdCodeSemesterToId);
				OnPropertyChanged("EdCodeSemesterToId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SemCount property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSemCountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SemCount
		{
			get
			{
				return this.entityData.SemCount; 
			}
			
			set
			{
				if (this.entityData.SemCount == value)
					return;
					
				OnColumnChanging(EdStudEnrollChangeColumn.SemCount, this.entityData.SemCount);
				this.entityData.SemCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudEnrollChangeColumn.SemCount, this.entityData.SemCount);
				OnPropertyChanged("SemCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCdeEnrollChngRsnId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCdeEnrollChngRsnIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCdeEnrollChngRsnId
		{
			get
			{
				return this.entityData.EdCdeEnrollChngRsnId; 
			}
			
			set
			{
				if (this.entityData.EdCdeEnrollChngRsnId == value)
					return;
					
				OnColumnChanging(EdStudEnrollChangeColumn.EdCdeEnrollChngRsnId, this.entityData.EdCdeEnrollChngRsnId);
				this.entityData.EdCdeEnrollChngRsnId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudEnrollChangeColumn.EdCdeEnrollChngRsnId, this.entityData.EdCdeEnrollChngRsnId);
				OnPropertyChanged("EdCdeEnrollChngRsnId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReqDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsReqDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ReqDate
		{
			get
			{
				return this.entityData.ReqDate; 
			}
			
			set
			{
				if (this.entityData.ReqDate == value)
					return;
					
				OnColumnChanging(EdStudEnrollChangeColumn.ReqDate, this.entityData.ReqDate);
				this.entityData.ReqDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudEnrollChangeColumn.ReqDate, this.entityData.ReqDate);
				OnPropertyChanged("ReqDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DecisionNo property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String DecisionNo
		{
			get
			{
				return this.entityData.DecisionNo; 
			}
			
			set
			{
				if (this.entityData.DecisionNo == value)
					return;
					
				OnColumnChanging(EdStudEnrollChangeColumn.DecisionNo, this.entityData.DecisionNo);
				this.entityData.DecisionNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudEnrollChangeColumn.DecisionNo, this.entityData.DecisionNo);
				OnPropertyChanged("DecisionNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DecisionDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsDecisionDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DecisionDate
		{
			get
			{
				return this.entityData.DecisionDate; 
			}
			
			set
			{
				if (this.entityData.DecisionDate == value)
					return;
					
				OnColumnChanging(EdStudEnrollChangeColumn.DecisionDate, this.entityData.DecisionDate);
				this.entityData.DecisionDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudEnrollChangeColumn.DecisionDate, this.entityData.DecisionDate);
				OnPropertyChanged("DecisionDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApproveFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsApproveFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ApproveFlg
		{
			get
			{
				return this.entityData.ApproveFlg; 
			}
			
			set
			{
				if (this.entityData.ApproveFlg == value)
					return;
					
				OnColumnChanging(EdStudEnrollChangeColumn.ApproveFlg, this.entityData.ApproveFlg);
				this.entityData.ApproveFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudEnrollChangeColumn.ApproveFlg, this.entityData.ApproveFlg);
				OnPropertyChanged("ApproveFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaStfMemApprovedById property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSaStfMemApprovedByIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SaStfMemApprovedById
		{
			get
			{
				return this.entityData.SaStfMemApprovedById; 
			}
			
			set
			{
				if (this.entityData.SaStfMemApprovedById == value)
					return;
					
				OnColumnChanging(EdStudEnrollChangeColumn.SaStfMemApprovedById, this.entityData.SaStfMemApprovedById);
				this.entityData.SaStfMemApprovedById = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudEnrollChangeColumn.SaStfMemApprovedById, this.entityData.SaStfMemApprovedById);
				OnPropertyChanged("SaStfMemApprovedById");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsLast property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsLast
		{
			get
			{
				return this.entityData.IsLast; 
			}
			
			set
			{
				if (this.entityData.IsLast == value)
					return;
					
				OnColumnChanging(EdStudEnrollChangeColumn.IsLast, this.entityData.IsLast);
				this.entityData.IsLast = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudEnrollChangeColumn.IsLast, this.entityData.IsLast);
				OnPropertyChanged("IsLast");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 240)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(EdStudEnrollChangeColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudEnrollChangeColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(EdStudEnrollChangeColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudEnrollChangeColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(EdStudEnrollChangeColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudEnrollChangeColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeFormId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeFormIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeFormId
		{
			get
			{
				return this.entityData.SeFormId; 
			}
			
			set
			{
				if (this.entityData.SeFormId == value)
					return;
					
				OnColumnChanging(EdStudEnrollChangeColumn.SeFormId, this.entityData.SeFormId);
				this.entityData.SeFormId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudEnrollChangeColumn.SeFormId, this.entityData.SeFormId);
				OnPropertyChanged("SeFormId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserInsrtId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserInsrtIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserInsrtId
		{
			get
			{
				return this.entityData.SeUserInsrtId; 
			}
			
			set
			{
				if (this.entityData.SeUserInsrtId == value)
					return;
					
				OnColumnChanging(EdStudEnrollChangeColumn.SeUserInsrtId, this.entityData.SeUserInsrtId);
				this.entityData.SeUserInsrtId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudEnrollChangeColumn.SeUserInsrtId, this.entityData.SeUserInsrtId);
				OnPropertyChanged("SeUserInsrtId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearToId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearToIdSource
      	{
            get { return entityData.EdAcadYearToIdSource; }
            set { entityData.EdAcadYearToIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearFromId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearFromIdSource
      	{
            get { return entityData.EdAcadYearFromIdSource; }
            set { entityData.EdAcadYearFromIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeEnrollChngRsn"/>.
		/// </summary>
		/// <value>The source EdCdeEnrollChngRsn for EdCdeEnrollChngRsnId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCdeEnrollChngRsn EdCdeEnrollChngRsnIdSource
      	{
            get { return entityData.EdCdeEnrollChngRsnIdSource; }
            set { entityData.EdCdeEnrollChngRsnIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeEnrollType"/>.
		/// </summary>
		/// <value>The source EdCodeEnrollType for EdCodeEnrollTypeOldId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeEnrollType EdCodeEnrollTypeOldIdSource
      	{
            get { return entityData.EdCodeEnrollTypeOldIdSource; }
            set { entityData.EdCodeEnrollTypeOldIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeEnrollType"/>.
		/// </summary>
		/// <value>The source EdCodeEnrollType for EdCodeEnrollTypeNewId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeEnrollType EdCodeEnrollTypeNewIdSource
      	{
            get { return entityData.EdCodeEnrollTypeNewIdSource; }
            set { entityData.EdCodeEnrollTypeNewIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterFromId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterFromIdSource
      	{
            get { return entityData.EdCodeSemesterFromIdSource; }
            set { entityData.EdCodeSemesterFromIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterToId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterToIdSource
      	{
            get { return entityData.EdCodeSemesterToIdSource; }
            set { entityData.EdCodeSemesterToIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStudSemester"/>.
		/// </summary>
		/// <value>The source EdStudSemester for EdStudSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStudSemester EdStudSemesterIdSource
      	{
            get { return entityData.EdStudSemesterIdSource; }
            set { entityData.EdStudSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemApprovedById.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaStfMember SaStfMemApprovedByIdSource
      	{
            get { return entityData.SaStfMemApprovedByIdSource; }
            set { entityData.SaStfMemApprovedByIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeForm"/>.
		/// </summary>
		/// <value>The source SeForm for SeFormId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeForm SeFormIdSource
      	{
            get { return entityData.SeFormIdSource; }
            set { entityData.SeFormIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeUser SeUserIdSource
      	{
            get { return entityData.SeUserIdSource; }
            set { entityData.SeUserIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserInsrtId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeUser SeUserInsrtIdSource
      	{
            get { return entityData.SeUserInsrtIdSource; }
            set { entityData.SeUserInsrtIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of GsAttchdDoc objects
		///	which are related to this object through the relation FK_GS_ATTCHD_DOC_ED_STUD_ENROLL_CHANGE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GsAttchdDoc> GsAttchdDocCollection
		{
			get { return entityData.GsAttchdDocCollection; }
			set { entityData.GsAttchdDocCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DecisionNo", "Decision No", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 240));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_STUD_ENROLL_CHANGE"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_STUD_ENROLL_CHANGE_ID", "ED_STUD_SEMESTER_ID", "ED_CODE_ENROLL_TYPE_OLD_ID", "ED_CODE_ENROLL_TYPE_NEW_ID", "ED_ACAD_YEAR_FROM_ID", "ED_CODE_SEMESTER_FROM_ID", "ED_ACAD_YEAR_TO_ID", "ED_CODE_SEMESTER_TO_ID", "SEM_COUNT", "ED_CDE_ENROLL_CHNG_RSN_ID", "REQ_DATE", "DECISION_NO", "DECISION_DATE", "APPROVE_FLG", "SA_STF_MEM_APPROVED_BY_ID", "IS_LAST", "NOTES", "LAST_DATE", "SE_USER_ID", "SE_FORM_ID", "SE_USER_INSRT_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdStudEnrollChangeEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdStudEnrollChange) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdStudEnrollChange>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdStudEnrollChange);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdStudEnrollChange Entity 
		///</summary>
		protected virtual EdStudEnrollChange Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdStudEnrollChange copy = new EdStudEnrollChange();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdStudEnrollChangeId = this.EdStudEnrollChangeId;
					copy.OriginalEdStudEnrollChangeId = this.OriginalEdStudEnrollChangeId;
				copy.EdStudSemesterId = this.EdStudSemesterId;
				copy.EdCodeEnrollTypeOldId = this.EdCodeEnrollTypeOldId;
				copy.EdCodeEnrollTypeNewId = this.EdCodeEnrollTypeNewId;
				copy.EdAcadYearFromId = this.EdAcadYearFromId;
				copy.EdCodeSemesterFromId = this.EdCodeSemesterFromId;
				copy.EdAcadYearToId = this.EdAcadYearToId;
				copy.EdCodeSemesterToId = this.EdCodeSemesterToId;
				copy.SemCount = this.SemCount;
				copy.EdCdeEnrollChngRsnId = this.EdCdeEnrollChngRsnId;
				copy.ReqDate = this.ReqDate;
				copy.DecisionNo = this.DecisionNo;
				copy.DecisionDate = this.DecisionDate;
				copy.ApproveFlg = this.ApproveFlg;
				copy.SaStfMemApprovedById = this.SaStfMemApprovedById;
				copy.IsLast = this.IsLast;
				copy.Notes = this.Notes;
				copy.LastDate = this.LastDate;
				copy.SeUserId = this.SeUserId;
				copy.SeFormId = this.SeFormId;
				copy.SeUserInsrtId = this.SeUserInsrtId;
			
			if (this.EdAcadYearToIdSource != null && existingCopies.Contains(this.EdAcadYearToIdSource))
				copy.EdAcadYearToIdSource = existingCopies[this.EdAcadYearToIdSource] as EdAcadYear;
			else
				copy.EdAcadYearToIdSource = MakeCopyOf(this.EdAcadYearToIdSource, existingCopies) as EdAcadYear;
			if (this.EdAcadYearFromIdSource != null && existingCopies.Contains(this.EdAcadYearFromIdSource))
				copy.EdAcadYearFromIdSource = existingCopies[this.EdAcadYearFromIdSource] as EdAcadYear;
			else
				copy.EdAcadYearFromIdSource = MakeCopyOf(this.EdAcadYearFromIdSource, existingCopies) as EdAcadYear;
			if (this.EdCdeEnrollChngRsnIdSource != null && existingCopies.Contains(this.EdCdeEnrollChngRsnIdSource))
				copy.EdCdeEnrollChngRsnIdSource = existingCopies[this.EdCdeEnrollChngRsnIdSource] as EdCdeEnrollChngRsn;
			else
				copy.EdCdeEnrollChngRsnIdSource = MakeCopyOf(this.EdCdeEnrollChngRsnIdSource, existingCopies) as EdCdeEnrollChngRsn;
			if (this.EdCodeEnrollTypeOldIdSource != null && existingCopies.Contains(this.EdCodeEnrollTypeOldIdSource))
				copy.EdCodeEnrollTypeOldIdSource = existingCopies[this.EdCodeEnrollTypeOldIdSource] as EdCodeEnrollType;
			else
				copy.EdCodeEnrollTypeOldIdSource = MakeCopyOf(this.EdCodeEnrollTypeOldIdSource, existingCopies) as EdCodeEnrollType;
			if (this.EdCodeEnrollTypeNewIdSource != null && existingCopies.Contains(this.EdCodeEnrollTypeNewIdSource))
				copy.EdCodeEnrollTypeNewIdSource = existingCopies[this.EdCodeEnrollTypeNewIdSource] as EdCodeEnrollType;
			else
				copy.EdCodeEnrollTypeNewIdSource = MakeCopyOf(this.EdCodeEnrollTypeNewIdSource, existingCopies) as EdCodeEnrollType;
			if (this.EdCodeSemesterFromIdSource != null && existingCopies.Contains(this.EdCodeSemesterFromIdSource))
				copy.EdCodeSemesterFromIdSource = existingCopies[this.EdCodeSemesterFromIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterFromIdSource = MakeCopyOf(this.EdCodeSemesterFromIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCodeSemesterToIdSource != null && existingCopies.Contains(this.EdCodeSemesterToIdSource))
				copy.EdCodeSemesterToIdSource = existingCopies[this.EdCodeSemesterToIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterToIdSource = MakeCopyOf(this.EdCodeSemesterToIdSource, existingCopies) as EdCodeSemester;
			if (this.EdStudSemesterIdSource != null && existingCopies.Contains(this.EdStudSemesterIdSource))
				copy.EdStudSemesterIdSource = existingCopies[this.EdStudSemesterIdSource] as EdStudSemester;
			else
				copy.EdStudSemesterIdSource = MakeCopyOf(this.EdStudSemesterIdSource, existingCopies) as EdStudSemester;
			if (this.SaStfMemApprovedByIdSource != null && existingCopies.Contains(this.SaStfMemApprovedByIdSource))
				copy.SaStfMemApprovedByIdSource = existingCopies[this.SaStfMemApprovedByIdSource] as SaStfMember;
			else
				copy.SaStfMemApprovedByIdSource = MakeCopyOf(this.SaStfMemApprovedByIdSource, existingCopies) as SaStfMember;
			if (this.SeFormIdSource != null && existingCopies.Contains(this.SeFormIdSource))
				copy.SeFormIdSource = existingCopies[this.SeFormIdSource] as SeForm;
			else
				copy.SeFormIdSource = MakeCopyOf(this.SeFormIdSource, existingCopies) as SeForm;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				copy.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				copy.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			if (this.SeUserInsrtIdSource != null && existingCopies.Contains(this.SeUserInsrtIdSource))
				copy.SeUserInsrtIdSource = existingCopies[this.SeUserInsrtIdSource] as SeUser;
			else
				copy.SeUserInsrtIdSource = MakeCopyOf(this.SeUserInsrtIdSource, existingCopies) as SeUser;
		
			//deep copy nested objects
			copy.GsAttchdDocCollection = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdStudEnrollChange Entity 
		///</summary>
		public virtual EdStudEnrollChange Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdStudEnrollChange Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdStudEnrollChange DeepCopy()
		{
			return EntityHelper.Clone<EdStudEnrollChange>(this as EdStudEnrollChange);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdStudEnrollChangeEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdStudEnrollChangeEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdStudEnrollChangeEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdStudEnrollChangeColumn column)
		{
			switch(column)
			{
					case EdStudEnrollChangeColumn.EdStudEnrollChangeId:
					return entityData.EdStudEnrollChangeId != _originalData.EdStudEnrollChangeId;
					case EdStudEnrollChangeColumn.EdStudSemesterId:
					return entityData.EdStudSemesterId != _originalData.EdStudSemesterId;
					case EdStudEnrollChangeColumn.EdCodeEnrollTypeOldId:
					return entityData.EdCodeEnrollTypeOldId != _originalData.EdCodeEnrollTypeOldId;
					case EdStudEnrollChangeColumn.EdCodeEnrollTypeNewId:
					return entityData.EdCodeEnrollTypeNewId != _originalData.EdCodeEnrollTypeNewId;
					case EdStudEnrollChangeColumn.EdAcadYearFromId:
					return entityData.EdAcadYearFromId != _originalData.EdAcadYearFromId;
					case EdStudEnrollChangeColumn.EdCodeSemesterFromId:
					return entityData.EdCodeSemesterFromId != _originalData.EdCodeSemesterFromId;
					case EdStudEnrollChangeColumn.EdAcadYearToId:
					return entityData.EdAcadYearToId != _originalData.EdAcadYearToId;
					case EdStudEnrollChangeColumn.EdCodeSemesterToId:
					return entityData.EdCodeSemesterToId != _originalData.EdCodeSemesterToId;
					case EdStudEnrollChangeColumn.SemCount:
					return entityData.SemCount != _originalData.SemCount;
					case EdStudEnrollChangeColumn.EdCdeEnrollChngRsnId:
					return entityData.EdCdeEnrollChngRsnId != _originalData.EdCdeEnrollChngRsnId;
					case EdStudEnrollChangeColumn.ReqDate:
					return entityData.ReqDate != _originalData.ReqDate;
					case EdStudEnrollChangeColumn.DecisionNo:
					return entityData.DecisionNo != _originalData.DecisionNo;
					case EdStudEnrollChangeColumn.DecisionDate:
					return entityData.DecisionDate != _originalData.DecisionDate;
					case EdStudEnrollChangeColumn.ApproveFlg:
					return entityData.ApproveFlg != _originalData.ApproveFlg;
					case EdStudEnrollChangeColumn.SaStfMemApprovedById:
					return entityData.SaStfMemApprovedById != _originalData.SaStfMemApprovedById;
					case EdStudEnrollChangeColumn.IsLast:
					return entityData.IsLast != _originalData.IsLast;
					case EdStudEnrollChangeColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case EdStudEnrollChangeColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case EdStudEnrollChangeColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case EdStudEnrollChangeColumn.SeFormId:
					return entityData.SeFormId != _originalData.SeFormId;
					case EdStudEnrollChangeColumn.SeUserInsrtId:
					return entityData.SeUserInsrtId != _originalData.SeUserInsrtId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdStudEnrollChangeColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdStudEnrollChangeId != _originalData.EdStudEnrollChangeId;
			result = result || entityData.EdStudSemesterId != _originalData.EdStudSemesterId;
			result = result || entityData.EdCodeEnrollTypeOldId != _originalData.EdCodeEnrollTypeOldId;
			result = result || entityData.EdCodeEnrollTypeNewId != _originalData.EdCodeEnrollTypeNewId;
			result = result || entityData.EdAcadYearFromId != _originalData.EdAcadYearFromId;
			result = result || entityData.EdCodeSemesterFromId != _originalData.EdCodeSemesterFromId;
			result = result || entityData.EdAcadYearToId != _originalData.EdAcadYearToId;
			result = result || entityData.EdCodeSemesterToId != _originalData.EdCodeSemesterToId;
			result = result || entityData.SemCount != _originalData.SemCount;
			result = result || entityData.EdCdeEnrollChngRsnId != _originalData.EdCdeEnrollChngRsnId;
			result = result || entityData.ReqDate != _originalData.ReqDate;
			result = result || entityData.DecisionNo != _originalData.DecisionNo;
			result = result || entityData.DecisionDate != _originalData.DecisionDate;
			result = result || entityData.ApproveFlg != _originalData.ApproveFlg;
			result = result || entityData.SaStfMemApprovedById != _originalData.SaStfMemApprovedById;
			result = result || entityData.IsLast != _originalData.IsLast;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.SeFormId != _originalData.SeFormId;
			result = result || entityData.SeUserInsrtId != _originalData.SeUserInsrtId;
			return result;
		}	
		
		///<summary>
		///  Returns a EdStudEnrollChange Entity with the original data.
		///</summary>
		public EdStudEnrollChange GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdStudEnrollChange(
				_originalData.EdStudEnrollChangeId,
				_originalData.EdStudSemesterId,
				_originalData.EdCodeEnrollTypeOldId,
				_originalData.EdCodeEnrollTypeNewId,
				_originalData.EdAcadYearFromId,
				_originalData.EdCodeSemesterFromId,
				_originalData.EdAcadYearToId,
				_originalData.EdCodeSemesterToId,
				_originalData.SemCount,
				_originalData.EdCdeEnrollChngRsnId,
				_originalData.ReqDate,
				_originalData.DecisionNo,
				_originalData.DecisionDate,
				_originalData.ApproveFlg,
				_originalData.SaStfMemApprovedById,
				_originalData.IsLast,
				_originalData.Notes,
				_originalData.LastDate,
				_originalData.SeUserId,
				_originalData.SeFormId,
				_originalData.SeUserInsrtId
				);
				
			return (EdStudEnrollChange)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdStudEnrollChangeBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdStudEnrollChangeBase)
				return ValueEquals(this, (EdStudEnrollChangeBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdStudEnrollChangeBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdStudEnrollChangeId.GetHashCode() ^ 
					((this.EdStudSemesterId == null) ? string.Empty : this.EdStudSemesterId.ToString()).GetHashCode() ^ 
					this.EdCodeEnrollTypeOldId.GetHashCode() ^ 
					this.EdCodeEnrollTypeNewId.GetHashCode() ^ 
					((this.EdAcadYearFromId == null) ? string.Empty : this.EdAcadYearFromId.ToString()).GetHashCode() ^ 
					((this.EdCodeSemesterFromId == null) ? string.Empty : this.EdCodeSemesterFromId.ToString()).GetHashCode() ^ 
					((this.EdAcadYearToId == null) ? string.Empty : this.EdAcadYearToId.ToString()).GetHashCode() ^ 
					((this.EdCodeSemesterToId == null) ? string.Empty : this.EdCodeSemesterToId.ToString()).GetHashCode() ^ 
					((this.SemCount == null) ? string.Empty : this.SemCount.ToString()).GetHashCode() ^ 
					((this.EdCdeEnrollChngRsnId == null) ? string.Empty : this.EdCdeEnrollChngRsnId.ToString()).GetHashCode() ^ 
					((this.ReqDate == null) ? string.Empty : this.ReqDate.ToString()).GetHashCode() ^ 
					((this.DecisionNo == null) ? string.Empty : this.DecisionNo.ToString()).GetHashCode() ^ 
					((this.DecisionDate == null) ? string.Empty : this.DecisionDate.ToString()).GetHashCode() ^ 
					((this.ApproveFlg == null) ? string.Empty : this.ApproveFlg.ToString()).GetHashCode() ^ 
					((this.SaStfMemApprovedById == null) ? string.Empty : this.SaStfMemApprovedById.ToString()).GetHashCode() ^ 
					this.IsLast.GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.SeFormId == null) ? string.Empty : this.SeFormId.ToString()).GetHashCode() ^ 
					((this.SeUserInsrtId == null) ? string.Empty : this.SeUserInsrtId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdStudEnrollChangeBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdStudEnrollChangeBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdStudEnrollChangeBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdStudEnrollChangeBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdStudEnrollChangeBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdStudEnrollChangeBase Object1, EdStudEnrollChangeBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdStudEnrollChangeId != Object2.EdStudEnrollChangeId)
				equal = false;
			if ( Object1.EdStudSemesterId != null && Object2.EdStudSemesterId != null )
			{
				if (Object1.EdStudSemesterId != Object2.EdStudSemesterId)
					equal = false;
			}
			else if (Object1.EdStudSemesterId == null ^ Object2.EdStudSemesterId == null )
			{
				equal = false;
			}
			if (Object1.EdCodeEnrollTypeOldId != Object2.EdCodeEnrollTypeOldId)
				equal = false;
			if (Object1.EdCodeEnrollTypeNewId != Object2.EdCodeEnrollTypeNewId)
				equal = false;
			if ( Object1.EdAcadYearFromId != null && Object2.EdAcadYearFromId != null )
			{
				if (Object1.EdAcadYearFromId != Object2.EdAcadYearFromId)
					equal = false;
			}
			else if (Object1.EdAcadYearFromId == null ^ Object2.EdAcadYearFromId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeSemesterFromId != null && Object2.EdCodeSemesterFromId != null )
			{
				if (Object1.EdCodeSemesterFromId != Object2.EdCodeSemesterFromId)
					equal = false;
			}
			else if (Object1.EdCodeSemesterFromId == null ^ Object2.EdCodeSemesterFromId == null )
			{
				equal = false;
			}
			if ( Object1.EdAcadYearToId != null && Object2.EdAcadYearToId != null )
			{
				if (Object1.EdAcadYearToId != Object2.EdAcadYearToId)
					equal = false;
			}
			else if (Object1.EdAcadYearToId == null ^ Object2.EdAcadYearToId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeSemesterToId != null && Object2.EdCodeSemesterToId != null )
			{
				if (Object1.EdCodeSemesterToId != Object2.EdCodeSemesterToId)
					equal = false;
			}
			else if (Object1.EdCodeSemesterToId == null ^ Object2.EdCodeSemesterToId == null )
			{
				equal = false;
			}
			if ( Object1.SemCount != null && Object2.SemCount != null )
			{
				if (Object1.SemCount != Object2.SemCount)
					equal = false;
			}
			else if (Object1.SemCount == null ^ Object2.SemCount == null )
			{
				equal = false;
			}
			if ( Object1.EdCdeEnrollChngRsnId != null && Object2.EdCdeEnrollChngRsnId != null )
			{
				if (Object1.EdCdeEnrollChngRsnId != Object2.EdCdeEnrollChngRsnId)
					equal = false;
			}
			else if (Object1.EdCdeEnrollChngRsnId == null ^ Object2.EdCdeEnrollChngRsnId == null )
			{
				equal = false;
			}
			if ( Object1.ReqDate != null && Object2.ReqDate != null )
			{
				if (Object1.ReqDate != Object2.ReqDate)
					equal = false;
			}
			else if (Object1.ReqDate == null ^ Object2.ReqDate == null )
			{
				equal = false;
			}
			if ( Object1.DecisionNo != null && Object2.DecisionNo != null )
			{
				if (Object1.DecisionNo != Object2.DecisionNo)
					equal = false;
			}
			else if (Object1.DecisionNo == null ^ Object2.DecisionNo == null )
			{
				equal = false;
			}
			if ( Object1.DecisionDate != null && Object2.DecisionDate != null )
			{
				if (Object1.DecisionDate != Object2.DecisionDate)
					equal = false;
			}
			else if (Object1.DecisionDate == null ^ Object2.DecisionDate == null )
			{
				equal = false;
			}
			if ( Object1.ApproveFlg != null && Object2.ApproveFlg != null )
			{
				if (Object1.ApproveFlg != Object2.ApproveFlg)
					equal = false;
			}
			else if (Object1.ApproveFlg == null ^ Object2.ApproveFlg == null )
			{
				equal = false;
			}
			if ( Object1.SaStfMemApprovedById != null && Object2.SaStfMemApprovedById != null )
			{
				if (Object1.SaStfMemApprovedById != Object2.SaStfMemApprovedById)
					equal = false;
			}
			else if (Object1.SaStfMemApprovedById == null ^ Object2.SaStfMemApprovedById == null )
			{
				equal = false;
			}
			if (Object1.IsLast != Object2.IsLast)
				equal = false;
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.SeFormId != null && Object2.SeFormId != null )
			{
				if (Object1.SeFormId != Object2.SeFormId)
					equal = false;
			}
			else if (Object1.SeFormId == null ^ Object2.SeFormId == null )
			{
				equal = false;
			}
			if ( Object1.SeUserInsrtId != null && Object2.SeUserInsrtId != null )
			{
				if (Object1.SeUserInsrtId != Object2.SeUserInsrtId)
					equal = false;
			}
			else if (Object1.SeUserInsrtId == null ^ Object2.SeUserInsrtId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdStudEnrollChangeBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdStudEnrollChangeComparer GetComparer()
        {
            return new EdStudEnrollChangeComparer();
        }
        */

        // Comparer delegates back to EdStudEnrollChange
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdStudEnrollChange rhs, EdStudEnrollChangeColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdStudEnrollChangeColumn.EdStudEnrollChangeId:
            		return this.EdStudEnrollChangeId.CompareTo(rhs.EdStudEnrollChangeId);
            		
            		                 
            	
            	
            	case EdStudEnrollChangeColumn.EdStudSemesterId:
            		return this.EdStudSemesterId.Value.CompareTo(rhs.EdStudSemesterId.Value);
            		
            		                 
            	
            	
            	case EdStudEnrollChangeColumn.EdCodeEnrollTypeOldId:
            		return this.EdCodeEnrollTypeOldId.CompareTo(rhs.EdCodeEnrollTypeOldId);
            		
            		                 
            	
            	
            	case EdStudEnrollChangeColumn.EdCodeEnrollTypeNewId:
            		return this.EdCodeEnrollTypeNewId.CompareTo(rhs.EdCodeEnrollTypeNewId);
            		
            		                 
            	
            	
            	case EdStudEnrollChangeColumn.EdAcadYearFromId:
            		return this.EdAcadYearFromId.Value.CompareTo(rhs.EdAcadYearFromId.Value);
            		
            		                 
            	
            	
            	case EdStudEnrollChangeColumn.EdCodeSemesterFromId:
            		return this.EdCodeSemesterFromId.Value.CompareTo(rhs.EdCodeSemesterFromId.Value);
            		
            		                 
            	
            	
            	case EdStudEnrollChangeColumn.EdAcadYearToId:
            		return this.EdAcadYearToId.Value.CompareTo(rhs.EdAcadYearToId.Value);
            		
            		                 
            	
            	
            	case EdStudEnrollChangeColumn.EdCodeSemesterToId:
            		return this.EdCodeSemesterToId.Value.CompareTo(rhs.EdCodeSemesterToId.Value);
            		
            		                 
            	
            	
            	case EdStudEnrollChangeColumn.SemCount:
            		return this.SemCount.Value.CompareTo(rhs.SemCount.Value);
            		
            		                 
            	
            	
            	case EdStudEnrollChangeColumn.EdCdeEnrollChngRsnId:
            		return this.EdCdeEnrollChngRsnId.Value.CompareTo(rhs.EdCdeEnrollChngRsnId.Value);
            		
            		                 
            	
            	
            	case EdStudEnrollChangeColumn.ReqDate:
            		return this.ReqDate.Value.CompareTo(rhs.ReqDate.Value);
            		
            		                 
            	
            	
            	case EdStudEnrollChangeColumn.DecisionNo:
            		return this.DecisionNo.CompareTo(rhs.DecisionNo);
            		
            		                 
            	
            	
            	case EdStudEnrollChangeColumn.DecisionDate:
            		return this.DecisionDate.Value.CompareTo(rhs.DecisionDate.Value);
            		
            		                 
            	
            	
            	case EdStudEnrollChangeColumn.ApproveFlg:
            		return this.ApproveFlg.Value.CompareTo(rhs.ApproveFlg.Value);
            		
            		                 
            	
            	
            	case EdStudEnrollChangeColumn.SaStfMemApprovedById:
            		return this.SaStfMemApprovedById.Value.CompareTo(rhs.SaStfMemApprovedById.Value);
            		
            		                 
            	
            	
            	case EdStudEnrollChangeColumn.IsLast:
            		return this.IsLast.CompareTo(rhs.IsLast);
            		
            		                 
            	
            	
            	case EdStudEnrollChangeColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case EdStudEnrollChangeColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case EdStudEnrollChangeColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case EdStudEnrollChangeColumn.SeFormId:
            		return this.SeFormId.Value.CompareTo(rhs.SeFormId.Value);
            		
            		                 
            	
            	
            	case EdStudEnrollChangeColumn.SeUserInsrtId:
            		return this.SeUserInsrtId.Value.CompareTo(rhs.SeUserInsrtId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdStudEnrollChangeKey> Members
		
		// member variable for the EntityId property
		private EdStudEnrollChangeKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdStudEnrollChangeKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdStudEnrollChangeKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdStudEnrollChange")
					.Append("|").Append( this.EdStudEnrollChangeId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{22}{21}- EdStudEnrollChangeId: {0}{21}- EdStudSemesterId: {1}{21}- EdCodeEnrollTypeOldId: {2}{21}- EdCodeEnrollTypeNewId: {3}{21}- EdAcadYearFromId: {4}{21}- EdCodeSemesterFromId: {5}{21}- EdAcadYearToId: {6}{21}- EdCodeSemesterToId: {7}{21}- SemCount: {8}{21}- EdCdeEnrollChngRsnId: {9}{21}- ReqDate: {10}{21}- DecisionNo: {11}{21}- DecisionDate: {12}{21}- ApproveFlg: {13}{21}- SaStfMemApprovedById: {14}{21}- IsLast: {15}{21}- Notes: {16}{21}- LastDate: {17}{21}- SeUserId: {18}{21}- SeFormId: {19}{21}- SeUserInsrtId: {20}{21}{23}", 
				this.EdStudEnrollChangeId,
				(this.EdStudSemesterId == null) ? string.Empty : this.EdStudSemesterId.ToString(),
				this.EdCodeEnrollTypeOldId,
				this.EdCodeEnrollTypeNewId,
				(this.EdAcadYearFromId == null) ? string.Empty : this.EdAcadYearFromId.ToString(),
				(this.EdCodeSemesterFromId == null) ? string.Empty : this.EdCodeSemesterFromId.ToString(),
				(this.EdAcadYearToId == null) ? string.Empty : this.EdAcadYearToId.ToString(),
				(this.EdCodeSemesterToId == null) ? string.Empty : this.EdCodeSemesterToId.ToString(),
				(this.SemCount == null) ? string.Empty : this.SemCount.ToString(),
				(this.EdCdeEnrollChngRsnId == null) ? string.Empty : this.EdCdeEnrollChngRsnId.ToString(),
				(this.ReqDate == null) ? string.Empty : this.ReqDate.ToString(),
				(this.DecisionNo == null) ? string.Empty : this.DecisionNo.ToString(),
				(this.DecisionDate == null) ? string.Empty : this.DecisionDate.ToString(),
				(this.ApproveFlg == null) ? string.Empty : this.ApproveFlg.ToString(),
				(this.SaStfMemApprovedById == null) ? string.Empty : this.SaStfMemApprovedById.ToString(),
				this.IsLast,
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.SeFormId == null) ? string.Empty : this.SeFormId.ToString(),
				(this.SeUserInsrtId == null) ? string.Empty : this.SeUserInsrtId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_STUD_ENROLL_CHANGE' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdStudEnrollChangeEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_STUD_ENROLL_CHANGE_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_STUD_ENROLL_CHANGE"</remarks>
		public System.Decimal EdStudEnrollChangeId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdStudEnrollChangeId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_STUD_SEMESTER_ID : 
		/// </summary>
		public System.Decimal?		  EdStudSemesterId = null;
		
		/// <summary>
		/// ED_CODE_ENROLL_TYPE_OLD_ID : 
		/// </summary>
		public System.Decimal		  EdCodeEnrollTypeOldId = 0.0m;
		
		/// <summary>
		/// ED_CODE_ENROLL_TYPE_NEW_ID : 
		/// </summary>
		public System.Decimal		  EdCodeEnrollTypeNewId = 0.0m;
		
		/// <summary>
		/// ED_ACAD_YEAR_FROM_ID : 
		/// </summary>
		public System.Decimal?		  EdAcadYearFromId = null;
		
		/// <summary>
		/// ED_CODE_SEMESTER_FROM_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeSemesterFromId = null;
		
		/// <summary>
		/// ED_ACAD_YEAR_TO_ID : 
		/// </summary>
		public System.Decimal?		  EdAcadYearToId = null;
		
		/// <summary>
		/// ED_CODE_SEMESTER_TO_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeSemesterToId = null;
		
		/// <summary>
		/// SEM_COUNT : 
		/// </summary>
		public System.Decimal?		  SemCount = null;
		
		/// <summary>
		/// ED_CDE_ENROLL_CHNG_RSN_ID : 
		/// </summary>
		public System.Decimal?		  EdCdeEnrollChngRsnId = null;
		
		/// <summary>
		/// REQ_DATE : 
		/// </summary>
		public System.DateTime?		  ReqDate = null;
		
		/// <summary>
		/// DECISION_NO : 
		/// </summary>
		public System.String		  DecisionNo = null;
		
		/// <summary>
		/// DECISION_DATE : 
		/// </summary>
		public System.DateTime?		  DecisionDate = null;
		
		/// <summary>
		/// APPROVE_FLG : 
		/// </summary>
		public System.Decimal?		  ApproveFlg = null;
		
		/// <summary>
		/// SA_STF_MEM_APPROVED_BY_ID : 
		/// </summary>
		public System.Decimal?		  SaStfMemApprovedById = null;
		
		/// <summary>
		/// IS_LAST : 
		/// </summary>
		public System.Decimal		  IsLast = 0.0m;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// SE_FORM_ID : 
		/// </summary>
		public System.Decimal?		  SeFormId = null;
		
		/// <summary>
		/// SE_USER_INSRT_ID : 
		/// </summary>
		public System.Decimal?		  SeUserInsrtId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdAcadYear _edAcadYearToIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearToId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearToIdSource
      	{
            get { return this._edAcadYearToIdSource; }
            set { this._edAcadYearToIdSource = value; }
      	}
		private EdAcadYear _edAcadYearFromIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearFromId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearFromIdSource
      	{
            get { return this._edAcadYearFromIdSource; }
            set { this._edAcadYearFromIdSource = value; }
      	}
		private EdCdeEnrollChngRsn _edCdeEnrollChngRsnIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeEnrollChngRsn"/>.
		/// </summary>
		/// <value>The source EdCdeEnrollChngRsn for EdCdeEnrollChngRsnId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCdeEnrollChngRsn EdCdeEnrollChngRsnIdSource
      	{
            get { return this._edCdeEnrollChngRsnIdSource; }
            set { this._edCdeEnrollChngRsnIdSource = value; }
      	}
		private EdCodeEnrollType _edCodeEnrollTypeOldIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeEnrollType"/>.
		/// </summary>
		/// <value>The source EdCodeEnrollType for EdCodeEnrollTypeOldId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeEnrollType EdCodeEnrollTypeOldIdSource
      	{
            get { return this._edCodeEnrollTypeOldIdSource; }
            set { this._edCodeEnrollTypeOldIdSource = value; }
      	}
		private EdCodeEnrollType _edCodeEnrollTypeNewIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeEnrollType"/>.
		/// </summary>
		/// <value>The source EdCodeEnrollType for EdCodeEnrollTypeNewId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeEnrollType EdCodeEnrollTypeNewIdSource
      	{
            get { return this._edCodeEnrollTypeNewIdSource; }
            set { this._edCodeEnrollTypeNewIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterFromIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterFromId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterFromIdSource
      	{
            get { return this._edCodeSemesterFromIdSource; }
            set { this._edCodeSemesterFromIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterToIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterToId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterToIdSource
      	{
            get { return this._edCodeSemesterToIdSource; }
            set { this._edCodeSemesterToIdSource = value; }
      	}
		private EdStudSemester _edStudSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStudSemester"/>.
		/// </summary>
		/// <value>The source EdStudSemester for EdStudSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStudSemester EdStudSemesterIdSource
      	{
            get { return this._edStudSemesterIdSource; }
            set { this._edStudSemesterIdSource = value; }
      	}
		private SaStfMember _saStfMemApprovedByIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemApprovedById.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaStfMember SaStfMemApprovedByIdSource
      	{
            get { return this._saStfMemApprovedByIdSource; }
            set { this._saStfMemApprovedByIdSource = value; }
      	}
		private SeForm _seFormIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeForm"/>.
		/// </summary>
		/// <value>The source SeForm for SeFormId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeForm SeFormIdSource
      	{
            get { return this._seFormIdSource; }
            set { this._seFormIdSource = value; }
      	}
		private SeUser _seUserIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeUser SeUserIdSource
      	{
            get { return this._seUserIdSource; }
            set { this._seUserIdSource = value; }
      	}
		private SeUser _seUserInsrtIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserInsrtId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeUser SeUserInsrtIdSource
      	{
            get { return this._seUserInsrtIdSource; }
            set { this._seUserInsrtIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region GsAttchdDocCollection
		
		private TList<GsAttchdDoc> _gsAttchdDocEdStudEnrollChangeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _gsAttchdDocEdStudEnrollChangeId
		/// </summary>
		
		public TList<GsAttchdDoc> GsAttchdDocCollection
		{
			get
			{
				if (_gsAttchdDocEdStudEnrollChangeId == null)
				{
				_gsAttchdDocEdStudEnrollChangeId = new TList<GsAttchdDoc>();
				}
	
				return _gsAttchdDocEdStudEnrollChangeId;
			}
			set { _gsAttchdDocEdStudEnrollChangeId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdStudEnrollChangeEntityData _tmp = new EdStudEnrollChangeEntityData();
						
			_tmp.EdStudEnrollChangeId = this.EdStudEnrollChangeId;
			_tmp.OriginalEdStudEnrollChangeId = this.OriginalEdStudEnrollChangeId;
			
			_tmp.EdStudSemesterId = this.EdStudSemesterId;
			_tmp.EdCodeEnrollTypeOldId = this.EdCodeEnrollTypeOldId;
			_tmp.EdCodeEnrollTypeNewId = this.EdCodeEnrollTypeNewId;
			_tmp.EdAcadYearFromId = this.EdAcadYearFromId;
			_tmp.EdCodeSemesterFromId = this.EdCodeSemesterFromId;
			_tmp.EdAcadYearToId = this.EdAcadYearToId;
			_tmp.EdCodeSemesterToId = this.EdCodeSemesterToId;
			_tmp.SemCount = this.SemCount;
			_tmp.EdCdeEnrollChngRsnId = this.EdCdeEnrollChngRsnId;
			_tmp.ReqDate = this.ReqDate;
			_tmp.DecisionNo = this.DecisionNo;
			_tmp.DecisionDate = this.DecisionDate;
			_tmp.ApproveFlg = this.ApproveFlg;
			_tmp.SaStfMemApprovedById = this.SaStfMemApprovedById;
			_tmp.IsLast = this.IsLast;
			_tmp.Notes = this.Notes;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			_tmp.SeFormId = this.SeFormId;
			_tmp.SeUserInsrtId = this.SeUserInsrtId;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearToIdSource != null)
				_tmp.EdAcadYearToIdSource = MakeCopyOf(this.EdAcadYearToIdSource) as EdAcadYear;
			if (this.EdAcadYearFromIdSource != null)
				_tmp.EdAcadYearFromIdSource = MakeCopyOf(this.EdAcadYearFromIdSource) as EdAcadYear;
			if (this.EdCdeEnrollChngRsnIdSource != null)
				_tmp.EdCdeEnrollChngRsnIdSource = MakeCopyOf(this.EdCdeEnrollChngRsnIdSource) as EdCdeEnrollChngRsn;
			if (this.EdCodeEnrollTypeOldIdSource != null)
				_tmp.EdCodeEnrollTypeOldIdSource = MakeCopyOf(this.EdCodeEnrollTypeOldIdSource) as EdCodeEnrollType;
			if (this.EdCodeEnrollTypeNewIdSource != null)
				_tmp.EdCodeEnrollTypeNewIdSource = MakeCopyOf(this.EdCodeEnrollTypeNewIdSource) as EdCodeEnrollType;
			if (this.EdCodeSemesterFromIdSource != null)
				_tmp.EdCodeSemesterFromIdSource = MakeCopyOf(this.EdCodeSemesterFromIdSource) as EdCodeSemester;
			if (this.EdCodeSemesterToIdSource != null)
				_tmp.EdCodeSemesterToIdSource = MakeCopyOf(this.EdCodeSemesterToIdSource) as EdCodeSemester;
			if (this.EdStudSemesterIdSource != null)
				_tmp.EdStudSemesterIdSource = MakeCopyOf(this.EdStudSemesterIdSource) as EdStudSemester;
			if (this.SaStfMemApprovedByIdSource != null)
				_tmp.SaStfMemApprovedByIdSource = MakeCopyOf(this.SaStfMemApprovedByIdSource) as SaStfMember;
			if (this.SeFormIdSource != null)
				_tmp.SeFormIdSource = MakeCopyOf(this.SeFormIdSource) as SeForm;
			if (this.SeUserIdSource != null)
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource) as SeUser;
			if (this.SeUserInsrtIdSource != null)
				_tmp.SeUserInsrtIdSource = MakeCopyOf(this.SeUserInsrtIdSource) as SeUser;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._gsAttchdDocEdStudEnrollChangeId != null)
				_tmp.GsAttchdDocCollection = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdStudEnrollChangeEntityData _tmp = new EdStudEnrollChangeEntityData();
						
			_tmp.EdStudEnrollChangeId = this.EdStudEnrollChangeId;
			_tmp.OriginalEdStudEnrollChangeId = this.OriginalEdStudEnrollChangeId;
			
			_tmp.EdStudSemesterId = this.EdStudSemesterId;
			_tmp.EdCodeEnrollTypeOldId = this.EdCodeEnrollTypeOldId;
			_tmp.EdCodeEnrollTypeNewId = this.EdCodeEnrollTypeNewId;
			_tmp.EdAcadYearFromId = this.EdAcadYearFromId;
			_tmp.EdCodeSemesterFromId = this.EdCodeSemesterFromId;
			_tmp.EdAcadYearToId = this.EdAcadYearToId;
			_tmp.EdCodeSemesterToId = this.EdCodeSemesterToId;
			_tmp.SemCount = this.SemCount;
			_tmp.EdCdeEnrollChngRsnId = this.EdCdeEnrollChngRsnId;
			_tmp.ReqDate = this.ReqDate;
			_tmp.DecisionNo = this.DecisionNo;
			_tmp.DecisionDate = this.DecisionDate;
			_tmp.ApproveFlg = this.ApproveFlg;
			_tmp.SaStfMemApprovedById = this.SaStfMemApprovedById;
			_tmp.IsLast = this.IsLast;
			_tmp.Notes = this.Notes;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			_tmp.SeFormId = this.SeFormId;
			_tmp.SeUserInsrtId = this.SeUserInsrtId;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearToIdSource != null && existingCopies.Contains(this.EdAcadYearToIdSource))
				_tmp.EdAcadYearToIdSource = existingCopies[this.EdAcadYearToIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearToIdSource = MakeCopyOf(this.EdAcadYearToIdSource, existingCopies) as EdAcadYear;
			if (this.EdAcadYearFromIdSource != null && existingCopies.Contains(this.EdAcadYearFromIdSource))
				_tmp.EdAcadYearFromIdSource = existingCopies[this.EdAcadYearFromIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearFromIdSource = MakeCopyOf(this.EdAcadYearFromIdSource, existingCopies) as EdAcadYear;
			if (this.EdCdeEnrollChngRsnIdSource != null && existingCopies.Contains(this.EdCdeEnrollChngRsnIdSource))
				_tmp.EdCdeEnrollChngRsnIdSource = existingCopies[this.EdCdeEnrollChngRsnIdSource] as EdCdeEnrollChngRsn;
			else
				_tmp.EdCdeEnrollChngRsnIdSource = MakeCopyOf(this.EdCdeEnrollChngRsnIdSource, existingCopies) as EdCdeEnrollChngRsn;
			if (this.EdCodeEnrollTypeOldIdSource != null && existingCopies.Contains(this.EdCodeEnrollTypeOldIdSource))
				_tmp.EdCodeEnrollTypeOldIdSource = existingCopies[this.EdCodeEnrollTypeOldIdSource] as EdCodeEnrollType;
			else
				_tmp.EdCodeEnrollTypeOldIdSource = MakeCopyOf(this.EdCodeEnrollTypeOldIdSource, existingCopies) as EdCodeEnrollType;
			if (this.EdCodeEnrollTypeNewIdSource != null && existingCopies.Contains(this.EdCodeEnrollTypeNewIdSource))
				_tmp.EdCodeEnrollTypeNewIdSource = existingCopies[this.EdCodeEnrollTypeNewIdSource] as EdCodeEnrollType;
			else
				_tmp.EdCodeEnrollTypeNewIdSource = MakeCopyOf(this.EdCodeEnrollTypeNewIdSource, existingCopies) as EdCodeEnrollType;
			if (this.EdCodeSemesterFromIdSource != null && existingCopies.Contains(this.EdCodeSemesterFromIdSource))
				_tmp.EdCodeSemesterFromIdSource = existingCopies[this.EdCodeSemesterFromIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterFromIdSource = MakeCopyOf(this.EdCodeSemesterFromIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCodeSemesterToIdSource != null && existingCopies.Contains(this.EdCodeSemesterToIdSource))
				_tmp.EdCodeSemesterToIdSource = existingCopies[this.EdCodeSemesterToIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterToIdSource = MakeCopyOf(this.EdCodeSemesterToIdSource, existingCopies) as EdCodeSemester;
			if (this.EdStudSemesterIdSource != null && existingCopies.Contains(this.EdStudSemesterIdSource))
				_tmp.EdStudSemesterIdSource = existingCopies[this.EdStudSemesterIdSource] as EdStudSemester;
			else
				_tmp.EdStudSemesterIdSource = MakeCopyOf(this.EdStudSemesterIdSource, existingCopies) as EdStudSemester;
			if (this.SaStfMemApprovedByIdSource != null && existingCopies.Contains(this.SaStfMemApprovedByIdSource))
				_tmp.SaStfMemApprovedByIdSource = existingCopies[this.SaStfMemApprovedByIdSource] as SaStfMember;
			else
				_tmp.SaStfMemApprovedByIdSource = MakeCopyOf(this.SaStfMemApprovedByIdSource, existingCopies) as SaStfMember;
			if (this.SeFormIdSource != null && existingCopies.Contains(this.SeFormIdSource))
				_tmp.SeFormIdSource = existingCopies[this.SeFormIdSource] as SeForm;
			else
				_tmp.SeFormIdSource = MakeCopyOf(this.SeFormIdSource, existingCopies) as SeForm;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				_tmp.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			if (this.SeUserInsrtIdSource != null && existingCopies.Contains(this.SeUserInsrtIdSource))
				_tmp.SeUserInsrtIdSource = existingCopies[this.SeUserInsrtIdSource] as SeUser;
			else
				_tmp.SeUserInsrtIdSource = MakeCopyOf(this.SeUserInsrtIdSource, existingCopies) as SeUser;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.GsAttchdDocCollection = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudEnrollChangeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdStudEnrollChangeColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudEnrollChangeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdStudEnrollChangeColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudEnrollChangeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdStudEnrollChangeColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdStudEnrollChangeEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdStudEnrollChangeEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudEnrollChangeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdStudEnrollChangeColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdStudEnrollChangeEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdStudEnrollChangeEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdStudEnrollChangeEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdStudEnrollChange"/> object.
	/// </remarks>
	public class EdStudEnrollChangeEventArgs : System.EventArgs
	{
		private EdStudEnrollChangeColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdStudEnrollChangeEventArgs class.
		///</summary>
		public EdStudEnrollChangeEventArgs(EdStudEnrollChangeColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdStudEnrollChangeEventArgs class.
		///</summary>
		public EdStudEnrollChangeEventArgs(EdStudEnrollChangeColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdStudEnrollChangeColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdStudEnrollChangeColumn" />
		public EdStudEnrollChangeColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdStudEnrollChange related events.
	///</summary>
	public delegate void EdStudEnrollChangeEventHandler(object sender, EdStudEnrollChangeEventArgs e);
	
	#region EdStudEnrollChangeComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdStudEnrollChangeComparer : System.Collections.Generic.IComparer<EdStudEnrollChange>
	{
		EdStudEnrollChangeColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudEnrollChangeComparer"/> class.
        /// </summary>
		public EdStudEnrollChangeComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudEnrollChangeComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdStudEnrollChangeComparer(EdStudEnrollChangeColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdStudEnrollChange"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdStudEnrollChange"/> to compare.</param>
        /// <param name="b">The second <c>EdStudEnrollChange</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdStudEnrollChange a, EdStudEnrollChange b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdStudEnrollChange entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdStudEnrollChange a, EdStudEnrollChange b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdStudEnrollChangeColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdStudEnrollChangeKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdStudEnrollChange"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdStudEnrollChangeKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdStudEnrollChangeKey class.
		/// </summary>
		public EdStudEnrollChangeKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudEnrollChangeKey class.
		/// </summary>
		public EdStudEnrollChangeKey(EdStudEnrollChangeBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdStudEnrollChangeId = entity.EdStudEnrollChangeId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudEnrollChangeKey class.
		/// </summary>
		public EdStudEnrollChangeKey(System.Decimal _edStudEnrollChangeId)
		{
			#region Init Properties

			this.EdStudEnrollChangeId = _edStudEnrollChangeId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdStudEnrollChangeBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdStudEnrollChangeBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdStudEnrollChangeId property
		private System.Decimal _edStudEnrollChangeId;
		
		/// <summary>
		/// Gets or sets the EdStudEnrollChangeId property.
		/// </summary>
		public System.Decimal EdStudEnrollChangeId
		{
			get { return _edStudEnrollChangeId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdStudEnrollChangeId = value;
				
				_edStudEnrollChangeId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdStudEnrollChangeId = ( values["EdStudEnrollChangeId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdStudEnrollChangeId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdStudEnrollChangeId", EdStudEnrollChangeId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdStudEnrollChangeId: {0}{1}",
								EdStudEnrollChangeId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdStudEnrollChangeColumn Enum
	
	/// <summary>
	/// Enumerate the EdStudEnrollChange columns.
	/// </summary>
	[Serializable]
	public enum EdStudEnrollChangeColumn : int
	{
		/// <summary>
		/// EdStudEnrollChangeId : 
		/// </summary>
		[EnumTextValue("ED_STUD_ENROLL_CHANGE_ID")]
		[ColumnEnum("ED_STUD_ENROLL_CHANGE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdStudEnrollChangeId = 1,
		/// <summary>
		/// EdStudSemesterId : 
		/// </summary>
		[EnumTextValue("ED_STUD_SEMESTER_ID")]
		[ColumnEnum("ED_STUD_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdStudSemesterId = 2,
		/// <summary>
		/// EdCodeEnrollTypeOldId : 
		/// </summary>
		[EnumTextValue("ED_CODE_ENROLL_TYPE_OLD_ID")]
		[ColumnEnum("ED_CODE_ENROLL_TYPE_OLD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeEnrollTypeOldId = 3,
		/// <summary>
		/// EdCodeEnrollTypeNewId : 
		/// </summary>
		[EnumTextValue("ED_CODE_ENROLL_TYPE_NEW_ID")]
		[ColumnEnum("ED_CODE_ENROLL_TYPE_NEW_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeEnrollTypeNewId = 4,
		/// <summary>
		/// EdAcadYearFromId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_FROM_ID")]
		[ColumnEnum("ED_ACAD_YEAR_FROM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdAcadYearFromId = 5,
		/// <summary>
		/// EdCodeSemesterFromId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_FROM_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_FROM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeSemesterFromId = 6,
		/// <summary>
		/// EdAcadYearToId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_TO_ID")]
		[ColumnEnum("ED_ACAD_YEAR_TO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdAcadYearToId = 7,
		/// <summary>
		/// EdCodeSemesterToId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_TO_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_TO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeSemesterToId = 8,
		/// <summary>
		/// SemCount : 
		/// </summary>
		[EnumTextValue("SEM_COUNT")]
		[ColumnEnum("SEM_COUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SemCount = 9,
		/// <summary>
		/// EdCdeEnrollChngRsnId : 
		/// </summary>
		[EnumTextValue("ED_CDE_ENROLL_CHNG_RSN_ID")]
		[ColumnEnum("ED_CDE_ENROLL_CHNG_RSN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCdeEnrollChngRsnId = 10,
		/// <summary>
		/// ReqDate : 
		/// </summary>
		[EnumTextValue("REQ_DATE")]
		[ColumnEnum("REQ_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		ReqDate = 11,
		/// <summary>
		/// DecisionNo : 
		/// </summary>
		[EnumTextValue("DECISION_NO")]
		[ColumnEnum("DECISION_NO", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		DecisionNo = 12,
		/// <summary>
		/// DecisionDate : 
		/// </summary>
		[EnumTextValue("DECISION_DATE")]
		[ColumnEnum("DECISION_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DecisionDate = 13,
		/// <summary>
		/// ApproveFlg : 
		/// </summary>
		[EnumTextValue("APPROVE_FLG")]
		[ColumnEnum("APPROVE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ApproveFlg = 14,
		/// <summary>
		/// SaStfMemApprovedById : 
		/// </summary>
		[EnumTextValue("SA_STF_MEM_APPROVED_BY_ID")]
		[ColumnEnum("SA_STF_MEM_APPROVED_BY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SaStfMemApprovedById = 15,
		/// <summary>
		/// IsLast : 
		/// </summary>
		[EnumTextValue("IS_LAST")]
		[ColumnEnum("IS_LAST", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsLast = 16,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 240)]
		Notes = 17,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 18,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 19,
		/// <summary>
		/// SeFormId : 
		/// </summary>
		[EnumTextValue("SE_FORM_ID")]
		[ColumnEnum("SE_FORM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeFormId = 20,
		/// <summary>
		/// SeUserInsrtId : 
		/// </summary>
		[EnumTextValue("SE_USER_INSRT_ID")]
		[ColumnEnum("SE_USER_INSRT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserInsrtId = 21
	}//End enum

	#endregion EdStudEnrollChangeColumn Enum

} // end namespace
