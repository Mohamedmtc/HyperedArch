
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdSemAgendaForm.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_SEM_AGENDA_FORM' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdSemAgendaFormBase : EntityBase, IEdSemAgendaForm, IEntityId<EdSemAgendaFormKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdSemAgendaFormEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdSemAgendaFormEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdSemAgendaFormEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdSemAgendaForm> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdSemAgendaFormEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdSemAgendaFormEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdSemAgendaFormBase"/> instance.
		///</summary>
		public EdSemAgendaFormBase()
		{
			this.entityData = new EdSemAgendaFormEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdSemAgendaFormBase"/> instance.
		///</summary>
		///<param name="_edSemAgendaFormId">XXXUOB</param>
		///<param name="_edSemesterAgendaId"></param>
		///<param name="_seFormId"></param>
		///<param name="_viewFlg"></param>
		///<param name="_studFlg"></param>
		///<param name="_staffFlg"></param>
		///<param name="_hodFlg"></param>
		///<param name="_regadminFlg"></param>
		public EdSemAgendaFormBase(System.Decimal _edSemAgendaFormId, System.Decimal _edSemesterAgendaId, 
			System.Decimal _seFormId, System.Decimal _viewFlg, System.Decimal? _studFlg, 
			System.Decimal? _staffFlg, System.Decimal? _hodFlg, System.Decimal? _regadminFlg)
		{
			this.entityData = new EdSemAgendaFormEntityData();
			this.backupData = null;

			this.EdSemAgendaFormId = _edSemAgendaFormId;
			this.EdSemesterAgendaId = _edSemesterAgendaId;
			this.SeFormId = _seFormId;
			this.ViewFlg = _viewFlg;
			this.StudFlg = _studFlg;
			this.StaffFlg = _staffFlg;
			this.HodFlg = _hodFlg;
			this.RegadminFlg = _regadminFlg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdSemAgendaForm"/> instance.
		///</summary>
		///<param name="_edSemAgendaFormId">XXXUOB</param>
		///<param name="_edSemesterAgendaId"></param>
		///<param name="_seFormId"></param>
		///<param name="_viewFlg"></param>
		///<param name="_studFlg"></param>
		///<param name="_staffFlg"></param>
		///<param name="_hodFlg"></param>
		///<param name="_regadminFlg"></param>
		public static EdSemAgendaForm CreateEdSemAgendaForm(System.Decimal _edSemAgendaFormId, System.Decimal _edSemesterAgendaId, 
			System.Decimal _seFormId, System.Decimal _viewFlg, System.Decimal? _studFlg, 
			System.Decimal? _staffFlg, System.Decimal? _hodFlg, System.Decimal? _regadminFlg)
		{
			EdSemAgendaForm newEdSemAgendaForm = new EdSemAgendaForm();
			newEdSemAgendaForm.EdSemAgendaFormId = _edSemAgendaFormId;
			newEdSemAgendaForm.EdSemesterAgendaId = _edSemesterAgendaId;
			newEdSemAgendaForm.SeFormId = _seFormId;
			newEdSemAgendaForm.ViewFlg = _viewFlg;
			newEdSemAgendaForm.StudFlg = _studFlg;
			newEdSemAgendaForm.StaffFlg = _staffFlg;
			newEdSemAgendaForm.HodFlg = _hodFlg;
			newEdSemAgendaForm.RegadminFlg = _regadminFlg;
			return newEdSemAgendaForm;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdSemAgendaFormId property. 
		///		XXXUOB
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"XXXUOB"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdSemAgendaFormId
		{
			get
			{
				return this.entityData.EdSemAgendaFormId; 
			}
			
			set
			{
				if (this.entityData.EdSemAgendaFormId == value)
					return;
					
				OnColumnChanging(EdSemAgendaFormColumn.EdSemAgendaFormId, this.entityData.EdSemAgendaFormId);
				this.entityData.EdSemAgendaFormId = value;
				this.EntityId.EdSemAgendaFormId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemAgendaFormColumn.EdSemAgendaFormId, this.entityData.EdSemAgendaFormId);
				OnPropertyChanged("EdSemAgendaFormId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_SEM_AGENDA_FORM_ID property.
		///		XXXUOB
		/// </summary>
		/// <remarks>This is the original value of the ED_SEM_AGENDA_FORM_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdSemAgendaFormId
		{
			get { return this.entityData.OriginalEdSemAgendaFormId; }
			set { this.entityData.OriginalEdSemAgendaFormId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdSemesterAgendaId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdSemesterAgendaId
		{
			get
			{
				return this.entityData.EdSemesterAgendaId; 
			}
			
			set
			{
				if (this.entityData.EdSemesterAgendaId == value)
					return;
					
				OnColumnChanging(EdSemAgendaFormColumn.EdSemesterAgendaId, this.entityData.EdSemesterAgendaId);
				this.entityData.EdSemesterAgendaId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemAgendaFormColumn.EdSemesterAgendaId, this.entityData.EdSemesterAgendaId);
				OnPropertyChanged("EdSemesterAgendaId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeFormId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SeFormId
		{
			get
			{
				return this.entityData.SeFormId; 
			}
			
			set
			{
				if (this.entityData.SeFormId == value)
					return;
					
				OnColumnChanging(EdSemAgendaFormColumn.SeFormId, this.entityData.SeFormId);
				this.entityData.SeFormId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemAgendaFormColumn.SeFormId, this.entityData.SeFormId);
				OnPropertyChanged("SeFormId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ViewFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ViewFlg
		{
			get
			{
				return this.entityData.ViewFlg; 
			}
			
			set
			{
				if (this.entityData.ViewFlg == value)
					return;
					
				OnColumnChanging(EdSemAgendaFormColumn.ViewFlg, this.entityData.ViewFlg);
				this.entityData.ViewFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemAgendaFormColumn.ViewFlg, this.entityData.ViewFlg);
				OnPropertyChanged("ViewFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StudFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsStudFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? StudFlg
		{
			get
			{
				return this.entityData.StudFlg; 
			}
			
			set
			{
				if (this.entityData.StudFlg == value)
					return;
					
				OnColumnChanging(EdSemAgendaFormColumn.StudFlg, this.entityData.StudFlg);
				this.entityData.StudFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemAgendaFormColumn.StudFlg, this.entityData.StudFlg);
				OnPropertyChanged("StudFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StaffFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsStaffFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? StaffFlg
		{
			get
			{
				return this.entityData.StaffFlg; 
			}
			
			set
			{
				if (this.entityData.StaffFlg == value)
					return;
					
				OnColumnChanging(EdSemAgendaFormColumn.StaffFlg, this.entityData.StaffFlg);
				this.entityData.StaffFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemAgendaFormColumn.StaffFlg, this.entityData.StaffFlg);
				OnPropertyChanged("StaffFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HodFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsHodFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HodFlg
		{
			get
			{
				return this.entityData.HodFlg; 
			}
			
			set
			{
				if (this.entityData.HodFlg == value)
					return;
					
				OnColumnChanging(EdSemAgendaFormColumn.HodFlg, this.entityData.HodFlg);
				this.entityData.HodFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemAgendaFormColumn.HodFlg, this.entityData.HodFlg);
				OnPropertyChanged("HodFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RegadminFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRegadminFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RegadminFlg
		{
			get
			{
				return this.entityData.RegadminFlg; 
			}
			
			set
			{
				if (this.entityData.RegadminFlg == value)
					return;
					
				OnColumnChanging(EdSemAgendaFormColumn.RegadminFlg, this.entityData.RegadminFlg);
				this.entityData.RegadminFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemAgendaFormColumn.RegadminFlg, this.entityData.RegadminFlg);
				OnPropertyChanged("RegadminFlg");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdSemesterAgenda"/>.
		/// </summary>
		/// <value>The source EdSemesterAgenda for EdSemesterAgendaId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdSemesterAgenda EdSemesterAgendaIdSource
      	{
            get { return entityData.EdSemesterAgendaIdSource; }
            set { entityData.EdSemesterAgendaIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeForm"/>.
		/// </summary>
		/// <value>The source SeForm for SeFormId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeForm SeFormIdSource
      	{
            get { return entityData.SeFormIdSource; }
            set { entityData.SeFormIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_SEM_AGENDA_FORM"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_SEM_AGENDA_FORM_ID", "ED_SEMESTER_AGENDA_ID", "SE_FORM_ID", "VIEW_FLG", "STUD_FLG", "STAFF_FLG", "HOD_FLG", "REGADMIN_FLG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdSemAgendaFormEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdSemAgendaForm) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdSemAgendaForm>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdSemAgendaForm);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdSemAgendaForm Entity 
		///</summary>
		protected virtual EdSemAgendaForm Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdSemAgendaForm copy = new EdSemAgendaForm();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdSemAgendaFormId = this.EdSemAgendaFormId;
					copy.OriginalEdSemAgendaFormId = this.OriginalEdSemAgendaFormId;
				copy.EdSemesterAgendaId = this.EdSemesterAgendaId;
				copy.SeFormId = this.SeFormId;
				copy.ViewFlg = this.ViewFlg;
				copy.StudFlg = this.StudFlg;
				copy.StaffFlg = this.StaffFlg;
				copy.HodFlg = this.HodFlg;
				copy.RegadminFlg = this.RegadminFlg;
			
			if (this.EdSemesterAgendaIdSource != null && existingCopies.Contains(this.EdSemesterAgendaIdSource))
				copy.EdSemesterAgendaIdSource = existingCopies[this.EdSemesterAgendaIdSource] as EdSemesterAgenda;
			else
				copy.EdSemesterAgendaIdSource = MakeCopyOf(this.EdSemesterAgendaIdSource, existingCopies) as EdSemesterAgenda;
			if (this.SeFormIdSource != null && existingCopies.Contains(this.SeFormIdSource))
				copy.SeFormIdSource = existingCopies[this.SeFormIdSource] as SeForm;
			else
				copy.SeFormIdSource = MakeCopyOf(this.SeFormIdSource, existingCopies) as SeForm;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdSemAgendaForm Entity 
		///</summary>
		public virtual EdSemAgendaForm Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdSemAgendaForm Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdSemAgendaForm DeepCopy()
		{
			return EntityHelper.Clone<EdSemAgendaForm>(this as EdSemAgendaForm);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdSemAgendaFormEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdSemAgendaFormEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdSemAgendaFormEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdSemAgendaFormColumn column)
		{
			switch(column)
			{
					case EdSemAgendaFormColumn.EdSemAgendaFormId:
					return entityData.EdSemAgendaFormId != _originalData.EdSemAgendaFormId;
					case EdSemAgendaFormColumn.EdSemesterAgendaId:
					return entityData.EdSemesterAgendaId != _originalData.EdSemesterAgendaId;
					case EdSemAgendaFormColumn.SeFormId:
					return entityData.SeFormId != _originalData.SeFormId;
					case EdSemAgendaFormColumn.ViewFlg:
					return entityData.ViewFlg != _originalData.ViewFlg;
					case EdSemAgendaFormColumn.StudFlg:
					return entityData.StudFlg != _originalData.StudFlg;
					case EdSemAgendaFormColumn.StaffFlg:
					return entityData.StaffFlg != _originalData.StaffFlg;
					case EdSemAgendaFormColumn.HodFlg:
					return entityData.HodFlg != _originalData.HodFlg;
					case EdSemAgendaFormColumn.RegadminFlg:
					return entityData.RegadminFlg != _originalData.RegadminFlg;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdSemAgendaFormColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdSemAgendaFormId != _originalData.EdSemAgendaFormId;
			result = result || entityData.EdSemesterAgendaId != _originalData.EdSemesterAgendaId;
			result = result || entityData.SeFormId != _originalData.SeFormId;
			result = result || entityData.ViewFlg != _originalData.ViewFlg;
			result = result || entityData.StudFlg != _originalData.StudFlg;
			result = result || entityData.StaffFlg != _originalData.StaffFlg;
			result = result || entityData.HodFlg != _originalData.HodFlg;
			result = result || entityData.RegadminFlg != _originalData.RegadminFlg;
			return result;
		}	
		
		///<summary>
		///  Returns a EdSemAgendaForm Entity with the original data.
		///</summary>
		public EdSemAgendaForm GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdSemAgendaForm(
				_originalData.EdSemAgendaFormId,
				_originalData.EdSemesterAgendaId,
				_originalData.SeFormId,
				_originalData.ViewFlg,
				_originalData.StudFlg,
				_originalData.StaffFlg,
				_originalData.HodFlg,
				_originalData.RegadminFlg
				);
				
			return (EdSemAgendaForm)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdSemAgendaFormBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdSemAgendaFormBase)
				return ValueEquals(this, (EdSemAgendaFormBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdSemAgendaFormBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdSemAgendaFormId.GetHashCode() ^ 
					this.EdSemesterAgendaId.GetHashCode() ^ 
					this.SeFormId.GetHashCode() ^ 
					this.ViewFlg.GetHashCode() ^ 
					((this.StudFlg == null) ? string.Empty : this.StudFlg.ToString()).GetHashCode() ^ 
					((this.StaffFlg == null) ? string.Empty : this.StaffFlg.ToString()).GetHashCode() ^ 
					((this.HodFlg == null) ? string.Empty : this.HodFlg.ToString()).GetHashCode() ^ 
					((this.RegadminFlg == null) ? string.Empty : this.RegadminFlg.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdSemAgendaFormBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdSemAgendaFormBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdSemAgendaFormBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdSemAgendaFormBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdSemAgendaFormBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdSemAgendaFormBase Object1, EdSemAgendaFormBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdSemAgendaFormId != Object2.EdSemAgendaFormId)
				equal = false;
			if (Object1.EdSemesterAgendaId != Object2.EdSemesterAgendaId)
				equal = false;
			if (Object1.SeFormId != Object2.SeFormId)
				equal = false;
			if (Object1.ViewFlg != Object2.ViewFlg)
				equal = false;
			if ( Object1.StudFlg != null && Object2.StudFlg != null )
			{
				if (Object1.StudFlg != Object2.StudFlg)
					equal = false;
			}
			else if (Object1.StudFlg == null ^ Object2.StudFlg == null )
			{
				equal = false;
			}
			if ( Object1.StaffFlg != null && Object2.StaffFlg != null )
			{
				if (Object1.StaffFlg != Object2.StaffFlg)
					equal = false;
			}
			else if (Object1.StaffFlg == null ^ Object2.StaffFlg == null )
			{
				equal = false;
			}
			if ( Object1.HodFlg != null && Object2.HodFlg != null )
			{
				if (Object1.HodFlg != Object2.HodFlg)
					equal = false;
			}
			else if (Object1.HodFlg == null ^ Object2.HodFlg == null )
			{
				equal = false;
			}
			if ( Object1.RegadminFlg != null && Object2.RegadminFlg != null )
			{
				if (Object1.RegadminFlg != Object2.RegadminFlg)
					equal = false;
			}
			else if (Object1.RegadminFlg == null ^ Object2.RegadminFlg == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdSemAgendaFormBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdSemAgendaFormComparer GetComparer()
        {
            return new EdSemAgendaFormComparer();
        }
        */

        // Comparer delegates back to EdSemAgendaForm
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdSemAgendaForm rhs, EdSemAgendaFormColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdSemAgendaFormColumn.EdSemAgendaFormId:
            		return this.EdSemAgendaFormId.CompareTo(rhs.EdSemAgendaFormId);
            		
            		                 
            	
            	
            	case EdSemAgendaFormColumn.EdSemesterAgendaId:
            		return this.EdSemesterAgendaId.CompareTo(rhs.EdSemesterAgendaId);
            		
            		                 
            	
            	
            	case EdSemAgendaFormColumn.SeFormId:
            		return this.SeFormId.CompareTo(rhs.SeFormId);
            		
            		                 
            	
            	
            	case EdSemAgendaFormColumn.ViewFlg:
            		return this.ViewFlg.CompareTo(rhs.ViewFlg);
            		
            		                 
            	
            	
            	case EdSemAgendaFormColumn.StudFlg:
            		return this.StudFlg.Value.CompareTo(rhs.StudFlg.Value);
            		
            		                 
            	
            	
            	case EdSemAgendaFormColumn.StaffFlg:
            		return this.StaffFlg.Value.CompareTo(rhs.StaffFlg.Value);
            		
            		                 
            	
            	
            	case EdSemAgendaFormColumn.HodFlg:
            		return this.HodFlg.Value.CompareTo(rhs.HodFlg.Value);
            		
            		                 
            	
            	
            	case EdSemAgendaFormColumn.RegadminFlg:
            		return this.RegadminFlg.Value.CompareTo(rhs.RegadminFlg.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdSemAgendaFormKey> Members
		
		// member variable for the EntityId property
		private EdSemAgendaFormKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdSemAgendaFormKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdSemAgendaFormKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdSemAgendaForm")
					.Append("|").Append( this.EdSemAgendaFormId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{9}{8}- EdSemAgendaFormId: {0}{8}- EdSemesterAgendaId: {1}{8}- SeFormId: {2}{8}- ViewFlg: {3}{8}- StudFlg: {4}{8}- StaffFlg: {5}{8}- HodFlg: {6}{8}- RegadminFlg: {7}{8}{10}", 
				this.EdSemAgendaFormId,
				this.EdSemesterAgendaId,
				this.SeFormId,
				this.ViewFlg,
				(this.StudFlg == null) ? string.Empty : this.StudFlg.ToString(),
				(this.StaffFlg == null) ? string.Empty : this.StaffFlg.ToString(),
				(this.HodFlg == null) ? string.Empty : this.HodFlg.ToString(),
				(this.RegadminFlg == null) ? string.Empty : this.RegadminFlg.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_SEM_AGENDA_FORM' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdSemAgendaFormEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_SEM_AGENDA_FORM_ID : XXXUOB
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_SEM_AGENDA_FORM"</remarks>
		public System.Decimal EdSemAgendaFormId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdSemAgendaFormId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_SEMESTER_AGENDA_ID : 
		/// </summary>
		public System.Decimal		  EdSemesterAgendaId = 0.0m;
		
		/// <summary>
		/// SE_FORM_ID : 
		/// </summary>
		public System.Decimal		  SeFormId = 0.0m;
		
		/// <summary>
		/// VIEW_FLG : 
		/// </summary>
		public System.Decimal		  ViewFlg = 0.0m;
		
		/// <summary>
		/// STUD_FLG : 
		/// </summary>
		public System.Decimal?		  StudFlg = null;
		
		/// <summary>
		/// STAFF_FLG : 
		/// </summary>
		public System.Decimal?		  StaffFlg = null;
		
		/// <summary>
		/// HOD_FLG : 
		/// </summary>
		public System.Decimal?		  HodFlg = null;
		
		/// <summary>
		/// REGADMIN_FLG : 
		/// </summary>
		public System.Decimal?		  RegadminFlg = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdSemesterAgenda _edSemesterAgendaIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdSemesterAgenda"/>.
		/// </summary>
		/// <value>The source EdSemesterAgenda for EdSemesterAgendaId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdSemesterAgenda EdSemesterAgendaIdSource
      	{
            get { return this._edSemesterAgendaIdSource; }
            set { this._edSemesterAgendaIdSource = value; }
      	}
		private SeForm _seFormIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeForm"/>.
		/// </summary>
		/// <value>The source SeForm for SeFormId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeForm SeFormIdSource
      	{
            get { return this._seFormIdSource; }
            set { this._seFormIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdSemAgendaFormEntityData _tmp = new EdSemAgendaFormEntityData();
						
			_tmp.EdSemAgendaFormId = this.EdSemAgendaFormId;
			_tmp.OriginalEdSemAgendaFormId = this.OriginalEdSemAgendaFormId;
			
			_tmp.EdSemesterAgendaId = this.EdSemesterAgendaId;
			_tmp.SeFormId = this.SeFormId;
			_tmp.ViewFlg = this.ViewFlg;
			_tmp.StudFlg = this.StudFlg;
			_tmp.StaffFlg = this.StaffFlg;
			_tmp.HodFlg = this.HodFlg;
			_tmp.RegadminFlg = this.RegadminFlg;
			
			#region Source Parent Composite Entities
			if (this.EdSemesterAgendaIdSource != null)
				_tmp.EdSemesterAgendaIdSource = MakeCopyOf(this.EdSemesterAgendaIdSource) as EdSemesterAgenda;
			if (this.SeFormIdSource != null)
				_tmp.SeFormIdSource = MakeCopyOf(this.SeFormIdSource) as SeForm;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdSemAgendaFormEntityData _tmp = new EdSemAgendaFormEntityData();
						
			_tmp.EdSemAgendaFormId = this.EdSemAgendaFormId;
			_tmp.OriginalEdSemAgendaFormId = this.OriginalEdSemAgendaFormId;
			
			_tmp.EdSemesterAgendaId = this.EdSemesterAgendaId;
			_tmp.SeFormId = this.SeFormId;
			_tmp.ViewFlg = this.ViewFlg;
			_tmp.StudFlg = this.StudFlg;
			_tmp.StaffFlg = this.StaffFlg;
			_tmp.HodFlg = this.HodFlg;
			_tmp.RegadminFlg = this.RegadminFlg;
			
			#region Source Parent Composite Entities
			if (this.EdSemesterAgendaIdSource != null && existingCopies.Contains(this.EdSemesterAgendaIdSource))
				_tmp.EdSemesterAgendaIdSource = existingCopies[this.EdSemesterAgendaIdSource] as EdSemesterAgenda;
			else
				_tmp.EdSemesterAgendaIdSource = MakeCopyOf(this.EdSemesterAgendaIdSource, existingCopies) as EdSemesterAgenda;
			if (this.SeFormIdSource != null && existingCopies.Contains(this.SeFormIdSource))
				_tmp.SeFormIdSource = existingCopies[this.SeFormIdSource] as SeForm;
			else
				_tmp.SeFormIdSource = MakeCopyOf(this.SeFormIdSource, existingCopies) as SeForm;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdSemAgendaFormColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdSemAgendaFormColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdSemAgendaFormColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdSemAgendaFormColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdSemAgendaFormColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdSemAgendaFormColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdSemAgendaFormEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdSemAgendaFormEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdSemAgendaFormColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdSemAgendaFormColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdSemAgendaFormEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdSemAgendaFormEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdSemAgendaFormEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdSemAgendaForm"/> object.
	/// </remarks>
	public class EdSemAgendaFormEventArgs : System.EventArgs
	{
		private EdSemAgendaFormColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdSemAgendaFormEventArgs class.
		///</summary>
		public EdSemAgendaFormEventArgs(EdSemAgendaFormColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdSemAgendaFormEventArgs class.
		///</summary>
		public EdSemAgendaFormEventArgs(EdSemAgendaFormColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdSemAgendaFormColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdSemAgendaFormColumn" />
		public EdSemAgendaFormColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdSemAgendaForm related events.
	///</summary>
	public delegate void EdSemAgendaFormEventHandler(object sender, EdSemAgendaFormEventArgs e);
	
	#region EdSemAgendaFormComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdSemAgendaFormComparer : System.Collections.Generic.IComparer<EdSemAgendaForm>
	{
		EdSemAgendaFormColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdSemAgendaFormComparer"/> class.
        /// </summary>
		public EdSemAgendaFormComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdSemAgendaFormComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdSemAgendaFormComparer(EdSemAgendaFormColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdSemAgendaForm"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdSemAgendaForm"/> to compare.</param>
        /// <param name="b">The second <c>EdSemAgendaForm</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdSemAgendaForm a, EdSemAgendaForm b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdSemAgendaForm entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdSemAgendaForm a, EdSemAgendaForm b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdSemAgendaFormColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdSemAgendaFormKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdSemAgendaForm"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdSemAgendaFormKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdSemAgendaFormKey class.
		/// </summary>
		public EdSemAgendaFormKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdSemAgendaFormKey class.
		/// </summary>
		public EdSemAgendaFormKey(EdSemAgendaFormBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdSemAgendaFormId = entity.EdSemAgendaFormId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdSemAgendaFormKey class.
		/// </summary>
		public EdSemAgendaFormKey(System.Decimal _edSemAgendaFormId)
		{
			#region Init Properties

			this.EdSemAgendaFormId = _edSemAgendaFormId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdSemAgendaFormBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdSemAgendaFormBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdSemAgendaFormId property
		private System.Decimal _edSemAgendaFormId;
		
		/// <summary>
		/// Gets or sets the EdSemAgendaFormId property.
		/// </summary>
		public System.Decimal EdSemAgendaFormId
		{
			get { return _edSemAgendaFormId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdSemAgendaFormId = value;
				
				_edSemAgendaFormId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdSemAgendaFormId = ( values["EdSemAgendaFormId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdSemAgendaFormId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdSemAgendaFormId", EdSemAgendaFormId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdSemAgendaFormId: {0}{1}",
								EdSemAgendaFormId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdSemAgendaFormColumn Enum
	
	/// <summary>
	/// Enumerate the EdSemAgendaForm columns.
	/// </summary>
	[Serializable]
	public enum EdSemAgendaFormColumn : int
	{
		/// <summary>
		/// EdSemAgendaFormId : XXXUOB
		/// </summary>
		[EnumTextValue("ED_SEM_AGENDA_FORM_ID")]
		[ColumnEnum("ED_SEM_AGENDA_FORM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdSemAgendaFormId = 1,
		/// <summary>
		/// EdSemesterAgendaId : 
		/// </summary>
		[EnumTextValue("ED_SEMESTER_AGENDA_ID")]
		[ColumnEnum("ED_SEMESTER_AGENDA_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdSemesterAgendaId = 2,
		/// <summary>
		/// SeFormId : 
		/// </summary>
		[EnumTextValue("SE_FORM_ID")]
		[ColumnEnum("SE_FORM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SeFormId = 3,
		/// <summary>
		/// ViewFlg : 
		/// </summary>
		[EnumTextValue("VIEW_FLG")]
		[ColumnEnum("VIEW_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ViewFlg = 4,
		/// <summary>
		/// StudFlg : 
		/// </summary>
		[EnumTextValue("STUD_FLG")]
		[ColumnEnum("STUD_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		StudFlg = 5,
		/// <summary>
		/// StaffFlg : 
		/// </summary>
		[EnumTextValue("STAFF_FLG")]
		[ColumnEnum("STAFF_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		StaffFlg = 6,
		/// <summary>
		/// HodFlg : 
		/// </summary>
		[EnumTextValue("HOD_FLG")]
		[ColumnEnum("HOD_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HodFlg = 7,
		/// <summary>
		/// RegadminFlg : 
		/// </summary>
		[EnumTextValue("REGADMIN_FLG")]
		[ColumnEnum("REGADMIN_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RegadminFlg = 8
	}//End enum

	#endregion EdSemAgendaFormColumn Enum

} // end namespace
