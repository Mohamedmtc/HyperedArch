
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ScSchdlHdr.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SC_SCHDL_HDR' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ScSchdlHdrBase : EntityBase, IScSchdlHdr, IEntityId<ScSchdlHdrKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ScSchdlHdrEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ScSchdlHdrEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ScSchdlHdrEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ScSchdlHdr> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ScSchdlHdrEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ScSchdlHdrEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ScSchdlHdrBase"/> instance.
		///</summary>
		public ScSchdlHdrBase()
		{
			this.entityData = new ScSchdlHdrEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ScSchdlHdrBase"/> instance.
		///</summary>
		///<param name="_scSchdlHdrId">New Group Schedule</param>
		///<param name="_scCdeGrpTypeId">مجموعة-شعبة-مقرر</param>
		///<param name="_scGroupInfoId">مجموعة-شعبة-مجموعة مقرر</param>
		///<param name="_schdlTypeId">1:Week/Date   2:Days(CH normal)</param>
		///<param name="_scSchdlPeriodId">فترات الجدول-اسابيع الجدول  - فى حالة مجموعة او شعبة</param>
		public ScSchdlHdrBase(System.Decimal _scSchdlHdrId, System.Decimal _scCdeGrpTypeId, 
			System.Decimal _scGroupInfoId, System.Int32? _schdlTypeId, System.Decimal? _scSchdlPeriodId)
		{
			this.entityData = new ScSchdlHdrEntityData();
			this.backupData = null;

			this.ScSchdlHdrId = _scSchdlHdrId;
			this.ScCdeGrpTypeId = _scCdeGrpTypeId;
			this.ScGroupInfoId = _scGroupInfoId;
			this.SchdlTypeId = _schdlTypeId;
			this.ScSchdlPeriodId = _scSchdlPeriodId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ScSchdlHdr"/> instance.
		///</summary>
		///<param name="_scSchdlHdrId">New Group Schedule</param>
		///<param name="_scCdeGrpTypeId">مجموعة-شعبة-مقرر</param>
		///<param name="_scGroupInfoId">مجموعة-شعبة-مجموعة مقرر</param>
		///<param name="_schdlTypeId">1:Week/Date   2:Days(CH normal)</param>
		///<param name="_scSchdlPeriodId">فترات الجدول-اسابيع الجدول  - فى حالة مجموعة او شعبة</param>
		public static ScSchdlHdr CreateScSchdlHdr(System.Decimal _scSchdlHdrId, System.Decimal _scCdeGrpTypeId, 
			System.Decimal _scGroupInfoId, System.Int32? _schdlTypeId, System.Decimal? _scSchdlPeriodId)
		{
			ScSchdlHdr newScSchdlHdr = new ScSchdlHdr();
			newScSchdlHdr.ScSchdlHdrId = _scSchdlHdrId;
			newScSchdlHdr.ScCdeGrpTypeId = _scCdeGrpTypeId;
			newScSchdlHdr.ScGroupInfoId = _scGroupInfoId;
			newScSchdlHdr.SchdlTypeId = _schdlTypeId;
			newScSchdlHdr.ScSchdlPeriodId = _scSchdlPeriodId;
			return newScSchdlHdr;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the ScSchdlHdrId property. 
		///		New Group Schedule
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"New Group Schedule"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal ScSchdlHdrId
		{
			get
			{
				return this.entityData.ScSchdlHdrId; 
			}
			
			set
			{
				if (this.entityData.ScSchdlHdrId == value)
					return;
					
				OnColumnChanging(ScSchdlHdrColumn.ScSchdlHdrId, this.entityData.ScSchdlHdrId);
				this.entityData.ScSchdlHdrId = value;
				this.EntityId.ScSchdlHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSchdlHdrColumn.ScSchdlHdrId, this.entityData.ScSchdlHdrId);
				OnPropertyChanged("ScSchdlHdrId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SC_SCHDL_HDR_ID property.
		///		New Group Schedule
		/// </summary>
		/// <remarks>This is the original value of the SC_SCHDL_HDR_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalScSchdlHdrId
		{
			get { return this.entityData.OriginalScSchdlHdrId; }
			set { this.entityData.OriginalScSchdlHdrId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the ScCdeGrpTypeId property. 
		///		مجموعة-شعبة-مقرر
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"مجموعة-شعبة-مقرر"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ScCdeGrpTypeId
		{
			get
			{
				return this.entityData.ScCdeGrpTypeId; 
			}
			
			set
			{
				if (this.entityData.ScCdeGrpTypeId == value)
					return;
					
				OnColumnChanging(ScSchdlHdrColumn.ScCdeGrpTypeId, this.entityData.ScCdeGrpTypeId);
				this.entityData.ScCdeGrpTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSchdlHdrColumn.ScCdeGrpTypeId, this.entityData.ScCdeGrpTypeId);
				OnPropertyChanged("ScCdeGrpTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScGroupInfoId property. 
		///		مجموعة-شعبة-مجموعة مقرر
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"مجموعة-شعبة-مجموعة مقرر"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ScGroupInfoId
		{
			get
			{
				return this.entityData.ScGroupInfoId; 
			}
			
			set
			{
				if (this.entityData.ScGroupInfoId == value)
					return;
					
				OnColumnChanging(ScSchdlHdrColumn.ScGroupInfoId, this.entityData.ScGroupInfoId);
				this.entityData.ScGroupInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSchdlHdrColumn.ScGroupInfoId, this.entityData.ScGroupInfoId);
				OnPropertyChanged("ScGroupInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SchdlTypeId property. 
		///		1:Week/Date   2:Days(CH normal)
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSchdlTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"1:Week/Date   2:Days(CH normal)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SchdlTypeId
		{
			get
			{
				return this.entityData.SchdlTypeId; 
			}
			
			set
			{
				if (this.entityData.SchdlTypeId == value)
					return;
					
				OnColumnChanging(ScSchdlHdrColumn.SchdlTypeId, this.entityData.SchdlTypeId);
				this.entityData.SchdlTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSchdlHdrColumn.SchdlTypeId, this.entityData.SchdlTypeId);
				OnPropertyChanged("SchdlTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScSchdlPeriodId property. 
		///		فترات الجدول-اسابيع الجدول  - فى حالة مجموعة او شعبة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScSchdlPeriodIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"فترات الجدول-اسابيع الجدول  - فى حالة مجموعة او شعبة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScSchdlPeriodId
		{
			get
			{
				return this.entityData.ScSchdlPeriodId; 
			}
			
			set
			{
				if (this.entityData.ScSchdlPeriodId == value)
					return;
					
				OnColumnChanging(ScSchdlHdrColumn.ScSchdlPeriodId, this.entityData.ScSchdlPeriodId);
				this.entityData.ScSchdlPeriodId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSchdlHdrColumn.ScSchdlPeriodId, this.entityData.ScSchdlPeriodId);
				OnPropertyChanged("ScSchdlPeriodId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="ScCdeGrpType"/>.
		/// </summary>
		/// <value>The source ScCdeGrpType for ScCdeGrpTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScCdeGrpType ScCdeGrpTypeIdSource
      	{
            get { return entityData.ScCdeGrpTypeIdSource; }
            set { entityData.ScCdeGrpTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScGroupInfo"/>.
		/// </summary>
		/// <value>The source ScGroupInfo for ScGroupInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScGroupInfo ScGroupInfoIdSource
      	{
            get { return entityData.ScGroupInfoIdSource; }
            set { entityData.ScGroupInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScSchdlPeriod"/>.
		/// </summary>
		/// <value>The source ScSchdlPeriod for ScSchdlPeriodId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScSchdlPeriod ScSchdlPeriodIdSource
      	{
            get { return entityData.ScSchdlPeriodIdSource; }
            set { entityData.ScSchdlPeriodIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of ScSchdlSlot objects
		///	which are related to this object through the relation FK_SC_SCHDL_SLOT_SC_SCHDL_HDR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScSchdlSlot> ScSchdlSlotCollection
		{
			get { return entityData.ScSchdlSlotCollection; }
			set { entityData.ScSchdlSlotCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SC_SCHDL_HDR"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SC_SCHDL_HDR_ID", "SC_CDE_GRP_TYPE_ID", "SC_GROUP_INFO_ID", "SCHDL_TYPE_ID", "SC_SCHDL_PERIOD_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ScSchdlHdrEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ScSchdlHdr) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ScSchdlHdr>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ScSchdlHdr);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ScSchdlHdr Entity 
		///</summary>
		protected virtual ScSchdlHdr Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ScSchdlHdr copy = new ScSchdlHdr();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.ScSchdlHdrId = this.ScSchdlHdrId;
					copy.OriginalScSchdlHdrId = this.OriginalScSchdlHdrId;
				copy.ScCdeGrpTypeId = this.ScCdeGrpTypeId;
				copy.ScGroupInfoId = this.ScGroupInfoId;
				copy.SchdlTypeId = this.SchdlTypeId;
				copy.ScSchdlPeriodId = this.ScSchdlPeriodId;
			
			if (this.ScCdeGrpTypeIdSource != null && existingCopies.Contains(this.ScCdeGrpTypeIdSource))
				copy.ScCdeGrpTypeIdSource = existingCopies[this.ScCdeGrpTypeIdSource] as ScCdeGrpType;
			else
				copy.ScCdeGrpTypeIdSource = MakeCopyOf(this.ScCdeGrpTypeIdSource, existingCopies) as ScCdeGrpType;
			if (this.ScGroupInfoIdSource != null && existingCopies.Contains(this.ScGroupInfoIdSource))
				copy.ScGroupInfoIdSource = existingCopies[this.ScGroupInfoIdSource] as ScGroupInfo;
			else
				copy.ScGroupInfoIdSource = MakeCopyOf(this.ScGroupInfoIdSource, existingCopies) as ScGroupInfo;
			if (this.ScSchdlPeriodIdSource != null && existingCopies.Contains(this.ScSchdlPeriodIdSource))
				copy.ScSchdlPeriodIdSource = existingCopies[this.ScSchdlPeriodIdSource] as ScSchdlPeriod;
			else
				copy.ScSchdlPeriodIdSource = MakeCopyOf(this.ScSchdlPeriodIdSource, existingCopies) as ScSchdlPeriod;
		
			//deep copy nested objects
			copy.ScSchdlSlotCollection = (TList<ScSchdlSlot>) MakeCopyOf(this.ScSchdlSlotCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ScSchdlHdr Entity 
		///</summary>
		public virtual ScSchdlHdr Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ScSchdlHdr Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ScSchdlHdr DeepCopy()
		{
			return EntityHelper.Clone<ScSchdlHdr>(this as ScSchdlHdr);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ScSchdlHdrEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ScSchdlHdrEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ScSchdlHdrEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ScSchdlHdrColumn column)
		{
			switch(column)
			{
					case ScSchdlHdrColumn.ScSchdlHdrId:
					return entityData.ScSchdlHdrId != _originalData.ScSchdlHdrId;
					case ScSchdlHdrColumn.ScCdeGrpTypeId:
					return entityData.ScCdeGrpTypeId != _originalData.ScCdeGrpTypeId;
					case ScSchdlHdrColumn.ScGroupInfoId:
					return entityData.ScGroupInfoId != _originalData.ScGroupInfoId;
					case ScSchdlHdrColumn.SchdlTypeId:
					return entityData.SchdlTypeId != _originalData.SchdlTypeId;
					case ScSchdlHdrColumn.ScSchdlPeriodId:
					return entityData.ScSchdlPeriodId != _originalData.ScSchdlPeriodId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ScSchdlHdrColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.ScSchdlHdrId != _originalData.ScSchdlHdrId;
			result = result || entityData.ScCdeGrpTypeId != _originalData.ScCdeGrpTypeId;
			result = result || entityData.ScGroupInfoId != _originalData.ScGroupInfoId;
			result = result || entityData.SchdlTypeId != _originalData.SchdlTypeId;
			result = result || entityData.ScSchdlPeriodId != _originalData.ScSchdlPeriodId;
			return result;
		}	
		
		///<summary>
		///  Returns a ScSchdlHdr Entity with the original data.
		///</summary>
		public ScSchdlHdr GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateScSchdlHdr(
				_originalData.ScSchdlHdrId,
				_originalData.ScCdeGrpTypeId,
				_originalData.ScGroupInfoId,
				_originalData.SchdlTypeId,
				_originalData.ScSchdlPeriodId
				);
				
			return (ScSchdlHdr)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ScSchdlHdrBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ScSchdlHdrBase)
				return ValueEquals(this, (ScSchdlHdrBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ScSchdlHdrBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.ScSchdlHdrId.GetHashCode() ^ 
					this.ScCdeGrpTypeId.GetHashCode() ^ 
					this.ScGroupInfoId.GetHashCode() ^ 
					((this.SchdlTypeId == null) ? string.Empty : this.SchdlTypeId.ToString()).GetHashCode() ^ 
					((this.ScSchdlPeriodId == null) ? string.Empty : this.ScSchdlPeriodId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ScSchdlHdrBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ScSchdlHdrBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ScSchdlHdrBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ScSchdlHdrBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ScSchdlHdrBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ScSchdlHdrBase Object1, ScSchdlHdrBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ScSchdlHdrId != Object2.ScSchdlHdrId)
				equal = false;
			if (Object1.ScCdeGrpTypeId != Object2.ScCdeGrpTypeId)
				equal = false;
			if (Object1.ScGroupInfoId != Object2.ScGroupInfoId)
				equal = false;
			if ( Object1.SchdlTypeId != null && Object2.SchdlTypeId != null )
			{
				if (Object1.SchdlTypeId != Object2.SchdlTypeId)
					equal = false;
			}
			else if (Object1.SchdlTypeId == null ^ Object2.SchdlTypeId == null )
			{
				equal = false;
			}
			if ( Object1.ScSchdlPeriodId != null && Object2.ScSchdlPeriodId != null )
			{
				if (Object1.ScSchdlPeriodId != Object2.ScSchdlPeriodId)
					equal = false;
			}
			else if (Object1.ScSchdlPeriodId == null ^ Object2.ScSchdlPeriodId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ScSchdlHdrBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ScSchdlHdrComparer GetComparer()
        {
            return new ScSchdlHdrComparer();
        }
        */

        // Comparer delegates back to ScSchdlHdr
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ScSchdlHdr rhs, ScSchdlHdrColumn which)
        {
            switch (which)
            {
            	
            	
            	case ScSchdlHdrColumn.ScSchdlHdrId:
            		return this.ScSchdlHdrId.CompareTo(rhs.ScSchdlHdrId);
            		
            		                 
            	
            	
            	case ScSchdlHdrColumn.ScCdeGrpTypeId:
            		return this.ScCdeGrpTypeId.CompareTo(rhs.ScCdeGrpTypeId);
            		
            		                 
            	
            	
            	case ScSchdlHdrColumn.ScGroupInfoId:
            		return this.ScGroupInfoId.CompareTo(rhs.ScGroupInfoId);
            		
            		                 
            	
            	
            	case ScSchdlHdrColumn.SchdlTypeId:
            		return this.SchdlTypeId.Value.CompareTo(rhs.SchdlTypeId.Value);
            		
            		                 
            	
            	
            	case ScSchdlHdrColumn.ScSchdlPeriodId:
            		return this.ScSchdlPeriodId.Value.CompareTo(rhs.ScSchdlPeriodId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ScSchdlHdrKey> Members
		
		// member variable for the EntityId property
		private ScSchdlHdrKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ScSchdlHdrKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ScSchdlHdrKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ScSchdlHdr")
					.Append("|").Append( this.ScSchdlHdrId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{6}{5}- ScSchdlHdrId: {0}{5}- ScCdeGrpTypeId: {1}{5}- ScGroupInfoId: {2}{5}- SchdlTypeId: {3}{5}- ScSchdlPeriodId: {4}{5}{7}", 
				this.ScSchdlHdrId,
				this.ScCdeGrpTypeId,
				this.ScGroupInfoId,
				(this.SchdlTypeId == null) ? string.Empty : this.SchdlTypeId.ToString(),
				(this.ScSchdlPeriodId == null) ? string.Empty : this.ScSchdlPeriodId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SC_SCHDL_HDR' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ScSchdlHdrEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SC_SCHDL_HDR_ID : New Group Schedule
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SC_SCHDL_HDR"</remarks>
		public System.Decimal ScSchdlHdrId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalScSchdlHdrId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SC_CDE_GRP_TYPE_ID : مجموعة-شعبة-مقرر
		/// </summary>
		public System.Decimal		  ScCdeGrpTypeId = 0.0m;
		
		/// <summary>
		/// SC_GROUP_INFO_ID : مجموعة-شعبة-مجموعة مقرر
		/// </summary>
		public System.Decimal		  ScGroupInfoId = 0.0m;
		
		/// <summary>
		/// SCHDL_TYPE_ID : 1:Week/Date   2:Days(CH normal)
		/// </summary>
		public System.Int32?		  SchdlTypeId = null;
		
		/// <summary>
		/// SC_SCHDL_PERIOD_ID : فترات الجدول-اسابيع الجدول  - فى حالة مجموعة او شعبة
		/// </summary>
		public System.Decimal?		  ScSchdlPeriodId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private ScCdeGrpType _scCdeGrpTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScCdeGrpType"/>.
		/// </summary>
		/// <value>The source ScCdeGrpType for ScCdeGrpTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScCdeGrpType ScCdeGrpTypeIdSource
      	{
            get { return this._scCdeGrpTypeIdSource; }
            set { this._scCdeGrpTypeIdSource = value; }
      	}
		private ScGroupInfo _scGroupInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScGroupInfo"/>.
		/// </summary>
		/// <value>The source ScGroupInfo for ScGroupInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScGroupInfo ScGroupInfoIdSource
      	{
            get { return this._scGroupInfoIdSource; }
            set { this._scGroupInfoIdSource = value; }
      	}
		private ScSchdlPeriod _scSchdlPeriodIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScSchdlPeriod"/>.
		/// </summary>
		/// <value>The source ScSchdlPeriod for ScSchdlPeriodId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScSchdlPeriod ScSchdlPeriodIdSource
      	{
            get { return this._scSchdlPeriodIdSource; }
            set { this._scSchdlPeriodIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region ScSchdlSlotCollection
		
		private TList<ScSchdlSlot> _scSchdlSlotScSchdlHdrId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scSchdlSlotScSchdlHdrId
		/// </summary>
		
		public TList<ScSchdlSlot> ScSchdlSlotCollection
		{
			get
			{
				if (_scSchdlSlotScSchdlHdrId == null)
				{
				_scSchdlSlotScSchdlHdrId = new TList<ScSchdlSlot>();
				}
	
				return _scSchdlSlotScSchdlHdrId;
			}
			set { _scSchdlSlotScSchdlHdrId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ScSchdlHdrEntityData _tmp = new ScSchdlHdrEntityData();
						
			_tmp.ScSchdlHdrId = this.ScSchdlHdrId;
			_tmp.OriginalScSchdlHdrId = this.OriginalScSchdlHdrId;
			
			_tmp.ScCdeGrpTypeId = this.ScCdeGrpTypeId;
			_tmp.ScGroupInfoId = this.ScGroupInfoId;
			_tmp.SchdlTypeId = this.SchdlTypeId;
			_tmp.ScSchdlPeriodId = this.ScSchdlPeriodId;
			
			#region Source Parent Composite Entities
			if (this.ScCdeGrpTypeIdSource != null)
				_tmp.ScCdeGrpTypeIdSource = MakeCopyOf(this.ScCdeGrpTypeIdSource) as ScCdeGrpType;
			if (this.ScGroupInfoIdSource != null)
				_tmp.ScGroupInfoIdSource = MakeCopyOf(this.ScGroupInfoIdSource) as ScGroupInfo;
			if (this.ScSchdlPeriodIdSource != null)
				_tmp.ScSchdlPeriodIdSource = MakeCopyOf(this.ScSchdlPeriodIdSource) as ScSchdlPeriod;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._scSchdlSlotScSchdlHdrId != null)
				_tmp.ScSchdlSlotCollection = (TList<ScSchdlSlot>) MakeCopyOf(this.ScSchdlSlotCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ScSchdlHdrEntityData _tmp = new ScSchdlHdrEntityData();
						
			_tmp.ScSchdlHdrId = this.ScSchdlHdrId;
			_tmp.OriginalScSchdlHdrId = this.OriginalScSchdlHdrId;
			
			_tmp.ScCdeGrpTypeId = this.ScCdeGrpTypeId;
			_tmp.ScGroupInfoId = this.ScGroupInfoId;
			_tmp.SchdlTypeId = this.SchdlTypeId;
			_tmp.ScSchdlPeriodId = this.ScSchdlPeriodId;
			
			#region Source Parent Composite Entities
			if (this.ScCdeGrpTypeIdSource != null && existingCopies.Contains(this.ScCdeGrpTypeIdSource))
				_tmp.ScCdeGrpTypeIdSource = existingCopies[this.ScCdeGrpTypeIdSource] as ScCdeGrpType;
			else
				_tmp.ScCdeGrpTypeIdSource = MakeCopyOf(this.ScCdeGrpTypeIdSource, existingCopies) as ScCdeGrpType;
			if (this.ScGroupInfoIdSource != null && existingCopies.Contains(this.ScGroupInfoIdSource))
				_tmp.ScGroupInfoIdSource = existingCopies[this.ScGroupInfoIdSource] as ScGroupInfo;
			else
				_tmp.ScGroupInfoIdSource = MakeCopyOf(this.ScGroupInfoIdSource, existingCopies) as ScGroupInfo;
			if (this.ScSchdlPeriodIdSource != null && existingCopies.Contains(this.ScSchdlPeriodIdSource))
				_tmp.ScSchdlPeriodIdSource = existingCopies[this.ScSchdlPeriodIdSource] as ScSchdlPeriod;
			else
				_tmp.ScSchdlPeriodIdSource = MakeCopyOf(this.ScSchdlPeriodIdSource, existingCopies) as ScSchdlPeriod;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.ScSchdlSlotCollection = (TList<ScSchdlSlot>) MakeCopyOf(this.ScSchdlSlotCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScSchdlHdrColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ScSchdlHdrColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScSchdlHdrColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ScSchdlHdrColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScSchdlHdrColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ScSchdlHdrColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ScSchdlHdrEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ScSchdlHdrEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScSchdlHdrColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ScSchdlHdrColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ScSchdlHdrEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ScSchdlHdrEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ScSchdlHdrEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ScSchdlHdr"/> object.
	/// </remarks>
	public class ScSchdlHdrEventArgs : System.EventArgs
	{
		private ScSchdlHdrColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ScSchdlHdrEventArgs class.
		///</summary>
		public ScSchdlHdrEventArgs(ScSchdlHdrColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ScSchdlHdrEventArgs class.
		///</summary>
		public ScSchdlHdrEventArgs(ScSchdlHdrColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ScSchdlHdrColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ScSchdlHdrColumn" />
		public ScSchdlHdrColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ScSchdlHdr related events.
	///</summary>
	public delegate void ScSchdlHdrEventHandler(object sender, ScSchdlHdrEventArgs e);
	
	#region ScSchdlHdrComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ScSchdlHdrComparer : System.Collections.Generic.IComparer<ScSchdlHdr>
	{
		ScSchdlHdrColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ScSchdlHdrComparer"/> class.
        /// </summary>
		public ScSchdlHdrComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ScSchdlHdrComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ScSchdlHdrComparer(ScSchdlHdrColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="ScSchdlHdr"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="ScSchdlHdr"/> to compare.</param>
        /// <param name="b">The second <c>ScSchdlHdr</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ScSchdlHdr a, ScSchdlHdr b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ScSchdlHdr entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ScSchdlHdr a, ScSchdlHdr b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ScSchdlHdrColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ScSchdlHdrKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ScSchdlHdr"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ScSchdlHdrKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ScSchdlHdrKey class.
		/// </summary>
		public ScSchdlHdrKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ScSchdlHdrKey class.
		/// </summary>
		public ScSchdlHdrKey(ScSchdlHdrBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.ScSchdlHdrId = entity.ScSchdlHdrId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ScSchdlHdrKey class.
		/// </summary>
		public ScSchdlHdrKey(System.Decimal _scSchdlHdrId)
		{
			#region Init Properties

			this.ScSchdlHdrId = _scSchdlHdrId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ScSchdlHdrBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ScSchdlHdrBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ScSchdlHdrId property
		private System.Decimal _scSchdlHdrId;
		
		/// <summary>
		/// Gets or sets the ScSchdlHdrId property.
		/// </summary>
		public System.Decimal ScSchdlHdrId
		{
			get { return _scSchdlHdrId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ScSchdlHdrId = value;
				
				_scSchdlHdrId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ScSchdlHdrId = ( values["ScSchdlHdrId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["ScSchdlHdrId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ScSchdlHdrId", ScSchdlHdrId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ScSchdlHdrId: {0}{1}",
								ScSchdlHdrId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ScSchdlHdrColumn Enum
	
	/// <summary>
	/// Enumerate the ScSchdlHdr columns.
	/// </summary>
	[Serializable]
	public enum ScSchdlHdrColumn : int
	{
		/// <summary>
		/// ScSchdlHdrId : New Group Schedule
		/// </summary>
		[EnumTextValue("SC_SCHDL_HDR_ID")]
		[ColumnEnum("SC_SCHDL_HDR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		ScSchdlHdrId = 1,
		/// <summary>
		/// ScCdeGrpTypeId : مجموعة-شعبة-مقرر
		/// </summary>
		[EnumTextValue("SC_CDE_GRP_TYPE_ID")]
		[ColumnEnum("SC_CDE_GRP_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ScCdeGrpTypeId = 2,
		/// <summary>
		/// ScGroupInfoId : مجموعة-شعبة-مجموعة مقرر
		/// </summary>
		[EnumTextValue("SC_GROUP_INFO_ID")]
		[ColumnEnum("SC_GROUP_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ScGroupInfoId = 3,
		/// <summary>
		/// SchdlTypeId : 1:Week/Date   2:Days(CH normal)
		/// </summary>
		[EnumTextValue("SCHDL_TYPE_ID")]
		[ColumnEnum("SCHDL_TYPE_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SchdlTypeId = 4,
		/// <summary>
		/// ScSchdlPeriodId : فترات الجدول-اسابيع الجدول  - فى حالة مجموعة او شعبة
		/// </summary>
		[EnumTextValue("SC_SCHDL_PERIOD_ID")]
		[ColumnEnum("SC_SCHDL_PERIOD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScSchdlPeriodId = 5
	}//End enum

	#endregion ScSchdlHdrColumn Enum

} // end namespace
