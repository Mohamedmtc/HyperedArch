
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file FeeFine.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'FEE_FINE' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class FeeFineBase : EntityBase, IFeeFine, IEntityId<FeeFineKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private FeeFineEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private FeeFineEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private FeeFineEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<FeeFine> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeFineEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeFineEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="FeeFineBase"/> instance.
		///</summary>
		public FeeFineBase()
		{
			this.entityData = new FeeFineEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="FeeFineBase"/> instance.
		///</summary>
		///<param name="_feeFineId">غرامات تأخير الدفع</param>
		///<param name="_startDate">تاريخ بداية الاستحقاق يوم-شهر</param>
		///<param name="_dueDate">تاريخ الاستحقاق-اخر تاريخ دفع يوم-شهر</param>
		///<param name="_delaySeq">1,2,3...7 رقم الاسبوع</param>
		///<param name="_feeCodeItemId">بند المصروف</param>
		///<param name="_fineValue">قيمة النسبة</param>
		///<param name="_notes">ملاحظات</param>
		///<param name="_finePrcnt"></param>
		///<param name="_newStudentFlg"></param>
		///<param name="_asFacultyInfoId"></param>
		public FeeFineBase(System.Int32 _feeFineId, System.DateTime? _startDate, System.DateTime _dueDate, 
			System.Int32 _delaySeq, System.Decimal _feeCodeItemId, System.Decimal? _fineValue, System.String _notes, 
			System.Decimal? _finePrcnt, System.Boolean? _newStudentFlg, System.Decimal? _asFacultyInfoId)
		{
			this.entityData = new FeeFineEntityData();
			this.backupData = null;

			this.FeeFineId = _feeFineId;
			this.StartDate = _startDate;
			this.DueDate = _dueDate;
			this.DelaySeq = _delaySeq;
			this.FeeCodeItemId = _feeCodeItemId;
			this.FineValue = _fineValue;
			this.Notes = _notes;
			this.FinePrcnt = _finePrcnt;
			this.NewStudentFlg = _newStudentFlg;
			this.AsFacultyInfoId = _asFacultyInfoId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="FeeFine"/> instance.
		///</summary>
		///<param name="_feeFineId">غرامات تأخير الدفع</param>
		///<param name="_startDate">تاريخ بداية الاستحقاق يوم-شهر</param>
		///<param name="_dueDate">تاريخ الاستحقاق-اخر تاريخ دفع يوم-شهر</param>
		///<param name="_delaySeq">1,2,3...7 رقم الاسبوع</param>
		///<param name="_feeCodeItemId">بند المصروف</param>
		///<param name="_fineValue">قيمة النسبة</param>
		///<param name="_notes">ملاحظات</param>
		///<param name="_finePrcnt"></param>
		///<param name="_newStudentFlg"></param>
		///<param name="_asFacultyInfoId"></param>
		public static FeeFine CreateFeeFine(System.Int32 _feeFineId, System.DateTime? _startDate, System.DateTime _dueDate, 
			System.Int32 _delaySeq, System.Decimal _feeCodeItemId, System.Decimal? _fineValue, System.String _notes, 
			System.Decimal? _finePrcnt, System.Boolean? _newStudentFlg, System.Decimal? _asFacultyInfoId)
		{
			FeeFine newFeeFine = new FeeFine();
			newFeeFine.FeeFineId = _feeFineId;
			newFeeFine.StartDate = _startDate;
			newFeeFine.DueDate = _dueDate;
			newFeeFine.DelaySeq = _delaySeq;
			newFeeFine.FeeCodeItemId = _feeCodeItemId;
			newFeeFine.FineValue = _fineValue;
			newFeeFine.Notes = _notes;
			newFeeFine.FinePrcnt = _finePrcnt;
			newFeeFine.NewStudentFlg = _newStudentFlg;
			newFeeFine.AsFacultyInfoId = _asFacultyInfoId;
			return newFeeFine;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the FeeFineId property. 
		///		غرامات تأخير الدفع
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"غرامات تأخير الدفع"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 FeeFineId
		{
			get
			{
				return this.entityData.FeeFineId; 
			}
			
			set
			{
				if (this.entityData.FeeFineId == value)
					return;
					
				OnColumnChanging(FeeFineColumn.FeeFineId, this.entityData.FeeFineId);
				this.entityData.FeeFineId = value;
				this.EntityId.FeeFineId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFineColumn.FeeFineId, this.entityData.FeeFineId);
				OnPropertyChanged("FeeFineId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the FEE_FINE_ID property.
		///		غرامات تأخير الدفع
		/// </summary>
		/// <remarks>This is the original value of the FEE_FINE_ID property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalFeeFineId
		{
			get { return this.entityData.OriginalFeeFineId; }
			set { this.entityData.OriginalFeeFineId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the StartDate property. 
		///		تاريخ بداية الاستحقاق يوم-شهر
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsStartDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ بداية الاستحقاق يوم-شهر"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? StartDate
		{
			get
			{
				return this.entityData.StartDate; 
			}
			
			set
			{
				if (this.entityData.StartDate == value)
					return;
					
				OnColumnChanging(FeeFineColumn.StartDate, this.entityData.StartDate);
				this.entityData.StartDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFineColumn.StartDate, this.entityData.StartDate);
				OnPropertyChanged("StartDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DueDate property. 
		///		تاريخ الاستحقاق-اخر تاريخ دفع يوم-شهر
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"تاريخ الاستحقاق-اخر تاريخ دفع يوم-شهر"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime DueDate
		{
			get
			{
				return this.entityData.DueDate; 
			}
			
			set
			{
				if (this.entityData.DueDate == value)
					return;
					
				OnColumnChanging(FeeFineColumn.DueDate, this.entityData.DueDate);
				this.entityData.DueDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFineColumn.DueDate, this.entityData.DueDate);
				OnPropertyChanged("DueDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DelaySeq property. 
		///		1,2,3...7 رقم الاسبوع
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"1,2,3...7 رقم الاسبوع"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 DelaySeq
		{
			get
			{
				return this.entityData.DelaySeq; 
			}
			
			set
			{
				if (this.entityData.DelaySeq == value)
					return;
					
				OnColumnChanging(FeeFineColumn.DelaySeq, this.entityData.DelaySeq);
				this.entityData.DelaySeq = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFineColumn.DelaySeq, this.entityData.DelaySeq);
				OnPropertyChanged("DelaySeq");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeCodeItemId property. 
		///		بند المصروف
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"بند المصروف"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal FeeCodeItemId
		{
			get
			{
				return this.entityData.FeeCodeItemId; 
			}
			
			set
			{
				if (this.entityData.FeeCodeItemId == value)
					return;
					
				OnColumnChanging(FeeFineColumn.FeeCodeItemId, this.entityData.FeeCodeItemId);
				this.entityData.FeeCodeItemId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFineColumn.FeeCodeItemId, this.entityData.FeeCodeItemId);
				OnPropertyChanged("FeeCodeItemId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FineValue property. 
		///		قيمة النسبة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFineValueNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"قيمة النسبة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FineValue
		{
			get
			{
				return this.entityData.FineValue; 
			}
			
			set
			{
				if (this.entityData.FineValue == value)
					return;
					
				OnColumnChanging(FeeFineColumn.FineValue, this.entityData.FineValue);
				this.entityData.FineValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFineColumn.FineValue, this.entityData.FineValue);
				OnPropertyChanged("FineValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		ملاحظات
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"ملاحظات"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(FeeFineColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFineColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FinePrcnt property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFinePrcntNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FinePrcnt
		{
			get
			{
				return this.entityData.FinePrcnt; 
			}
			
			set
			{
				if (this.entityData.FinePrcnt == value)
					return;
					
				OnColumnChanging(FeeFineColumn.FinePrcnt, this.entityData.FinePrcnt);
				this.entityData.FinePrcnt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFineColumn.FinePrcnt, this.entityData.FinePrcnt);
				OnPropertyChanged("FinePrcnt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NewStudentFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsNewStudentFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? NewStudentFlg
		{
			get
			{
				return this.entityData.NewStudentFlg; 
			}
			
			set
			{
				if (this.entityData.NewStudentFlg == value)
					return;
					
				OnColumnChanging(FeeFineColumn.NewStudentFlg, this.entityData.NewStudentFlg);
				this.entityData.NewStudentFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFineColumn.NewStudentFlg, this.entityData.NewStudentFlg);
				OnPropertyChanged("NewStudentFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(FeeFineColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFineColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeItem"/>.
		/// </summary>
		/// <value>The source FeeCodeItem for FeeCodeItemId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeCodeItem FeeCodeItemIdSource
      	{
            get { return entityData.FeeCodeItemIdSource; }
            set { entityData.FeeCodeItemIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of FeeFineDtl objects
		///	which are related to this object through the relation FK_FEE_FINE_DTL_FEE_FINE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeFineDtl> FeeFineDtlCollection
		{
			get { return entityData.FeeFineDtlCollection; }
			set { entityData.FeeFineDtlCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "FEE_FINE"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"FEE_FINE_ID", "START_DATE", "DUE_DATE", "DELAY_SEQ", "FEE_CODE_ITEM_ID", "FINE_VALUE", "NOTES", "FINE_PRCNT", "New_Student_Flg", "AS_FACULTY_INFO_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as FeeFineEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (FeeFine) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<FeeFine>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as FeeFine);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed FeeFine Entity 
		///</summary>
		protected virtual FeeFine Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			FeeFine copy = new FeeFine();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.FeeFineId = this.FeeFineId;
					copy.OriginalFeeFineId = this.OriginalFeeFineId;
				copy.StartDate = this.StartDate;
				copy.DueDate = this.DueDate;
				copy.DelaySeq = this.DelaySeq;
				copy.FeeCodeItemId = this.FeeCodeItemId;
				copy.FineValue = this.FineValue;
				copy.Notes = this.Notes;
				copy.FinePrcnt = this.FinePrcnt;
				copy.NewStudentFlg = this.NewStudentFlg;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
			
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.FeeCodeItemIdSource != null && existingCopies.Contains(this.FeeCodeItemIdSource))
				copy.FeeCodeItemIdSource = existingCopies[this.FeeCodeItemIdSource] as FeeCodeItem;
			else
				copy.FeeCodeItemIdSource = MakeCopyOf(this.FeeCodeItemIdSource, existingCopies) as FeeCodeItem;
		
			//deep copy nested objects
			copy.FeeFineDtlCollection = (TList<FeeFineDtl>) MakeCopyOf(this.FeeFineDtlCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed FeeFine Entity 
		///</summary>
		public virtual FeeFine Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed FeeFine Entity which is a deep copy of the current entity.
		///</summary>
		public virtual FeeFine DeepCopy()
		{
			return EntityHelper.Clone<FeeFine>(this as FeeFine);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as FeeFineEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new FeeFineEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as FeeFineEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(FeeFineColumn column)
		{
			switch(column)
			{
					case FeeFineColumn.FeeFineId:
					return entityData.FeeFineId != _originalData.FeeFineId;
					case FeeFineColumn.StartDate:
					return entityData.StartDate != _originalData.StartDate;
					case FeeFineColumn.DueDate:
					return entityData.DueDate != _originalData.DueDate;
					case FeeFineColumn.DelaySeq:
					return entityData.DelaySeq != _originalData.DelaySeq;
					case FeeFineColumn.FeeCodeItemId:
					return entityData.FeeCodeItemId != _originalData.FeeCodeItemId;
					case FeeFineColumn.FineValue:
					return entityData.FineValue != _originalData.FineValue;
					case FeeFineColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case FeeFineColumn.FinePrcnt:
					return entityData.FinePrcnt != _originalData.FinePrcnt;
					case FeeFineColumn.NewStudentFlg:
					return entityData.NewStudentFlg != _originalData.NewStudentFlg;
					case FeeFineColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< FeeFineColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.FeeFineId != _originalData.FeeFineId;
			result = result || entityData.StartDate != _originalData.StartDate;
			result = result || entityData.DueDate != _originalData.DueDate;
			result = result || entityData.DelaySeq != _originalData.DelaySeq;
			result = result || entityData.FeeCodeItemId != _originalData.FeeCodeItemId;
			result = result || entityData.FineValue != _originalData.FineValue;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.FinePrcnt != _originalData.FinePrcnt;
			result = result || entityData.NewStudentFlg != _originalData.NewStudentFlg;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			return result;
		}	
		
		///<summary>
		///  Returns a FeeFine Entity with the original data.
		///</summary>
		public FeeFine GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateFeeFine(
				_originalData.FeeFineId,
				_originalData.StartDate,
				_originalData.DueDate,
				_originalData.DelaySeq,
				_originalData.FeeCodeItemId,
				_originalData.FineValue,
				_originalData.Notes,
				_originalData.FinePrcnt,
				_originalData.NewStudentFlg,
				_originalData.AsFacultyInfoId
				);
				
			return (FeeFine)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="FeeFineBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is FeeFineBase)
				return ValueEquals(this, (FeeFineBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="FeeFineBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.FeeFineId.GetHashCode() ^ 
					((this.StartDate == null) ? string.Empty : this.StartDate.ToString()).GetHashCode() ^ 
					this.DueDate.GetHashCode() ^ 
					this.DelaySeq.GetHashCode() ^ 
					this.FeeCodeItemId.GetHashCode() ^ 
					((this.FineValue == null) ? string.Empty : this.FineValue.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.FinePrcnt == null) ? string.Empty : this.FinePrcnt.ToString()).GetHashCode() ^ 
					((this.NewStudentFlg == null) ? string.Empty : this.NewStudentFlg.ToString()).GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="FeeFineBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(FeeFineBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="FeeFineBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="FeeFineBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="FeeFineBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(FeeFineBase Object1, FeeFineBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.FeeFineId != Object2.FeeFineId)
				equal = false;
			if ( Object1.StartDate != null && Object2.StartDate != null )
			{
				if (Object1.StartDate != Object2.StartDate)
					equal = false;
			}
			else if (Object1.StartDate == null ^ Object2.StartDate == null )
			{
				equal = false;
			}
			if (Object1.DueDate != Object2.DueDate)
				equal = false;
			if (Object1.DelaySeq != Object2.DelaySeq)
				equal = false;
			if (Object1.FeeCodeItemId != Object2.FeeCodeItemId)
				equal = false;
			if ( Object1.FineValue != null && Object2.FineValue != null )
			{
				if (Object1.FineValue != Object2.FineValue)
					equal = false;
			}
			else if (Object1.FineValue == null ^ Object2.FineValue == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.FinePrcnt != null && Object2.FinePrcnt != null )
			{
				if (Object1.FinePrcnt != Object2.FinePrcnt)
					equal = false;
			}
			else if (Object1.FinePrcnt == null ^ Object2.FinePrcnt == null )
			{
				equal = false;
			}
			if ( Object1.NewStudentFlg != null && Object2.NewStudentFlg != null )
			{
				if (Object1.NewStudentFlg != Object2.NewStudentFlg)
					equal = false;
			}
			else if (Object1.NewStudentFlg == null ^ Object2.NewStudentFlg == null )
			{
				equal = false;
			}
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((FeeFineBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static FeeFineComparer GetComparer()
        {
            return new FeeFineComparer();
        }
        */

        // Comparer delegates back to FeeFine
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(FeeFine rhs, FeeFineColumn which)
        {
            switch (which)
            {
            	
            	
            	case FeeFineColumn.FeeFineId:
            		return this.FeeFineId.CompareTo(rhs.FeeFineId);
            		
            		                 
            	
            	
            	case FeeFineColumn.StartDate:
            		return this.StartDate.Value.CompareTo(rhs.StartDate.Value);
            		
            		                 
            	
            	
            	case FeeFineColumn.DueDate:
            		return this.DueDate.CompareTo(rhs.DueDate);
            		
            		                 
            	
            	
            	case FeeFineColumn.DelaySeq:
            		return this.DelaySeq.CompareTo(rhs.DelaySeq);
            		
            		                 
            	
            	
            	case FeeFineColumn.FeeCodeItemId:
            		return this.FeeCodeItemId.CompareTo(rhs.FeeCodeItemId);
            		
            		                 
            	
            	
            	case FeeFineColumn.FineValue:
            		return this.FineValue.Value.CompareTo(rhs.FineValue.Value);
            		
            		                 
            	
            	
            	case FeeFineColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case FeeFineColumn.FinePrcnt:
            		return this.FinePrcnt.Value.CompareTo(rhs.FinePrcnt.Value);
            		
            		                 
            	
            	
            	case FeeFineColumn.NewStudentFlg:
            		return this.NewStudentFlg.Value.CompareTo(rhs.NewStudentFlg.Value);
            		
            		                 
            	
            	
            	case FeeFineColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<FeeFineKey> Members
		
		// member variable for the EntityId property
		private FeeFineKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual FeeFineKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new FeeFineKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("FeeFine")
					.Append("|").Append( this.FeeFineId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{11}{10}- FeeFineId: {0}{10}- StartDate: {1}{10}- DueDate: {2}{10}- DelaySeq: {3}{10}- FeeCodeItemId: {4}{10}- FineValue: {5}{10}- Notes: {6}{10}- FinePrcnt: {7}{10}- NewStudentFlg: {8}{10}- AsFacultyInfoId: {9}{10}{12}", 
				this.FeeFineId,
				(this.StartDate == null) ? string.Empty : this.StartDate.ToString(),
				this.DueDate,
				this.DelaySeq,
				this.FeeCodeItemId,
				(this.FineValue == null) ? string.Empty : this.FineValue.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.FinePrcnt == null) ? string.Empty : this.FinePrcnt.ToString(),
				(this.NewStudentFlg == null) ? string.Empty : this.NewStudentFlg.ToString(),
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'FEE_FINE' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class FeeFineEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// FEE_FINE_ID : غرامات تأخير الدفع
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "FEE_FINE"</remarks>
		public System.Int32 FeeFineId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Int32 OriginalFeeFineId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// START_DATE : تاريخ بداية الاستحقاق يوم-شهر
		/// </summary>
		public System.DateTime?		  StartDate = null;
		
		/// <summary>
		/// DUE_DATE : تاريخ الاستحقاق-اخر تاريخ دفع يوم-شهر
		/// </summary>
		public System.DateTime		  DueDate = DateTime.MinValue;
		
		/// <summary>
		/// DELAY_SEQ : 1,2,3...7 رقم الاسبوع
		/// </summary>
		public System.Int32		  DelaySeq = (int)0;
		
		/// <summary>
		/// FEE_CODE_ITEM_ID : بند المصروف
		/// </summary>
		public System.Decimal		  FeeCodeItemId = 0.0m;
		
		/// <summary>
		/// FINE_VALUE : قيمة النسبة
		/// </summary>
		public System.Decimal?		  FineValue = null;
		
		/// <summary>
		/// NOTES : ملاحظات
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// FINE_PRCNT : 
		/// </summary>
		public System.Decimal?		  FinePrcnt = null;
		
		/// <summary>
		/// New_Student_Flg : 
		/// </summary>
		public System.Boolean?		  NewStudentFlg = null;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private FeeCodeItem _feeCodeItemIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeItem"/>.
		/// </summary>
		/// <value>The source FeeCodeItem for FeeCodeItemId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeCodeItem FeeCodeItemIdSource
      	{
            get { return this._feeCodeItemIdSource; }
            set { this._feeCodeItemIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region FeeFineDtlCollection
		
		private TList<FeeFineDtl> _feeFineDtlFeeFineId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeFineDtlFeeFineId
		/// </summary>
		
		public TList<FeeFineDtl> FeeFineDtlCollection
		{
			get
			{
				if (_feeFineDtlFeeFineId == null)
				{
				_feeFineDtlFeeFineId = new TList<FeeFineDtl>();
				}
	
				return _feeFineDtlFeeFineId;
			}
			set { _feeFineDtlFeeFineId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			FeeFineEntityData _tmp = new FeeFineEntityData();
						
			_tmp.FeeFineId = this.FeeFineId;
			_tmp.OriginalFeeFineId = this.OriginalFeeFineId;
			
			_tmp.StartDate = this.StartDate;
			_tmp.DueDate = this.DueDate;
			_tmp.DelaySeq = this.DelaySeq;
			_tmp.FeeCodeItemId = this.FeeCodeItemId;
			_tmp.FineValue = this.FineValue;
			_tmp.Notes = this.Notes;
			_tmp.FinePrcnt = this.FinePrcnt;
			_tmp.NewStudentFlg = this.NewStudentFlg;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.FeeCodeItemIdSource != null)
				_tmp.FeeCodeItemIdSource = MakeCopyOf(this.FeeCodeItemIdSource) as FeeCodeItem;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._feeFineDtlFeeFineId != null)
				_tmp.FeeFineDtlCollection = (TList<FeeFineDtl>) MakeCopyOf(this.FeeFineDtlCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			FeeFineEntityData _tmp = new FeeFineEntityData();
						
			_tmp.FeeFineId = this.FeeFineId;
			_tmp.OriginalFeeFineId = this.OriginalFeeFineId;
			
			_tmp.StartDate = this.StartDate;
			_tmp.DueDate = this.DueDate;
			_tmp.DelaySeq = this.DelaySeq;
			_tmp.FeeCodeItemId = this.FeeCodeItemId;
			_tmp.FineValue = this.FineValue;
			_tmp.Notes = this.Notes;
			_tmp.FinePrcnt = this.FinePrcnt;
			_tmp.NewStudentFlg = this.NewStudentFlg;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.FeeCodeItemIdSource != null && existingCopies.Contains(this.FeeCodeItemIdSource))
				_tmp.FeeCodeItemIdSource = existingCopies[this.FeeCodeItemIdSource] as FeeCodeItem;
			else
				_tmp.FeeCodeItemIdSource = MakeCopyOf(this.FeeCodeItemIdSource, existingCopies) as FeeCodeItem;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.FeeFineDtlCollection = (TList<FeeFineDtl>) MakeCopyOf(this.FeeFineDtlCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeFineColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(FeeFineColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeFineColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(FeeFineColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeFineColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(FeeFineColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				FeeFineEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new FeeFineEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeFineColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(FeeFineColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				FeeFineEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new FeeFineEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region FeeFineEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="FeeFine"/> object.
	/// </remarks>
	public class FeeFineEventArgs : System.EventArgs
	{
		private FeeFineColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the FeeFineEventArgs class.
		///</summary>
		public FeeFineEventArgs(FeeFineColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the FeeFineEventArgs class.
		///</summary>
		public FeeFineEventArgs(FeeFineColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The FeeFineColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="FeeFineColumn" />
		public FeeFineColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all FeeFine related events.
	///</summary>
	public delegate void FeeFineEventHandler(object sender, FeeFineEventArgs e);
	
	#region FeeFineComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class FeeFineComparer : System.Collections.Generic.IComparer<FeeFine>
	{
		FeeFineColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:FeeFineComparer"/> class.
        /// </summary>
		public FeeFineComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:FeeFineComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public FeeFineComparer(FeeFineColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="FeeFine"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="FeeFine"/> to compare.</param>
        /// <param name="b">The second <c>FeeFine</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(FeeFine a, FeeFine b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(FeeFine entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(FeeFine a, FeeFine b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public FeeFineColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region FeeFineKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="FeeFine"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class FeeFineKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the FeeFineKey class.
		/// </summary>
		public FeeFineKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeFineKey class.
		/// </summary>
		public FeeFineKey(FeeFineBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.FeeFineId = entity.FeeFineId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeFineKey class.
		/// </summary>
		public FeeFineKey(System.Int32 _feeFineId)
		{
			#region Init Properties

			this.FeeFineId = _feeFineId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private FeeFineBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public FeeFineBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the FeeFineId property
		private System.Int32 _feeFineId;
		
		/// <summary>
		/// Gets or sets the FeeFineId property.
		/// </summary>
		public System.Int32 FeeFineId
		{
			get { return _feeFineId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.FeeFineId = value;
				
				_feeFineId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				FeeFineId = ( values["FeeFineId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["FeeFineId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("FeeFineId", FeeFineId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("FeeFineId: {0}{1}",
								FeeFineId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region FeeFineColumn Enum
	
	/// <summary>
	/// Enumerate the FeeFine columns.
	/// </summary>
	[Serializable]
	public enum FeeFineColumn : int
	{
		/// <summary>
		/// FeeFineId : غرامات تأخير الدفع
		/// </summary>
		[EnumTextValue("FEE_FINE_ID")]
		[ColumnEnum("FEE_FINE_ID", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		FeeFineId = 1,
		/// <summary>
		/// StartDate : تاريخ بداية الاستحقاق يوم-شهر
		/// </summary>
		[EnumTextValue("START_DATE")]
		[ColumnEnum("START_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		StartDate = 2,
		/// <summary>
		/// DueDate : تاريخ الاستحقاق-اخر تاريخ دفع يوم-شهر
		/// </summary>
		[EnumTextValue("DUE_DATE")]
		[ColumnEnum("DUE_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, false)]
		DueDate = 3,
		/// <summary>
		/// DelaySeq : 1,2,3...7 رقم الاسبوع
		/// </summary>
		[EnumTextValue("DELAY_SEQ")]
		[ColumnEnum("DELAY_SEQ", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		DelaySeq = 4,
		/// <summary>
		/// FeeCodeItemId : بند المصروف
		/// </summary>
		[EnumTextValue("FEE_CODE_ITEM_ID")]
		[ColumnEnum("FEE_CODE_ITEM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		FeeCodeItemId = 5,
		/// <summary>
		/// FineValue : قيمة النسبة
		/// </summary>
		[EnumTextValue("FINE_VALUE")]
		[ColumnEnum("FINE_VALUE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FineValue = 6,
		/// <summary>
		/// Notes : ملاحظات
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Notes = 7,
		/// <summary>
		/// FinePrcnt : 
		/// </summary>
		[EnumTextValue("FINE_PRCNT")]
		[ColumnEnum("FINE_PRCNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FinePrcnt = 8,
		/// <summary>
		/// NewStudentFlg : 
		/// </summary>
		[EnumTextValue("New_Student_Flg")]
		[ColumnEnum("New_Student_Flg", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		NewStudentFlg = 9,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 10
	}//End enum

	#endregion FeeFineColumn Enum

} // end namespace
