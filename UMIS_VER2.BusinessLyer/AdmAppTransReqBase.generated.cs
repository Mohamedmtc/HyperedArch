
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AdmAppTransReq.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ADM_APP_TRANS_REQ' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AdmAppTransReqBase : EntityBase, IAdmAppTransReq, IEntityId<AdmAppTransReqKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AdmAppTransReqEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AdmAppTransReqEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AdmAppTransReqEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AdmAppTransReq> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmAppTransReqEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmAppTransReqEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AdmAppTransReqBase"/> instance.
		///</summary>
		public AdmAppTransReqBase()
		{
			this.entityData = new AdmAppTransReqEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AdmAppTransReqBase"/> instance.
		///</summary>
		///<param name="_admAppTransReqId"></param>
		///<param name="_admAppRegHistoryId"></param>
		///<param name="_univName">الجماعه المحول منها</param>
		///<param name="_facName">الكلية المحول منها</param>
		///<param name="_prvSemesterNo"></param>
		///<param name="_prvChNo"></param>
		///<param name="_prvCgpa"></param>
		///<param name="_entMainId"></param>
		///<param name="_transferReason">سبب التحويل</param>
		///<param name="_gsCodeReqStatusId"></param>
		///<param name="_reqStatusDate"></param>
		///<param name="_isApplied"></param>
		///<param name="_admCodeTransferTypeId">خارجى</param>
		///<param name="_edCodeLevelReqId"></param>
		///<param name="_edCodeLevelAppId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_gsCountryNodeId">الدولة المحول منها</param>
		///<param name="_majorName">التخصص المحول منه</param>
		///<param name="_lastYear">اخر عام فى الكلية السابقة</param>
		public AdmAppTransReqBase(System.Decimal _admAppTransReqId, System.Decimal _admAppRegHistoryId, 
			System.String _univName, System.String _facName, System.Decimal? _prvSemesterNo, 
			System.Decimal? _prvChNo, System.Decimal? _prvCgpa, System.Decimal _entMainId, 
			System.String _transferReason, System.Decimal _gsCodeReqStatusId, System.DateTime? _reqStatusDate, 
			System.Decimal _isApplied, System.Decimal? _admCodeTransferTypeId, System.Decimal? _edCodeLevelReqId, 
			System.Decimal? _edCodeLevelAppId, System.Decimal? _asFacultyInfoId, System.Decimal? _gsCountryNodeId, 
			System.String _majorName, System.String _lastYear)
		{
			this.entityData = new AdmAppTransReqEntityData();
			this.backupData = null;

			this.AdmAppTransReqId = _admAppTransReqId;
			this.AdmAppRegHistoryId = _admAppRegHistoryId;
			this.UnivName = _univName;
			this.FacName = _facName;
			this.PrvSemesterNo = _prvSemesterNo;
			this.PrvChNo = _prvChNo;
			this.PrvCgpa = _prvCgpa;
			this.EntMainId = _entMainId;
			this.TransferReason = _transferReason;
			this.GsCodeReqStatusId = _gsCodeReqStatusId;
			this.ReqStatusDate = _reqStatusDate;
			this.IsApplied = _isApplied;
			this.AdmCodeTransferTypeId = _admCodeTransferTypeId;
			this.EdCodeLevelReqId = _edCodeLevelReqId;
			this.EdCodeLevelAppId = _edCodeLevelAppId;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.GsCountryNodeId = _gsCountryNodeId;
			this.MajorName = _majorName;
			this.LastYear = _lastYear;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AdmAppTransReq"/> instance.
		///</summary>
		///<param name="_admAppTransReqId"></param>
		///<param name="_admAppRegHistoryId"></param>
		///<param name="_univName">الجماعه المحول منها</param>
		///<param name="_facName">الكلية المحول منها</param>
		///<param name="_prvSemesterNo"></param>
		///<param name="_prvChNo"></param>
		///<param name="_prvCgpa"></param>
		///<param name="_entMainId"></param>
		///<param name="_transferReason">سبب التحويل</param>
		///<param name="_gsCodeReqStatusId"></param>
		///<param name="_reqStatusDate"></param>
		///<param name="_isApplied"></param>
		///<param name="_admCodeTransferTypeId">خارجى</param>
		///<param name="_edCodeLevelReqId"></param>
		///<param name="_edCodeLevelAppId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_gsCountryNodeId">الدولة المحول منها</param>
		///<param name="_majorName">التخصص المحول منه</param>
		///<param name="_lastYear">اخر عام فى الكلية السابقة</param>
		public static AdmAppTransReq CreateAdmAppTransReq(System.Decimal _admAppTransReqId, System.Decimal _admAppRegHistoryId, 
			System.String _univName, System.String _facName, System.Decimal? _prvSemesterNo, 
			System.Decimal? _prvChNo, System.Decimal? _prvCgpa, System.Decimal _entMainId, 
			System.String _transferReason, System.Decimal _gsCodeReqStatusId, System.DateTime? _reqStatusDate, 
			System.Decimal _isApplied, System.Decimal? _admCodeTransferTypeId, System.Decimal? _edCodeLevelReqId, 
			System.Decimal? _edCodeLevelAppId, System.Decimal? _asFacultyInfoId, System.Decimal? _gsCountryNodeId, 
			System.String _majorName, System.String _lastYear)
		{
			AdmAppTransReq newAdmAppTransReq = new AdmAppTransReq();
			newAdmAppTransReq.AdmAppTransReqId = _admAppTransReqId;
			newAdmAppTransReq.AdmAppRegHistoryId = _admAppRegHistoryId;
			newAdmAppTransReq.UnivName = _univName;
			newAdmAppTransReq.FacName = _facName;
			newAdmAppTransReq.PrvSemesterNo = _prvSemesterNo;
			newAdmAppTransReq.PrvChNo = _prvChNo;
			newAdmAppTransReq.PrvCgpa = _prvCgpa;
			newAdmAppTransReq.EntMainId = _entMainId;
			newAdmAppTransReq.TransferReason = _transferReason;
			newAdmAppTransReq.GsCodeReqStatusId = _gsCodeReqStatusId;
			newAdmAppTransReq.ReqStatusDate = _reqStatusDate;
			newAdmAppTransReq.IsApplied = _isApplied;
			newAdmAppTransReq.AdmCodeTransferTypeId = _admCodeTransferTypeId;
			newAdmAppTransReq.EdCodeLevelReqId = _edCodeLevelReqId;
			newAdmAppTransReq.EdCodeLevelAppId = _edCodeLevelAppId;
			newAdmAppTransReq.AsFacultyInfoId = _asFacultyInfoId;
			newAdmAppTransReq.GsCountryNodeId = _gsCountryNodeId;
			newAdmAppTransReq.MajorName = _majorName;
			newAdmAppTransReq.LastYear = _lastYear;
			return newAdmAppTransReq;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AdmAppTransReqId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal AdmAppTransReqId
		{
			get
			{
				return this.entityData.AdmAppTransReqId; 
			}
			
			set
			{
				if (this.entityData.AdmAppTransReqId == value)
					return;
					
				OnColumnChanging(AdmAppTransReqColumn.AdmAppTransReqId, this.entityData.AdmAppTransReqId);
				this.entityData.AdmAppTransReqId = value;
				this.EntityId.AdmAppTransReqId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransReqColumn.AdmAppTransReqId, this.entityData.AdmAppTransReqId);
				OnPropertyChanged("AdmAppTransReqId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ADM_APP_TRANS_REQ_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ADM_APP_TRANS_REQ_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalAdmAppTransReqId
		{
			get { return this.entityData.OriginalAdmAppTransReqId; }
			set { this.entityData.OriginalAdmAppTransReqId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the AdmAppRegHistoryId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AdmAppRegHistoryId
		{
			get
			{
				return this.entityData.AdmAppRegHistoryId; 
			}
			
			set
			{
				if (this.entityData.AdmAppRegHistoryId == value)
					return;
					
				OnColumnChanging(AdmAppTransReqColumn.AdmAppRegHistoryId, this.entityData.AdmAppRegHistoryId);
				this.entityData.AdmAppRegHistoryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransReqColumn.AdmAppRegHistoryId, this.entityData.AdmAppRegHistoryId);
				OnPropertyChanged("AdmAppRegHistoryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UnivName property. 
		///		الجماعه المحول منها
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"الجماعه المحول منها"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 60)]
		public virtual System.String UnivName
		{
			get
			{
				return this.entityData.UnivName; 
			}
			
			set
			{
				if (this.entityData.UnivName == value)
					return;
					
				OnColumnChanging(AdmAppTransReqColumn.UnivName, this.entityData.UnivName);
				this.entityData.UnivName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransReqColumn.UnivName, this.entityData.UnivName);
				OnPropertyChanged("UnivName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FacName property. 
		///		الكلية المحول منها
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"الكلية المحول منها"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 40)]
		public virtual System.String FacName
		{
			get
			{
				return this.entityData.FacName; 
			}
			
			set
			{
				if (this.entityData.FacName == value)
					return;
					
				OnColumnChanging(AdmAppTransReqColumn.FacName, this.entityData.FacName);
				this.entityData.FacName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransReqColumn.FacName, this.entityData.FacName);
				OnPropertyChanged("FacName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrvSemesterNo property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPrvSemesterNoNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PrvSemesterNo
		{
			get
			{
				return this.entityData.PrvSemesterNo; 
			}
			
			set
			{
				if (this.entityData.PrvSemesterNo == value)
					return;
					
				OnColumnChanging(AdmAppTransReqColumn.PrvSemesterNo, this.entityData.PrvSemesterNo);
				this.entityData.PrvSemesterNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransReqColumn.PrvSemesterNo, this.entityData.PrvSemesterNo);
				OnPropertyChanged("PrvSemesterNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrvChNo property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPrvChNoNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PrvChNo
		{
			get
			{
				return this.entityData.PrvChNo; 
			}
			
			set
			{
				if (this.entityData.PrvChNo == value)
					return;
					
				OnColumnChanging(AdmAppTransReqColumn.PrvChNo, this.entityData.PrvChNo);
				this.entityData.PrvChNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransReqColumn.PrvChNo, this.entityData.PrvChNo);
				OnPropertyChanged("PrvChNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrvCgpa property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPrvCgpaNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PrvCgpa
		{
			get
			{
				return this.entityData.PrvCgpa; 
			}
			
			set
			{
				if (this.entityData.PrvCgpa == value)
					return;
					
				OnColumnChanging(AdmAppTransReqColumn.PrvCgpa, this.entityData.PrvCgpa);
				this.entityData.PrvCgpa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransReqColumn.PrvCgpa, this.entityData.PrvCgpa);
				OnPropertyChanged("PrvCgpa");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntMainId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EntMainId
		{
			get
			{
				return this.entityData.EntMainId; 
			}
			
			set
			{
				if (this.entityData.EntMainId == value)
					return;
					
				OnColumnChanging(AdmAppTransReqColumn.EntMainId, this.entityData.EntMainId);
				this.entityData.EntMainId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransReqColumn.EntMainId, this.entityData.EntMainId);
				OnPropertyChanged("EntMainId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransferReason property. 
		///		سبب التحويل
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"سبب التحويل"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 300)]
		public virtual System.String TransferReason
		{
			get
			{
				return this.entityData.TransferReason; 
			}
			
			set
			{
				if (this.entityData.TransferReason == value)
					return;
					
				OnColumnChanging(AdmAppTransReqColumn.TransferReason, this.entityData.TransferReason);
				this.entityData.TransferReason = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransReqColumn.TransferReason, this.entityData.TransferReason);
				OnPropertyChanged("TransferReason");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeReqStatusId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsCodeReqStatusId
		{
			get
			{
				return this.entityData.GsCodeReqStatusId; 
			}
			
			set
			{
				if (this.entityData.GsCodeReqStatusId == value)
					return;
					
				OnColumnChanging(AdmAppTransReqColumn.GsCodeReqStatusId, this.entityData.GsCodeReqStatusId);
				this.entityData.GsCodeReqStatusId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransReqColumn.GsCodeReqStatusId, this.entityData.GsCodeReqStatusId);
				OnPropertyChanged("GsCodeReqStatusId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReqStatusDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsReqStatusDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ReqStatusDate
		{
			get
			{
				return this.entityData.ReqStatusDate; 
			}
			
			set
			{
				if (this.entityData.ReqStatusDate == value)
					return;
					
				OnColumnChanging(AdmAppTransReqColumn.ReqStatusDate, this.entityData.ReqStatusDate);
				this.entityData.ReqStatusDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransReqColumn.ReqStatusDate, this.entityData.ReqStatusDate);
				OnPropertyChanged("ReqStatusDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsApplied property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsApplied
		{
			get
			{
				return this.entityData.IsApplied; 
			}
			
			set
			{
				if (this.entityData.IsApplied == value)
					return;
					
				OnColumnChanging(AdmAppTransReqColumn.IsApplied, this.entityData.IsApplied);
				this.entityData.IsApplied = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransReqColumn.IsApplied, this.entityData.IsApplied);
				OnPropertyChanged("IsApplied");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmCodeTransferTypeId property. 
		///		خارجى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmCodeTransferTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"خارجى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmCodeTransferTypeId
		{
			get
			{
				return this.entityData.AdmCodeTransferTypeId; 
			}
			
			set
			{
				if (this.entityData.AdmCodeTransferTypeId == value)
					return;
					
				OnColumnChanging(AdmAppTransReqColumn.AdmCodeTransferTypeId, this.entityData.AdmCodeTransferTypeId);
				this.entityData.AdmCodeTransferTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransReqColumn.AdmCodeTransferTypeId, this.entityData.AdmCodeTransferTypeId);
				OnPropertyChanged("AdmCodeTransferTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeLevelReqId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeLevelReqIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeLevelReqId
		{
			get
			{
				return this.entityData.EdCodeLevelReqId; 
			}
			
			set
			{
				if (this.entityData.EdCodeLevelReqId == value)
					return;
					
				OnColumnChanging(AdmAppTransReqColumn.EdCodeLevelReqId, this.entityData.EdCodeLevelReqId);
				this.entityData.EdCodeLevelReqId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransReqColumn.EdCodeLevelReqId, this.entityData.EdCodeLevelReqId);
				OnPropertyChanged("EdCodeLevelReqId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeLevelAppId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeLevelAppIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeLevelAppId
		{
			get
			{
				return this.entityData.EdCodeLevelAppId; 
			}
			
			set
			{
				if (this.entityData.EdCodeLevelAppId == value)
					return;
					
				OnColumnChanging(AdmAppTransReqColumn.EdCodeLevelAppId, this.entityData.EdCodeLevelAppId);
				this.entityData.EdCodeLevelAppId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransReqColumn.EdCodeLevelAppId, this.entityData.EdCodeLevelAppId);
				OnPropertyChanged("EdCodeLevelAppId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(AdmAppTransReqColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransReqColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCountryNodeId property. 
		///		الدولة المحول منها
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCountryNodeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"الدولة المحول منها"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCountryNodeId
		{
			get
			{
				return this.entityData.GsCountryNodeId; 
			}
			
			set
			{
				if (this.entityData.GsCountryNodeId == value)
					return;
					
				OnColumnChanging(AdmAppTransReqColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				this.entityData.GsCountryNodeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransReqColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				OnPropertyChanged("GsCountryNodeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MajorName property. 
		///		التخصص المحول منه
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"التخصص المحول منه"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String MajorName
		{
			get
			{
				return this.entityData.MajorName; 
			}
			
			set
			{
				if (this.entityData.MajorName == value)
					return;
					
				OnColumnChanging(AdmAppTransReqColumn.MajorName, this.entityData.MajorName);
				this.entityData.MajorName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransReqColumn.MajorName, this.entityData.MajorName);
				OnPropertyChanged("MajorName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastYear property. 
		///		اخر عام فى الكلية السابقة
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"اخر عام فى الكلية السابقة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String LastYear
		{
			get
			{
				return this.entityData.LastYear; 
			}
			
			set
			{
				if (this.entityData.LastYear == value)
					return;
					
				OnColumnChanging(AdmAppTransReqColumn.LastYear, this.entityData.LastYear);
				this.entityData.LastYear = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransReqColumn.LastYear, this.entityData.LastYear);
				OnPropertyChanged("LastYear");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdmAppRegHistory"/>.
		/// </summary>
		/// <value>The source AdmAppRegHistory for AdmAppRegHistoryId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmAppRegHistory AdmAppRegHistoryIdSource
      	{
            get { return entityData.AdmAppRegHistoryIdSource; }
            set { entityData.AdmAppRegHistoryIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdmCodeTransferType"/>.
		/// </summary>
		/// <value>The source AdmCodeTransferType for AdmCodeTransferTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmCodeTransferType AdmCodeTransferTypeIdSource
      	{
            get { return entityData.AdmCodeTransferTypeIdSource; }
            set { entityData.AdmCodeTransferTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelReqId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeLevel EdCodeLevelReqIdSource
      	{
            get { return entityData.EdCodeLevelReqIdSource; }
            set { entityData.EdCodeLevelReqIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelAppId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeLevel EdCodeLevelAppIdSource
      	{
            get { return entityData.EdCodeLevelAppIdSource; }
            set { entityData.EdCodeLevelAppIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCountryNode"/>.
		/// </summary>
		/// <value>The source GsCountryNode for GsCountryNodeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCountryNode GsCountryNodeIdSource
      	{
            get { return entityData.GsCountryNodeIdSource; }
            set { entityData.GsCountryNodeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return entityData.EntMainIdSource; }
            set { entityData.EntMainIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeReqStatus"/>.
		/// </summary>
		/// <value>The source GsCodeReqStatus for GsCodeReqStatusId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeReqStatus GsCodeReqStatusIdSource
      	{
            get { return entityData.GsCodeReqStatusIdSource; }
            set { entityData.GsCodeReqStatusIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of AdmAppTransBalance objects
		///	which are related to this object through the relation FK_AUTO_0001
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppTransBalance> AdmAppTransBalanceCollection
		{
			get { return entityData.AdmAppTransBalanceCollection; }
			set { entityData.AdmAppTransBalanceCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmAppTransToCourse objects
		///	which are related to this object through the relation FK_ADM_APP_TRANS_BALANCE_ADM_APP_TRANSFER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppTransToCourse> AdmAppTransToCourseCollection
		{
			get { return entityData.AdmAppTransToCourseCollection; }
			set { entityData.AdmAppTransToCourseCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmTransferAcceptance objects
		///	which are related to this object through the relation FK_ADM_TRANSFER_ACCEPTANCE_ADM_APP_TRANS_REQ
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmTransferAcceptance> AdmTransferAcceptanceCollection
		{
			get { return entityData.AdmTransferAcceptanceCollection; }
			set { entityData.AdmTransferAcceptanceCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmAppTransFromCourse objects
		///	which are related to this object through the relation FK_ADM_APP_TRANS_COURSE_ADM_APP_TRANSFER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppTransFromCourse> AdmAppTransFromCourseCollection
		{
			get { return entityData.AdmAppTransFromCourseCollection; }
			set { entityData.AdmAppTransFromCourseCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UnivName", "Univ Name", 60));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FacName", "Fac Name", 40));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TransferReason", "Transfer Reason", 300));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MajorName", "Major Name", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LastYear", "Last Year", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ADM_APP_TRANS_REQ"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ADM_APP_TRANS_REQ_ID", "ADM_APP_REG_HISTORY_ID", "UNIV_NAME", "FAC_NAME", "PRV_SEMESTER_NO", "PRV_CH_NO", "PRV_CGPA", "ENT_MAIN_ID", "TRANSFER_REASON", "GS_CODE_REQ_STATUS_ID", "REQ_STATUS_DATE", "IS_APPLIED", "ADM_CODE_TRANSFER_TYPE_ID", "ED_CODE_LEVEL_REQ_ID", "ED_CODE_LEVEL_APP_ID", "AS_FACULTY_INFO_ID", "GS_COUNTRY_NODE_ID", "MAJOR_NAME", "LAST_YEAR"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AdmAppTransReqEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AdmAppTransReq) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AdmAppTransReq>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AdmAppTransReq);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AdmAppTransReq Entity 
		///</summary>
		protected virtual AdmAppTransReq Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AdmAppTransReq copy = new AdmAppTransReq();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AdmAppTransReqId = this.AdmAppTransReqId;
					copy.OriginalAdmAppTransReqId = this.OriginalAdmAppTransReqId;
				copy.AdmAppRegHistoryId = this.AdmAppRegHistoryId;
				copy.UnivName = this.UnivName;
				copy.FacName = this.FacName;
				copy.PrvSemesterNo = this.PrvSemesterNo;
				copy.PrvChNo = this.PrvChNo;
				copy.PrvCgpa = this.PrvCgpa;
				copy.EntMainId = this.EntMainId;
				copy.TransferReason = this.TransferReason;
				copy.GsCodeReqStatusId = this.GsCodeReqStatusId;
				copy.ReqStatusDate = this.ReqStatusDate;
				copy.IsApplied = this.IsApplied;
				copy.AdmCodeTransferTypeId = this.AdmCodeTransferTypeId;
				copy.EdCodeLevelReqId = this.EdCodeLevelReqId;
				copy.EdCodeLevelAppId = this.EdCodeLevelAppId;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.GsCountryNodeId = this.GsCountryNodeId;
				copy.MajorName = this.MajorName;
				copy.LastYear = this.LastYear;
			
			if (this.AdmAppRegHistoryIdSource != null && existingCopies.Contains(this.AdmAppRegHistoryIdSource))
				copy.AdmAppRegHistoryIdSource = existingCopies[this.AdmAppRegHistoryIdSource] as AdmAppRegHistory;
			else
				copy.AdmAppRegHistoryIdSource = MakeCopyOf(this.AdmAppRegHistoryIdSource, existingCopies) as AdmAppRegHistory;
			if (this.AdmCodeTransferTypeIdSource != null && existingCopies.Contains(this.AdmCodeTransferTypeIdSource))
				copy.AdmCodeTransferTypeIdSource = existingCopies[this.AdmCodeTransferTypeIdSource] as AdmCodeTransferType;
			else
				copy.AdmCodeTransferTypeIdSource = MakeCopyOf(this.AdmCodeTransferTypeIdSource, existingCopies) as AdmCodeTransferType;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdCodeLevelReqIdSource != null && existingCopies.Contains(this.EdCodeLevelReqIdSource))
				copy.EdCodeLevelReqIdSource = existingCopies[this.EdCodeLevelReqIdSource] as EdCodeLevel;
			else
				copy.EdCodeLevelReqIdSource = MakeCopyOf(this.EdCodeLevelReqIdSource, existingCopies) as EdCodeLevel;
			if (this.EdCodeLevelAppIdSource != null && existingCopies.Contains(this.EdCodeLevelAppIdSource))
				copy.EdCodeLevelAppIdSource = existingCopies[this.EdCodeLevelAppIdSource] as EdCodeLevel;
			else
				copy.EdCodeLevelAppIdSource = MakeCopyOf(this.EdCodeLevelAppIdSource, existingCopies) as EdCodeLevel;
			if (this.GsCountryNodeIdSource != null && existingCopies.Contains(this.GsCountryNodeIdSource))
				copy.GsCountryNodeIdSource = existingCopies[this.GsCountryNodeIdSource] as GsCountryNode;
			else
				copy.GsCountryNodeIdSource = MakeCopyOf(this.GsCountryNodeIdSource, existingCopies) as GsCountryNode;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				copy.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				copy.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.GsCodeReqStatusIdSource != null && existingCopies.Contains(this.GsCodeReqStatusIdSource))
				copy.GsCodeReqStatusIdSource = existingCopies[this.GsCodeReqStatusIdSource] as GsCodeReqStatus;
			else
				copy.GsCodeReqStatusIdSource = MakeCopyOf(this.GsCodeReqStatusIdSource, existingCopies) as GsCodeReqStatus;
		
			//deep copy nested objects
			copy.AdmAppTransBalanceCollection = (TList<AdmAppTransBalance>) MakeCopyOf(this.AdmAppTransBalanceCollection, existingCopies); 
			copy.AdmAppTransToCourseCollection = (TList<AdmAppTransToCourse>) MakeCopyOf(this.AdmAppTransToCourseCollection, existingCopies); 
			copy.AdmTransferAcceptanceCollection = (TList<AdmTransferAcceptance>) MakeCopyOf(this.AdmTransferAcceptanceCollection, existingCopies); 
			copy.AdmAppTransFromCourseCollection = (TList<AdmAppTransFromCourse>) MakeCopyOf(this.AdmAppTransFromCourseCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AdmAppTransReq Entity 
		///</summary>
		public virtual AdmAppTransReq Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AdmAppTransReq Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AdmAppTransReq DeepCopy()
		{
			return EntityHelper.Clone<AdmAppTransReq>(this as AdmAppTransReq);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AdmAppTransReqEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AdmAppTransReqEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AdmAppTransReqEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AdmAppTransReqColumn column)
		{
			switch(column)
			{
					case AdmAppTransReqColumn.AdmAppTransReqId:
					return entityData.AdmAppTransReqId != _originalData.AdmAppTransReqId;
					case AdmAppTransReqColumn.AdmAppRegHistoryId:
					return entityData.AdmAppRegHistoryId != _originalData.AdmAppRegHistoryId;
					case AdmAppTransReqColumn.UnivName:
					return entityData.UnivName != _originalData.UnivName;
					case AdmAppTransReqColumn.FacName:
					return entityData.FacName != _originalData.FacName;
					case AdmAppTransReqColumn.PrvSemesterNo:
					return entityData.PrvSemesterNo != _originalData.PrvSemesterNo;
					case AdmAppTransReqColumn.PrvChNo:
					return entityData.PrvChNo != _originalData.PrvChNo;
					case AdmAppTransReqColumn.PrvCgpa:
					return entityData.PrvCgpa != _originalData.PrvCgpa;
					case AdmAppTransReqColumn.EntMainId:
					return entityData.EntMainId != _originalData.EntMainId;
					case AdmAppTransReqColumn.TransferReason:
					return entityData.TransferReason != _originalData.TransferReason;
					case AdmAppTransReqColumn.GsCodeReqStatusId:
					return entityData.GsCodeReqStatusId != _originalData.GsCodeReqStatusId;
					case AdmAppTransReqColumn.ReqStatusDate:
					return entityData.ReqStatusDate != _originalData.ReqStatusDate;
					case AdmAppTransReqColumn.IsApplied:
					return entityData.IsApplied != _originalData.IsApplied;
					case AdmAppTransReqColumn.AdmCodeTransferTypeId:
					return entityData.AdmCodeTransferTypeId != _originalData.AdmCodeTransferTypeId;
					case AdmAppTransReqColumn.EdCodeLevelReqId:
					return entityData.EdCodeLevelReqId != _originalData.EdCodeLevelReqId;
					case AdmAppTransReqColumn.EdCodeLevelAppId:
					return entityData.EdCodeLevelAppId != _originalData.EdCodeLevelAppId;
					case AdmAppTransReqColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case AdmAppTransReqColumn.GsCountryNodeId:
					return entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
					case AdmAppTransReqColumn.MajorName:
					return entityData.MajorName != _originalData.MajorName;
					case AdmAppTransReqColumn.LastYear:
					return entityData.LastYear != _originalData.LastYear;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AdmAppTransReqColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AdmAppTransReqId != _originalData.AdmAppTransReqId;
			result = result || entityData.AdmAppRegHistoryId != _originalData.AdmAppRegHistoryId;
			result = result || entityData.UnivName != _originalData.UnivName;
			result = result || entityData.FacName != _originalData.FacName;
			result = result || entityData.PrvSemesterNo != _originalData.PrvSemesterNo;
			result = result || entityData.PrvChNo != _originalData.PrvChNo;
			result = result || entityData.PrvCgpa != _originalData.PrvCgpa;
			result = result || entityData.EntMainId != _originalData.EntMainId;
			result = result || entityData.TransferReason != _originalData.TransferReason;
			result = result || entityData.GsCodeReqStatusId != _originalData.GsCodeReqStatusId;
			result = result || entityData.ReqStatusDate != _originalData.ReqStatusDate;
			result = result || entityData.IsApplied != _originalData.IsApplied;
			result = result || entityData.AdmCodeTransferTypeId != _originalData.AdmCodeTransferTypeId;
			result = result || entityData.EdCodeLevelReqId != _originalData.EdCodeLevelReqId;
			result = result || entityData.EdCodeLevelAppId != _originalData.EdCodeLevelAppId;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
			result = result || entityData.MajorName != _originalData.MajorName;
			result = result || entityData.LastYear != _originalData.LastYear;
			return result;
		}	
		
		///<summary>
		///  Returns a AdmAppTransReq Entity with the original data.
		///</summary>
		public AdmAppTransReq GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAdmAppTransReq(
				_originalData.AdmAppTransReqId,
				_originalData.AdmAppRegHistoryId,
				_originalData.UnivName,
				_originalData.FacName,
				_originalData.PrvSemesterNo,
				_originalData.PrvChNo,
				_originalData.PrvCgpa,
				_originalData.EntMainId,
				_originalData.TransferReason,
				_originalData.GsCodeReqStatusId,
				_originalData.ReqStatusDate,
				_originalData.IsApplied,
				_originalData.AdmCodeTransferTypeId,
				_originalData.EdCodeLevelReqId,
				_originalData.EdCodeLevelAppId,
				_originalData.AsFacultyInfoId,
				_originalData.GsCountryNodeId,
				_originalData.MajorName,
				_originalData.LastYear
				);
				
			return (AdmAppTransReq)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AdmAppTransReqBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AdmAppTransReqBase)
				return ValueEquals(this, (AdmAppTransReqBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AdmAppTransReqBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AdmAppTransReqId.GetHashCode() ^ 
					this.AdmAppRegHistoryId.GetHashCode() ^ 
					((this.UnivName == null) ? string.Empty : this.UnivName.ToString()).GetHashCode() ^ 
					((this.FacName == null) ? string.Empty : this.FacName.ToString()).GetHashCode() ^ 
					((this.PrvSemesterNo == null) ? string.Empty : this.PrvSemesterNo.ToString()).GetHashCode() ^ 
					((this.PrvChNo == null) ? string.Empty : this.PrvChNo.ToString()).GetHashCode() ^ 
					((this.PrvCgpa == null) ? string.Empty : this.PrvCgpa.ToString()).GetHashCode() ^ 
					this.EntMainId.GetHashCode() ^ 
					((this.TransferReason == null) ? string.Empty : this.TransferReason.ToString()).GetHashCode() ^ 
					this.GsCodeReqStatusId.GetHashCode() ^ 
					((this.ReqStatusDate == null) ? string.Empty : this.ReqStatusDate.ToString()).GetHashCode() ^ 
					this.IsApplied.GetHashCode() ^ 
					((this.AdmCodeTransferTypeId == null) ? string.Empty : this.AdmCodeTransferTypeId.ToString()).GetHashCode() ^ 
					((this.EdCodeLevelReqId == null) ? string.Empty : this.EdCodeLevelReqId.ToString()).GetHashCode() ^ 
					((this.EdCodeLevelAppId == null) ? string.Empty : this.EdCodeLevelAppId.ToString()).GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					((this.GsCountryNodeId == null) ? string.Empty : this.GsCountryNodeId.ToString()).GetHashCode() ^ 
					((this.MajorName == null) ? string.Empty : this.MajorName.ToString()).GetHashCode() ^ 
					((this.LastYear == null) ? string.Empty : this.LastYear.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AdmAppTransReqBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AdmAppTransReqBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AdmAppTransReqBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AdmAppTransReqBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AdmAppTransReqBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AdmAppTransReqBase Object1, AdmAppTransReqBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AdmAppTransReqId != Object2.AdmAppTransReqId)
				equal = false;
			if (Object1.AdmAppRegHistoryId != Object2.AdmAppRegHistoryId)
				equal = false;
			if ( Object1.UnivName != null && Object2.UnivName != null )
			{
				if (Object1.UnivName != Object2.UnivName)
					equal = false;
			}
			else if (Object1.UnivName == null ^ Object2.UnivName == null )
			{
				equal = false;
			}
			if ( Object1.FacName != null && Object2.FacName != null )
			{
				if (Object1.FacName != Object2.FacName)
					equal = false;
			}
			else if (Object1.FacName == null ^ Object2.FacName == null )
			{
				equal = false;
			}
			if ( Object1.PrvSemesterNo != null && Object2.PrvSemesterNo != null )
			{
				if (Object1.PrvSemesterNo != Object2.PrvSemesterNo)
					equal = false;
			}
			else if (Object1.PrvSemesterNo == null ^ Object2.PrvSemesterNo == null )
			{
				equal = false;
			}
			if ( Object1.PrvChNo != null && Object2.PrvChNo != null )
			{
				if (Object1.PrvChNo != Object2.PrvChNo)
					equal = false;
			}
			else if (Object1.PrvChNo == null ^ Object2.PrvChNo == null )
			{
				equal = false;
			}
			if ( Object1.PrvCgpa != null && Object2.PrvCgpa != null )
			{
				if (Object1.PrvCgpa != Object2.PrvCgpa)
					equal = false;
			}
			else if (Object1.PrvCgpa == null ^ Object2.PrvCgpa == null )
			{
				equal = false;
			}
			if (Object1.EntMainId != Object2.EntMainId)
				equal = false;
			if ( Object1.TransferReason != null && Object2.TransferReason != null )
			{
				if (Object1.TransferReason != Object2.TransferReason)
					equal = false;
			}
			else if (Object1.TransferReason == null ^ Object2.TransferReason == null )
			{
				equal = false;
			}
			if (Object1.GsCodeReqStatusId != Object2.GsCodeReqStatusId)
				equal = false;
			if ( Object1.ReqStatusDate != null && Object2.ReqStatusDate != null )
			{
				if (Object1.ReqStatusDate != Object2.ReqStatusDate)
					equal = false;
			}
			else if (Object1.ReqStatusDate == null ^ Object2.ReqStatusDate == null )
			{
				equal = false;
			}
			if (Object1.IsApplied != Object2.IsApplied)
				equal = false;
			if ( Object1.AdmCodeTransferTypeId != null && Object2.AdmCodeTransferTypeId != null )
			{
				if (Object1.AdmCodeTransferTypeId != Object2.AdmCodeTransferTypeId)
					equal = false;
			}
			else if (Object1.AdmCodeTransferTypeId == null ^ Object2.AdmCodeTransferTypeId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeLevelReqId != null && Object2.EdCodeLevelReqId != null )
			{
				if (Object1.EdCodeLevelReqId != Object2.EdCodeLevelReqId)
					equal = false;
			}
			else if (Object1.EdCodeLevelReqId == null ^ Object2.EdCodeLevelReqId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeLevelAppId != null && Object2.EdCodeLevelAppId != null )
			{
				if (Object1.EdCodeLevelAppId != Object2.EdCodeLevelAppId)
					equal = false;
			}
			else if (Object1.EdCodeLevelAppId == null ^ Object2.EdCodeLevelAppId == null )
			{
				equal = false;
			}
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if ( Object1.GsCountryNodeId != null && Object2.GsCountryNodeId != null )
			{
				if (Object1.GsCountryNodeId != Object2.GsCountryNodeId)
					equal = false;
			}
			else if (Object1.GsCountryNodeId == null ^ Object2.GsCountryNodeId == null )
			{
				equal = false;
			}
			if ( Object1.MajorName != null && Object2.MajorName != null )
			{
				if (Object1.MajorName != Object2.MajorName)
					equal = false;
			}
			else if (Object1.MajorName == null ^ Object2.MajorName == null )
			{
				equal = false;
			}
			if ( Object1.LastYear != null && Object2.LastYear != null )
			{
				if (Object1.LastYear != Object2.LastYear)
					equal = false;
			}
			else if (Object1.LastYear == null ^ Object2.LastYear == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AdmAppTransReqBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AdmAppTransReqComparer GetComparer()
        {
            return new AdmAppTransReqComparer();
        }
        */

        // Comparer delegates back to AdmAppTransReq
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AdmAppTransReq rhs, AdmAppTransReqColumn which)
        {
            switch (which)
            {
            	
            	
            	case AdmAppTransReqColumn.AdmAppTransReqId:
            		return this.AdmAppTransReqId.CompareTo(rhs.AdmAppTransReqId);
            		
            		                 
            	
            	
            	case AdmAppTransReqColumn.AdmAppRegHistoryId:
            		return this.AdmAppRegHistoryId.CompareTo(rhs.AdmAppRegHistoryId);
            		
            		                 
            	
            	
            	case AdmAppTransReqColumn.UnivName:
            		return this.UnivName.CompareTo(rhs.UnivName);
            		
            		                 
            	
            	
            	case AdmAppTransReqColumn.FacName:
            		return this.FacName.CompareTo(rhs.FacName);
            		
            		                 
            	
            	
            	case AdmAppTransReqColumn.PrvSemesterNo:
            		return this.PrvSemesterNo.Value.CompareTo(rhs.PrvSemesterNo.Value);
            		
            		                 
            	
            	
            	case AdmAppTransReqColumn.PrvChNo:
            		return this.PrvChNo.Value.CompareTo(rhs.PrvChNo.Value);
            		
            		                 
            	
            	
            	case AdmAppTransReqColumn.PrvCgpa:
            		return this.PrvCgpa.Value.CompareTo(rhs.PrvCgpa.Value);
            		
            		                 
            	
            	
            	case AdmAppTransReqColumn.EntMainId:
            		return this.EntMainId.CompareTo(rhs.EntMainId);
            		
            		                 
            	
            	
            	case AdmAppTransReqColumn.TransferReason:
            		return this.TransferReason.CompareTo(rhs.TransferReason);
            		
            		                 
            	
            	
            	case AdmAppTransReqColumn.GsCodeReqStatusId:
            		return this.GsCodeReqStatusId.CompareTo(rhs.GsCodeReqStatusId);
            		
            		                 
            	
            	
            	case AdmAppTransReqColumn.ReqStatusDate:
            		return this.ReqStatusDate.Value.CompareTo(rhs.ReqStatusDate.Value);
            		
            		                 
            	
            	
            	case AdmAppTransReqColumn.IsApplied:
            		return this.IsApplied.CompareTo(rhs.IsApplied);
            		
            		                 
            	
            	
            	case AdmAppTransReqColumn.AdmCodeTransferTypeId:
            		return this.AdmCodeTransferTypeId.Value.CompareTo(rhs.AdmCodeTransferTypeId.Value);
            		
            		                 
            	
            	
            	case AdmAppTransReqColumn.EdCodeLevelReqId:
            		return this.EdCodeLevelReqId.Value.CompareTo(rhs.EdCodeLevelReqId.Value);
            		
            		                 
            	
            	
            	case AdmAppTransReqColumn.EdCodeLevelAppId:
            		return this.EdCodeLevelAppId.Value.CompareTo(rhs.EdCodeLevelAppId.Value);
            		
            		                 
            	
            	
            	case AdmAppTransReqColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case AdmAppTransReqColumn.GsCountryNodeId:
            		return this.GsCountryNodeId.Value.CompareTo(rhs.GsCountryNodeId.Value);
            		
            		                 
            	
            	
            	case AdmAppTransReqColumn.MajorName:
            		return this.MajorName.CompareTo(rhs.MajorName);
            		
            		                 
            	
            	
            	case AdmAppTransReqColumn.LastYear:
            		return this.LastYear.CompareTo(rhs.LastYear);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AdmAppTransReqKey> Members
		
		// member variable for the EntityId property
		private AdmAppTransReqKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AdmAppTransReqKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AdmAppTransReqKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AdmAppTransReq")
					.Append("|").Append( this.AdmAppTransReqId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{20}{19}- AdmAppTransReqId: {0}{19}- AdmAppRegHistoryId: {1}{19}- UnivName: {2}{19}- FacName: {3}{19}- PrvSemesterNo: {4}{19}- PrvChNo: {5}{19}- PrvCgpa: {6}{19}- EntMainId: {7}{19}- TransferReason: {8}{19}- GsCodeReqStatusId: {9}{19}- ReqStatusDate: {10}{19}- IsApplied: {11}{19}- AdmCodeTransferTypeId: {12}{19}- EdCodeLevelReqId: {13}{19}- EdCodeLevelAppId: {14}{19}- AsFacultyInfoId: {15}{19}- GsCountryNodeId: {16}{19}- MajorName: {17}{19}- LastYear: {18}{19}{21}", 
				this.AdmAppTransReqId,
				this.AdmAppRegHistoryId,
				(this.UnivName == null) ? string.Empty : this.UnivName.ToString(),
				(this.FacName == null) ? string.Empty : this.FacName.ToString(),
				(this.PrvSemesterNo == null) ? string.Empty : this.PrvSemesterNo.ToString(),
				(this.PrvChNo == null) ? string.Empty : this.PrvChNo.ToString(),
				(this.PrvCgpa == null) ? string.Empty : this.PrvCgpa.ToString(),
				this.EntMainId,
				(this.TransferReason == null) ? string.Empty : this.TransferReason.ToString(),
				this.GsCodeReqStatusId,
				(this.ReqStatusDate == null) ? string.Empty : this.ReqStatusDate.ToString(),
				this.IsApplied,
				(this.AdmCodeTransferTypeId == null) ? string.Empty : this.AdmCodeTransferTypeId.ToString(),
				(this.EdCodeLevelReqId == null) ? string.Empty : this.EdCodeLevelReqId.ToString(),
				(this.EdCodeLevelAppId == null) ? string.Empty : this.EdCodeLevelAppId.ToString(),
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				(this.GsCountryNodeId == null) ? string.Empty : this.GsCountryNodeId.ToString(),
				(this.MajorName == null) ? string.Empty : this.MajorName.ToString(),
				(this.LastYear == null) ? string.Empty : this.LastYear.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ADM_APP_TRANS_REQ' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AdmAppTransReqEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ADM_APP_TRANS_REQ_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ADM_APP_TRANS_REQ"</remarks>
		public System.Decimal AdmAppTransReqId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalAdmAppTransReqId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ADM_APP_REG_HISTORY_ID : 
		/// </summary>
		public System.Decimal		  AdmAppRegHistoryId = 0.0m;
		
		/// <summary>
		/// UNIV_NAME : الجماعه المحول منها
		/// </summary>
		public System.String		  UnivName = null;
		
		/// <summary>
		/// FAC_NAME : الكلية المحول منها
		/// </summary>
		public System.String		  FacName = null;
		
		/// <summary>
		/// PRV_SEMESTER_NO : 
		/// </summary>
		public System.Decimal?		  PrvSemesterNo = null;
		
		/// <summary>
		/// PRV_CH_NO : 
		/// </summary>
		public System.Decimal?		  PrvChNo = null;
		
		/// <summary>
		/// PRV_CGPA : 
		/// </summary>
		public System.Decimal?		  PrvCgpa = null;
		
		/// <summary>
		/// ENT_MAIN_ID : 
		/// </summary>
		public System.Decimal		  EntMainId = 0.0m;
		
		/// <summary>
		/// TRANSFER_REASON : سبب التحويل
		/// </summary>
		public System.String		  TransferReason = null;
		
		/// <summary>
		/// GS_CODE_REQ_STATUS_ID : 
		/// </summary>
		public System.Decimal		  GsCodeReqStatusId = 0.0m;
		
		/// <summary>
		/// REQ_STATUS_DATE : 
		/// </summary>
		public System.DateTime?		  ReqStatusDate = null;
		
		/// <summary>
		/// IS_APPLIED : 
		/// </summary>
		public System.Decimal		  IsApplied = 0.0m;
		
		/// <summary>
		/// ADM_CODE_TRANSFER_TYPE_ID : خارجى
		/// </summary>
		public System.Decimal?		  AdmCodeTransferTypeId = null;
		
		/// <summary>
		/// ED_CODE_LEVEL_REQ_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeLevelReqId = null;
		
		/// <summary>
		/// ED_CODE_LEVEL_APP_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeLevelAppId = null;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// GS_COUNTRY_NODE_ID : الدولة المحول منها
		/// </summary>
		public System.Decimal?		  GsCountryNodeId = null;
		
		/// <summary>
		/// MAJOR_NAME : التخصص المحول منه
		/// </summary>
		public System.String		  MajorName = null;
		
		/// <summary>
		/// LAST_YEAR : اخر عام فى الكلية السابقة
		/// </summary>
		public System.String		  LastYear = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdmAppRegHistory _admAppRegHistoryIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmAppRegHistory"/>.
		/// </summary>
		/// <value>The source AdmAppRegHistory for AdmAppRegHistoryId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmAppRegHistory AdmAppRegHistoryIdSource
      	{
            get { return this._admAppRegHistoryIdSource; }
            set { this._admAppRegHistoryIdSource = value; }
      	}
		private AdmCodeTransferType _admCodeTransferTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmCodeTransferType"/>.
		/// </summary>
		/// <value>The source AdmCodeTransferType for AdmCodeTransferTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmCodeTransferType AdmCodeTransferTypeIdSource
      	{
            get { return this._admCodeTransferTypeIdSource; }
            set { this._admCodeTransferTypeIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdCodeLevel _edCodeLevelReqIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelReqId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeLevel EdCodeLevelReqIdSource
      	{
            get { return this._edCodeLevelReqIdSource; }
            set { this._edCodeLevelReqIdSource = value; }
      	}
		private EdCodeLevel _edCodeLevelAppIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelAppId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeLevel EdCodeLevelAppIdSource
      	{
            get { return this._edCodeLevelAppIdSource; }
            set { this._edCodeLevelAppIdSource = value; }
      	}
		private GsCountryNode _gsCountryNodeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCountryNode"/>.
		/// </summary>
		/// <value>The source GsCountryNode for GsCountryNodeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCountryNode GsCountryNodeIdSource
      	{
            get { return this._gsCountryNodeIdSource; }
            set { this._gsCountryNodeIdSource = value; }
      	}
		private EntityMain _entMainIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return this._entMainIdSource; }
            set { this._entMainIdSource = value; }
      	}
		private GsCodeReqStatus _gsCodeReqStatusIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeReqStatus"/>.
		/// </summary>
		/// <value>The source GsCodeReqStatus for GsCodeReqStatusId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeReqStatus GsCodeReqStatusIdSource
      	{
            get { return this._gsCodeReqStatusIdSource; }
            set { this._gsCodeReqStatusIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region AdmAppTransBalanceCollection
		
		private TList<AdmAppTransBalance> _admAppTransBalanceAdmAppTransReqId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppTransBalanceAdmAppTransReqId
		/// </summary>
		
		public TList<AdmAppTransBalance> AdmAppTransBalanceCollection
		{
			get
			{
				if (_admAppTransBalanceAdmAppTransReqId == null)
				{
				_admAppTransBalanceAdmAppTransReqId = new TList<AdmAppTransBalance>();
				}
	
				return _admAppTransBalanceAdmAppTransReqId;
			}
			set { _admAppTransBalanceAdmAppTransReqId = value; }
		}
		
		#endregion

		#region AdmAppTransToCourseCollection
		
		private TList<AdmAppTransToCourse> _admAppTransToCourseAdmAppTransReqId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppTransToCourseAdmAppTransReqId
		/// </summary>
		
		public TList<AdmAppTransToCourse> AdmAppTransToCourseCollection
		{
			get
			{
				if (_admAppTransToCourseAdmAppTransReqId == null)
				{
				_admAppTransToCourseAdmAppTransReqId = new TList<AdmAppTransToCourse>();
				}
	
				return _admAppTransToCourseAdmAppTransReqId;
			}
			set { _admAppTransToCourseAdmAppTransReqId = value; }
		}
		
		#endregion

		#region AdmTransferAcceptanceCollection
		
		private TList<AdmTransferAcceptance> _admTransferAcceptanceAdmAppTransReqId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admTransferAcceptanceAdmAppTransReqId
		/// </summary>
		
		public TList<AdmTransferAcceptance> AdmTransferAcceptanceCollection
		{
			get
			{
				if (_admTransferAcceptanceAdmAppTransReqId == null)
				{
				_admTransferAcceptanceAdmAppTransReqId = new TList<AdmTransferAcceptance>();
				}
	
				return _admTransferAcceptanceAdmAppTransReqId;
			}
			set { _admTransferAcceptanceAdmAppTransReqId = value; }
		}
		
		#endregion

		#region AdmAppTransFromCourseCollection
		
		private TList<AdmAppTransFromCourse> _admAppTransFromCourseAdmAppTransReqId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppTransFromCourseAdmAppTransReqId
		/// </summary>
		
		public TList<AdmAppTransFromCourse> AdmAppTransFromCourseCollection
		{
			get
			{
				if (_admAppTransFromCourseAdmAppTransReqId == null)
				{
				_admAppTransFromCourseAdmAppTransReqId = new TList<AdmAppTransFromCourse>();
				}
	
				return _admAppTransFromCourseAdmAppTransReqId;
			}
			set { _admAppTransFromCourseAdmAppTransReqId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AdmAppTransReqEntityData _tmp = new AdmAppTransReqEntityData();
						
			_tmp.AdmAppTransReqId = this.AdmAppTransReqId;
			_tmp.OriginalAdmAppTransReqId = this.OriginalAdmAppTransReqId;
			
			_tmp.AdmAppRegHistoryId = this.AdmAppRegHistoryId;
			_tmp.UnivName = this.UnivName;
			_tmp.FacName = this.FacName;
			_tmp.PrvSemesterNo = this.PrvSemesterNo;
			_tmp.PrvChNo = this.PrvChNo;
			_tmp.PrvCgpa = this.PrvCgpa;
			_tmp.EntMainId = this.EntMainId;
			_tmp.TransferReason = this.TransferReason;
			_tmp.GsCodeReqStatusId = this.GsCodeReqStatusId;
			_tmp.ReqStatusDate = this.ReqStatusDate;
			_tmp.IsApplied = this.IsApplied;
			_tmp.AdmCodeTransferTypeId = this.AdmCodeTransferTypeId;
			_tmp.EdCodeLevelReqId = this.EdCodeLevelReqId;
			_tmp.EdCodeLevelAppId = this.EdCodeLevelAppId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.MajorName = this.MajorName;
			_tmp.LastYear = this.LastYear;
			
			#region Source Parent Composite Entities
			if (this.AdmAppRegHistoryIdSource != null)
				_tmp.AdmAppRegHistoryIdSource = MakeCopyOf(this.AdmAppRegHistoryIdSource) as AdmAppRegHistory;
			if (this.AdmCodeTransferTypeIdSource != null)
				_tmp.AdmCodeTransferTypeIdSource = MakeCopyOf(this.AdmCodeTransferTypeIdSource) as AdmCodeTransferType;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdCodeLevelReqIdSource != null)
				_tmp.EdCodeLevelReqIdSource = MakeCopyOf(this.EdCodeLevelReqIdSource) as EdCodeLevel;
			if (this.EdCodeLevelAppIdSource != null)
				_tmp.EdCodeLevelAppIdSource = MakeCopyOf(this.EdCodeLevelAppIdSource) as EdCodeLevel;
			if (this.GsCountryNodeIdSource != null)
				_tmp.GsCountryNodeIdSource = MakeCopyOf(this.GsCountryNodeIdSource) as GsCountryNode;
			if (this.EntMainIdSource != null)
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource) as EntityMain;
			if (this.GsCodeReqStatusIdSource != null)
				_tmp.GsCodeReqStatusIdSource = MakeCopyOf(this.GsCodeReqStatusIdSource) as GsCodeReqStatus;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._admAppTransBalanceAdmAppTransReqId != null)
				_tmp.AdmAppTransBalanceCollection = (TList<AdmAppTransBalance>) MakeCopyOf(this.AdmAppTransBalanceCollection); 
			if (this._admAppTransToCourseAdmAppTransReqId != null)
				_tmp.AdmAppTransToCourseCollection = (TList<AdmAppTransToCourse>) MakeCopyOf(this.AdmAppTransToCourseCollection); 
			if (this._admTransferAcceptanceAdmAppTransReqId != null)
				_tmp.AdmTransferAcceptanceCollection = (TList<AdmTransferAcceptance>) MakeCopyOf(this.AdmTransferAcceptanceCollection); 
			if (this._admAppTransFromCourseAdmAppTransReqId != null)
				_tmp.AdmAppTransFromCourseCollection = (TList<AdmAppTransFromCourse>) MakeCopyOf(this.AdmAppTransFromCourseCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AdmAppTransReqEntityData _tmp = new AdmAppTransReqEntityData();
						
			_tmp.AdmAppTransReqId = this.AdmAppTransReqId;
			_tmp.OriginalAdmAppTransReqId = this.OriginalAdmAppTransReqId;
			
			_tmp.AdmAppRegHistoryId = this.AdmAppRegHistoryId;
			_tmp.UnivName = this.UnivName;
			_tmp.FacName = this.FacName;
			_tmp.PrvSemesterNo = this.PrvSemesterNo;
			_tmp.PrvChNo = this.PrvChNo;
			_tmp.PrvCgpa = this.PrvCgpa;
			_tmp.EntMainId = this.EntMainId;
			_tmp.TransferReason = this.TransferReason;
			_tmp.GsCodeReqStatusId = this.GsCodeReqStatusId;
			_tmp.ReqStatusDate = this.ReqStatusDate;
			_tmp.IsApplied = this.IsApplied;
			_tmp.AdmCodeTransferTypeId = this.AdmCodeTransferTypeId;
			_tmp.EdCodeLevelReqId = this.EdCodeLevelReqId;
			_tmp.EdCodeLevelAppId = this.EdCodeLevelAppId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.MajorName = this.MajorName;
			_tmp.LastYear = this.LastYear;
			
			#region Source Parent Composite Entities
			if (this.AdmAppRegHistoryIdSource != null && existingCopies.Contains(this.AdmAppRegHistoryIdSource))
				_tmp.AdmAppRegHistoryIdSource = existingCopies[this.AdmAppRegHistoryIdSource] as AdmAppRegHistory;
			else
				_tmp.AdmAppRegHistoryIdSource = MakeCopyOf(this.AdmAppRegHistoryIdSource, existingCopies) as AdmAppRegHistory;
			if (this.AdmCodeTransferTypeIdSource != null && existingCopies.Contains(this.AdmCodeTransferTypeIdSource))
				_tmp.AdmCodeTransferTypeIdSource = existingCopies[this.AdmCodeTransferTypeIdSource] as AdmCodeTransferType;
			else
				_tmp.AdmCodeTransferTypeIdSource = MakeCopyOf(this.AdmCodeTransferTypeIdSource, existingCopies) as AdmCodeTransferType;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdCodeLevelReqIdSource != null && existingCopies.Contains(this.EdCodeLevelReqIdSource))
				_tmp.EdCodeLevelReqIdSource = existingCopies[this.EdCodeLevelReqIdSource] as EdCodeLevel;
			else
				_tmp.EdCodeLevelReqIdSource = MakeCopyOf(this.EdCodeLevelReqIdSource, existingCopies) as EdCodeLevel;
			if (this.EdCodeLevelAppIdSource != null && existingCopies.Contains(this.EdCodeLevelAppIdSource))
				_tmp.EdCodeLevelAppIdSource = existingCopies[this.EdCodeLevelAppIdSource] as EdCodeLevel;
			else
				_tmp.EdCodeLevelAppIdSource = MakeCopyOf(this.EdCodeLevelAppIdSource, existingCopies) as EdCodeLevel;
			if (this.GsCountryNodeIdSource != null && existingCopies.Contains(this.GsCountryNodeIdSource))
				_tmp.GsCountryNodeIdSource = existingCopies[this.GsCountryNodeIdSource] as GsCountryNode;
			else
				_tmp.GsCountryNodeIdSource = MakeCopyOf(this.GsCountryNodeIdSource, existingCopies) as GsCountryNode;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				_tmp.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.GsCodeReqStatusIdSource != null && existingCopies.Contains(this.GsCodeReqStatusIdSource))
				_tmp.GsCodeReqStatusIdSource = existingCopies[this.GsCodeReqStatusIdSource] as GsCodeReqStatus;
			else
				_tmp.GsCodeReqStatusIdSource = MakeCopyOf(this.GsCodeReqStatusIdSource, existingCopies) as GsCodeReqStatus;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.AdmAppTransBalanceCollection = (TList<AdmAppTransBalance>) MakeCopyOf(this.AdmAppTransBalanceCollection, existingCopies); 
			_tmp.AdmAppTransToCourseCollection = (TList<AdmAppTransToCourse>) MakeCopyOf(this.AdmAppTransToCourseCollection, existingCopies); 
			_tmp.AdmTransferAcceptanceCollection = (TList<AdmTransferAcceptance>) MakeCopyOf(this.AdmTransferAcceptanceCollection, existingCopies); 
			_tmp.AdmAppTransFromCourseCollection = (TList<AdmAppTransFromCourse>) MakeCopyOf(this.AdmAppTransFromCourseCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmAppTransReqColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AdmAppTransReqColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmAppTransReqColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AdmAppTransReqColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmAppTransReqColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AdmAppTransReqColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AdmAppTransReqEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AdmAppTransReqEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmAppTransReqColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AdmAppTransReqColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AdmAppTransReqEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AdmAppTransReqEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AdmAppTransReqEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AdmAppTransReq"/> object.
	/// </remarks>
	public class AdmAppTransReqEventArgs : System.EventArgs
	{
		private AdmAppTransReqColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AdmAppTransReqEventArgs class.
		///</summary>
		public AdmAppTransReqEventArgs(AdmAppTransReqColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AdmAppTransReqEventArgs class.
		///</summary>
		public AdmAppTransReqEventArgs(AdmAppTransReqColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AdmAppTransReqColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AdmAppTransReqColumn" />
		public AdmAppTransReqColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AdmAppTransReq related events.
	///</summary>
	public delegate void AdmAppTransReqEventHandler(object sender, AdmAppTransReqEventArgs e);
	
	#region AdmAppTransReqComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AdmAppTransReqComparer : System.Collections.Generic.IComparer<AdmAppTransReq>
	{
		AdmAppTransReqColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AdmAppTransReqComparer"/> class.
        /// </summary>
		public AdmAppTransReqComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AdmAppTransReqComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AdmAppTransReqComparer(AdmAppTransReqColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AdmAppTransReq"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AdmAppTransReq"/> to compare.</param>
        /// <param name="b">The second <c>AdmAppTransReq</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AdmAppTransReq a, AdmAppTransReq b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AdmAppTransReq entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AdmAppTransReq a, AdmAppTransReq b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AdmAppTransReqColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AdmAppTransReqKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AdmAppTransReq"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AdmAppTransReqKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AdmAppTransReqKey class.
		/// </summary>
		public AdmAppTransReqKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmAppTransReqKey class.
		/// </summary>
		public AdmAppTransReqKey(AdmAppTransReqBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AdmAppTransReqId = entity.AdmAppTransReqId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmAppTransReqKey class.
		/// </summary>
		public AdmAppTransReqKey(System.Decimal _admAppTransReqId)
		{
			#region Init Properties

			this.AdmAppTransReqId = _admAppTransReqId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AdmAppTransReqBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AdmAppTransReqBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AdmAppTransReqId property
		private System.Decimal _admAppTransReqId;
		
		/// <summary>
		/// Gets or sets the AdmAppTransReqId property.
		/// </summary>
		public System.Decimal AdmAppTransReqId
		{
			get { return _admAppTransReqId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AdmAppTransReqId = value;
				
				_admAppTransReqId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AdmAppTransReqId = ( values["AdmAppTransReqId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["AdmAppTransReqId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AdmAppTransReqId", AdmAppTransReqId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AdmAppTransReqId: {0}{1}",
								AdmAppTransReqId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AdmAppTransReqColumn Enum
	
	/// <summary>
	/// Enumerate the AdmAppTransReq columns.
	/// </summary>
	[Serializable]
	public enum AdmAppTransReqColumn : int
	{
		/// <summary>
		/// AdmAppTransReqId : 
		/// </summary>
		[EnumTextValue("ADM_APP_TRANS_REQ_ID")]
		[ColumnEnum("ADM_APP_TRANS_REQ_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		AdmAppTransReqId = 1,
		/// <summary>
		/// AdmAppRegHistoryId : 
		/// </summary>
		[EnumTextValue("ADM_APP_REG_HISTORY_ID")]
		[ColumnEnum("ADM_APP_REG_HISTORY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AdmAppRegHistoryId = 2,
		/// <summary>
		/// UnivName : الجماعه المحول منها
		/// </summary>
		[EnumTextValue("UNIV_NAME")]
		[ColumnEnum("UNIV_NAME", typeof(System.String), System.Data.DbType.String, false, false, true, 60)]
		UnivName = 3,
		/// <summary>
		/// FacName : الكلية المحول منها
		/// </summary>
		[EnumTextValue("FAC_NAME")]
		[ColumnEnum("FAC_NAME", typeof(System.String), System.Data.DbType.String, false, false, true, 40)]
		FacName = 4,
		/// <summary>
		/// PrvSemesterNo : 
		/// </summary>
		[EnumTextValue("PRV_SEMESTER_NO")]
		[ColumnEnum("PRV_SEMESTER_NO", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PrvSemesterNo = 5,
		/// <summary>
		/// PrvChNo : 
		/// </summary>
		[EnumTextValue("PRV_CH_NO")]
		[ColumnEnum("PRV_CH_NO", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PrvChNo = 6,
		/// <summary>
		/// PrvCgpa : 
		/// </summary>
		[EnumTextValue("PRV_CGPA")]
		[ColumnEnum("PRV_CGPA", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PrvCgpa = 7,
		/// <summary>
		/// EntMainId : 
		/// </summary>
		[EnumTextValue("ENT_MAIN_ID")]
		[ColumnEnum("ENT_MAIN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EntMainId = 8,
		/// <summary>
		/// TransferReason : سبب التحويل
		/// </summary>
		[EnumTextValue("TRANSFER_REASON")]
		[ColumnEnum("TRANSFER_REASON", typeof(System.String), System.Data.DbType.String, false, false, true, 300)]
		TransferReason = 9,
		/// <summary>
		/// GsCodeReqStatusId : 
		/// </summary>
		[EnumTextValue("GS_CODE_REQ_STATUS_ID")]
		[ColumnEnum("GS_CODE_REQ_STATUS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsCodeReqStatusId = 10,
		/// <summary>
		/// ReqStatusDate : 
		/// </summary>
		[EnumTextValue("REQ_STATUS_DATE")]
		[ColumnEnum("REQ_STATUS_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ReqStatusDate = 11,
		/// <summary>
		/// IsApplied : 
		/// </summary>
		[EnumTextValue("IS_APPLIED")]
		[ColumnEnum("IS_APPLIED", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsApplied = 12,
		/// <summary>
		/// AdmCodeTransferTypeId : خارجى
		/// </summary>
		[EnumTextValue("ADM_CODE_TRANSFER_TYPE_ID")]
		[ColumnEnum("ADM_CODE_TRANSFER_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmCodeTransferTypeId = 13,
		/// <summary>
		/// EdCodeLevelReqId : 
		/// </summary>
		[EnumTextValue("ED_CODE_LEVEL_REQ_ID")]
		[ColumnEnum("ED_CODE_LEVEL_REQ_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeLevelReqId = 14,
		/// <summary>
		/// EdCodeLevelAppId : 
		/// </summary>
		[EnumTextValue("ED_CODE_LEVEL_APP_ID")]
		[ColumnEnum("ED_CODE_LEVEL_APP_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeLevelAppId = 15,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 16,
		/// <summary>
		/// GsCountryNodeId : الدولة المحول منها
		/// </summary>
		[EnumTextValue("GS_COUNTRY_NODE_ID")]
		[ColumnEnum("GS_COUNTRY_NODE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCountryNodeId = 17,
		/// <summary>
		/// MajorName : التخصص المحول منه
		/// </summary>
		[EnumTextValue("MAJOR_NAME")]
		[ColumnEnum("MAJOR_NAME", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		MajorName = 18,
		/// <summary>
		/// LastYear : اخر عام فى الكلية السابقة
		/// </summary>
		[EnumTextValue("LAST_YEAR")]
		[ColumnEnum("LAST_YEAR", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		LastYear = 19
	}//End enum

	#endregion AdmAppTransReqColumn Enum

} // end namespace
