
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SvPollHdr.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SV_POLL_HDR' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SvPollHdrBase : EntityBase, ISvPollHdr, IEntityId<SvPollHdrKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SvPollHdrEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SvPollHdrEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SvPollHdrEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SvPollHdr> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SvPollHdrEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SvPollHdrEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SvPollHdrBase"/> instance.
		///</summary>
		public SvPollHdrBase()
		{
			this.entityData = new SvPollHdrEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SvPollHdrBase"/> instance.
		///</summary>
		///<param name="_svPollHdrId"></param>
		///<param name="_seUserId"></param>
		///<param name="_pollText"></param>
		///<param name="_pollDate"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_dueDate"></param>
		///<param name="_edCourseId"></param>
		///<param name="_entMainId"></param>
		///<param name="_rltdToFlg"></param>
		///<param name="_scScheduleDtlId"></param>
		///<param name="_studStaffFlg"></param>
		///<param name="_pubFlg"></param>
		public SvPollHdrBase(System.Decimal _svPollHdrId, System.Decimal _seUserId, System.String _pollText, 
			System.DateTime _pollDate, System.Decimal? _asFacultyInfoId, System.DateTime? _dueDate, 
			System.Decimal? _edCourseId, System.Decimal? _entMainId, System.Decimal? _rltdToFlg, System.Decimal? _scScheduleDtlId, 
			System.Decimal? _studStaffFlg, System.Decimal _pubFlg)
		{
			this.entityData = new SvPollHdrEntityData();
			this.backupData = null;

			this.SvPollHdrId = _svPollHdrId;
			this.SeUserId = _seUserId;
			this.PollText = _pollText;
			this.PollDate = _pollDate;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.DueDate = _dueDate;
			this.EdCourseId = _edCourseId;
			this.EntMainId = _entMainId;
			this.RltdToFlg = _rltdToFlg;
			this.ScScheduleDtlId = _scScheduleDtlId;
			this.StudStaffFlg = _studStaffFlg;
			this.PubFlg = _pubFlg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SvPollHdr"/> instance.
		///</summary>
		///<param name="_svPollHdrId"></param>
		///<param name="_seUserId"></param>
		///<param name="_pollText"></param>
		///<param name="_pollDate"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_dueDate"></param>
		///<param name="_edCourseId"></param>
		///<param name="_entMainId"></param>
		///<param name="_rltdToFlg"></param>
		///<param name="_scScheduleDtlId"></param>
		///<param name="_studStaffFlg"></param>
		///<param name="_pubFlg"></param>
		public static SvPollHdr CreateSvPollHdr(System.Decimal _svPollHdrId, System.Decimal _seUserId, System.String _pollText, 
			System.DateTime _pollDate, System.Decimal? _asFacultyInfoId, System.DateTime? _dueDate, 
			System.Decimal? _edCourseId, System.Decimal? _entMainId, System.Decimal? _rltdToFlg, System.Decimal? _scScheduleDtlId, 
			System.Decimal? _studStaffFlg, System.Decimal _pubFlg)
		{
			SvPollHdr newSvPollHdr = new SvPollHdr();
			newSvPollHdr.SvPollHdrId = _svPollHdrId;
			newSvPollHdr.SeUserId = _seUserId;
			newSvPollHdr.PollText = _pollText;
			newSvPollHdr.PollDate = _pollDate;
			newSvPollHdr.AsFacultyInfoId = _asFacultyInfoId;
			newSvPollHdr.DueDate = _dueDate;
			newSvPollHdr.EdCourseId = _edCourseId;
			newSvPollHdr.EntMainId = _entMainId;
			newSvPollHdr.RltdToFlg = _rltdToFlg;
			newSvPollHdr.ScScheduleDtlId = _scScheduleDtlId;
			newSvPollHdr.StudStaffFlg = _studStaffFlg;
			newSvPollHdr.PubFlg = _pubFlg;
			return newSvPollHdr;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SvPollHdrId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SvPollHdrId
		{
			get
			{
				return this.entityData.SvPollHdrId; 
			}
			
			set
			{
				if (this.entityData.SvPollHdrId == value)
					return;
					
				OnColumnChanging(SvPollHdrColumn.SvPollHdrId, this.entityData.SvPollHdrId);
				this.entityData.SvPollHdrId = value;
				this.EntityId.SvPollHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvPollHdrColumn.SvPollHdrId, this.entityData.SvPollHdrId);
				OnPropertyChanged("SvPollHdrId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SV_POLL_HDR_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SV_POLL_HDR_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSvPollHdrId
		{
			get { return this.entityData.OriginalSvPollHdrId; }
			set { this.entityData.OriginalSvPollHdrId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(SvPollHdrColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvPollHdrColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PollText property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 255)]
		public virtual System.String PollText
		{
			get
			{
				return this.entityData.PollText; 
			}
			
			set
			{
				if (this.entityData.PollText == value)
					return;
					
				OnColumnChanging(SvPollHdrColumn.PollText, this.entityData.PollText);
				this.entityData.PollText = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvPollHdrColumn.PollText, this.entityData.PollText);
				OnPropertyChanged("PollText");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PollDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime PollDate
		{
			get
			{
				return this.entityData.PollDate; 
			}
			
			set
			{
				if (this.entityData.PollDate == value)
					return;
					
				OnColumnChanging(SvPollHdrColumn.PollDate, this.entityData.PollDate);
				this.entityData.PollDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvPollHdrColumn.PollDate, this.entityData.PollDate);
				OnPropertyChanged("PollDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(SvPollHdrColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvPollHdrColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DueDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsDueDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DueDate
		{
			get
			{
				return this.entityData.DueDate; 
			}
			
			set
			{
				if (this.entityData.DueDate == value)
					return;
					
				OnColumnChanging(SvPollHdrColumn.DueDate, this.entityData.DueDate);
				this.entityData.DueDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvPollHdrColumn.DueDate, this.entityData.DueDate);
				OnPropertyChanged("DueDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCourseIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCourseId
		{
			get
			{
				return this.entityData.EdCourseId; 
			}
			
			set
			{
				if (this.entityData.EdCourseId == value)
					return;
					
				OnColumnChanging(SvPollHdrColumn.EdCourseId, this.entityData.EdCourseId);
				this.entityData.EdCourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvPollHdrColumn.EdCourseId, this.entityData.EdCourseId);
				OnPropertyChanged("EdCourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntMainId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntMainIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntMainId
		{
			get
			{
				return this.entityData.EntMainId; 
			}
			
			set
			{
				if (this.entityData.EntMainId == value)
					return;
					
				OnColumnChanging(SvPollHdrColumn.EntMainId, this.entityData.EntMainId);
				this.entityData.EntMainId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvPollHdrColumn.EntMainId, this.entityData.EntMainId);
				OnPropertyChanged("EntMainId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RltdToFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRltdToFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RltdToFlg
		{
			get
			{
				return this.entityData.RltdToFlg; 
			}
			
			set
			{
				if (this.entityData.RltdToFlg == value)
					return;
					
				OnColumnChanging(SvPollHdrColumn.RltdToFlg, this.entityData.RltdToFlg);
				this.entityData.RltdToFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvPollHdrColumn.RltdToFlg, this.entityData.RltdToFlg);
				OnPropertyChanged("RltdToFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScScheduleDtlId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScScheduleDtlIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScScheduleDtlId
		{
			get
			{
				return this.entityData.ScScheduleDtlId; 
			}
			
			set
			{
				if (this.entityData.ScScheduleDtlId == value)
					return;
					
				OnColumnChanging(SvPollHdrColumn.ScScheduleDtlId, this.entityData.ScScheduleDtlId);
				this.entityData.ScScheduleDtlId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvPollHdrColumn.ScScheduleDtlId, this.entityData.ScScheduleDtlId);
				OnPropertyChanged("ScScheduleDtlId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StudStaffFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsStudStaffFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? StudStaffFlg
		{
			get
			{
				return this.entityData.StudStaffFlg; 
			}
			
			set
			{
				if (this.entityData.StudStaffFlg == value)
					return;
					
				OnColumnChanging(SvPollHdrColumn.StudStaffFlg, this.entityData.StudStaffFlg);
				this.entityData.StudStaffFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvPollHdrColumn.StudStaffFlg, this.entityData.StudStaffFlg);
				OnPropertyChanged("StudStaffFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PubFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal PubFlg
		{
			get
			{
				return this.entityData.PubFlg; 
			}
			
			set
			{
				if (this.entityData.PubFlg == value)
					return;
					
				OnColumnChanging(SvPollHdrColumn.PubFlg, this.entityData.PubFlg);
				this.entityData.PubFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvPollHdrColumn.PubFlg, this.entityData.PubFlg);
				OnPropertyChanged("PubFlg");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return entityData.EdCourseIdSource; }
            set { entityData.EdCourseIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return entityData.EntMainIdSource; }
            set { entityData.EntMainIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScScheduleDtl"/>.
		/// </summary>
		/// <value>The source ScScheduleDtl for ScScheduleDtlId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScScheduleDtl ScScheduleDtlIdSource
      	{
            get { return entityData.ScScheduleDtlIdSource; }
            set { entityData.ScScheduleDtlIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeUser SeUserIdSource
      	{
            get { return entityData.SeUserIdSource; }
            set { entityData.SeUserIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of SvPollDtl objects
		///	which are related to this object through the relation FK_SV_POLL_DTL_SV_POLL_HDR1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SvPollDtl> SvPollDtlCollection
		{
			get { return entityData.SvPollDtlCollection; }
			set { entityData.SvPollDtlCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("PollText", "Poll Text"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PollText", "Poll Text", 255));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SV_POLL_HDR"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SV_POLL_HDR_ID", "SE_USER_ID", "POLL_TEXT", "POLL_DATE", "AS_FACULTY_INFO_ID", "DUE_DATE", "ED_COURSE_ID", "ENT_MAIN_ID", "RLTD_TO_FLG", "SC_SCHEDULE_DTL_ID", "STUD_STAFF_FLG", "PUB_FLG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SvPollHdrEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SvPollHdr) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SvPollHdr>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SvPollHdr);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SvPollHdr Entity 
		///</summary>
		protected virtual SvPollHdr Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SvPollHdr copy = new SvPollHdr();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SvPollHdrId = this.SvPollHdrId;
					copy.OriginalSvPollHdrId = this.OriginalSvPollHdrId;
				copy.SeUserId = this.SeUserId;
				copy.PollText = this.PollText;
				copy.PollDate = this.PollDate;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.DueDate = this.DueDate;
				copy.EdCourseId = this.EdCourseId;
				copy.EntMainId = this.EntMainId;
				copy.RltdToFlg = this.RltdToFlg;
				copy.ScScheduleDtlId = this.ScScheduleDtlId;
				copy.StudStaffFlg = this.StudStaffFlg;
				copy.PubFlg = this.PubFlg;
			
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				copy.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				copy.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				copy.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				copy.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.ScScheduleDtlIdSource != null && existingCopies.Contains(this.ScScheduleDtlIdSource))
				copy.ScScheduleDtlIdSource = existingCopies[this.ScScheduleDtlIdSource] as ScScheduleDtl;
			else
				copy.ScScheduleDtlIdSource = MakeCopyOf(this.ScScheduleDtlIdSource, existingCopies) as ScScheduleDtl;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				copy.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				copy.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
		
			//deep copy nested objects
			copy.SvPollDtlCollection = (TList<SvPollDtl>) MakeCopyOf(this.SvPollDtlCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SvPollHdr Entity 
		///</summary>
		public virtual SvPollHdr Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SvPollHdr Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SvPollHdr DeepCopy()
		{
			return EntityHelper.Clone<SvPollHdr>(this as SvPollHdr);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SvPollHdrEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SvPollHdrEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SvPollHdrEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SvPollHdrColumn column)
		{
			switch(column)
			{
					case SvPollHdrColumn.SvPollHdrId:
					return entityData.SvPollHdrId != _originalData.SvPollHdrId;
					case SvPollHdrColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case SvPollHdrColumn.PollText:
					return entityData.PollText != _originalData.PollText;
					case SvPollHdrColumn.PollDate:
					return entityData.PollDate != _originalData.PollDate;
					case SvPollHdrColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case SvPollHdrColumn.DueDate:
					return entityData.DueDate != _originalData.DueDate;
					case SvPollHdrColumn.EdCourseId:
					return entityData.EdCourseId != _originalData.EdCourseId;
					case SvPollHdrColumn.EntMainId:
					return entityData.EntMainId != _originalData.EntMainId;
					case SvPollHdrColumn.RltdToFlg:
					return entityData.RltdToFlg != _originalData.RltdToFlg;
					case SvPollHdrColumn.ScScheduleDtlId:
					return entityData.ScScheduleDtlId != _originalData.ScScheduleDtlId;
					case SvPollHdrColumn.StudStaffFlg:
					return entityData.StudStaffFlg != _originalData.StudStaffFlg;
					case SvPollHdrColumn.PubFlg:
					return entityData.PubFlg != _originalData.PubFlg;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SvPollHdrColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SvPollHdrId != _originalData.SvPollHdrId;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.PollText != _originalData.PollText;
			result = result || entityData.PollDate != _originalData.PollDate;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.DueDate != _originalData.DueDate;
			result = result || entityData.EdCourseId != _originalData.EdCourseId;
			result = result || entityData.EntMainId != _originalData.EntMainId;
			result = result || entityData.RltdToFlg != _originalData.RltdToFlg;
			result = result || entityData.ScScheduleDtlId != _originalData.ScScheduleDtlId;
			result = result || entityData.StudStaffFlg != _originalData.StudStaffFlg;
			result = result || entityData.PubFlg != _originalData.PubFlg;
			return result;
		}	
		
		///<summary>
		///  Returns a SvPollHdr Entity with the original data.
		///</summary>
		public SvPollHdr GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSvPollHdr(
				_originalData.SvPollHdrId,
				_originalData.SeUserId,
				_originalData.PollText,
				_originalData.PollDate,
				_originalData.AsFacultyInfoId,
				_originalData.DueDate,
				_originalData.EdCourseId,
				_originalData.EntMainId,
				_originalData.RltdToFlg,
				_originalData.ScScheduleDtlId,
				_originalData.StudStaffFlg,
				_originalData.PubFlg
				);
				
			return (SvPollHdr)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SvPollHdrBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SvPollHdrBase)
				return ValueEquals(this, (SvPollHdrBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SvPollHdrBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SvPollHdrId.GetHashCode() ^ 
					this.SeUserId.GetHashCode() ^ 
					this.PollText.GetHashCode() ^ 
					this.PollDate.GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					((this.DueDate == null) ? string.Empty : this.DueDate.ToString()).GetHashCode() ^ 
					((this.EdCourseId == null) ? string.Empty : this.EdCourseId.ToString()).GetHashCode() ^ 
					((this.EntMainId == null) ? string.Empty : this.EntMainId.ToString()).GetHashCode() ^ 
					((this.RltdToFlg == null) ? string.Empty : this.RltdToFlg.ToString()).GetHashCode() ^ 
					((this.ScScheduleDtlId == null) ? string.Empty : this.ScScheduleDtlId.ToString()).GetHashCode() ^ 
					((this.StudStaffFlg == null) ? string.Empty : this.StudStaffFlg.ToString()).GetHashCode() ^ 
					this.PubFlg.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SvPollHdrBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SvPollHdrBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SvPollHdrBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SvPollHdrBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SvPollHdrBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SvPollHdrBase Object1, SvPollHdrBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SvPollHdrId != Object2.SvPollHdrId)
				equal = false;
			if (Object1.SeUserId != Object2.SeUserId)
				equal = false;
			if (Object1.PollText != Object2.PollText)
				equal = false;
			if (Object1.PollDate != Object2.PollDate)
				equal = false;
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if ( Object1.DueDate != null && Object2.DueDate != null )
			{
				if (Object1.DueDate != Object2.DueDate)
					equal = false;
			}
			else if (Object1.DueDate == null ^ Object2.DueDate == null )
			{
				equal = false;
			}
			if ( Object1.EdCourseId != null && Object2.EdCourseId != null )
			{
				if (Object1.EdCourseId != Object2.EdCourseId)
					equal = false;
			}
			else if (Object1.EdCourseId == null ^ Object2.EdCourseId == null )
			{
				equal = false;
			}
			if ( Object1.EntMainId != null && Object2.EntMainId != null )
			{
				if (Object1.EntMainId != Object2.EntMainId)
					equal = false;
			}
			else if (Object1.EntMainId == null ^ Object2.EntMainId == null )
			{
				equal = false;
			}
			if ( Object1.RltdToFlg != null && Object2.RltdToFlg != null )
			{
				if (Object1.RltdToFlg != Object2.RltdToFlg)
					equal = false;
			}
			else if (Object1.RltdToFlg == null ^ Object2.RltdToFlg == null )
			{
				equal = false;
			}
			if ( Object1.ScScheduleDtlId != null && Object2.ScScheduleDtlId != null )
			{
				if (Object1.ScScheduleDtlId != Object2.ScScheduleDtlId)
					equal = false;
			}
			else if (Object1.ScScheduleDtlId == null ^ Object2.ScScheduleDtlId == null )
			{
				equal = false;
			}
			if ( Object1.StudStaffFlg != null && Object2.StudStaffFlg != null )
			{
				if (Object1.StudStaffFlg != Object2.StudStaffFlg)
					equal = false;
			}
			else if (Object1.StudStaffFlg == null ^ Object2.StudStaffFlg == null )
			{
				equal = false;
			}
			if (Object1.PubFlg != Object2.PubFlg)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SvPollHdrBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SvPollHdrComparer GetComparer()
        {
            return new SvPollHdrComparer();
        }
        */

        // Comparer delegates back to SvPollHdr
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SvPollHdr rhs, SvPollHdrColumn which)
        {
            switch (which)
            {
            	
            	
            	case SvPollHdrColumn.SvPollHdrId:
            		return this.SvPollHdrId.CompareTo(rhs.SvPollHdrId);
            		
            		                 
            	
            	
            	case SvPollHdrColumn.SeUserId:
            		return this.SeUserId.CompareTo(rhs.SeUserId);
            		
            		                 
            	
            	
            	case SvPollHdrColumn.PollText:
            		return this.PollText.CompareTo(rhs.PollText);
            		
            		                 
            	
            	
            	case SvPollHdrColumn.PollDate:
            		return this.PollDate.CompareTo(rhs.PollDate);
            		
            		                 
            	
            	
            	case SvPollHdrColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case SvPollHdrColumn.DueDate:
            		return this.DueDate.Value.CompareTo(rhs.DueDate.Value);
            		
            		                 
            	
            	
            	case SvPollHdrColumn.EdCourseId:
            		return this.EdCourseId.Value.CompareTo(rhs.EdCourseId.Value);
            		
            		                 
            	
            	
            	case SvPollHdrColumn.EntMainId:
            		return this.EntMainId.Value.CompareTo(rhs.EntMainId.Value);
            		
            		                 
            	
            	
            	case SvPollHdrColumn.RltdToFlg:
            		return this.RltdToFlg.Value.CompareTo(rhs.RltdToFlg.Value);
            		
            		                 
            	
            	
            	case SvPollHdrColumn.ScScheduleDtlId:
            		return this.ScScheduleDtlId.Value.CompareTo(rhs.ScScheduleDtlId.Value);
            		
            		                 
            	
            	
            	case SvPollHdrColumn.StudStaffFlg:
            		return this.StudStaffFlg.Value.CompareTo(rhs.StudStaffFlg.Value);
            		
            		                 
            	
            	
            	case SvPollHdrColumn.PubFlg:
            		return this.PubFlg.CompareTo(rhs.PubFlg);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SvPollHdrKey> Members
		
		// member variable for the EntityId property
		private SvPollHdrKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SvPollHdrKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SvPollHdrKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SvPollHdr")
					.Append("|").Append( this.SvPollHdrId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- SvPollHdrId: {0}{12}- SeUserId: {1}{12}- PollText: {2}{12}- PollDate: {3}{12}- AsFacultyInfoId: {4}{12}- DueDate: {5}{12}- EdCourseId: {6}{12}- EntMainId: {7}{12}- RltdToFlg: {8}{12}- ScScheduleDtlId: {9}{12}- StudStaffFlg: {10}{12}- PubFlg: {11}{12}{14}", 
				this.SvPollHdrId,
				this.SeUserId,
				this.PollText,
				this.PollDate,
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				(this.DueDate == null) ? string.Empty : this.DueDate.ToString(),
				(this.EdCourseId == null) ? string.Empty : this.EdCourseId.ToString(),
				(this.EntMainId == null) ? string.Empty : this.EntMainId.ToString(),
				(this.RltdToFlg == null) ? string.Empty : this.RltdToFlg.ToString(),
				(this.ScScheduleDtlId == null) ? string.Empty : this.ScScheduleDtlId.ToString(),
				(this.StudStaffFlg == null) ? string.Empty : this.StudStaffFlg.ToString(),
				this.PubFlg,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SV_POLL_HDR' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SvPollHdrEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SV_POLL_HDR_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SV_POLL_HDR"</remarks>
		public System.Decimal SvPollHdrId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSvPollHdrId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal		  SeUserId = 0.0m;
		
		/// <summary>
		/// POLL_TEXT : 
		/// </summary>
		public System.String		  PollText = string.Empty;
		
		/// <summary>
		/// POLL_DATE : 
		/// </summary>
		public System.DateTime		  PollDate = DateTime.MinValue;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// DUE_DATE : 
		/// </summary>
		public System.DateTime?		  DueDate = null;
		
		/// <summary>
		/// ED_COURSE_ID : 
		/// </summary>
		public System.Decimal?		  EdCourseId = null;
		
		/// <summary>
		/// ENT_MAIN_ID : 
		/// </summary>
		public System.Decimal?		  EntMainId = null;
		
		/// <summary>
		/// RLTD_TO_FLG : 
		/// </summary>
		public System.Decimal?		  RltdToFlg = null;
		
		/// <summary>
		/// SC_SCHEDULE_DTL_ID : 
		/// </summary>
		public System.Decimal?		  ScScheduleDtlId = null;
		
		/// <summary>
		/// STUD_STAFF_FLG : 
		/// </summary>
		public System.Decimal?		  StudStaffFlg = null;
		
		/// <summary>
		/// PUB_FLG : 
		/// </summary>
		public System.Decimal		  PubFlg = 0.0m;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdCourse _edCourseIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return this._edCourseIdSource; }
            set { this._edCourseIdSource = value; }
      	}
		private EntityMain _entMainIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return this._entMainIdSource; }
            set { this._entMainIdSource = value; }
      	}
		private ScScheduleDtl _scScheduleDtlIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScScheduleDtl"/>.
		/// </summary>
		/// <value>The source ScScheduleDtl for ScScheduleDtlId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScScheduleDtl ScScheduleDtlIdSource
      	{
            get { return this._scScheduleDtlIdSource; }
            set { this._scScheduleDtlIdSource = value; }
      	}
		private SeUser _seUserIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeUser SeUserIdSource
      	{
            get { return this._seUserIdSource; }
            set { this._seUserIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region SvPollDtlCollection
		
		private TList<SvPollDtl> _svPollDtlSvPollHdrId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _svPollDtlSvPollHdrId
		/// </summary>
		
		public TList<SvPollDtl> SvPollDtlCollection
		{
			get
			{
				if (_svPollDtlSvPollHdrId == null)
				{
				_svPollDtlSvPollHdrId = new TList<SvPollDtl>();
				}
	
				return _svPollDtlSvPollHdrId;
			}
			set { _svPollDtlSvPollHdrId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SvPollHdrEntityData _tmp = new SvPollHdrEntityData();
						
			_tmp.SvPollHdrId = this.SvPollHdrId;
			_tmp.OriginalSvPollHdrId = this.OriginalSvPollHdrId;
			
			_tmp.SeUserId = this.SeUserId;
			_tmp.PollText = this.PollText;
			_tmp.PollDate = this.PollDate;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.DueDate = this.DueDate;
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.EntMainId = this.EntMainId;
			_tmp.RltdToFlg = this.RltdToFlg;
			_tmp.ScScheduleDtlId = this.ScScheduleDtlId;
			_tmp.StudStaffFlg = this.StudStaffFlg;
			_tmp.PubFlg = this.PubFlg;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdCourseIdSource != null)
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource) as EdCourse;
			if (this.EntMainIdSource != null)
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource) as EntityMain;
			if (this.ScScheduleDtlIdSource != null)
				_tmp.ScScheduleDtlIdSource = MakeCopyOf(this.ScScheduleDtlIdSource) as ScScheduleDtl;
			if (this.SeUserIdSource != null)
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource) as SeUser;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._svPollDtlSvPollHdrId != null)
				_tmp.SvPollDtlCollection = (TList<SvPollDtl>) MakeCopyOf(this.SvPollDtlCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SvPollHdrEntityData _tmp = new SvPollHdrEntityData();
						
			_tmp.SvPollHdrId = this.SvPollHdrId;
			_tmp.OriginalSvPollHdrId = this.OriginalSvPollHdrId;
			
			_tmp.SeUserId = this.SeUserId;
			_tmp.PollText = this.PollText;
			_tmp.PollDate = this.PollDate;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.DueDate = this.DueDate;
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.EntMainId = this.EntMainId;
			_tmp.RltdToFlg = this.RltdToFlg;
			_tmp.ScScheduleDtlId = this.ScScheduleDtlId;
			_tmp.StudStaffFlg = this.StudStaffFlg;
			_tmp.PubFlg = this.PubFlg;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				_tmp.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				_tmp.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.ScScheduleDtlIdSource != null && existingCopies.Contains(this.ScScheduleDtlIdSource))
				_tmp.ScScheduleDtlIdSource = existingCopies[this.ScScheduleDtlIdSource] as ScScheduleDtl;
			else
				_tmp.ScScheduleDtlIdSource = MakeCopyOf(this.ScScheduleDtlIdSource, existingCopies) as ScScheduleDtl;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				_tmp.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.SvPollDtlCollection = (TList<SvPollDtl>) MakeCopyOf(this.SvPollDtlCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvPollHdrColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SvPollHdrColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvPollHdrColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SvPollHdrColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvPollHdrColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SvPollHdrColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SvPollHdrEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SvPollHdrEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvPollHdrColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SvPollHdrColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SvPollHdrEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SvPollHdrEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SvPollHdrEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SvPollHdr"/> object.
	/// </remarks>
	public class SvPollHdrEventArgs : System.EventArgs
	{
		private SvPollHdrColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SvPollHdrEventArgs class.
		///</summary>
		public SvPollHdrEventArgs(SvPollHdrColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SvPollHdrEventArgs class.
		///</summary>
		public SvPollHdrEventArgs(SvPollHdrColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SvPollHdrColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SvPollHdrColumn" />
		public SvPollHdrColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SvPollHdr related events.
	///</summary>
	public delegate void SvPollHdrEventHandler(object sender, SvPollHdrEventArgs e);
	
	#region SvPollHdrComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SvPollHdrComparer : System.Collections.Generic.IComparer<SvPollHdr>
	{
		SvPollHdrColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SvPollHdrComparer"/> class.
        /// </summary>
		public SvPollHdrComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SvPollHdrComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SvPollHdrComparer(SvPollHdrColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SvPollHdr"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SvPollHdr"/> to compare.</param>
        /// <param name="b">The second <c>SvPollHdr</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SvPollHdr a, SvPollHdr b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SvPollHdr entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SvPollHdr a, SvPollHdr b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SvPollHdrColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SvPollHdrKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SvPollHdr"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SvPollHdrKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SvPollHdrKey class.
		/// </summary>
		public SvPollHdrKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SvPollHdrKey class.
		/// </summary>
		public SvPollHdrKey(SvPollHdrBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SvPollHdrId = entity.SvPollHdrId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SvPollHdrKey class.
		/// </summary>
		public SvPollHdrKey(System.Decimal _svPollHdrId)
		{
			#region Init Properties

			this.SvPollHdrId = _svPollHdrId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SvPollHdrBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SvPollHdrBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SvPollHdrId property
		private System.Decimal _svPollHdrId;
		
		/// <summary>
		/// Gets or sets the SvPollHdrId property.
		/// </summary>
		public System.Decimal SvPollHdrId
		{
			get { return _svPollHdrId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SvPollHdrId = value;
				
				_svPollHdrId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SvPollHdrId = ( values["SvPollHdrId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SvPollHdrId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SvPollHdrId", SvPollHdrId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SvPollHdrId: {0}{1}",
								SvPollHdrId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SvPollHdrColumn Enum
	
	/// <summary>
	/// Enumerate the SvPollHdr columns.
	/// </summary>
	[Serializable]
	public enum SvPollHdrColumn : int
	{
		/// <summary>
		/// SvPollHdrId : 
		/// </summary>
		[EnumTextValue("SV_POLL_HDR_ID")]
		[ColumnEnum("SV_POLL_HDR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SvPollHdrId = 1,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SeUserId = 2,
		/// <summary>
		/// PollText : 
		/// </summary>
		[EnumTextValue("POLL_TEXT")]
		[ColumnEnum("POLL_TEXT", typeof(System.String), System.Data.DbType.String, false, false, false, 255)]
		PollText = 3,
		/// <summary>
		/// PollDate : 
		/// </summary>
		[EnumTextValue("POLL_DATE")]
		[ColumnEnum("POLL_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, false)]
		PollDate = 4,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 5,
		/// <summary>
		/// DueDate : 
		/// </summary>
		[EnumTextValue("DUE_DATE")]
		[ColumnEnum("DUE_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		DueDate = 6,
		/// <summary>
		/// EdCourseId : 
		/// </summary>
		[EnumTextValue("ED_COURSE_ID")]
		[ColumnEnum("ED_COURSE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCourseId = 7,
		/// <summary>
		/// EntMainId : 
		/// </summary>
		[EnumTextValue("ENT_MAIN_ID")]
		[ColumnEnum("ENT_MAIN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntMainId = 8,
		/// <summary>
		/// RltdToFlg : 
		/// </summary>
		[EnumTextValue("RLTD_TO_FLG")]
		[ColumnEnum("RLTD_TO_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RltdToFlg = 9,
		/// <summary>
		/// ScScheduleDtlId : 
		/// </summary>
		[EnumTextValue("SC_SCHEDULE_DTL_ID")]
		[ColumnEnum("SC_SCHEDULE_DTL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScScheduleDtlId = 10,
		/// <summary>
		/// StudStaffFlg : 
		/// </summary>
		[EnumTextValue("STUD_STAFF_FLG")]
		[ColumnEnum("STUD_STAFF_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		StudStaffFlg = 11,
		/// <summary>
		/// PubFlg : 
		/// </summary>
		[EnumTextValue("PUB_FLG")]
		[ColumnEnum("PUB_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		PubFlg = 12
	}//End enum

	#endregion SvPollHdrColumn Enum

} // end namespace
