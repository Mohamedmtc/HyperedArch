
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file PgThesisNote.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'PG_THESIS_NOTE' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class PgThesisNoteBase : EntityBase, IPgThesisNote, IEntityId<PgThesisNoteKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private PgThesisNoteEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private PgThesisNoteEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private PgThesisNoteEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<PgThesisNote> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event PgThesisNoteEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event PgThesisNoteEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="PgThesisNoteBase"/> instance.
		///</summary>
		public PgThesisNoteBase()
		{
			this.entityData = new PgThesisNoteEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="PgThesisNoteBase"/> instance.
		///</summary>
		///<param name="_pgThesisNoteId">متابعة الأبحاث العلمية للمشرفين</param>
		///<param name="_pgThesisStudId">بيانات الرسالة</param>
		///<param name="_typeFlg">1:note , 2:File</param>
		///<param name="_comment">التعليق</param>
		///<param name="_notes">تفاصيل التعليق</param>
		///<param name="_noteDate">تاريخ التعليق- تاريخ الملف</param>
		///<param name="_saStfMemberId">newcss</param>
		///<param name="_edStudId">newcss</param>
		///<param name="_attchdDocPath">newcss  ملف البحث</param>
		///<param name="_readyDiscuss">newcss  جاهز للمناقشة</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public PgThesisNoteBase(System.Decimal _pgThesisNoteId, System.Decimal _pgThesisStudId, 
			System.Int16? _typeFlg, System.String _comment, System.String _notes, System.DateTime? _noteDate, 
			System.Decimal? _saStfMemberId, System.Decimal? _edStudId, System.String _attchdDocPath, 
			System.Boolean? _readyDiscuss, System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			this.entityData = new PgThesisNoteEntityData();
			this.backupData = null;

			this.PgThesisNoteId = _pgThesisNoteId;
			this.PgThesisStudId = _pgThesisStudId;
			this.TypeFlg = _typeFlg;
			this.Comment = _comment;
			this.Notes = _notes;
			this.NoteDate = _noteDate;
			this.SaStfMemberId = _saStfMemberId;
			this.EdStudId = _edStudId;
			this.AttchdDocPath = _attchdDocPath;
			this.ReadyDiscuss = _readyDiscuss;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="PgThesisNote"/> instance.
		///</summary>
		///<param name="_pgThesisNoteId">متابعة الأبحاث العلمية للمشرفين</param>
		///<param name="_pgThesisStudId">بيانات الرسالة</param>
		///<param name="_typeFlg">1:note , 2:File</param>
		///<param name="_comment">التعليق</param>
		///<param name="_notes">تفاصيل التعليق</param>
		///<param name="_noteDate">تاريخ التعليق- تاريخ الملف</param>
		///<param name="_saStfMemberId">newcss</param>
		///<param name="_edStudId">newcss</param>
		///<param name="_attchdDocPath">newcss  ملف البحث</param>
		///<param name="_readyDiscuss">newcss  جاهز للمناقشة</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static PgThesisNote CreatePgThesisNote(System.Decimal _pgThesisNoteId, System.Decimal _pgThesisStudId, 
			System.Int16? _typeFlg, System.String _comment, System.String _notes, System.DateTime? _noteDate, 
			System.Decimal? _saStfMemberId, System.Decimal? _edStudId, System.String _attchdDocPath, 
			System.Boolean? _readyDiscuss, System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			PgThesisNote newPgThesisNote = new PgThesisNote();
			newPgThesisNote.PgThesisNoteId = _pgThesisNoteId;
			newPgThesisNote.PgThesisStudId = _pgThesisStudId;
			newPgThesisNote.TypeFlg = _typeFlg;
			newPgThesisNote.Comment = _comment;
			newPgThesisNote.Notes = _notes;
			newPgThesisNote.NoteDate = _noteDate;
			newPgThesisNote.SaStfMemberId = _saStfMemberId;
			newPgThesisNote.EdStudId = _edStudId;
			newPgThesisNote.AttchdDocPath = _attchdDocPath;
			newPgThesisNote.ReadyDiscuss = _readyDiscuss;
			newPgThesisNote.SeUserId = _seUserId;
			newPgThesisNote.LastDate = _lastDate;
			return newPgThesisNote;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the PgThesisNoteId property. 
		///		متابعة الأبحاث العلمية للمشرفين
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"متابعة الأبحاث العلمية للمشرفين"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal PgThesisNoteId
		{
			get
			{
				return this.entityData.PgThesisNoteId; 
			}
			
			set
			{
				if (this.entityData.PgThesisNoteId == value)
					return;
					
				OnColumnChanging(PgThesisNoteColumn.PgThesisNoteId, this.entityData.PgThesisNoteId);
				this.entityData.PgThesisNoteId = value;
				this.EntityId.PgThesisNoteId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisNoteColumn.PgThesisNoteId, this.entityData.PgThesisNoteId);
				OnPropertyChanged("PgThesisNoteId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the PG_THESIS_NOTE_ID property.
		///		متابعة الأبحاث العلمية للمشرفين
		/// </summary>
		/// <remarks>This is the original value of the PG_THESIS_NOTE_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalPgThesisNoteId
		{
			get { return this.entityData.OriginalPgThesisNoteId; }
			set { this.entityData.OriginalPgThesisNoteId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the PgThesisStudId property. 
		///		بيانات الرسالة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"بيانات الرسالة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal PgThesisStudId
		{
			get
			{
				return this.entityData.PgThesisStudId; 
			}
			
			set
			{
				if (this.entityData.PgThesisStudId == value)
					return;
					
				OnColumnChanging(PgThesisNoteColumn.PgThesisStudId, this.entityData.PgThesisStudId);
				this.entityData.PgThesisStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisNoteColumn.PgThesisStudId, this.entityData.PgThesisStudId);
				OnPropertyChanged("PgThesisStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TypeFlg property. 
		///		1:note , 2:File
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsTypeFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"1:note , 2:File"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? TypeFlg
		{
			get
			{
				return this.entityData.TypeFlg; 
			}
			
			set
			{
				if (this.entityData.TypeFlg == value)
					return;
					
				OnColumnChanging(PgThesisNoteColumn.TypeFlg, this.entityData.TypeFlg);
				this.entityData.TypeFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisNoteColumn.TypeFlg, this.entityData.TypeFlg);
				OnPropertyChanged("TypeFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Comment property. 
		///		التعليق
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"التعليق"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String Comment
		{
			get
			{
				return this.entityData.Comment; 
			}
			
			set
			{
				if (this.entityData.Comment == value)
					return;
					
				OnColumnChanging(PgThesisNoteColumn.Comment, this.entityData.Comment);
				this.entityData.Comment = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisNoteColumn.Comment, this.entityData.Comment);
				OnPropertyChanged("Comment");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		تفاصيل التعليق
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"تفاصيل التعليق"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(PgThesisNoteColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisNoteColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NoteDate property. 
		///		تاريخ التعليق- تاريخ الملف
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsNoteDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ التعليق- تاريخ الملف"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? NoteDate
		{
			get
			{
				return this.entityData.NoteDate; 
			}
			
			set
			{
				if (this.entityData.NoteDate == value)
					return;
					
				OnColumnChanging(PgThesisNoteColumn.NoteDate, this.entityData.NoteDate);
				this.entityData.NoteDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisNoteColumn.NoteDate, this.entityData.NoteDate);
				OnPropertyChanged("NoteDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaStfMemberId property. 
		///		newcss
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSaStfMemberIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"newcss"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SaStfMemberId
		{
			get
			{
				return this.entityData.SaStfMemberId; 
			}
			
			set
			{
				if (this.entityData.SaStfMemberId == value)
					return;
					
				OnColumnChanging(PgThesisNoteColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				this.entityData.SaStfMemberId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisNoteColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				OnPropertyChanged("SaStfMemberId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		newcss
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdStudIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"newcss"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(PgThesisNoteColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisNoteColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AttchdDocPath property. 
		///		newcss  ملف البحث
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"newcss  ملف البحث"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String AttchdDocPath
		{
			get
			{
				return this.entityData.AttchdDocPath; 
			}
			
			set
			{
				if (this.entityData.AttchdDocPath == value)
					return;
					
				OnColumnChanging(PgThesisNoteColumn.AttchdDocPath, this.entityData.AttchdDocPath);
				this.entityData.AttchdDocPath = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisNoteColumn.AttchdDocPath, this.entityData.AttchdDocPath);
				OnPropertyChanged("AttchdDocPath");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReadyDiscuss property. 
		///		newcss  جاهز للمناقشة
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsReadyDiscussNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"newcss  جاهز للمناقشة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ReadyDiscuss
		{
			get
			{
				return this.entityData.ReadyDiscuss; 
			}
			
			set
			{
				if (this.entityData.ReadyDiscuss == value)
					return;
					
				OnColumnChanging(PgThesisNoteColumn.ReadyDiscuss, this.entityData.ReadyDiscuss);
				this.entityData.ReadyDiscuss = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisNoteColumn.ReadyDiscuss, this.entityData.ReadyDiscuss);
				OnPropertyChanged("ReadyDiscuss");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(PgThesisNoteColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisNoteColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(PgThesisNoteColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisNoteColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="PgThesisStud"/>.
		/// </summary>
		/// <value>The source PgThesisStud for PgThesisStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual PgThesisStud PgThesisStudIdSource
      	{
            get { return entityData.PgThesisStudIdSource; }
            set { entityData.PgThesisStudIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return entityData.SaStfMemberIdSource; }
            set { entityData.SaStfMemberIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Comment", "Comment", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 250));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "PG_THESIS_NOTE"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"PG_THESIS_NOTE_ID", "PG_THESIS_STUD_ID", "TYPE_FLG", "COMMENT", "NOTES", "NOTE_DATE", "SA_STF_MEMBER_ID", "ED_STUD_ID", "ATTCHD_DOC_PATH", "READY_DISCUSS", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as PgThesisNoteEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (PgThesisNote) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<PgThesisNote>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as PgThesisNote);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed PgThesisNote Entity 
		///</summary>
		protected virtual PgThesisNote Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			PgThesisNote copy = new PgThesisNote();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.PgThesisNoteId = this.PgThesisNoteId;
					copy.OriginalPgThesisNoteId = this.OriginalPgThesisNoteId;
				copy.PgThesisStudId = this.PgThesisStudId;
				copy.TypeFlg = this.TypeFlg;
				copy.Comment = this.Comment;
				copy.Notes = this.Notes;
				copy.NoteDate = this.NoteDate;
				copy.SaStfMemberId = this.SaStfMemberId;
				copy.EdStudId = this.EdStudId;
				copy.AttchdDocPath = this.AttchdDocPath;
				copy.ReadyDiscuss = this.ReadyDiscuss;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.PgThesisStudIdSource != null && existingCopies.Contains(this.PgThesisStudIdSource))
				copy.PgThesisStudIdSource = existingCopies[this.PgThesisStudIdSource] as PgThesisStud;
			else
				copy.PgThesisStudIdSource = MakeCopyOf(this.PgThesisStudIdSource, existingCopies) as PgThesisStud;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				copy.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				copy.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed PgThesisNote Entity 
		///</summary>
		public virtual PgThesisNote Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed PgThesisNote Entity which is a deep copy of the current entity.
		///</summary>
		public virtual PgThesisNote DeepCopy()
		{
			return EntityHelper.Clone<PgThesisNote>(this as PgThesisNote);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as PgThesisNoteEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new PgThesisNoteEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as PgThesisNoteEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(PgThesisNoteColumn column)
		{
			switch(column)
			{
					case PgThesisNoteColumn.PgThesisNoteId:
					return entityData.PgThesisNoteId != _originalData.PgThesisNoteId;
					case PgThesisNoteColumn.PgThesisStudId:
					return entityData.PgThesisStudId != _originalData.PgThesisStudId;
					case PgThesisNoteColumn.TypeFlg:
					return entityData.TypeFlg != _originalData.TypeFlg;
					case PgThesisNoteColumn.Comment:
					return entityData.Comment != _originalData.Comment;
					case PgThesisNoteColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case PgThesisNoteColumn.NoteDate:
					return entityData.NoteDate != _originalData.NoteDate;
					case PgThesisNoteColumn.SaStfMemberId:
					return entityData.SaStfMemberId != _originalData.SaStfMemberId;
					case PgThesisNoteColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case PgThesisNoteColumn.AttchdDocPath:
					return entityData.AttchdDocPath != _originalData.AttchdDocPath;
					case PgThesisNoteColumn.ReadyDiscuss:
					return entityData.ReadyDiscuss != _originalData.ReadyDiscuss;
					case PgThesisNoteColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case PgThesisNoteColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< PgThesisNoteColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.PgThesisNoteId != _originalData.PgThesisNoteId;
			result = result || entityData.PgThesisStudId != _originalData.PgThesisStudId;
			result = result || entityData.TypeFlg != _originalData.TypeFlg;
			result = result || entityData.Comment != _originalData.Comment;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.NoteDate != _originalData.NoteDate;
			result = result || entityData.SaStfMemberId != _originalData.SaStfMemberId;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.AttchdDocPath != _originalData.AttchdDocPath;
			result = result || entityData.ReadyDiscuss != _originalData.ReadyDiscuss;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a PgThesisNote Entity with the original data.
		///</summary>
		public PgThesisNote GetOriginalEntity()
		{
			if (_originalData != null)
				return CreatePgThesisNote(
				_originalData.PgThesisNoteId,
				_originalData.PgThesisStudId,
				_originalData.TypeFlg,
				_originalData.Comment,
				_originalData.Notes,
				_originalData.NoteDate,
				_originalData.SaStfMemberId,
				_originalData.EdStudId,
				_originalData.AttchdDocPath,
				_originalData.ReadyDiscuss,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (PgThesisNote)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="PgThesisNoteBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is PgThesisNoteBase)
				return ValueEquals(this, (PgThesisNoteBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="PgThesisNoteBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.PgThesisNoteId.GetHashCode() ^ 
					this.PgThesisStudId.GetHashCode() ^ 
					((this.TypeFlg == null) ? string.Empty : this.TypeFlg.ToString()).GetHashCode() ^ 
					((this.Comment == null) ? string.Empty : this.Comment.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.NoteDate == null) ? string.Empty : this.NoteDate.ToString()).GetHashCode() ^ 
					((this.SaStfMemberId == null) ? string.Empty : this.SaStfMemberId.ToString()).GetHashCode() ^ 
					((this.EdStudId == null) ? string.Empty : this.EdStudId.ToString()).GetHashCode() ^ 
					((this.AttchdDocPath == null) ? string.Empty : this.AttchdDocPath.ToString()).GetHashCode() ^ 
					((this.ReadyDiscuss == null) ? string.Empty : this.ReadyDiscuss.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="PgThesisNoteBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(PgThesisNoteBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="PgThesisNoteBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="PgThesisNoteBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="PgThesisNoteBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(PgThesisNoteBase Object1, PgThesisNoteBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.PgThesisNoteId != Object2.PgThesisNoteId)
				equal = false;
			if (Object1.PgThesisStudId != Object2.PgThesisStudId)
				equal = false;
			if ( Object1.TypeFlg != null && Object2.TypeFlg != null )
			{
				if (Object1.TypeFlg != Object2.TypeFlg)
					equal = false;
			}
			else if (Object1.TypeFlg == null ^ Object2.TypeFlg == null )
			{
				equal = false;
			}
			if ( Object1.Comment != null && Object2.Comment != null )
			{
				if (Object1.Comment != Object2.Comment)
					equal = false;
			}
			else if (Object1.Comment == null ^ Object2.Comment == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.NoteDate != null && Object2.NoteDate != null )
			{
				if (Object1.NoteDate != Object2.NoteDate)
					equal = false;
			}
			else if (Object1.NoteDate == null ^ Object2.NoteDate == null )
			{
				equal = false;
			}
			if ( Object1.SaStfMemberId != null && Object2.SaStfMemberId != null )
			{
				if (Object1.SaStfMemberId != Object2.SaStfMemberId)
					equal = false;
			}
			else if (Object1.SaStfMemberId == null ^ Object2.SaStfMemberId == null )
			{
				equal = false;
			}
			if ( Object1.EdStudId != null && Object2.EdStudId != null )
			{
				if (Object1.EdStudId != Object2.EdStudId)
					equal = false;
			}
			else if (Object1.EdStudId == null ^ Object2.EdStudId == null )
			{
				equal = false;
			}
			if ( Object1.AttchdDocPath != null && Object2.AttchdDocPath != null )
			{
				if (Object1.AttchdDocPath != Object2.AttchdDocPath)
					equal = false;
			}
			else if (Object1.AttchdDocPath == null ^ Object2.AttchdDocPath == null )
			{
				equal = false;
			}
			if ( Object1.ReadyDiscuss != null && Object2.ReadyDiscuss != null )
			{
				if (Object1.ReadyDiscuss != Object2.ReadyDiscuss)
					equal = false;
			}
			else if (Object1.ReadyDiscuss == null ^ Object2.ReadyDiscuss == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((PgThesisNoteBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static PgThesisNoteComparer GetComparer()
        {
            return new PgThesisNoteComparer();
        }
        */

        // Comparer delegates back to PgThesisNote
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(PgThesisNote rhs, PgThesisNoteColumn which)
        {
            switch (which)
            {
            	
            	
            	case PgThesisNoteColumn.PgThesisNoteId:
            		return this.PgThesisNoteId.CompareTo(rhs.PgThesisNoteId);
            		
            		                 
            	
            	
            	case PgThesisNoteColumn.PgThesisStudId:
            		return this.PgThesisStudId.CompareTo(rhs.PgThesisStudId);
            		
            		                 
            	
            	
            	case PgThesisNoteColumn.TypeFlg:
            		return this.TypeFlg.Value.CompareTo(rhs.TypeFlg.Value);
            		
            		                 
            	
            	
            	case PgThesisNoteColumn.Comment:
            		return this.Comment.CompareTo(rhs.Comment);
            		
            		                 
            	
            	
            	case PgThesisNoteColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case PgThesisNoteColumn.NoteDate:
            		return this.NoteDate.Value.CompareTo(rhs.NoteDate.Value);
            		
            		                 
            	
            	
            	case PgThesisNoteColumn.SaStfMemberId:
            		return this.SaStfMemberId.Value.CompareTo(rhs.SaStfMemberId.Value);
            		
            		                 
            	
            	
            	case PgThesisNoteColumn.EdStudId:
            		return this.EdStudId.Value.CompareTo(rhs.EdStudId.Value);
            		
            		                 
            	
            	
            	case PgThesisNoteColumn.AttchdDocPath:
            		return this.AttchdDocPath.CompareTo(rhs.AttchdDocPath);
            		
            		                 
            	
            	
            	case PgThesisNoteColumn.ReadyDiscuss:
            		return this.ReadyDiscuss.Value.CompareTo(rhs.ReadyDiscuss.Value);
            		
            		                 
            	
            	
            	case PgThesisNoteColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case PgThesisNoteColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<PgThesisNoteKey> Members
		
		// member variable for the EntityId property
		private PgThesisNoteKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual PgThesisNoteKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new PgThesisNoteKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("PgThesisNote")
					.Append("|").Append( this.PgThesisNoteId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- PgThesisNoteId: {0}{12}- PgThesisStudId: {1}{12}- TypeFlg: {2}{12}- Comment: {3}{12}- Notes: {4}{12}- NoteDate: {5}{12}- SaStfMemberId: {6}{12}- EdStudId: {7}{12}- AttchdDocPath: {8}{12}- ReadyDiscuss: {9}{12}- SeUserId: {10}{12}- LastDate: {11}{12}{14}", 
				this.PgThesisNoteId,
				this.PgThesisStudId,
				(this.TypeFlg == null) ? string.Empty : this.TypeFlg.ToString(),
				(this.Comment == null) ? string.Empty : this.Comment.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.NoteDate == null) ? string.Empty : this.NoteDate.ToString(),
				(this.SaStfMemberId == null) ? string.Empty : this.SaStfMemberId.ToString(),
				(this.EdStudId == null) ? string.Empty : this.EdStudId.ToString(),
				(this.AttchdDocPath == null) ? string.Empty : this.AttchdDocPath.ToString(),
				(this.ReadyDiscuss == null) ? string.Empty : this.ReadyDiscuss.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'PG_THESIS_NOTE' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class PgThesisNoteEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// PG_THESIS_NOTE_ID : متابعة الأبحاث العلمية للمشرفين
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "PG_THESIS_NOTE"</remarks>
		public System.Decimal PgThesisNoteId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalPgThesisNoteId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// PG_THESIS_STUD_ID : بيانات الرسالة
		/// </summary>
		public System.Decimal		  PgThesisStudId = 0.0m;
		
		/// <summary>
		/// TYPE_FLG : 1:note , 2:File
		/// </summary>
		public System.Int16?		  TypeFlg = null;
		
		/// <summary>
		/// COMMENT : التعليق
		/// </summary>
		public System.String		  Comment = null;
		
		/// <summary>
		/// NOTES : تفاصيل التعليق
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// NOTE_DATE : تاريخ التعليق- تاريخ الملف
		/// </summary>
		public System.DateTime?		  NoteDate = null;
		
		/// <summary>
		/// SA_STF_MEMBER_ID : newcss
		/// </summary>
		public System.Decimal?		  SaStfMemberId = null;
		
		/// <summary>
		/// ED_STUD_ID : newcss
		/// </summary>
		public System.Decimal?		  EdStudId = null;
		
		/// <summary>
		/// ATTCHD_DOC_PATH : newcss  ملف البحث
		/// </summary>
		public System.String		  AttchdDocPath = null;
		
		/// <summary>
		/// READY_DISCUSS : newcss  جاهز للمناقشة
		/// </summary>
		public System.Boolean?		  ReadyDiscuss = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		private PgThesisStud _pgThesisStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="PgThesisStud"/>.
		/// </summary>
		/// <value>The source PgThesisStud for PgThesisStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual PgThesisStud PgThesisStudIdSource
      	{
            get { return this._pgThesisStudIdSource; }
            set { this._pgThesisStudIdSource = value; }
      	}
		private SaStfMember _saStfMemberIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return this._saStfMemberIdSource; }
            set { this._saStfMemberIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			PgThesisNoteEntityData _tmp = new PgThesisNoteEntityData();
						
			_tmp.PgThesisNoteId = this.PgThesisNoteId;
			_tmp.OriginalPgThesisNoteId = this.OriginalPgThesisNoteId;
			
			_tmp.PgThesisStudId = this.PgThesisStudId;
			_tmp.TypeFlg = this.TypeFlg;
			_tmp.Comment = this.Comment;
			_tmp.Notes = this.Notes;
			_tmp.NoteDate = this.NoteDate;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.AttchdDocPath = this.AttchdDocPath;
			_tmp.ReadyDiscuss = this.ReadyDiscuss;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			if (this.PgThesisStudIdSource != null)
				_tmp.PgThesisStudIdSource = MakeCopyOf(this.PgThesisStudIdSource) as PgThesisStud;
			if (this.SaStfMemberIdSource != null)
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource) as SaStfMember;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			PgThesisNoteEntityData _tmp = new PgThesisNoteEntityData();
						
			_tmp.PgThesisNoteId = this.PgThesisNoteId;
			_tmp.OriginalPgThesisNoteId = this.OriginalPgThesisNoteId;
			
			_tmp.PgThesisStudId = this.PgThesisStudId;
			_tmp.TypeFlg = this.TypeFlg;
			_tmp.Comment = this.Comment;
			_tmp.Notes = this.Notes;
			_tmp.NoteDate = this.NoteDate;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.AttchdDocPath = this.AttchdDocPath;
			_tmp.ReadyDiscuss = this.ReadyDiscuss;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.PgThesisStudIdSource != null && existingCopies.Contains(this.PgThesisStudIdSource))
				_tmp.PgThesisStudIdSource = existingCopies[this.PgThesisStudIdSource] as PgThesisStud;
			else
				_tmp.PgThesisStudIdSource = MakeCopyOf(this.PgThesisStudIdSource, existingCopies) as PgThesisStud;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				_tmp.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgThesisNoteColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(PgThesisNoteColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgThesisNoteColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(PgThesisNoteColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgThesisNoteColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(PgThesisNoteColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				PgThesisNoteEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new PgThesisNoteEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgThesisNoteColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(PgThesisNoteColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				PgThesisNoteEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new PgThesisNoteEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region PgThesisNoteEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="PgThesisNote"/> object.
	/// </remarks>
	public class PgThesisNoteEventArgs : System.EventArgs
	{
		private PgThesisNoteColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the PgThesisNoteEventArgs class.
		///</summary>
		public PgThesisNoteEventArgs(PgThesisNoteColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the PgThesisNoteEventArgs class.
		///</summary>
		public PgThesisNoteEventArgs(PgThesisNoteColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The PgThesisNoteColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="PgThesisNoteColumn" />
		public PgThesisNoteColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all PgThesisNote related events.
	///</summary>
	public delegate void PgThesisNoteEventHandler(object sender, PgThesisNoteEventArgs e);
	
	#region PgThesisNoteComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class PgThesisNoteComparer : System.Collections.Generic.IComparer<PgThesisNote>
	{
		PgThesisNoteColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:PgThesisNoteComparer"/> class.
        /// </summary>
		public PgThesisNoteComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:PgThesisNoteComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public PgThesisNoteComparer(PgThesisNoteColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="PgThesisNote"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="PgThesisNote"/> to compare.</param>
        /// <param name="b">The second <c>PgThesisNote</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(PgThesisNote a, PgThesisNote b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(PgThesisNote entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(PgThesisNote a, PgThesisNote b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public PgThesisNoteColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region PgThesisNoteKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="PgThesisNote"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class PgThesisNoteKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the PgThesisNoteKey class.
		/// </summary>
		public PgThesisNoteKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the PgThesisNoteKey class.
		/// </summary>
		public PgThesisNoteKey(PgThesisNoteBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.PgThesisNoteId = entity.PgThesisNoteId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the PgThesisNoteKey class.
		/// </summary>
		public PgThesisNoteKey(System.Decimal _pgThesisNoteId)
		{
			#region Init Properties

			this.PgThesisNoteId = _pgThesisNoteId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private PgThesisNoteBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public PgThesisNoteBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the PgThesisNoteId property
		private System.Decimal _pgThesisNoteId;
		
		/// <summary>
		/// Gets or sets the PgThesisNoteId property.
		/// </summary>
		public System.Decimal PgThesisNoteId
		{
			get { return _pgThesisNoteId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.PgThesisNoteId = value;
				
				_pgThesisNoteId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				PgThesisNoteId = ( values["PgThesisNoteId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["PgThesisNoteId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("PgThesisNoteId", PgThesisNoteId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("PgThesisNoteId: {0}{1}",
								PgThesisNoteId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region PgThesisNoteColumn Enum
	
	/// <summary>
	/// Enumerate the PgThesisNote columns.
	/// </summary>
	[Serializable]
	public enum PgThesisNoteColumn : int
	{
		/// <summary>
		/// PgThesisNoteId : متابعة الأبحاث العلمية للمشرفين
		/// </summary>
		[EnumTextValue("PG_THESIS_NOTE_ID")]
		[ColumnEnum("PG_THESIS_NOTE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		PgThesisNoteId = 1,
		/// <summary>
		/// PgThesisStudId : بيانات الرسالة
		/// </summary>
		[EnumTextValue("PG_THESIS_STUD_ID")]
		[ColumnEnum("PG_THESIS_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		PgThesisStudId = 2,
		/// <summary>
		/// TypeFlg : 1:note , 2:File
		/// </summary>
		[EnumTextValue("TYPE_FLG")]
		[ColumnEnum("TYPE_FLG", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		TypeFlg = 3,
		/// <summary>
		/// Comment : التعليق
		/// </summary>
		[EnumTextValue("COMMENT")]
		[ColumnEnum("COMMENT", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		Comment = 4,
		/// <summary>
		/// Notes : تفاصيل التعليق
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		Notes = 5,
		/// <summary>
		/// NoteDate : تاريخ التعليق- تاريخ الملف
		/// </summary>
		[EnumTextValue("NOTE_DATE")]
		[ColumnEnum("NOTE_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		NoteDate = 6,
		/// <summary>
		/// SaStfMemberId : newcss
		/// </summary>
		[EnumTextValue("SA_STF_MEMBER_ID")]
		[ColumnEnum("SA_STF_MEMBER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SaStfMemberId = 7,
		/// <summary>
		/// EdStudId : newcss
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdStudId = 8,
		/// <summary>
		/// AttchdDocPath : newcss  ملف البحث
		/// </summary>
		[EnumTextValue("ATTCHD_DOC_PATH")]
		[ColumnEnum("ATTCHD_DOC_PATH", typeof(System.String), System.Data.DbType.String, false, false, true)]
		AttchdDocPath = 9,
		/// <summary>
		/// ReadyDiscuss : newcss  جاهز للمناقشة
		/// </summary>
		[EnumTextValue("READY_DISCUSS")]
		[ColumnEnum("READY_DISCUSS", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ReadyDiscuss = 10,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 11,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 12
	}//End enum

	#endregion PgThesisNoteColumn Enum

} // end namespace
