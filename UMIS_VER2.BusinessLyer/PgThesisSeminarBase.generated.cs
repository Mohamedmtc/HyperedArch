
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file PgThesisSeminar.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'PG_THESIS_SEMINAR' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class PgThesisSeminarBase : EntityBase, IPgThesisSeminar, IEntityId<PgThesisSeminarKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private PgThesisSeminarEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private PgThesisSeminarEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private PgThesisSeminarEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<PgThesisSeminar> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event PgThesisSeminarEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event PgThesisSeminarEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="PgThesisSeminarBase"/> instance.
		///</summary>
		public PgThesisSeminarBase()
		{
			this.entityData = new PgThesisSeminarEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="PgThesisSeminarBase"/> instance.
		///</summary>
		///<param name="_pgThesisSeminarId">تسجيل الندوة التعريفية (السيمينار)</param>
		///<param name="_pgThesisStudId">تسجيل بيانات الرسالة-بيانات البحث العلمي</param>
		///<param name="_seminarDate">تاريخ عقد الندوة</param>
		///<param name="_timeFrom">توقيت الندوة</param>
		///<param name="_scBuildingId">المبانى</param>
		///<param name="_scHallId">القاعات</param>
		///<param name="_plagiarismPrcnt">نسبة الاقتباس</param>
		///<param name="_approveFlg">قرار تقييم الندوة
		/// 		/// اما بإقرار المناقشة  نعم او لا
		/// 		/// 0 عدم إقرار المناقشة
		/// 		/// 1 إقرار المناقشة
		/// 		/// 
		/// 		/// NULL  no result yet</param>
		///<param name="_rejectReason"> سبب الرفض
		/// 		/// show only if APPROVE_FLG=0</param>
		///<param name="_notes">ملاحظات</param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		public PgThesisSeminarBase(System.Decimal _pgThesisSeminarId, System.Decimal _pgThesisStudId, 
			System.DateTime? _seminarDate, System.DateTime? _timeFrom, System.Decimal? _scBuildingId, 
			System.Decimal? _scHallId, System.Decimal? _plagiarismPrcnt, System.Boolean? _approveFlg, 
			System.String _rejectReason, System.String _notes, System.DateTime? _lastDate, 
			System.Decimal? _seUserId)
		{
			this.entityData = new PgThesisSeminarEntityData();
			this.backupData = null;

			this.PgThesisSeminarId = _pgThesisSeminarId;
			this.PgThesisStudId = _pgThesisStudId;
			this.SeminarDate = _seminarDate;
			this.TimeFrom = _timeFrom;
			this.ScBuildingId = _scBuildingId;
			this.ScHallId = _scHallId;
			this.PlagiarismPrcnt = _plagiarismPrcnt;
			this.ApproveFlg = _approveFlg;
			this.RejectReason = _rejectReason;
			this.Notes = _notes;
			this.LastDate = _lastDate;
			this.SeUserId = _seUserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="PgThesisSeminar"/> instance.
		///</summary>
		///<param name="_pgThesisSeminarId">تسجيل الندوة التعريفية (السيمينار)</param>
		///<param name="_pgThesisStudId">تسجيل بيانات الرسالة-بيانات البحث العلمي</param>
		///<param name="_seminarDate">تاريخ عقد الندوة</param>
		///<param name="_timeFrom">توقيت الندوة</param>
		///<param name="_scBuildingId">المبانى</param>
		///<param name="_scHallId">القاعات</param>
		///<param name="_plagiarismPrcnt">نسبة الاقتباس</param>
		///<param name="_approveFlg">قرار تقييم الندوة
		/// 		/// اما بإقرار المناقشة  نعم او لا
		/// 		/// 0 عدم إقرار المناقشة
		/// 		/// 1 إقرار المناقشة
		/// 		/// 
		/// 		/// NULL  no result yet</param>
		///<param name="_rejectReason"> سبب الرفض
		/// 		/// show only if APPROVE_FLG=0</param>
		///<param name="_notes">ملاحظات</param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		public static PgThesisSeminar CreatePgThesisSeminar(System.Decimal _pgThesisSeminarId, System.Decimal _pgThesisStudId, 
			System.DateTime? _seminarDate, System.DateTime? _timeFrom, System.Decimal? _scBuildingId, 
			System.Decimal? _scHallId, System.Decimal? _plagiarismPrcnt, System.Boolean? _approveFlg, 
			System.String _rejectReason, System.String _notes, System.DateTime? _lastDate, 
			System.Decimal? _seUserId)
		{
			PgThesisSeminar newPgThesisSeminar = new PgThesisSeminar();
			newPgThesisSeminar.PgThesisSeminarId = _pgThesisSeminarId;
			newPgThesisSeminar.PgThesisStudId = _pgThesisStudId;
			newPgThesisSeminar.SeminarDate = _seminarDate;
			newPgThesisSeminar.TimeFrom = _timeFrom;
			newPgThesisSeminar.ScBuildingId = _scBuildingId;
			newPgThesisSeminar.ScHallId = _scHallId;
			newPgThesisSeminar.PlagiarismPrcnt = _plagiarismPrcnt;
			newPgThesisSeminar.ApproveFlg = _approveFlg;
			newPgThesisSeminar.RejectReason = _rejectReason;
			newPgThesisSeminar.Notes = _notes;
			newPgThesisSeminar.LastDate = _lastDate;
			newPgThesisSeminar.SeUserId = _seUserId;
			return newPgThesisSeminar;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the PgThesisSeminarId property. 
		///		تسجيل الندوة التعريفية (السيمينار)
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"تسجيل الندوة التعريفية (السيمينار)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal PgThesisSeminarId
		{
			get
			{
				return this.entityData.PgThesisSeminarId; 
			}
			
			set
			{
				if (this.entityData.PgThesisSeminarId == value)
					return;
					
				OnColumnChanging(PgThesisSeminarColumn.PgThesisSeminarId, this.entityData.PgThesisSeminarId);
				this.entityData.PgThesisSeminarId = value;
				this.EntityId.PgThesisSeminarId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisSeminarColumn.PgThesisSeminarId, this.entityData.PgThesisSeminarId);
				OnPropertyChanged("PgThesisSeminarId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the PG_THESIS_SEMINAR_ID property.
		///		تسجيل الندوة التعريفية (السيمينار)
		/// </summary>
		/// <remarks>This is the original value of the PG_THESIS_SEMINAR_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalPgThesisSeminarId
		{
			get { return this.entityData.OriginalPgThesisSeminarId; }
			set { this.entityData.OriginalPgThesisSeminarId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the PgThesisStudId property. 
		///		تسجيل بيانات الرسالة-بيانات البحث العلمي
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"تسجيل بيانات الرسالة-بيانات البحث العلمي"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal PgThesisStudId
		{
			get
			{
				return this.entityData.PgThesisStudId; 
			}
			
			set
			{
				if (this.entityData.PgThesisStudId == value)
					return;
					
				OnColumnChanging(PgThesisSeminarColumn.PgThesisStudId, this.entityData.PgThesisStudId);
				this.entityData.PgThesisStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisSeminarColumn.PgThesisStudId, this.entityData.PgThesisStudId);
				OnPropertyChanged("PgThesisStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeminarDate property. 
		///		تاريخ عقد الندوة
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsSeminarDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ عقد الندوة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? SeminarDate
		{
			get
			{
				return this.entityData.SeminarDate; 
			}
			
			set
			{
				if (this.entityData.SeminarDate == value)
					return;
					
				OnColumnChanging(PgThesisSeminarColumn.SeminarDate, this.entityData.SeminarDate);
				this.entityData.SeminarDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisSeminarColumn.SeminarDate, this.entityData.SeminarDate);
				OnPropertyChanged("SeminarDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TimeFrom property. 
		///		توقيت الندوة
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsTimeFromNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"توقيت الندوة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? TimeFrom
		{
			get
			{
				return this.entityData.TimeFrom; 
			}
			
			set
			{
				if (this.entityData.TimeFrom == value)
					return;
					
				OnColumnChanging(PgThesisSeminarColumn.TimeFrom, this.entityData.TimeFrom);
				this.entityData.TimeFrom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisSeminarColumn.TimeFrom, this.entityData.TimeFrom);
				OnPropertyChanged("TimeFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScBuildingId property. 
		///		المبانى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScBuildingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"المبانى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScBuildingId
		{
			get
			{
				return this.entityData.ScBuildingId; 
			}
			
			set
			{
				if (this.entityData.ScBuildingId == value)
					return;
					
				OnColumnChanging(PgThesisSeminarColumn.ScBuildingId, this.entityData.ScBuildingId);
				this.entityData.ScBuildingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisSeminarColumn.ScBuildingId, this.entityData.ScBuildingId);
				OnPropertyChanged("ScBuildingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScHallId property. 
		///		القاعات
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScHallIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"القاعات"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScHallId
		{
			get
			{
				return this.entityData.ScHallId; 
			}
			
			set
			{
				if (this.entityData.ScHallId == value)
					return;
					
				OnColumnChanging(PgThesisSeminarColumn.ScHallId, this.entityData.ScHallId);
				this.entityData.ScHallId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisSeminarColumn.ScHallId, this.entityData.ScHallId);
				OnPropertyChanged("ScHallId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PlagiarismPrcnt property. 
		///		نسبة الاقتباس
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPlagiarismPrcntNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"نسبة الاقتباس"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PlagiarismPrcnt
		{
			get
			{
				return this.entityData.PlagiarismPrcnt; 
			}
			
			set
			{
				if (this.entityData.PlagiarismPrcnt == value)
					return;
					
				OnColumnChanging(PgThesisSeminarColumn.PlagiarismPrcnt, this.entityData.PlagiarismPrcnt);
				this.entityData.PlagiarismPrcnt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisSeminarColumn.PlagiarismPrcnt, this.entityData.PlagiarismPrcnt);
				OnPropertyChanged("PlagiarismPrcnt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApproveFlg property. 
		///		قرار تقييم الندوة
		/// 		/// اما بإقرار المناقشة  نعم او لا
		/// 		/// 0 عدم إقرار المناقشة
		/// 		/// 1 إقرار المناقشة
		/// 		/// 
		/// 		/// NULL  no result yet
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsApproveFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"قرار تقييم الندوة اما بإقرار المناقشة  نعم او لا 0 عدم إقرار المناقشة 1 إقرار المناقشة  NULL  no result yet"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ApproveFlg
		{
			get
			{
				return this.entityData.ApproveFlg; 
			}
			
			set
			{
				if (this.entityData.ApproveFlg == value)
					return;
					
				OnColumnChanging(PgThesisSeminarColumn.ApproveFlg, this.entityData.ApproveFlg);
				this.entityData.ApproveFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisSeminarColumn.ApproveFlg, this.entityData.ApproveFlg);
				OnPropertyChanged("ApproveFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RejectReason property. 
		///		 سبب الرفض
		/// 		/// show only if APPROVE_FLG=0
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@" سبب الرفض show only if APPROVE_FLG=0"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String RejectReason
		{
			get
			{
				return this.entityData.RejectReason; 
			}
			
			set
			{
				if (this.entityData.RejectReason == value)
					return;
					
				OnColumnChanging(PgThesisSeminarColumn.RejectReason, this.entityData.RejectReason);
				this.entityData.RejectReason = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisSeminarColumn.RejectReason, this.entityData.RejectReason);
				OnPropertyChanged("RejectReason");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		ملاحظات
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"ملاحظات"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(PgThesisSeminarColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisSeminarColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(PgThesisSeminarColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisSeminarColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(PgThesisSeminarColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgThesisSeminarColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="ScBuilding"/>.
		/// </summary>
		/// <value>The source ScBuilding for ScBuildingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScBuilding ScBuildingIdSource
      	{
            get { return entityData.ScBuildingIdSource; }
            set { entityData.ScBuildingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScHall"/>.
		/// </summary>
		/// <value>The source ScHall for ScHallId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScHall ScHallIdSource
      	{
            get { return entityData.ScHallIdSource; }
            set { entityData.ScHallIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="PgThesisStud"/>.
		/// </summary>
		/// <value>The source PgThesisStud for PgThesisStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual PgThesisStud PgThesisStudIdSource
      	{
            get { return entityData.PgThesisStudIdSource; }
            set { entityData.PgThesisStudIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of PgThesisStudApprove objects
		///	which are related to this object through the relation FK_PG_THESIS_STUD_APPROVE_PG_THESIS_SEMINAR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgThesisStudApprove> PgThesisStudApproveCollection
		{
			get { return entityData.PgThesisStudApproveCollection; }
			set { entityData.PgThesisStudApproveCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of PgAttchdDoc objects
		///	which are related to this object through the relation FK_PG_ATTCHD_DOC_PG_THESIS_SEMINAR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgAttchdDoc> PgAttchdDocCollection
		{
			get { return entityData.PgAttchdDocCollection; }
			set { entityData.PgAttchdDocCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "PG_THESIS_SEMINAR"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"PG_THESIS_SEMINAR_ID", "PG_THESIS_STUD_ID", "SEMINAR_DATE", "TIME_FROM", "SC_BUILDING_ID", "SC_HALL_ID", "PLAGIARISM_PRCNT", "APPROVE_FLG", "REJECT_REASON", "NOTES", "LAST_DATE", "SE_USER_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as PgThesisSeminarEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (PgThesisSeminar) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<PgThesisSeminar>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as PgThesisSeminar);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed PgThesisSeminar Entity 
		///</summary>
		protected virtual PgThesisSeminar Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			PgThesisSeminar copy = new PgThesisSeminar();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.PgThesisSeminarId = this.PgThesisSeminarId;
					copy.OriginalPgThesisSeminarId = this.OriginalPgThesisSeminarId;
				copy.PgThesisStudId = this.PgThesisStudId;
				copy.SeminarDate = this.SeminarDate;
				copy.TimeFrom = this.TimeFrom;
				copy.ScBuildingId = this.ScBuildingId;
				copy.ScHallId = this.ScHallId;
				copy.PlagiarismPrcnt = this.PlagiarismPrcnt;
				copy.ApproveFlg = this.ApproveFlg;
				copy.RejectReason = this.RejectReason;
				copy.Notes = this.Notes;
				copy.LastDate = this.LastDate;
				copy.SeUserId = this.SeUserId;
			
			if (this.ScBuildingIdSource != null && existingCopies.Contains(this.ScBuildingIdSource))
				copy.ScBuildingIdSource = existingCopies[this.ScBuildingIdSource] as ScBuilding;
			else
				copy.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource, existingCopies) as ScBuilding;
			if (this.ScHallIdSource != null && existingCopies.Contains(this.ScHallIdSource))
				copy.ScHallIdSource = existingCopies[this.ScHallIdSource] as ScHall;
			else
				copy.ScHallIdSource = MakeCopyOf(this.ScHallIdSource, existingCopies) as ScHall;
			if (this.PgThesisStudIdSource != null && existingCopies.Contains(this.PgThesisStudIdSource))
				copy.PgThesisStudIdSource = existingCopies[this.PgThesisStudIdSource] as PgThesisStud;
			else
				copy.PgThesisStudIdSource = MakeCopyOf(this.PgThesisStudIdSource, existingCopies) as PgThesisStud;
		
			//deep copy nested objects
			copy.PgThesisStudApproveCollection = (TList<PgThesisStudApprove>) MakeCopyOf(this.PgThesisStudApproveCollection, existingCopies); 
			copy.PgAttchdDocCollection = (TList<PgAttchdDoc>) MakeCopyOf(this.PgAttchdDocCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed PgThesisSeminar Entity 
		///</summary>
		public virtual PgThesisSeminar Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed PgThesisSeminar Entity which is a deep copy of the current entity.
		///</summary>
		public virtual PgThesisSeminar DeepCopy()
		{
			return EntityHelper.Clone<PgThesisSeminar>(this as PgThesisSeminar);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as PgThesisSeminarEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new PgThesisSeminarEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as PgThesisSeminarEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(PgThesisSeminarColumn column)
		{
			switch(column)
			{
					case PgThesisSeminarColumn.PgThesisSeminarId:
					return entityData.PgThesisSeminarId != _originalData.PgThesisSeminarId;
					case PgThesisSeminarColumn.PgThesisStudId:
					return entityData.PgThesisStudId != _originalData.PgThesisStudId;
					case PgThesisSeminarColumn.SeminarDate:
					return entityData.SeminarDate != _originalData.SeminarDate;
					case PgThesisSeminarColumn.TimeFrom:
					return entityData.TimeFrom != _originalData.TimeFrom;
					case PgThesisSeminarColumn.ScBuildingId:
					return entityData.ScBuildingId != _originalData.ScBuildingId;
					case PgThesisSeminarColumn.ScHallId:
					return entityData.ScHallId != _originalData.ScHallId;
					case PgThesisSeminarColumn.PlagiarismPrcnt:
					return entityData.PlagiarismPrcnt != _originalData.PlagiarismPrcnt;
					case PgThesisSeminarColumn.ApproveFlg:
					return entityData.ApproveFlg != _originalData.ApproveFlg;
					case PgThesisSeminarColumn.RejectReason:
					return entityData.RejectReason != _originalData.RejectReason;
					case PgThesisSeminarColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case PgThesisSeminarColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case PgThesisSeminarColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< PgThesisSeminarColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.PgThesisSeminarId != _originalData.PgThesisSeminarId;
			result = result || entityData.PgThesisStudId != _originalData.PgThesisStudId;
			result = result || entityData.SeminarDate != _originalData.SeminarDate;
			result = result || entityData.TimeFrom != _originalData.TimeFrom;
			result = result || entityData.ScBuildingId != _originalData.ScBuildingId;
			result = result || entityData.ScHallId != _originalData.ScHallId;
			result = result || entityData.PlagiarismPrcnt != _originalData.PlagiarismPrcnt;
			result = result || entityData.ApproveFlg != _originalData.ApproveFlg;
			result = result || entityData.RejectReason != _originalData.RejectReason;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			return result;
		}	
		
		///<summary>
		///  Returns a PgThesisSeminar Entity with the original data.
		///</summary>
		public PgThesisSeminar GetOriginalEntity()
		{
			if (_originalData != null)
				return CreatePgThesisSeminar(
				_originalData.PgThesisSeminarId,
				_originalData.PgThesisStudId,
				_originalData.SeminarDate,
				_originalData.TimeFrom,
				_originalData.ScBuildingId,
				_originalData.ScHallId,
				_originalData.PlagiarismPrcnt,
				_originalData.ApproveFlg,
				_originalData.RejectReason,
				_originalData.Notes,
				_originalData.LastDate,
				_originalData.SeUserId
				);
				
			return (PgThesisSeminar)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="PgThesisSeminarBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is PgThesisSeminarBase)
				return ValueEquals(this, (PgThesisSeminarBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="PgThesisSeminarBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.PgThesisSeminarId.GetHashCode() ^ 
					this.PgThesisStudId.GetHashCode() ^ 
					((this.SeminarDate == null) ? string.Empty : this.SeminarDate.ToString()).GetHashCode() ^ 
					((this.TimeFrom == null) ? string.Empty : this.TimeFrom.ToString()).GetHashCode() ^ 
					((this.ScBuildingId == null) ? string.Empty : this.ScBuildingId.ToString()).GetHashCode() ^ 
					((this.ScHallId == null) ? string.Empty : this.ScHallId.ToString()).GetHashCode() ^ 
					((this.PlagiarismPrcnt == null) ? string.Empty : this.PlagiarismPrcnt.ToString()).GetHashCode() ^ 
					((this.ApproveFlg == null) ? string.Empty : this.ApproveFlg.ToString()).GetHashCode() ^ 
					((this.RejectReason == null) ? string.Empty : this.RejectReason.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="PgThesisSeminarBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(PgThesisSeminarBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="PgThesisSeminarBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="PgThesisSeminarBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="PgThesisSeminarBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(PgThesisSeminarBase Object1, PgThesisSeminarBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.PgThesisSeminarId != Object2.PgThesisSeminarId)
				equal = false;
			if (Object1.PgThesisStudId != Object2.PgThesisStudId)
				equal = false;
			if ( Object1.SeminarDate != null && Object2.SeminarDate != null )
			{
				if (Object1.SeminarDate != Object2.SeminarDate)
					equal = false;
			}
			else if (Object1.SeminarDate == null ^ Object2.SeminarDate == null )
			{
				equal = false;
			}
			if ( Object1.TimeFrom != null && Object2.TimeFrom != null )
			{
				if (Object1.TimeFrom != Object2.TimeFrom)
					equal = false;
			}
			else if (Object1.TimeFrom == null ^ Object2.TimeFrom == null )
			{
				equal = false;
			}
			if ( Object1.ScBuildingId != null && Object2.ScBuildingId != null )
			{
				if (Object1.ScBuildingId != Object2.ScBuildingId)
					equal = false;
			}
			else if (Object1.ScBuildingId == null ^ Object2.ScBuildingId == null )
			{
				equal = false;
			}
			if ( Object1.ScHallId != null && Object2.ScHallId != null )
			{
				if (Object1.ScHallId != Object2.ScHallId)
					equal = false;
			}
			else if (Object1.ScHallId == null ^ Object2.ScHallId == null )
			{
				equal = false;
			}
			if ( Object1.PlagiarismPrcnt != null && Object2.PlagiarismPrcnt != null )
			{
				if (Object1.PlagiarismPrcnt != Object2.PlagiarismPrcnt)
					equal = false;
			}
			else if (Object1.PlagiarismPrcnt == null ^ Object2.PlagiarismPrcnt == null )
			{
				equal = false;
			}
			if ( Object1.ApproveFlg != null && Object2.ApproveFlg != null )
			{
				if (Object1.ApproveFlg != Object2.ApproveFlg)
					equal = false;
			}
			else if (Object1.ApproveFlg == null ^ Object2.ApproveFlg == null )
			{
				equal = false;
			}
			if ( Object1.RejectReason != null && Object2.RejectReason != null )
			{
				if (Object1.RejectReason != Object2.RejectReason)
					equal = false;
			}
			else if (Object1.RejectReason == null ^ Object2.RejectReason == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((PgThesisSeminarBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static PgThesisSeminarComparer GetComparer()
        {
            return new PgThesisSeminarComparer();
        }
        */

        // Comparer delegates back to PgThesisSeminar
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(PgThesisSeminar rhs, PgThesisSeminarColumn which)
        {
            switch (which)
            {
            	
            	
            	case PgThesisSeminarColumn.PgThesisSeminarId:
            		return this.PgThesisSeminarId.CompareTo(rhs.PgThesisSeminarId);
            		
            		                 
            	
            	
            	case PgThesisSeminarColumn.PgThesisStudId:
            		return this.PgThesisStudId.CompareTo(rhs.PgThesisStudId);
            		
            		                 
            	
            	
            	case PgThesisSeminarColumn.SeminarDate:
            		return this.SeminarDate.Value.CompareTo(rhs.SeminarDate.Value);
            		
            		                 
            	
            	
            	case PgThesisSeminarColumn.TimeFrom:
            		return this.TimeFrom.Value.CompareTo(rhs.TimeFrom.Value);
            		
            		                 
            	
            	
            	case PgThesisSeminarColumn.ScBuildingId:
            		return this.ScBuildingId.Value.CompareTo(rhs.ScBuildingId.Value);
            		
            		                 
            	
            	
            	case PgThesisSeminarColumn.ScHallId:
            		return this.ScHallId.Value.CompareTo(rhs.ScHallId.Value);
            		
            		                 
            	
            	
            	case PgThesisSeminarColumn.PlagiarismPrcnt:
            		return this.PlagiarismPrcnt.Value.CompareTo(rhs.PlagiarismPrcnt.Value);
            		
            		                 
            	
            	
            	case PgThesisSeminarColumn.ApproveFlg:
            		return this.ApproveFlg.Value.CompareTo(rhs.ApproveFlg.Value);
            		
            		                 
            	
            	
            	case PgThesisSeminarColumn.RejectReason:
            		return this.RejectReason.CompareTo(rhs.RejectReason);
            		
            		                 
            	
            	
            	case PgThesisSeminarColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case PgThesisSeminarColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case PgThesisSeminarColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<PgThesisSeminarKey> Members
		
		// member variable for the EntityId property
		private PgThesisSeminarKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual PgThesisSeminarKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new PgThesisSeminarKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("PgThesisSeminar")
					.Append("|").Append( this.PgThesisSeminarId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- PgThesisSeminarId: {0}{12}- PgThesisStudId: {1}{12}- SeminarDate: {2}{12}- TimeFrom: {3}{12}- ScBuildingId: {4}{12}- ScHallId: {5}{12}- PlagiarismPrcnt: {6}{12}- ApproveFlg: {7}{12}- RejectReason: {8}{12}- Notes: {9}{12}- LastDate: {10}{12}- SeUserId: {11}{12}{14}", 
				this.PgThesisSeminarId,
				this.PgThesisStudId,
				(this.SeminarDate == null) ? string.Empty : this.SeminarDate.ToString(),
				(this.TimeFrom == null) ? string.Empty : this.TimeFrom.ToString(),
				(this.ScBuildingId == null) ? string.Empty : this.ScBuildingId.ToString(),
				(this.ScHallId == null) ? string.Empty : this.ScHallId.ToString(),
				(this.PlagiarismPrcnt == null) ? string.Empty : this.PlagiarismPrcnt.ToString(),
				(this.ApproveFlg == null) ? string.Empty : this.ApproveFlg.ToString(),
				(this.RejectReason == null) ? string.Empty : this.RejectReason.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'PG_THESIS_SEMINAR' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class PgThesisSeminarEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// PG_THESIS_SEMINAR_ID : تسجيل الندوة التعريفية (السيمينار)
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "PG_THESIS_SEMINAR"</remarks>
		public System.Decimal PgThesisSeminarId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalPgThesisSeminarId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// PG_THESIS_STUD_ID : تسجيل بيانات الرسالة-بيانات البحث العلمي
		/// </summary>
		public System.Decimal		  PgThesisStudId = 0.0m;
		
		/// <summary>
		/// SEMINAR_DATE : تاريخ عقد الندوة
		/// </summary>
		public System.DateTime?		  SeminarDate = null;
		
		/// <summary>
		/// TIME_FROM : توقيت الندوة
		/// </summary>
		public System.DateTime?		  TimeFrom = null;
		
		/// <summary>
		/// SC_BUILDING_ID : المبانى
		/// </summary>
		public System.Decimal?		  ScBuildingId = null;
		
		/// <summary>
		/// SC_HALL_ID : القاعات
		/// </summary>
		public System.Decimal?		  ScHallId = null;
		
		/// <summary>
		/// PLAGIARISM_PRCNT : نسبة الاقتباس
		/// </summary>
		public System.Decimal?		  PlagiarismPrcnt = null;
		
		/// <summary>
		/// APPROVE_FLG : قرار تقييم الندوة
		/// 		/// اما بإقرار المناقشة  نعم او لا
		/// 		/// 0 عدم إقرار المناقشة
		/// 		/// 1 إقرار المناقشة
		/// 		/// 
		/// 		/// NULL  no result yet
		/// </summary>
		public System.Boolean?		  ApproveFlg = null;
		
		/// <summary>
		/// REJECT_REASON :  سبب الرفض
		/// 		/// show only if APPROVE_FLG=0
		/// </summary>
		public System.String		  RejectReason = null;
		
		/// <summary>
		/// NOTES : ملاحظات
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private ScBuilding _scBuildingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScBuilding"/>.
		/// </summary>
		/// <value>The source ScBuilding for ScBuildingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScBuilding ScBuildingIdSource
      	{
            get { return this._scBuildingIdSource; }
            set { this._scBuildingIdSource = value; }
      	}
		private ScHall _scHallIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScHall"/>.
		/// </summary>
		/// <value>The source ScHall for ScHallId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScHall ScHallIdSource
      	{
            get { return this._scHallIdSource; }
            set { this._scHallIdSource = value; }
      	}
		private PgThesisStud _pgThesisStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="PgThesisStud"/>.
		/// </summary>
		/// <value>The source PgThesisStud for PgThesisStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual PgThesisStud PgThesisStudIdSource
      	{
            get { return this._pgThesisStudIdSource; }
            set { this._pgThesisStudIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region PgThesisStudApproveCollection
		
		private TList<PgThesisStudApprove> _pgThesisStudApprovePgThesisSeminarId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgThesisStudApprovePgThesisSeminarId
		/// </summary>
		
		public TList<PgThesisStudApprove> PgThesisStudApproveCollection
		{
			get
			{
				if (_pgThesisStudApprovePgThesisSeminarId == null)
				{
				_pgThesisStudApprovePgThesisSeminarId = new TList<PgThesisStudApprove>();
				}
	
				return _pgThesisStudApprovePgThesisSeminarId;
			}
			set { _pgThesisStudApprovePgThesisSeminarId = value; }
		}
		
		#endregion

		#region PgAttchdDocCollection
		
		private TList<PgAttchdDoc> _pgAttchdDocPgThesisSeminarId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgAttchdDocPgThesisSeminarId
		/// </summary>
		
		public TList<PgAttchdDoc> PgAttchdDocCollection
		{
			get
			{
				if (_pgAttchdDocPgThesisSeminarId == null)
				{
				_pgAttchdDocPgThesisSeminarId = new TList<PgAttchdDoc>();
				}
	
				return _pgAttchdDocPgThesisSeminarId;
			}
			set { _pgAttchdDocPgThesisSeminarId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			PgThesisSeminarEntityData _tmp = new PgThesisSeminarEntityData();
						
			_tmp.PgThesisSeminarId = this.PgThesisSeminarId;
			_tmp.OriginalPgThesisSeminarId = this.OriginalPgThesisSeminarId;
			
			_tmp.PgThesisStudId = this.PgThesisStudId;
			_tmp.SeminarDate = this.SeminarDate;
			_tmp.TimeFrom = this.TimeFrom;
			_tmp.ScBuildingId = this.ScBuildingId;
			_tmp.ScHallId = this.ScHallId;
			_tmp.PlagiarismPrcnt = this.PlagiarismPrcnt;
			_tmp.ApproveFlg = this.ApproveFlg;
			_tmp.RejectReason = this.RejectReason;
			_tmp.Notes = this.Notes;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			
			#region Source Parent Composite Entities
			if (this.ScBuildingIdSource != null)
				_tmp.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource) as ScBuilding;
			if (this.ScHallIdSource != null)
				_tmp.ScHallIdSource = MakeCopyOf(this.ScHallIdSource) as ScHall;
			if (this.PgThesisStudIdSource != null)
				_tmp.PgThesisStudIdSource = MakeCopyOf(this.PgThesisStudIdSource) as PgThesisStud;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._pgThesisStudApprovePgThesisSeminarId != null)
				_tmp.PgThesisStudApproveCollection = (TList<PgThesisStudApprove>) MakeCopyOf(this.PgThesisStudApproveCollection); 
			if (this._pgAttchdDocPgThesisSeminarId != null)
				_tmp.PgAttchdDocCollection = (TList<PgAttchdDoc>) MakeCopyOf(this.PgAttchdDocCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			PgThesisSeminarEntityData _tmp = new PgThesisSeminarEntityData();
						
			_tmp.PgThesisSeminarId = this.PgThesisSeminarId;
			_tmp.OriginalPgThesisSeminarId = this.OriginalPgThesisSeminarId;
			
			_tmp.PgThesisStudId = this.PgThesisStudId;
			_tmp.SeminarDate = this.SeminarDate;
			_tmp.TimeFrom = this.TimeFrom;
			_tmp.ScBuildingId = this.ScBuildingId;
			_tmp.ScHallId = this.ScHallId;
			_tmp.PlagiarismPrcnt = this.PlagiarismPrcnt;
			_tmp.ApproveFlg = this.ApproveFlg;
			_tmp.RejectReason = this.RejectReason;
			_tmp.Notes = this.Notes;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			
			#region Source Parent Composite Entities
			if (this.ScBuildingIdSource != null && existingCopies.Contains(this.ScBuildingIdSource))
				_tmp.ScBuildingIdSource = existingCopies[this.ScBuildingIdSource] as ScBuilding;
			else
				_tmp.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource, existingCopies) as ScBuilding;
			if (this.ScHallIdSource != null && existingCopies.Contains(this.ScHallIdSource))
				_tmp.ScHallIdSource = existingCopies[this.ScHallIdSource] as ScHall;
			else
				_tmp.ScHallIdSource = MakeCopyOf(this.ScHallIdSource, existingCopies) as ScHall;
			if (this.PgThesisStudIdSource != null && existingCopies.Contains(this.PgThesisStudIdSource))
				_tmp.PgThesisStudIdSource = existingCopies[this.PgThesisStudIdSource] as PgThesisStud;
			else
				_tmp.PgThesisStudIdSource = MakeCopyOf(this.PgThesisStudIdSource, existingCopies) as PgThesisStud;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.PgThesisStudApproveCollection = (TList<PgThesisStudApprove>) MakeCopyOf(this.PgThesisStudApproveCollection, existingCopies); 
			_tmp.PgAttchdDocCollection = (TList<PgAttchdDoc>) MakeCopyOf(this.PgAttchdDocCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgThesisSeminarColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(PgThesisSeminarColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgThesisSeminarColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(PgThesisSeminarColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgThesisSeminarColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(PgThesisSeminarColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				PgThesisSeminarEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new PgThesisSeminarEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgThesisSeminarColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(PgThesisSeminarColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				PgThesisSeminarEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new PgThesisSeminarEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region PgThesisSeminarEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="PgThesisSeminar"/> object.
	/// </remarks>
	public class PgThesisSeminarEventArgs : System.EventArgs
	{
		private PgThesisSeminarColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the PgThesisSeminarEventArgs class.
		///</summary>
		public PgThesisSeminarEventArgs(PgThesisSeminarColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the PgThesisSeminarEventArgs class.
		///</summary>
		public PgThesisSeminarEventArgs(PgThesisSeminarColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The PgThesisSeminarColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="PgThesisSeminarColumn" />
		public PgThesisSeminarColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all PgThesisSeminar related events.
	///</summary>
	public delegate void PgThesisSeminarEventHandler(object sender, PgThesisSeminarEventArgs e);
	
	#region PgThesisSeminarComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class PgThesisSeminarComparer : System.Collections.Generic.IComparer<PgThesisSeminar>
	{
		PgThesisSeminarColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:PgThesisSeminarComparer"/> class.
        /// </summary>
		public PgThesisSeminarComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:PgThesisSeminarComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public PgThesisSeminarComparer(PgThesisSeminarColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="PgThesisSeminar"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="PgThesisSeminar"/> to compare.</param>
        /// <param name="b">The second <c>PgThesisSeminar</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(PgThesisSeminar a, PgThesisSeminar b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(PgThesisSeminar entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(PgThesisSeminar a, PgThesisSeminar b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public PgThesisSeminarColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region PgThesisSeminarKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="PgThesisSeminar"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class PgThesisSeminarKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the PgThesisSeminarKey class.
		/// </summary>
		public PgThesisSeminarKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the PgThesisSeminarKey class.
		/// </summary>
		public PgThesisSeminarKey(PgThesisSeminarBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.PgThesisSeminarId = entity.PgThesisSeminarId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the PgThesisSeminarKey class.
		/// </summary>
		public PgThesisSeminarKey(System.Decimal _pgThesisSeminarId)
		{
			#region Init Properties

			this.PgThesisSeminarId = _pgThesisSeminarId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private PgThesisSeminarBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public PgThesisSeminarBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the PgThesisSeminarId property
		private System.Decimal _pgThesisSeminarId;
		
		/// <summary>
		/// Gets or sets the PgThesisSeminarId property.
		/// </summary>
		public System.Decimal PgThesisSeminarId
		{
			get { return _pgThesisSeminarId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.PgThesisSeminarId = value;
				
				_pgThesisSeminarId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				PgThesisSeminarId = ( values["PgThesisSeminarId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["PgThesisSeminarId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("PgThesisSeminarId", PgThesisSeminarId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("PgThesisSeminarId: {0}{1}",
								PgThesisSeminarId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region PgThesisSeminarColumn Enum
	
	/// <summary>
	/// Enumerate the PgThesisSeminar columns.
	/// </summary>
	[Serializable]
	public enum PgThesisSeminarColumn : int
	{
		/// <summary>
		/// PgThesisSeminarId : تسجيل الندوة التعريفية (السيمينار)
		/// </summary>
		[EnumTextValue("PG_THESIS_SEMINAR_ID")]
		[ColumnEnum("PG_THESIS_SEMINAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		PgThesisSeminarId = 1,
		/// <summary>
		/// PgThesisStudId : تسجيل بيانات الرسالة-بيانات البحث العلمي
		/// </summary>
		[EnumTextValue("PG_THESIS_STUD_ID")]
		[ColumnEnum("PG_THESIS_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		PgThesisStudId = 2,
		/// <summary>
		/// SeminarDate : تاريخ عقد الندوة
		/// </summary>
		[EnumTextValue("SEMINAR_DATE")]
		[ColumnEnum("SEMINAR_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		SeminarDate = 3,
		/// <summary>
		/// TimeFrom : توقيت الندوة
		/// </summary>
		[EnumTextValue("TIME_FROM")]
		[ColumnEnum("TIME_FROM", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		TimeFrom = 4,
		/// <summary>
		/// ScBuildingId : المبانى
		/// </summary>
		[EnumTextValue("SC_BUILDING_ID")]
		[ColumnEnum("SC_BUILDING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScBuildingId = 5,
		/// <summary>
		/// ScHallId : القاعات
		/// </summary>
		[EnumTextValue("SC_HALL_ID")]
		[ColumnEnum("SC_HALL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScHallId = 6,
		/// <summary>
		/// PlagiarismPrcnt : نسبة الاقتباس
		/// </summary>
		[EnumTextValue("PLAGIARISM_PRCNT")]
		[ColumnEnum("PLAGIARISM_PRCNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PlagiarismPrcnt = 7,
		/// <summary>
		/// ApproveFlg : قرار تقييم الندوة
		/// 		/// اما بإقرار المناقشة  نعم او لا
		/// 		/// 0 عدم إقرار المناقشة
		/// 		/// 1 إقرار المناقشة
		/// 		/// 
		/// 		/// NULL  no result yet
		/// </summary>
		[EnumTextValue("APPROVE_FLG")]
		[ColumnEnum("APPROVE_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ApproveFlg = 8,
		/// <summary>
		/// RejectReason :  سبب الرفض
		/// 		/// show only if APPROVE_FLG=0
		/// </summary>
		[EnumTextValue("REJECT_REASON")]
		[ColumnEnum("REJECT_REASON", typeof(System.String), System.Data.DbType.String, false, false, true)]
		RejectReason = 9,
		/// <summary>
		/// Notes : ملاحظات
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Notes = 10,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 11,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 12
	}//End enum

	#endregion PgThesisSeminarColumn Enum

} // end namespace
