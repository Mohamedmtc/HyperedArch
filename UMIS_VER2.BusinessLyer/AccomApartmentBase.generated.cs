
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AccomApartment.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ACCOM_APARTMENT' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AccomApartmentBase : EntityBase, IAccomApartment, IEntityId<AccomApartmentKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AccomApartmentEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AccomApartmentEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AccomApartmentEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AccomApartment> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AccomApartmentEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AccomApartmentEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AccomApartmentBase"/> instance.
		///</summary>
		public AccomApartmentBase()
		{
			this.entityData = new AccomApartmentEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AccomApartmentBase"/> instance.
		///</summary>
		///<param name="_accomApartmentId">الشقق</param>
		///<param name="_accomBuildingId">المباني</param>
		///<param name="_apartmentCode">رقم الشقة</param>
		///<param name="_apartmentAr">اسم الشقة</param>
		///<param name="_apartmentEn">اسم الشقة</param>
		///<param name="_floorNo">رقم الطابق</param>
		///<param name="_wingCode">كود الجناح</param>
		///<param name="_airCondFlg">XXXX</param>
		///<param name="_isActive">نشط default=1</param>
		///<param name="_notes">ملاحظات</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public AccomApartmentBase(System.Decimal _accomApartmentId, System.Decimal _accomBuildingId, 
			System.String _apartmentCode, System.String _apartmentAr, System.String _apartmentEn, 
			System.Int16? _floorNo, System.String _wingCode, System.Boolean? _airCondFlg, 
			System.Boolean _isActive, System.String _notes, System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			this.entityData = new AccomApartmentEntityData();
			this.backupData = null;

			this.AccomApartmentId = _accomApartmentId;
			this.AccomBuildingId = _accomBuildingId;
			this.ApartmentCode = _apartmentCode;
			this.ApartmentAr = _apartmentAr;
			this.ApartmentEn = _apartmentEn;
			this.FloorNo = _floorNo;
			this.WingCode = _wingCode;
			this.AirCondFlg = _airCondFlg;
			this.IsActive = _isActive;
			this.Notes = _notes;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AccomApartment"/> instance.
		///</summary>
		///<param name="_accomApartmentId">الشقق</param>
		///<param name="_accomBuildingId">المباني</param>
		///<param name="_apartmentCode">رقم الشقة</param>
		///<param name="_apartmentAr">اسم الشقة</param>
		///<param name="_apartmentEn">اسم الشقة</param>
		///<param name="_floorNo">رقم الطابق</param>
		///<param name="_wingCode">كود الجناح</param>
		///<param name="_airCondFlg">XXXX</param>
		///<param name="_isActive">نشط default=1</param>
		///<param name="_notes">ملاحظات</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static AccomApartment CreateAccomApartment(System.Decimal _accomApartmentId, System.Decimal _accomBuildingId, 
			System.String _apartmentCode, System.String _apartmentAr, System.String _apartmentEn, 
			System.Int16? _floorNo, System.String _wingCode, System.Boolean? _airCondFlg, 
			System.Boolean _isActive, System.String _notes, System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			AccomApartment newAccomApartment = new AccomApartment();
			newAccomApartment.AccomApartmentId = _accomApartmentId;
			newAccomApartment.AccomBuildingId = _accomBuildingId;
			newAccomApartment.ApartmentCode = _apartmentCode;
			newAccomApartment.ApartmentAr = _apartmentAr;
			newAccomApartment.ApartmentEn = _apartmentEn;
			newAccomApartment.FloorNo = _floorNo;
			newAccomApartment.WingCode = _wingCode;
			newAccomApartment.AirCondFlg = _airCondFlg;
			newAccomApartment.IsActive = _isActive;
			newAccomApartment.Notes = _notes;
			newAccomApartment.SeUserId = _seUserId;
			newAccomApartment.LastDate = _lastDate;
			return newAccomApartment;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AccomApartmentId property. 
		///		الشقق
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"الشقق"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal AccomApartmentId
		{
			get
			{
				return this.entityData.AccomApartmentId; 
			}
			
			set
			{
				if (this.entityData.AccomApartmentId == value)
					return;
					
				OnColumnChanging(AccomApartmentColumn.AccomApartmentId, this.entityData.AccomApartmentId);
				this.entityData.AccomApartmentId = value;
				this.EntityId.AccomApartmentId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomApartmentColumn.AccomApartmentId, this.entityData.AccomApartmentId);
				OnPropertyChanged("AccomApartmentId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ACCOM_APARTMENT_ID property.
		///		الشقق
		/// </summary>
		/// <remarks>This is the original value of the ACCOM_APARTMENT_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalAccomApartmentId
		{
			get { return this.entityData.OriginalAccomApartmentId; }
			set { this.entityData.OriginalAccomApartmentId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the AccomBuildingId property. 
		///		المباني
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"المباني"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AccomBuildingId
		{
			get
			{
				return this.entityData.AccomBuildingId; 
			}
			
			set
			{
				if (this.entityData.AccomBuildingId == value)
					return;
					
				OnColumnChanging(AccomApartmentColumn.AccomBuildingId, this.entityData.AccomBuildingId);
				this.entityData.AccomBuildingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomApartmentColumn.AccomBuildingId, this.entityData.AccomBuildingId);
				OnPropertyChanged("AccomBuildingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApartmentCode property. 
		///		رقم الشقة
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"رقم الشقة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String ApartmentCode
		{
			get
			{
				return this.entityData.ApartmentCode; 
			}
			
			set
			{
				if (this.entityData.ApartmentCode == value)
					return;
					
				OnColumnChanging(AccomApartmentColumn.ApartmentCode, this.entityData.ApartmentCode);
				this.entityData.ApartmentCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomApartmentColumn.ApartmentCode, this.entityData.ApartmentCode);
				OnPropertyChanged("ApartmentCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApartmentAr property. 
		///		اسم الشقة
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"اسم الشقة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String ApartmentAr
		{
			get
			{
				return this.entityData.ApartmentAr; 
			}
			
			set
			{
				if (this.entityData.ApartmentAr == value)
					return;
					
				OnColumnChanging(AccomApartmentColumn.ApartmentAr, this.entityData.ApartmentAr);
				this.entityData.ApartmentAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomApartmentColumn.ApartmentAr, this.entityData.ApartmentAr);
				OnPropertyChanged("ApartmentAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApartmentEn property. 
		///		اسم الشقة
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"اسم الشقة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ApartmentEn
		{
			get
			{
				return this.entityData.ApartmentEn; 
			}
			
			set
			{
				if (this.entityData.ApartmentEn == value)
					return;
					
				OnColumnChanging(AccomApartmentColumn.ApartmentEn, this.entityData.ApartmentEn);
				this.entityData.ApartmentEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomApartmentColumn.ApartmentEn, this.entityData.ApartmentEn);
				OnPropertyChanged("ApartmentEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FloorNo property. 
		///		رقم الطابق
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsFloorNoNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"رقم الطابق"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? FloorNo
		{
			get
			{
				return this.entityData.FloorNo; 
			}
			
			set
			{
				if (this.entityData.FloorNo == value)
					return;
					
				OnColumnChanging(AccomApartmentColumn.FloorNo, this.entityData.FloorNo);
				this.entityData.FloorNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomApartmentColumn.FloorNo, this.entityData.FloorNo);
				OnPropertyChanged("FloorNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WingCode property. 
		///		كود الجناح
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"كود الجناح"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String WingCode
		{
			get
			{
				return this.entityData.WingCode; 
			}
			
			set
			{
				if (this.entityData.WingCode == value)
					return;
					
				OnColumnChanging(AccomApartmentColumn.WingCode, this.entityData.WingCode);
				this.entityData.WingCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomApartmentColumn.WingCode, this.entityData.WingCode);
				OnPropertyChanged("WingCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AirCondFlg property. 
		///		XXXX
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsAirCondFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XXXX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? AirCondFlg
		{
			get
			{
				return this.entityData.AirCondFlg; 
			}
			
			set
			{
				if (this.entityData.AirCondFlg == value)
					return;
					
				OnColumnChanging(AccomApartmentColumn.AirCondFlg, this.entityData.AirCondFlg);
				this.entityData.AirCondFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomApartmentColumn.AirCondFlg, this.entityData.AirCondFlg);
				OnPropertyChanged("AirCondFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		نشط default=1
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"نشط default=1"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
				OnColumnChanging(AccomApartmentColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomApartmentColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		ملاحظات
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"ملاحظات"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(AccomApartmentColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomApartmentColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(AccomApartmentColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomApartmentColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(AccomApartmentColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomApartmentColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AccomBuilding"/>.
		/// </summary>
		/// <value>The source AccomBuilding for AccomBuildingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AccomBuilding AccomBuildingIdSource
      	{
            get { return entityData.AccomBuildingIdSource; }
            set { entityData.AccomBuildingIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of AccomRoom objects
		///	which are related to this object through the relation FK_ACCOM_ROOM_ACCOM_APARTMENT
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AccomRoom> AccomRoomCollection
		{
			get { return entityData.AccomRoomCollection; }
			set { entityData.AccomRoomCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ApartmentCode", "Apartment Code"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ApartmentCode", "Apartment Code", 20));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ApartmentAr", "Apartment Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ApartmentAr", "Apartment Ar", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ApartmentEn", "Apartment En", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("WingCode", "Wing Code", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 250));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ACCOM_APARTMENT"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ACCOM_APARTMENT_ID", "ACCOM_BUILDING_ID", "APARTMENT_CODE", "APARTMENT_AR", "APARTMENT_EN", "FLOOR_NO", "WING_CODE", "AIR_COND_FLG", "IS_ACTIVE", "NOTES", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AccomApartmentEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AccomApartment) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AccomApartment>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AccomApartment);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AccomApartment Entity 
		///</summary>
		protected virtual AccomApartment Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AccomApartment copy = new AccomApartment();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AccomApartmentId = this.AccomApartmentId;
					copy.OriginalAccomApartmentId = this.OriginalAccomApartmentId;
				copy.AccomBuildingId = this.AccomBuildingId;
				copy.ApartmentCode = this.ApartmentCode;
				copy.ApartmentAr = this.ApartmentAr;
				copy.ApartmentEn = this.ApartmentEn;
				copy.FloorNo = this.FloorNo;
				copy.WingCode = this.WingCode;
				copy.AirCondFlg = this.AirCondFlg;
				copy.IsActive = this.IsActive;
				copy.Notes = this.Notes;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.AccomBuildingIdSource != null && existingCopies.Contains(this.AccomBuildingIdSource))
				copy.AccomBuildingIdSource = existingCopies[this.AccomBuildingIdSource] as AccomBuilding;
			else
				copy.AccomBuildingIdSource = MakeCopyOf(this.AccomBuildingIdSource, existingCopies) as AccomBuilding;
		
			//deep copy nested objects
			copy.AccomRoomCollection = (TList<AccomRoom>) MakeCopyOf(this.AccomRoomCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AccomApartment Entity 
		///</summary>
		public virtual AccomApartment Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AccomApartment Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AccomApartment DeepCopy()
		{
			return EntityHelper.Clone<AccomApartment>(this as AccomApartment);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AccomApartmentEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AccomApartmentEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AccomApartmentEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AccomApartmentColumn column)
		{
			switch(column)
			{
					case AccomApartmentColumn.AccomApartmentId:
					return entityData.AccomApartmentId != _originalData.AccomApartmentId;
					case AccomApartmentColumn.AccomBuildingId:
					return entityData.AccomBuildingId != _originalData.AccomBuildingId;
					case AccomApartmentColumn.ApartmentCode:
					return entityData.ApartmentCode != _originalData.ApartmentCode;
					case AccomApartmentColumn.ApartmentAr:
					return entityData.ApartmentAr != _originalData.ApartmentAr;
					case AccomApartmentColumn.ApartmentEn:
					return entityData.ApartmentEn != _originalData.ApartmentEn;
					case AccomApartmentColumn.FloorNo:
					return entityData.FloorNo != _originalData.FloorNo;
					case AccomApartmentColumn.WingCode:
					return entityData.WingCode != _originalData.WingCode;
					case AccomApartmentColumn.AirCondFlg:
					return entityData.AirCondFlg != _originalData.AirCondFlg;
					case AccomApartmentColumn.IsActive:
					return entityData.IsActive != _originalData.IsActive;
					case AccomApartmentColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case AccomApartmentColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case AccomApartmentColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AccomApartmentColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AccomApartmentId != _originalData.AccomApartmentId;
			result = result || entityData.AccomBuildingId != _originalData.AccomBuildingId;
			result = result || entityData.ApartmentCode != _originalData.ApartmentCode;
			result = result || entityData.ApartmentAr != _originalData.ApartmentAr;
			result = result || entityData.ApartmentEn != _originalData.ApartmentEn;
			result = result || entityData.FloorNo != _originalData.FloorNo;
			result = result || entityData.WingCode != _originalData.WingCode;
			result = result || entityData.AirCondFlg != _originalData.AirCondFlg;
			result = result || entityData.IsActive != _originalData.IsActive;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a AccomApartment Entity with the original data.
		///</summary>
		public AccomApartment GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAccomApartment(
				_originalData.AccomApartmentId,
				_originalData.AccomBuildingId,
				_originalData.ApartmentCode,
				_originalData.ApartmentAr,
				_originalData.ApartmentEn,
				_originalData.FloorNo,
				_originalData.WingCode,
				_originalData.AirCondFlg,
				_originalData.IsActive,
				_originalData.Notes,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (AccomApartment)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AccomApartmentBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AccomApartmentBase)
				return ValueEquals(this, (AccomApartmentBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AccomApartmentBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AccomApartmentId.GetHashCode() ^ 
					this.AccomBuildingId.GetHashCode() ^ 
					this.ApartmentCode.GetHashCode() ^ 
					this.ApartmentAr.GetHashCode() ^ 
					((this.ApartmentEn == null) ? string.Empty : this.ApartmentEn.ToString()).GetHashCode() ^ 
					((this.FloorNo == null) ? string.Empty : this.FloorNo.ToString()).GetHashCode() ^ 
					((this.WingCode == null) ? string.Empty : this.WingCode.ToString()).GetHashCode() ^ 
					((this.AirCondFlg == null) ? string.Empty : this.AirCondFlg.ToString()).GetHashCode() ^ 
					this.IsActive.GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AccomApartmentBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AccomApartmentBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AccomApartmentBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AccomApartmentBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AccomApartmentBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AccomApartmentBase Object1, AccomApartmentBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AccomApartmentId != Object2.AccomApartmentId)
				equal = false;
			if (Object1.AccomBuildingId != Object2.AccomBuildingId)
				equal = false;
			if (Object1.ApartmentCode != Object2.ApartmentCode)
				equal = false;
			if (Object1.ApartmentAr != Object2.ApartmentAr)
				equal = false;
			if ( Object1.ApartmentEn != null && Object2.ApartmentEn != null )
			{
				if (Object1.ApartmentEn != Object2.ApartmentEn)
					equal = false;
			}
			else if (Object1.ApartmentEn == null ^ Object2.ApartmentEn == null )
			{
				equal = false;
			}
			if ( Object1.FloorNo != null && Object2.FloorNo != null )
			{
				if (Object1.FloorNo != Object2.FloorNo)
					equal = false;
			}
			else if (Object1.FloorNo == null ^ Object2.FloorNo == null )
			{
				equal = false;
			}
			if ( Object1.WingCode != null && Object2.WingCode != null )
			{
				if (Object1.WingCode != Object2.WingCode)
					equal = false;
			}
			else if (Object1.WingCode == null ^ Object2.WingCode == null )
			{
				equal = false;
			}
			if ( Object1.AirCondFlg != null && Object2.AirCondFlg != null )
			{
				if (Object1.AirCondFlg != Object2.AirCondFlg)
					equal = false;
			}
			else if (Object1.AirCondFlg == null ^ Object2.AirCondFlg == null )
			{
				equal = false;
			}
			if (Object1.IsActive != Object2.IsActive)
				equal = false;
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AccomApartmentBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AccomApartmentComparer GetComparer()
        {
            return new AccomApartmentComparer();
        }
        */

        // Comparer delegates back to AccomApartment
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AccomApartment rhs, AccomApartmentColumn which)
        {
            switch (which)
            {
            	
            	
            	case AccomApartmentColumn.AccomApartmentId:
            		return this.AccomApartmentId.CompareTo(rhs.AccomApartmentId);
            		
            		                 
            	
            	
            	case AccomApartmentColumn.AccomBuildingId:
            		return this.AccomBuildingId.CompareTo(rhs.AccomBuildingId);
            		
            		                 
            	
            	
            	case AccomApartmentColumn.ApartmentCode:
            		return this.ApartmentCode.CompareTo(rhs.ApartmentCode);
            		
            		                 
            	
            	
            	case AccomApartmentColumn.ApartmentAr:
            		return this.ApartmentAr.CompareTo(rhs.ApartmentAr);
            		
            		                 
            	
            	
            	case AccomApartmentColumn.ApartmentEn:
            		return this.ApartmentEn.CompareTo(rhs.ApartmentEn);
            		
            		                 
            	
            	
            	case AccomApartmentColumn.FloorNo:
            		return this.FloorNo.Value.CompareTo(rhs.FloorNo.Value);
            		
            		                 
            	
            	
            	case AccomApartmentColumn.WingCode:
            		return this.WingCode.CompareTo(rhs.WingCode);
            		
            		                 
            	
            	
            	case AccomApartmentColumn.AirCondFlg:
            		return this.AirCondFlg.Value.CompareTo(rhs.AirCondFlg.Value);
            		
            		                 
            	
            	
            	case AccomApartmentColumn.IsActive:
            		return this.IsActive.CompareTo(rhs.IsActive);
            		
            		                 
            	
            	
            	case AccomApartmentColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case AccomApartmentColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case AccomApartmentColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AccomApartmentKey> Members
		
		// member variable for the EntityId property
		private AccomApartmentKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AccomApartmentKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AccomApartmentKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AccomApartment")
					.Append("|").Append( this.AccomApartmentId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- AccomApartmentId: {0}{12}- AccomBuildingId: {1}{12}- ApartmentCode: {2}{12}- ApartmentAr: {3}{12}- ApartmentEn: {4}{12}- FloorNo: {5}{12}- WingCode: {6}{12}- AirCondFlg: {7}{12}- IsActive: {8}{12}- Notes: {9}{12}- SeUserId: {10}{12}- LastDate: {11}{12}{14}", 
				this.AccomApartmentId,
				this.AccomBuildingId,
				this.ApartmentCode,
				this.ApartmentAr,
				(this.ApartmentEn == null) ? string.Empty : this.ApartmentEn.ToString(),
				(this.FloorNo == null) ? string.Empty : this.FloorNo.ToString(),
				(this.WingCode == null) ? string.Empty : this.WingCode.ToString(),
				(this.AirCondFlg == null) ? string.Empty : this.AirCondFlg.ToString(),
				this.IsActive,
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ACCOM_APARTMENT' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AccomApartmentEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ACCOM_APARTMENT_ID : الشقق
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ACCOM_APARTMENT"</remarks>
		public System.Decimal AccomApartmentId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalAccomApartmentId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ACCOM_BUILDING_ID : المباني
		/// </summary>
		public System.Decimal		  AccomBuildingId = 0.0m;
		
		/// <summary>
		/// APARTMENT_CODE : رقم الشقة
		/// </summary>
		public System.String		  ApartmentCode = string.Empty;
		
		/// <summary>
		/// APARTMENT_AR : اسم الشقة
		/// </summary>
		public System.String		  ApartmentAr = string.Empty;
		
		/// <summary>
		/// APARTMENT_EN : اسم الشقة
		/// </summary>
		public System.String		  ApartmentEn = null;
		
		/// <summary>
		/// FLOOR_NO : رقم الطابق
		/// </summary>
		public System.Int16?		  FloorNo = null;
		
		/// <summary>
		/// WING_CODE : كود الجناح
		/// </summary>
		public System.String		  WingCode = null;
		
		/// <summary>
		/// AIR_COND_FLG : XXXX
		/// </summary>
		public System.Boolean?		  AirCondFlg = null;
		
		/// <summary>
		/// IS_ACTIVE : نشط default=1
		/// </summary>
		public System.Boolean		  IsActive = false;
		
		/// <summary>
		/// NOTES : ملاحظات
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AccomBuilding _accomBuildingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AccomBuilding"/>.
		/// </summary>
		/// <value>The source AccomBuilding for AccomBuildingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AccomBuilding AccomBuildingIdSource
      	{
            get { return this._accomBuildingIdSource; }
            set { this._accomBuildingIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region AccomRoomCollection
		
		private TList<AccomRoom> _accomRoomAccomApartmentId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _accomRoomAccomApartmentId
		/// </summary>
		
		public TList<AccomRoom> AccomRoomCollection
		{
			get
			{
				if (_accomRoomAccomApartmentId == null)
				{
				_accomRoomAccomApartmentId = new TList<AccomRoom>();
				}
	
				return _accomRoomAccomApartmentId;
			}
			set { _accomRoomAccomApartmentId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AccomApartmentEntityData _tmp = new AccomApartmentEntityData();
						
			_tmp.AccomApartmentId = this.AccomApartmentId;
			_tmp.OriginalAccomApartmentId = this.OriginalAccomApartmentId;
			
			_tmp.AccomBuildingId = this.AccomBuildingId;
			_tmp.ApartmentCode = this.ApartmentCode;
			_tmp.ApartmentAr = this.ApartmentAr;
			_tmp.ApartmentEn = this.ApartmentEn;
			_tmp.FloorNo = this.FloorNo;
			_tmp.WingCode = this.WingCode;
			_tmp.AirCondFlg = this.AirCondFlg;
			_tmp.IsActive = this.IsActive;
			_tmp.Notes = this.Notes;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.AccomBuildingIdSource != null)
				_tmp.AccomBuildingIdSource = MakeCopyOf(this.AccomBuildingIdSource) as AccomBuilding;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._accomRoomAccomApartmentId != null)
				_tmp.AccomRoomCollection = (TList<AccomRoom>) MakeCopyOf(this.AccomRoomCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AccomApartmentEntityData _tmp = new AccomApartmentEntityData();
						
			_tmp.AccomApartmentId = this.AccomApartmentId;
			_tmp.OriginalAccomApartmentId = this.OriginalAccomApartmentId;
			
			_tmp.AccomBuildingId = this.AccomBuildingId;
			_tmp.ApartmentCode = this.ApartmentCode;
			_tmp.ApartmentAr = this.ApartmentAr;
			_tmp.ApartmentEn = this.ApartmentEn;
			_tmp.FloorNo = this.FloorNo;
			_tmp.WingCode = this.WingCode;
			_tmp.AirCondFlg = this.AirCondFlg;
			_tmp.IsActive = this.IsActive;
			_tmp.Notes = this.Notes;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.AccomBuildingIdSource != null && existingCopies.Contains(this.AccomBuildingIdSource))
				_tmp.AccomBuildingIdSource = existingCopies[this.AccomBuildingIdSource] as AccomBuilding;
			else
				_tmp.AccomBuildingIdSource = MakeCopyOf(this.AccomBuildingIdSource, existingCopies) as AccomBuilding;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.AccomRoomCollection = (TList<AccomRoom>) MakeCopyOf(this.AccomRoomCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccomApartmentColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AccomApartmentColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccomApartmentColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AccomApartmentColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccomApartmentColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AccomApartmentColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AccomApartmentEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AccomApartmentEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccomApartmentColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AccomApartmentColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AccomApartmentEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AccomApartmentEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AccomApartmentEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AccomApartment"/> object.
	/// </remarks>
	public class AccomApartmentEventArgs : System.EventArgs
	{
		private AccomApartmentColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AccomApartmentEventArgs class.
		///</summary>
		public AccomApartmentEventArgs(AccomApartmentColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AccomApartmentEventArgs class.
		///</summary>
		public AccomApartmentEventArgs(AccomApartmentColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AccomApartmentColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AccomApartmentColumn" />
		public AccomApartmentColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AccomApartment related events.
	///</summary>
	public delegate void AccomApartmentEventHandler(object sender, AccomApartmentEventArgs e);
	
	#region AccomApartmentComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AccomApartmentComparer : System.Collections.Generic.IComparer<AccomApartment>
	{
		AccomApartmentColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AccomApartmentComparer"/> class.
        /// </summary>
		public AccomApartmentComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AccomApartmentComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AccomApartmentComparer(AccomApartmentColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AccomApartment"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AccomApartment"/> to compare.</param>
        /// <param name="b">The second <c>AccomApartment</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AccomApartment a, AccomApartment b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AccomApartment entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AccomApartment a, AccomApartment b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AccomApartmentColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AccomApartmentKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AccomApartment"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AccomApartmentKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AccomApartmentKey class.
		/// </summary>
		public AccomApartmentKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AccomApartmentKey class.
		/// </summary>
		public AccomApartmentKey(AccomApartmentBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AccomApartmentId = entity.AccomApartmentId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AccomApartmentKey class.
		/// </summary>
		public AccomApartmentKey(System.Decimal _accomApartmentId)
		{
			#region Init Properties

			this.AccomApartmentId = _accomApartmentId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AccomApartmentBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AccomApartmentBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AccomApartmentId property
		private System.Decimal _accomApartmentId;
		
		/// <summary>
		/// Gets or sets the AccomApartmentId property.
		/// </summary>
		public System.Decimal AccomApartmentId
		{
			get { return _accomApartmentId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AccomApartmentId = value;
				
				_accomApartmentId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AccomApartmentId = ( values["AccomApartmentId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["AccomApartmentId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AccomApartmentId", AccomApartmentId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AccomApartmentId: {0}{1}",
								AccomApartmentId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AccomApartmentColumn Enum
	
	/// <summary>
	/// Enumerate the AccomApartment columns.
	/// </summary>
	[Serializable]
	public enum AccomApartmentColumn : int
	{
		/// <summary>
		/// AccomApartmentId : الشقق
		/// </summary>
		[EnumTextValue("ACCOM_APARTMENT_ID")]
		[ColumnEnum("ACCOM_APARTMENT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		AccomApartmentId = 1,
		/// <summary>
		/// AccomBuildingId : المباني
		/// </summary>
		[EnumTextValue("ACCOM_BUILDING_ID")]
		[ColumnEnum("ACCOM_BUILDING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AccomBuildingId = 2,
		/// <summary>
		/// ApartmentCode : رقم الشقة
		/// </summary>
		[EnumTextValue("APARTMENT_CODE")]
		[ColumnEnum("APARTMENT_CODE", typeof(System.String), System.Data.DbType.String, false, false, false, 20)]
		ApartmentCode = 3,
		/// <summary>
		/// ApartmentAr : اسم الشقة
		/// </summary>
		[EnumTextValue("APARTMENT_AR")]
		[ColumnEnum("APARTMENT_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		ApartmentAr = 4,
		/// <summary>
		/// ApartmentEn : اسم الشقة
		/// </summary>
		[EnumTextValue("APARTMENT_EN")]
		[ColumnEnum("APARTMENT_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		ApartmentEn = 5,
		/// <summary>
		/// FloorNo : رقم الطابق
		/// </summary>
		[EnumTextValue("FLOOR_NO")]
		[ColumnEnum("FLOOR_NO", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		FloorNo = 6,
		/// <summary>
		/// WingCode : كود الجناح
		/// </summary>
		[EnumTextValue("WING_CODE")]
		[ColumnEnum("WING_CODE", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		WingCode = 7,
		/// <summary>
		/// AirCondFlg : XXXX
		/// </summary>
		[EnumTextValue("AIR_COND_FLG")]
		[ColumnEnum("AIR_COND_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		AirCondFlg = 8,
		/// <summary>
		/// IsActive : نشط default=1
		/// </summary>
		[EnumTextValue("IS_ACTIVE")]
		[ColumnEnum("IS_ACTIVE", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		IsActive = 9,
		/// <summary>
		/// Notes : ملاحظات
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		Notes = 10,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 11,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 12
	}//End enum

	#endregion AccomApartmentColumn Enum

} // end namespace
