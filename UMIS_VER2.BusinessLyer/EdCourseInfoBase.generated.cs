
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdCourseInfo.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_COURSE_INFO' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdCourseInfoBase : EntityBase, IEdCourseInfo, IEntityId<EdCourseInfoKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdCourseInfoEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdCourseInfoEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdCourseInfoEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdCourseInfo> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdCourseInfoEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdCourseInfoEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdCourseInfoBase"/> instance.
		///</summary>
		public EdCourseInfoBase()
		{
			this.entityData = new EdCourseInfoEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdCourseInfoBase"/> instance.
		///</summary>
		///<param name="_edCourseInfoId">extra info  for modular  type</param>
		///<param name="_edCourseId"></param>
		///<param name="_studyTypeFlg">1:horizontal,2:vertical</param>
		///<param name="_edCodeLevelFromId">XX</param>
		///<param name="_edCodeSemesterFromId">مسلسل الفصل الدراسيXX</param>
		///<param name="_edCodeLevelToId">XX</param>
		///<param name="_edCodeSemesterToId">مسلسل الفصل الدراسيXX</param>
		///<param name="_periodTypeFlg">1: weeks, 2:Hours</param>
		///<param name="_crsPeriod"></param>
		///<param name="_contHour"></param>
		///<param name="_nonContHour"></param>
		///<param name="_semesterExamFlg"></param>
		///<param name="_yearExamFlg"></param>
		///<param name="_phaseExamFlg"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public EdCourseInfoBase(System.Decimal _edCourseInfoId, System.Decimal _edCourseId, 
			System.Int32 _studyTypeFlg, System.Decimal? _edCodeLevelFromId, System.Decimal? _edCodeSemesterFromId, 
			System.Decimal? _edCodeLevelToId, System.Decimal? _edCodeSemesterToId, System.Int32? _periodTypeFlg, 
			System.Decimal? _crsPeriod, System.Int32? _contHour, System.Int32? _nonContHour, 
			System.Boolean? _semesterExamFlg, System.Boolean? _yearExamFlg, System.Boolean? _phaseExamFlg, 
			System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			this.entityData = new EdCourseInfoEntityData();
			this.backupData = null;

			this.EdCourseInfoId = _edCourseInfoId;
			this.EdCourseId = _edCourseId;
			this.StudyTypeFlg = _studyTypeFlg;
			this.EdCodeLevelFromId = _edCodeLevelFromId;
			this.EdCodeSemesterFromId = _edCodeSemesterFromId;
			this.EdCodeLevelToId = _edCodeLevelToId;
			this.EdCodeSemesterToId = _edCodeSemesterToId;
			this.PeriodTypeFlg = _periodTypeFlg;
			this.CrsPeriod = _crsPeriod;
			this.ContHour = _contHour;
			this.NonContHour = _nonContHour;
			this.SemesterExamFlg = _semesterExamFlg;
			this.YearExamFlg = _yearExamFlg;
			this.PhaseExamFlg = _phaseExamFlg;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdCourseInfo"/> instance.
		///</summary>
		///<param name="_edCourseInfoId">extra info  for modular  type</param>
		///<param name="_edCourseId"></param>
		///<param name="_studyTypeFlg">1:horizontal,2:vertical</param>
		///<param name="_edCodeLevelFromId">XX</param>
		///<param name="_edCodeSemesterFromId">مسلسل الفصل الدراسيXX</param>
		///<param name="_edCodeLevelToId">XX</param>
		///<param name="_edCodeSemesterToId">مسلسل الفصل الدراسيXX</param>
		///<param name="_periodTypeFlg">1: weeks, 2:Hours</param>
		///<param name="_crsPeriod"></param>
		///<param name="_contHour"></param>
		///<param name="_nonContHour"></param>
		///<param name="_semesterExamFlg"></param>
		///<param name="_yearExamFlg"></param>
		///<param name="_phaseExamFlg"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static EdCourseInfo CreateEdCourseInfo(System.Decimal _edCourseInfoId, System.Decimal _edCourseId, 
			System.Int32 _studyTypeFlg, System.Decimal? _edCodeLevelFromId, System.Decimal? _edCodeSemesterFromId, 
			System.Decimal? _edCodeLevelToId, System.Decimal? _edCodeSemesterToId, System.Int32? _periodTypeFlg, 
			System.Decimal? _crsPeriod, System.Int32? _contHour, System.Int32? _nonContHour, 
			System.Boolean? _semesterExamFlg, System.Boolean? _yearExamFlg, System.Boolean? _phaseExamFlg, 
			System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			EdCourseInfo newEdCourseInfo = new EdCourseInfo();
			newEdCourseInfo.EdCourseInfoId = _edCourseInfoId;
			newEdCourseInfo.EdCourseId = _edCourseId;
			newEdCourseInfo.StudyTypeFlg = _studyTypeFlg;
			newEdCourseInfo.EdCodeLevelFromId = _edCodeLevelFromId;
			newEdCourseInfo.EdCodeSemesterFromId = _edCodeSemesterFromId;
			newEdCourseInfo.EdCodeLevelToId = _edCodeLevelToId;
			newEdCourseInfo.EdCodeSemesterToId = _edCodeSemesterToId;
			newEdCourseInfo.PeriodTypeFlg = _periodTypeFlg;
			newEdCourseInfo.CrsPeriod = _crsPeriod;
			newEdCourseInfo.ContHour = _contHour;
			newEdCourseInfo.NonContHour = _nonContHour;
			newEdCourseInfo.SemesterExamFlg = _semesterExamFlg;
			newEdCourseInfo.YearExamFlg = _yearExamFlg;
			newEdCourseInfo.PhaseExamFlg = _phaseExamFlg;
			newEdCourseInfo.SeUserId = _seUserId;
			newEdCourseInfo.LastDate = _lastDate;
			return newEdCourseInfo;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdCourseInfoId property. 
		///		extra info  for modular  type
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"extra info  for modular  type"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdCourseInfoId
		{
			get
			{
				return this.entityData.EdCourseInfoId; 
			}
			
			set
			{
				if (this.entityData.EdCourseInfoId == value)
					return;
					
				OnColumnChanging(EdCourseInfoColumn.EdCourseInfoId, this.entityData.EdCourseInfoId);
				this.entityData.EdCourseInfoId = value;
				this.EntityId.EdCourseInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseInfoColumn.EdCourseInfoId, this.entityData.EdCourseInfoId);
				OnPropertyChanged("EdCourseInfoId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_COURSE_INFO_ID property.
		///		extra info  for modular  type
		/// </summary>
		/// <remarks>This is the original value of the ED_COURSE_INFO_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdCourseInfoId
		{
			get { return this.entityData.OriginalEdCourseInfoId; }
			set { this.entityData.OriginalEdCourseInfoId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCourseId
		{
			get
			{
				return this.entityData.EdCourseId; 
			}
			
			set
			{
				if (this.entityData.EdCourseId == value)
					return;
					
				OnColumnChanging(EdCourseInfoColumn.EdCourseId, this.entityData.EdCourseId);
				this.entityData.EdCourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseInfoColumn.EdCourseId, this.entityData.EdCourseId);
				OnPropertyChanged("EdCourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StudyTypeFlg property. 
		///		1:horizontal,2:vertical
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"1:horizontal,2:vertical"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 StudyTypeFlg
		{
			get
			{
				return this.entityData.StudyTypeFlg; 
			}
			
			set
			{
				if (this.entityData.StudyTypeFlg == value)
					return;
					
				OnColumnChanging(EdCourseInfoColumn.StudyTypeFlg, this.entityData.StudyTypeFlg);
				this.entityData.StudyTypeFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseInfoColumn.StudyTypeFlg, this.entityData.StudyTypeFlg);
				OnPropertyChanged("StudyTypeFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeLevelFromId property. 
		///		XX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeLevelFromIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeLevelFromId
		{
			get
			{
				return this.entityData.EdCodeLevelFromId; 
			}
			
			set
			{
				if (this.entityData.EdCodeLevelFromId == value)
					return;
					
				OnColumnChanging(EdCourseInfoColumn.EdCodeLevelFromId, this.entityData.EdCodeLevelFromId);
				this.entityData.EdCodeLevelFromId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseInfoColumn.EdCodeLevelFromId, this.entityData.EdCodeLevelFromId);
				OnPropertyChanged("EdCodeLevelFromId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterFromId property. 
		///		مسلسل الفصل الدراسيXX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeSemesterFromIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مسلسل الفصل الدراسيXX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeSemesterFromId
		{
			get
			{
				return this.entityData.EdCodeSemesterFromId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterFromId == value)
					return;
					
				OnColumnChanging(EdCourseInfoColumn.EdCodeSemesterFromId, this.entityData.EdCodeSemesterFromId);
				this.entityData.EdCodeSemesterFromId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseInfoColumn.EdCodeSemesterFromId, this.entityData.EdCodeSemesterFromId);
				OnPropertyChanged("EdCodeSemesterFromId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeLevelToId property. 
		///		XX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeLevelToIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeLevelToId
		{
			get
			{
				return this.entityData.EdCodeLevelToId; 
			}
			
			set
			{
				if (this.entityData.EdCodeLevelToId == value)
					return;
					
				OnColumnChanging(EdCourseInfoColumn.EdCodeLevelToId, this.entityData.EdCodeLevelToId);
				this.entityData.EdCodeLevelToId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseInfoColumn.EdCodeLevelToId, this.entityData.EdCodeLevelToId);
				OnPropertyChanged("EdCodeLevelToId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterToId property. 
		///		مسلسل الفصل الدراسيXX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeSemesterToIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مسلسل الفصل الدراسيXX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeSemesterToId
		{
			get
			{
				return this.entityData.EdCodeSemesterToId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterToId == value)
					return;
					
				OnColumnChanging(EdCourseInfoColumn.EdCodeSemesterToId, this.entityData.EdCodeSemesterToId);
				this.entityData.EdCodeSemesterToId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseInfoColumn.EdCodeSemesterToId, this.entityData.EdCodeSemesterToId);
				OnPropertyChanged("EdCodeSemesterToId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PeriodTypeFlg property. 
		///		1: weeks, 2:Hours
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPeriodTypeFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"1: weeks, 2:Hours"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PeriodTypeFlg
		{
			get
			{
				return this.entityData.PeriodTypeFlg; 
			}
			
			set
			{
				if (this.entityData.PeriodTypeFlg == value)
					return;
					
				OnColumnChanging(EdCourseInfoColumn.PeriodTypeFlg, this.entityData.PeriodTypeFlg);
				this.entityData.PeriodTypeFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseInfoColumn.PeriodTypeFlg, this.entityData.PeriodTypeFlg);
				OnPropertyChanged("PeriodTypeFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CrsPeriod property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCrsPeriodNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CrsPeriod
		{
			get
			{
				return this.entityData.CrsPeriod; 
			}
			
			set
			{
				if (this.entityData.CrsPeriod == value)
					return;
					
				OnColumnChanging(EdCourseInfoColumn.CrsPeriod, this.entityData.CrsPeriod);
				this.entityData.CrsPeriod = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseInfoColumn.CrsPeriod, this.entityData.CrsPeriod);
				OnPropertyChanged("CrsPeriod");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContHour property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsContHourNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ContHour
		{
			get
			{
				return this.entityData.ContHour; 
			}
			
			set
			{
				if (this.entityData.ContHour == value)
					return;
					
				OnColumnChanging(EdCourseInfoColumn.ContHour, this.entityData.ContHour);
				this.entityData.ContHour = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseInfoColumn.ContHour, this.entityData.ContHour);
				OnPropertyChanged("ContHour");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NonContHour property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsNonContHourNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? NonContHour
		{
			get
			{
				return this.entityData.NonContHour; 
			}
			
			set
			{
				if (this.entityData.NonContHour == value)
					return;
					
				OnColumnChanging(EdCourseInfoColumn.NonContHour, this.entityData.NonContHour);
				this.entityData.NonContHour = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseInfoColumn.NonContHour, this.entityData.NonContHour);
				OnPropertyChanged("NonContHour");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SemesterExamFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsSemesterExamFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? SemesterExamFlg
		{
			get
			{
				return this.entityData.SemesterExamFlg; 
			}
			
			set
			{
				if (this.entityData.SemesterExamFlg == value)
					return;
					
				OnColumnChanging(EdCourseInfoColumn.SemesterExamFlg, this.entityData.SemesterExamFlg);
				this.entityData.SemesterExamFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseInfoColumn.SemesterExamFlg, this.entityData.SemesterExamFlg);
				OnPropertyChanged("SemesterExamFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the YearExamFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsYearExamFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? YearExamFlg
		{
			get
			{
				return this.entityData.YearExamFlg; 
			}
			
			set
			{
				if (this.entityData.YearExamFlg == value)
					return;
					
				OnColumnChanging(EdCourseInfoColumn.YearExamFlg, this.entityData.YearExamFlg);
				this.entityData.YearExamFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseInfoColumn.YearExamFlg, this.entityData.YearExamFlg);
				OnPropertyChanged("YearExamFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PhaseExamFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsPhaseExamFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? PhaseExamFlg
		{
			get
			{
				return this.entityData.PhaseExamFlg; 
			}
			
			set
			{
				if (this.entityData.PhaseExamFlg == value)
					return;
					
				OnColumnChanging(EdCourseInfoColumn.PhaseExamFlg, this.entityData.PhaseExamFlg);
				this.entityData.PhaseExamFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseInfoColumn.PhaseExamFlg, this.entityData.PhaseExamFlg);
				OnPropertyChanged("PhaseExamFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(EdCourseInfoColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseInfoColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(EdCourseInfoColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseInfoColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelFromId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeLevel EdCodeLevelFromIdSource
      	{
            get { return entityData.EdCodeLevelFromIdSource; }
            set { entityData.EdCodeLevelFromIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelToId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeLevel EdCodeLevelToIdSource
      	{
            get { return entityData.EdCodeLevelToIdSource; }
            set { entityData.EdCodeLevelToIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterFromId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterFromIdSource
      	{
            get { return entityData.EdCodeSemesterFromIdSource; }
            set { entityData.EdCodeSemesterFromIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterToId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterToIdSource
      	{
            get { return entityData.EdCodeSemesterToIdSource; }
            set { entityData.EdCodeSemesterToIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return entityData.EdCourseIdSource; }
            set { entityData.EdCourseIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_COURSE_INFO"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_COURSE_INFO_ID", "ED_COURSE_ID", "STUDY_TYPE_FLG", "ED_CODE_LEVEL_FROM_ID", "ED_CODE_SEMESTER_FROM_ID", "ED_CODE_LEVEL_TO_ID", "ED_CODE_SEMESTER_TO_ID", "PERIOD_TYPE_FLG", "CRS_PERIOD", "CONT_HOUR", "NON_CONT_HOUR", "SEMESTER_EXAM_FLG", "YEAR_EXAM_FLG", "PHASE_EXAM_FLG", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdCourseInfoEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdCourseInfo) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdCourseInfo>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdCourseInfo);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdCourseInfo Entity 
		///</summary>
		protected virtual EdCourseInfo Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdCourseInfo copy = new EdCourseInfo();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdCourseInfoId = this.EdCourseInfoId;
					copy.OriginalEdCourseInfoId = this.OriginalEdCourseInfoId;
				copy.EdCourseId = this.EdCourseId;
				copy.StudyTypeFlg = this.StudyTypeFlg;
				copy.EdCodeLevelFromId = this.EdCodeLevelFromId;
				copy.EdCodeSemesterFromId = this.EdCodeSemesterFromId;
				copy.EdCodeLevelToId = this.EdCodeLevelToId;
				copy.EdCodeSemesterToId = this.EdCodeSemesterToId;
				copy.PeriodTypeFlg = this.PeriodTypeFlg;
				copy.CrsPeriod = this.CrsPeriod;
				copy.ContHour = this.ContHour;
				copy.NonContHour = this.NonContHour;
				copy.SemesterExamFlg = this.SemesterExamFlg;
				copy.YearExamFlg = this.YearExamFlg;
				copy.PhaseExamFlg = this.PhaseExamFlg;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.EdCodeLevelFromIdSource != null && existingCopies.Contains(this.EdCodeLevelFromIdSource))
				copy.EdCodeLevelFromIdSource = existingCopies[this.EdCodeLevelFromIdSource] as EdCodeLevel;
			else
				copy.EdCodeLevelFromIdSource = MakeCopyOf(this.EdCodeLevelFromIdSource, existingCopies) as EdCodeLevel;
			if (this.EdCodeLevelToIdSource != null && existingCopies.Contains(this.EdCodeLevelToIdSource))
				copy.EdCodeLevelToIdSource = existingCopies[this.EdCodeLevelToIdSource] as EdCodeLevel;
			else
				copy.EdCodeLevelToIdSource = MakeCopyOf(this.EdCodeLevelToIdSource, existingCopies) as EdCodeLevel;
			if (this.EdCodeSemesterFromIdSource != null && existingCopies.Contains(this.EdCodeSemesterFromIdSource))
				copy.EdCodeSemesterFromIdSource = existingCopies[this.EdCodeSemesterFromIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterFromIdSource = MakeCopyOf(this.EdCodeSemesterFromIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCodeSemesterToIdSource != null && existingCopies.Contains(this.EdCodeSemesterToIdSource))
				copy.EdCodeSemesterToIdSource = existingCopies[this.EdCodeSemesterToIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterToIdSource = MakeCopyOf(this.EdCodeSemesterToIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				copy.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				copy.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdCourseInfo Entity 
		///</summary>
		public virtual EdCourseInfo Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdCourseInfo Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdCourseInfo DeepCopy()
		{
			return EntityHelper.Clone<EdCourseInfo>(this as EdCourseInfo);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdCourseInfoEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdCourseInfoEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdCourseInfoEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdCourseInfoColumn column)
		{
			switch(column)
			{
					case EdCourseInfoColumn.EdCourseInfoId:
					return entityData.EdCourseInfoId != _originalData.EdCourseInfoId;
					case EdCourseInfoColumn.EdCourseId:
					return entityData.EdCourseId != _originalData.EdCourseId;
					case EdCourseInfoColumn.StudyTypeFlg:
					return entityData.StudyTypeFlg != _originalData.StudyTypeFlg;
					case EdCourseInfoColumn.EdCodeLevelFromId:
					return entityData.EdCodeLevelFromId != _originalData.EdCodeLevelFromId;
					case EdCourseInfoColumn.EdCodeSemesterFromId:
					return entityData.EdCodeSemesterFromId != _originalData.EdCodeSemesterFromId;
					case EdCourseInfoColumn.EdCodeLevelToId:
					return entityData.EdCodeLevelToId != _originalData.EdCodeLevelToId;
					case EdCourseInfoColumn.EdCodeSemesterToId:
					return entityData.EdCodeSemesterToId != _originalData.EdCodeSemesterToId;
					case EdCourseInfoColumn.PeriodTypeFlg:
					return entityData.PeriodTypeFlg != _originalData.PeriodTypeFlg;
					case EdCourseInfoColumn.CrsPeriod:
					return entityData.CrsPeriod != _originalData.CrsPeriod;
					case EdCourseInfoColumn.ContHour:
					return entityData.ContHour != _originalData.ContHour;
					case EdCourseInfoColumn.NonContHour:
					return entityData.NonContHour != _originalData.NonContHour;
					case EdCourseInfoColumn.SemesterExamFlg:
					return entityData.SemesterExamFlg != _originalData.SemesterExamFlg;
					case EdCourseInfoColumn.YearExamFlg:
					return entityData.YearExamFlg != _originalData.YearExamFlg;
					case EdCourseInfoColumn.PhaseExamFlg:
					return entityData.PhaseExamFlg != _originalData.PhaseExamFlg;
					case EdCourseInfoColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case EdCourseInfoColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdCourseInfoColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdCourseInfoId != _originalData.EdCourseInfoId;
			result = result || entityData.EdCourseId != _originalData.EdCourseId;
			result = result || entityData.StudyTypeFlg != _originalData.StudyTypeFlg;
			result = result || entityData.EdCodeLevelFromId != _originalData.EdCodeLevelFromId;
			result = result || entityData.EdCodeSemesterFromId != _originalData.EdCodeSemesterFromId;
			result = result || entityData.EdCodeLevelToId != _originalData.EdCodeLevelToId;
			result = result || entityData.EdCodeSemesterToId != _originalData.EdCodeSemesterToId;
			result = result || entityData.PeriodTypeFlg != _originalData.PeriodTypeFlg;
			result = result || entityData.CrsPeriod != _originalData.CrsPeriod;
			result = result || entityData.ContHour != _originalData.ContHour;
			result = result || entityData.NonContHour != _originalData.NonContHour;
			result = result || entityData.SemesterExamFlg != _originalData.SemesterExamFlg;
			result = result || entityData.YearExamFlg != _originalData.YearExamFlg;
			result = result || entityData.PhaseExamFlg != _originalData.PhaseExamFlg;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a EdCourseInfo Entity with the original data.
		///</summary>
		public EdCourseInfo GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdCourseInfo(
				_originalData.EdCourseInfoId,
				_originalData.EdCourseId,
				_originalData.StudyTypeFlg,
				_originalData.EdCodeLevelFromId,
				_originalData.EdCodeSemesterFromId,
				_originalData.EdCodeLevelToId,
				_originalData.EdCodeSemesterToId,
				_originalData.PeriodTypeFlg,
				_originalData.CrsPeriod,
				_originalData.ContHour,
				_originalData.NonContHour,
				_originalData.SemesterExamFlg,
				_originalData.YearExamFlg,
				_originalData.PhaseExamFlg,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (EdCourseInfo)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdCourseInfoBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdCourseInfoBase)
				return ValueEquals(this, (EdCourseInfoBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdCourseInfoBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdCourseInfoId.GetHashCode() ^ 
					this.EdCourseId.GetHashCode() ^ 
					this.StudyTypeFlg.GetHashCode() ^ 
					((this.EdCodeLevelFromId == null) ? string.Empty : this.EdCodeLevelFromId.ToString()).GetHashCode() ^ 
					((this.EdCodeSemesterFromId == null) ? string.Empty : this.EdCodeSemesterFromId.ToString()).GetHashCode() ^ 
					((this.EdCodeLevelToId == null) ? string.Empty : this.EdCodeLevelToId.ToString()).GetHashCode() ^ 
					((this.EdCodeSemesterToId == null) ? string.Empty : this.EdCodeSemesterToId.ToString()).GetHashCode() ^ 
					((this.PeriodTypeFlg == null) ? string.Empty : this.PeriodTypeFlg.ToString()).GetHashCode() ^ 
					((this.CrsPeriod == null) ? string.Empty : this.CrsPeriod.ToString()).GetHashCode() ^ 
					((this.ContHour == null) ? string.Empty : this.ContHour.ToString()).GetHashCode() ^ 
					((this.NonContHour == null) ? string.Empty : this.NonContHour.ToString()).GetHashCode() ^ 
					((this.SemesterExamFlg == null) ? string.Empty : this.SemesterExamFlg.ToString()).GetHashCode() ^ 
					((this.YearExamFlg == null) ? string.Empty : this.YearExamFlg.ToString()).GetHashCode() ^ 
					((this.PhaseExamFlg == null) ? string.Empty : this.PhaseExamFlg.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdCourseInfoBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdCourseInfoBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdCourseInfoBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdCourseInfoBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdCourseInfoBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdCourseInfoBase Object1, EdCourseInfoBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdCourseInfoId != Object2.EdCourseInfoId)
				equal = false;
			if (Object1.EdCourseId != Object2.EdCourseId)
				equal = false;
			if (Object1.StudyTypeFlg != Object2.StudyTypeFlg)
				equal = false;
			if ( Object1.EdCodeLevelFromId != null && Object2.EdCodeLevelFromId != null )
			{
				if (Object1.EdCodeLevelFromId != Object2.EdCodeLevelFromId)
					equal = false;
			}
			else if (Object1.EdCodeLevelFromId == null ^ Object2.EdCodeLevelFromId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeSemesterFromId != null && Object2.EdCodeSemesterFromId != null )
			{
				if (Object1.EdCodeSemesterFromId != Object2.EdCodeSemesterFromId)
					equal = false;
			}
			else if (Object1.EdCodeSemesterFromId == null ^ Object2.EdCodeSemesterFromId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeLevelToId != null && Object2.EdCodeLevelToId != null )
			{
				if (Object1.EdCodeLevelToId != Object2.EdCodeLevelToId)
					equal = false;
			}
			else if (Object1.EdCodeLevelToId == null ^ Object2.EdCodeLevelToId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeSemesterToId != null && Object2.EdCodeSemesterToId != null )
			{
				if (Object1.EdCodeSemesterToId != Object2.EdCodeSemesterToId)
					equal = false;
			}
			else if (Object1.EdCodeSemesterToId == null ^ Object2.EdCodeSemesterToId == null )
			{
				equal = false;
			}
			if ( Object1.PeriodTypeFlg != null && Object2.PeriodTypeFlg != null )
			{
				if (Object1.PeriodTypeFlg != Object2.PeriodTypeFlg)
					equal = false;
			}
			else if (Object1.PeriodTypeFlg == null ^ Object2.PeriodTypeFlg == null )
			{
				equal = false;
			}
			if ( Object1.CrsPeriod != null && Object2.CrsPeriod != null )
			{
				if (Object1.CrsPeriod != Object2.CrsPeriod)
					equal = false;
			}
			else if (Object1.CrsPeriod == null ^ Object2.CrsPeriod == null )
			{
				equal = false;
			}
			if ( Object1.ContHour != null && Object2.ContHour != null )
			{
				if (Object1.ContHour != Object2.ContHour)
					equal = false;
			}
			else if (Object1.ContHour == null ^ Object2.ContHour == null )
			{
				equal = false;
			}
			if ( Object1.NonContHour != null && Object2.NonContHour != null )
			{
				if (Object1.NonContHour != Object2.NonContHour)
					equal = false;
			}
			else if (Object1.NonContHour == null ^ Object2.NonContHour == null )
			{
				equal = false;
			}
			if ( Object1.SemesterExamFlg != null && Object2.SemesterExamFlg != null )
			{
				if (Object1.SemesterExamFlg != Object2.SemesterExamFlg)
					equal = false;
			}
			else if (Object1.SemesterExamFlg == null ^ Object2.SemesterExamFlg == null )
			{
				equal = false;
			}
			if ( Object1.YearExamFlg != null && Object2.YearExamFlg != null )
			{
				if (Object1.YearExamFlg != Object2.YearExamFlg)
					equal = false;
			}
			else if (Object1.YearExamFlg == null ^ Object2.YearExamFlg == null )
			{
				equal = false;
			}
			if ( Object1.PhaseExamFlg != null && Object2.PhaseExamFlg != null )
			{
				if (Object1.PhaseExamFlg != Object2.PhaseExamFlg)
					equal = false;
			}
			else if (Object1.PhaseExamFlg == null ^ Object2.PhaseExamFlg == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdCourseInfoBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdCourseInfoComparer GetComparer()
        {
            return new EdCourseInfoComparer();
        }
        */

        // Comparer delegates back to EdCourseInfo
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdCourseInfo rhs, EdCourseInfoColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdCourseInfoColumn.EdCourseInfoId:
            		return this.EdCourseInfoId.CompareTo(rhs.EdCourseInfoId);
            		
            		                 
            	
            	
            	case EdCourseInfoColumn.EdCourseId:
            		return this.EdCourseId.CompareTo(rhs.EdCourseId);
            		
            		                 
            	
            	
            	case EdCourseInfoColumn.StudyTypeFlg:
            		return this.StudyTypeFlg.CompareTo(rhs.StudyTypeFlg);
            		
            		                 
            	
            	
            	case EdCourseInfoColumn.EdCodeLevelFromId:
            		return this.EdCodeLevelFromId.Value.CompareTo(rhs.EdCodeLevelFromId.Value);
            		
            		                 
            	
            	
            	case EdCourseInfoColumn.EdCodeSemesterFromId:
            		return this.EdCodeSemesterFromId.Value.CompareTo(rhs.EdCodeSemesterFromId.Value);
            		
            		                 
            	
            	
            	case EdCourseInfoColumn.EdCodeLevelToId:
            		return this.EdCodeLevelToId.Value.CompareTo(rhs.EdCodeLevelToId.Value);
            		
            		                 
            	
            	
            	case EdCourseInfoColumn.EdCodeSemesterToId:
            		return this.EdCodeSemesterToId.Value.CompareTo(rhs.EdCodeSemesterToId.Value);
            		
            		                 
            	
            	
            	case EdCourseInfoColumn.PeriodTypeFlg:
            		return this.PeriodTypeFlg.Value.CompareTo(rhs.PeriodTypeFlg.Value);
            		
            		                 
            	
            	
            	case EdCourseInfoColumn.CrsPeriod:
            		return this.CrsPeriod.Value.CompareTo(rhs.CrsPeriod.Value);
            		
            		                 
            	
            	
            	case EdCourseInfoColumn.ContHour:
            		return this.ContHour.Value.CompareTo(rhs.ContHour.Value);
            		
            		                 
            	
            	
            	case EdCourseInfoColumn.NonContHour:
            		return this.NonContHour.Value.CompareTo(rhs.NonContHour.Value);
            		
            		                 
            	
            	
            	case EdCourseInfoColumn.SemesterExamFlg:
            		return this.SemesterExamFlg.Value.CompareTo(rhs.SemesterExamFlg.Value);
            		
            		                 
            	
            	
            	case EdCourseInfoColumn.YearExamFlg:
            		return this.YearExamFlg.Value.CompareTo(rhs.YearExamFlg.Value);
            		
            		                 
            	
            	
            	case EdCourseInfoColumn.PhaseExamFlg:
            		return this.PhaseExamFlg.Value.CompareTo(rhs.PhaseExamFlg.Value);
            		
            		                 
            	
            	
            	case EdCourseInfoColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case EdCourseInfoColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdCourseInfoKey> Members
		
		// member variable for the EntityId property
		private EdCourseInfoKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdCourseInfoKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdCourseInfoKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdCourseInfo")
					.Append("|").Append( this.EdCourseInfoId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{17}{16}- EdCourseInfoId: {0}{16}- EdCourseId: {1}{16}- StudyTypeFlg: {2}{16}- EdCodeLevelFromId: {3}{16}- EdCodeSemesterFromId: {4}{16}- EdCodeLevelToId: {5}{16}- EdCodeSemesterToId: {6}{16}- PeriodTypeFlg: {7}{16}- CrsPeriod: {8}{16}- ContHour: {9}{16}- NonContHour: {10}{16}- SemesterExamFlg: {11}{16}- YearExamFlg: {12}{16}- PhaseExamFlg: {13}{16}- SeUserId: {14}{16}- LastDate: {15}{16}{18}", 
				this.EdCourseInfoId,
				this.EdCourseId,
				this.StudyTypeFlg,
				(this.EdCodeLevelFromId == null) ? string.Empty : this.EdCodeLevelFromId.ToString(),
				(this.EdCodeSemesterFromId == null) ? string.Empty : this.EdCodeSemesterFromId.ToString(),
				(this.EdCodeLevelToId == null) ? string.Empty : this.EdCodeLevelToId.ToString(),
				(this.EdCodeSemesterToId == null) ? string.Empty : this.EdCodeSemesterToId.ToString(),
				(this.PeriodTypeFlg == null) ? string.Empty : this.PeriodTypeFlg.ToString(),
				(this.CrsPeriod == null) ? string.Empty : this.CrsPeriod.ToString(),
				(this.ContHour == null) ? string.Empty : this.ContHour.ToString(),
				(this.NonContHour == null) ? string.Empty : this.NonContHour.ToString(),
				(this.SemesterExamFlg == null) ? string.Empty : this.SemesterExamFlg.ToString(),
				(this.YearExamFlg == null) ? string.Empty : this.YearExamFlg.ToString(),
				(this.PhaseExamFlg == null) ? string.Empty : this.PhaseExamFlg.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_COURSE_INFO' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdCourseInfoEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_COURSE_INFO_ID : extra info  for modular  type
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_COURSE_INFO"</remarks>
		public System.Decimal EdCourseInfoId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdCourseInfoId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_COURSE_ID : 
		/// </summary>
		public System.Decimal		  EdCourseId = 0.0m;
		
		/// <summary>
		/// STUDY_TYPE_FLG : 1:horizontal,2:vertical
		/// </summary>
		public System.Int32		  StudyTypeFlg = (int)0;
		
		/// <summary>
		/// ED_CODE_LEVEL_FROM_ID : XX
		/// </summary>
		public System.Decimal?		  EdCodeLevelFromId = null;
		
		/// <summary>
		/// ED_CODE_SEMESTER_FROM_ID : مسلسل الفصل الدراسيXX
		/// </summary>
		public System.Decimal?		  EdCodeSemesterFromId = null;
		
		/// <summary>
		/// ED_CODE_LEVEL_TO_ID : XX
		/// </summary>
		public System.Decimal?		  EdCodeLevelToId = null;
		
		/// <summary>
		/// ED_CODE_SEMESTER_TO_ID : مسلسل الفصل الدراسيXX
		/// </summary>
		public System.Decimal?		  EdCodeSemesterToId = null;
		
		/// <summary>
		/// PERIOD_TYPE_FLG : 1: weeks, 2:Hours
		/// </summary>
		public System.Int32?		  PeriodTypeFlg = null;
		
		/// <summary>
		/// CRS_PERIOD : 
		/// </summary>
		public System.Decimal?		  CrsPeriod = null;
		
		/// <summary>
		/// CONT_HOUR : 
		/// </summary>
		public System.Int32?		  ContHour = null;
		
		/// <summary>
		/// NON_CONT_HOUR : 
		/// </summary>
		public System.Int32?		  NonContHour = null;
		
		/// <summary>
		/// SEMESTER_EXAM_FLG : 
		/// </summary>
		public System.Boolean?		  SemesterExamFlg = null;
		
		/// <summary>
		/// YEAR_EXAM_FLG : 
		/// </summary>
		public System.Boolean?		  YearExamFlg = null;
		
		/// <summary>
		/// PHASE_EXAM_FLG : 
		/// </summary>
		public System.Boolean?		  PhaseExamFlg = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdCodeLevel _edCodeLevelFromIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelFromId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeLevel EdCodeLevelFromIdSource
      	{
            get { return this._edCodeLevelFromIdSource; }
            set { this._edCodeLevelFromIdSource = value; }
      	}
		private EdCodeLevel _edCodeLevelToIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelToId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeLevel EdCodeLevelToIdSource
      	{
            get { return this._edCodeLevelToIdSource; }
            set { this._edCodeLevelToIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterFromIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterFromId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterFromIdSource
      	{
            get { return this._edCodeSemesterFromIdSource; }
            set { this._edCodeSemesterFromIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterToIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterToId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterToIdSource
      	{
            get { return this._edCodeSemesterToIdSource; }
            set { this._edCodeSemesterToIdSource = value; }
      	}
		private EdCourse _edCourseIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return this._edCourseIdSource; }
            set { this._edCourseIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdCourseInfoEntityData _tmp = new EdCourseInfoEntityData();
						
			_tmp.EdCourseInfoId = this.EdCourseInfoId;
			_tmp.OriginalEdCourseInfoId = this.OriginalEdCourseInfoId;
			
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.StudyTypeFlg = this.StudyTypeFlg;
			_tmp.EdCodeLevelFromId = this.EdCodeLevelFromId;
			_tmp.EdCodeSemesterFromId = this.EdCodeSemesterFromId;
			_tmp.EdCodeLevelToId = this.EdCodeLevelToId;
			_tmp.EdCodeSemesterToId = this.EdCodeSemesterToId;
			_tmp.PeriodTypeFlg = this.PeriodTypeFlg;
			_tmp.CrsPeriod = this.CrsPeriod;
			_tmp.ContHour = this.ContHour;
			_tmp.NonContHour = this.NonContHour;
			_tmp.SemesterExamFlg = this.SemesterExamFlg;
			_tmp.YearExamFlg = this.YearExamFlg;
			_tmp.PhaseExamFlg = this.PhaseExamFlg;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdCodeLevelFromIdSource != null)
				_tmp.EdCodeLevelFromIdSource = MakeCopyOf(this.EdCodeLevelFromIdSource) as EdCodeLevel;
			if (this.EdCodeLevelToIdSource != null)
				_tmp.EdCodeLevelToIdSource = MakeCopyOf(this.EdCodeLevelToIdSource) as EdCodeLevel;
			if (this.EdCodeSemesterFromIdSource != null)
				_tmp.EdCodeSemesterFromIdSource = MakeCopyOf(this.EdCodeSemesterFromIdSource) as EdCodeSemester;
			if (this.EdCodeSemesterToIdSource != null)
				_tmp.EdCodeSemesterToIdSource = MakeCopyOf(this.EdCodeSemesterToIdSource) as EdCodeSemester;
			if (this.EdCourseIdSource != null)
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource) as EdCourse;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdCourseInfoEntityData _tmp = new EdCourseInfoEntityData();
						
			_tmp.EdCourseInfoId = this.EdCourseInfoId;
			_tmp.OriginalEdCourseInfoId = this.OriginalEdCourseInfoId;
			
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.StudyTypeFlg = this.StudyTypeFlg;
			_tmp.EdCodeLevelFromId = this.EdCodeLevelFromId;
			_tmp.EdCodeSemesterFromId = this.EdCodeSemesterFromId;
			_tmp.EdCodeLevelToId = this.EdCodeLevelToId;
			_tmp.EdCodeSemesterToId = this.EdCodeSemesterToId;
			_tmp.PeriodTypeFlg = this.PeriodTypeFlg;
			_tmp.CrsPeriod = this.CrsPeriod;
			_tmp.ContHour = this.ContHour;
			_tmp.NonContHour = this.NonContHour;
			_tmp.SemesterExamFlg = this.SemesterExamFlg;
			_tmp.YearExamFlg = this.YearExamFlg;
			_tmp.PhaseExamFlg = this.PhaseExamFlg;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdCodeLevelFromIdSource != null && existingCopies.Contains(this.EdCodeLevelFromIdSource))
				_tmp.EdCodeLevelFromIdSource = existingCopies[this.EdCodeLevelFromIdSource] as EdCodeLevel;
			else
				_tmp.EdCodeLevelFromIdSource = MakeCopyOf(this.EdCodeLevelFromIdSource, existingCopies) as EdCodeLevel;
			if (this.EdCodeLevelToIdSource != null && existingCopies.Contains(this.EdCodeLevelToIdSource))
				_tmp.EdCodeLevelToIdSource = existingCopies[this.EdCodeLevelToIdSource] as EdCodeLevel;
			else
				_tmp.EdCodeLevelToIdSource = MakeCopyOf(this.EdCodeLevelToIdSource, existingCopies) as EdCodeLevel;
			if (this.EdCodeSemesterFromIdSource != null && existingCopies.Contains(this.EdCodeSemesterFromIdSource))
				_tmp.EdCodeSemesterFromIdSource = existingCopies[this.EdCodeSemesterFromIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterFromIdSource = MakeCopyOf(this.EdCodeSemesterFromIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCodeSemesterToIdSource != null && existingCopies.Contains(this.EdCodeSemesterToIdSource))
				_tmp.EdCodeSemesterToIdSource = existingCopies[this.EdCodeSemesterToIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterToIdSource = MakeCopyOf(this.EdCodeSemesterToIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				_tmp.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCourseInfoColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdCourseInfoColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCourseInfoColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdCourseInfoColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCourseInfoColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdCourseInfoColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdCourseInfoEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdCourseInfoEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCourseInfoColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdCourseInfoColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdCourseInfoEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdCourseInfoEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdCourseInfoEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdCourseInfo"/> object.
	/// </remarks>
	public class EdCourseInfoEventArgs : System.EventArgs
	{
		private EdCourseInfoColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdCourseInfoEventArgs class.
		///</summary>
		public EdCourseInfoEventArgs(EdCourseInfoColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdCourseInfoEventArgs class.
		///</summary>
		public EdCourseInfoEventArgs(EdCourseInfoColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdCourseInfoColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdCourseInfoColumn" />
		public EdCourseInfoColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdCourseInfo related events.
	///</summary>
	public delegate void EdCourseInfoEventHandler(object sender, EdCourseInfoEventArgs e);
	
	#region EdCourseInfoComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdCourseInfoComparer : System.Collections.Generic.IComparer<EdCourseInfo>
	{
		EdCourseInfoColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdCourseInfoComparer"/> class.
        /// </summary>
		public EdCourseInfoComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdCourseInfoComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdCourseInfoComparer(EdCourseInfoColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdCourseInfo"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdCourseInfo"/> to compare.</param>
        /// <param name="b">The second <c>EdCourseInfo</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdCourseInfo a, EdCourseInfo b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdCourseInfo entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdCourseInfo a, EdCourseInfo b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdCourseInfoColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdCourseInfoKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdCourseInfo"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdCourseInfoKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdCourseInfoKey class.
		/// </summary>
		public EdCourseInfoKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdCourseInfoKey class.
		/// </summary>
		public EdCourseInfoKey(EdCourseInfoBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdCourseInfoId = entity.EdCourseInfoId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdCourseInfoKey class.
		/// </summary>
		public EdCourseInfoKey(System.Decimal _edCourseInfoId)
		{
			#region Init Properties

			this.EdCourseInfoId = _edCourseInfoId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdCourseInfoBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdCourseInfoBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdCourseInfoId property
		private System.Decimal _edCourseInfoId;
		
		/// <summary>
		/// Gets or sets the EdCourseInfoId property.
		/// </summary>
		public System.Decimal EdCourseInfoId
		{
			get { return _edCourseInfoId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdCourseInfoId = value;
				
				_edCourseInfoId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdCourseInfoId = ( values["EdCourseInfoId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdCourseInfoId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdCourseInfoId", EdCourseInfoId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdCourseInfoId: {0}{1}",
								EdCourseInfoId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdCourseInfoColumn Enum
	
	/// <summary>
	/// Enumerate the EdCourseInfo columns.
	/// </summary>
	[Serializable]
	public enum EdCourseInfoColumn : int
	{
		/// <summary>
		/// EdCourseInfoId : extra info  for modular  type
		/// </summary>
		[EnumTextValue("ED_COURSE_INFO_ID")]
		[ColumnEnum("ED_COURSE_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdCourseInfoId = 1,
		/// <summary>
		/// EdCourseId : 
		/// </summary>
		[EnumTextValue("ED_COURSE_ID")]
		[ColumnEnum("ED_COURSE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCourseId = 2,
		/// <summary>
		/// StudyTypeFlg : 1:horizontal,2:vertical
		/// </summary>
		[EnumTextValue("STUDY_TYPE_FLG")]
		[ColumnEnum("STUDY_TYPE_FLG", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		StudyTypeFlg = 3,
		/// <summary>
		/// EdCodeLevelFromId : XX
		/// </summary>
		[EnumTextValue("ED_CODE_LEVEL_FROM_ID")]
		[ColumnEnum("ED_CODE_LEVEL_FROM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeLevelFromId = 4,
		/// <summary>
		/// EdCodeSemesterFromId : مسلسل الفصل الدراسيXX
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_FROM_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_FROM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeSemesterFromId = 5,
		/// <summary>
		/// EdCodeLevelToId : XX
		/// </summary>
		[EnumTextValue("ED_CODE_LEVEL_TO_ID")]
		[ColumnEnum("ED_CODE_LEVEL_TO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeLevelToId = 6,
		/// <summary>
		/// EdCodeSemesterToId : مسلسل الفصل الدراسيXX
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_TO_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_TO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeSemesterToId = 7,
		/// <summary>
		/// PeriodTypeFlg : 1: weeks, 2:Hours
		/// </summary>
		[EnumTextValue("PERIOD_TYPE_FLG")]
		[ColumnEnum("PERIOD_TYPE_FLG", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PeriodTypeFlg = 8,
		/// <summary>
		/// CrsPeriod : 
		/// </summary>
		[EnumTextValue("CRS_PERIOD")]
		[ColumnEnum("CRS_PERIOD", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CrsPeriod = 9,
		/// <summary>
		/// ContHour : 
		/// </summary>
		[EnumTextValue("CONT_HOUR")]
		[ColumnEnum("CONT_HOUR", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ContHour = 10,
		/// <summary>
		/// NonContHour : 
		/// </summary>
		[EnumTextValue("NON_CONT_HOUR")]
		[ColumnEnum("NON_CONT_HOUR", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		NonContHour = 11,
		/// <summary>
		/// SemesterExamFlg : 
		/// </summary>
		[EnumTextValue("SEMESTER_EXAM_FLG")]
		[ColumnEnum("SEMESTER_EXAM_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		SemesterExamFlg = 12,
		/// <summary>
		/// YearExamFlg : 
		/// </summary>
		[EnumTextValue("YEAR_EXAM_FLG")]
		[ColumnEnum("YEAR_EXAM_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		YearExamFlg = 13,
		/// <summary>
		/// PhaseExamFlg : 
		/// </summary>
		[EnumTextValue("PHASE_EXAM_FLG")]
		[ColumnEnum("PHASE_EXAM_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		PhaseExamFlg = 14,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 15,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 16
	}//End enum

	#endregion EdCourseInfoColumn Enum

} // end namespace
