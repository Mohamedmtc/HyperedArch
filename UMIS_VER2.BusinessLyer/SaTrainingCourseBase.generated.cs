
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SaTrainingCourse.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SA_TRAINING_COURSE' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SaTrainingCourseBase : EntityBase, ISaTrainingCourse, IEntityId<SaTrainingCourseKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SaTrainingCourseEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SaTrainingCourseEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SaTrainingCourseEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SaTrainingCourse> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaTrainingCourseEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaTrainingCourseEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SaTrainingCourseBase"/> instance.
		///</summary>
		public SaTrainingCourseBase()
		{
			this.entityData = new SaTrainingCourseEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SaTrainingCourseBase"/> instance.
		///</summary>
		///<param name="_saTrainingCourseId"></param>
		///<param name="_startDate"></param>
		///<param name="_endDate"></param>
		///<param name="_isOrgUni"></param>
		///<param name="_courseCost"></param>
		///<param name="_courseHrs"></param>
		///<param name="_uniParticipationAmt"></param>
		///<param name="_saCodeTrainingFlgId"></param>
		///<param name="_trainerName"></param>
		///<param name="_gsCodeCurrencyId"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_saCodeCourseId"></param>
		///<param name="_saCodeCourseScoreId"></param>
		///<param name="_gsCountryNodeId"></param>
		///<param name="_asNodeId"></param>
		///<param name="_saCodeTrainingOrgId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_trainingPlace"></param>
		public SaTrainingCourseBase(System.Decimal _saTrainingCourseId, System.DateTime _startDate, 
			System.DateTime _endDate, System.Decimal _isOrgUni, System.Decimal? _courseCost, 
			System.Decimal? _courseHrs, System.Decimal? _uniParticipationAmt, System.Decimal _saCodeTrainingFlgId, 
			System.String _trainerName, System.Decimal? _gsCodeCurrencyId, System.Decimal _saStfMemberId, 
			System.Decimal _saCodeCourseId, System.Decimal _saCodeCourseScoreId, System.Decimal _gsCountryNodeId, 
			System.Decimal? _asNodeId, System.Decimal? _saCodeTrainingOrgId, System.Decimal _asFacultyInfoId, 
			System.String _trainingPlace)
		{
			this.entityData = new SaTrainingCourseEntityData();
			this.backupData = null;

			this.SaTrainingCourseId = _saTrainingCourseId;
			this.StartDate = _startDate;
			this.EndDate = _endDate;
			this.IsOrgUni = _isOrgUni;
			this.CourseCost = _courseCost;
			this.CourseHrs = _courseHrs;
			this.UniParticipationAmt = _uniParticipationAmt;
			this.SaCodeTrainingFlgId = _saCodeTrainingFlgId;
			this.TrainerName = _trainerName;
			this.GsCodeCurrencyId = _gsCodeCurrencyId;
			this.SaStfMemberId = _saStfMemberId;
			this.SaCodeCourseId = _saCodeCourseId;
			this.SaCodeCourseScoreId = _saCodeCourseScoreId;
			this.GsCountryNodeId = _gsCountryNodeId;
			this.AsNodeId = _asNodeId;
			this.SaCodeTrainingOrgId = _saCodeTrainingOrgId;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.TrainingPlace = _trainingPlace;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SaTrainingCourse"/> instance.
		///</summary>
		///<param name="_saTrainingCourseId"></param>
		///<param name="_startDate"></param>
		///<param name="_endDate"></param>
		///<param name="_isOrgUni"></param>
		///<param name="_courseCost"></param>
		///<param name="_courseHrs"></param>
		///<param name="_uniParticipationAmt"></param>
		///<param name="_saCodeTrainingFlgId"></param>
		///<param name="_trainerName"></param>
		///<param name="_gsCodeCurrencyId"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_saCodeCourseId"></param>
		///<param name="_saCodeCourseScoreId"></param>
		///<param name="_gsCountryNodeId"></param>
		///<param name="_asNodeId"></param>
		///<param name="_saCodeTrainingOrgId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_trainingPlace"></param>
		public static SaTrainingCourse CreateSaTrainingCourse(System.Decimal _saTrainingCourseId, System.DateTime _startDate, 
			System.DateTime _endDate, System.Decimal _isOrgUni, System.Decimal? _courseCost, 
			System.Decimal? _courseHrs, System.Decimal? _uniParticipationAmt, System.Decimal _saCodeTrainingFlgId, 
			System.String _trainerName, System.Decimal? _gsCodeCurrencyId, System.Decimal _saStfMemberId, 
			System.Decimal _saCodeCourseId, System.Decimal _saCodeCourseScoreId, System.Decimal _gsCountryNodeId, 
			System.Decimal? _asNodeId, System.Decimal? _saCodeTrainingOrgId, System.Decimal _asFacultyInfoId, 
			System.String _trainingPlace)
		{
			SaTrainingCourse newSaTrainingCourse = new SaTrainingCourse();
			newSaTrainingCourse.SaTrainingCourseId = _saTrainingCourseId;
			newSaTrainingCourse.StartDate = _startDate;
			newSaTrainingCourse.EndDate = _endDate;
			newSaTrainingCourse.IsOrgUni = _isOrgUni;
			newSaTrainingCourse.CourseCost = _courseCost;
			newSaTrainingCourse.CourseHrs = _courseHrs;
			newSaTrainingCourse.UniParticipationAmt = _uniParticipationAmt;
			newSaTrainingCourse.SaCodeTrainingFlgId = _saCodeTrainingFlgId;
			newSaTrainingCourse.TrainerName = _trainerName;
			newSaTrainingCourse.GsCodeCurrencyId = _gsCodeCurrencyId;
			newSaTrainingCourse.SaStfMemberId = _saStfMemberId;
			newSaTrainingCourse.SaCodeCourseId = _saCodeCourseId;
			newSaTrainingCourse.SaCodeCourseScoreId = _saCodeCourseScoreId;
			newSaTrainingCourse.GsCountryNodeId = _gsCountryNodeId;
			newSaTrainingCourse.AsNodeId = _asNodeId;
			newSaTrainingCourse.SaCodeTrainingOrgId = _saCodeTrainingOrgId;
			newSaTrainingCourse.AsFacultyInfoId = _asFacultyInfoId;
			newSaTrainingCourse.TrainingPlace = _trainingPlace;
			return newSaTrainingCourse;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SaTrainingCourseId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SaTrainingCourseId
		{
			get
			{
				return this.entityData.SaTrainingCourseId; 
			}
			
			set
			{
				if (this.entityData.SaTrainingCourseId == value)
					return;
					
				OnColumnChanging(SaTrainingCourseColumn.SaTrainingCourseId, this.entityData.SaTrainingCourseId);
				this.entityData.SaTrainingCourseId = value;
				this.EntityId.SaTrainingCourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTrainingCourseColumn.SaTrainingCourseId, this.entityData.SaTrainingCourseId);
				OnPropertyChanged("SaTrainingCourseId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SA_TRAINING_COURSE_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SA_TRAINING_COURSE_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSaTrainingCourseId
		{
			get { return this.entityData.OriginalSaTrainingCourseId; }
			set { this.entityData.OriginalSaTrainingCourseId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the StartDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime StartDate
		{
			get
			{
				return this.entityData.StartDate; 
			}
			
			set
			{
				if (this.entityData.StartDate == value)
					return;
					
				OnColumnChanging(SaTrainingCourseColumn.StartDate, this.entityData.StartDate);
				this.entityData.StartDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTrainingCourseColumn.StartDate, this.entityData.StartDate);
				OnPropertyChanged("StartDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EndDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime EndDate
		{
			get
			{
				return this.entityData.EndDate; 
			}
			
			set
			{
				if (this.entityData.EndDate == value)
					return;
					
				OnColumnChanging(SaTrainingCourseColumn.EndDate, this.entityData.EndDate);
				this.entityData.EndDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTrainingCourseColumn.EndDate, this.entityData.EndDate);
				OnPropertyChanged("EndDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsOrgUni property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsOrgUni
		{
			get
			{
				return this.entityData.IsOrgUni; 
			}
			
			set
			{
				if (this.entityData.IsOrgUni == value)
					return;
					
				OnColumnChanging(SaTrainingCourseColumn.IsOrgUni, this.entityData.IsOrgUni);
				this.entityData.IsOrgUni = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTrainingCourseColumn.IsOrgUni, this.entityData.IsOrgUni);
				OnPropertyChanged("IsOrgUni");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CourseCost property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCourseCostNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CourseCost
		{
			get
			{
				return this.entityData.CourseCost; 
			}
			
			set
			{
				if (this.entityData.CourseCost == value)
					return;
					
				OnColumnChanging(SaTrainingCourseColumn.CourseCost, this.entityData.CourseCost);
				this.entityData.CourseCost = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTrainingCourseColumn.CourseCost, this.entityData.CourseCost);
				OnPropertyChanged("CourseCost");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CourseHrs property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCourseHrsNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CourseHrs
		{
			get
			{
				return this.entityData.CourseHrs; 
			}
			
			set
			{
				if (this.entityData.CourseHrs == value)
					return;
					
				OnColumnChanging(SaTrainingCourseColumn.CourseHrs, this.entityData.CourseHrs);
				this.entityData.CourseHrs = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTrainingCourseColumn.CourseHrs, this.entityData.CourseHrs);
				OnPropertyChanged("CourseHrs");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UniParticipationAmt property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsUniParticipationAmtNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? UniParticipationAmt
		{
			get
			{
				return this.entityData.UniParticipationAmt; 
			}
			
			set
			{
				if (this.entityData.UniParticipationAmt == value)
					return;
					
				OnColumnChanging(SaTrainingCourseColumn.UniParticipationAmt, this.entityData.UniParticipationAmt);
				this.entityData.UniParticipationAmt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTrainingCourseColumn.UniParticipationAmt, this.entityData.UniParticipationAmt);
				OnPropertyChanged("UniParticipationAmt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaCodeTrainingFlgId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaCodeTrainingFlgId
		{
			get
			{
				return this.entityData.SaCodeTrainingFlgId; 
			}
			
			set
			{
				if (this.entityData.SaCodeTrainingFlgId == value)
					return;
					
				OnColumnChanging(SaTrainingCourseColumn.SaCodeTrainingFlgId, this.entityData.SaCodeTrainingFlgId);
				this.entityData.SaCodeTrainingFlgId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTrainingCourseColumn.SaCodeTrainingFlgId, this.entityData.SaCodeTrainingFlgId);
				OnPropertyChanged("SaCodeTrainingFlgId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrainerName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String TrainerName
		{
			get
			{
				return this.entityData.TrainerName; 
			}
			
			set
			{
				if (this.entityData.TrainerName == value)
					return;
					
				OnColumnChanging(SaTrainingCourseColumn.TrainerName, this.entityData.TrainerName);
				this.entityData.TrainerName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTrainingCourseColumn.TrainerName, this.entityData.TrainerName);
				OnPropertyChanged("TrainerName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeCurrencyId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCodeCurrencyIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCodeCurrencyId
		{
			get
			{
				return this.entityData.GsCodeCurrencyId; 
			}
			
			set
			{
				if (this.entityData.GsCodeCurrencyId == value)
					return;
					
				OnColumnChanging(SaTrainingCourseColumn.GsCodeCurrencyId, this.entityData.GsCodeCurrencyId);
				this.entityData.GsCodeCurrencyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTrainingCourseColumn.GsCodeCurrencyId, this.entityData.GsCodeCurrencyId);
				OnPropertyChanged("GsCodeCurrencyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaStfMemberId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaStfMemberId
		{
			get
			{
				return this.entityData.SaStfMemberId; 
			}
			
			set
			{
				if (this.entityData.SaStfMemberId == value)
					return;
					
				OnColumnChanging(SaTrainingCourseColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				this.entityData.SaStfMemberId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTrainingCourseColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				OnPropertyChanged("SaStfMemberId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaCodeCourseId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaCodeCourseId
		{
			get
			{
				return this.entityData.SaCodeCourseId; 
			}
			
			set
			{
				if (this.entityData.SaCodeCourseId == value)
					return;
					
				OnColumnChanging(SaTrainingCourseColumn.SaCodeCourseId, this.entityData.SaCodeCourseId);
				this.entityData.SaCodeCourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTrainingCourseColumn.SaCodeCourseId, this.entityData.SaCodeCourseId);
				OnPropertyChanged("SaCodeCourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaCodeCourseScoreId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaCodeCourseScoreId
		{
			get
			{
				return this.entityData.SaCodeCourseScoreId; 
			}
			
			set
			{
				if (this.entityData.SaCodeCourseScoreId == value)
					return;
					
				OnColumnChanging(SaTrainingCourseColumn.SaCodeCourseScoreId, this.entityData.SaCodeCourseScoreId);
				this.entityData.SaCodeCourseScoreId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTrainingCourseColumn.SaCodeCourseScoreId, this.entityData.SaCodeCourseScoreId);
				OnPropertyChanged("SaCodeCourseScoreId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCountryNodeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsCountryNodeId
		{
			get
			{
				return this.entityData.GsCountryNodeId; 
			}
			
			set
			{
				if (this.entityData.GsCountryNodeId == value)
					return;
					
				OnColumnChanging(SaTrainingCourseColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				this.entityData.GsCountryNodeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTrainingCourseColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				OnPropertyChanged("GsCountryNodeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsNodeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsNodeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsNodeId
		{
			get
			{
				return this.entityData.AsNodeId; 
			}
			
			set
			{
				if (this.entityData.AsNodeId == value)
					return;
					
				OnColumnChanging(SaTrainingCourseColumn.AsNodeId, this.entityData.AsNodeId);
				this.entityData.AsNodeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTrainingCourseColumn.AsNodeId, this.entityData.AsNodeId);
				OnPropertyChanged("AsNodeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaCodeTrainingOrgId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSaCodeTrainingOrgIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SaCodeTrainingOrgId
		{
			get
			{
				return this.entityData.SaCodeTrainingOrgId; 
			}
			
			set
			{
				if (this.entityData.SaCodeTrainingOrgId == value)
					return;
					
				OnColumnChanging(SaTrainingCourseColumn.SaCodeTrainingOrgId, this.entityData.SaCodeTrainingOrgId);
				this.entityData.SaCodeTrainingOrgId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTrainingCourseColumn.SaCodeTrainingOrgId, this.entityData.SaCodeTrainingOrgId);
				OnPropertyChanged("SaCodeTrainingOrgId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(SaTrainingCourseColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTrainingCourseColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrainingPlace property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String TrainingPlace
		{
			get
			{
				return this.entityData.TrainingPlace; 
			}
			
			set
			{
				if (this.entityData.TrainingPlace == value)
					return;
					
				OnColumnChanging(SaTrainingCourseColumn.TrainingPlace, this.entityData.TrainingPlace);
				this.entityData.TrainingPlace = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTrainingCourseColumn.TrainingPlace, this.entityData.TrainingPlace);
				OnPropertyChanged("TrainingPlace");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeTrainingFlg"/>.
		/// </summary>
		/// <value>The source SaCodeTrainingFlg for SaCodeTrainingFlgId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaCodeTrainingFlg SaCodeTrainingFlgIdSource
      	{
            get { return entityData.SaCodeTrainingFlgIdSource; }
            set { entityData.SaCodeTrainingFlgIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeTrainingOrg"/>.
		/// </summary>
		/// <value>The source SaCodeTrainingOrg for SaCodeTrainingOrgId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaCodeTrainingOrg SaCodeTrainingOrgIdSource
      	{
            get { return entityData.SaCodeTrainingOrgIdSource; }
            set { entityData.SaCodeTrainingOrgIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCurrency"/>.
		/// </summary>
		/// <value>The source GsCodeCurrency for GsCodeCurrencyId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeCurrency GsCodeCurrencyIdSource
      	{
            get { return entityData.GsCodeCurrencyIdSource; }
            set { entityData.GsCodeCurrencyIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeCourse"/>.
		/// </summary>
		/// <value>The source SaCodeCourse for SaCodeCourseId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaCodeCourse SaCodeCourseIdSource
      	{
            get { return entityData.SaCodeCourseIdSource; }
            set { entityData.SaCodeCourseIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for AsNodeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain AsNodeIdSource
      	{
            get { return entityData.AsNodeIdSource; }
            set { entityData.AsNodeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeCourseScore"/>.
		/// </summary>
		/// <value>The source SaCodeCourseScore for SaCodeCourseScoreId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaCodeCourseScore SaCodeCourseScoreIdSource
      	{
            get { return entityData.SaCodeCourseScoreIdSource; }
            set { entityData.SaCodeCourseScoreIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return entityData.SaStfMemberIdSource; }
            set { entityData.SaStfMemberIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TrainerName", "Trainer Name", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TrainingPlace", "Training Place", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SA_TRAINING_COURSE"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SA_TRAINING_COURSE_ID", "START_DATE", "END_DATE", "IS_ORG_UNI", "COURSE_COST", "COURSE_HRS", "UNI_PARTICIPATION_AMT", "SA_CODE_TRAINING_FLG_ID", "TRAINER_NAME", "GS_CODE_CURRENCY_ID", "SA_STF_MEMBER_ID", "SA_CODE_COURSE_ID", "SA_CODE_COURSE_SCORE_ID", "GS_COUNTRY_NODE_ID", "AS_NODE_ID", "SA_CODE_TRAINING_ORG_ID", "AS_FACULTY_INFO_ID", "TRAINING_PLACE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SaTrainingCourseEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SaTrainingCourse) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SaTrainingCourse>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SaTrainingCourse);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SaTrainingCourse Entity 
		///</summary>
		protected virtual SaTrainingCourse Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SaTrainingCourse copy = new SaTrainingCourse();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SaTrainingCourseId = this.SaTrainingCourseId;
					copy.OriginalSaTrainingCourseId = this.OriginalSaTrainingCourseId;
				copy.StartDate = this.StartDate;
				copy.EndDate = this.EndDate;
				copy.IsOrgUni = this.IsOrgUni;
				copy.CourseCost = this.CourseCost;
				copy.CourseHrs = this.CourseHrs;
				copy.UniParticipationAmt = this.UniParticipationAmt;
				copy.SaCodeTrainingFlgId = this.SaCodeTrainingFlgId;
				copy.TrainerName = this.TrainerName;
				copy.GsCodeCurrencyId = this.GsCodeCurrencyId;
				copy.SaStfMemberId = this.SaStfMemberId;
				copy.SaCodeCourseId = this.SaCodeCourseId;
				copy.SaCodeCourseScoreId = this.SaCodeCourseScoreId;
				copy.GsCountryNodeId = this.GsCountryNodeId;
				copy.AsNodeId = this.AsNodeId;
				copy.SaCodeTrainingOrgId = this.SaCodeTrainingOrgId;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.TrainingPlace = this.TrainingPlace;
			
			if (this.SaCodeTrainingFlgIdSource != null && existingCopies.Contains(this.SaCodeTrainingFlgIdSource))
				copy.SaCodeTrainingFlgIdSource = existingCopies[this.SaCodeTrainingFlgIdSource] as SaCodeTrainingFlg;
			else
				copy.SaCodeTrainingFlgIdSource = MakeCopyOf(this.SaCodeTrainingFlgIdSource, existingCopies) as SaCodeTrainingFlg;
			if (this.SaCodeTrainingOrgIdSource != null && existingCopies.Contains(this.SaCodeTrainingOrgIdSource))
				copy.SaCodeTrainingOrgIdSource = existingCopies[this.SaCodeTrainingOrgIdSource] as SaCodeTrainingOrg;
			else
				copy.SaCodeTrainingOrgIdSource = MakeCopyOf(this.SaCodeTrainingOrgIdSource, existingCopies) as SaCodeTrainingOrg;
			if (this.GsCodeCurrencyIdSource != null && existingCopies.Contains(this.GsCodeCurrencyIdSource))
				copy.GsCodeCurrencyIdSource = existingCopies[this.GsCodeCurrencyIdSource] as GsCodeCurrency;
			else
				copy.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource, existingCopies) as GsCodeCurrency;
			if (this.SaCodeCourseIdSource != null && existingCopies.Contains(this.SaCodeCourseIdSource))
				copy.SaCodeCourseIdSource = existingCopies[this.SaCodeCourseIdSource] as SaCodeCourse;
			else
				copy.SaCodeCourseIdSource = MakeCopyOf(this.SaCodeCourseIdSource, existingCopies) as SaCodeCourse;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.AsNodeIdSource != null && existingCopies.Contains(this.AsNodeIdSource))
				copy.AsNodeIdSource = existingCopies[this.AsNodeIdSource] as EntityMain;
			else
				copy.AsNodeIdSource = MakeCopyOf(this.AsNodeIdSource, existingCopies) as EntityMain;
			if (this.SaCodeCourseScoreIdSource != null && existingCopies.Contains(this.SaCodeCourseScoreIdSource))
				copy.SaCodeCourseScoreIdSource = existingCopies[this.SaCodeCourseScoreIdSource] as SaCodeCourseScore;
			else
				copy.SaCodeCourseScoreIdSource = MakeCopyOf(this.SaCodeCourseScoreIdSource, existingCopies) as SaCodeCourseScore;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				copy.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				copy.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SaTrainingCourse Entity 
		///</summary>
		public virtual SaTrainingCourse Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SaTrainingCourse Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SaTrainingCourse DeepCopy()
		{
			return EntityHelper.Clone<SaTrainingCourse>(this as SaTrainingCourse);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SaTrainingCourseEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SaTrainingCourseEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SaTrainingCourseEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SaTrainingCourseColumn column)
		{
			switch(column)
			{
					case SaTrainingCourseColumn.SaTrainingCourseId:
					return entityData.SaTrainingCourseId != _originalData.SaTrainingCourseId;
					case SaTrainingCourseColumn.StartDate:
					return entityData.StartDate != _originalData.StartDate;
					case SaTrainingCourseColumn.EndDate:
					return entityData.EndDate != _originalData.EndDate;
					case SaTrainingCourseColumn.IsOrgUni:
					return entityData.IsOrgUni != _originalData.IsOrgUni;
					case SaTrainingCourseColumn.CourseCost:
					return entityData.CourseCost != _originalData.CourseCost;
					case SaTrainingCourseColumn.CourseHrs:
					return entityData.CourseHrs != _originalData.CourseHrs;
					case SaTrainingCourseColumn.UniParticipationAmt:
					return entityData.UniParticipationAmt != _originalData.UniParticipationAmt;
					case SaTrainingCourseColumn.SaCodeTrainingFlgId:
					return entityData.SaCodeTrainingFlgId != _originalData.SaCodeTrainingFlgId;
					case SaTrainingCourseColumn.TrainerName:
					return entityData.TrainerName != _originalData.TrainerName;
					case SaTrainingCourseColumn.GsCodeCurrencyId:
					return entityData.GsCodeCurrencyId != _originalData.GsCodeCurrencyId;
					case SaTrainingCourseColumn.SaStfMemberId:
					return entityData.SaStfMemberId != _originalData.SaStfMemberId;
					case SaTrainingCourseColumn.SaCodeCourseId:
					return entityData.SaCodeCourseId != _originalData.SaCodeCourseId;
					case SaTrainingCourseColumn.SaCodeCourseScoreId:
					return entityData.SaCodeCourseScoreId != _originalData.SaCodeCourseScoreId;
					case SaTrainingCourseColumn.GsCountryNodeId:
					return entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
					case SaTrainingCourseColumn.AsNodeId:
					return entityData.AsNodeId != _originalData.AsNodeId;
					case SaTrainingCourseColumn.SaCodeTrainingOrgId:
					return entityData.SaCodeTrainingOrgId != _originalData.SaCodeTrainingOrgId;
					case SaTrainingCourseColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case SaTrainingCourseColumn.TrainingPlace:
					return entityData.TrainingPlace != _originalData.TrainingPlace;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SaTrainingCourseColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SaTrainingCourseId != _originalData.SaTrainingCourseId;
			result = result || entityData.StartDate != _originalData.StartDate;
			result = result || entityData.EndDate != _originalData.EndDate;
			result = result || entityData.IsOrgUni != _originalData.IsOrgUni;
			result = result || entityData.CourseCost != _originalData.CourseCost;
			result = result || entityData.CourseHrs != _originalData.CourseHrs;
			result = result || entityData.UniParticipationAmt != _originalData.UniParticipationAmt;
			result = result || entityData.SaCodeTrainingFlgId != _originalData.SaCodeTrainingFlgId;
			result = result || entityData.TrainerName != _originalData.TrainerName;
			result = result || entityData.GsCodeCurrencyId != _originalData.GsCodeCurrencyId;
			result = result || entityData.SaStfMemberId != _originalData.SaStfMemberId;
			result = result || entityData.SaCodeCourseId != _originalData.SaCodeCourseId;
			result = result || entityData.SaCodeCourseScoreId != _originalData.SaCodeCourseScoreId;
			result = result || entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
			result = result || entityData.AsNodeId != _originalData.AsNodeId;
			result = result || entityData.SaCodeTrainingOrgId != _originalData.SaCodeTrainingOrgId;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.TrainingPlace != _originalData.TrainingPlace;
			return result;
		}	
		
		///<summary>
		///  Returns a SaTrainingCourse Entity with the original data.
		///</summary>
		public SaTrainingCourse GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSaTrainingCourse(
				_originalData.SaTrainingCourseId,
				_originalData.StartDate,
				_originalData.EndDate,
				_originalData.IsOrgUni,
				_originalData.CourseCost,
				_originalData.CourseHrs,
				_originalData.UniParticipationAmt,
				_originalData.SaCodeTrainingFlgId,
				_originalData.TrainerName,
				_originalData.GsCodeCurrencyId,
				_originalData.SaStfMemberId,
				_originalData.SaCodeCourseId,
				_originalData.SaCodeCourseScoreId,
				_originalData.GsCountryNodeId,
				_originalData.AsNodeId,
				_originalData.SaCodeTrainingOrgId,
				_originalData.AsFacultyInfoId,
				_originalData.TrainingPlace
				);
				
			return (SaTrainingCourse)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SaTrainingCourseBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SaTrainingCourseBase)
				return ValueEquals(this, (SaTrainingCourseBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SaTrainingCourseBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SaTrainingCourseId.GetHashCode() ^ 
					this.StartDate.GetHashCode() ^ 
					this.EndDate.GetHashCode() ^ 
					this.IsOrgUni.GetHashCode() ^ 
					((this.CourseCost == null) ? string.Empty : this.CourseCost.ToString()).GetHashCode() ^ 
					((this.CourseHrs == null) ? string.Empty : this.CourseHrs.ToString()).GetHashCode() ^ 
					((this.UniParticipationAmt == null) ? string.Empty : this.UniParticipationAmt.ToString()).GetHashCode() ^ 
					this.SaCodeTrainingFlgId.GetHashCode() ^ 
					((this.TrainerName == null) ? string.Empty : this.TrainerName.ToString()).GetHashCode() ^ 
					((this.GsCodeCurrencyId == null) ? string.Empty : this.GsCodeCurrencyId.ToString()).GetHashCode() ^ 
					this.SaStfMemberId.GetHashCode() ^ 
					this.SaCodeCourseId.GetHashCode() ^ 
					this.SaCodeCourseScoreId.GetHashCode() ^ 
					this.GsCountryNodeId.GetHashCode() ^ 
					((this.AsNodeId == null) ? string.Empty : this.AsNodeId.ToString()).GetHashCode() ^ 
					((this.SaCodeTrainingOrgId == null) ? string.Empty : this.SaCodeTrainingOrgId.ToString()).GetHashCode() ^ 
					this.AsFacultyInfoId.GetHashCode() ^ 
					((this.TrainingPlace == null) ? string.Empty : this.TrainingPlace.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SaTrainingCourseBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SaTrainingCourseBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SaTrainingCourseBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SaTrainingCourseBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SaTrainingCourseBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SaTrainingCourseBase Object1, SaTrainingCourseBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SaTrainingCourseId != Object2.SaTrainingCourseId)
				equal = false;
			if (Object1.StartDate != Object2.StartDate)
				equal = false;
			if (Object1.EndDate != Object2.EndDate)
				equal = false;
			if (Object1.IsOrgUni != Object2.IsOrgUni)
				equal = false;
			if ( Object1.CourseCost != null && Object2.CourseCost != null )
			{
				if (Object1.CourseCost != Object2.CourseCost)
					equal = false;
			}
			else if (Object1.CourseCost == null ^ Object2.CourseCost == null )
			{
				equal = false;
			}
			if ( Object1.CourseHrs != null && Object2.CourseHrs != null )
			{
				if (Object1.CourseHrs != Object2.CourseHrs)
					equal = false;
			}
			else if (Object1.CourseHrs == null ^ Object2.CourseHrs == null )
			{
				equal = false;
			}
			if ( Object1.UniParticipationAmt != null && Object2.UniParticipationAmt != null )
			{
				if (Object1.UniParticipationAmt != Object2.UniParticipationAmt)
					equal = false;
			}
			else if (Object1.UniParticipationAmt == null ^ Object2.UniParticipationAmt == null )
			{
				equal = false;
			}
			if (Object1.SaCodeTrainingFlgId != Object2.SaCodeTrainingFlgId)
				equal = false;
			if ( Object1.TrainerName != null && Object2.TrainerName != null )
			{
				if (Object1.TrainerName != Object2.TrainerName)
					equal = false;
			}
			else if (Object1.TrainerName == null ^ Object2.TrainerName == null )
			{
				equal = false;
			}
			if ( Object1.GsCodeCurrencyId != null && Object2.GsCodeCurrencyId != null )
			{
				if (Object1.GsCodeCurrencyId != Object2.GsCodeCurrencyId)
					equal = false;
			}
			else if (Object1.GsCodeCurrencyId == null ^ Object2.GsCodeCurrencyId == null )
			{
				equal = false;
			}
			if (Object1.SaStfMemberId != Object2.SaStfMemberId)
				equal = false;
			if (Object1.SaCodeCourseId != Object2.SaCodeCourseId)
				equal = false;
			if (Object1.SaCodeCourseScoreId != Object2.SaCodeCourseScoreId)
				equal = false;
			if (Object1.GsCountryNodeId != Object2.GsCountryNodeId)
				equal = false;
			if ( Object1.AsNodeId != null && Object2.AsNodeId != null )
			{
				if (Object1.AsNodeId != Object2.AsNodeId)
					equal = false;
			}
			else if (Object1.AsNodeId == null ^ Object2.AsNodeId == null )
			{
				equal = false;
			}
			if ( Object1.SaCodeTrainingOrgId != null && Object2.SaCodeTrainingOrgId != null )
			{
				if (Object1.SaCodeTrainingOrgId != Object2.SaCodeTrainingOrgId)
					equal = false;
			}
			else if (Object1.SaCodeTrainingOrgId == null ^ Object2.SaCodeTrainingOrgId == null )
			{
				equal = false;
			}
			if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
				equal = false;
			if ( Object1.TrainingPlace != null && Object2.TrainingPlace != null )
			{
				if (Object1.TrainingPlace != Object2.TrainingPlace)
					equal = false;
			}
			else if (Object1.TrainingPlace == null ^ Object2.TrainingPlace == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SaTrainingCourseBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SaTrainingCourseComparer GetComparer()
        {
            return new SaTrainingCourseComparer();
        }
        */

        // Comparer delegates back to SaTrainingCourse
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SaTrainingCourse rhs, SaTrainingCourseColumn which)
        {
            switch (which)
            {
            	
            	
            	case SaTrainingCourseColumn.SaTrainingCourseId:
            		return this.SaTrainingCourseId.CompareTo(rhs.SaTrainingCourseId);
            		
            		                 
            	
            	
            	case SaTrainingCourseColumn.StartDate:
            		return this.StartDate.CompareTo(rhs.StartDate);
            		
            		                 
            	
            	
            	case SaTrainingCourseColumn.EndDate:
            		return this.EndDate.CompareTo(rhs.EndDate);
            		
            		                 
            	
            	
            	case SaTrainingCourseColumn.IsOrgUni:
            		return this.IsOrgUni.CompareTo(rhs.IsOrgUni);
            		
            		                 
            	
            	
            	case SaTrainingCourseColumn.CourseCost:
            		return this.CourseCost.Value.CompareTo(rhs.CourseCost.Value);
            		
            		                 
            	
            	
            	case SaTrainingCourseColumn.CourseHrs:
            		return this.CourseHrs.Value.CompareTo(rhs.CourseHrs.Value);
            		
            		                 
            	
            	
            	case SaTrainingCourseColumn.UniParticipationAmt:
            		return this.UniParticipationAmt.Value.CompareTo(rhs.UniParticipationAmt.Value);
            		
            		                 
            	
            	
            	case SaTrainingCourseColumn.SaCodeTrainingFlgId:
            		return this.SaCodeTrainingFlgId.CompareTo(rhs.SaCodeTrainingFlgId);
            		
            		                 
            	
            	
            	case SaTrainingCourseColumn.TrainerName:
            		return this.TrainerName.CompareTo(rhs.TrainerName);
            		
            		                 
            	
            	
            	case SaTrainingCourseColumn.GsCodeCurrencyId:
            		return this.GsCodeCurrencyId.Value.CompareTo(rhs.GsCodeCurrencyId.Value);
            		
            		                 
            	
            	
            	case SaTrainingCourseColumn.SaStfMemberId:
            		return this.SaStfMemberId.CompareTo(rhs.SaStfMemberId);
            		
            		                 
            	
            	
            	case SaTrainingCourseColumn.SaCodeCourseId:
            		return this.SaCodeCourseId.CompareTo(rhs.SaCodeCourseId);
            		
            		                 
            	
            	
            	case SaTrainingCourseColumn.SaCodeCourseScoreId:
            		return this.SaCodeCourseScoreId.CompareTo(rhs.SaCodeCourseScoreId);
            		
            		                 
            	
            	
            	case SaTrainingCourseColumn.GsCountryNodeId:
            		return this.GsCountryNodeId.CompareTo(rhs.GsCountryNodeId);
            		
            		                 
            	
            	
            	case SaTrainingCourseColumn.AsNodeId:
            		return this.AsNodeId.Value.CompareTo(rhs.AsNodeId.Value);
            		
            		                 
            	
            	
            	case SaTrainingCourseColumn.SaCodeTrainingOrgId:
            		return this.SaCodeTrainingOrgId.Value.CompareTo(rhs.SaCodeTrainingOrgId.Value);
            		
            		                 
            	
            	
            	case SaTrainingCourseColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.CompareTo(rhs.AsFacultyInfoId);
            		
            		                 
            	
            	
            	case SaTrainingCourseColumn.TrainingPlace:
            		return this.TrainingPlace.CompareTo(rhs.TrainingPlace);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SaTrainingCourseKey> Members
		
		// member variable for the EntityId property
		private SaTrainingCourseKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SaTrainingCourseKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SaTrainingCourseKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SaTrainingCourse")
					.Append("|").Append( this.SaTrainingCourseId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{19}{18}- SaTrainingCourseId: {0}{18}- StartDate: {1}{18}- EndDate: {2}{18}- IsOrgUni: {3}{18}- CourseCost: {4}{18}- CourseHrs: {5}{18}- UniParticipationAmt: {6}{18}- SaCodeTrainingFlgId: {7}{18}- TrainerName: {8}{18}- GsCodeCurrencyId: {9}{18}- SaStfMemberId: {10}{18}- SaCodeCourseId: {11}{18}- SaCodeCourseScoreId: {12}{18}- GsCountryNodeId: {13}{18}- AsNodeId: {14}{18}- SaCodeTrainingOrgId: {15}{18}- AsFacultyInfoId: {16}{18}- TrainingPlace: {17}{18}{20}", 
				this.SaTrainingCourseId,
				this.StartDate,
				this.EndDate,
				this.IsOrgUni,
				(this.CourseCost == null) ? string.Empty : this.CourseCost.ToString(),
				(this.CourseHrs == null) ? string.Empty : this.CourseHrs.ToString(),
				(this.UniParticipationAmt == null) ? string.Empty : this.UniParticipationAmt.ToString(),
				this.SaCodeTrainingFlgId,
				(this.TrainerName == null) ? string.Empty : this.TrainerName.ToString(),
				(this.GsCodeCurrencyId == null) ? string.Empty : this.GsCodeCurrencyId.ToString(),
				this.SaStfMemberId,
				this.SaCodeCourseId,
				this.SaCodeCourseScoreId,
				this.GsCountryNodeId,
				(this.AsNodeId == null) ? string.Empty : this.AsNodeId.ToString(),
				(this.SaCodeTrainingOrgId == null) ? string.Empty : this.SaCodeTrainingOrgId.ToString(),
				this.AsFacultyInfoId,
				(this.TrainingPlace == null) ? string.Empty : this.TrainingPlace.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SA_TRAINING_COURSE' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SaTrainingCourseEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SA_TRAINING_COURSE_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SA_TRAINING_COURSE"</remarks>
		public System.Decimal SaTrainingCourseId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSaTrainingCourseId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// START_DATE : 
		/// </summary>
		public System.DateTime		  StartDate = DateTime.MinValue;
		
		/// <summary>
		/// END_DATE : 
		/// </summary>
		public System.DateTime		  EndDate = DateTime.MinValue;
		
		/// <summary>
		/// IS_ORG_UNI : 
		/// </summary>
		public System.Decimal		  IsOrgUni = 0.0m;
		
		/// <summary>
		/// COURSE_COST : 
		/// </summary>
		public System.Decimal?		  CourseCost = null;
		
		/// <summary>
		/// COURSE_HRS : 
		/// </summary>
		public System.Decimal?		  CourseHrs = null;
		
		/// <summary>
		/// UNI_PARTICIPATION_AMT : 
		/// </summary>
		public System.Decimal?		  UniParticipationAmt = null;
		
		/// <summary>
		/// SA_CODE_TRAINING_FLG_ID : 
		/// </summary>
		public System.Decimal		  SaCodeTrainingFlgId = 0.0m;
		
		/// <summary>
		/// TRAINER_NAME : 
		/// </summary>
		public System.String		  TrainerName = null;
		
		/// <summary>
		/// GS_CODE_CURRENCY_ID : 
		/// </summary>
		public System.Decimal?		  GsCodeCurrencyId = null;
		
		/// <summary>
		/// SA_STF_MEMBER_ID : 
		/// </summary>
		public System.Decimal		  SaStfMemberId = 0.0m;
		
		/// <summary>
		/// SA_CODE_COURSE_ID : 
		/// </summary>
		public System.Decimal		  SaCodeCourseId = 0.0m;
		
		/// <summary>
		/// SA_CODE_COURSE_SCORE_ID : 
		/// </summary>
		public System.Decimal		  SaCodeCourseScoreId = 0.0m;
		
		/// <summary>
		/// GS_COUNTRY_NODE_ID : 
		/// </summary>
		public System.Decimal		  GsCountryNodeId = 0.0m;
		
		/// <summary>
		/// AS_NODE_ID : 
		/// </summary>
		public System.Decimal?		  AsNodeId = null;
		
		/// <summary>
		/// SA_CODE_TRAINING_ORG_ID : 
		/// </summary>
		public System.Decimal?		  SaCodeTrainingOrgId = null;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal		  AsFacultyInfoId = 0.0m;
		
		/// <summary>
		/// TRAINING_PLACE : 
		/// </summary>
		public System.String		  TrainingPlace = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private SaCodeTrainingFlg _saCodeTrainingFlgIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeTrainingFlg"/>.
		/// </summary>
		/// <value>The source SaCodeTrainingFlg for SaCodeTrainingFlgId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaCodeTrainingFlg SaCodeTrainingFlgIdSource
      	{
            get { return this._saCodeTrainingFlgIdSource; }
            set { this._saCodeTrainingFlgIdSource = value; }
      	}
		private SaCodeTrainingOrg _saCodeTrainingOrgIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeTrainingOrg"/>.
		/// </summary>
		/// <value>The source SaCodeTrainingOrg for SaCodeTrainingOrgId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaCodeTrainingOrg SaCodeTrainingOrgIdSource
      	{
            get { return this._saCodeTrainingOrgIdSource; }
            set { this._saCodeTrainingOrgIdSource = value; }
      	}
		private GsCodeCurrency _gsCodeCurrencyIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCurrency"/>.
		/// </summary>
		/// <value>The source GsCodeCurrency for GsCodeCurrencyId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeCurrency GsCodeCurrencyIdSource
      	{
            get { return this._gsCodeCurrencyIdSource; }
            set { this._gsCodeCurrencyIdSource = value; }
      	}
		private SaCodeCourse _saCodeCourseIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeCourse"/>.
		/// </summary>
		/// <value>The source SaCodeCourse for SaCodeCourseId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaCodeCourse SaCodeCourseIdSource
      	{
            get { return this._saCodeCourseIdSource; }
            set { this._saCodeCourseIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EntityMain _asNodeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for AsNodeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain AsNodeIdSource
      	{
            get { return this._asNodeIdSource; }
            set { this._asNodeIdSource = value; }
      	}
		private SaCodeCourseScore _saCodeCourseScoreIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeCourseScore"/>.
		/// </summary>
		/// <value>The source SaCodeCourseScore for SaCodeCourseScoreId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaCodeCourseScore SaCodeCourseScoreIdSource
      	{
            get { return this._saCodeCourseScoreIdSource; }
            set { this._saCodeCourseScoreIdSource = value; }
      	}
		private SaStfMember _saStfMemberIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return this._saStfMemberIdSource; }
            set { this._saStfMemberIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SaTrainingCourseEntityData _tmp = new SaTrainingCourseEntityData();
						
			_tmp.SaTrainingCourseId = this.SaTrainingCourseId;
			_tmp.OriginalSaTrainingCourseId = this.OriginalSaTrainingCourseId;
			
			_tmp.StartDate = this.StartDate;
			_tmp.EndDate = this.EndDate;
			_tmp.IsOrgUni = this.IsOrgUni;
			_tmp.CourseCost = this.CourseCost;
			_tmp.CourseHrs = this.CourseHrs;
			_tmp.UniParticipationAmt = this.UniParticipationAmt;
			_tmp.SaCodeTrainingFlgId = this.SaCodeTrainingFlgId;
			_tmp.TrainerName = this.TrainerName;
			_tmp.GsCodeCurrencyId = this.GsCodeCurrencyId;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.SaCodeCourseId = this.SaCodeCourseId;
			_tmp.SaCodeCourseScoreId = this.SaCodeCourseScoreId;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.AsNodeId = this.AsNodeId;
			_tmp.SaCodeTrainingOrgId = this.SaCodeTrainingOrgId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.TrainingPlace = this.TrainingPlace;
			
			#region Source Parent Composite Entities
			if (this.SaCodeTrainingFlgIdSource != null)
				_tmp.SaCodeTrainingFlgIdSource = MakeCopyOf(this.SaCodeTrainingFlgIdSource) as SaCodeTrainingFlg;
			if (this.SaCodeTrainingOrgIdSource != null)
				_tmp.SaCodeTrainingOrgIdSource = MakeCopyOf(this.SaCodeTrainingOrgIdSource) as SaCodeTrainingOrg;
			if (this.GsCodeCurrencyIdSource != null)
				_tmp.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource) as GsCodeCurrency;
			if (this.SaCodeCourseIdSource != null)
				_tmp.SaCodeCourseIdSource = MakeCopyOf(this.SaCodeCourseIdSource) as SaCodeCourse;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.AsNodeIdSource != null)
				_tmp.AsNodeIdSource = MakeCopyOf(this.AsNodeIdSource) as EntityMain;
			if (this.SaCodeCourseScoreIdSource != null)
				_tmp.SaCodeCourseScoreIdSource = MakeCopyOf(this.SaCodeCourseScoreIdSource) as SaCodeCourseScore;
			if (this.SaStfMemberIdSource != null)
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource) as SaStfMember;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SaTrainingCourseEntityData _tmp = new SaTrainingCourseEntityData();
						
			_tmp.SaTrainingCourseId = this.SaTrainingCourseId;
			_tmp.OriginalSaTrainingCourseId = this.OriginalSaTrainingCourseId;
			
			_tmp.StartDate = this.StartDate;
			_tmp.EndDate = this.EndDate;
			_tmp.IsOrgUni = this.IsOrgUni;
			_tmp.CourseCost = this.CourseCost;
			_tmp.CourseHrs = this.CourseHrs;
			_tmp.UniParticipationAmt = this.UniParticipationAmt;
			_tmp.SaCodeTrainingFlgId = this.SaCodeTrainingFlgId;
			_tmp.TrainerName = this.TrainerName;
			_tmp.GsCodeCurrencyId = this.GsCodeCurrencyId;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.SaCodeCourseId = this.SaCodeCourseId;
			_tmp.SaCodeCourseScoreId = this.SaCodeCourseScoreId;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.AsNodeId = this.AsNodeId;
			_tmp.SaCodeTrainingOrgId = this.SaCodeTrainingOrgId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.TrainingPlace = this.TrainingPlace;
			
			#region Source Parent Composite Entities
			if (this.SaCodeTrainingFlgIdSource != null && existingCopies.Contains(this.SaCodeTrainingFlgIdSource))
				_tmp.SaCodeTrainingFlgIdSource = existingCopies[this.SaCodeTrainingFlgIdSource] as SaCodeTrainingFlg;
			else
				_tmp.SaCodeTrainingFlgIdSource = MakeCopyOf(this.SaCodeTrainingFlgIdSource, existingCopies) as SaCodeTrainingFlg;
			if (this.SaCodeTrainingOrgIdSource != null && existingCopies.Contains(this.SaCodeTrainingOrgIdSource))
				_tmp.SaCodeTrainingOrgIdSource = existingCopies[this.SaCodeTrainingOrgIdSource] as SaCodeTrainingOrg;
			else
				_tmp.SaCodeTrainingOrgIdSource = MakeCopyOf(this.SaCodeTrainingOrgIdSource, existingCopies) as SaCodeTrainingOrg;
			if (this.GsCodeCurrencyIdSource != null && existingCopies.Contains(this.GsCodeCurrencyIdSource))
				_tmp.GsCodeCurrencyIdSource = existingCopies[this.GsCodeCurrencyIdSource] as GsCodeCurrency;
			else
				_tmp.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource, existingCopies) as GsCodeCurrency;
			if (this.SaCodeCourseIdSource != null && existingCopies.Contains(this.SaCodeCourseIdSource))
				_tmp.SaCodeCourseIdSource = existingCopies[this.SaCodeCourseIdSource] as SaCodeCourse;
			else
				_tmp.SaCodeCourseIdSource = MakeCopyOf(this.SaCodeCourseIdSource, existingCopies) as SaCodeCourse;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.AsNodeIdSource != null && existingCopies.Contains(this.AsNodeIdSource))
				_tmp.AsNodeIdSource = existingCopies[this.AsNodeIdSource] as EntityMain;
			else
				_tmp.AsNodeIdSource = MakeCopyOf(this.AsNodeIdSource, existingCopies) as EntityMain;
			if (this.SaCodeCourseScoreIdSource != null && existingCopies.Contains(this.SaCodeCourseScoreIdSource))
				_tmp.SaCodeCourseScoreIdSource = existingCopies[this.SaCodeCourseScoreIdSource] as SaCodeCourseScore;
			else
				_tmp.SaCodeCourseScoreIdSource = MakeCopyOf(this.SaCodeCourseScoreIdSource, existingCopies) as SaCodeCourseScore;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				_tmp.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaTrainingCourseColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SaTrainingCourseColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaTrainingCourseColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SaTrainingCourseColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaTrainingCourseColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SaTrainingCourseColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SaTrainingCourseEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SaTrainingCourseEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaTrainingCourseColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SaTrainingCourseColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SaTrainingCourseEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SaTrainingCourseEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SaTrainingCourseEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SaTrainingCourse"/> object.
	/// </remarks>
	public class SaTrainingCourseEventArgs : System.EventArgs
	{
		private SaTrainingCourseColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SaTrainingCourseEventArgs class.
		///</summary>
		public SaTrainingCourseEventArgs(SaTrainingCourseColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SaTrainingCourseEventArgs class.
		///</summary>
		public SaTrainingCourseEventArgs(SaTrainingCourseColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SaTrainingCourseColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SaTrainingCourseColumn" />
		public SaTrainingCourseColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SaTrainingCourse related events.
	///</summary>
	public delegate void SaTrainingCourseEventHandler(object sender, SaTrainingCourseEventArgs e);
	
	#region SaTrainingCourseComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SaTrainingCourseComparer : System.Collections.Generic.IComparer<SaTrainingCourse>
	{
		SaTrainingCourseColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SaTrainingCourseComparer"/> class.
        /// </summary>
		public SaTrainingCourseComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SaTrainingCourseComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SaTrainingCourseComparer(SaTrainingCourseColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SaTrainingCourse"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SaTrainingCourse"/> to compare.</param>
        /// <param name="b">The second <c>SaTrainingCourse</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SaTrainingCourse a, SaTrainingCourse b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SaTrainingCourse entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SaTrainingCourse a, SaTrainingCourse b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SaTrainingCourseColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SaTrainingCourseKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SaTrainingCourse"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SaTrainingCourseKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SaTrainingCourseKey class.
		/// </summary>
		public SaTrainingCourseKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SaTrainingCourseKey class.
		/// </summary>
		public SaTrainingCourseKey(SaTrainingCourseBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SaTrainingCourseId = entity.SaTrainingCourseId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SaTrainingCourseKey class.
		/// </summary>
		public SaTrainingCourseKey(System.Decimal _saTrainingCourseId)
		{
			#region Init Properties

			this.SaTrainingCourseId = _saTrainingCourseId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SaTrainingCourseBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SaTrainingCourseBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SaTrainingCourseId property
		private System.Decimal _saTrainingCourseId;
		
		/// <summary>
		/// Gets or sets the SaTrainingCourseId property.
		/// </summary>
		public System.Decimal SaTrainingCourseId
		{
			get { return _saTrainingCourseId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SaTrainingCourseId = value;
				
				_saTrainingCourseId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SaTrainingCourseId = ( values["SaTrainingCourseId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SaTrainingCourseId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SaTrainingCourseId", SaTrainingCourseId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SaTrainingCourseId: {0}{1}",
								SaTrainingCourseId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SaTrainingCourseColumn Enum
	
	/// <summary>
	/// Enumerate the SaTrainingCourse columns.
	/// </summary>
	[Serializable]
	public enum SaTrainingCourseColumn : int
	{
		/// <summary>
		/// SaTrainingCourseId : 
		/// </summary>
		[EnumTextValue("SA_TRAINING_COURSE_ID")]
		[ColumnEnum("SA_TRAINING_COURSE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SaTrainingCourseId = 1,
		/// <summary>
		/// StartDate : 
		/// </summary>
		[EnumTextValue("START_DATE")]
		[ColumnEnum("START_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		StartDate = 2,
		/// <summary>
		/// EndDate : 
		/// </summary>
		[EnumTextValue("END_DATE")]
		[ColumnEnum("END_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		EndDate = 3,
		/// <summary>
		/// IsOrgUni : 
		/// </summary>
		[EnumTextValue("IS_ORG_UNI")]
		[ColumnEnum("IS_ORG_UNI", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsOrgUni = 4,
		/// <summary>
		/// CourseCost : 
		/// </summary>
		[EnumTextValue("COURSE_COST")]
		[ColumnEnum("COURSE_COST", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CourseCost = 5,
		/// <summary>
		/// CourseHrs : 
		/// </summary>
		[EnumTextValue("COURSE_HRS")]
		[ColumnEnum("COURSE_HRS", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CourseHrs = 6,
		/// <summary>
		/// UniParticipationAmt : 
		/// </summary>
		[EnumTextValue("UNI_PARTICIPATION_AMT")]
		[ColumnEnum("UNI_PARTICIPATION_AMT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		UniParticipationAmt = 7,
		/// <summary>
		/// SaCodeTrainingFlgId : 
		/// </summary>
		[EnumTextValue("SA_CODE_TRAINING_FLG_ID")]
		[ColumnEnum("SA_CODE_TRAINING_FLG_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaCodeTrainingFlgId = 8,
		/// <summary>
		/// TrainerName : 
		/// </summary>
		[EnumTextValue("TRAINER_NAME")]
		[ColumnEnum("TRAINER_NAME", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		TrainerName = 9,
		/// <summary>
		/// GsCodeCurrencyId : 
		/// </summary>
		[EnumTextValue("GS_CODE_CURRENCY_ID")]
		[ColumnEnum("GS_CODE_CURRENCY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCodeCurrencyId = 10,
		/// <summary>
		/// SaStfMemberId : 
		/// </summary>
		[EnumTextValue("SA_STF_MEMBER_ID")]
		[ColumnEnum("SA_STF_MEMBER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaStfMemberId = 11,
		/// <summary>
		/// SaCodeCourseId : 
		/// </summary>
		[EnumTextValue("SA_CODE_COURSE_ID")]
		[ColumnEnum("SA_CODE_COURSE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaCodeCourseId = 12,
		/// <summary>
		/// SaCodeCourseScoreId : 
		/// </summary>
		[EnumTextValue("SA_CODE_COURSE_SCORE_ID")]
		[ColumnEnum("SA_CODE_COURSE_SCORE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaCodeCourseScoreId = 13,
		/// <summary>
		/// GsCountryNodeId : 
		/// </summary>
		[EnumTextValue("GS_COUNTRY_NODE_ID")]
		[ColumnEnum("GS_COUNTRY_NODE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsCountryNodeId = 14,
		/// <summary>
		/// AsNodeId : 
		/// </summary>
		[EnumTextValue("AS_NODE_ID")]
		[ColumnEnum("AS_NODE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsNodeId = 15,
		/// <summary>
		/// SaCodeTrainingOrgId : 
		/// </summary>
		[EnumTextValue("SA_CODE_TRAINING_ORG_ID")]
		[ColumnEnum("SA_CODE_TRAINING_ORG_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SaCodeTrainingOrgId = 16,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsFacultyInfoId = 17,
		/// <summary>
		/// TrainingPlace : 
		/// </summary>
		[EnumTextValue("TRAINING_PLACE")]
		[ColumnEnum("TRAINING_PLACE", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		TrainingPlace = 18
	}//End enum

	#endregion SaTrainingCourseColumn Enum

} // end namespace
