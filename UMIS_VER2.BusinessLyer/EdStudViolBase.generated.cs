
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdStudViol.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_STUD_VIOL' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdStudViolBase : EntityBase, IEdStudViol, IEntityId<EdStudViolKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdStudViolEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdStudViolEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdStudViolEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdStudViol> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudViolEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudViolEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdStudViolBase"/> instance.
		///</summary>
		public EdStudViolBase()
		{
			this.entityData = new EdStudViolEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdStudViolBase"/> instance.
		///</summary>
		///<param name="_edStudViolId"></param>
		///<param name="_edStudId"></param>
		///<param name="_gsCdeCampusId"></param>
		///<param name="_scBuildingId"></param>
		///<param name="_violDate"></param>
		///<param name="_gsCdeViolId"></param>
		///<param name="_groupId"></param>
		///<param name="_gsCdePenaltyId"></param>
		///<param name="_pnltyDate"></param>
		///<param name="_violFrom">تاريخ العقوبة من</param>
		///<param name="_violTo">تاريخ العقوبة الى</param>
		///<param name="_pnltyFrom">تاريخ العقوبة من</param>
		///<param name="_pnltyTo">تاريخ العقوبة الى</param>
		///<param name="_bhvrMark">خصم درجة سلوك</param>
		///<param name="_attndMark">خصم درجة مواظبة</param>
		///<param name="_dropDate"></param>
		///<param name="_notes"></param>
		///<param name="_erpOrgTreeFromId"></param>
		///<param name="_erpOrgTreeToId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_violSerial"></param>
		///<param name="_banFee"></param>
		///<param name="_banFeePayFlag"></param>
		///<param name="_dropFlg"></param>
		///<param name="_edCodeSemesterStopFromId"></param>
		///<param name="_edAcadYearStopFromId"></param>
		///<param name="_edCodeSemesterStopToId"></param>
		///<param name="_edAcadYearStopToId"></param>
		///<param name="_appealFlg"></param>
		///<param name="_otherFlag"></param>
		///<param name="_otherSite"></param>
		///<param name="_gsCdeViolCatId"></param>
		///<param name="_investigationCommInOut"></param>
		///<param name="_investigationDate"></param>
		///<param name="_investigationEndDate"></param>
		///<param name="_investigationRecommendation"></param>
		///<param name="_approvedBy"></param>
		///<param name="_cancelFlg"></param>
		///<param name="_punishCommFlg"></param>
		///<param name="_punishCommDate"></param>
		///<param name="_punishCommEndDate"></param>
		///<param name="_penaltyRelatedFlg"></param>
		///<param name="_semesterNo"></param>
		///<param name="_absenceFlg"></param>
		///<param name="_execFlg"></param>
		///<param name="_exeFlgReg"></param>
		///<param name="_warningNo"></param>
		///<param name="_edStudCheatId"></param>
		///<param name="_witness">الشهود</param>
		///<param name="_gsCodeApprovalId">صلاحية</param>
		///<param name="_approvedByName">الامر بالعقوبة</param>
		///<param name="_attchdDocPath"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public EdStudViolBase(System.Decimal _edStudViolId, System.Decimal _edStudId, System.Decimal? _gsCdeCampusId, 
			System.Decimal? _scBuildingId, System.DateTime _violDate, System.Decimal _gsCdeViolId, 
			System.Decimal? _groupId, System.Decimal? _gsCdePenaltyId, System.DateTime? _pnltyDate, 
			System.DateTime? _violFrom, System.DateTime? _violTo, System.DateTime? _pnltyFrom, System.DateTime? _pnltyTo, 
			System.Decimal? _bhvrMark, System.Decimal? _attndMark, System.DateTime? _dropDate, System.String _notes, 
			System.Decimal? _erpOrgTreeFromId, System.Decimal? _erpOrgTreeToId, System.Decimal _edAcadYearId, 
			System.Decimal _edCodeSemesterId, System.Decimal? _violSerial, System.Decimal? _banFee, 
			System.Decimal? _banFeePayFlag, System.Decimal _dropFlg, System.Decimal? _edCodeSemesterStopFromId, 
			System.Decimal? _edAcadYearStopFromId, System.Decimal? _edCodeSemesterStopToId, System.Decimal? _edAcadYearStopToId, 
			System.Decimal _appealFlg, System.Decimal? _otherFlag, System.String _otherSite, System.Decimal _gsCdeViolCatId, 
			System.Decimal? _investigationCommInOut, System.DateTime? _investigationDate, System.DateTime? _investigationEndDate, 
			System.String _investigationRecommendation, System.Decimal? _approvedBy, System.Decimal? _cancelFlg, 
			System.Decimal? _punishCommFlg, System.DateTime? _punishCommDate, System.DateTime? _punishCommEndDate, 
			System.Decimal? _penaltyRelatedFlg, System.Decimal? _semesterNo, System.Decimal? _absenceFlg, 
			System.Decimal? _execFlg, System.Decimal? _exeFlgReg, System.Decimal _warningNo, System.Decimal? _edStudCheatId, 
			System.String _witness, System.Decimal? _gsCodeApprovalId, System.String _approvedByName, 
			System.String _attchdDocPath, System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			this.entityData = new EdStudViolEntityData();
			this.backupData = null;

			this.EdStudViolId = _edStudViolId;
			this.EdStudId = _edStudId;
			this.GsCdeCampusId = _gsCdeCampusId;
			this.ScBuildingId = _scBuildingId;
			this.ViolDate = _violDate;
			this.GsCdeViolId = _gsCdeViolId;
			this.GroupId = _groupId;
			this.GsCdePenaltyId = _gsCdePenaltyId;
			this.PnltyDate = _pnltyDate;
			this.ViolFrom = _violFrom;
			this.ViolTo = _violTo;
			this.PnltyFrom = _pnltyFrom;
			this.PnltyTo = _pnltyTo;
			this.BhvrMark = _bhvrMark;
			this.AttndMark = _attndMark;
			this.DropDate = _dropDate;
			this.Notes = _notes;
			this.ErpOrgTreeFromId = _erpOrgTreeFromId;
			this.ErpOrgTreeToId = _erpOrgTreeToId;
			this.EdAcadYearId = _edAcadYearId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.ViolSerial = _violSerial;
			this.BanFee = _banFee;
			this.BanFeePayFlag = _banFeePayFlag;
			this.DropFlg = _dropFlg;
			this.EdCodeSemesterStopFromId = _edCodeSemesterStopFromId;
			this.EdAcadYearStopFromId = _edAcadYearStopFromId;
			this.EdCodeSemesterStopToId = _edCodeSemesterStopToId;
			this.EdAcadYearStopToId = _edAcadYearStopToId;
			this.AppealFlg = _appealFlg;
			this.OtherFlag = _otherFlag;
			this.OtherSite = _otherSite;
			this.GsCdeViolCatId = _gsCdeViolCatId;
			this.InvestigationCommInOut = _investigationCommInOut;
			this.InvestigationDate = _investigationDate;
			this.InvestigationEndDate = _investigationEndDate;
			this.InvestigationRecommendation = _investigationRecommendation;
			this.ApprovedBy = _approvedBy;
			this.CancelFlg = _cancelFlg;
			this.PunishCommFlg = _punishCommFlg;
			this.PunishCommDate = _punishCommDate;
			this.PunishCommEndDate = _punishCommEndDate;
			this.PenaltyRelatedFlg = _penaltyRelatedFlg;
			this.SemesterNo = _semesterNo;
			this.AbsenceFlg = _absenceFlg;
			this.ExecFlg = _execFlg;
			this.ExeFlgReg = _exeFlgReg;
			this.WarningNo = _warningNo;
			this.EdStudCheatId = _edStudCheatId;
			this.Witness = _witness;
			this.GsCodeApprovalId = _gsCodeApprovalId;
			this.ApprovedByName = _approvedByName;
			this.AttchdDocPath = _attchdDocPath;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdStudViol"/> instance.
		///</summary>
		///<param name="_edStudViolId"></param>
		///<param name="_edStudId"></param>
		///<param name="_gsCdeCampusId"></param>
		///<param name="_scBuildingId"></param>
		///<param name="_violDate"></param>
		///<param name="_gsCdeViolId"></param>
		///<param name="_groupId"></param>
		///<param name="_gsCdePenaltyId"></param>
		///<param name="_pnltyDate"></param>
		///<param name="_violFrom">تاريخ العقوبة من</param>
		///<param name="_violTo">تاريخ العقوبة الى</param>
		///<param name="_pnltyFrom">تاريخ العقوبة من</param>
		///<param name="_pnltyTo">تاريخ العقوبة الى</param>
		///<param name="_bhvrMark">خصم درجة سلوك</param>
		///<param name="_attndMark">خصم درجة مواظبة</param>
		///<param name="_dropDate"></param>
		///<param name="_notes"></param>
		///<param name="_erpOrgTreeFromId"></param>
		///<param name="_erpOrgTreeToId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_violSerial"></param>
		///<param name="_banFee"></param>
		///<param name="_banFeePayFlag"></param>
		///<param name="_dropFlg"></param>
		///<param name="_edCodeSemesterStopFromId"></param>
		///<param name="_edAcadYearStopFromId"></param>
		///<param name="_edCodeSemesterStopToId"></param>
		///<param name="_edAcadYearStopToId"></param>
		///<param name="_appealFlg"></param>
		///<param name="_otherFlag"></param>
		///<param name="_otherSite"></param>
		///<param name="_gsCdeViolCatId"></param>
		///<param name="_investigationCommInOut"></param>
		///<param name="_investigationDate"></param>
		///<param name="_investigationEndDate"></param>
		///<param name="_investigationRecommendation"></param>
		///<param name="_approvedBy"></param>
		///<param name="_cancelFlg"></param>
		///<param name="_punishCommFlg"></param>
		///<param name="_punishCommDate"></param>
		///<param name="_punishCommEndDate"></param>
		///<param name="_penaltyRelatedFlg"></param>
		///<param name="_semesterNo"></param>
		///<param name="_absenceFlg"></param>
		///<param name="_execFlg"></param>
		///<param name="_exeFlgReg"></param>
		///<param name="_warningNo"></param>
		///<param name="_edStudCheatId"></param>
		///<param name="_witness">الشهود</param>
		///<param name="_gsCodeApprovalId">صلاحية</param>
		///<param name="_approvedByName">الامر بالعقوبة</param>
		///<param name="_attchdDocPath"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static EdStudViol CreateEdStudViol(System.Decimal _edStudViolId, System.Decimal _edStudId, System.Decimal? _gsCdeCampusId, 
			System.Decimal? _scBuildingId, System.DateTime _violDate, System.Decimal _gsCdeViolId, 
			System.Decimal? _groupId, System.Decimal? _gsCdePenaltyId, System.DateTime? _pnltyDate, 
			System.DateTime? _violFrom, System.DateTime? _violTo, System.DateTime? _pnltyFrom, System.DateTime? _pnltyTo, 
			System.Decimal? _bhvrMark, System.Decimal? _attndMark, System.DateTime? _dropDate, System.String _notes, 
			System.Decimal? _erpOrgTreeFromId, System.Decimal? _erpOrgTreeToId, System.Decimal _edAcadYearId, 
			System.Decimal _edCodeSemesterId, System.Decimal? _violSerial, System.Decimal? _banFee, 
			System.Decimal? _banFeePayFlag, System.Decimal _dropFlg, System.Decimal? _edCodeSemesterStopFromId, 
			System.Decimal? _edAcadYearStopFromId, System.Decimal? _edCodeSemesterStopToId, System.Decimal? _edAcadYearStopToId, 
			System.Decimal _appealFlg, System.Decimal? _otherFlag, System.String _otherSite, System.Decimal _gsCdeViolCatId, 
			System.Decimal? _investigationCommInOut, System.DateTime? _investigationDate, System.DateTime? _investigationEndDate, 
			System.String _investigationRecommendation, System.Decimal? _approvedBy, System.Decimal? _cancelFlg, 
			System.Decimal? _punishCommFlg, System.DateTime? _punishCommDate, System.DateTime? _punishCommEndDate, 
			System.Decimal? _penaltyRelatedFlg, System.Decimal? _semesterNo, System.Decimal? _absenceFlg, 
			System.Decimal? _execFlg, System.Decimal? _exeFlgReg, System.Decimal _warningNo, System.Decimal? _edStudCheatId, 
			System.String _witness, System.Decimal? _gsCodeApprovalId, System.String _approvedByName, 
			System.String _attchdDocPath, System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			EdStudViol newEdStudViol = new EdStudViol();
			newEdStudViol.EdStudViolId = _edStudViolId;
			newEdStudViol.EdStudId = _edStudId;
			newEdStudViol.GsCdeCampusId = _gsCdeCampusId;
			newEdStudViol.ScBuildingId = _scBuildingId;
			newEdStudViol.ViolDate = _violDate;
			newEdStudViol.GsCdeViolId = _gsCdeViolId;
			newEdStudViol.GroupId = _groupId;
			newEdStudViol.GsCdePenaltyId = _gsCdePenaltyId;
			newEdStudViol.PnltyDate = _pnltyDate;
			newEdStudViol.ViolFrom = _violFrom;
			newEdStudViol.ViolTo = _violTo;
			newEdStudViol.PnltyFrom = _pnltyFrom;
			newEdStudViol.PnltyTo = _pnltyTo;
			newEdStudViol.BhvrMark = _bhvrMark;
			newEdStudViol.AttndMark = _attndMark;
			newEdStudViol.DropDate = _dropDate;
			newEdStudViol.Notes = _notes;
			newEdStudViol.ErpOrgTreeFromId = _erpOrgTreeFromId;
			newEdStudViol.ErpOrgTreeToId = _erpOrgTreeToId;
			newEdStudViol.EdAcadYearId = _edAcadYearId;
			newEdStudViol.EdCodeSemesterId = _edCodeSemesterId;
			newEdStudViol.ViolSerial = _violSerial;
			newEdStudViol.BanFee = _banFee;
			newEdStudViol.BanFeePayFlag = _banFeePayFlag;
			newEdStudViol.DropFlg = _dropFlg;
			newEdStudViol.EdCodeSemesterStopFromId = _edCodeSemesterStopFromId;
			newEdStudViol.EdAcadYearStopFromId = _edAcadYearStopFromId;
			newEdStudViol.EdCodeSemesterStopToId = _edCodeSemesterStopToId;
			newEdStudViol.EdAcadYearStopToId = _edAcadYearStopToId;
			newEdStudViol.AppealFlg = _appealFlg;
			newEdStudViol.OtherFlag = _otherFlag;
			newEdStudViol.OtherSite = _otherSite;
			newEdStudViol.GsCdeViolCatId = _gsCdeViolCatId;
			newEdStudViol.InvestigationCommInOut = _investigationCommInOut;
			newEdStudViol.InvestigationDate = _investigationDate;
			newEdStudViol.InvestigationEndDate = _investigationEndDate;
			newEdStudViol.InvestigationRecommendation = _investigationRecommendation;
			newEdStudViol.ApprovedBy = _approvedBy;
			newEdStudViol.CancelFlg = _cancelFlg;
			newEdStudViol.PunishCommFlg = _punishCommFlg;
			newEdStudViol.PunishCommDate = _punishCommDate;
			newEdStudViol.PunishCommEndDate = _punishCommEndDate;
			newEdStudViol.PenaltyRelatedFlg = _penaltyRelatedFlg;
			newEdStudViol.SemesterNo = _semesterNo;
			newEdStudViol.AbsenceFlg = _absenceFlg;
			newEdStudViol.ExecFlg = _execFlg;
			newEdStudViol.ExeFlgReg = _exeFlgReg;
			newEdStudViol.WarningNo = _warningNo;
			newEdStudViol.EdStudCheatId = _edStudCheatId;
			newEdStudViol.Witness = _witness;
			newEdStudViol.GsCodeApprovalId = _gsCodeApprovalId;
			newEdStudViol.ApprovedByName = _approvedByName;
			newEdStudViol.AttchdDocPath = _attchdDocPath;
			newEdStudViol.SeUserId = _seUserId;
			newEdStudViol.LastDate = _lastDate;
			return newEdStudViol;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdStudViolId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdStudViolId
		{
			get
			{
				return this.entityData.EdStudViolId; 
			}
			
			set
			{
				if (this.entityData.EdStudViolId == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.EdStudViolId, this.entityData.EdStudViolId);
				this.entityData.EdStudViolId = value;
				this.EntityId.EdStudViolId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.EdStudViolId, this.entityData.EdStudViolId);
				OnPropertyChanged("EdStudViolId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_STUD_VIOL_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ED_STUD_VIOL_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdStudViolId
		{
			get { return this.entityData.OriginalEdStudViolId; }
			set { this.entityData.OriginalEdStudViolId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCdeCampusId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCdeCampusIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCdeCampusId
		{
			get
			{
				return this.entityData.GsCdeCampusId; 
			}
			
			set
			{
				if (this.entityData.GsCdeCampusId == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.GsCdeCampusId, this.entityData.GsCdeCampusId);
				this.entityData.GsCdeCampusId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.GsCdeCampusId, this.entityData.GsCdeCampusId);
				OnPropertyChanged("GsCdeCampusId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScBuildingId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScBuildingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScBuildingId
		{
			get
			{
				return this.entityData.ScBuildingId; 
			}
			
			set
			{
				if (this.entityData.ScBuildingId == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.ScBuildingId, this.entityData.ScBuildingId);
				this.entityData.ScBuildingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.ScBuildingId, this.entityData.ScBuildingId);
				OnPropertyChanged("ScBuildingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ViolDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ViolDate
		{
			get
			{
				return this.entityData.ViolDate; 
			}
			
			set
			{
				if (this.entityData.ViolDate == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.ViolDate, this.entityData.ViolDate);
				this.entityData.ViolDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.ViolDate, this.entityData.ViolDate);
				OnPropertyChanged("ViolDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCdeViolId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsCdeViolId
		{
			get
			{
				return this.entityData.GsCdeViolId; 
			}
			
			set
			{
				if (this.entityData.GsCdeViolId == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.GsCdeViolId, this.entityData.GsCdeViolId);
				this.entityData.GsCdeViolId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.GsCdeViolId, this.entityData.GsCdeViolId);
				OnPropertyChanged("GsCdeViolId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GroupId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGroupIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GroupId
		{
			get
			{
				return this.entityData.GroupId; 
			}
			
			set
			{
				if (this.entityData.GroupId == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.GroupId, this.entityData.GroupId);
				this.entityData.GroupId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.GroupId, this.entityData.GroupId);
				OnPropertyChanged("GroupId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCdePenaltyId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCdePenaltyIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCdePenaltyId
		{
			get
			{
				return this.entityData.GsCdePenaltyId; 
			}
			
			set
			{
				if (this.entityData.GsCdePenaltyId == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.GsCdePenaltyId, this.entityData.GsCdePenaltyId);
				this.entityData.GsCdePenaltyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.GsCdePenaltyId, this.entityData.GsCdePenaltyId);
				OnPropertyChanged("GsCdePenaltyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PnltyDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsPnltyDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? PnltyDate
		{
			get
			{
				return this.entityData.PnltyDate; 
			}
			
			set
			{
				if (this.entityData.PnltyDate == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.PnltyDate, this.entityData.PnltyDate);
				this.entityData.PnltyDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.PnltyDate, this.entityData.PnltyDate);
				OnPropertyChanged("PnltyDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ViolFrom property. 
		///		تاريخ العقوبة من
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsViolFromNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ العقوبة من"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ViolFrom
		{
			get
			{
				return this.entityData.ViolFrom; 
			}
			
			set
			{
				if (this.entityData.ViolFrom == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.ViolFrom, this.entityData.ViolFrom);
				this.entityData.ViolFrom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.ViolFrom, this.entityData.ViolFrom);
				OnPropertyChanged("ViolFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ViolTo property. 
		///		تاريخ العقوبة الى
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsViolToNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ العقوبة الى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ViolTo
		{
			get
			{
				return this.entityData.ViolTo; 
			}
			
			set
			{
				if (this.entityData.ViolTo == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.ViolTo, this.entityData.ViolTo);
				this.entityData.ViolTo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.ViolTo, this.entityData.ViolTo);
				OnPropertyChanged("ViolTo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PnltyFrom property. 
		///		تاريخ العقوبة من
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsPnltyFromNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ العقوبة من"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? PnltyFrom
		{
			get
			{
				return this.entityData.PnltyFrom; 
			}
			
			set
			{
				if (this.entityData.PnltyFrom == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.PnltyFrom, this.entityData.PnltyFrom);
				this.entityData.PnltyFrom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.PnltyFrom, this.entityData.PnltyFrom);
				OnPropertyChanged("PnltyFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PnltyTo property. 
		///		تاريخ العقوبة الى
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsPnltyToNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ العقوبة الى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? PnltyTo
		{
			get
			{
				return this.entityData.PnltyTo; 
			}
			
			set
			{
				if (this.entityData.PnltyTo == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.PnltyTo, this.entityData.PnltyTo);
				this.entityData.PnltyTo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.PnltyTo, this.entityData.PnltyTo);
				OnPropertyChanged("PnltyTo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BhvrMark property. 
		///		خصم درجة سلوك
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsBhvrMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"خصم درجة سلوك"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? BhvrMark
		{
			get
			{
				return this.entityData.BhvrMark; 
			}
			
			set
			{
				if (this.entityData.BhvrMark == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.BhvrMark, this.entityData.BhvrMark);
				this.entityData.BhvrMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.BhvrMark, this.entityData.BhvrMark);
				OnPropertyChanged("BhvrMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AttndMark property. 
		///		خصم درجة مواظبة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAttndMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"خصم درجة مواظبة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AttndMark
		{
			get
			{
				return this.entityData.AttndMark; 
			}
			
			set
			{
				if (this.entityData.AttndMark == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.AttndMark, this.entityData.AttndMark);
				this.entityData.AttndMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.AttndMark, this.entityData.AttndMark);
				OnPropertyChanged("AttndMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DropDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsDropDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DropDate
		{
			get
			{
				return this.entityData.DropDate; 
			}
			
			set
			{
				if (this.entityData.DropDate == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.DropDate, this.entityData.DropDate);
				this.entityData.DropDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.DropDate, this.entityData.DropDate);
				OnPropertyChanged("DropDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ErpOrgTreeFromId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsErpOrgTreeFromIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ErpOrgTreeFromId
		{
			get
			{
				return this.entityData.ErpOrgTreeFromId; 
			}
			
			set
			{
				if (this.entityData.ErpOrgTreeFromId == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.ErpOrgTreeFromId, this.entityData.ErpOrgTreeFromId);
				this.entityData.ErpOrgTreeFromId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.ErpOrgTreeFromId, this.entityData.ErpOrgTreeFromId);
				OnPropertyChanged("ErpOrgTreeFromId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ErpOrgTreeToId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsErpOrgTreeToIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ErpOrgTreeToId
		{
			get
			{
				return this.entityData.ErpOrgTreeToId; 
			}
			
			set
			{
				if (this.entityData.ErpOrgTreeToId == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.ErpOrgTreeToId, this.entityData.ErpOrgTreeToId);
				this.entityData.ErpOrgTreeToId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.ErpOrgTreeToId, this.entityData.ErpOrgTreeToId);
				OnPropertyChanged("ErpOrgTreeToId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ViolSerial property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsViolSerialNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ViolSerial
		{
			get
			{
				return this.entityData.ViolSerial; 
			}
			
			set
			{
				if (this.entityData.ViolSerial == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.ViolSerial, this.entityData.ViolSerial);
				this.entityData.ViolSerial = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.ViolSerial, this.entityData.ViolSerial);
				OnPropertyChanged("ViolSerial");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BanFee property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsBanFeeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? BanFee
		{
			get
			{
				return this.entityData.BanFee; 
			}
			
			set
			{
				if (this.entityData.BanFee == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.BanFee, this.entityData.BanFee);
				this.entityData.BanFee = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.BanFee, this.entityData.BanFee);
				OnPropertyChanged("BanFee");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BanFeePayFlag property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsBanFeePayFlagNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? BanFeePayFlag
		{
			get
			{
				return this.entityData.BanFeePayFlag; 
			}
			
			set
			{
				if (this.entityData.BanFeePayFlag == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.BanFeePayFlag, this.entityData.BanFeePayFlag);
				this.entityData.BanFeePayFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.BanFeePayFlag, this.entityData.BanFeePayFlag);
				OnPropertyChanged("BanFeePayFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DropFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal DropFlg
		{
			get
			{
				return this.entityData.DropFlg; 
			}
			
			set
			{
				if (this.entityData.DropFlg == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.DropFlg, this.entityData.DropFlg);
				this.entityData.DropFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.DropFlg, this.entityData.DropFlg);
				OnPropertyChanged("DropFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterStopFromId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeSemesterStopFromIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeSemesterStopFromId
		{
			get
			{
				return this.entityData.EdCodeSemesterStopFromId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterStopFromId == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.EdCodeSemesterStopFromId, this.entityData.EdCodeSemesterStopFromId);
				this.entityData.EdCodeSemesterStopFromId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.EdCodeSemesterStopFromId, this.entityData.EdCodeSemesterStopFromId);
				OnPropertyChanged("EdCodeSemesterStopFromId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearStopFromId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdAcadYearStopFromIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdAcadYearStopFromId
		{
			get
			{
				return this.entityData.EdAcadYearStopFromId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearStopFromId == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.EdAcadYearStopFromId, this.entityData.EdAcadYearStopFromId);
				this.entityData.EdAcadYearStopFromId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.EdAcadYearStopFromId, this.entityData.EdAcadYearStopFromId);
				OnPropertyChanged("EdAcadYearStopFromId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterStopToId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeSemesterStopToIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeSemesterStopToId
		{
			get
			{
				return this.entityData.EdCodeSemesterStopToId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterStopToId == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.EdCodeSemesterStopToId, this.entityData.EdCodeSemesterStopToId);
				this.entityData.EdCodeSemesterStopToId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.EdCodeSemesterStopToId, this.entityData.EdCodeSemesterStopToId);
				OnPropertyChanged("EdCodeSemesterStopToId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearStopToId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdAcadYearStopToIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdAcadYearStopToId
		{
			get
			{
				return this.entityData.EdAcadYearStopToId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearStopToId == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.EdAcadYearStopToId, this.entityData.EdAcadYearStopToId);
				this.entityData.EdAcadYearStopToId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.EdAcadYearStopToId, this.entityData.EdAcadYearStopToId);
				OnPropertyChanged("EdAcadYearStopToId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AppealFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AppealFlg
		{
			get
			{
				return this.entityData.AppealFlg; 
			}
			
			set
			{
				if (this.entityData.AppealFlg == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.AppealFlg, this.entityData.AppealFlg);
				this.entityData.AppealFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.AppealFlg, this.entityData.AppealFlg);
				OnPropertyChanged("AppealFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OtherFlag property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsOtherFlagNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? OtherFlag
		{
			get
			{
				return this.entityData.OtherFlag; 
			}
			
			set
			{
				if (this.entityData.OtherFlag == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.OtherFlag, this.entityData.OtherFlag);
				this.entityData.OtherFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.OtherFlag, this.entityData.OtherFlag);
				OnPropertyChanged("OtherFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OtherSite property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String OtherSite
		{
			get
			{
				return this.entityData.OtherSite; 
			}
			
			set
			{
				if (this.entityData.OtherSite == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.OtherSite, this.entityData.OtherSite);
				this.entityData.OtherSite = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.OtherSite, this.entityData.OtherSite);
				OnPropertyChanged("OtherSite");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCdeViolCatId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsCdeViolCatId
		{
			get
			{
				return this.entityData.GsCdeViolCatId; 
			}
			
			set
			{
				if (this.entityData.GsCdeViolCatId == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.GsCdeViolCatId, this.entityData.GsCdeViolCatId);
				this.entityData.GsCdeViolCatId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.GsCdeViolCatId, this.entityData.GsCdeViolCatId);
				OnPropertyChanged("GsCdeViolCatId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InvestigationCommInOut property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsInvestigationCommInOutNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? InvestigationCommInOut
		{
			get
			{
				return this.entityData.InvestigationCommInOut; 
			}
			
			set
			{
				if (this.entityData.InvestigationCommInOut == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.InvestigationCommInOut, this.entityData.InvestigationCommInOut);
				this.entityData.InvestigationCommInOut = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.InvestigationCommInOut, this.entityData.InvestigationCommInOut);
				OnPropertyChanged("InvestigationCommInOut");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InvestigationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsInvestigationDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? InvestigationDate
		{
			get
			{
				return this.entityData.InvestigationDate; 
			}
			
			set
			{
				if (this.entityData.InvestigationDate == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.InvestigationDate, this.entityData.InvestigationDate);
				this.entityData.InvestigationDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.InvestigationDate, this.entityData.InvestigationDate);
				OnPropertyChanged("InvestigationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InvestigationEndDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsInvestigationEndDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? InvestigationEndDate
		{
			get
			{
				return this.entityData.InvestigationEndDate; 
			}
			
			set
			{
				if (this.entityData.InvestigationEndDate == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.InvestigationEndDate, this.entityData.InvestigationEndDate);
				this.entityData.InvestigationEndDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.InvestigationEndDate, this.entityData.InvestigationEndDate);
				OnPropertyChanged("InvestigationEndDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InvestigationRecommendation property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String InvestigationRecommendation
		{
			get
			{
				return this.entityData.InvestigationRecommendation; 
			}
			
			set
			{
				if (this.entityData.InvestigationRecommendation == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.InvestigationRecommendation, this.entityData.InvestigationRecommendation);
				this.entityData.InvestigationRecommendation = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.InvestigationRecommendation, this.entityData.InvestigationRecommendation);
				OnPropertyChanged("InvestigationRecommendation");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApprovedBy property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsApprovedByNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ApprovedBy
		{
			get
			{
				return this.entityData.ApprovedBy; 
			}
			
			set
			{
				if (this.entityData.ApprovedBy == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.ApprovedBy, this.entityData.ApprovedBy);
				this.entityData.ApprovedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.ApprovedBy, this.entityData.ApprovedBy);
				OnPropertyChanged("ApprovedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CancelFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCancelFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CancelFlg
		{
			get
			{
				return this.entityData.CancelFlg; 
			}
			
			set
			{
				if (this.entityData.CancelFlg == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.CancelFlg, this.entityData.CancelFlg);
				this.entityData.CancelFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.CancelFlg, this.entityData.CancelFlg);
				OnPropertyChanged("CancelFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PunishCommFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPunishCommFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PunishCommFlg
		{
			get
			{
				return this.entityData.PunishCommFlg; 
			}
			
			set
			{
				if (this.entityData.PunishCommFlg == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.PunishCommFlg, this.entityData.PunishCommFlg);
				this.entityData.PunishCommFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.PunishCommFlg, this.entityData.PunishCommFlg);
				OnPropertyChanged("PunishCommFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PunishCommDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsPunishCommDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? PunishCommDate
		{
			get
			{
				return this.entityData.PunishCommDate; 
			}
			
			set
			{
				if (this.entityData.PunishCommDate == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.PunishCommDate, this.entityData.PunishCommDate);
				this.entityData.PunishCommDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.PunishCommDate, this.entityData.PunishCommDate);
				OnPropertyChanged("PunishCommDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PunishCommEndDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsPunishCommEndDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? PunishCommEndDate
		{
			get
			{
				return this.entityData.PunishCommEndDate; 
			}
			
			set
			{
				if (this.entityData.PunishCommEndDate == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.PunishCommEndDate, this.entityData.PunishCommEndDate);
				this.entityData.PunishCommEndDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.PunishCommEndDate, this.entityData.PunishCommEndDate);
				OnPropertyChanged("PunishCommEndDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PenaltyRelatedFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPenaltyRelatedFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PenaltyRelatedFlg
		{
			get
			{
				return this.entityData.PenaltyRelatedFlg; 
			}
			
			set
			{
				if (this.entityData.PenaltyRelatedFlg == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.PenaltyRelatedFlg, this.entityData.PenaltyRelatedFlg);
				this.entityData.PenaltyRelatedFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.PenaltyRelatedFlg, this.entityData.PenaltyRelatedFlg);
				OnPropertyChanged("PenaltyRelatedFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SemesterNo property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSemesterNoNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SemesterNo
		{
			get
			{
				return this.entityData.SemesterNo; 
			}
			
			set
			{
				if (this.entityData.SemesterNo == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.SemesterNo, this.entityData.SemesterNo);
				this.entityData.SemesterNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.SemesterNo, this.entityData.SemesterNo);
				OnPropertyChanged("SemesterNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AbsenceFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAbsenceFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AbsenceFlg
		{
			get
			{
				return this.entityData.AbsenceFlg; 
			}
			
			set
			{
				if (this.entityData.AbsenceFlg == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.AbsenceFlg, this.entityData.AbsenceFlg);
				this.entityData.AbsenceFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.AbsenceFlg, this.entityData.AbsenceFlg);
				OnPropertyChanged("AbsenceFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExecFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsExecFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ExecFlg
		{
			get
			{
				return this.entityData.ExecFlg; 
			}
			
			set
			{
				if (this.entityData.ExecFlg == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.ExecFlg, this.entityData.ExecFlg);
				this.entityData.ExecFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.ExecFlg, this.entityData.ExecFlg);
				OnPropertyChanged("ExecFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExeFlgReg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsExeFlgRegNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ExeFlgReg
		{
			get
			{
				return this.entityData.ExeFlgReg; 
			}
			
			set
			{
				if (this.entityData.ExeFlgReg == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.ExeFlgReg, this.entityData.ExeFlgReg);
				this.entityData.ExeFlgReg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.ExeFlgReg, this.entityData.ExeFlgReg);
				OnPropertyChanged("ExeFlgReg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WarningNo property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal WarningNo
		{
			get
			{
				return this.entityData.WarningNo; 
			}
			
			set
			{
				if (this.entityData.WarningNo == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.WarningNo, this.entityData.WarningNo);
				this.entityData.WarningNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.WarningNo, this.entityData.WarningNo);
				OnPropertyChanged("WarningNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudCheatId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdStudCheatIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdStudCheatId
		{
			get
			{
				return this.entityData.EdStudCheatId; 
			}
			
			set
			{
				if (this.entityData.EdStudCheatId == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.EdStudCheatId, this.entityData.EdStudCheatId);
				this.entityData.EdStudCheatId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.EdStudCheatId, this.entityData.EdStudCheatId);
				OnPropertyChanged("EdStudCheatId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Witness property. 
		///		الشهود
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"الشهود"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 300)]
		public virtual System.String Witness
		{
			get
			{
				return this.entityData.Witness; 
			}
			
			set
			{
				if (this.entityData.Witness == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.Witness, this.entityData.Witness);
				this.entityData.Witness = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.Witness, this.entityData.Witness);
				OnPropertyChanged("Witness");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeApprovalId property. 
		///		صلاحية
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCodeApprovalIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"صلاحية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCodeApprovalId
		{
			get
			{
				return this.entityData.GsCodeApprovalId; 
			}
			
			set
			{
				if (this.entityData.GsCodeApprovalId == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.GsCodeApprovalId, this.entityData.GsCodeApprovalId);
				this.entityData.GsCodeApprovalId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.GsCodeApprovalId, this.entityData.GsCodeApprovalId);
				OnPropertyChanged("GsCodeApprovalId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApprovedByName property. 
		///		الامر بالعقوبة
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"الامر بالعقوبة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String ApprovedByName
		{
			get
			{
				return this.entityData.ApprovedByName; 
			}
			
			set
			{
				if (this.entityData.ApprovedByName == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.ApprovedByName, this.entityData.ApprovedByName);
				this.entityData.ApprovedByName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.ApprovedByName, this.entityData.ApprovedByName);
				OnPropertyChanged("ApprovedByName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AttchdDocPath property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String AttchdDocPath
		{
			get
			{
				return this.entityData.AttchdDocPath; 
			}
			
			set
			{
				if (this.entityData.AttchdDocPath == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.AttchdDocPath, this.entityData.AttchdDocPath);
				this.entityData.AttchdDocPath = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.AttchdDocPath, this.entityData.AttchdDocPath);
				OnPropertyChanged("AttchdDocPath");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(EdStudViolColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudViolColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearStopFromId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearStopFromIdSource
      	{
            get { return entityData.EdAcadYearStopFromIdSource; }
            set { entityData.EdAcadYearStopFromIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearStopToId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearStopToIdSource
      	{
            get { return entityData.EdAcadYearStopToIdSource; }
            set { entityData.EdAcadYearStopToIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterStopFromId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterStopFromIdSource
      	{
            get { return entityData.EdCodeSemesterStopFromIdSource; }
            set { entityData.EdCodeSemesterStopFromIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterStopToId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterStopToIdSource
      	{
            get { return entityData.EdCodeSemesterStopToIdSource; }
            set { entityData.EdCodeSemesterStopToIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStudCheat"/>.
		/// </summary>
		/// <value>The source EdStudCheat for EdStudCheatId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStudCheat EdStudCheatIdSource
      	{
            get { return entityData.EdStudCheatIdSource; }
            set { entityData.EdStudCheatIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ErpOrgTree"/>.
		/// </summary>
		/// <value>The source ErpOrgTree for ErpOrgTreeToId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ErpOrgTree ErpOrgTreeToIdSource
      	{
            get { return entityData.ErpOrgTreeToIdSource; }
            set { entityData.ErpOrgTreeToIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ErpOrgTree"/>.
		/// </summary>
		/// <value>The source ErpOrgTree for ErpOrgTreeFromId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ErpOrgTree ErpOrgTreeFromIdSource
      	{
            get { return entityData.ErpOrgTreeFromIdSource; }
            set { entityData.ErpOrgTreeFromIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCdeCampus"/>.
		/// </summary>
		/// <value>The source GsCdeCampus for GsCdeCampusId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCdeCampus GsCdeCampusIdSource
      	{
            get { return entityData.GsCdeCampusIdSource; }
            set { entityData.GsCdeCampusIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCdePenalty"/>.
		/// </summary>
		/// <value>The source GsCdePenalty for GsCdePenaltyId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCdePenalty GsCdePenaltyIdSource
      	{
            get { return entityData.GsCdePenaltyIdSource; }
            set { entityData.GsCdePenaltyIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCdeViol"/>.
		/// </summary>
		/// <value>The source GsCdeViol for GsCdeViolId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCdeViol GsCdeViolIdSource
      	{
            get { return entityData.GsCdeViolIdSource; }
            set { entityData.GsCdeViolIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCdeViolCat"/>.
		/// </summary>
		/// <value>The source GsCdeViolCat for GsCdeViolCatId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCdeViolCat GsCdeViolCatIdSource
      	{
            get { return entityData.GsCdeViolCatIdSource; }
            set { entityData.GsCdeViolCatIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeApproval"/>.
		/// </summary>
		/// <value>The source GsCodeApproval for GsCodeApprovalId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeApproval GsCodeApprovalIdSource
      	{
            get { return entityData.GsCodeApprovalIdSource; }
            set { entityData.GsCodeApprovalIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScBuilding"/>.
		/// </summary>
		/// <value>The source ScBuilding for ScBuildingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScBuilding ScBuildingIdSource
      	{
            get { return entityData.ScBuildingIdSource; }
            set { entityData.ScBuildingIdSource = value; }
      	}
		#endregion
		
		#region Children Collections

		/// <summary>
		///	Holds a EdStudViolAppeal object
		///	which is related to this object through the relation EdStudViolAppeal
		/// </summary>
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStudViolAppeal EdStudViolAppeal
		{
			get { return entityData.EdStudViolAppeal; }
			set { entityData.EdStudViolAppeal = value; }	
		}
	
		/// <summary>
		///	Holds a collection of MltStudBhvrAttndc objects
		///	which are related to this object through the relation FK_MLT_STUD_BHVR_ATTNDC_ED_STUD_VIOL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<MltStudBhvrAttndc> MltStudBhvrAttndcCollection
		{
			get { return entityData.MltStudBhvrAttndcCollection; }
			set { entityData.MltStudBhvrAttndcCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of GsAttchdDoc objects
		///	which are related to this object through the relation FK_GS_ATTCHD_DOC_ED_STUD_VIOL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GsAttchdDoc> GsAttchdDocCollectionGetByEdStudViolId
		{
			get { return entityData.GsAttchdDocCollectionGetByEdStudViolId; }
			set { entityData.GsAttchdDocCollectionGetByEdStudViolId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of GsAttchdDoc objects
		///	which are related to this object through the relation FK_GS_ATTCHD_DOC_ED_STUD_VIOL1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GsAttchdDoc> GsAttchdDocCollectionGetByEdStudViolInvestId
		{
			get { return entityData.GsAttchdDocCollectionGetByEdStudViolInvestId; }
			set { entityData.GsAttchdDocCollectionGetByEdStudViolInvestId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudPnltyCourse objects
		///	which are related to this object through the relation FK_ED_STUD_PNLTY_COURSE_ED_STUD_VIOL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudPnltyCourse> EdStudPnltyCourseCollection
		{
			get { return entityData.EdStudPnltyCourseCollection; }
			set { entityData.EdStudPnltyCourseCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("OtherSite", "Other Site", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("InvestigationRecommendation", "Investigation Recommendation", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Witness", "Witness", 300));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ApprovedByName", "Approved By Name", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_STUD_VIOL"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_STUD_VIOL_ID", "ED_STUD_ID", "GS_CDE_CAMPUS_ID", "SC_BUILDING_ID", "VIOL_DATE", "GS_CDE_VIOL_ID", "GROUP_ID", "GS_CDE_PENALTY_ID", "PNLTY_DATE", "VIOL_FROM", "VIOL_TO", "PNLTY_FROM", "PNLTY_TO", "BHVR_MARK", "ATTND_MARK", "DROP_DATE", "NOTES", "ERP_ORG_TREE_FROM_ID", "ERP_ORG_TREE_TO_ID", "ED_ACAD_YEAR_ID", "ED_CODE_SEMESTER_ID", "VIOL_SERIAL", "BAN_FEE", "BAN_FEE_PAY_FLAG", "DROP_FLG", "ED_CODE_SEMESTER_STOP_FROM_ID", "ED_ACAD_YEAR_STOP_FROM_ID", "ED_CODE_SEMESTER_STOP_TO_ID", "ED_ACAD_YEAR_STOP_TO_ID", "APPEAL_FLG", "OTHER_FLAG", "OTHER_SITE", "GS_CDE_VIOL_CAT_ID", "INVESTIGATION_COMM_IN_OUT", "INVESTIGATION_DATE", "INVESTIGATION_END_DATE", "INVESTIGATION_RECOMMENDATION", "APPROVED_BY", "CANCEL_FLG", "PUNISH_COMM_FLG", "PUNISH_COMM_DATE", "PUNISH_COMM_END_DATE", "PENALTY_RELATED_FLG", "SEMESTER_NO", "ABSENCE_FLG", "EXEC_FLG", "EXE_FLG_REG", "WARNING_NO", "ED_STUD_CHEAT_ID", "WITNESS", "GS_CODE_APPROVAL_ID", "APPROVED_BY_NAME", "ATTCHD_DOC_PATH", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdStudViolEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdStudViol) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdStudViol>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdStudViol);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdStudViol Entity 
		///</summary>
		protected virtual EdStudViol Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdStudViol copy = new EdStudViol();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdStudViolId = this.EdStudViolId;
					copy.OriginalEdStudViolId = this.OriginalEdStudViolId;
				copy.EdStudId = this.EdStudId;
				copy.GsCdeCampusId = this.GsCdeCampusId;
				copy.ScBuildingId = this.ScBuildingId;
				copy.ViolDate = this.ViolDate;
				copy.GsCdeViolId = this.GsCdeViolId;
				copy.GroupId = this.GroupId;
				copy.GsCdePenaltyId = this.GsCdePenaltyId;
				copy.PnltyDate = this.PnltyDate;
				copy.ViolFrom = this.ViolFrom;
				copy.ViolTo = this.ViolTo;
				copy.PnltyFrom = this.PnltyFrom;
				copy.PnltyTo = this.PnltyTo;
				copy.BhvrMark = this.BhvrMark;
				copy.AttndMark = this.AttndMark;
				copy.DropDate = this.DropDate;
				copy.Notes = this.Notes;
				copy.ErpOrgTreeFromId = this.ErpOrgTreeFromId;
				copy.ErpOrgTreeToId = this.ErpOrgTreeToId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.ViolSerial = this.ViolSerial;
				copy.BanFee = this.BanFee;
				copy.BanFeePayFlag = this.BanFeePayFlag;
				copy.DropFlg = this.DropFlg;
				copy.EdCodeSemesterStopFromId = this.EdCodeSemesterStopFromId;
				copy.EdAcadYearStopFromId = this.EdAcadYearStopFromId;
				copy.EdCodeSemesterStopToId = this.EdCodeSemesterStopToId;
				copy.EdAcadYearStopToId = this.EdAcadYearStopToId;
				copy.AppealFlg = this.AppealFlg;
				copy.OtherFlag = this.OtherFlag;
				copy.OtherSite = this.OtherSite;
				copy.GsCdeViolCatId = this.GsCdeViolCatId;
				copy.InvestigationCommInOut = this.InvestigationCommInOut;
				copy.InvestigationDate = this.InvestigationDate;
				copy.InvestigationEndDate = this.InvestigationEndDate;
				copy.InvestigationRecommendation = this.InvestigationRecommendation;
				copy.ApprovedBy = this.ApprovedBy;
				copy.CancelFlg = this.CancelFlg;
				copy.PunishCommFlg = this.PunishCommFlg;
				copy.PunishCommDate = this.PunishCommDate;
				copy.PunishCommEndDate = this.PunishCommEndDate;
				copy.PenaltyRelatedFlg = this.PenaltyRelatedFlg;
				copy.SemesterNo = this.SemesterNo;
				copy.AbsenceFlg = this.AbsenceFlg;
				copy.ExecFlg = this.ExecFlg;
				copy.ExeFlgReg = this.ExeFlgReg;
				copy.WarningNo = this.WarningNo;
				copy.EdStudCheatId = this.EdStudCheatId;
				copy.Witness = this.Witness;
				copy.GsCodeApprovalId = this.GsCodeApprovalId;
				copy.ApprovedByName = this.ApprovedByName;
				copy.AttchdDocPath = this.AttchdDocPath;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdAcadYearStopFromIdSource != null && existingCopies.Contains(this.EdAcadYearStopFromIdSource))
				copy.EdAcadYearStopFromIdSource = existingCopies[this.EdAcadYearStopFromIdSource] as EdAcadYear;
			else
				copy.EdAcadYearStopFromIdSource = MakeCopyOf(this.EdAcadYearStopFromIdSource, existingCopies) as EdAcadYear;
			if (this.EdAcadYearStopToIdSource != null && existingCopies.Contains(this.EdAcadYearStopToIdSource))
				copy.EdAcadYearStopToIdSource = existingCopies[this.EdAcadYearStopToIdSource] as EdAcadYear;
			else
				copy.EdAcadYearStopToIdSource = MakeCopyOf(this.EdAcadYearStopToIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCodeSemesterStopFromIdSource != null && existingCopies.Contains(this.EdCodeSemesterStopFromIdSource))
				copy.EdCodeSemesterStopFromIdSource = existingCopies[this.EdCodeSemesterStopFromIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterStopFromIdSource = MakeCopyOf(this.EdCodeSemesterStopFromIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCodeSemesterStopToIdSource != null && existingCopies.Contains(this.EdCodeSemesterStopToIdSource))
				copy.EdCodeSemesterStopToIdSource = existingCopies[this.EdCodeSemesterStopToIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterStopToIdSource = MakeCopyOf(this.EdCodeSemesterStopToIdSource, existingCopies) as EdCodeSemester;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.EdStudCheatIdSource != null && existingCopies.Contains(this.EdStudCheatIdSource))
				copy.EdStudCheatIdSource = existingCopies[this.EdStudCheatIdSource] as EdStudCheat;
			else
				copy.EdStudCheatIdSource = MakeCopyOf(this.EdStudCheatIdSource, existingCopies) as EdStudCheat;
			if (this.ErpOrgTreeToIdSource != null && existingCopies.Contains(this.ErpOrgTreeToIdSource))
				copy.ErpOrgTreeToIdSource = existingCopies[this.ErpOrgTreeToIdSource] as ErpOrgTree;
			else
				copy.ErpOrgTreeToIdSource = MakeCopyOf(this.ErpOrgTreeToIdSource, existingCopies) as ErpOrgTree;
			if (this.ErpOrgTreeFromIdSource != null && existingCopies.Contains(this.ErpOrgTreeFromIdSource))
				copy.ErpOrgTreeFromIdSource = existingCopies[this.ErpOrgTreeFromIdSource] as ErpOrgTree;
			else
				copy.ErpOrgTreeFromIdSource = MakeCopyOf(this.ErpOrgTreeFromIdSource, existingCopies) as ErpOrgTree;
			if (this.GsCdeCampusIdSource != null && existingCopies.Contains(this.GsCdeCampusIdSource))
				copy.GsCdeCampusIdSource = existingCopies[this.GsCdeCampusIdSource] as GsCdeCampus;
			else
				copy.GsCdeCampusIdSource = MakeCopyOf(this.GsCdeCampusIdSource, existingCopies) as GsCdeCampus;
			if (this.GsCdePenaltyIdSource != null && existingCopies.Contains(this.GsCdePenaltyIdSource))
				copy.GsCdePenaltyIdSource = existingCopies[this.GsCdePenaltyIdSource] as GsCdePenalty;
			else
				copy.GsCdePenaltyIdSource = MakeCopyOf(this.GsCdePenaltyIdSource, existingCopies) as GsCdePenalty;
			if (this.GsCdeViolIdSource != null && existingCopies.Contains(this.GsCdeViolIdSource))
				copy.GsCdeViolIdSource = existingCopies[this.GsCdeViolIdSource] as GsCdeViol;
			else
				copy.GsCdeViolIdSource = MakeCopyOf(this.GsCdeViolIdSource, existingCopies) as GsCdeViol;
			if (this.GsCdeViolCatIdSource != null && existingCopies.Contains(this.GsCdeViolCatIdSource))
				copy.GsCdeViolCatIdSource = existingCopies[this.GsCdeViolCatIdSource] as GsCdeViolCat;
			else
				copy.GsCdeViolCatIdSource = MakeCopyOf(this.GsCdeViolCatIdSource, existingCopies) as GsCdeViolCat;
			if (this.GsCodeApprovalIdSource != null && existingCopies.Contains(this.GsCodeApprovalIdSource))
				copy.GsCodeApprovalIdSource = existingCopies[this.GsCodeApprovalIdSource] as GsCodeApproval;
			else
				copy.GsCodeApprovalIdSource = MakeCopyOf(this.GsCodeApprovalIdSource, existingCopies) as GsCodeApproval;
			if (this.ScBuildingIdSource != null && existingCopies.Contains(this.ScBuildingIdSource))
				copy.ScBuildingIdSource = existingCopies[this.ScBuildingIdSource] as ScBuilding;
			else
				copy.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource, existingCopies) as ScBuilding;
		
			//deep copy nested objects
			copy.EdStudViolAppeal = (EdStudViolAppeal) MakeCopyOf(this.EdStudViolAppeal, existingCopies); 
			copy.MltStudBhvrAttndcCollection = (TList<MltStudBhvrAttndc>) MakeCopyOf(this.MltStudBhvrAttndcCollection, existingCopies); 
			copy.GsAttchdDocCollectionGetByEdStudViolId = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollectionGetByEdStudViolId, existingCopies); 
			copy.GsAttchdDocCollectionGetByEdStudViolInvestId = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollectionGetByEdStudViolInvestId, existingCopies); 
			copy.EdStudPnltyCourseCollection = (TList<EdStudPnltyCourse>) MakeCopyOf(this.EdStudPnltyCourseCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdStudViol Entity 
		///</summary>
		public virtual EdStudViol Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdStudViol Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdStudViol DeepCopy()
		{
			return EntityHelper.Clone<EdStudViol>(this as EdStudViol);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdStudViolEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdStudViolEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdStudViolEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdStudViolColumn column)
		{
			switch(column)
			{
					case EdStudViolColumn.EdStudViolId:
					return entityData.EdStudViolId != _originalData.EdStudViolId;
					case EdStudViolColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case EdStudViolColumn.GsCdeCampusId:
					return entityData.GsCdeCampusId != _originalData.GsCdeCampusId;
					case EdStudViolColumn.ScBuildingId:
					return entityData.ScBuildingId != _originalData.ScBuildingId;
					case EdStudViolColumn.ViolDate:
					return entityData.ViolDate != _originalData.ViolDate;
					case EdStudViolColumn.GsCdeViolId:
					return entityData.GsCdeViolId != _originalData.GsCdeViolId;
					case EdStudViolColumn.GroupId:
					return entityData.GroupId != _originalData.GroupId;
					case EdStudViolColumn.GsCdePenaltyId:
					return entityData.GsCdePenaltyId != _originalData.GsCdePenaltyId;
					case EdStudViolColumn.PnltyDate:
					return entityData.PnltyDate != _originalData.PnltyDate;
					case EdStudViolColumn.ViolFrom:
					return entityData.ViolFrom != _originalData.ViolFrom;
					case EdStudViolColumn.ViolTo:
					return entityData.ViolTo != _originalData.ViolTo;
					case EdStudViolColumn.PnltyFrom:
					return entityData.PnltyFrom != _originalData.PnltyFrom;
					case EdStudViolColumn.PnltyTo:
					return entityData.PnltyTo != _originalData.PnltyTo;
					case EdStudViolColumn.BhvrMark:
					return entityData.BhvrMark != _originalData.BhvrMark;
					case EdStudViolColumn.AttndMark:
					return entityData.AttndMark != _originalData.AttndMark;
					case EdStudViolColumn.DropDate:
					return entityData.DropDate != _originalData.DropDate;
					case EdStudViolColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case EdStudViolColumn.ErpOrgTreeFromId:
					return entityData.ErpOrgTreeFromId != _originalData.ErpOrgTreeFromId;
					case EdStudViolColumn.ErpOrgTreeToId:
					return entityData.ErpOrgTreeToId != _originalData.ErpOrgTreeToId;
					case EdStudViolColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case EdStudViolColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case EdStudViolColumn.ViolSerial:
					return entityData.ViolSerial != _originalData.ViolSerial;
					case EdStudViolColumn.BanFee:
					return entityData.BanFee != _originalData.BanFee;
					case EdStudViolColumn.BanFeePayFlag:
					return entityData.BanFeePayFlag != _originalData.BanFeePayFlag;
					case EdStudViolColumn.DropFlg:
					return entityData.DropFlg != _originalData.DropFlg;
					case EdStudViolColumn.EdCodeSemesterStopFromId:
					return entityData.EdCodeSemesterStopFromId != _originalData.EdCodeSemesterStopFromId;
					case EdStudViolColumn.EdAcadYearStopFromId:
					return entityData.EdAcadYearStopFromId != _originalData.EdAcadYearStopFromId;
					case EdStudViolColumn.EdCodeSemesterStopToId:
					return entityData.EdCodeSemesterStopToId != _originalData.EdCodeSemesterStopToId;
					case EdStudViolColumn.EdAcadYearStopToId:
					return entityData.EdAcadYearStopToId != _originalData.EdAcadYearStopToId;
					case EdStudViolColumn.AppealFlg:
					return entityData.AppealFlg != _originalData.AppealFlg;
					case EdStudViolColumn.OtherFlag:
					return entityData.OtherFlag != _originalData.OtherFlag;
					case EdStudViolColumn.OtherSite:
					return entityData.OtherSite != _originalData.OtherSite;
					case EdStudViolColumn.GsCdeViolCatId:
					return entityData.GsCdeViolCatId != _originalData.GsCdeViolCatId;
					case EdStudViolColumn.InvestigationCommInOut:
					return entityData.InvestigationCommInOut != _originalData.InvestigationCommInOut;
					case EdStudViolColumn.InvestigationDate:
					return entityData.InvestigationDate != _originalData.InvestigationDate;
					case EdStudViolColumn.InvestigationEndDate:
					return entityData.InvestigationEndDate != _originalData.InvestigationEndDate;
					case EdStudViolColumn.InvestigationRecommendation:
					return entityData.InvestigationRecommendation != _originalData.InvestigationRecommendation;
					case EdStudViolColumn.ApprovedBy:
					return entityData.ApprovedBy != _originalData.ApprovedBy;
					case EdStudViolColumn.CancelFlg:
					return entityData.CancelFlg != _originalData.CancelFlg;
					case EdStudViolColumn.PunishCommFlg:
					return entityData.PunishCommFlg != _originalData.PunishCommFlg;
					case EdStudViolColumn.PunishCommDate:
					return entityData.PunishCommDate != _originalData.PunishCommDate;
					case EdStudViolColumn.PunishCommEndDate:
					return entityData.PunishCommEndDate != _originalData.PunishCommEndDate;
					case EdStudViolColumn.PenaltyRelatedFlg:
					return entityData.PenaltyRelatedFlg != _originalData.PenaltyRelatedFlg;
					case EdStudViolColumn.SemesterNo:
					return entityData.SemesterNo != _originalData.SemesterNo;
					case EdStudViolColumn.AbsenceFlg:
					return entityData.AbsenceFlg != _originalData.AbsenceFlg;
					case EdStudViolColumn.ExecFlg:
					return entityData.ExecFlg != _originalData.ExecFlg;
					case EdStudViolColumn.ExeFlgReg:
					return entityData.ExeFlgReg != _originalData.ExeFlgReg;
					case EdStudViolColumn.WarningNo:
					return entityData.WarningNo != _originalData.WarningNo;
					case EdStudViolColumn.EdStudCheatId:
					return entityData.EdStudCheatId != _originalData.EdStudCheatId;
					case EdStudViolColumn.Witness:
					return entityData.Witness != _originalData.Witness;
					case EdStudViolColumn.GsCodeApprovalId:
					return entityData.GsCodeApprovalId != _originalData.GsCodeApprovalId;
					case EdStudViolColumn.ApprovedByName:
					return entityData.ApprovedByName != _originalData.ApprovedByName;
					case EdStudViolColumn.AttchdDocPath:
					return entityData.AttchdDocPath != _originalData.AttchdDocPath;
					case EdStudViolColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case EdStudViolColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdStudViolColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdStudViolId != _originalData.EdStudViolId;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.GsCdeCampusId != _originalData.GsCdeCampusId;
			result = result || entityData.ScBuildingId != _originalData.ScBuildingId;
			result = result || entityData.ViolDate != _originalData.ViolDate;
			result = result || entityData.GsCdeViolId != _originalData.GsCdeViolId;
			result = result || entityData.GroupId != _originalData.GroupId;
			result = result || entityData.GsCdePenaltyId != _originalData.GsCdePenaltyId;
			result = result || entityData.PnltyDate != _originalData.PnltyDate;
			result = result || entityData.ViolFrom != _originalData.ViolFrom;
			result = result || entityData.ViolTo != _originalData.ViolTo;
			result = result || entityData.PnltyFrom != _originalData.PnltyFrom;
			result = result || entityData.PnltyTo != _originalData.PnltyTo;
			result = result || entityData.BhvrMark != _originalData.BhvrMark;
			result = result || entityData.AttndMark != _originalData.AttndMark;
			result = result || entityData.DropDate != _originalData.DropDate;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.ErpOrgTreeFromId != _originalData.ErpOrgTreeFromId;
			result = result || entityData.ErpOrgTreeToId != _originalData.ErpOrgTreeToId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.ViolSerial != _originalData.ViolSerial;
			result = result || entityData.BanFee != _originalData.BanFee;
			result = result || entityData.BanFeePayFlag != _originalData.BanFeePayFlag;
			result = result || entityData.DropFlg != _originalData.DropFlg;
			result = result || entityData.EdCodeSemesterStopFromId != _originalData.EdCodeSemesterStopFromId;
			result = result || entityData.EdAcadYearStopFromId != _originalData.EdAcadYearStopFromId;
			result = result || entityData.EdCodeSemesterStopToId != _originalData.EdCodeSemesterStopToId;
			result = result || entityData.EdAcadYearStopToId != _originalData.EdAcadYearStopToId;
			result = result || entityData.AppealFlg != _originalData.AppealFlg;
			result = result || entityData.OtherFlag != _originalData.OtherFlag;
			result = result || entityData.OtherSite != _originalData.OtherSite;
			result = result || entityData.GsCdeViolCatId != _originalData.GsCdeViolCatId;
			result = result || entityData.InvestigationCommInOut != _originalData.InvestigationCommInOut;
			result = result || entityData.InvestigationDate != _originalData.InvestigationDate;
			result = result || entityData.InvestigationEndDate != _originalData.InvestigationEndDate;
			result = result || entityData.InvestigationRecommendation != _originalData.InvestigationRecommendation;
			result = result || entityData.ApprovedBy != _originalData.ApprovedBy;
			result = result || entityData.CancelFlg != _originalData.CancelFlg;
			result = result || entityData.PunishCommFlg != _originalData.PunishCommFlg;
			result = result || entityData.PunishCommDate != _originalData.PunishCommDate;
			result = result || entityData.PunishCommEndDate != _originalData.PunishCommEndDate;
			result = result || entityData.PenaltyRelatedFlg != _originalData.PenaltyRelatedFlg;
			result = result || entityData.SemesterNo != _originalData.SemesterNo;
			result = result || entityData.AbsenceFlg != _originalData.AbsenceFlg;
			result = result || entityData.ExecFlg != _originalData.ExecFlg;
			result = result || entityData.ExeFlgReg != _originalData.ExeFlgReg;
			result = result || entityData.WarningNo != _originalData.WarningNo;
			result = result || entityData.EdStudCheatId != _originalData.EdStudCheatId;
			result = result || entityData.Witness != _originalData.Witness;
			result = result || entityData.GsCodeApprovalId != _originalData.GsCodeApprovalId;
			result = result || entityData.ApprovedByName != _originalData.ApprovedByName;
			result = result || entityData.AttchdDocPath != _originalData.AttchdDocPath;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a EdStudViol Entity with the original data.
		///</summary>
		public EdStudViol GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdStudViol(
				_originalData.EdStudViolId,
				_originalData.EdStudId,
				_originalData.GsCdeCampusId,
				_originalData.ScBuildingId,
				_originalData.ViolDate,
				_originalData.GsCdeViolId,
				_originalData.GroupId,
				_originalData.GsCdePenaltyId,
				_originalData.PnltyDate,
				_originalData.ViolFrom,
				_originalData.ViolTo,
				_originalData.PnltyFrom,
				_originalData.PnltyTo,
				_originalData.BhvrMark,
				_originalData.AttndMark,
				_originalData.DropDate,
				_originalData.Notes,
				_originalData.ErpOrgTreeFromId,
				_originalData.ErpOrgTreeToId,
				_originalData.EdAcadYearId,
				_originalData.EdCodeSemesterId,
				_originalData.ViolSerial,
				_originalData.BanFee,
				_originalData.BanFeePayFlag,
				_originalData.DropFlg,
				_originalData.EdCodeSemesterStopFromId,
				_originalData.EdAcadYearStopFromId,
				_originalData.EdCodeSemesterStopToId,
				_originalData.EdAcadYearStopToId,
				_originalData.AppealFlg,
				_originalData.OtherFlag,
				_originalData.OtherSite,
				_originalData.GsCdeViolCatId,
				_originalData.InvestigationCommInOut,
				_originalData.InvestigationDate,
				_originalData.InvestigationEndDate,
				_originalData.InvestigationRecommendation,
				_originalData.ApprovedBy,
				_originalData.CancelFlg,
				_originalData.PunishCommFlg,
				_originalData.PunishCommDate,
				_originalData.PunishCommEndDate,
				_originalData.PenaltyRelatedFlg,
				_originalData.SemesterNo,
				_originalData.AbsenceFlg,
				_originalData.ExecFlg,
				_originalData.ExeFlgReg,
				_originalData.WarningNo,
				_originalData.EdStudCheatId,
				_originalData.Witness,
				_originalData.GsCodeApprovalId,
				_originalData.ApprovedByName,
				_originalData.AttchdDocPath,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (EdStudViol)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdStudViolBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdStudViolBase)
				return ValueEquals(this, (EdStudViolBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdStudViolBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdStudViolId.GetHashCode() ^ 
					this.EdStudId.GetHashCode() ^ 
					((this.GsCdeCampusId == null) ? string.Empty : this.GsCdeCampusId.ToString()).GetHashCode() ^ 
					((this.ScBuildingId == null) ? string.Empty : this.ScBuildingId.ToString()).GetHashCode() ^ 
					this.ViolDate.GetHashCode() ^ 
					this.GsCdeViolId.GetHashCode() ^ 
					((this.GroupId == null) ? string.Empty : this.GroupId.ToString()).GetHashCode() ^ 
					((this.GsCdePenaltyId == null) ? string.Empty : this.GsCdePenaltyId.ToString()).GetHashCode() ^ 
					((this.PnltyDate == null) ? string.Empty : this.PnltyDate.ToString()).GetHashCode() ^ 
					((this.ViolFrom == null) ? string.Empty : this.ViolFrom.ToString()).GetHashCode() ^ 
					((this.ViolTo == null) ? string.Empty : this.ViolTo.ToString()).GetHashCode() ^ 
					((this.PnltyFrom == null) ? string.Empty : this.PnltyFrom.ToString()).GetHashCode() ^ 
					((this.PnltyTo == null) ? string.Empty : this.PnltyTo.ToString()).GetHashCode() ^ 
					((this.BhvrMark == null) ? string.Empty : this.BhvrMark.ToString()).GetHashCode() ^ 
					((this.AttndMark == null) ? string.Empty : this.AttndMark.ToString()).GetHashCode() ^ 
					((this.DropDate == null) ? string.Empty : this.DropDate.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.ErpOrgTreeFromId == null) ? string.Empty : this.ErpOrgTreeFromId.ToString()).GetHashCode() ^ 
					((this.ErpOrgTreeToId == null) ? string.Empty : this.ErpOrgTreeToId.ToString()).GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					this.EdCodeSemesterId.GetHashCode() ^ 
					((this.ViolSerial == null) ? string.Empty : this.ViolSerial.ToString()).GetHashCode() ^ 
					((this.BanFee == null) ? string.Empty : this.BanFee.ToString()).GetHashCode() ^ 
					((this.BanFeePayFlag == null) ? string.Empty : this.BanFeePayFlag.ToString()).GetHashCode() ^ 
					this.DropFlg.GetHashCode() ^ 
					((this.EdCodeSemesterStopFromId == null) ? string.Empty : this.EdCodeSemesterStopFromId.ToString()).GetHashCode() ^ 
					((this.EdAcadYearStopFromId == null) ? string.Empty : this.EdAcadYearStopFromId.ToString()).GetHashCode() ^ 
					((this.EdCodeSemesterStopToId == null) ? string.Empty : this.EdCodeSemesterStopToId.ToString()).GetHashCode() ^ 
					((this.EdAcadYearStopToId == null) ? string.Empty : this.EdAcadYearStopToId.ToString()).GetHashCode() ^ 
					this.AppealFlg.GetHashCode() ^ 
					((this.OtherFlag == null) ? string.Empty : this.OtherFlag.ToString()).GetHashCode() ^ 
					((this.OtherSite == null) ? string.Empty : this.OtherSite.ToString()).GetHashCode() ^ 
					this.GsCdeViolCatId.GetHashCode() ^ 
					((this.InvestigationCommInOut == null) ? string.Empty : this.InvestigationCommInOut.ToString()).GetHashCode() ^ 
					((this.InvestigationDate == null) ? string.Empty : this.InvestigationDate.ToString()).GetHashCode() ^ 
					((this.InvestigationEndDate == null) ? string.Empty : this.InvestigationEndDate.ToString()).GetHashCode() ^ 
					((this.InvestigationRecommendation == null) ? string.Empty : this.InvestigationRecommendation.ToString()).GetHashCode() ^ 
					((this.ApprovedBy == null) ? string.Empty : this.ApprovedBy.ToString()).GetHashCode() ^ 
					((this.CancelFlg == null) ? string.Empty : this.CancelFlg.ToString()).GetHashCode() ^ 
					((this.PunishCommFlg == null) ? string.Empty : this.PunishCommFlg.ToString()).GetHashCode() ^ 
					((this.PunishCommDate == null) ? string.Empty : this.PunishCommDate.ToString()).GetHashCode() ^ 
					((this.PunishCommEndDate == null) ? string.Empty : this.PunishCommEndDate.ToString()).GetHashCode() ^ 
					((this.PenaltyRelatedFlg == null) ? string.Empty : this.PenaltyRelatedFlg.ToString()).GetHashCode() ^ 
					((this.SemesterNo == null) ? string.Empty : this.SemesterNo.ToString()).GetHashCode() ^ 
					((this.AbsenceFlg == null) ? string.Empty : this.AbsenceFlg.ToString()).GetHashCode() ^ 
					((this.ExecFlg == null) ? string.Empty : this.ExecFlg.ToString()).GetHashCode() ^ 
					((this.ExeFlgReg == null) ? string.Empty : this.ExeFlgReg.ToString()).GetHashCode() ^ 
					this.WarningNo.GetHashCode() ^ 
					((this.EdStudCheatId == null) ? string.Empty : this.EdStudCheatId.ToString()).GetHashCode() ^ 
					((this.Witness == null) ? string.Empty : this.Witness.ToString()).GetHashCode() ^ 
					((this.GsCodeApprovalId == null) ? string.Empty : this.GsCodeApprovalId.ToString()).GetHashCode() ^ 
					((this.ApprovedByName == null) ? string.Empty : this.ApprovedByName.ToString()).GetHashCode() ^ 
					((this.AttchdDocPath == null) ? string.Empty : this.AttchdDocPath.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdStudViolBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdStudViolBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdStudViolBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdStudViolBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdStudViolBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdStudViolBase Object1, EdStudViolBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdStudViolId != Object2.EdStudViolId)
				equal = false;
			if (Object1.EdStudId != Object2.EdStudId)
				equal = false;
			if ( Object1.GsCdeCampusId != null && Object2.GsCdeCampusId != null )
			{
				if (Object1.GsCdeCampusId != Object2.GsCdeCampusId)
					equal = false;
			}
			else if (Object1.GsCdeCampusId == null ^ Object2.GsCdeCampusId == null )
			{
				equal = false;
			}
			if ( Object1.ScBuildingId != null && Object2.ScBuildingId != null )
			{
				if (Object1.ScBuildingId != Object2.ScBuildingId)
					equal = false;
			}
			else if (Object1.ScBuildingId == null ^ Object2.ScBuildingId == null )
			{
				equal = false;
			}
			if (Object1.ViolDate != Object2.ViolDate)
				equal = false;
			if (Object1.GsCdeViolId != Object2.GsCdeViolId)
				equal = false;
			if ( Object1.GroupId != null && Object2.GroupId != null )
			{
				if (Object1.GroupId != Object2.GroupId)
					equal = false;
			}
			else if (Object1.GroupId == null ^ Object2.GroupId == null )
			{
				equal = false;
			}
			if ( Object1.GsCdePenaltyId != null && Object2.GsCdePenaltyId != null )
			{
				if (Object1.GsCdePenaltyId != Object2.GsCdePenaltyId)
					equal = false;
			}
			else if (Object1.GsCdePenaltyId == null ^ Object2.GsCdePenaltyId == null )
			{
				equal = false;
			}
			if ( Object1.PnltyDate != null && Object2.PnltyDate != null )
			{
				if (Object1.PnltyDate != Object2.PnltyDate)
					equal = false;
			}
			else if (Object1.PnltyDate == null ^ Object2.PnltyDate == null )
			{
				equal = false;
			}
			if ( Object1.ViolFrom != null && Object2.ViolFrom != null )
			{
				if (Object1.ViolFrom != Object2.ViolFrom)
					equal = false;
			}
			else if (Object1.ViolFrom == null ^ Object2.ViolFrom == null )
			{
				equal = false;
			}
			if ( Object1.ViolTo != null && Object2.ViolTo != null )
			{
				if (Object1.ViolTo != Object2.ViolTo)
					equal = false;
			}
			else if (Object1.ViolTo == null ^ Object2.ViolTo == null )
			{
				equal = false;
			}
			if ( Object1.PnltyFrom != null && Object2.PnltyFrom != null )
			{
				if (Object1.PnltyFrom != Object2.PnltyFrom)
					equal = false;
			}
			else if (Object1.PnltyFrom == null ^ Object2.PnltyFrom == null )
			{
				equal = false;
			}
			if ( Object1.PnltyTo != null && Object2.PnltyTo != null )
			{
				if (Object1.PnltyTo != Object2.PnltyTo)
					equal = false;
			}
			else if (Object1.PnltyTo == null ^ Object2.PnltyTo == null )
			{
				equal = false;
			}
			if ( Object1.BhvrMark != null && Object2.BhvrMark != null )
			{
				if (Object1.BhvrMark != Object2.BhvrMark)
					equal = false;
			}
			else if (Object1.BhvrMark == null ^ Object2.BhvrMark == null )
			{
				equal = false;
			}
			if ( Object1.AttndMark != null && Object2.AttndMark != null )
			{
				if (Object1.AttndMark != Object2.AttndMark)
					equal = false;
			}
			else if (Object1.AttndMark == null ^ Object2.AttndMark == null )
			{
				equal = false;
			}
			if ( Object1.DropDate != null && Object2.DropDate != null )
			{
				if (Object1.DropDate != Object2.DropDate)
					equal = false;
			}
			else if (Object1.DropDate == null ^ Object2.DropDate == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.ErpOrgTreeFromId != null && Object2.ErpOrgTreeFromId != null )
			{
				if (Object1.ErpOrgTreeFromId != Object2.ErpOrgTreeFromId)
					equal = false;
			}
			else if (Object1.ErpOrgTreeFromId == null ^ Object2.ErpOrgTreeFromId == null )
			{
				equal = false;
			}
			if ( Object1.ErpOrgTreeToId != null && Object2.ErpOrgTreeToId != null )
			{
				if (Object1.ErpOrgTreeToId != Object2.ErpOrgTreeToId)
					equal = false;
			}
			else if (Object1.ErpOrgTreeToId == null ^ Object2.ErpOrgTreeToId == null )
			{
				equal = false;
			}
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
				equal = false;
			if ( Object1.ViolSerial != null && Object2.ViolSerial != null )
			{
				if (Object1.ViolSerial != Object2.ViolSerial)
					equal = false;
			}
			else if (Object1.ViolSerial == null ^ Object2.ViolSerial == null )
			{
				equal = false;
			}
			if ( Object1.BanFee != null && Object2.BanFee != null )
			{
				if (Object1.BanFee != Object2.BanFee)
					equal = false;
			}
			else if (Object1.BanFee == null ^ Object2.BanFee == null )
			{
				equal = false;
			}
			if ( Object1.BanFeePayFlag != null && Object2.BanFeePayFlag != null )
			{
				if (Object1.BanFeePayFlag != Object2.BanFeePayFlag)
					equal = false;
			}
			else if (Object1.BanFeePayFlag == null ^ Object2.BanFeePayFlag == null )
			{
				equal = false;
			}
			if (Object1.DropFlg != Object2.DropFlg)
				equal = false;
			if ( Object1.EdCodeSemesterStopFromId != null && Object2.EdCodeSemesterStopFromId != null )
			{
				if (Object1.EdCodeSemesterStopFromId != Object2.EdCodeSemesterStopFromId)
					equal = false;
			}
			else if (Object1.EdCodeSemesterStopFromId == null ^ Object2.EdCodeSemesterStopFromId == null )
			{
				equal = false;
			}
			if ( Object1.EdAcadYearStopFromId != null && Object2.EdAcadYearStopFromId != null )
			{
				if (Object1.EdAcadYearStopFromId != Object2.EdAcadYearStopFromId)
					equal = false;
			}
			else if (Object1.EdAcadYearStopFromId == null ^ Object2.EdAcadYearStopFromId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeSemesterStopToId != null && Object2.EdCodeSemesterStopToId != null )
			{
				if (Object1.EdCodeSemesterStopToId != Object2.EdCodeSemesterStopToId)
					equal = false;
			}
			else if (Object1.EdCodeSemesterStopToId == null ^ Object2.EdCodeSemesterStopToId == null )
			{
				equal = false;
			}
			if ( Object1.EdAcadYearStopToId != null && Object2.EdAcadYearStopToId != null )
			{
				if (Object1.EdAcadYearStopToId != Object2.EdAcadYearStopToId)
					equal = false;
			}
			else if (Object1.EdAcadYearStopToId == null ^ Object2.EdAcadYearStopToId == null )
			{
				equal = false;
			}
			if (Object1.AppealFlg != Object2.AppealFlg)
				equal = false;
			if ( Object1.OtherFlag != null && Object2.OtherFlag != null )
			{
				if (Object1.OtherFlag != Object2.OtherFlag)
					equal = false;
			}
			else if (Object1.OtherFlag == null ^ Object2.OtherFlag == null )
			{
				equal = false;
			}
			if ( Object1.OtherSite != null && Object2.OtherSite != null )
			{
				if (Object1.OtherSite != Object2.OtherSite)
					equal = false;
			}
			else if (Object1.OtherSite == null ^ Object2.OtherSite == null )
			{
				equal = false;
			}
			if (Object1.GsCdeViolCatId != Object2.GsCdeViolCatId)
				equal = false;
			if ( Object1.InvestigationCommInOut != null && Object2.InvestigationCommInOut != null )
			{
				if (Object1.InvestigationCommInOut != Object2.InvestigationCommInOut)
					equal = false;
			}
			else if (Object1.InvestigationCommInOut == null ^ Object2.InvestigationCommInOut == null )
			{
				equal = false;
			}
			if ( Object1.InvestigationDate != null && Object2.InvestigationDate != null )
			{
				if (Object1.InvestigationDate != Object2.InvestigationDate)
					equal = false;
			}
			else if (Object1.InvestigationDate == null ^ Object2.InvestigationDate == null )
			{
				equal = false;
			}
			if ( Object1.InvestigationEndDate != null && Object2.InvestigationEndDate != null )
			{
				if (Object1.InvestigationEndDate != Object2.InvestigationEndDate)
					equal = false;
			}
			else if (Object1.InvestigationEndDate == null ^ Object2.InvestigationEndDate == null )
			{
				equal = false;
			}
			if ( Object1.InvestigationRecommendation != null && Object2.InvestigationRecommendation != null )
			{
				if (Object1.InvestigationRecommendation != Object2.InvestigationRecommendation)
					equal = false;
			}
			else if (Object1.InvestigationRecommendation == null ^ Object2.InvestigationRecommendation == null )
			{
				equal = false;
			}
			if ( Object1.ApprovedBy != null && Object2.ApprovedBy != null )
			{
				if (Object1.ApprovedBy != Object2.ApprovedBy)
					equal = false;
			}
			else if (Object1.ApprovedBy == null ^ Object2.ApprovedBy == null )
			{
				equal = false;
			}
			if ( Object1.CancelFlg != null && Object2.CancelFlg != null )
			{
				if (Object1.CancelFlg != Object2.CancelFlg)
					equal = false;
			}
			else if (Object1.CancelFlg == null ^ Object2.CancelFlg == null )
			{
				equal = false;
			}
			if ( Object1.PunishCommFlg != null && Object2.PunishCommFlg != null )
			{
				if (Object1.PunishCommFlg != Object2.PunishCommFlg)
					equal = false;
			}
			else if (Object1.PunishCommFlg == null ^ Object2.PunishCommFlg == null )
			{
				equal = false;
			}
			if ( Object1.PunishCommDate != null && Object2.PunishCommDate != null )
			{
				if (Object1.PunishCommDate != Object2.PunishCommDate)
					equal = false;
			}
			else if (Object1.PunishCommDate == null ^ Object2.PunishCommDate == null )
			{
				equal = false;
			}
			if ( Object1.PunishCommEndDate != null && Object2.PunishCommEndDate != null )
			{
				if (Object1.PunishCommEndDate != Object2.PunishCommEndDate)
					equal = false;
			}
			else if (Object1.PunishCommEndDate == null ^ Object2.PunishCommEndDate == null )
			{
				equal = false;
			}
			if ( Object1.PenaltyRelatedFlg != null && Object2.PenaltyRelatedFlg != null )
			{
				if (Object1.PenaltyRelatedFlg != Object2.PenaltyRelatedFlg)
					equal = false;
			}
			else if (Object1.PenaltyRelatedFlg == null ^ Object2.PenaltyRelatedFlg == null )
			{
				equal = false;
			}
			if ( Object1.SemesterNo != null && Object2.SemesterNo != null )
			{
				if (Object1.SemesterNo != Object2.SemesterNo)
					equal = false;
			}
			else if (Object1.SemesterNo == null ^ Object2.SemesterNo == null )
			{
				equal = false;
			}
			if ( Object1.AbsenceFlg != null && Object2.AbsenceFlg != null )
			{
				if (Object1.AbsenceFlg != Object2.AbsenceFlg)
					equal = false;
			}
			else if (Object1.AbsenceFlg == null ^ Object2.AbsenceFlg == null )
			{
				equal = false;
			}
			if ( Object1.ExecFlg != null && Object2.ExecFlg != null )
			{
				if (Object1.ExecFlg != Object2.ExecFlg)
					equal = false;
			}
			else if (Object1.ExecFlg == null ^ Object2.ExecFlg == null )
			{
				equal = false;
			}
			if ( Object1.ExeFlgReg != null && Object2.ExeFlgReg != null )
			{
				if (Object1.ExeFlgReg != Object2.ExeFlgReg)
					equal = false;
			}
			else if (Object1.ExeFlgReg == null ^ Object2.ExeFlgReg == null )
			{
				equal = false;
			}
			if (Object1.WarningNo != Object2.WarningNo)
				equal = false;
			if ( Object1.EdStudCheatId != null && Object2.EdStudCheatId != null )
			{
				if (Object1.EdStudCheatId != Object2.EdStudCheatId)
					equal = false;
			}
			else if (Object1.EdStudCheatId == null ^ Object2.EdStudCheatId == null )
			{
				equal = false;
			}
			if ( Object1.Witness != null && Object2.Witness != null )
			{
				if (Object1.Witness != Object2.Witness)
					equal = false;
			}
			else if (Object1.Witness == null ^ Object2.Witness == null )
			{
				equal = false;
			}
			if ( Object1.GsCodeApprovalId != null && Object2.GsCodeApprovalId != null )
			{
				if (Object1.GsCodeApprovalId != Object2.GsCodeApprovalId)
					equal = false;
			}
			else if (Object1.GsCodeApprovalId == null ^ Object2.GsCodeApprovalId == null )
			{
				equal = false;
			}
			if ( Object1.ApprovedByName != null && Object2.ApprovedByName != null )
			{
				if (Object1.ApprovedByName != Object2.ApprovedByName)
					equal = false;
			}
			else if (Object1.ApprovedByName == null ^ Object2.ApprovedByName == null )
			{
				equal = false;
			}
			if ( Object1.AttchdDocPath != null && Object2.AttchdDocPath != null )
			{
				if (Object1.AttchdDocPath != Object2.AttchdDocPath)
					equal = false;
			}
			else if (Object1.AttchdDocPath == null ^ Object2.AttchdDocPath == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdStudViolBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdStudViolComparer GetComparer()
        {
            return new EdStudViolComparer();
        }
        */

        // Comparer delegates back to EdStudViol
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdStudViol rhs, EdStudViolColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdStudViolColumn.EdStudViolId:
            		return this.EdStudViolId.CompareTo(rhs.EdStudViolId);
            		
            		                 
            	
            	
            	case EdStudViolColumn.EdStudId:
            		return this.EdStudId.CompareTo(rhs.EdStudId);
            		
            		                 
            	
            	
            	case EdStudViolColumn.GsCdeCampusId:
            		return this.GsCdeCampusId.Value.CompareTo(rhs.GsCdeCampusId.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.ScBuildingId:
            		return this.ScBuildingId.Value.CompareTo(rhs.ScBuildingId.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.ViolDate:
            		return this.ViolDate.CompareTo(rhs.ViolDate);
            		
            		                 
            	
            	
            	case EdStudViolColumn.GsCdeViolId:
            		return this.GsCdeViolId.CompareTo(rhs.GsCdeViolId);
            		
            		                 
            	
            	
            	case EdStudViolColumn.GroupId:
            		return this.GroupId.Value.CompareTo(rhs.GroupId.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.GsCdePenaltyId:
            		return this.GsCdePenaltyId.Value.CompareTo(rhs.GsCdePenaltyId.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.PnltyDate:
            		return this.PnltyDate.Value.CompareTo(rhs.PnltyDate.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.ViolFrom:
            		return this.ViolFrom.Value.CompareTo(rhs.ViolFrom.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.ViolTo:
            		return this.ViolTo.Value.CompareTo(rhs.ViolTo.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.PnltyFrom:
            		return this.PnltyFrom.Value.CompareTo(rhs.PnltyFrom.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.PnltyTo:
            		return this.PnltyTo.Value.CompareTo(rhs.PnltyTo.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.BhvrMark:
            		return this.BhvrMark.Value.CompareTo(rhs.BhvrMark.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.AttndMark:
            		return this.AttndMark.Value.CompareTo(rhs.AttndMark.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.DropDate:
            		return this.DropDate.Value.CompareTo(rhs.DropDate.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case EdStudViolColumn.ErpOrgTreeFromId:
            		return this.ErpOrgTreeFromId.Value.CompareTo(rhs.ErpOrgTreeFromId.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.ErpOrgTreeToId:
            		return this.ErpOrgTreeToId.Value.CompareTo(rhs.ErpOrgTreeToId.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case EdStudViolColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.CompareTo(rhs.EdCodeSemesterId);
            		
            		                 
            	
            	
            	case EdStudViolColumn.ViolSerial:
            		return this.ViolSerial.Value.CompareTo(rhs.ViolSerial.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.BanFee:
            		return this.BanFee.Value.CompareTo(rhs.BanFee.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.BanFeePayFlag:
            		return this.BanFeePayFlag.Value.CompareTo(rhs.BanFeePayFlag.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.DropFlg:
            		return this.DropFlg.CompareTo(rhs.DropFlg);
            		
            		                 
            	
            	
            	case EdStudViolColumn.EdCodeSemesterStopFromId:
            		return this.EdCodeSemesterStopFromId.Value.CompareTo(rhs.EdCodeSemesterStopFromId.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.EdAcadYearStopFromId:
            		return this.EdAcadYearStopFromId.Value.CompareTo(rhs.EdAcadYearStopFromId.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.EdCodeSemesterStopToId:
            		return this.EdCodeSemesterStopToId.Value.CompareTo(rhs.EdCodeSemesterStopToId.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.EdAcadYearStopToId:
            		return this.EdAcadYearStopToId.Value.CompareTo(rhs.EdAcadYearStopToId.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.AppealFlg:
            		return this.AppealFlg.CompareTo(rhs.AppealFlg);
            		
            		                 
            	
            	
            	case EdStudViolColumn.OtherFlag:
            		return this.OtherFlag.Value.CompareTo(rhs.OtherFlag.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.OtherSite:
            		return this.OtherSite.CompareTo(rhs.OtherSite);
            		
            		                 
            	
            	
            	case EdStudViolColumn.GsCdeViolCatId:
            		return this.GsCdeViolCatId.CompareTo(rhs.GsCdeViolCatId);
            		
            		                 
            	
            	
            	case EdStudViolColumn.InvestigationCommInOut:
            		return this.InvestigationCommInOut.Value.CompareTo(rhs.InvestigationCommInOut.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.InvestigationDate:
            		return this.InvestigationDate.Value.CompareTo(rhs.InvestigationDate.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.InvestigationEndDate:
            		return this.InvestigationEndDate.Value.CompareTo(rhs.InvestigationEndDate.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.InvestigationRecommendation:
            		return this.InvestigationRecommendation.CompareTo(rhs.InvestigationRecommendation);
            		
            		                 
            	
            	
            	case EdStudViolColumn.ApprovedBy:
            		return this.ApprovedBy.Value.CompareTo(rhs.ApprovedBy.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.CancelFlg:
            		return this.CancelFlg.Value.CompareTo(rhs.CancelFlg.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.PunishCommFlg:
            		return this.PunishCommFlg.Value.CompareTo(rhs.PunishCommFlg.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.PunishCommDate:
            		return this.PunishCommDate.Value.CompareTo(rhs.PunishCommDate.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.PunishCommEndDate:
            		return this.PunishCommEndDate.Value.CompareTo(rhs.PunishCommEndDate.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.PenaltyRelatedFlg:
            		return this.PenaltyRelatedFlg.Value.CompareTo(rhs.PenaltyRelatedFlg.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.SemesterNo:
            		return this.SemesterNo.Value.CompareTo(rhs.SemesterNo.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.AbsenceFlg:
            		return this.AbsenceFlg.Value.CompareTo(rhs.AbsenceFlg.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.ExecFlg:
            		return this.ExecFlg.Value.CompareTo(rhs.ExecFlg.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.ExeFlgReg:
            		return this.ExeFlgReg.Value.CompareTo(rhs.ExeFlgReg.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.WarningNo:
            		return this.WarningNo.CompareTo(rhs.WarningNo);
            		
            		                 
            	
            	
            	case EdStudViolColumn.EdStudCheatId:
            		return this.EdStudCheatId.Value.CompareTo(rhs.EdStudCheatId.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.Witness:
            		return this.Witness.CompareTo(rhs.Witness);
            		
            		                 
            	
            	
            	case EdStudViolColumn.GsCodeApprovalId:
            		return this.GsCodeApprovalId.Value.CompareTo(rhs.GsCodeApprovalId.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.ApprovedByName:
            		return this.ApprovedByName.CompareTo(rhs.ApprovedByName);
            		
            		                 
            	
            	
            	case EdStudViolColumn.AttchdDocPath:
            		return this.AttchdDocPath.CompareTo(rhs.AttchdDocPath);
            		
            		                 
            	
            	
            	case EdStudViolColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case EdStudViolColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdStudViolKey> Members
		
		// member variable for the EntityId property
		private EdStudViolKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdStudViolKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdStudViolKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdStudViol")
					.Append("|").Append( this.EdStudViolId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{56}{55}- EdStudViolId: {0}{55}- EdStudId: {1}{55}- GsCdeCampusId: {2}{55}- ScBuildingId: {3}{55}- ViolDate: {4}{55}- GsCdeViolId: {5}{55}- GroupId: {6}{55}- GsCdePenaltyId: {7}{55}- PnltyDate: {8}{55}- ViolFrom: {9}{55}- ViolTo: {10}{55}- PnltyFrom: {11}{55}- PnltyTo: {12}{55}- BhvrMark: {13}{55}- AttndMark: {14}{55}- DropDate: {15}{55}- Notes: {16}{55}- ErpOrgTreeFromId: {17}{55}- ErpOrgTreeToId: {18}{55}- EdAcadYearId: {19}{55}- EdCodeSemesterId: {20}{55}- ViolSerial: {21}{55}- BanFee: {22}{55}- BanFeePayFlag: {23}{55}- DropFlg: {24}{55}- EdCodeSemesterStopFromId: {25}{55}- EdAcadYearStopFromId: {26}{55}- EdCodeSemesterStopToId: {27}{55}- EdAcadYearStopToId: {28}{55}- AppealFlg: {29}{55}- OtherFlag: {30}{55}- OtherSite: {31}{55}- GsCdeViolCatId: {32}{55}- InvestigationCommInOut: {33}{55}- InvestigationDate: {34}{55}- InvestigationEndDate: {35}{55}- InvestigationRecommendation: {36}{55}- ApprovedBy: {37}{55}- CancelFlg: {38}{55}- PunishCommFlg: {39}{55}- PunishCommDate: {40}{55}- PunishCommEndDate: {41}{55}- PenaltyRelatedFlg: {42}{55}- SemesterNo: {43}{55}- AbsenceFlg: {44}{55}- ExecFlg: {45}{55}- ExeFlgReg: {46}{55}- WarningNo: {47}{55}- EdStudCheatId: {48}{55}- Witness: {49}{55}- GsCodeApprovalId: {50}{55}- ApprovedByName: {51}{55}- AttchdDocPath: {52}{55}- SeUserId: {53}{55}- LastDate: {54}{55}{57}", 
				this.EdStudViolId,
				this.EdStudId,
				(this.GsCdeCampusId == null) ? string.Empty : this.GsCdeCampusId.ToString(),
				(this.ScBuildingId == null) ? string.Empty : this.ScBuildingId.ToString(),
				this.ViolDate,
				this.GsCdeViolId,
				(this.GroupId == null) ? string.Empty : this.GroupId.ToString(),
				(this.GsCdePenaltyId == null) ? string.Empty : this.GsCdePenaltyId.ToString(),
				(this.PnltyDate == null) ? string.Empty : this.PnltyDate.ToString(),
				(this.ViolFrom == null) ? string.Empty : this.ViolFrom.ToString(),
				(this.ViolTo == null) ? string.Empty : this.ViolTo.ToString(),
				(this.PnltyFrom == null) ? string.Empty : this.PnltyFrom.ToString(),
				(this.PnltyTo == null) ? string.Empty : this.PnltyTo.ToString(),
				(this.BhvrMark == null) ? string.Empty : this.BhvrMark.ToString(),
				(this.AttndMark == null) ? string.Empty : this.AttndMark.ToString(),
				(this.DropDate == null) ? string.Empty : this.DropDate.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.ErpOrgTreeFromId == null) ? string.Empty : this.ErpOrgTreeFromId.ToString(),
				(this.ErpOrgTreeToId == null) ? string.Empty : this.ErpOrgTreeToId.ToString(),
				this.EdAcadYearId,
				this.EdCodeSemesterId,
				(this.ViolSerial == null) ? string.Empty : this.ViolSerial.ToString(),
				(this.BanFee == null) ? string.Empty : this.BanFee.ToString(),
				(this.BanFeePayFlag == null) ? string.Empty : this.BanFeePayFlag.ToString(),
				this.DropFlg,
				(this.EdCodeSemesterStopFromId == null) ? string.Empty : this.EdCodeSemesterStopFromId.ToString(),
				(this.EdAcadYearStopFromId == null) ? string.Empty : this.EdAcadYearStopFromId.ToString(),
				(this.EdCodeSemesterStopToId == null) ? string.Empty : this.EdCodeSemesterStopToId.ToString(),
				(this.EdAcadYearStopToId == null) ? string.Empty : this.EdAcadYearStopToId.ToString(),
				this.AppealFlg,
				(this.OtherFlag == null) ? string.Empty : this.OtherFlag.ToString(),
				(this.OtherSite == null) ? string.Empty : this.OtherSite.ToString(),
				this.GsCdeViolCatId,
				(this.InvestigationCommInOut == null) ? string.Empty : this.InvestigationCommInOut.ToString(),
				(this.InvestigationDate == null) ? string.Empty : this.InvestigationDate.ToString(),
				(this.InvestigationEndDate == null) ? string.Empty : this.InvestigationEndDate.ToString(),
				(this.InvestigationRecommendation == null) ? string.Empty : this.InvestigationRecommendation.ToString(),
				(this.ApprovedBy == null) ? string.Empty : this.ApprovedBy.ToString(),
				(this.CancelFlg == null) ? string.Empty : this.CancelFlg.ToString(),
				(this.PunishCommFlg == null) ? string.Empty : this.PunishCommFlg.ToString(),
				(this.PunishCommDate == null) ? string.Empty : this.PunishCommDate.ToString(),
				(this.PunishCommEndDate == null) ? string.Empty : this.PunishCommEndDate.ToString(),
				(this.PenaltyRelatedFlg == null) ? string.Empty : this.PenaltyRelatedFlg.ToString(),
				(this.SemesterNo == null) ? string.Empty : this.SemesterNo.ToString(),
				(this.AbsenceFlg == null) ? string.Empty : this.AbsenceFlg.ToString(),
				(this.ExecFlg == null) ? string.Empty : this.ExecFlg.ToString(),
				(this.ExeFlgReg == null) ? string.Empty : this.ExeFlgReg.ToString(),
				this.WarningNo,
				(this.EdStudCheatId == null) ? string.Empty : this.EdStudCheatId.ToString(),
				(this.Witness == null) ? string.Empty : this.Witness.ToString(),
				(this.GsCodeApprovalId == null) ? string.Empty : this.GsCodeApprovalId.ToString(),
				(this.ApprovedByName == null) ? string.Empty : this.ApprovedByName.ToString(),
				(this.AttchdDocPath == null) ? string.Empty : this.AttchdDocPath.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_STUD_VIOL' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdStudViolEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_STUD_VIOL_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_STUD_VIOL"</remarks>
		public System.Decimal EdStudViolId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdStudViolId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_STUD_ID : 
		/// </summary>
		public System.Decimal		  EdStudId = 0.0m;
		
		/// <summary>
		/// GS_CDE_CAMPUS_ID : 
		/// </summary>
		public System.Decimal?		  GsCdeCampusId = null;
		
		/// <summary>
		/// SC_BUILDING_ID : 
		/// </summary>
		public System.Decimal?		  ScBuildingId = null;
		
		/// <summary>
		/// VIOL_DATE : 
		/// </summary>
		public System.DateTime		  ViolDate = DateTime.MinValue;
		
		/// <summary>
		/// GS_CDE_VIOL_ID : 
		/// </summary>
		public System.Decimal		  GsCdeViolId = 0.0m;
		
		/// <summary>
		/// GROUP_ID : 
		/// </summary>
		public System.Decimal?		  GroupId = null;
		
		/// <summary>
		/// GS_CDE_PENALTY_ID : 
		/// </summary>
		public System.Decimal?		  GsCdePenaltyId = null;
		
		/// <summary>
		/// PNLTY_DATE : 
		/// </summary>
		public System.DateTime?		  PnltyDate = null;
		
		/// <summary>
		/// VIOL_FROM : تاريخ العقوبة من
		/// </summary>
		public System.DateTime?		  ViolFrom = null;
		
		/// <summary>
		/// VIOL_TO : تاريخ العقوبة الى
		/// </summary>
		public System.DateTime?		  ViolTo = null;
		
		/// <summary>
		/// PNLTY_FROM : تاريخ العقوبة من
		/// </summary>
		public System.DateTime?		  PnltyFrom = null;
		
		/// <summary>
		/// PNLTY_TO : تاريخ العقوبة الى
		/// </summary>
		public System.DateTime?		  PnltyTo = null;
		
		/// <summary>
		/// BHVR_MARK : خصم درجة سلوك
		/// </summary>
		public System.Decimal?		  BhvrMark = null;
		
		/// <summary>
		/// ATTND_MARK : خصم درجة مواظبة
		/// </summary>
		public System.Decimal?		  AttndMark = null;
		
		/// <summary>
		/// DROP_DATE : 
		/// </summary>
		public System.DateTime?		  DropDate = null;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// ERP_ORG_TREE_FROM_ID : 
		/// </summary>
		public System.Decimal?		  ErpOrgTreeFromId = null;
		
		/// <summary>
		/// ERP_ORG_TREE_TO_ID : 
		/// </summary>
		public System.Decimal?		  ErpOrgTreeToId = null;
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : 
		/// </summary>
		public System.Decimal		  EdCodeSemesterId = 0.0m;
		
		/// <summary>
		/// VIOL_SERIAL : 
		/// </summary>
		public System.Decimal?		  ViolSerial = null;
		
		/// <summary>
		/// BAN_FEE : 
		/// </summary>
		public System.Decimal?		  BanFee = null;
		
		/// <summary>
		/// BAN_FEE_PAY_FLAG : 
		/// </summary>
		public System.Decimal?		  BanFeePayFlag = null;
		
		/// <summary>
		/// DROP_FLG : 
		/// </summary>
		public System.Decimal		  DropFlg = 0.0m;
		
		/// <summary>
		/// ED_CODE_SEMESTER_STOP_FROM_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeSemesterStopFromId = null;
		
		/// <summary>
		/// ED_ACAD_YEAR_STOP_FROM_ID : 
		/// </summary>
		public System.Decimal?		  EdAcadYearStopFromId = null;
		
		/// <summary>
		/// ED_CODE_SEMESTER_STOP_TO_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeSemesterStopToId = null;
		
		/// <summary>
		/// ED_ACAD_YEAR_STOP_TO_ID : 
		/// </summary>
		public System.Decimal?		  EdAcadYearStopToId = null;
		
		/// <summary>
		/// APPEAL_FLG : 
		/// </summary>
		public System.Decimal		  AppealFlg = 0.0m;
		
		/// <summary>
		/// OTHER_FLAG : 
		/// </summary>
		public System.Decimal?		  OtherFlag = null;
		
		/// <summary>
		/// OTHER_SITE : 
		/// </summary>
		public System.String		  OtherSite = null;
		
		/// <summary>
		/// GS_CDE_VIOL_CAT_ID : 
		/// </summary>
		public System.Decimal		  GsCdeViolCatId = 0.0m;
		
		/// <summary>
		/// INVESTIGATION_COMM_IN_OUT : 
		/// </summary>
		public System.Decimal?		  InvestigationCommInOut = null;
		
		/// <summary>
		/// INVESTIGATION_DATE : 
		/// </summary>
		public System.DateTime?		  InvestigationDate = null;
		
		/// <summary>
		/// INVESTIGATION_END_DATE : 
		/// </summary>
		public System.DateTime?		  InvestigationEndDate = null;
		
		/// <summary>
		/// INVESTIGATION_RECOMMENDATION : 
		/// </summary>
		public System.String		  InvestigationRecommendation = null;
		
		/// <summary>
		/// APPROVED_BY : 
		/// </summary>
		public System.Decimal?		  ApprovedBy = null;
		
		/// <summary>
		/// CANCEL_FLG : 
		/// </summary>
		public System.Decimal?		  CancelFlg = null;
		
		/// <summary>
		/// PUNISH_COMM_FLG : 
		/// </summary>
		public System.Decimal?		  PunishCommFlg = null;
		
		/// <summary>
		/// PUNISH_COMM_DATE : 
		/// </summary>
		public System.DateTime?		  PunishCommDate = null;
		
		/// <summary>
		/// PUNISH_COMM_END_DATE : 
		/// </summary>
		public System.DateTime?		  PunishCommEndDate = null;
		
		/// <summary>
		/// PENALTY_RELATED_FLG : 
		/// </summary>
		public System.Decimal?		  PenaltyRelatedFlg = null;
		
		/// <summary>
		/// SEMESTER_NO : 
		/// </summary>
		public System.Decimal?		  SemesterNo = null;
		
		/// <summary>
		/// ABSENCE_FLG : 
		/// </summary>
		public System.Decimal?		  AbsenceFlg = null;
		
		/// <summary>
		/// EXEC_FLG : 
		/// </summary>
		public System.Decimal?		  ExecFlg = null;
		
		/// <summary>
		/// EXE_FLG_REG : 
		/// </summary>
		public System.Decimal?		  ExeFlgReg = null;
		
		/// <summary>
		/// WARNING_NO : 
		/// </summary>
		public System.Decimal		  WarningNo = 0.0m;
		
		/// <summary>
		/// ED_STUD_CHEAT_ID : 
		/// </summary>
		public System.Decimal?		  EdStudCheatId = null;
		
		/// <summary>
		/// WITNESS : الشهود
		/// </summary>
		public System.String		  Witness = null;
		
		/// <summary>
		/// GS_CODE_APPROVAL_ID : صلاحية
		/// </summary>
		public System.Decimal?		  GsCodeApprovalId = null;
		
		/// <summary>
		/// APPROVED_BY_NAME : الامر بالعقوبة
		/// </summary>
		public System.String		  ApprovedByName = null;
		
		/// <summary>
		/// ATTCHD_DOC_PATH : 
		/// </summary>
		public System.String		  AttchdDocPath = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdAcadYear _edAcadYearStopFromIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearStopFromId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearStopFromIdSource
      	{
            get { return this._edAcadYearStopFromIdSource; }
            set { this._edAcadYearStopFromIdSource = value; }
      	}
		private EdAcadYear _edAcadYearStopToIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearStopToId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearStopToIdSource
      	{
            get { return this._edAcadYearStopToIdSource; }
            set { this._edAcadYearStopToIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterStopFromIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterStopFromId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterStopFromIdSource
      	{
            get { return this._edCodeSemesterStopFromIdSource; }
            set { this._edCodeSemesterStopFromIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterStopToIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterStopToId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterStopToIdSource
      	{
            get { return this._edCodeSemesterStopToIdSource; }
            set { this._edCodeSemesterStopToIdSource = value; }
      	}
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		private EdStudCheat _edStudCheatIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStudCheat"/>.
		/// </summary>
		/// <value>The source EdStudCheat for EdStudCheatId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStudCheat EdStudCheatIdSource
      	{
            get { return this._edStudCheatIdSource; }
            set { this._edStudCheatIdSource = value; }
      	}
		private ErpOrgTree _erpOrgTreeToIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ErpOrgTree"/>.
		/// </summary>
		/// <value>The source ErpOrgTree for ErpOrgTreeToId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ErpOrgTree ErpOrgTreeToIdSource
      	{
            get { return this._erpOrgTreeToIdSource; }
            set { this._erpOrgTreeToIdSource = value; }
      	}
		private ErpOrgTree _erpOrgTreeFromIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ErpOrgTree"/>.
		/// </summary>
		/// <value>The source ErpOrgTree for ErpOrgTreeFromId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ErpOrgTree ErpOrgTreeFromIdSource
      	{
            get { return this._erpOrgTreeFromIdSource; }
            set { this._erpOrgTreeFromIdSource = value; }
      	}
		private GsCdeCampus _gsCdeCampusIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCdeCampus"/>.
		/// </summary>
		/// <value>The source GsCdeCampus for GsCdeCampusId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCdeCampus GsCdeCampusIdSource
      	{
            get { return this._gsCdeCampusIdSource; }
            set { this._gsCdeCampusIdSource = value; }
      	}
		private GsCdePenalty _gsCdePenaltyIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCdePenalty"/>.
		/// </summary>
		/// <value>The source GsCdePenalty for GsCdePenaltyId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCdePenalty GsCdePenaltyIdSource
      	{
            get { return this._gsCdePenaltyIdSource; }
            set { this._gsCdePenaltyIdSource = value; }
      	}
		private GsCdeViol _gsCdeViolIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCdeViol"/>.
		/// </summary>
		/// <value>The source GsCdeViol for GsCdeViolId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCdeViol GsCdeViolIdSource
      	{
            get { return this._gsCdeViolIdSource; }
            set { this._gsCdeViolIdSource = value; }
      	}
		private GsCdeViolCat _gsCdeViolCatIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCdeViolCat"/>.
		/// </summary>
		/// <value>The source GsCdeViolCat for GsCdeViolCatId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCdeViolCat GsCdeViolCatIdSource
      	{
            get { return this._gsCdeViolCatIdSource; }
            set { this._gsCdeViolCatIdSource = value; }
      	}
		private GsCodeApproval _gsCodeApprovalIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeApproval"/>.
		/// </summary>
		/// <value>The source GsCodeApproval for GsCodeApprovalId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeApproval GsCodeApprovalIdSource
      	{
            get { return this._gsCodeApprovalIdSource; }
            set { this._gsCodeApprovalIdSource = value; }
      	}
		private ScBuilding _scBuildingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScBuilding"/>.
		/// </summary>
		/// <value>The source ScBuilding for ScBuildingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScBuilding ScBuildingIdSource
      	{
            get { return this._scBuildingIdSource; }
            set { this._scBuildingIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EdStudViolAppeal
		
		private EdStudViolAppeal _edStudViolAppealEdStudViolId;
		
		/// <summary>
		///	Holds a  EdStudViolAppeal entity object
		///	which is related to this object through the relation _edStudViolAppealEdStudViolId
		/// </summary>
		
		public EdStudViolAppeal EdStudViolAppeal
		{
			get {		return _edStudViolAppealEdStudViolId;		}
			set { 	_edStudViolAppealEdStudViolId = value; 	}
		}
		
		#endregion 

		#region MltStudBhvrAttndcCollection
		
		private TList<MltStudBhvrAttndc> _mltStudBhvrAttndcEdStudViolId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _mltStudBhvrAttndcEdStudViolId
		/// </summary>
		
		public TList<MltStudBhvrAttndc> MltStudBhvrAttndcCollection
		{
			get
			{
				if (_mltStudBhvrAttndcEdStudViolId == null)
				{
				_mltStudBhvrAttndcEdStudViolId = new TList<MltStudBhvrAttndc>();
				}
	
				return _mltStudBhvrAttndcEdStudViolId;
			}
			set { _mltStudBhvrAttndcEdStudViolId = value; }
		}
		
		#endregion

		#region GsAttchdDocCollectionGetByEdStudViolId
		
		private TList<GsAttchdDoc> _gsAttchdDocEdStudViolInvestIdGetByEdStudViolId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _gsAttchdDocEdStudViolInvestIdGetByEdStudViolId
		/// </summary>
		
		public TList<GsAttchdDoc> GsAttchdDocCollectionGetByEdStudViolId
		{
			get
			{
				if (_gsAttchdDocEdStudViolInvestIdGetByEdStudViolId == null)
				{
				_gsAttchdDocEdStudViolInvestIdGetByEdStudViolId = new TList<GsAttchdDoc>();
				}
	
				return _gsAttchdDocEdStudViolInvestIdGetByEdStudViolId;
			}
			set { _gsAttchdDocEdStudViolInvestIdGetByEdStudViolId = value; }
		}
		
		#endregion

		#region GsAttchdDocCollectionGetByEdStudViolInvestId
		
		private TList<GsAttchdDoc> _gsAttchdDocEdStudViolInvestIdGetByEdStudViolInvestId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _gsAttchdDocEdStudViolInvestIdGetByEdStudViolInvestId
		/// </summary>
		
		public TList<GsAttchdDoc> GsAttchdDocCollectionGetByEdStudViolInvestId
		{
			get
			{
				if (_gsAttchdDocEdStudViolInvestIdGetByEdStudViolInvestId == null)
				{
				_gsAttchdDocEdStudViolInvestIdGetByEdStudViolInvestId = new TList<GsAttchdDoc>();
				}
	
				return _gsAttchdDocEdStudViolInvestIdGetByEdStudViolInvestId;
			}
			set { _gsAttchdDocEdStudViolInvestIdGetByEdStudViolInvestId = value; }
		}
		
		#endregion

		#region EdStudPnltyCourseCollection
		
		private TList<EdStudPnltyCourse> _edStudPnltyCourseEdStudViolId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudPnltyCourseEdStudViolId
		/// </summary>
		
		public TList<EdStudPnltyCourse> EdStudPnltyCourseCollection
		{
			get
			{
				if (_edStudPnltyCourseEdStudViolId == null)
				{
				_edStudPnltyCourseEdStudViolId = new TList<EdStudPnltyCourse>();
				}
	
				return _edStudPnltyCourseEdStudViolId;
			}
			set { _edStudPnltyCourseEdStudViolId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdStudViolEntityData _tmp = new EdStudViolEntityData();
						
			_tmp.EdStudViolId = this.EdStudViolId;
			_tmp.OriginalEdStudViolId = this.OriginalEdStudViolId;
			
			_tmp.EdStudId = this.EdStudId;
			_tmp.GsCdeCampusId = this.GsCdeCampusId;
			_tmp.ScBuildingId = this.ScBuildingId;
			_tmp.ViolDate = this.ViolDate;
			_tmp.GsCdeViolId = this.GsCdeViolId;
			_tmp.GroupId = this.GroupId;
			_tmp.GsCdePenaltyId = this.GsCdePenaltyId;
			_tmp.PnltyDate = this.PnltyDate;
			_tmp.ViolFrom = this.ViolFrom;
			_tmp.ViolTo = this.ViolTo;
			_tmp.PnltyFrom = this.PnltyFrom;
			_tmp.PnltyTo = this.PnltyTo;
			_tmp.BhvrMark = this.BhvrMark;
			_tmp.AttndMark = this.AttndMark;
			_tmp.DropDate = this.DropDate;
			_tmp.Notes = this.Notes;
			_tmp.ErpOrgTreeFromId = this.ErpOrgTreeFromId;
			_tmp.ErpOrgTreeToId = this.ErpOrgTreeToId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.ViolSerial = this.ViolSerial;
			_tmp.BanFee = this.BanFee;
			_tmp.BanFeePayFlag = this.BanFeePayFlag;
			_tmp.DropFlg = this.DropFlg;
			_tmp.EdCodeSemesterStopFromId = this.EdCodeSemesterStopFromId;
			_tmp.EdAcadYearStopFromId = this.EdAcadYearStopFromId;
			_tmp.EdCodeSemesterStopToId = this.EdCodeSemesterStopToId;
			_tmp.EdAcadYearStopToId = this.EdAcadYearStopToId;
			_tmp.AppealFlg = this.AppealFlg;
			_tmp.OtherFlag = this.OtherFlag;
			_tmp.OtherSite = this.OtherSite;
			_tmp.GsCdeViolCatId = this.GsCdeViolCatId;
			_tmp.InvestigationCommInOut = this.InvestigationCommInOut;
			_tmp.InvestigationDate = this.InvestigationDate;
			_tmp.InvestigationEndDate = this.InvestigationEndDate;
			_tmp.InvestigationRecommendation = this.InvestigationRecommendation;
			_tmp.ApprovedBy = this.ApprovedBy;
			_tmp.CancelFlg = this.CancelFlg;
			_tmp.PunishCommFlg = this.PunishCommFlg;
			_tmp.PunishCommDate = this.PunishCommDate;
			_tmp.PunishCommEndDate = this.PunishCommEndDate;
			_tmp.PenaltyRelatedFlg = this.PenaltyRelatedFlg;
			_tmp.SemesterNo = this.SemesterNo;
			_tmp.AbsenceFlg = this.AbsenceFlg;
			_tmp.ExecFlg = this.ExecFlg;
			_tmp.ExeFlgReg = this.ExeFlgReg;
			_tmp.WarningNo = this.WarningNo;
			_tmp.EdStudCheatId = this.EdStudCheatId;
			_tmp.Witness = this.Witness;
			_tmp.GsCodeApprovalId = this.GsCodeApprovalId;
			_tmp.ApprovedByName = this.ApprovedByName;
			_tmp.AttchdDocPath = this.AttchdDocPath;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdAcadYearStopFromIdSource != null)
				_tmp.EdAcadYearStopFromIdSource = MakeCopyOf(this.EdAcadYearStopFromIdSource) as EdAcadYear;
			if (this.EdAcadYearStopToIdSource != null)
				_tmp.EdAcadYearStopToIdSource = MakeCopyOf(this.EdAcadYearStopToIdSource) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.EdCodeSemesterStopFromIdSource != null)
				_tmp.EdCodeSemesterStopFromIdSource = MakeCopyOf(this.EdCodeSemesterStopFromIdSource) as EdCodeSemester;
			if (this.EdCodeSemesterStopToIdSource != null)
				_tmp.EdCodeSemesterStopToIdSource = MakeCopyOf(this.EdCodeSemesterStopToIdSource) as EdCodeSemester;
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			if (this.EdStudCheatIdSource != null)
				_tmp.EdStudCheatIdSource = MakeCopyOf(this.EdStudCheatIdSource) as EdStudCheat;
			if (this.ErpOrgTreeToIdSource != null)
				_tmp.ErpOrgTreeToIdSource = MakeCopyOf(this.ErpOrgTreeToIdSource) as ErpOrgTree;
			if (this.ErpOrgTreeFromIdSource != null)
				_tmp.ErpOrgTreeFromIdSource = MakeCopyOf(this.ErpOrgTreeFromIdSource) as ErpOrgTree;
			if (this.GsCdeCampusIdSource != null)
				_tmp.GsCdeCampusIdSource = MakeCopyOf(this.GsCdeCampusIdSource) as GsCdeCampus;
			if (this.GsCdePenaltyIdSource != null)
				_tmp.GsCdePenaltyIdSource = MakeCopyOf(this.GsCdePenaltyIdSource) as GsCdePenalty;
			if (this.GsCdeViolIdSource != null)
				_tmp.GsCdeViolIdSource = MakeCopyOf(this.GsCdeViolIdSource) as GsCdeViol;
			if (this.GsCdeViolCatIdSource != null)
				_tmp.GsCdeViolCatIdSource = MakeCopyOf(this.GsCdeViolCatIdSource) as GsCdeViolCat;
			if (this.GsCodeApprovalIdSource != null)
				_tmp.GsCodeApprovalIdSource = MakeCopyOf(this.GsCodeApprovalIdSource) as GsCodeApproval;
			if (this.ScBuildingIdSource != null)
				_tmp.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource) as ScBuilding;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._edStudViolAppealEdStudViolId != null)
				_tmp.EdStudViolAppeal = (EdStudViolAppeal) MakeCopyOf(this.EdStudViolAppeal); 
			if (this._mltStudBhvrAttndcEdStudViolId != null)
				_tmp.MltStudBhvrAttndcCollection = (TList<MltStudBhvrAttndc>) MakeCopyOf(this.MltStudBhvrAttndcCollection); 
			if (this._gsAttchdDocEdStudViolInvestIdGetByEdStudViolId != null)
				_tmp.GsAttchdDocCollectionGetByEdStudViolId = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollectionGetByEdStudViolId); 
			if (this._gsAttchdDocEdStudViolInvestIdGetByEdStudViolInvestId != null)
				_tmp.GsAttchdDocCollectionGetByEdStudViolInvestId = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollectionGetByEdStudViolInvestId); 
			if (this._edStudPnltyCourseEdStudViolId != null)
				_tmp.EdStudPnltyCourseCollection = (TList<EdStudPnltyCourse>) MakeCopyOf(this.EdStudPnltyCourseCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdStudViolEntityData _tmp = new EdStudViolEntityData();
						
			_tmp.EdStudViolId = this.EdStudViolId;
			_tmp.OriginalEdStudViolId = this.OriginalEdStudViolId;
			
			_tmp.EdStudId = this.EdStudId;
			_tmp.GsCdeCampusId = this.GsCdeCampusId;
			_tmp.ScBuildingId = this.ScBuildingId;
			_tmp.ViolDate = this.ViolDate;
			_tmp.GsCdeViolId = this.GsCdeViolId;
			_tmp.GroupId = this.GroupId;
			_tmp.GsCdePenaltyId = this.GsCdePenaltyId;
			_tmp.PnltyDate = this.PnltyDate;
			_tmp.ViolFrom = this.ViolFrom;
			_tmp.ViolTo = this.ViolTo;
			_tmp.PnltyFrom = this.PnltyFrom;
			_tmp.PnltyTo = this.PnltyTo;
			_tmp.BhvrMark = this.BhvrMark;
			_tmp.AttndMark = this.AttndMark;
			_tmp.DropDate = this.DropDate;
			_tmp.Notes = this.Notes;
			_tmp.ErpOrgTreeFromId = this.ErpOrgTreeFromId;
			_tmp.ErpOrgTreeToId = this.ErpOrgTreeToId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.ViolSerial = this.ViolSerial;
			_tmp.BanFee = this.BanFee;
			_tmp.BanFeePayFlag = this.BanFeePayFlag;
			_tmp.DropFlg = this.DropFlg;
			_tmp.EdCodeSemesterStopFromId = this.EdCodeSemesterStopFromId;
			_tmp.EdAcadYearStopFromId = this.EdAcadYearStopFromId;
			_tmp.EdCodeSemesterStopToId = this.EdCodeSemesterStopToId;
			_tmp.EdAcadYearStopToId = this.EdAcadYearStopToId;
			_tmp.AppealFlg = this.AppealFlg;
			_tmp.OtherFlag = this.OtherFlag;
			_tmp.OtherSite = this.OtherSite;
			_tmp.GsCdeViolCatId = this.GsCdeViolCatId;
			_tmp.InvestigationCommInOut = this.InvestigationCommInOut;
			_tmp.InvestigationDate = this.InvestigationDate;
			_tmp.InvestigationEndDate = this.InvestigationEndDate;
			_tmp.InvestigationRecommendation = this.InvestigationRecommendation;
			_tmp.ApprovedBy = this.ApprovedBy;
			_tmp.CancelFlg = this.CancelFlg;
			_tmp.PunishCommFlg = this.PunishCommFlg;
			_tmp.PunishCommDate = this.PunishCommDate;
			_tmp.PunishCommEndDate = this.PunishCommEndDate;
			_tmp.PenaltyRelatedFlg = this.PenaltyRelatedFlg;
			_tmp.SemesterNo = this.SemesterNo;
			_tmp.AbsenceFlg = this.AbsenceFlg;
			_tmp.ExecFlg = this.ExecFlg;
			_tmp.ExeFlgReg = this.ExeFlgReg;
			_tmp.WarningNo = this.WarningNo;
			_tmp.EdStudCheatId = this.EdStudCheatId;
			_tmp.Witness = this.Witness;
			_tmp.GsCodeApprovalId = this.GsCodeApprovalId;
			_tmp.ApprovedByName = this.ApprovedByName;
			_tmp.AttchdDocPath = this.AttchdDocPath;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdAcadYearStopFromIdSource != null && existingCopies.Contains(this.EdAcadYearStopFromIdSource))
				_tmp.EdAcadYearStopFromIdSource = existingCopies[this.EdAcadYearStopFromIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearStopFromIdSource = MakeCopyOf(this.EdAcadYearStopFromIdSource, existingCopies) as EdAcadYear;
			if (this.EdAcadYearStopToIdSource != null && existingCopies.Contains(this.EdAcadYearStopToIdSource))
				_tmp.EdAcadYearStopToIdSource = existingCopies[this.EdAcadYearStopToIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearStopToIdSource = MakeCopyOf(this.EdAcadYearStopToIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCodeSemesterStopFromIdSource != null && existingCopies.Contains(this.EdCodeSemesterStopFromIdSource))
				_tmp.EdCodeSemesterStopFromIdSource = existingCopies[this.EdCodeSemesterStopFromIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterStopFromIdSource = MakeCopyOf(this.EdCodeSemesterStopFromIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCodeSemesterStopToIdSource != null && existingCopies.Contains(this.EdCodeSemesterStopToIdSource))
				_tmp.EdCodeSemesterStopToIdSource = existingCopies[this.EdCodeSemesterStopToIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterStopToIdSource = MakeCopyOf(this.EdCodeSemesterStopToIdSource, existingCopies) as EdCodeSemester;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.EdStudCheatIdSource != null && existingCopies.Contains(this.EdStudCheatIdSource))
				_tmp.EdStudCheatIdSource = existingCopies[this.EdStudCheatIdSource] as EdStudCheat;
			else
				_tmp.EdStudCheatIdSource = MakeCopyOf(this.EdStudCheatIdSource, existingCopies) as EdStudCheat;
			if (this.ErpOrgTreeToIdSource != null && existingCopies.Contains(this.ErpOrgTreeToIdSource))
				_tmp.ErpOrgTreeToIdSource = existingCopies[this.ErpOrgTreeToIdSource] as ErpOrgTree;
			else
				_tmp.ErpOrgTreeToIdSource = MakeCopyOf(this.ErpOrgTreeToIdSource, existingCopies) as ErpOrgTree;
			if (this.ErpOrgTreeFromIdSource != null && existingCopies.Contains(this.ErpOrgTreeFromIdSource))
				_tmp.ErpOrgTreeFromIdSource = existingCopies[this.ErpOrgTreeFromIdSource] as ErpOrgTree;
			else
				_tmp.ErpOrgTreeFromIdSource = MakeCopyOf(this.ErpOrgTreeFromIdSource, existingCopies) as ErpOrgTree;
			if (this.GsCdeCampusIdSource != null && existingCopies.Contains(this.GsCdeCampusIdSource))
				_tmp.GsCdeCampusIdSource = existingCopies[this.GsCdeCampusIdSource] as GsCdeCampus;
			else
				_tmp.GsCdeCampusIdSource = MakeCopyOf(this.GsCdeCampusIdSource, existingCopies) as GsCdeCampus;
			if (this.GsCdePenaltyIdSource != null && existingCopies.Contains(this.GsCdePenaltyIdSource))
				_tmp.GsCdePenaltyIdSource = existingCopies[this.GsCdePenaltyIdSource] as GsCdePenalty;
			else
				_tmp.GsCdePenaltyIdSource = MakeCopyOf(this.GsCdePenaltyIdSource, existingCopies) as GsCdePenalty;
			if (this.GsCdeViolIdSource != null && existingCopies.Contains(this.GsCdeViolIdSource))
				_tmp.GsCdeViolIdSource = existingCopies[this.GsCdeViolIdSource] as GsCdeViol;
			else
				_tmp.GsCdeViolIdSource = MakeCopyOf(this.GsCdeViolIdSource, existingCopies) as GsCdeViol;
			if (this.GsCdeViolCatIdSource != null && existingCopies.Contains(this.GsCdeViolCatIdSource))
				_tmp.GsCdeViolCatIdSource = existingCopies[this.GsCdeViolCatIdSource] as GsCdeViolCat;
			else
				_tmp.GsCdeViolCatIdSource = MakeCopyOf(this.GsCdeViolCatIdSource, existingCopies) as GsCdeViolCat;
			if (this.GsCodeApprovalIdSource != null && existingCopies.Contains(this.GsCodeApprovalIdSource))
				_tmp.GsCodeApprovalIdSource = existingCopies[this.GsCodeApprovalIdSource] as GsCodeApproval;
			else
				_tmp.GsCodeApprovalIdSource = MakeCopyOf(this.GsCodeApprovalIdSource, existingCopies) as GsCodeApproval;
			if (this.ScBuildingIdSource != null && existingCopies.Contains(this.ScBuildingIdSource))
				_tmp.ScBuildingIdSource = existingCopies[this.ScBuildingIdSource] as ScBuilding;
			else
				_tmp.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource, existingCopies) as ScBuilding;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EdStudViolAppeal = (EdStudViolAppeal) MakeCopyOf(this.EdStudViolAppeal, existingCopies); 
			_tmp.MltStudBhvrAttndcCollection = (TList<MltStudBhvrAttndc>) MakeCopyOf(this.MltStudBhvrAttndcCollection, existingCopies); 
			_tmp.GsAttchdDocCollectionGetByEdStudViolId = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollectionGetByEdStudViolId, existingCopies); 
			_tmp.GsAttchdDocCollectionGetByEdStudViolInvestId = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollectionGetByEdStudViolInvestId, existingCopies); 
			_tmp.EdStudPnltyCourseCollection = (TList<EdStudPnltyCourse>) MakeCopyOf(this.EdStudPnltyCourseCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudViolColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdStudViolColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudViolColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdStudViolColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudViolColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdStudViolColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdStudViolEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdStudViolEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudViolColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdStudViolColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdStudViolEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdStudViolEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdStudViolEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdStudViol"/> object.
	/// </remarks>
	public class EdStudViolEventArgs : System.EventArgs
	{
		private EdStudViolColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdStudViolEventArgs class.
		///</summary>
		public EdStudViolEventArgs(EdStudViolColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdStudViolEventArgs class.
		///</summary>
		public EdStudViolEventArgs(EdStudViolColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdStudViolColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdStudViolColumn" />
		public EdStudViolColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdStudViol related events.
	///</summary>
	public delegate void EdStudViolEventHandler(object sender, EdStudViolEventArgs e);
	
	#region EdStudViolComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdStudViolComparer : System.Collections.Generic.IComparer<EdStudViol>
	{
		EdStudViolColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudViolComparer"/> class.
        /// </summary>
		public EdStudViolComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudViolComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdStudViolComparer(EdStudViolColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdStudViol"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdStudViol"/> to compare.</param>
        /// <param name="b">The second <c>EdStudViol</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdStudViol a, EdStudViol b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdStudViol entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdStudViol a, EdStudViol b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdStudViolColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdStudViolKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdStudViol"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdStudViolKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdStudViolKey class.
		/// </summary>
		public EdStudViolKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudViolKey class.
		/// </summary>
		public EdStudViolKey(EdStudViolBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdStudViolId = entity.EdStudViolId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudViolKey class.
		/// </summary>
		public EdStudViolKey(System.Decimal _edStudViolId)
		{
			#region Init Properties

			this.EdStudViolId = _edStudViolId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdStudViolBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdStudViolBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdStudViolId property
		private System.Decimal _edStudViolId;
		
		/// <summary>
		/// Gets or sets the EdStudViolId property.
		/// </summary>
		public System.Decimal EdStudViolId
		{
			get { return _edStudViolId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdStudViolId = value;
				
				_edStudViolId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdStudViolId = ( values["EdStudViolId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdStudViolId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdStudViolId", EdStudViolId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdStudViolId: {0}{1}",
								EdStudViolId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdStudViolColumn Enum
	
	/// <summary>
	/// Enumerate the EdStudViol columns.
	/// </summary>
	[Serializable]
	public enum EdStudViolColumn : int
	{
		/// <summary>
		/// EdStudViolId : 
		/// </summary>
		[EnumTextValue("ED_STUD_VIOL_ID")]
		[ColumnEnum("ED_STUD_VIOL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdStudViolId = 1,
		/// <summary>
		/// EdStudId : 
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudId = 2,
		/// <summary>
		/// GsCdeCampusId : 
		/// </summary>
		[EnumTextValue("GS_CDE_CAMPUS_ID")]
		[ColumnEnum("GS_CDE_CAMPUS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCdeCampusId = 3,
		/// <summary>
		/// ScBuildingId : 
		/// </summary>
		[EnumTextValue("SC_BUILDING_ID")]
		[ColumnEnum("SC_BUILDING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScBuildingId = 4,
		/// <summary>
		/// ViolDate : 
		/// </summary>
		[EnumTextValue("VIOL_DATE")]
		[ColumnEnum("VIOL_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ViolDate = 5,
		/// <summary>
		/// GsCdeViolId : 
		/// </summary>
		[EnumTextValue("GS_CDE_VIOL_ID")]
		[ColumnEnum("GS_CDE_VIOL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsCdeViolId = 6,
		/// <summary>
		/// GroupId : 
		/// </summary>
		[EnumTextValue("GROUP_ID")]
		[ColumnEnum("GROUP_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GroupId = 7,
		/// <summary>
		/// GsCdePenaltyId : 
		/// </summary>
		[EnumTextValue("GS_CDE_PENALTY_ID")]
		[ColumnEnum("GS_CDE_PENALTY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCdePenaltyId = 8,
		/// <summary>
		/// PnltyDate : 
		/// </summary>
		[EnumTextValue("PNLTY_DATE")]
		[ColumnEnum("PNLTY_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		PnltyDate = 9,
		/// <summary>
		/// ViolFrom : تاريخ العقوبة من
		/// </summary>
		[EnumTextValue("VIOL_FROM")]
		[ColumnEnum("VIOL_FROM", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		ViolFrom = 10,
		/// <summary>
		/// ViolTo : تاريخ العقوبة الى
		/// </summary>
		[EnumTextValue("VIOL_TO")]
		[ColumnEnum("VIOL_TO", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		ViolTo = 11,
		/// <summary>
		/// PnltyFrom : تاريخ العقوبة من
		/// </summary>
		[EnumTextValue("PNLTY_FROM")]
		[ColumnEnum("PNLTY_FROM", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		PnltyFrom = 12,
		/// <summary>
		/// PnltyTo : تاريخ العقوبة الى
		/// </summary>
		[EnumTextValue("PNLTY_TO")]
		[ColumnEnum("PNLTY_TO", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		PnltyTo = 13,
		/// <summary>
		/// BhvrMark : خصم درجة سلوك
		/// </summary>
		[EnumTextValue("BHVR_MARK")]
		[ColumnEnum("BHVR_MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		BhvrMark = 14,
		/// <summary>
		/// AttndMark : خصم درجة مواظبة
		/// </summary>
		[EnumTextValue("ATTND_MARK")]
		[ColumnEnum("ATTND_MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AttndMark = 15,
		/// <summary>
		/// DropDate : 
		/// </summary>
		[EnumTextValue("DROP_DATE")]
		[ColumnEnum("DROP_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DropDate = 16,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		Notes = 17,
		/// <summary>
		/// ErpOrgTreeFromId : 
		/// </summary>
		[EnumTextValue("ERP_ORG_TREE_FROM_ID")]
		[ColumnEnum("ERP_ORG_TREE_FROM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ErpOrgTreeFromId = 18,
		/// <summary>
		/// ErpOrgTreeToId : 
		/// </summary>
		[EnumTextValue("ERP_ORG_TREE_TO_ID")]
		[ColumnEnum("ERP_ORG_TREE_TO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ErpOrgTreeToId = 19,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 20,
		/// <summary>
		/// EdCodeSemesterId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeSemesterId = 21,
		/// <summary>
		/// ViolSerial : 
		/// </summary>
		[EnumTextValue("VIOL_SERIAL")]
		[ColumnEnum("VIOL_SERIAL", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ViolSerial = 22,
		/// <summary>
		/// BanFee : 
		/// </summary>
		[EnumTextValue("BAN_FEE")]
		[ColumnEnum("BAN_FEE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		BanFee = 23,
		/// <summary>
		/// BanFeePayFlag : 
		/// </summary>
		[EnumTextValue("BAN_FEE_PAY_FLAG")]
		[ColumnEnum("BAN_FEE_PAY_FLAG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		BanFeePayFlag = 24,
		/// <summary>
		/// DropFlg : 
		/// </summary>
		[EnumTextValue("DROP_FLG")]
		[ColumnEnum("DROP_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		DropFlg = 25,
		/// <summary>
		/// EdCodeSemesterStopFromId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_STOP_FROM_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_STOP_FROM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeSemesterStopFromId = 26,
		/// <summary>
		/// EdAcadYearStopFromId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_STOP_FROM_ID")]
		[ColumnEnum("ED_ACAD_YEAR_STOP_FROM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdAcadYearStopFromId = 27,
		/// <summary>
		/// EdCodeSemesterStopToId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_STOP_TO_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_STOP_TO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeSemesterStopToId = 28,
		/// <summary>
		/// EdAcadYearStopToId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_STOP_TO_ID")]
		[ColumnEnum("ED_ACAD_YEAR_STOP_TO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdAcadYearStopToId = 29,
		/// <summary>
		/// AppealFlg : 
		/// </summary>
		[EnumTextValue("APPEAL_FLG")]
		[ColumnEnum("APPEAL_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AppealFlg = 30,
		/// <summary>
		/// OtherFlag : 
		/// </summary>
		[EnumTextValue("OTHER_FLAG")]
		[ColumnEnum("OTHER_FLAG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		OtherFlag = 31,
		/// <summary>
		/// OtherSite : 
		/// </summary>
		[EnumTextValue("OTHER_SITE")]
		[ColumnEnum("OTHER_SITE", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		OtherSite = 32,
		/// <summary>
		/// GsCdeViolCatId : 
		/// </summary>
		[EnumTextValue("GS_CDE_VIOL_CAT_ID")]
		[ColumnEnum("GS_CDE_VIOL_CAT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsCdeViolCatId = 33,
		/// <summary>
		/// InvestigationCommInOut : 
		/// </summary>
		[EnumTextValue("INVESTIGATION_COMM_IN_OUT")]
		[ColumnEnum("INVESTIGATION_COMM_IN_OUT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		InvestigationCommInOut = 34,
		/// <summary>
		/// InvestigationDate : 
		/// </summary>
		[EnumTextValue("INVESTIGATION_DATE")]
		[ColumnEnum("INVESTIGATION_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		InvestigationDate = 35,
		/// <summary>
		/// InvestigationEndDate : 
		/// </summary>
		[EnumTextValue("INVESTIGATION_END_DATE")]
		[ColumnEnum("INVESTIGATION_END_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		InvestigationEndDate = 36,
		/// <summary>
		/// InvestigationRecommendation : 
		/// </summary>
		[EnumTextValue("INVESTIGATION_RECOMMENDATION")]
		[ColumnEnum("INVESTIGATION_RECOMMENDATION", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		InvestigationRecommendation = 37,
		/// <summary>
		/// ApprovedBy : 
		/// </summary>
		[EnumTextValue("APPROVED_BY")]
		[ColumnEnum("APPROVED_BY", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ApprovedBy = 38,
		/// <summary>
		/// CancelFlg : 
		/// </summary>
		[EnumTextValue("CANCEL_FLG")]
		[ColumnEnum("CANCEL_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CancelFlg = 39,
		/// <summary>
		/// PunishCommFlg : 
		/// </summary>
		[EnumTextValue("PUNISH_COMM_FLG")]
		[ColumnEnum("PUNISH_COMM_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PunishCommFlg = 40,
		/// <summary>
		/// PunishCommDate : 
		/// </summary>
		[EnumTextValue("PUNISH_COMM_DATE")]
		[ColumnEnum("PUNISH_COMM_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		PunishCommDate = 41,
		/// <summary>
		/// PunishCommEndDate : 
		/// </summary>
		[EnumTextValue("PUNISH_COMM_END_DATE")]
		[ColumnEnum("PUNISH_COMM_END_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		PunishCommEndDate = 42,
		/// <summary>
		/// PenaltyRelatedFlg : 
		/// </summary>
		[EnumTextValue("PENALTY_RELATED_FLG")]
		[ColumnEnum("PENALTY_RELATED_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PenaltyRelatedFlg = 43,
		/// <summary>
		/// SemesterNo : 
		/// </summary>
		[EnumTextValue("SEMESTER_NO")]
		[ColumnEnum("SEMESTER_NO", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SemesterNo = 44,
		/// <summary>
		/// AbsenceFlg : 
		/// </summary>
		[EnumTextValue("ABSENCE_FLG")]
		[ColumnEnum("ABSENCE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AbsenceFlg = 45,
		/// <summary>
		/// ExecFlg : 
		/// </summary>
		[EnumTextValue("EXEC_FLG")]
		[ColumnEnum("EXEC_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ExecFlg = 46,
		/// <summary>
		/// ExeFlgReg : 
		/// </summary>
		[EnumTextValue("EXE_FLG_REG")]
		[ColumnEnum("EXE_FLG_REG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ExeFlgReg = 47,
		/// <summary>
		/// WarningNo : 
		/// </summary>
		[EnumTextValue("WARNING_NO")]
		[ColumnEnum("WARNING_NO", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		WarningNo = 48,
		/// <summary>
		/// EdStudCheatId : 
		/// </summary>
		[EnumTextValue("ED_STUD_CHEAT_ID")]
		[ColumnEnum("ED_STUD_CHEAT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdStudCheatId = 49,
		/// <summary>
		/// Witness : الشهود
		/// </summary>
		[EnumTextValue("WITNESS")]
		[ColumnEnum("WITNESS", typeof(System.String), System.Data.DbType.String, false, false, true, 300)]
		Witness = 50,
		/// <summary>
		/// GsCodeApprovalId : صلاحية
		/// </summary>
		[EnumTextValue("GS_CODE_APPROVAL_ID")]
		[ColumnEnum("GS_CODE_APPROVAL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCodeApprovalId = 51,
		/// <summary>
		/// ApprovedByName : الامر بالعقوبة
		/// </summary>
		[EnumTextValue("APPROVED_BY_NAME")]
		[ColumnEnum("APPROVED_BY_NAME", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		ApprovedByName = 52,
		/// <summary>
		/// AttchdDocPath : 
		/// </summary>
		[EnumTextValue("ATTCHD_DOC_PATH")]
		[ColumnEnum("ATTCHD_DOC_PATH", typeof(System.String), System.Data.DbType.String, false, false, true)]
		AttchdDocPath = 53,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 54,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 55
	}//End enum

	#endregion EdStudViolColumn Enum

} // end namespace
