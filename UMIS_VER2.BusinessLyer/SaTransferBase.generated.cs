
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SaTransfer.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SA_TRANSFER' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SaTransferBase : EntityBase, ISaTransfer, IEntityId<SaTransferKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SaTransferEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SaTransferEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SaTransferEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SaTransfer> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaTransferEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaTransferEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SaTransferBase"/> instance.
		///</summary>
		public SaTransferBase()
		{
			this.entityData = new SaTransferEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SaTransferBase"/> instance.
		///</summary>
		///<param name="_saTransferId"></param>
		///<param name="_decisionNum"></param>
		///<param name="_decisionDate"></param>
		///<param name="_decisionSumm"></param>
		///<param name="_transferStartDate"></param>
		///<param name="_tansferType"></param>
		///<param name="_isUniOrg"></param>
		///<param name="_comments"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_asNodeId"></param>
		///<param name="_saCodeOrgId"></param>
		///<param name="_gsApprovalHId"></param>
		///<param name="_doseAffectStaffStat"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_asNodeIdOld"></param>
		public SaTransferBase(System.Decimal _saTransferId, System.String _decisionNum, System.DateTime _decisionDate, 
			System.String _decisionSumm, System.DateTime _transferStartDate, System.Decimal _tansferType, 
			System.Decimal _isUniOrg, System.String _comments, System.Decimal _saStfMemberId, System.Decimal? _asNodeId, 
			System.Decimal? _saCodeOrgId, System.Decimal _gsApprovalHId, System.Decimal _doseAffectStaffStat, 
			System.Decimal _asFacultyInfoId, System.Decimal _asNodeIdOld)
		{
			this.entityData = new SaTransferEntityData();
			this.backupData = null;

			this.SaTransferId = _saTransferId;
			this.DecisionNum = _decisionNum;
			this.DecisionDate = _decisionDate;
			this.DecisionSumm = _decisionSumm;
			this.TransferStartDate = _transferStartDate;
			this.TansferType = _tansferType;
			this.IsUniOrg = _isUniOrg;
			this.Comments = _comments;
			this.SaStfMemberId = _saStfMemberId;
			this.AsNodeId = _asNodeId;
			this.SaCodeOrgId = _saCodeOrgId;
			this.GsApprovalHId = _gsApprovalHId;
			this.DoseAffectStaffStat = _doseAffectStaffStat;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.AsNodeIdOld = _asNodeIdOld;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SaTransfer"/> instance.
		///</summary>
		///<param name="_saTransferId"></param>
		///<param name="_decisionNum"></param>
		///<param name="_decisionDate"></param>
		///<param name="_decisionSumm"></param>
		///<param name="_transferStartDate"></param>
		///<param name="_tansferType"></param>
		///<param name="_isUniOrg"></param>
		///<param name="_comments"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_asNodeId"></param>
		///<param name="_saCodeOrgId"></param>
		///<param name="_gsApprovalHId"></param>
		///<param name="_doseAffectStaffStat"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_asNodeIdOld"></param>
		public static SaTransfer CreateSaTransfer(System.Decimal _saTransferId, System.String _decisionNum, System.DateTime _decisionDate, 
			System.String _decisionSumm, System.DateTime _transferStartDate, System.Decimal _tansferType, 
			System.Decimal _isUniOrg, System.String _comments, System.Decimal _saStfMemberId, System.Decimal? _asNodeId, 
			System.Decimal? _saCodeOrgId, System.Decimal _gsApprovalHId, System.Decimal _doseAffectStaffStat, 
			System.Decimal _asFacultyInfoId, System.Decimal _asNodeIdOld)
		{
			SaTransfer newSaTransfer = new SaTransfer();
			newSaTransfer.SaTransferId = _saTransferId;
			newSaTransfer.DecisionNum = _decisionNum;
			newSaTransfer.DecisionDate = _decisionDate;
			newSaTransfer.DecisionSumm = _decisionSumm;
			newSaTransfer.TransferStartDate = _transferStartDate;
			newSaTransfer.TansferType = _tansferType;
			newSaTransfer.IsUniOrg = _isUniOrg;
			newSaTransfer.Comments = _comments;
			newSaTransfer.SaStfMemberId = _saStfMemberId;
			newSaTransfer.AsNodeId = _asNodeId;
			newSaTransfer.SaCodeOrgId = _saCodeOrgId;
			newSaTransfer.GsApprovalHId = _gsApprovalHId;
			newSaTransfer.DoseAffectStaffStat = _doseAffectStaffStat;
			newSaTransfer.AsFacultyInfoId = _asFacultyInfoId;
			newSaTransfer.AsNodeIdOld = _asNodeIdOld;
			return newSaTransfer;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SaTransferId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SaTransferId
		{
			get
			{
				return this.entityData.SaTransferId; 
			}
			
			set
			{
				if (this.entityData.SaTransferId == value)
					return;
					
				OnColumnChanging(SaTransferColumn.SaTransferId, this.entityData.SaTransferId);
				this.entityData.SaTransferId = value;
				this.EntityId.SaTransferId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTransferColumn.SaTransferId, this.entityData.SaTransferId);
				OnPropertyChanged("SaTransferId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SA_TRANSFER_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SA_TRANSFER_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSaTransferId
		{
			get { return this.entityData.OriginalSaTransferId; }
			set { this.entityData.OriginalSaTransferId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the DecisionNum property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 15)]
		public virtual System.String DecisionNum
		{
			get
			{
				return this.entityData.DecisionNum; 
			}
			
			set
			{
				if (this.entityData.DecisionNum == value)
					return;
					
				OnColumnChanging(SaTransferColumn.DecisionNum, this.entityData.DecisionNum);
				this.entityData.DecisionNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTransferColumn.DecisionNum, this.entityData.DecisionNum);
				OnPropertyChanged("DecisionNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DecisionDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime DecisionDate
		{
			get
			{
				return this.entityData.DecisionDate; 
			}
			
			set
			{
				if (this.entityData.DecisionDate == value)
					return;
					
				OnColumnChanging(SaTransferColumn.DecisionDate, this.entityData.DecisionDate);
				this.entityData.DecisionDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTransferColumn.DecisionDate, this.entityData.DecisionDate);
				OnPropertyChanged("DecisionDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DecisionSumm property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String DecisionSumm
		{
			get
			{
				return this.entityData.DecisionSumm; 
			}
			
			set
			{
				if (this.entityData.DecisionSumm == value)
					return;
					
				OnColumnChanging(SaTransferColumn.DecisionSumm, this.entityData.DecisionSumm);
				this.entityData.DecisionSumm = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTransferColumn.DecisionSumm, this.entityData.DecisionSumm);
				OnPropertyChanged("DecisionSumm");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransferStartDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime TransferStartDate
		{
			get
			{
				return this.entityData.TransferStartDate; 
			}
			
			set
			{
				if (this.entityData.TransferStartDate == value)
					return;
					
				OnColumnChanging(SaTransferColumn.TransferStartDate, this.entityData.TransferStartDate);
				this.entityData.TransferStartDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTransferColumn.TransferStartDate, this.entityData.TransferStartDate);
				OnPropertyChanged("TransferStartDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TansferType property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal TansferType
		{
			get
			{
				return this.entityData.TansferType; 
			}
			
			set
			{
				if (this.entityData.TansferType == value)
					return;
					
				OnColumnChanging(SaTransferColumn.TansferType, this.entityData.TansferType);
				this.entityData.TansferType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTransferColumn.TansferType, this.entityData.TansferType);
				OnPropertyChanged("TansferType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsUniOrg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsUniOrg
		{
			get
			{
				return this.entityData.IsUniOrg; 
			}
			
			set
			{
				if (this.entityData.IsUniOrg == value)
					return;
					
				OnColumnChanging(SaTransferColumn.IsUniOrg, this.entityData.IsUniOrg);
				this.entityData.IsUniOrg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTransferColumn.IsUniOrg, this.entityData.IsUniOrg);
				OnPropertyChanged("IsUniOrg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Comments property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Comments
		{
			get
			{
				return this.entityData.Comments; 
			}
			
			set
			{
				if (this.entityData.Comments == value)
					return;
					
				OnColumnChanging(SaTransferColumn.Comments, this.entityData.Comments);
				this.entityData.Comments = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTransferColumn.Comments, this.entityData.Comments);
				OnPropertyChanged("Comments");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaStfMemberId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaStfMemberId
		{
			get
			{
				return this.entityData.SaStfMemberId; 
			}
			
			set
			{
				if (this.entityData.SaStfMemberId == value)
					return;
					
				OnColumnChanging(SaTransferColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				this.entityData.SaStfMemberId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTransferColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				OnPropertyChanged("SaStfMemberId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsNodeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsNodeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsNodeId
		{
			get
			{
				return this.entityData.AsNodeId; 
			}
			
			set
			{
				if (this.entityData.AsNodeId == value)
					return;
					
				OnColumnChanging(SaTransferColumn.AsNodeId, this.entityData.AsNodeId);
				this.entityData.AsNodeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTransferColumn.AsNodeId, this.entityData.AsNodeId);
				OnPropertyChanged("AsNodeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaCodeOrgId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSaCodeOrgIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SaCodeOrgId
		{
			get
			{
				return this.entityData.SaCodeOrgId; 
			}
			
			set
			{
				if (this.entityData.SaCodeOrgId == value)
					return;
					
				OnColumnChanging(SaTransferColumn.SaCodeOrgId, this.entityData.SaCodeOrgId);
				this.entityData.SaCodeOrgId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTransferColumn.SaCodeOrgId, this.entityData.SaCodeOrgId);
				OnPropertyChanged("SaCodeOrgId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsApprovalHId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsApprovalHId
		{
			get
			{
				return this.entityData.GsApprovalHId; 
			}
			
			set
			{
				if (this.entityData.GsApprovalHId == value)
					return;
					
				OnColumnChanging(SaTransferColumn.GsApprovalHId, this.entityData.GsApprovalHId);
				this.entityData.GsApprovalHId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTransferColumn.GsApprovalHId, this.entityData.GsApprovalHId);
				OnPropertyChanged("GsApprovalHId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DoseAffectStaffStat property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal DoseAffectStaffStat
		{
			get
			{
				return this.entityData.DoseAffectStaffStat; 
			}
			
			set
			{
				if (this.entityData.DoseAffectStaffStat == value)
					return;
					
				OnColumnChanging(SaTransferColumn.DoseAffectStaffStat, this.entityData.DoseAffectStaffStat);
				this.entityData.DoseAffectStaffStat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTransferColumn.DoseAffectStaffStat, this.entityData.DoseAffectStaffStat);
				OnPropertyChanged("DoseAffectStaffStat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(SaTransferColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTransferColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsNodeIdOld property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsNodeIdOld
		{
			get
			{
				return this.entityData.AsNodeIdOld; 
			}
			
			set
			{
				if (this.entityData.AsNodeIdOld == value)
					return;
					
				OnColumnChanging(SaTransferColumn.AsNodeIdOld, this.entityData.AsNodeIdOld);
				this.entityData.AsNodeIdOld = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaTransferColumn.AsNodeIdOld, this.entityData.AsNodeIdOld);
				OnPropertyChanged("AsNodeIdOld");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeOrg"/>.
		/// </summary>
		/// <value>The source SaCodeOrg for SaCodeOrgId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaCodeOrg SaCodeOrgIdSource
      	{
            get { return entityData.SaCodeOrgIdSource; }
            set { entityData.SaCodeOrgIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsApprovalH"/>.
		/// </summary>
		/// <value>The source GsApprovalH for GsApprovalHId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsApprovalH GsApprovalHIdSource
      	{
            get { return entityData.GsApprovalHIdSource; }
            set { entityData.GsApprovalHIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return entityData.SaStfMemberIdSource; }
            set { entityData.SaStfMemberIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of SaServTermin objects
		///	which are related to this object through the relation FK_AUTO_0367
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SaServTermin> SaServTerminCollection
		{
			get { return entityData.SaServTerminCollection; }
			set { entityData.SaServTerminCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DecisionNum", "Decision Num"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DecisionNum", "Decision Num", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DecisionSumm", "Decision Summ", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Comments", "Comments", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SA_TRANSFER"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SA_TRANSFER_ID", "DECISION_NUM", "DECISION_DATE", "DECISION_SUMM", "TRANSFER_START_DATE", "TANSFER_TYPE", "IS_UNI_ORG", "COMMENTS", "SA_STF_MEMBER_ID", "AS_NODE_ID", "SA_CODE_ORG_ID", "GS_APPROVAL_H_ID", "DOSE_AFFECT_STAFF_STAT", "AS_FACULTY_INFO_ID", "AS_NODE_ID_OLD"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SaTransferEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SaTransfer) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SaTransfer>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SaTransfer);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SaTransfer Entity 
		///</summary>
		protected virtual SaTransfer Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SaTransfer copy = new SaTransfer();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SaTransferId = this.SaTransferId;
					copy.OriginalSaTransferId = this.OriginalSaTransferId;
				copy.DecisionNum = this.DecisionNum;
				copy.DecisionDate = this.DecisionDate;
				copy.DecisionSumm = this.DecisionSumm;
				copy.TransferStartDate = this.TransferStartDate;
				copy.TansferType = this.TansferType;
				copy.IsUniOrg = this.IsUniOrg;
				copy.Comments = this.Comments;
				copy.SaStfMemberId = this.SaStfMemberId;
				copy.AsNodeId = this.AsNodeId;
				copy.SaCodeOrgId = this.SaCodeOrgId;
				copy.GsApprovalHId = this.GsApprovalHId;
				copy.DoseAffectStaffStat = this.DoseAffectStaffStat;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.AsNodeIdOld = this.AsNodeIdOld;
			
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.SaCodeOrgIdSource != null && existingCopies.Contains(this.SaCodeOrgIdSource))
				copy.SaCodeOrgIdSource = existingCopies[this.SaCodeOrgIdSource] as SaCodeOrg;
			else
				copy.SaCodeOrgIdSource = MakeCopyOf(this.SaCodeOrgIdSource, existingCopies) as SaCodeOrg;
			if (this.GsApprovalHIdSource != null && existingCopies.Contains(this.GsApprovalHIdSource))
				copy.GsApprovalHIdSource = existingCopies[this.GsApprovalHIdSource] as GsApprovalH;
			else
				copy.GsApprovalHIdSource = MakeCopyOf(this.GsApprovalHIdSource, existingCopies) as GsApprovalH;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				copy.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				copy.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
		
			//deep copy nested objects
			copy.SaServTerminCollection = (TList<SaServTermin>) MakeCopyOf(this.SaServTerminCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SaTransfer Entity 
		///</summary>
		public virtual SaTransfer Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SaTransfer Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SaTransfer DeepCopy()
		{
			return EntityHelper.Clone<SaTransfer>(this as SaTransfer);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SaTransferEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SaTransferEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SaTransferEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SaTransferColumn column)
		{
			switch(column)
			{
					case SaTransferColumn.SaTransferId:
					return entityData.SaTransferId != _originalData.SaTransferId;
					case SaTransferColumn.DecisionNum:
					return entityData.DecisionNum != _originalData.DecisionNum;
					case SaTransferColumn.DecisionDate:
					return entityData.DecisionDate != _originalData.DecisionDate;
					case SaTransferColumn.DecisionSumm:
					return entityData.DecisionSumm != _originalData.DecisionSumm;
					case SaTransferColumn.TransferStartDate:
					return entityData.TransferStartDate != _originalData.TransferStartDate;
					case SaTransferColumn.TansferType:
					return entityData.TansferType != _originalData.TansferType;
					case SaTransferColumn.IsUniOrg:
					return entityData.IsUniOrg != _originalData.IsUniOrg;
					case SaTransferColumn.Comments:
					return entityData.Comments != _originalData.Comments;
					case SaTransferColumn.SaStfMemberId:
					return entityData.SaStfMemberId != _originalData.SaStfMemberId;
					case SaTransferColumn.AsNodeId:
					return entityData.AsNodeId != _originalData.AsNodeId;
					case SaTransferColumn.SaCodeOrgId:
					return entityData.SaCodeOrgId != _originalData.SaCodeOrgId;
					case SaTransferColumn.GsApprovalHId:
					return entityData.GsApprovalHId != _originalData.GsApprovalHId;
					case SaTransferColumn.DoseAffectStaffStat:
					return entityData.DoseAffectStaffStat != _originalData.DoseAffectStaffStat;
					case SaTransferColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case SaTransferColumn.AsNodeIdOld:
					return entityData.AsNodeIdOld != _originalData.AsNodeIdOld;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SaTransferColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SaTransferId != _originalData.SaTransferId;
			result = result || entityData.DecisionNum != _originalData.DecisionNum;
			result = result || entityData.DecisionDate != _originalData.DecisionDate;
			result = result || entityData.DecisionSumm != _originalData.DecisionSumm;
			result = result || entityData.TransferStartDate != _originalData.TransferStartDate;
			result = result || entityData.TansferType != _originalData.TansferType;
			result = result || entityData.IsUniOrg != _originalData.IsUniOrg;
			result = result || entityData.Comments != _originalData.Comments;
			result = result || entityData.SaStfMemberId != _originalData.SaStfMemberId;
			result = result || entityData.AsNodeId != _originalData.AsNodeId;
			result = result || entityData.SaCodeOrgId != _originalData.SaCodeOrgId;
			result = result || entityData.GsApprovalHId != _originalData.GsApprovalHId;
			result = result || entityData.DoseAffectStaffStat != _originalData.DoseAffectStaffStat;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.AsNodeIdOld != _originalData.AsNodeIdOld;
			return result;
		}	
		
		///<summary>
		///  Returns a SaTransfer Entity with the original data.
		///</summary>
		public SaTransfer GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSaTransfer(
				_originalData.SaTransferId,
				_originalData.DecisionNum,
				_originalData.DecisionDate,
				_originalData.DecisionSumm,
				_originalData.TransferStartDate,
				_originalData.TansferType,
				_originalData.IsUniOrg,
				_originalData.Comments,
				_originalData.SaStfMemberId,
				_originalData.AsNodeId,
				_originalData.SaCodeOrgId,
				_originalData.GsApprovalHId,
				_originalData.DoseAffectStaffStat,
				_originalData.AsFacultyInfoId,
				_originalData.AsNodeIdOld
				);
				
			return (SaTransfer)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SaTransferBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SaTransferBase)
				return ValueEquals(this, (SaTransferBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SaTransferBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SaTransferId.GetHashCode() ^ 
					this.DecisionNum.GetHashCode() ^ 
					this.DecisionDate.GetHashCode() ^ 
					((this.DecisionSumm == null) ? string.Empty : this.DecisionSumm.ToString()).GetHashCode() ^ 
					this.TransferStartDate.GetHashCode() ^ 
					this.TansferType.GetHashCode() ^ 
					this.IsUniOrg.GetHashCode() ^ 
					((this.Comments == null) ? string.Empty : this.Comments.ToString()).GetHashCode() ^ 
					this.SaStfMemberId.GetHashCode() ^ 
					((this.AsNodeId == null) ? string.Empty : this.AsNodeId.ToString()).GetHashCode() ^ 
					((this.SaCodeOrgId == null) ? string.Empty : this.SaCodeOrgId.ToString()).GetHashCode() ^ 
					this.GsApprovalHId.GetHashCode() ^ 
					this.DoseAffectStaffStat.GetHashCode() ^ 
					this.AsFacultyInfoId.GetHashCode() ^ 
					this.AsNodeIdOld.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SaTransferBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SaTransferBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SaTransferBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SaTransferBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SaTransferBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SaTransferBase Object1, SaTransferBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SaTransferId != Object2.SaTransferId)
				equal = false;
			if (Object1.DecisionNum != Object2.DecisionNum)
				equal = false;
			if (Object1.DecisionDate != Object2.DecisionDate)
				equal = false;
			if ( Object1.DecisionSumm != null && Object2.DecisionSumm != null )
			{
				if (Object1.DecisionSumm != Object2.DecisionSumm)
					equal = false;
			}
			else if (Object1.DecisionSumm == null ^ Object2.DecisionSumm == null )
			{
				equal = false;
			}
			if (Object1.TransferStartDate != Object2.TransferStartDate)
				equal = false;
			if (Object1.TansferType != Object2.TansferType)
				equal = false;
			if (Object1.IsUniOrg != Object2.IsUniOrg)
				equal = false;
			if ( Object1.Comments != null && Object2.Comments != null )
			{
				if (Object1.Comments != Object2.Comments)
					equal = false;
			}
			else if (Object1.Comments == null ^ Object2.Comments == null )
			{
				equal = false;
			}
			if (Object1.SaStfMemberId != Object2.SaStfMemberId)
				equal = false;
			if ( Object1.AsNodeId != null && Object2.AsNodeId != null )
			{
				if (Object1.AsNodeId != Object2.AsNodeId)
					equal = false;
			}
			else if (Object1.AsNodeId == null ^ Object2.AsNodeId == null )
			{
				equal = false;
			}
			if ( Object1.SaCodeOrgId != null && Object2.SaCodeOrgId != null )
			{
				if (Object1.SaCodeOrgId != Object2.SaCodeOrgId)
					equal = false;
			}
			else if (Object1.SaCodeOrgId == null ^ Object2.SaCodeOrgId == null )
			{
				equal = false;
			}
			if (Object1.GsApprovalHId != Object2.GsApprovalHId)
				equal = false;
			if (Object1.DoseAffectStaffStat != Object2.DoseAffectStaffStat)
				equal = false;
			if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
				equal = false;
			if (Object1.AsNodeIdOld != Object2.AsNodeIdOld)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SaTransferBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SaTransferComparer GetComparer()
        {
            return new SaTransferComparer();
        }
        */

        // Comparer delegates back to SaTransfer
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SaTransfer rhs, SaTransferColumn which)
        {
            switch (which)
            {
            	
            	
            	case SaTransferColumn.SaTransferId:
            		return this.SaTransferId.CompareTo(rhs.SaTransferId);
            		
            		                 
            	
            	
            	case SaTransferColumn.DecisionNum:
            		return this.DecisionNum.CompareTo(rhs.DecisionNum);
            		
            		                 
            	
            	
            	case SaTransferColumn.DecisionDate:
            		return this.DecisionDate.CompareTo(rhs.DecisionDate);
            		
            		                 
            	
            	
            	case SaTransferColumn.DecisionSumm:
            		return this.DecisionSumm.CompareTo(rhs.DecisionSumm);
            		
            		                 
            	
            	
            	case SaTransferColumn.TransferStartDate:
            		return this.TransferStartDate.CompareTo(rhs.TransferStartDate);
            		
            		                 
            	
            	
            	case SaTransferColumn.TansferType:
            		return this.TansferType.CompareTo(rhs.TansferType);
            		
            		                 
            	
            	
            	case SaTransferColumn.IsUniOrg:
            		return this.IsUniOrg.CompareTo(rhs.IsUniOrg);
            		
            		                 
            	
            	
            	case SaTransferColumn.Comments:
            		return this.Comments.CompareTo(rhs.Comments);
            		
            		                 
            	
            	
            	case SaTransferColumn.SaStfMemberId:
            		return this.SaStfMemberId.CompareTo(rhs.SaStfMemberId);
            		
            		                 
            	
            	
            	case SaTransferColumn.AsNodeId:
            		return this.AsNodeId.Value.CompareTo(rhs.AsNodeId.Value);
            		
            		                 
            	
            	
            	case SaTransferColumn.SaCodeOrgId:
            		return this.SaCodeOrgId.Value.CompareTo(rhs.SaCodeOrgId.Value);
            		
            		                 
            	
            	
            	case SaTransferColumn.GsApprovalHId:
            		return this.GsApprovalHId.CompareTo(rhs.GsApprovalHId);
            		
            		                 
            	
            	
            	case SaTransferColumn.DoseAffectStaffStat:
            		return this.DoseAffectStaffStat.CompareTo(rhs.DoseAffectStaffStat);
            		
            		                 
            	
            	
            	case SaTransferColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.CompareTo(rhs.AsFacultyInfoId);
            		
            		                 
            	
            	
            	case SaTransferColumn.AsNodeIdOld:
            		return this.AsNodeIdOld.CompareTo(rhs.AsNodeIdOld);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SaTransferKey> Members
		
		// member variable for the EntityId property
		private SaTransferKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SaTransferKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SaTransferKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SaTransfer")
					.Append("|").Append( this.SaTransferId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{16}{15}- SaTransferId: {0}{15}- DecisionNum: {1}{15}- DecisionDate: {2}{15}- DecisionSumm: {3}{15}- TransferStartDate: {4}{15}- TansferType: {5}{15}- IsUniOrg: {6}{15}- Comments: {7}{15}- SaStfMemberId: {8}{15}- AsNodeId: {9}{15}- SaCodeOrgId: {10}{15}- GsApprovalHId: {11}{15}- DoseAffectStaffStat: {12}{15}- AsFacultyInfoId: {13}{15}- AsNodeIdOld: {14}{15}{17}", 
				this.SaTransferId,
				this.DecisionNum,
				this.DecisionDate,
				(this.DecisionSumm == null) ? string.Empty : this.DecisionSumm.ToString(),
				this.TransferStartDate,
				this.TansferType,
				this.IsUniOrg,
				(this.Comments == null) ? string.Empty : this.Comments.ToString(),
				this.SaStfMemberId,
				(this.AsNodeId == null) ? string.Empty : this.AsNodeId.ToString(),
				(this.SaCodeOrgId == null) ? string.Empty : this.SaCodeOrgId.ToString(),
				this.GsApprovalHId,
				this.DoseAffectStaffStat,
				this.AsFacultyInfoId,
				this.AsNodeIdOld,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SA_TRANSFER' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SaTransferEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SA_TRANSFER_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SA_TRANSFER"</remarks>
		public System.Decimal SaTransferId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSaTransferId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// DECISION_NUM : 
		/// </summary>
		public System.String		  DecisionNum = string.Empty;
		
		/// <summary>
		/// DECISION_DATE : 
		/// </summary>
		public System.DateTime		  DecisionDate = DateTime.MinValue;
		
		/// <summary>
		/// DECISION_SUMM : 
		/// </summary>
		public System.String		  DecisionSumm = null;
		
		/// <summary>
		/// TRANSFER_START_DATE : 
		/// </summary>
		public System.DateTime		  TransferStartDate = DateTime.MinValue;
		
		/// <summary>
		/// TANSFER_TYPE : 
		/// </summary>
		public System.Decimal		  TansferType = 0.0m;
		
		/// <summary>
		/// IS_UNI_ORG : 
		/// </summary>
		public System.Decimal		  IsUniOrg = 0.0m;
		
		/// <summary>
		/// COMMENTS : 
		/// </summary>
		public System.String		  Comments = null;
		
		/// <summary>
		/// SA_STF_MEMBER_ID : 
		/// </summary>
		public System.Decimal		  SaStfMemberId = 0.0m;
		
		/// <summary>
		/// AS_NODE_ID : 
		/// </summary>
		public System.Decimal?		  AsNodeId = null;
		
		/// <summary>
		/// SA_CODE_ORG_ID : 
		/// </summary>
		public System.Decimal?		  SaCodeOrgId = null;
		
		/// <summary>
		/// GS_APPROVAL_H_ID : 
		/// </summary>
		public System.Decimal		  GsApprovalHId = 0.0m;
		
		/// <summary>
		/// DOSE_AFFECT_STAFF_STAT : 
		/// </summary>
		public System.Decimal		  DoseAffectStaffStat = 0.0m;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal		  AsFacultyInfoId = 0.0m;
		
		/// <summary>
		/// AS_NODE_ID_OLD : 
		/// </summary>
		public System.Decimal		  AsNodeIdOld = 0.0m;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private SaCodeOrg _saCodeOrgIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeOrg"/>.
		/// </summary>
		/// <value>The source SaCodeOrg for SaCodeOrgId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaCodeOrg SaCodeOrgIdSource
      	{
            get { return this._saCodeOrgIdSource; }
            set { this._saCodeOrgIdSource = value; }
      	}
		private GsApprovalH _gsApprovalHidSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsApprovalH"/>.
		/// </summary>
		/// <value>The source GsApprovalH for GsApprovalHId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsApprovalH GsApprovalHIdSource
      	{
            get { return this._gsApprovalHidSource; }
            set { this._gsApprovalHidSource = value; }
      	}
		private SaStfMember _saStfMemberIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return this._saStfMemberIdSource; }
            set { this._saStfMemberIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region SaServTerminCollection
		
		private TList<SaServTermin> _saServTerminSaTransferId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _saServTerminSaTransferId
		/// </summary>
		
		public TList<SaServTermin> SaServTerminCollection
		{
			get
			{
				if (_saServTerminSaTransferId == null)
				{
				_saServTerminSaTransferId = new TList<SaServTermin>();
				}
	
				return _saServTerminSaTransferId;
			}
			set { _saServTerminSaTransferId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SaTransferEntityData _tmp = new SaTransferEntityData();
						
			_tmp.SaTransferId = this.SaTransferId;
			_tmp.OriginalSaTransferId = this.OriginalSaTransferId;
			
			_tmp.DecisionNum = this.DecisionNum;
			_tmp.DecisionDate = this.DecisionDate;
			_tmp.DecisionSumm = this.DecisionSumm;
			_tmp.TransferStartDate = this.TransferStartDate;
			_tmp.TansferType = this.TansferType;
			_tmp.IsUniOrg = this.IsUniOrg;
			_tmp.Comments = this.Comments;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.AsNodeId = this.AsNodeId;
			_tmp.SaCodeOrgId = this.SaCodeOrgId;
			_tmp.GsApprovalHId = this.GsApprovalHId;
			_tmp.DoseAffectStaffStat = this.DoseAffectStaffStat;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.AsNodeIdOld = this.AsNodeIdOld;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.SaCodeOrgIdSource != null)
				_tmp.SaCodeOrgIdSource = MakeCopyOf(this.SaCodeOrgIdSource) as SaCodeOrg;
			if (this.GsApprovalHIdSource != null)
				_tmp.GsApprovalHIdSource = MakeCopyOf(this.GsApprovalHIdSource) as GsApprovalH;
			if (this.SaStfMemberIdSource != null)
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource) as SaStfMember;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._saServTerminSaTransferId != null)
				_tmp.SaServTerminCollection = (TList<SaServTermin>) MakeCopyOf(this.SaServTerminCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SaTransferEntityData _tmp = new SaTransferEntityData();
						
			_tmp.SaTransferId = this.SaTransferId;
			_tmp.OriginalSaTransferId = this.OriginalSaTransferId;
			
			_tmp.DecisionNum = this.DecisionNum;
			_tmp.DecisionDate = this.DecisionDate;
			_tmp.DecisionSumm = this.DecisionSumm;
			_tmp.TransferStartDate = this.TransferStartDate;
			_tmp.TansferType = this.TansferType;
			_tmp.IsUniOrg = this.IsUniOrg;
			_tmp.Comments = this.Comments;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.AsNodeId = this.AsNodeId;
			_tmp.SaCodeOrgId = this.SaCodeOrgId;
			_tmp.GsApprovalHId = this.GsApprovalHId;
			_tmp.DoseAffectStaffStat = this.DoseAffectStaffStat;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.AsNodeIdOld = this.AsNodeIdOld;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.SaCodeOrgIdSource != null && existingCopies.Contains(this.SaCodeOrgIdSource))
				_tmp.SaCodeOrgIdSource = existingCopies[this.SaCodeOrgIdSource] as SaCodeOrg;
			else
				_tmp.SaCodeOrgIdSource = MakeCopyOf(this.SaCodeOrgIdSource, existingCopies) as SaCodeOrg;
			if (this.GsApprovalHIdSource != null && existingCopies.Contains(this.GsApprovalHIdSource))
				_tmp.GsApprovalHIdSource = existingCopies[this.GsApprovalHIdSource] as GsApprovalH;
			else
				_tmp.GsApprovalHIdSource = MakeCopyOf(this.GsApprovalHIdSource, existingCopies) as GsApprovalH;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				_tmp.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.SaServTerminCollection = (TList<SaServTermin>) MakeCopyOf(this.SaServTerminCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaTransferColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SaTransferColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaTransferColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SaTransferColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaTransferColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SaTransferColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SaTransferEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SaTransferEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaTransferColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SaTransferColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SaTransferEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SaTransferEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SaTransferEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SaTransfer"/> object.
	/// </remarks>
	public class SaTransferEventArgs : System.EventArgs
	{
		private SaTransferColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SaTransferEventArgs class.
		///</summary>
		public SaTransferEventArgs(SaTransferColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SaTransferEventArgs class.
		///</summary>
		public SaTransferEventArgs(SaTransferColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SaTransferColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SaTransferColumn" />
		public SaTransferColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SaTransfer related events.
	///</summary>
	public delegate void SaTransferEventHandler(object sender, SaTransferEventArgs e);
	
	#region SaTransferComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SaTransferComparer : System.Collections.Generic.IComparer<SaTransfer>
	{
		SaTransferColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SaTransferComparer"/> class.
        /// </summary>
		public SaTransferComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SaTransferComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SaTransferComparer(SaTransferColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SaTransfer"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SaTransfer"/> to compare.</param>
        /// <param name="b">The second <c>SaTransfer</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SaTransfer a, SaTransfer b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SaTransfer entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SaTransfer a, SaTransfer b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SaTransferColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SaTransferKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SaTransfer"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SaTransferKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SaTransferKey class.
		/// </summary>
		public SaTransferKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SaTransferKey class.
		/// </summary>
		public SaTransferKey(SaTransferBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SaTransferId = entity.SaTransferId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SaTransferKey class.
		/// </summary>
		public SaTransferKey(System.Decimal _saTransferId)
		{
			#region Init Properties

			this.SaTransferId = _saTransferId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SaTransferBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SaTransferBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SaTransferId property
		private System.Decimal _saTransferId;
		
		/// <summary>
		/// Gets or sets the SaTransferId property.
		/// </summary>
		public System.Decimal SaTransferId
		{
			get { return _saTransferId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SaTransferId = value;
				
				_saTransferId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SaTransferId = ( values["SaTransferId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SaTransferId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SaTransferId", SaTransferId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SaTransferId: {0}{1}",
								SaTransferId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SaTransferColumn Enum
	
	/// <summary>
	/// Enumerate the SaTransfer columns.
	/// </summary>
	[Serializable]
	public enum SaTransferColumn : int
	{
		/// <summary>
		/// SaTransferId : 
		/// </summary>
		[EnumTextValue("SA_TRANSFER_ID")]
		[ColumnEnum("SA_TRANSFER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SaTransferId = 1,
		/// <summary>
		/// DecisionNum : 
		/// </summary>
		[EnumTextValue("DECISION_NUM")]
		[ColumnEnum("DECISION_NUM", typeof(System.String), System.Data.DbType.String, false, false, false, 15)]
		DecisionNum = 2,
		/// <summary>
		/// DecisionDate : 
		/// </summary>
		[EnumTextValue("DECISION_DATE")]
		[ColumnEnum("DECISION_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		DecisionDate = 3,
		/// <summary>
		/// DecisionSumm : 
		/// </summary>
		[EnumTextValue("DECISION_SUMM")]
		[ColumnEnum("DECISION_SUMM", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		DecisionSumm = 4,
		/// <summary>
		/// TransferStartDate : 
		/// </summary>
		[EnumTextValue("TRANSFER_START_DATE")]
		[ColumnEnum("TRANSFER_START_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		TransferStartDate = 5,
		/// <summary>
		/// TansferType : 
		/// </summary>
		[EnumTextValue("TANSFER_TYPE")]
		[ColumnEnum("TANSFER_TYPE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		TansferType = 6,
		/// <summary>
		/// IsUniOrg : 
		/// </summary>
		[EnumTextValue("IS_UNI_ORG")]
		[ColumnEnum("IS_UNI_ORG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsUniOrg = 7,
		/// <summary>
		/// Comments : 
		/// </summary>
		[EnumTextValue("COMMENTS")]
		[ColumnEnum("COMMENTS", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Comments = 8,
		/// <summary>
		/// SaStfMemberId : 
		/// </summary>
		[EnumTextValue("SA_STF_MEMBER_ID")]
		[ColumnEnum("SA_STF_MEMBER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaStfMemberId = 9,
		/// <summary>
		/// AsNodeId : 
		/// </summary>
		[EnumTextValue("AS_NODE_ID")]
		[ColumnEnum("AS_NODE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsNodeId = 10,
		/// <summary>
		/// SaCodeOrgId : 
		/// </summary>
		[EnumTextValue("SA_CODE_ORG_ID")]
		[ColumnEnum("SA_CODE_ORG_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SaCodeOrgId = 11,
		/// <summary>
		/// GsApprovalHId : 
		/// </summary>
		[EnumTextValue("GS_APPROVAL_H_ID")]
		[ColumnEnum("GS_APPROVAL_H_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsApprovalHId = 12,
		/// <summary>
		/// DoseAffectStaffStat : 
		/// </summary>
		[EnumTextValue("DOSE_AFFECT_STAFF_STAT")]
		[ColumnEnum("DOSE_AFFECT_STAFF_STAT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		DoseAffectStaffStat = 13,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsFacultyInfoId = 14,
		/// <summary>
		/// AsNodeIdOld : 
		/// </summary>
		[EnumTextValue("AS_NODE_ID_OLD")]
		[ColumnEnum("AS_NODE_ID_OLD", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsNodeIdOld = 15
	}//End enum

	#endregion SaTransferColumn Enum

} // end namespace
