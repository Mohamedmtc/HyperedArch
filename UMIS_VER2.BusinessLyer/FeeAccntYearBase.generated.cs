
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file FeeAccntYear.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'FEE_ACCNT_YEAR' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class FeeAccntYearBase : EntityBase, IFeeAccntYear, IEntityId<FeeAccntYearKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private FeeAccntYearEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private FeeAccntYearEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private FeeAccntYearEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<FeeAccntYear> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeAccntYearEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeAccntYearEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="FeeAccntYearBase"/> instance.
		///</summary>
		public FeeAccntYearBase()
		{
			this.entityData = new FeeAccntYearEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="FeeAccntYearBase"/> instance.
		///</summary>
		///<param name="_feeAccntYearId">السنوات المالية</param>
		///<param name="_edAcadYearId"></param>
		///<param name="_yearFromDt"></param>
		///<param name="_yearToDt"></param>
		///<param name="_yearNote"></param>
		public FeeAccntYearBase(System.Decimal _feeAccntYearId, System.Decimal _edAcadYearId, 
			System.DateTime _yearFromDt, System.DateTime _yearToDt, System.String _yearNote)
		{
			this.entityData = new FeeAccntYearEntityData();
			this.backupData = null;

			this.FeeAccntYearId = _feeAccntYearId;
			this.EdAcadYearId = _edAcadYearId;
			this.YearFromDt = _yearFromDt;
			this.YearToDt = _yearToDt;
			this.YearNote = _yearNote;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="FeeAccntYear"/> instance.
		///</summary>
		///<param name="_feeAccntYearId">السنوات المالية</param>
		///<param name="_edAcadYearId"></param>
		///<param name="_yearFromDt"></param>
		///<param name="_yearToDt"></param>
		///<param name="_yearNote"></param>
		public static FeeAccntYear CreateFeeAccntYear(System.Decimal _feeAccntYearId, System.Decimal _edAcadYearId, 
			System.DateTime _yearFromDt, System.DateTime _yearToDt, System.String _yearNote)
		{
			FeeAccntYear newFeeAccntYear = new FeeAccntYear();
			newFeeAccntYear.FeeAccntYearId = _feeAccntYearId;
			newFeeAccntYear.EdAcadYearId = _edAcadYearId;
			newFeeAccntYear.YearFromDt = _yearFromDt;
			newFeeAccntYear.YearToDt = _yearToDt;
			newFeeAccntYear.YearNote = _yearNote;
			return newFeeAccntYear;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the FeeAccntYearId property. 
		///		السنوات المالية
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"السنوات المالية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal FeeAccntYearId
		{
			get
			{
				return this.entityData.FeeAccntYearId; 
			}
			
			set
			{
				if (this.entityData.FeeAccntYearId == value)
					return;
					
				OnColumnChanging(FeeAccntYearColumn.FeeAccntYearId, this.entityData.FeeAccntYearId);
				this.entityData.FeeAccntYearId = value;
				this.EntityId.FeeAccntYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeAccntYearColumn.FeeAccntYearId, this.entityData.FeeAccntYearId);
				OnPropertyChanged("FeeAccntYearId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the FEE_ACCNT_YEAR_ID property.
		///		السنوات المالية
		/// </summary>
		/// <remarks>This is the original value of the FEE_ACCNT_YEAR_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalFeeAccntYearId
		{
			get { return this.entityData.OriginalFeeAccntYearId; }
			set { this.entityData.OriginalFeeAccntYearId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(FeeAccntYearColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeAccntYearColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the YearFromDt property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime YearFromDt
		{
			get
			{
				return this.entityData.YearFromDt; 
			}
			
			set
			{
				if (this.entityData.YearFromDt == value)
					return;
					
				OnColumnChanging(FeeAccntYearColumn.YearFromDt, this.entityData.YearFromDt);
				this.entityData.YearFromDt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeAccntYearColumn.YearFromDt, this.entityData.YearFromDt);
				OnPropertyChanged("YearFromDt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the YearToDt property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime YearToDt
		{
			get
			{
				return this.entityData.YearToDt; 
			}
			
			set
			{
				if (this.entityData.YearToDt == value)
					return;
					
				OnColumnChanging(FeeAccntYearColumn.YearToDt, this.entityData.YearToDt);
				this.entityData.YearToDt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeAccntYearColumn.YearToDt, this.entityData.YearToDt);
				OnPropertyChanged("YearToDt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the YearNote property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String YearNote
		{
			get
			{
				return this.entityData.YearNote; 
			}
			
			set
			{
				if (this.entityData.YearNote == value)
					return;
					
				OnColumnChanging(FeeAccntYearColumn.YearNote, this.entityData.YearNote);
				this.entityData.YearNote = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeAccntYearColumn.YearNote, this.entityData.YearNote);
				OnPropertyChanged("YearNote");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of FeeAccntYearPeriod objects
		///	which are related to this object through the relation FK_FEE_ACCNT_YEAR_PERIOD_FEE_ACCNT_YEAR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeAccntYearPeriod> FeeAccntYearPeriodCollection
		{
			get { return entityData.FeeAccntYearPeriodCollection; }
			set { entityData.FeeAccntYearPeriodCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("YearNote", "Year Note", 200));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "FEE_ACCNT_YEAR"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"FEE_ACCNT_YEAR_ID", "ED_ACAD_YEAR_ID", "YEAR_FROM_DT", "YEAR_TO_DT", "YEAR_NOTE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as FeeAccntYearEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (FeeAccntYear) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<FeeAccntYear>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as FeeAccntYear);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed FeeAccntYear Entity 
		///</summary>
		protected virtual FeeAccntYear Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			FeeAccntYear copy = new FeeAccntYear();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.FeeAccntYearId = this.FeeAccntYearId;
					copy.OriginalFeeAccntYearId = this.OriginalFeeAccntYearId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.YearFromDt = this.YearFromDt;
				copy.YearToDt = this.YearToDt;
				copy.YearNote = this.YearNote;
			
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
		
			//deep copy nested objects
			copy.FeeAccntYearPeriodCollection = (TList<FeeAccntYearPeriod>) MakeCopyOf(this.FeeAccntYearPeriodCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed FeeAccntYear Entity 
		///</summary>
		public virtual FeeAccntYear Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed FeeAccntYear Entity which is a deep copy of the current entity.
		///</summary>
		public virtual FeeAccntYear DeepCopy()
		{
			return EntityHelper.Clone<FeeAccntYear>(this as FeeAccntYear);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as FeeAccntYearEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new FeeAccntYearEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as FeeAccntYearEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(FeeAccntYearColumn column)
		{
			switch(column)
			{
					case FeeAccntYearColumn.FeeAccntYearId:
					return entityData.FeeAccntYearId != _originalData.FeeAccntYearId;
					case FeeAccntYearColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case FeeAccntYearColumn.YearFromDt:
					return entityData.YearFromDt != _originalData.YearFromDt;
					case FeeAccntYearColumn.YearToDt:
					return entityData.YearToDt != _originalData.YearToDt;
					case FeeAccntYearColumn.YearNote:
					return entityData.YearNote != _originalData.YearNote;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< FeeAccntYearColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.FeeAccntYearId != _originalData.FeeAccntYearId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.YearFromDt != _originalData.YearFromDt;
			result = result || entityData.YearToDt != _originalData.YearToDt;
			result = result || entityData.YearNote != _originalData.YearNote;
			return result;
		}	
		
		///<summary>
		///  Returns a FeeAccntYear Entity with the original data.
		///</summary>
		public FeeAccntYear GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateFeeAccntYear(
				_originalData.FeeAccntYearId,
				_originalData.EdAcadYearId,
				_originalData.YearFromDt,
				_originalData.YearToDt,
				_originalData.YearNote
				);
				
			return (FeeAccntYear)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="FeeAccntYearBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is FeeAccntYearBase)
				return ValueEquals(this, (FeeAccntYearBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="FeeAccntYearBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.FeeAccntYearId.GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					this.YearFromDt.GetHashCode() ^ 
					this.YearToDt.GetHashCode() ^ 
					((this.YearNote == null) ? string.Empty : this.YearNote.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="FeeAccntYearBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(FeeAccntYearBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="FeeAccntYearBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="FeeAccntYearBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="FeeAccntYearBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(FeeAccntYearBase Object1, FeeAccntYearBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.FeeAccntYearId != Object2.FeeAccntYearId)
				equal = false;
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if (Object1.YearFromDt != Object2.YearFromDt)
				equal = false;
			if (Object1.YearToDt != Object2.YearToDt)
				equal = false;
			if ( Object1.YearNote != null && Object2.YearNote != null )
			{
				if (Object1.YearNote != Object2.YearNote)
					equal = false;
			}
			else if (Object1.YearNote == null ^ Object2.YearNote == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((FeeAccntYearBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static FeeAccntYearComparer GetComparer()
        {
            return new FeeAccntYearComparer();
        }
        */

        // Comparer delegates back to FeeAccntYear
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(FeeAccntYear rhs, FeeAccntYearColumn which)
        {
            switch (which)
            {
            	
            	
            	case FeeAccntYearColumn.FeeAccntYearId:
            		return this.FeeAccntYearId.CompareTo(rhs.FeeAccntYearId);
            		
            		                 
            	
            	
            	case FeeAccntYearColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case FeeAccntYearColumn.YearFromDt:
            		return this.YearFromDt.CompareTo(rhs.YearFromDt);
            		
            		                 
            	
            	
            	case FeeAccntYearColumn.YearToDt:
            		return this.YearToDt.CompareTo(rhs.YearToDt);
            		
            		                 
            	
            	
            	case FeeAccntYearColumn.YearNote:
            		return this.YearNote.CompareTo(rhs.YearNote);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<FeeAccntYearKey> Members
		
		// member variable for the EntityId property
		private FeeAccntYearKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual FeeAccntYearKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new FeeAccntYearKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("FeeAccntYear")
					.Append("|").Append( this.FeeAccntYearId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{6}{5}- FeeAccntYearId: {0}{5}- EdAcadYearId: {1}{5}- YearFromDt: {2}{5}- YearToDt: {3}{5}- YearNote: {4}{5}{7}", 
				this.FeeAccntYearId,
				this.EdAcadYearId,
				this.YearFromDt,
				this.YearToDt,
				(this.YearNote == null) ? string.Empty : this.YearNote.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'FEE_ACCNT_YEAR' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class FeeAccntYearEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// FEE_ACCNT_YEAR_ID : السنوات المالية
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "FEE_ACCNT_YEAR"</remarks>
		public System.Decimal FeeAccntYearId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalFeeAccntYearId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// YEAR_FROM_DT : 
		/// </summary>
		public System.DateTime		  YearFromDt = DateTime.MinValue;
		
		/// <summary>
		/// YEAR_TO_DT : 
		/// </summary>
		public System.DateTime		  YearToDt = DateTime.MinValue;
		
		/// <summary>
		/// YEAR_NOTE : 
		/// </summary>
		public System.String		  YearNote = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region FeeAccntYearPeriodCollection
		
		private TList<FeeAccntYearPeriod> _feeAccntYearPeriodFeeAccntYearId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeAccntYearPeriodFeeAccntYearId
		/// </summary>
		
		public TList<FeeAccntYearPeriod> FeeAccntYearPeriodCollection
		{
			get
			{
				if (_feeAccntYearPeriodFeeAccntYearId == null)
				{
				_feeAccntYearPeriodFeeAccntYearId = new TList<FeeAccntYearPeriod>();
				}
	
				return _feeAccntYearPeriodFeeAccntYearId;
			}
			set { _feeAccntYearPeriodFeeAccntYearId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			FeeAccntYearEntityData _tmp = new FeeAccntYearEntityData();
						
			_tmp.FeeAccntYearId = this.FeeAccntYearId;
			_tmp.OriginalFeeAccntYearId = this.OriginalFeeAccntYearId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.YearFromDt = this.YearFromDt;
			_tmp.YearToDt = this.YearToDt;
			_tmp.YearNote = this.YearNote;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._feeAccntYearPeriodFeeAccntYearId != null)
				_tmp.FeeAccntYearPeriodCollection = (TList<FeeAccntYearPeriod>) MakeCopyOf(this.FeeAccntYearPeriodCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			FeeAccntYearEntityData _tmp = new FeeAccntYearEntityData();
						
			_tmp.FeeAccntYearId = this.FeeAccntYearId;
			_tmp.OriginalFeeAccntYearId = this.OriginalFeeAccntYearId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.YearFromDt = this.YearFromDt;
			_tmp.YearToDt = this.YearToDt;
			_tmp.YearNote = this.YearNote;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.FeeAccntYearPeriodCollection = (TList<FeeAccntYearPeriod>) MakeCopyOf(this.FeeAccntYearPeriodCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeAccntYearColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(FeeAccntYearColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeAccntYearColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(FeeAccntYearColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeAccntYearColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(FeeAccntYearColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				FeeAccntYearEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new FeeAccntYearEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeAccntYearColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(FeeAccntYearColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				FeeAccntYearEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new FeeAccntYearEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region FeeAccntYearEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="FeeAccntYear"/> object.
	/// </remarks>
	public class FeeAccntYearEventArgs : System.EventArgs
	{
		private FeeAccntYearColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the FeeAccntYearEventArgs class.
		///</summary>
		public FeeAccntYearEventArgs(FeeAccntYearColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the FeeAccntYearEventArgs class.
		///</summary>
		public FeeAccntYearEventArgs(FeeAccntYearColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The FeeAccntYearColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="FeeAccntYearColumn" />
		public FeeAccntYearColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all FeeAccntYear related events.
	///</summary>
	public delegate void FeeAccntYearEventHandler(object sender, FeeAccntYearEventArgs e);
	
	#region FeeAccntYearComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class FeeAccntYearComparer : System.Collections.Generic.IComparer<FeeAccntYear>
	{
		FeeAccntYearColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:FeeAccntYearComparer"/> class.
        /// </summary>
		public FeeAccntYearComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:FeeAccntYearComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public FeeAccntYearComparer(FeeAccntYearColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="FeeAccntYear"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="FeeAccntYear"/> to compare.</param>
        /// <param name="b">The second <c>FeeAccntYear</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(FeeAccntYear a, FeeAccntYear b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(FeeAccntYear entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(FeeAccntYear a, FeeAccntYear b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public FeeAccntYearColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region FeeAccntYearKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="FeeAccntYear"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class FeeAccntYearKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the FeeAccntYearKey class.
		/// </summary>
		public FeeAccntYearKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeAccntYearKey class.
		/// </summary>
		public FeeAccntYearKey(FeeAccntYearBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.FeeAccntYearId = entity.FeeAccntYearId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeAccntYearKey class.
		/// </summary>
		public FeeAccntYearKey(System.Decimal _feeAccntYearId)
		{
			#region Init Properties

			this.FeeAccntYearId = _feeAccntYearId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private FeeAccntYearBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public FeeAccntYearBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the FeeAccntYearId property
		private System.Decimal _feeAccntYearId;
		
		/// <summary>
		/// Gets or sets the FeeAccntYearId property.
		/// </summary>
		public System.Decimal FeeAccntYearId
		{
			get { return _feeAccntYearId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.FeeAccntYearId = value;
				
				_feeAccntYearId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				FeeAccntYearId = ( values["FeeAccntYearId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["FeeAccntYearId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("FeeAccntYearId", FeeAccntYearId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("FeeAccntYearId: {0}{1}",
								FeeAccntYearId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region FeeAccntYearColumn Enum
	
	/// <summary>
	/// Enumerate the FeeAccntYear columns.
	/// </summary>
	[Serializable]
	public enum FeeAccntYearColumn : int
	{
		/// <summary>
		/// FeeAccntYearId : السنوات المالية
		/// </summary>
		[EnumTextValue("FEE_ACCNT_YEAR_ID")]
		[ColumnEnum("FEE_ACCNT_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		FeeAccntYearId = 1,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 2,
		/// <summary>
		/// YearFromDt : 
		/// </summary>
		[EnumTextValue("YEAR_FROM_DT")]
		[ColumnEnum("YEAR_FROM_DT", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		YearFromDt = 3,
		/// <summary>
		/// YearToDt : 
		/// </summary>
		[EnumTextValue("YEAR_TO_DT")]
		[ColumnEnum("YEAR_TO_DT", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		YearToDt = 4,
		/// <summary>
		/// YearNote : 
		/// </summary>
		[EnumTextValue("YEAR_NOTE")]
		[ColumnEnum("YEAR_NOTE", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		YearNote = 5
	}//End enum

	#endregion FeeAccntYearColumn Enum

} // end namespace
