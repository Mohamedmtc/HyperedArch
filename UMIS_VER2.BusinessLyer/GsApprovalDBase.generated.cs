
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file GsApprovalD.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'GS_APPROVAL_D' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class GsApprovalDBase : EntityBase, IGsApprovalD, IEntityId<GsApprovalDKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private GsApprovalDEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private GsApprovalDEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private GsApprovalDEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<GsApprovalD> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event GsApprovalDEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event GsApprovalDEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="GsApprovalDBase"/> instance.
		///</summary>
		public GsApprovalDBase()
		{
			this.entityData = new GsApprovalDEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="GsApprovalDBase"/> instance.
		///</summary>
		///<param name="_gsApprovalDId"></param>
		///<param name="_gsApprovalHId"></param>
		///<param name="_gsCodeApprovalListDId"></param>
		///<param name="_issueDate"></param>
		///<param name="_issueNumber"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_issueText"></param>
		///<param name="_issueNotes"></param>
		public GsApprovalDBase(System.Decimal _gsApprovalDId, System.Decimal _gsApprovalHId, 
			System.Decimal _gsCodeApprovalListDId, System.DateTime? _issueDate, System.String _issueNumber, 
			System.Decimal _asFacultyInfoId, System.String _issueText, System.String _issueNotes)
		{
			this.entityData = new GsApprovalDEntityData();
			this.backupData = null;

			this.GsApprovalDId = _gsApprovalDId;
			this.GsApprovalHId = _gsApprovalHId;
			this.GsCodeApprovalListDId = _gsCodeApprovalListDId;
			this.IssueDate = _issueDate;
			this.IssueNumber = _issueNumber;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.IssueText = _issueText;
			this.IssueNotes = _issueNotes;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="GsApprovalD"/> instance.
		///</summary>
		///<param name="_gsApprovalDId"></param>
		///<param name="_gsApprovalHId"></param>
		///<param name="_gsCodeApprovalListDId"></param>
		///<param name="_issueDate"></param>
		///<param name="_issueNumber"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_issueText"></param>
		///<param name="_issueNotes"></param>
		public static GsApprovalD CreateGsApprovalD(System.Decimal _gsApprovalDId, System.Decimal _gsApprovalHId, 
			System.Decimal _gsCodeApprovalListDId, System.DateTime? _issueDate, System.String _issueNumber, 
			System.Decimal _asFacultyInfoId, System.String _issueText, System.String _issueNotes)
		{
			GsApprovalD newGsApprovalD = new GsApprovalD();
			newGsApprovalD.GsApprovalDId = _gsApprovalDId;
			newGsApprovalD.GsApprovalHId = _gsApprovalHId;
			newGsApprovalD.GsCodeApprovalListDId = _gsCodeApprovalListDId;
			newGsApprovalD.IssueDate = _issueDate;
			newGsApprovalD.IssueNumber = _issueNumber;
			newGsApprovalD.AsFacultyInfoId = _asFacultyInfoId;
			newGsApprovalD.IssueText = _issueText;
			newGsApprovalD.IssueNotes = _issueNotes;
			return newGsApprovalD;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the GsApprovalDId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal GsApprovalDId
		{
			get
			{
				return this.entityData.GsApprovalDId; 
			}
			
			set
			{
				if (this.entityData.GsApprovalDId == value)
					return;
					
				OnColumnChanging(GsApprovalDColumn.GsApprovalDId, this.entityData.GsApprovalDId);
				this.entityData.GsApprovalDId = value;
				this.EntityId.GsApprovalDId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsApprovalDColumn.GsApprovalDId, this.entityData.GsApprovalDId);
				OnPropertyChanged("GsApprovalDId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the GS_APPROVAL_D_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the GS_APPROVAL_D_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalGsApprovalDId
		{
			get { return this.entityData.OriginalGsApprovalDId; }
			set { this.entityData.OriginalGsApprovalDId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the GsApprovalHId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsApprovalHId
		{
			get
			{
				return this.entityData.GsApprovalHId; 
			}
			
			set
			{
				if (this.entityData.GsApprovalHId == value)
					return;
					
				OnColumnChanging(GsApprovalDColumn.GsApprovalHId, this.entityData.GsApprovalHId);
				this.entityData.GsApprovalHId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsApprovalDColumn.GsApprovalHId, this.entityData.GsApprovalHId);
				OnPropertyChanged("GsApprovalHId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeApprovalListDId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsCodeApprovalListDId
		{
			get
			{
				return this.entityData.GsCodeApprovalListDId; 
			}
			
			set
			{
				if (this.entityData.GsCodeApprovalListDId == value)
					return;
					
				OnColumnChanging(GsApprovalDColumn.GsCodeApprovalListDId, this.entityData.GsCodeApprovalListDId);
				this.entityData.GsCodeApprovalListDId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsApprovalDColumn.GsCodeApprovalListDId, this.entityData.GsCodeApprovalListDId);
				OnPropertyChanged("GsCodeApprovalListDId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IssueDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsIssueDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? IssueDate
		{
			get
			{
				return this.entityData.IssueDate; 
			}
			
			set
			{
				if (this.entityData.IssueDate == value)
					return;
					
				OnColumnChanging(GsApprovalDColumn.IssueDate, this.entityData.IssueDate);
				this.entityData.IssueDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsApprovalDColumn.IssueDate, this.entityData.IssueDate);
				OnPropertyChanged("IssueDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IssueNumber property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String IssueNumber
		{
			get
			{
				return this.entityData.IssueNumber; 
			}
			
			set
			{
				if (this.entityData.IssueNumber == value)
					return;
					
				OnColumnChanging(GsApprovalDColumn.IssueNumber, this.entityData.IssueNumber);
				this.entityData.IssueNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsApprovalDColumn.IssueNumber, this.entityData.IssueNumber);
				OnPropertyChanged("IssueNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(GsApprovalDColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsApprovalDColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IssueText property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 400)]
		public virtual System.String IssueText
		{
			get
			{
				return this.entityData.IssueText; 
			}
			
			set
			{
				if (this.entityData.IssueText == value)
					return;
					
				OnColumnChanging(GsApprovalDColumn.IssueText, this.entityData.IssueText);
				this.entityData.IssueText = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsApprovalDColumn.IssueText, this.entityData.IssueText);
				OnPropertyChanged("IssueText");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IssueNotes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 400)]
		public virtual System.String IssueNotes
		{
			get
			{
				return this.entityData.IssueNotes; 
			}
			
			set
			{
				if (this.entityData.IssueNotes == value)
					return;
					
				OnColumnChanging(GsApprovalDColumn.IssueNotes, this.entityData.IssueNotes);
				this.entityData.IssueNotes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsApprovalDColumn.IssueNotes, this.entityData.IssueNotes);
				OnPropertyChanged("IssueNotes");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeApprovalListD"/>.
		/// </summary>
		/// <value>The source GsCodeApprovalListD for GsCodeApprovalListDId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeApprovalListD GsCodeApprovalListDIdSource
      	{
            get { return entityData.GsCodeApprovalListDIdSource; }
            set { entityData.GsCodeApprovalListDIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsApprovalH"/>.
		/// </summary>
		/// <value>The source GsApprovalH for GsApprovalHId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsApprovalH GsApprovalHIdSource
      	{
            get { return entityData.GsApprovalHIdSource; }
            set { entityData.GsApprovalHIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("IssueNumber", "Issue Number", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("IssueText", "Issue Text", 400));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("IssueNotes", "Issue Notes", 400));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "GS_APPROVAL_D"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"GS_APPROVAL_D_ID", "GS_APPROVAL_H_ID", "GS_CODE_APPROVAL_LIST_D_ID", "ISSUE_DATE", "ISSUE_NUMBER", "AS_FACULTY_INFO_ID", "ISSUE_TEXT", "ISSUE_NOTES"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as GsApprovalDEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (GsApprovalD) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<GsApprovalD>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as GsApprovalD);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed GsApprovalD Entity 
		///</summary>
		protected virtual GsApprovalD Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			GsApprovalD copy = new GsApprovalD();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.GsApprovalDId = this.GsApprovalDId;
					copy.OriginalGsApprovalDId = this.OriginalGsApprovalDId;
				copy.GsApprovalHId = this.GsApprovalHId;
				copy.GsCodeApprovalListDId = this.GsCodeApprovalListDId;
				copy.IssueDate = this.IssueDate;
				copy.IssueNumber = this.IssueNumber;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.IssueText = this.IssueText;
				copy.IssueNotes = this.IssueNotes;
			
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.GsCodeApprovalListDIdSource != null && existingCopies.Contains(this.GsCodeApprovalListDIdSource))
				copy.GsCodeApprovalListDIdSource = existingCopies[this.GsCodeApprovalListDIdSource] as GsCodeApprovalListD;
			else
				copy.GsCodeApprovalListDIdSource = MakeCopyOf(this.GsCodeApprovalListDIdSource, existingCopies) as GsCodeApprovalListD;
			if (this.GsApprovalHIdSource != null && existingCopies.Contains(this.GsApprovalHIdSource))
				copy.GsApprovalHIdSource = existingCopies[this.GsApprovalHIdSource] as GsApprovalH;
			else
				copy.GsApprovalHIdSource = MakeCopyOf(this.GsApprovalHIdSource, existingCopies) as GsApprovalH;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed GsApprovalD Entity 
		///</summary>
		public virtual GsApprovalD Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed GsApprovalD Entity which is a deep copy of the current entity.
		///</summary>
		public virtual GsApprovalD DeepCopy()
		{
			return EntityHelper.Clone<GsApprovalD>(this as GsApprovalD);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as GsApprovalDEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new GsApprovalDEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as GsApprovalDEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(GsApprovalDColumn column)
		{
			switch(column)
			{
					case GsApprovalDColumn.GsApprovalDId:
					return entityData.GsApprovalDId != _originalData.GsApprovalDId;
					case GsApprovalDColumn.GsApprovalHId:
					return entityData.GsApprovalHId != _originalData.GsApprovalHId;
					case GsApprovalDColumn.GsCodeApprovalListDId:
					return entityData.GsCodeApprovalListDId != _originalData.GsCodeApprovalListDId;
					case GsApprovalDColumn.IssueDate:
					return entityData.IssueDate != _originalData.IssueDate;
					case GsApprovalDColumn.IssueNumber:
					return entityData.IssueNumber != _originalData.IssueNumber;
					case GsApprovalDColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case GsApprovalDColumn.IssueText:
					return entityData.IssueText != _originalData.IssueText;
					case GsApprovalDColumn.IssueNotes:
					return entityData.IssueNotes != _originalData.IssueNotes;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< GsApprovalDColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.GsApprovalDId != _originalData.GsApprovalDId;
			result = result || entityData.GsApprovalHId != _originalData.GsApprovalHId;
			result = result || entityData.GsCodeApprovalListDId != _originalData.GsCodeApprovalListDId;
			result = result || entityData.IssueDate != _originalData.IssueDate;
			result = result || entityData.IssueNumber != _originalData.IssueNumber;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.IssueText != _originalData.IssueText;
			result = result || entityData.IssueNotes != _originalData.IssueNotes;
			return result;
		}	
		
		///<summary>
		///  Returns a GsApprovalD Entity with the original data.
		///</summary>
		public GsApprovalD GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateGsApprovalD(
				_originalData.GsApprovalDId,
				_originalData.GsApprovalHId,
				_originalData.GsCodeApprovalListDId,
				_originalData.IssueDate,
				_originalData.IssueNumber,
				_originalData.AsFacultyInfoId,
				_originalData.IssueText,
				_originalData.IssueNotes
				);
				
			return (GsApprovalD)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="GsApprovalDBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is GsApprovalDBase)
				return ValueEquals(this, (GsApprovalDBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="GsApprovalDBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.GsApprovalDId.GetHashCode() ^ 
					this.GsApprovalHId.GetHashCode() ^ 
					this.GsCodeApprovalListDId.GetHashCode() ^ 
					((this.IssueDate == null) ? string.Empty : this.IssueDate.ToString()).GetHashCode() ^ 
					((this.IssueNumber == null) ? string.Empty : this.IssueNumber.ToString()).GetHashCode() ^ 
					this.AsFacultyInfoId.GetHashCode() ^ 
					((this.IssueText == null) ? string.Empty : this.IssueText.ToString()).GetHashCode() ^ 
					((this.IssueNotes == null) ? string.Empty : this.IssueNotes.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="GsApprovalDBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(GsApprovalDBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="GsApprovalDBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="GsApprovalDBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="GsApprovalDBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(GsApprovalDBase Object1, GsApprovalDBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.GsApprovalDId != Object2.GsApprovalDId)
				equal = false;
			if (Object1.GsApprovalHId != Object2.GsApprovalHId)
				equal = false;
			if (Object1.GsCodeApprovalListDId != Object2.GsCodeApprovalListDId)
				equal = false;
			if ( Object1.IssueDate != null && Object2.IssueDate != null )
			{
				if (Object1.IssueDate != Object2.IssueDate)
					equal = false;
			}
			else if (Object1.IssueDate == null ^ Object2.IssueDate == null )
			{
				equal = false;
			}
			if ( Object1.IssueNumber != null && Object2.IssueNumber != null )
			{
				if (Object1.IssueNumber != Object2.IssueNumber)
					equal = false;
			}
			else if (Object1.IssueNumber == null ^ Object2.IssueNumber == null )
			{
				equal = false;
			}
			if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
				equal = false;
			if ( Object1.IssueText != null && Object2.IssueText != null )
			{
				if (Object1.IssueText != Object2.IssueText)
					equal = false;
			}
			else if (Object1.IssueText == null ^ Object2.IssueText == null )
			{
				equal = false;
			}
			if ( Object1.IssueNotes != null && Object2.IssueNotes != null )
			{
				if (Object1.IssueNotes != Object2.IssueNotes)
					equal = false;
			}
			else if (Object1.IssueNotes == null ^ Object2.IssueNotes == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((GsApprovalDBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static GsApprovalDComparer GetComparer()
        {
            return new GsApprovalDComparer();
        }
        */

        // Comparer delegates back to GsApprovalD
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(GsApprovalD rhs, GsApprovalDColumn which)
        {
            switch (which)
            {
            	
            	
            	case GsApprovalDColumn.GsApprovalDId:
            		return this.GsApprovalDId.CompareTo(rhs.GsApprovalDId);
            		
            		                 
            	
            	
            	case GsApprovalDColumn.GsApprovalHId:
            		return this.GsApprovalHId.CompareTo(rhs.GsApprovalHId);
            		
            		                 
            	
            	
            	case GsApprovalDColumn.GsCodeApprovalListDId:
            		return this.GsCodeApprovalListDId.CompareTo(rhs.GsCodeApprovalListDId);
            		
            		                 
            	
            	
            	case GsApprovalDColumn.IssueDate:
            		return this.IssueDate.Value.CompareTo(rhs.IssueDate.Value);
            		
            		                 
            	
            	
            	case GsApprovalDColumn.IssueNumber:
            		return this.IssueNumber.CompareTo(rhs.IssueNumber);
            		
            		                 
            	
            	
            	case GsApprovalDColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.CompareTo(rhs.AsFacultyInfoId);
            		
            		                 
            	
            	
            	case GsApprovalDColumn.IssueText:
            		return this.IssueText.CompareTo(rhs.IssueText);
            		
            		                 
            	
            	
            	case GsApprovalDColumn.IssueNotes:
            		return this.IssueNotes.CompareTo(rhs.IssueNotes);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<GsApprovalDKey> Members
		
		// member variable for the EntityId property
		private GsApprovalDKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual GsApprovalDKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new GsApprovalDKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("GsApprovalD")
					.Append("|").Append( this.GsApprovalDId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{9}{8}- GsApprovalDId: {0}{8}- GsApprovalHId: {1}{8}- GsCodeApprovalListDId: {2}{8}- IssueDate: {3}{8}- IssueNumber: {4}{8}- AsFacultyInfoId: {5}{8}- IssueText: {6}{8}- IssueNotes: {7}{8}{10}", 
				this.GsApprovalDId,
				this.GsApprovalHId,
				this.GsCodeApprovalListDId,
				(this.IssueDate == null) ? string.Empty : this.IssueDate.ToString(),
				(this.IssueNumber == null) ? string.Empty : this.IssueNumber.ToString(),
				this.AsFacultyInfoId,
				(this.IssueText == null) ? string.Empty : this.IssueText.ToString(),
				(this.IssueNotes == null) ? string.Empty : this.IssueNotes.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'GS_APPROVAL_D' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class GsApprovalDEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// GS_APPROVAL_D_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "GS_APPROVAL_D"</remarks>
		public System.Decimal GsApprovalDId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalGsApprovalDId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// GS_APPROVAL_H_ID : 
		/// </summary>
		public System.Decimal		  GsApprovalHId = 0.0m;
		
		/// <summary>
		/// GS_CODE_APPROVAL_LIST_D_ID : 
		/// </summary>
		public System.Decimal		  GsCodeApprovalListDId = 0.0m;
		
		/// <summary>
		/// ISSUE_DATE : 
		/// </summary>
		public System.DateTime?		  IssueDate = null;
		
		/// <summary>
		/// ISSUE_NUMBER : 
		/// </summary>
		public System.String		  IssueNumber = null;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal		  AsFacultyInfoId = 0.0m;
		
		/// <summary>
		/// ISSUE_TEXT : 
		/// </summary>
		public System.String		  IssueText = null;
		
		/// <summary>
		/// ISSUE_NOTES : 
		/// </summary>
		public System.String		  IssueNotes = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private GsCodeApprovalListD _gsCodeApprovalListDidSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeApprovalListD"/>.
		/// </summary>
		/// <value>The source GsCodeApprovalListD for GsCodeApprovalListDId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeApprovalListD GsCodeApprovalListDIdSource
      	{
            get { return this._gsCodeApprovalListDidSource; }
            set { this._gsCodeApprovalListDidSource = value; }
      	}
		private GsApprovalH _gsApprovalHidSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsApprovalH"/>.
		/// </summary>
		/// <value>The source GsApprovalH for GsApprovalHId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsApprovalH GsApprovalHIdSource
      	{
            get { return this._gsApprovalHidSource; }
            set { this._gsApprovalHidSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			GsApprovalDEntityData _tmp = new GsApprovalDEntityData();
						
			_tmp.GsApprovalDId = this.GsApprovalDId;
			_tmp.OriginalGsApprovalDId = this.OriginalGsApprovalDId;
			
			_tmp.GsApprovalHId = this.GsApprovalHId;
			_tmp.GsCodeApprovalListDId = this.GsCodeApprovalListDId;
			_tmp.IssueDate = this.IssueDate;
			_tmp.IssueNumber = this.IssueNumber;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.IssueText = this.IssueText;
			_tmp.IssueNotes = this.IssueNotes;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.GsCodeApprovalListDIdSource != null)
				_tmp.GsCodeApprovalListDIdSource = MakeCopyOf(this.GsCodeApprovalListDIdSource) as GsCodeApprovalListD;
			if (this.GsApprovalHIdSource != null)
				_tmp.GsApprovalHIdSource = MakeCopyOf(this.GsApprovalHIdSource) as GsApprovalH;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			GsApprovalDEntityData _tmp = new GsApprovalDEntityData();
						
			_tmp.GsApprovalDId = this.GsApprovalDId;
			_tmp.OriginalGsApprovalDId = this.OriginalGsApprovalDId;
			
			_tmp.GsApprovalHId = this.GsApprovalHId;
			_tmp.GsCodeApprovalListDId = this.GsCodeApprovalListDId;
			_tmp.IssueDate = this.IssueDate;
			_tmp.IssueNumber = this.IssueNumber;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.IssueText = this.IssueText;
			_tmp.IssueNotes = this.IssueNotes;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.GsCodeApprovalListDIdSource != null && existingCopies.Contains(this.GsCodeApprovalListDIdSource))
				_tmp.GsCodeApprovalListDIdSource = existingCopies[this.GsCodeApprovalListDIdSource] as GsCodeApprovalListD;
			else
				_tmp.GsCodeApprovalListDIdSource = MakeCopyOf(this.GsCodeApprovalListDIdSource, existingCopies) as GsCodeApprovalListD;
			if (this.GsApprovalHIdSource != null && existingCopies.Contains(this.GsApprovalHIdSource))
				_tmp.GsApprovalHIdSource = existingCopies[this.GsApprovalHIdSource] as GsApprovalH;
			else
				_tmp.GsApprovalHIdSource = MakeCopyOf(this.GsApprovalHIdSource, existingCopies) as GsApprovalH;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsApprovalDColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(GsApprovalDColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsApprovalDColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(GsApprovalDColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsApprovalDColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(GsApprovalDColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				GsApprovalDEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new GsApprovalDEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsApprovalDColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(GsApprovalDColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				GsApprovalDEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new GsApprovalDEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region GsApprovalDEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="GsApprovalD"/> object.
	/// </remarks>
	public class GsApprovalDEventArgs : System.EventArgs
	{
		private GsApprovalDColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the GsApprovalDEventArgs class.
		///</summary>
		public GsApprovalDEventArgs(GsApprovalDColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the GsApprovalDEventArgs class.
		///</summary>
		public GsApprovalDEventArgs(GsApprovalDColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The GsApprovalDColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="GsApprovalDColumn" />
		public GsApprovalDColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all GsApprovalD related events.
	///</summary>
	public delegate void GsApprovalDEventHandler(object sender, GsApprovalDEventArgs e);
	
	#region GsApprovalDComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class GsApprovalDComparer : System.Collections.Generic.IComparer<GsApprovalD>
	{
		GsApprovalDColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:GsApprovalDComparer"/> class.
        /// </summary>
		public GsApprovalDComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:GsApprovalDComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public GsApprovalDComparer(GsApprovalDColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="GsApprovalD"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="GsApprovalD"/> to compare.</param>
        /// <param name="b">The second <c>GsApprovalD</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(GsApprovalD a, GsApprovalD b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(GsApprovalD entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(GsApprovalD a, GsApprovalD b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public GsApprovalDColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region GsApprovalDKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="GsApprovalD"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class GsApprovalDKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the GsApprovalDKey class.
		/// </summary>
		public GsApprovalDKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the GsApprovalDKey class.
		/// </summary>
		public GsApprovalDKey(GsApprovalDBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.GsApprovalDId = entity.GsApprovalDId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the GsApprovalDKey class.
		/// </summary>
		public GsApprovalDKey(System.Decimal _gsApprovalDId)
		{
			#region Init Properties

			this.GsApprovalDId = _gsApprovalDId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private GsApprovalDBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public GsApprovalDBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the GsApprovalDId property
		private System.Decimal _gsApprovalDId;
		
		/// <summary>
		/// Gets or sets the GsApprovalDId property.
		/// </summary>
		public System.Decimal GsApprovalDId
		{
			get { return _gsApprovalDId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.GsApprovalDId = value;
				
				_gsApprovalDId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				GsApprovalDId = ( values["GsApprovalDId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["GsApprovalDId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("GsApprovalDId", GsApprovalDId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("GsApprovalDId: {0}{1}",
								GsApprovalDId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region GsApprovalDColumn Enum
	
	/// <summary>
	/// Enumerate the GsApprovalD columns.
	/// </summary>
	[Serializable]
	public enum GsApprovalDColumn : int
	{
		/// <summary>
		/// GsApprovalDId : 
		/// </summary>
		[EnumTextValue("GS_APPROVAL_D_ID")]
		[ColumnEnum("GS_APPROVAL_D_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		GsApprovalDId = 1,
		/// <summary>
		/// GsApprovalHId : 
		/// </summary>
		[EnumTextValue("GS_APPROVAL_H_ID")]
		[ColumnEnum("GS_APPROVAL_H_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsApprovalHId = 2,
		/// <summary>
		/// GsCodeApprovalListDId : 
		/// </summary>
		[EnumTextValue("GS_CODE_APPROVAL_LIST_D_ID")]
		[ColumnEnum("GS_CODE_APPROVAL_LIST_D_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsCodeApprovalListDId = 3,
		/// <summary>
		/// IssueDate : 
		/// </summary>
		[EnumTextValue("ISSUE_DATE")]
		[ColumnEnum("ISSUE_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		IssueDate = 4,
		/// <summary>
		/// IssueNumber : 
		/// </summary>
		[EnumTextValue("ISSUE_NUMBER")]
		[ColumnEnum("ISSUE_NUMBER", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		IssueNumber = 5,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsFacultyInfoId = 6,
		/// <summary>
		/// IssueText : 
		/// </summary>
		[EnumTextValue("ISSUE_TEXT")]
		[ColumnEnum("ISSUE_TEXT", typeof(System.String), System.Data.DbType.String, false, false, true, 400)]
		IssueText = 7,
		/// <summary>
		/// IssueNotes : 
		/// </summary>
		[EnumTextValue("ISSUE_NOTES")]
		[ColumnEnum("ISSUE_NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 400)]
		IssueNotes = 8
	}//End enum

	#endregion GsApprovalDColumn Enum

} // end namespace
