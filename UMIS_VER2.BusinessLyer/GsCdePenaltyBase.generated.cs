
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file GsCdePenalty.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'GS_CDE_PENALTY' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class GsCdePenaltyBase : EntityBase, IGsCdePenalty, IEntityId<GsCdePenaltyKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private GsCdePenaltyEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private GsCdePenaltyEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private GsCdePenaltyEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<GsCdePenalty> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event GsCdePenaltyEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event GsCdePenaltyEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="GsCdePenaltyBase"/> instance.
		///</summary>
		public GsCdePenaltyBase()
		{
			this.entityData = new GsCdePenaltyEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="GsCdePenaltyBase"/> instance.
		///</summary>
		///<param name="_gsCdePenaltyId"></param>
		///<param name="_descrAr"></param>
		///<param name="_descrEn"></param>
		///<param name="_appealPeriodDys"></param>
		///<param name="_dropPeriodMnth"></param>
		///<param name="_cheatingFlg"></param>
		///<param name="_facDeanPrivFlg">XX</param>
		///<param name="_facPunishCommPrivFlg">XX</param>
		///<param name="_facStaffPrivFlg">XX</param>
		///<param name="_facStudDeanPrivFlg">XX</param>
		///<param name="_penaltyRelatedFlg">1مرتبط بمقررات  2 ايقاف مؤقت  3 مرتبط بغرامة مالية  4 مرتبط بالانذارات  5 فصل نهائى</param>
		///<param name="_pnltyPeriodFlg">XXXمرتبط بفترةXXX</param>
		public GsCdePenaltyBase(System.Decimal _gsCdePenaltyId, System.String _descrAr, 
			System.String _descrEn, System.Decimal? _appealPeriodDys, System.Decimal? _dropPeriodMnth, 
			System.Decimal? _cheatingFlg, System.Decimal? _facDeanPrivFlg, System.Decimal? _facPunishCommPrivFlg, 
			System.Decimal? _facStaffPrivFlg, System.Decimal? _facStudDeanPrivFlg, System.Decimal? _penaltyRelatedFlg, 
			System.Boolean? _pnltyPeriodFlg)
		{
			this.entityData = new GsCdePenaltyEntityData();
			this.backupData = null;

			this.GsCdePenaltyId = _gsCdePenaltyId;
			this.DescrAr = _descrAr;
			this.DescrEn = _descrEn;
			this.AppealPeriodDys = _appealPeriodDys;
			this.DropPeriodMnth = _dropPeriodMnth;
			this.CheatingFlg = _cheatingFlg;
			this.FacDeanPrivFlg = _facDeanPrivFlg;
			this.FacPunishCommPrivFlg = _facPunishCommPrivFlg;
			this.FacStaffPrivFlg = _facStaffPrivFlg;
			this.FacStudDeanPrivFlg = _facStudDeanPrivFlg;
			this.PenaltyRelatedFlg = _penaltyRelatedFlg;
			this.PnltyPeriodFlg = _pnltyPeriodFlg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="GsCdePenalty"/> instance.
		///</summary>
		///<param name="_gsCdePenaltyId"></param>
		///<param name="_descrAr"></param>
		///<param name="_descrEn"></param>
		///<param name="_appealPeriodDys"></param>
		///<param name="_dropPeriodMnth"></param>
		///<param name="_cheatingFlg"></param>
		///<param name="_facDeanPrivFlg">XX</param>
		///<param name="_facPunishCommPrivFlg">XX</param>
		///<param name="_facStaffPrivFlg">XX</param>
		///<param name="_facStudDeanPrivFlg">XX</param>
		///<param name="_penaltyRelatedFlg">1مرتبط بمقررات  2 ايقاف مؤقت  3 مرتبط بغرامة مالية  4 مرتبط بالانذارات  5 فصل نهائى</param>
		///<param name="_pnltyPeriodFlg">XXXمرتبط بفترةXXX</param>
		public static GsCdePenalty CreateGsCdePenalty(System.Decimal _gsCdePenaltyId, System.String _descrAr, 
			System.String _descrEn, System.Decimal? _appealPeriodDys, System.Decimal? _dropPeriodMnth, 
			System.Decimal? _cheatingFlg, System.Decimal? _facDeanPrivFlg, System.Decimal? _facPunishCommPrivFlg, 
			System.Decimal? _facStaffPrivFlg, System.Decimal? _facStudDeanPrivFlg, System.Decimal? _penaltyRelatedFlg, 
			System.Boolean? _pnltyPeriodFlg)
		{
			GsCdePenalty newGsCdePenalty = new GsCdePenalty();
			newGsCdePenalty.GsCdePenaltyId = _gsCdePenaltyId;
			newGsCdePenalty.DescrAr = _descrAr;
			newGsCdePenalty.DescrEn = _descrEn;
			newGsCdePenalty.AppealPeriodDys = _appealPeriodDys;
			newGsCdePenalty.DropPeriodMnth = _dropPeriodMnth;
			newGsCdePenalty.CheatingFlg = _cheatingFlg;
			newGsCdePenalty.FacDeanPrivFlg = _facDeanPrivFlg;
			newGsCdePenalty.FacPunishCommPrivFlg = _facPunishCommPrivFlg;
			newGsCdePenalty.FacStaffPrivFlg = _facStaffPrivFlg;
			newGsCdePenalty.FacStudDeanPrivFlg = _facStudDeanPrivFlg;
			newGsCdePenalty.PenaltyRelatedFlg = _penaltyRelatedFlg;
			newGsCdePenalty.PnltyPeriodFlg = _pnltyPeriodFlg;
			return newGsCdePenalty;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the GsCdePenaltyId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal GsCdePenaltyId
		{
			get
			{
				return this.entityData.GsCdePenaltyId; 
			}
			
			set
			{
				if (this.entityData.GsCdePenaltyId == value)
					return;
					
				OnColumnChanging(GsCdePenaltyColumn.GsCdePenaltyId, this.entityData.GsCdePenaltyId);
				this.entityData.GsCdePenaltyId = value;
				this.EntityId.GsCdePenaltyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCdePenaltyColumn.GsCdePenaltyId, this.entityData.GsCdePenaltyId);
				OnPropertyChanged("GsCdePenaltyId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the GS_CDE_PENALTY_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the GS_CDE_PENALTY_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalGsCdePenaltyId
		{
			get { return this.entityData.OriginalGsCdePenaltyId; }
			set { this.entityData.OriginalGsCdePenaltyId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the DescrAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String DescrAr
		{
			get
			{
				return this.entityData.DescrAr; 
			}
			
			set
			{
				if (this.entityData.DescrAr == value)
					return;
					
				OnColumnChanging(GsCdePenaltyColumn.DescrAr, this.entityData.DescrAr);
				this.entityData.DescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCdePenaltyColumn.DescrAr, this.entityData.DescrAr);
				OnPropertyChanged("DescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String DescrEn
		{
			get
			{
				return this.entityData.DescrEn; 
			}
			
			set
			{
				if (this.entityData.DescrEn == value)
					return;
					
				OnColumnChanging(GsCdePenaltyColumn.DescrEn, this.entityData.DescrEn);
				this.entityData.DescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCdePenaltyColumn.DescrEn, this.entityData.DescrEn);
				OnPropertyChanged("DescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AppealPeriodDys property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAppealPeriodDysNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AppealPeriodDys
		{
			get
			{
				return this.entityData.AppealPeriodDys; 
			}
			
			set
			{
				if (this.entityData.AppealPeriodDys == value)
					return;
					
				OnColumnChanging(GsCdePenaltyColumn.AppealPeriodDys, this.entityData.AppealPeriodDys);
				this.entityData.AppealPeriodDys = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCdePenaltyColumn.AppealPeriodDys, this.entityData.AppealPeriodDys);
				OnPropertyChanged("AppealPeriodDys");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DropPeriodMnth property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDropPeriodMnthNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DropPeriodMnth
		{
			get
			{
				return this.entityData.DropPeriodMnth; 
			}
			
			set
			{
				if (this.entityData.DropPeriodMnth == value)
					return;
					
				OnColumnChanging(GsCdePenaltyColumn.DropPeriodMnth, this.entityData.DropPeriodMnth);
				this.entityData.DropPeriodMnth = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCdePenaltyColumn.DropPeriodMnth, this.entityData.DropPeriodMnth);
				OnPropertyChanged("DropPeriodMnth");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CheatingFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCheatingFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CheatingFlg
		{
			get
			{
				return this.entityData.CheatingFlg; 
			}
			
			set
			{
				if (this.entityData.CheatingFlg == value)
					return;
					
				OnColumnChanging(GsCdePenaltyColumn.CheatingFlg, this.entityData.CheatingFlg);
				this.entityData.CheatingFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCdePenaltyColumn.CheatingFlg, this.entityData.CheatingFlg);
				OnPropertyChanged("CheatingFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FacDeanPrivFlg property. 
		///		XX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFacDeanPrivFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FacDeanPrivFlg
		{
			get
			{
				return this.entityData.FacDeanPrivFlg; 
			}
			
			set
			{
				if (this.entityData.FacDeanPrivFlg == value)
					return;
					
				OnColumnChanging(GsCdePenaltyColumn.FacDeanPrivFlg, this.entityData.FacDeanPrivFlg);
				this.entityData.FacDeanPrivFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCdePenaltyColumn.FacDeanPrivFlg, this.entityData.FacDeanPrivFlg);
				OnPropertyChanged("FacDeanPrivFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FacPunishCommPrivFlg property. 
		///		XX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFacPunishCommPrivFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FacPunishCommPrivFlg
		{
			get
			{
				return this.entityData.FacPunishCommPrivFlg; 
			}
			
			set
			{
				if (this.entityData.FacPunishCommPrivFlg == value)
					return;
					
				OnColumnChanging(GsCdePenaltyColumn.FacPunishCommPrivFlg, this.entityData.FacPunishCommPrivFlg);
				this.entityData.FacPunishCommPrivFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCdePenaltyColumn.FacPunishCommPrivFlg, this.entityData.FacPunishCommPrivFlg);
				OnPropertyChanged("FacPunishCommPrivFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FacStaffPrivFlg property. 
		///		XX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFacStaffPrivFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FacStaffPrivFlg
		{
			get
			{
				return this.entityData.FacStaffPrivFlg; 
			}
			
			set
			{
				if (this.entityData.FacStaffPrivFlg == value)
					return;
					
				OnColumnChanging(GsCdePenaltyColumn.FacStaffPrivFlg, this.entityData.FacStaffPrivFlg);
				this.entityData.FacStaffPrivFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCdePenaltyColumn.FacStaffPrivFlg, this.entityData.FacStaffPrivFlg);
				OnPropertyChanged("FacStaffPrivFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FacStudDeanPrivFlg property. 
		///		XX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFacStudDeanPrivFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FacStudDeanPrivFlg
		{
			get
			{
				return this.entityData.FacStudDeanPrivFlg; 
			}
			
			set
			{
				if (this.entityData.FacStudDeanPrivFlg == value)
					return;
					
				OnColumnChanging(GsCdePenaltyColumn.FacStudDeanPrivFlg, this.entityData.FacStudDeanPrivFlg);
				this.entityData.FacStudDeanPrivFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCdePenaltyColumn.FacStudDeanPrivFlg, this.entityData.FacStudDeanPrivFlg);
				OnPropertyChanged("FacStudDeanPrivFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PenaltyRelatedFlg property. 
		///		1مرتبط بمقررات  2 ايقاف مؤقت  3 مرتبط بغرامة مالية  4 مرتبط بالانذارات  5 فصل نهائى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPenaltyRelatedFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"1مرتبط بمقررات  2 ايقاف مؤقت  3 مرتبط بغرامة مالية  4 مرتبط بالانذارات  5 فصل نهائى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PenaltyRelatedFlg
		{
			get
			{
				return this.entityData.PenaltyRelatedFlg; 
			}
			
			set
			{
				if (this.entityData.PenaltyRelatedFlg == value)
					return;
					
				OnColumnChanging(GsCdePenaltyColumn.PenaltyRelatedFlg, this.entityData.PenaltyRelatedFlg);
				this.entityData.PenaltyRelatedFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCdePenaltyColumn.PenaltyRelatedFlg, this.entityData.PenaltyRelatedFlg);
				OnPropertyChanged("PenaltyRelatedFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PnltyPeriodFlg property. 
		///		XXXمرتبط بفترةXXX
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsPnltyPeriodFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XXXمرتبط بفترةXXX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? PnltyPeriodFlg
		{
			get
			{
				return this.entityData.PnltyPeriodFlg; 
			}
			
			set
			{
				if (this.entityData.PnltyPeriodFlg == value)
					return;
					
				OnColumnChanging(GsCdePenaltyColumn.PnltyPeriodFlg, this.entityData.PnltyPeriodFlg);
				this.entityData.PnltyPeriodFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCdePenaltyColumn.PnltyPeriodFlg, this.entityData.PnltyPeriodFlg);
				OnPropertyChanged("PnltyPeriodFlg");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EdStudViol objects
		///	which are related to this object through the relation FK_ED_STUD_VIOL_GS_CDE_PENALTY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudViol> EdStudViolCollection
		{
			get { return entityData.EdStudViolCollection; }
			set { entityData.EdStudViolCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of GsCdeApprovalPnlty objects
		///	which are related to this object through the relation FK_GS_CDE_APPROVAL_PNLTY_GS_CDE_PENALTY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GsCdeApprovalPnlty> GsCdeApprovalPnltyCollection
		{
			get { return entityData.GsCdeApprovalPnltyCollection; }
			set { entityData.GsCdeApprovalPnltyCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudViolAppeal objects
		///	which are related to this object through the relation FK_ED_STUD_VIOL_APPEAL_GS_CDE_PENALTY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudViolAppeal> EdStudViolAppealCollection
		{
			get { return entityData.EdStudViolAppealCollection; }
			set { entityData.EdStudViolAppealCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DescrAr", "Descr Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrAr", "Descr Ar", 150));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DescrEn", "Descr En"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrEn", "Descr En", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "GS_CDE_PENALTY"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"GS_CDE_PENALTY_ID", "DESCR_AR", "DESCR_EN", "APPEAL_PERIOD_DYS", "DROP_PERIOD_MNTH", "CHEATING_FLG", "FAC_DEAN_PRIV_FLG", "FAC_PUNISH_COMM_PRIV_FLG", "FAC_STAFF_PRIV_FLG", "FAC_STUD_DEAN_PRIV_FLG", "PENALTY_RELATED_FLG", "PNLTY_PERIOD_FLG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as GsCdePenaltyEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (GsCdePenalty) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<GsCdePenalty>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as GsCdePenalty);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed GsCdePenalty Entity 
		///</summary>
		protected virtual GsCdePenalty Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			GsCdePenalty copy = new GsCdePenalty();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.GsCdePenaltyId = this.GsCdePenaltyId;
					copy.OriginalGsCdePenaltyId = this.OriginalGsCdePenaltyId;
				copy.DescrAr = this.DescrAr;
				copy.DescrEn = this.DescrEn;
				copy.AppealPeriodDys = this.AppealPeriodDys;
				copy.DropPeriodMnth = this.DropPeriodMnth;
				copy.CheatingFlg = this.CheatingFlg;
				copy.FacDeanPrivFlg = this.FacDeanPrivFlg;
				copy.FacPunishCommPrivFlg = this.FacPunishCommPrivFlg;
				copy.FacStaffPrivFlg = this.FacStaffPrivFlg;
				copy.FacStudDeanPrivFlg = this.FacStudDeanPrivFlg;
				copy.PenaltyRelatedFlg = this.PenaltyRelatedFlg;
				copy.PnltyPeriodFlg = this.PnltyPeriodFlg;
			
		
			//deep copy nested objects
			copy.EdStudViolCollection = (TList<EdStudViol>) MakeCopyOf(this.EdStudViolCollection, existingCopies); 
			copy.GsCdeApprovalPnltyCollection = (TList<GsCdeApprovalPnlty>) MakeCopyOf(this.GsCdeApprovalPnltyCollection, existingCopies); 
			copy.EdStudViolAppealCollection = (TList<EdStudViolAppeal>) MakeCopyOf(this.EdStudViolAppealCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed GsCdePenalty Entity 
		///</summary>
		public virtual GsCdePenalty Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed GsCdePenalty Entity which is a deep copy of the current entity.
		///</summary>
		public virtual GsCdePenalty DeepCopy()
		{
			return EntityHelper.Clone<GsCdePenalty>(this as GsCdePenalty);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as GsCdePenaltyEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new GsCdePenaltyEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as GsCdePenaltyEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(GsCdePenaltyColumn column)
		{
			switch(column)
			{
					case GsCdePenaltyColumn.GsCdePenaltyId:
					return entityData.GsCdePenaltyId != _originalData.GsCdePenaltyId;
					case GsCdePenaltyColumn.DescrAr:
					return entityData.DescrAr != _originalData.DescrAr;
					case GsCdePenaltyColumn.DescrEn:
					return entityData.DescrEn != _originalData.DescrEn;
					case GsCdePenaltyColumn.AppealPeriodDys:
					return entityData.AppealPeriodDys != _originalData.AppealPeriodDys;
					case GsCdePenaltyColumn.DropPeriodMnth:
					return entityData.DropPeriodMnth != _originalData.DropPeriodMnth;
					case GsCdePenaltyColumn.CheatingFlg:
					return entityData.CheatingFlg != _originalData.CheatingFlg;
					case GsCdePenaltyColumn.FacDeanPrivFlg:
					return entityData.FacDeanPrivFlg != _originalData.FacDeanPrivFlg;
					case GsCdePenaltyColumn.FacPunishCommPrivFlg:
					return entityData.FacPunishCommPrivFlg != _originalData.FacPunishCommPrivFlg;
					case GsCdePenaltyColumn.FacStaffPrivFlg:
					return entityData.FacStaffPrivFlg != _originalData.FacStaffPrivFlg;
					case GsCdePenaltyColumn.FacStudDeanPrivFlg:
					return entityData.FacStudDeanPrivFlg != _originalData.FacStudDeanPrivFlg;
					case GsCdePenaltyColumn.PenaltyRelatedFlg:
					return entityData.PenaltyRelatedFlg != _originalData.PenaltyRelatedFlg;
					case GsCdePenaltyColumn.PnltyPeriodFlg:
					return entityData.PnltyPeriodFlg != _originalData.PnltyPeriodFlg;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< GsCdePenaltyColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.GsCdePenaltyId != _originalData.GsCdePenaltyId;
			result = result || entityData.DescrAr != _originalData.DescrAr;
			result = result || entityData.DescrEn != _originalData.DescrEn;
			result = result || entityData.AppealPeriodDys != _originalData.AppealPeriodDys;
			result = result || entityData.DropPeriodMnth != _originalData.DropPeriodMnth;
			result = result || entityData.CheatingFlg != _originalData.CheatingFlg;
			result = result || entityData.FacDeanPrivFlg != _originalData.FacDeanPrivFlg;
			result = result || entityData.FacPunishCommPrivFlg != _originalData.FacPunishCommPrivFlg;
			result = result || entityData.FacStaffPrivFlg != _originalData.FacStaffPrivFlg;
			result = result || entityData.FacStudDeanPrivFlg != _originalData.FacStudDeanPrivFlg;
			result = result || entityData.PenaltyRelatedFlg != _originalData.PenaltyRelatedFlg;
			result = result || entityData.PnltyPeriodFlg != _originalData.PnltyPeriodFlg;
			return result;
		}	
		
		///<summary>
		///  Returns a GsCdePenalty Entity with the original data.
		///</summary>
		public GsCdePenalty GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateGsCdePenalty(
				_originalData.GsCdePenaltyId,
				_originalData.DescrAr,
				_originalData.DescrEn,
				_originalData.AppealPeriodDys,
				_originalData.DropPeriodMnth,
				_originalData.CheatingFlg,
				_originalData.FacDeanPrivFlg,
				_originalData.FacPunishCommPrivFlg,
				_originalData.FacStaffPrivFlg,
				_originalData.FacStudDeanPrivFlg,
				_originalData.PenaltyRelatedFlg,
				_originalData.PnltyPeriodFlg
				);
				
			return (GsCdePenalty)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="GsCdePenaltyBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is GsCdePenaltyBase)
				return ValueEquals(this, (GsCdePenaltyBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="GsCdePenaltyBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.GsCdePenaltyId.GetHashCode() ^ 
					this.DescrAr.GetHashCode() ^ 
					this.DescrEn.GetHashCode() ^ 
					((this.AppealPeriodDys == null) ? string.Empty : this.AppealPeriodDys.ToString()).GetHashCode() ^ 
					((this.DropPeriodMnth == null) ? string.Empty : this.DropPeriodMnth.ToString()).GetHashCode() ^ 
					((this.CheatingFlg == null) ? string.Empty : this.CheatingFlg.ToString()).GetHashCode() ^ 
					((this.FacDeanPrivFlg == null) ? string.Empty : this.FacDeanPrivFlg.ToString()).GetHashCode() ^ 
					((this.FacPunishCommPrivFlg == null) ? string.Empty : this.FacPunishCommPrivFlg.ToString()).GetHashCode() ^ 
					((this.FacStaffPrivFlg == null) ? string.Empty : this.FacStaffPrivFlg.ToString()).GetHashCode() ^ 
					((this.FacStudDeanPrivFlg == null) ? string.Empty : this.FacStudDeanPrivFlg.ToString()).GetHashCode() ^ 
					((this.PenaltyRelatedFlg == null) ? string.Empty : this.PenaltyRelatedFlg.ToString()).GetHashCode() ^ 
					((this.PnltyPeriodFlg == null) ? string.Empty : this.PnltyPeriodFlg.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="GsCdePenaltyBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(GsCdePenaltyBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="GsCdePenaltyBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="GsCdePenaltyBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="GsCdePenaltyBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(GsCdePenaltyBase Object1, GsCdePenaltyBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.GsCdePenaltyId != Object2.GsCdePenaltyId)
				equal = false;
			if (Object1.DescrAr != Object2.DescrAr)
				equal = false;
			if (Object1.DescrEn != Object2.DescrEn)
				equal = false;
			if ( Object1.AppealPeriodDys != null && Object2.AppealPeriodDys != null )
			{
				if (Object1.AppealPeriodDys != Object2.AppealPeriodDys)
					equal = false;
			}
			else if (Object1.AppealPeriodDys == null ^ Object2.AppealPeriodDys == null )
			{
				equal = false;
			}
			if ( Object1.DropPeriodMnth != null && Object2.DropPeriodMnth != null )
			{
				if (Object1.DropPeriodMnth != Object2.DropPeriodMnth)
					equal = false;
			}
			else if (Object1.DropPeriodMnth == null ^ Object2.DropPeriodMnth == null )
			{
				equal = false;
			}
			if ( Object1.CheatingFlg != null && Object2.CheatingFlg != null )
			{
				if (Object1.CheatingFlg != Object2.CheatingFlg)
					equal = false;
			}
			else if (Object1.CheatingFlg == null ^ Object2.CheatingFlg == null )
			{
				equal = false;
			}
			if ( Object1.FacDeanPrivFlg != null && Object2.FacDeanPrivFlg != null )
			{
				if (Object1.FacDeanPrivFlg != Object2.FacDeanPrivFlg)
					equal = false;
			}
			else if (Object1.FacDeanPrivFlg == null ^ Object2.FacDeanPrivFlg == null )
			{
				equal = false;
			}
			if ( Object1.FacPunishCommPrivFlg != null && Object2.FacPunishCommPrivFlg != null )
			{
				if (Object1.FacPunishCommPrivFlg != Object2.FacPunishCommPrivFlg)
					equal = false;
			}
			else if (Object1.FacPunishCommPrivFlg == null ^ Object2.FacPunishCommPrivFlg == null )
			{
				equal = false;
			}
			if ( Object1.FacStaffPrivFlg != null && Object2.FacStaffPrivFlg != null )
			{
				if (Object1.FacStaffPrivFlg != Object2.FacStaffPrivFlg)
					equal = false;
			}
			else if (Object1.FacStaffPrivFlg == null ^ Object2.FacStaffPrivFlg == null )
			{
				equal = false;
			}
			if ( Object1.FacStudDeanPrivFlg != null && Object2.FacStudDeanPrivFlg != null )
			{
				if (Object1.FacStudDeanPrivFlg != Object2.FacStudDeanPrivFlg)
					equal = false;
			}
			else if (Object1.FacStudDeanPrivFlg == null ^ Object2.FacStudDeanPrivFlg == null )
			{
				equal = false;
			}
			if ( Object1.PenaltyRelatedFlg != null && Object2.PenaltyRelatedFlg != null )
			{
				if (Object1.PenaltyRelatedFlg != Object2.PenaltyRelatedFlg)
					equal = false;
			}
			else if (Object1.PenaltyRelatedFlg == null ^ Object2.PenaltyRelatedFlg == null )
			{
				equal = false;
			}
			if ( Object1.PnltyPeriodFlg != null && Object2.PnltyPeriodFlg != null )
			{
				if (Object1.PnltyPeriodFlg != Object2.PnltyPeriodFlg)
					equal = false;
			}
			else if (Object1.PnltyPeriodFlg == null ^ Object2.PnltyPeriodFlg == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((GsCdePenaltyBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static GsCdePenaltyComparer GetComparer()
        {
            return new GsCdePenaltyComparer();
        }
        */

        // Comparer delegates back to GsCdePenalty
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(GsCdePenalty rhs, GsCdePenaltyColumn which)
        {
            switch (which)
            {
            	
            	
            	case GsCdePenaltyColumn.GsCdePenaltyId:
            		return this.GsCdePenaltyId.CompareTo(rhs.GsCdePenaltyId);
            		
            		                 
            	
            	
            	case GsCdePenaltyColumn.DescrAr:
            		return this.DescrAr.CompareTo(rhs.DescrAr);
            		
            		                 
            	
            	
            	case GsCdePenaltyColumn.DescrEn:
            		return this.DescrEn.CompareTo(rhs.DescrEn);
            		
            		                 
            	
            	
            	case GsCdePenaltyColumn.AppealPeriodDys:
            		return this.AppealPeriodDys.Value.CompareTo(rhs.AppealPeriodDys.Value);
            		
            		                 
            	
            	
            	case GsCdePenaltyColumn.DropPeriodMnth:
            		return this.DropPeriodMnth.Value.CompareTo(rhs.DropPeriodMnth.Value);
            		
            		                 
            	
            	
            	case GsCdePenaltyColumn.CheatingFlg:
            		return this.CheatingFlg.Value.CompareTo(rhs.CheatingFlg.Value);
            		
            		                 
            	
            	
            	case GsCdePenaltyColumn.FacDeanPrivFlg:
            		return this.FacDeanPrivFlg.Value.CompareTo(rhs.FacDeanPrivFlg.Value);
            		
            		                 
            	
            	
            	case GsCdePenaltyColumn.FacPunishCommPrivFlg:
            		return this.FacPunishCommPrivFlg.Value.CompareTo(rhs.FacPunishCommPrivFlg.Value);
            		
            		                 
            	
            	
            	case GsCdePenaltyColumn.FacStaffPrivFlg:
            		return this.FacStaffPrivFlg.Value.CompareTo(rhs.FacStaffPrivFlg.Value);
            		
            		                 
            	
            	
            	case GsCdePenaltyColumn.FacStudDeanPrivFlg:
            		return this.FacStudDeanPrivFlg.Value.CompareTo(rhs.FacStudDeanPrivFlg.Value);
            		
            		                 
            	
            	
            	case GsCdePenaltyColumn.PenaltyRelatedFlg:
            		return this.PenaltyRelatedFlg.Value.CompareTo(rhs.PenaltyRelatedFlg.Value);
            		
            		                 
            	
            	
            	case GsCdePenaltyColumn.PnltyPeriodFlg:
            		return this.PnltyPeriodFlg.Value.CompareTo(rhs.PnltyPeriodFlg.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<GsCdePenaltyKey> Members
		
		// member variable for the EntityId property
		private GsCdePenaltyKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual GsCdePenaltyKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new GsCdePenaltyKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("GsCdePenalty")
					.Append("|").Append( this.GsCdePenaltyId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- GsCdePenaltyId: {0}{12}- DescrAr: {1}{12}- DescrEn: {2}{12}- AppealPeriodDys: {3}{12}- DropPeriodMnth: {4}{12}- CheatingFlg: {5}{12}- FacDeanPrivFlg: {6}{12}- FacPunishCommPrivFlg: {7}{12}- FacStaffPrivFlg: {8}{12}- FacStudDeanPrivFlg: {9}{12}- PenaltyRelatedFlg: {10}{12}- PnltyPeriodFlg: {11}{12}{14}", 
				this.GsCdePenaltyId,
				this.DescrAr,
				this.DescrEn,
				(this.AppealPeriodDys == null) ? string.Empty : this.AppealPeriodDys.ToString(),
				(this.DropPeriodMnth == null) ? string.Empty : this.DropPeriodMnth.ToString(),
				(this.CheatingFlg == null) ? string.Empty : this.CheatingFlg.ToString(),
				(this.FacDeanPrivFlg == null) ? string.Empty : this.FacDeanPrivFlg.ToString(),
				(this.FacPunishCommPrivFlg == null) ? string.Empty : this.FacPunishCommPrivFlg.ToString(),
				(this.FacStaffPrivFlg == null) ? string.Empty : this.FacStaffPrivFlg.ToString(),
				(this.FacStudDeanPrivFlg == null) ? string.Empty : this.FacStudDeanPrivFlg.ToString(),
				(this.PenaltyRelatedFlg == null) ? string.Empty : this.PenaltyRelatedFlg.ToString(),
				(this.PnltyPeriodFlg == null) ? string.Empty : this.PnltyPeriodFlg.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'GS_CDE_PENALTY' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class GsCdePenaltyEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// GS_CDE_PENALTY_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "GS_CDE_PENALTY"</remarks>
		public System.Decimal GsCdePenaltyId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalGsCdePenaltyId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// DESCR_AR : 
		/// </summary>
		public System.String		  DescrAr = string.Empty;
		
		/// <summary>
		/// DESCR_EN : 
		/// </summary>
		public System.String		  DescrEn = string.Empty;
		
		/// <summary>
		/// APPEAL_PERIOD_DYS : 
		/// </summary>
		public System.Decimal?		  AppealPeriodDys = null;
		
		/// <summary>
		/// DROP_PERIOD_MNTH : 
		/// </summary>
		public System.Decimal?		  DropPeriodMnth = null;
		
		/// <summary>
		/// CHEATING_FLG : 
		/// </summary>
		public System.Decimal?		  CheatingFlg = null;
		
		/// <summary>
		/// FAC_DEAN_PRIV_FLG : XX
		/// </summary>
		public System.Decimal?		  FacDeanPrivFlg = null;
		
		/// <summary>
		/// FAC_PUNISH_COMM_PRIV_FLG : XX
		/// </summary>
		public System.Decimal?		  FacPunishCommPrivFlg = null;
		
		/// <summary>
		/// FAC_STAFF_PRIV_FLG : XX
		/// </summary>
		public System.Decimal?		  FacStaffPrivFlg = null;
		
		/// <summary>
		/// FAC_STUD_DEAN_PRIV_FLG : XX
		/// </summary>
		public System.Decimal?		  FacStudDeanPrivFlg = null;
		
		/// <summary>
		/// PENALTY_RELATED_FLG : 1مرتبط بمقررات  2 ايقاف مؤقت  3 مرتبط بغرامة مالية  4 مرتبط بالانذارات  5 فصل نهائى
		/// </summary>
		public System.Decimal?		  PenaltyRelatedFlg = null;
		
		/// <summary>
		/// PNLTY_PERIOD_FLG : XXXمرتبط بفترةXXX
		/// </summary>
		public System.Boolean?		  PnltyPeriodFlg = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EdStudViolCollection
		
		private TList<EdStudViol> _edStudViolGsCdePenaltyId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudViolGsCdePenaltyId
		/// </summary>
		
		public TList<EdStudViol> EdStudViolCollection
		{
			get
			{
				if (_edStudViolGsCdePenaltyId == null)
				{
				_edStudViolGsCdePenaltyId = new TList<EdStudViol>();
				}
	
				return _edStudViolGsCdePenaltyId;
			}
			set { _edStudViolGsCdePenaltyId = value; }
		}
		
		#endregion

		#region GsCdeApprovalPnltyCollection
		
		private TList<GsCdeApprovalPnlty> _gsCdeApprovalPnltyGsCdePenaltyId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _gsCdeApprovalPnltyGsCdePenaltyId
		/// </summary>
		
		public TList<GsCdeApprovalPnlty> GsCdeApprovalPnltyCollection
		{
			get
			{
				if (_gsCdeApprovalPnltyGsCdePenaltyId == null)
				{
				_gsCdeApprovalPnltyGsCdePenaltyId = new TList<GsCdeApprovalPnlty>();
				}
	
				return _gsCdeApprovalPnltyGsCdePenaltyId;
			}
			set { _gsCdeApprovalPnltyGsCdePenaltyId = value; }
		}
		
		#endregion

		#region EdStudViolAppealCollection
		
		private TList<EdStudViolAppeal> _edStudViolAppealGsCdePenaltyId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudViolAppealGsCdePenaltyId
		/// </summary>
		
		public TList<EdStudViolAppeal> EdStudViolAppealCollection
		{
			get
			{
				if (_edStudViolAppealGsCdePenaltyId == null)
				{
				_edStudViolAppealGsCdePenaltyId = new TList<EdStudViolAppeal>();
				}
	
				return _edStudViolAppealGsCdePenaltyId;
			}
			set { _edStudViolAppealGsCdePenaltyId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			GsCdePenaltyEntityData _tmp = new GsCdePenaltyEntityData();
						
			_tmp.GsCdePenaltyId = this.GsCdePenaltyId;
			_tmp.OriginalGsCdePenaltyId = this.OriginalGsCdePenaltyId;
			
			_tmp.DescrAr = this.DescrAr;
			_tmp.DescrEn = this.DescrEn;
			_tmp.AppealPeriodDys = this.AppealPeriodDys;
			_tmp.DropPeriodMnth = this.DropPeriodMnth;
			_tmp.CheatingFlg = this.CheatingFlg;
			_tmp.FacDeanPrivFlg = this.FacDeanPrivFlg;
			_tmp.FacPunishCommPrivFlg = this.FacPunishCommPrivFlg;
			_tmp.FacStaffPrivFlg = this.FacStaffPrivFlg;
			_tmp.FacStudDeanPrivFlg = this.FacStudDeanPrivFlg;
			_tmp.PenaltyRelatedFlg = this.PenaltyRelatedFlg;
			_tmp.PnltyPeriodFlg = this.PnltyPeriodFlg;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._edStudViolGsCdePenaltyId != null)
				_tmp.EdStudViolCollection = (TList<EdStudViol>) MakeCopyOf(this.EdStudViolCollection); 
			if (this._gsCdeApprovalPnltyGsCdePenaltyId != null)
				_tmp.GsCdeApprovalPnltyCollection = (TList<GsCdeApprovalPnlty>) MakeCopyOf(this.GsCdeApprovalPnltyCollection); 
			if (this._edStudViolAppealGsCdePenaltyId != null)
				_tmp.EdStudViolAppealCollection = (TList<EdStudViolAppeal>) MakeCopyOf(this.EdStudViolAppealCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			GsCdePenaltyEntityData _tmp = new GsCdePenaltyEntityData();
						
			_tmp.GsCdePenaltyId = this.GsCdePenaltyId;
			_tmp.OriginalGsCdePenaltyId = this.OriginalGsCdePenaltyId;
			
			_tmp.DescrAr = this.DescrAr;
			_tmp.DescrEn = this.DescrEn;
			_tmp.AppealPeriodDys = this.AppealPeriodDys;
			_tmp.DropPeriodMnth = this.DropPeriodMnth;
			_tmp.CheatingFlg = this.CheatingFlg;
			_tmp.FacDeanPrivFlg = this.FacDeanPrivFlg;
			_tmp.FacPunishCommPrivFlg = this.FacPunishCommPrivFlg;
			_tmp.FacStaffPrivFlg = this.FacStaffPrivFlg;
			_tmp.FacStudDeanPrivFlg = this.FacStudDeanPrivFlg;
			_tmp.PenaltyRelatedFlg = this.PenaltyRelatedFlg;
			_tmp.PnltyPeriodFlg = this.PnltyPeriodFlg;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EdStudViolCollection = (TList<EdStudViol>) MakeCopyOf(this.EdStudViolCollection, existingCopies); 
			_tmp.GsCdeApprovalPnltyCollection = (TList<GsCdeApprovalPnlty>) MakeCopyOf(this.GsCdeApprovalPnltyCollection, existingCopies); 
			_tmp.EdStudViolAppealCollection = (TList<EdStudViolAppeal>) MakeCopyOf(this.EdStudViolAppealCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCdePenaltyColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(GsCdePenaltyColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCdePenaltyColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(GsCdePenaltyColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCdePenaltyColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(GsCdePenaltyColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				GsCdePenaltyEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new GsCdePenaltyEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCdePenaltyColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(GsCdePenaltyColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				GsCdePenaltyEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new GsCdePenaltyEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region GsCdePenaltyEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="GsCdePenalty"/> object.
	/// </remarks>
	public class GsCdePenaltyEventArgs : System.EventArgs
	{
		private GsCdePenaltyColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the GsCdePenaltyEventArgs class.
		///</summary>
		public GsCdePenaltyEventArgs(GsCdePenaltyColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the GsCdePenaltyEventArgs class.
		///</summary>
		public GsCdePenaltyEventArgs(GsCdePenaltyColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The GsCdePenaltyColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="GsCdePenaltyColumn" />
		public GsCdePenaltyColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all GsCdePenalty related events.
	///</summary>
	public delegate void GsCdePenaltyEventHandler(object sender, GsCdePenaltyEventArgs e);
	
	#region GsCdePenaltyComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class GsCdePenaltyComparer : System.Collections.Generic.IComparer<GsCdePenalty>
	{
		GsCdePenaltyColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:GsCdePenaltyComparer"/> class.
        /// </summary>
		public GsCdePenaltyComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:GsCdePenaltyComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public GsCdePenaltyComparer(GsCdePenaltyColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="GsCdePenalty"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="GsCdePenalty"/> to compare.</param>
        /// <param name="b">The second <c>GsCdePenalty</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(GsCdePenalty a, GsCdePenalty b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(GsCdePenalty entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(GsCdePenalty a, GsCdePenalty b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public GsCdePenaltyColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region GsCdePenaltyKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="GsCdePenalty"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class GsCdePenaltyKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the GsCdePenaltyKey class.
		/// </summary>
		public GsCdePenaltyKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the GsCdePenaltyKey class.
		/// </summary>
		public GsCdePenaltyKey(GsCdePenaltyBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.GsCdePenaltyId = entity.GsCdePenaltyId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the GsCdePenaltyKey class.
		/// </summary>
		public GsCdePenaltyKey(System.Decimal _gsCdePenaltyId)
		{
			#region Init Properties

			this.GsCdePenaltyId = _gsCdePenaltyId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private GsCdePenaltyBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public GsCdePenaltyBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the GsCdePenaltyId property
		private System.Decimal _gsCdePenaltyId;
		
		/// <summary>
		/// Gets or sets the GsCdePenaltyId property.
		/// </summary>
		public System.Decimal GsCdePenaltyId
		{
			get { return _gsCdePenaltyId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.GsCdePenaltyId = value;
				
				_gsCdePenaltyId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				GsCdePenaltyId = ( values["GsCdePenaltyId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["GsCdePenaltyId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("GsCdePenaltyId", GsCdePenaltyId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("GsCdePenaltyId: {0}{1}",
								GsCdePenaltyId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region GsCdePenaltyColumn Enum
	
	/// <summary>
	/// Enumerate the GsCdePenalty columns.
	/// </summary>
	[Serializable]
	public enum GsCdePenaltyColumn : int
	{
		/// <summary>
		/// GsCdePenaltyId : 
		/// </summary>
		[EnumTextValue("GS_CDE_PENALTY_ID")]
		[ColumnEnum("GS_CDE_PENALTY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		GsCdePenaltyId = 1,
		/// <summary>
		/// DescrAr : 
		/// </summary>
		[EnumTextValue("DESCR_AR")]
		[ColumnEnum("DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 150)]
		DescrAr = 2,
		/// <summary>
		/// DescrEn : 
		/// </summary>
		[EnumTextValue("DESCR_EN")]
		[ColumnEnum("DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, false, 150)]
		DescrEn = 3,
		/// <summary>
		/// AppealPeriodDys : 
		/// </summary>
		[EnumTextValue("APPEAL_PERIOD_DYS")]
		[ColumnEnum("APPEAL_PERIOD_DYS", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AppealPeriodDys = 4,
		/// <summary>
		/// DropPeriodMnth : 
		/// </summary>
		[EnumTextValue("DROP_PERIOD_MNTH")]
		[ColumnEnum("DROP_PERIOD_MNTH", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DropPeriodMnth = 5,
		/// <summary>
		/// CheatingFlg : 
		/// </summary>
		[EnumTextValue("CHEATING_FLG")]
		[ColumnEnum("CHEATING_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CheatingFlg = 6,
		/// <summary>
		/// FacDeanPrivFlg : XX
		/// </summary>
		[EnumTextValue("FAC_DEAN_PRIV_FLG")]
		[ColumnEnum("FAC_DEAN_PRIV_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FacDeanPrivFlg = 7,
		/// <summary>
		/// FacPunishCommPrivFlg : XX
		/// </summary>
		[EnumTextValue("FAC_PUNISH_COMM_PRIV_FLG")]
		[ColumnEnum("FAC_PUNISH_COMM_PRIV_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FacPunishCommPrivFlg = 8,
		/// <summary>
		/// FacStaffPrivFlg : XX
		/// </summary>
		[EnumTextValue("FAC_STAFF_PRIV_FLG")]
		[ColumnEnum("FAC_STAFF_PRIV_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FacStaffPrivFlg = 9,
		/// <summary>
		/// FacStudDeanPrivFlg : XX
		/// </summary>
		[EnumTextValue("FAC_STUD_DEAN_PRIV_FLG")]
		[ColumnEnum("FAC_STUD_DEAN_PRIV_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FacStudDeanPrivFlg = 10,
		/// <summary>
		/// PenaltyRelatedFlg : 1مرتبط بمقررات  2 ايقاف مؤقت  3 مرتبط بغرامة مالية  4 مرتبط بالانذارات  5 فصل نهائى
		/// </summary>
		[EnumTextValue("PENALTY_RELATED_FLG")]
		[ColumnEnum("PENALTY_RELATED_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PenaltyRelatedFlg = 11,
		/// <summary>
		/// PnltyPeriodFlg : XXXمرتبط بفترةXXX
		/// </summary>
		[EnumTextValue("PNLTY_PERIOD_FLG")]
		[ColumnEnum("PNLTY_PERIOD_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		PnltyPeriodFlg = 12
	}//End enum

	#endregion GsCdePenaltyColumn Enum

} // end namespace
