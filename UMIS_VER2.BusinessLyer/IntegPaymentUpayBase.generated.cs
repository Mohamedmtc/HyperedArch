
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file IntegPaymentUpay.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'INTEG_Payment_UPay' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class IntegPaymentUpayBase : EntityBase, IIntegPaymentUpay, IEntityId<IntegPaymentUpayKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private IntegPaymentUpayEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private IntegPaymentUpayEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private IntegPaymentUpayEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<IntegPaymentUpay> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event IntegPaymentUpayEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event IntegPaymentUpayEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="IntegPaymentUpayBase"/> instance.
		///</summary>
		public IntegPaymentUpayBase()
		{
			this.entityData = new IntegPaymentUpayEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="IntegPaymentUpayBase"/> instance.
		///</summary>
		///<param name="_studFacultyCode"></param>
		///<param name="_feeStudVoucherId"></param>
		///<param name="_isPaid"></param>
		///<param name="_paymentMethodId"></param>
		///<param name="_amount"></param>
		///<param name="_upayOrderId"></param>
		///<param name="_upayPaymentCode"></param>
		///<param name="_auth"></param>
		///<param name="_postDate"></param>
		///<param name="_safeNameRef"></param>
		///<param name="_result"></param>
		///<param name="_trackId"></param>
		///<param name="_tranId"></param>
		public IntegPaymentUpayBase(System.String _studFacultyCode, System.Decimal _feeStudVoucherId, 
			System.Int32 _isPaid, System.Decimal? _paymentMethodId, System.Decimal _amount, 
			System.String _upayOrderId, System.String _upayPaymentCode, System.String _auth, 
			System.String _postDate, System.String _safeNameRef, System.String _result, 
			System.String _trackId, System.String _tranId)
		{
			this.entityData = new IntegPaymentUpayEntityData();
			this.backupData = null;

			this.StudFacultyCode = _studFacultyCode;
			this.FeeStudVoucherId = _feeStudVoucherId;
			this.IsPaid = _isPaid;
			this.PaymentMethodId = _paymentMethodId;
			this.Amount = _amount;
			this.UpayOrderId = _upayOrderId;
			this.UpayPaymentCode = _upayPaymentCode;
			this.Auth = _auth;
			this.PostDate = _postDate;
			this.SafeNameRef = _safeNameRef;
			this.Result = _result;
			this.TrackId = _trackId;
			this.TranId = _tranId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="IntegPaymentUpay"/> instance.
		///</summary>
		///<param name="_studFacultyCode"></param>
		///<param name="_feeStudVoucherId"></param>
		///<param name="_isPaid"></param>
		///<param name="_paymentMethodId"></param>
		///<param name="_amount"></param>
		///<param name="_upayOrderId"></param>
		///<param name="_upayPaymentCode"></param>
		///<param name="_auth"></param>
		///<param name="_postDate"></param>
		///<param name="_safeNameRef"></param>
		///<param name="_result"></param>
		///<param name="_trackId"></param>
		///<param name="_tranId"></param>
		public static IntegPaymentUpay CreateIntegPaymentUpay(System.String _studFacultyCode, System.Decimal _feeStudVoucherId, 
			System.Int32 _isPaid, System.Decimal? _paymentMethodId, System.Decimal _amount, 
			System.String _upayOrderId, System.String _upayPaymentCode, System.String _auth, 
			System.String _postDate, System.String _safeNameRef, System.String _result, 
			System.String _trackId, System.String _tranId)
		{
			IntegPaymentUpay newIntegPaymentUpay = new IntegPaymentUpay();
			newIntegPaymentUpay.StudFacultyCode = _studFacultyCode;
			newIntegPaymentUpay.FeeStudVoucherId = _feeStudVoucherId;
			newIntegPaymentUpay.IsPaid = _isPaid;
			newIntegPaymentUpay.PaymentMethodId = _paymentMethodId;
			newIntegPaymentUpay.Amount = _amount;
			newIntegPaymentUpay.UpayOrderId = _upayOrderId;
			newIntegPaymentUpay.UpayPaymentCode = _upayPaymentCode;
			newIntegPaymentUpay.Auth = _auth;
			newIntegPaymentUpay.PostDate = _postDate;
			newIntegPaymentUpay.SafeNameRef = _safeNameRef;
			newIntegPaymentUpay.Result = _result;
			newIntegPaymentUpay.TrackId = _trackId;
			newIntegPaymentUpay.TranId = _tranId;
			return newIntegPaymentUpay;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the IntegPaymentUpayId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Decimal IntegPaymentUpayId
		{
			get
			{
				return this.entityData.IntegPaymentUpayId; 
			}
			
			set
			{
				if (this.entityData.IntegPaymentUpayId == value)
					return;
					
				OnColumnChanging(IntegPaymentUpayColumn.IntegPaymentUpayId, this.entityData.IntegPaymentUpayId);
				this.entityData.IntegPaymentUpayId = value;
				this.EntityId.IntegPaymentUpayId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegPaymentUpayColumn.IntegPaymentUpayId, this.entityData.IntegPaymentUpayId);
				OnPropertyChanged("IntegPaymentUpayId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StudFacultyCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 30)]
		public virtual System.String StudFacultyCode
		{
			get
			{
				return this.entityData.StudFacultyCode; 
			}
			
			set
			{
				if (this.entityData.StudFacultyCode == value)
					return;
					
				OnColumnChanging(IntegPaymentUpayColumn.StudFacultyCode, this.entityData.StudFacultyCode);
				this.entityData.StudFacultyCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegPaymentUpayColumn.StudFacultyCode, this.entityData.StudFacultyCode);
				OnPropertyChanged("StudFacultyCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeStudVoucherId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal FeeStudVoucherId
		{
			get
			{
				return this.entityData.FeeStudVoucherId; 
			}
			
			set
			{
				if (this.entityData.FeeStudVoucherId == value)
					return;
					
				OnColumnChanging(IntegPaymentUpayColumn.FeeStudVoucherId, this.entityData.FeeStudVoucherId);
				this.entityData.FeeStudVoucherId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegPaymentUpayColumn.FeeStudVoucherId, this.entityData.FeeStudVoucherId);
				OnPropertyChanged("FeeStudVoucherId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsPaid property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 IsPaid
		{
			get
			{
				return this.entityData.IsPaid; 
			}
			
			set
			{
				if (this.entityData.IsPaid == value)
					return;
					
				OnColumnChanging(IntegPaymentUpayColumn.IsPaid, this.entityData.IsPaid);
				this.entityData.IsPaid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegPaymentUpayColumn.IsPaid, this.entityData.IsPaid);
				OnPropertyChanged("IsPaid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PaymentMethodId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPaymentMethodIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PaymentMethodId
		{
			get
			{
				return this.entityData.PaymentMethodId; 
			}
			
			set
			{
				if (this.entityData.PaymentMethodId == value)
					return;
					
				OnColumnChanging(IntegPaymentUpayColumn.PaymentMethodId, this.entityData.PaymentMethodId);
				this.entityData.PaymentMethodId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegPaymentUpayColumn.PaymentMethodId, this.entityData.PaymentMethodId);
				OnPropertyChanged("PaymentMethodId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Amount property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal Amount
		{
			get
			{
				return this.entityData.Amount; 
			}
			
			set
			{
				if (this.entityData.Amount == value)
					return;
					
				OnColumnChanging(IntegPaymentUpayColumn.Amount, this.entityData.Amount);
				this.entityData.Amount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegPaymentUpayColumn.Amount, this.entityData.Amount);
				OnPropertyChanged("Amount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpayOrderId property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String UpayOrderId
		{
			get
			{
				return this.entityData.UpayOrderId; 
			}
			
			set
			{
				if (this.entityData.UpayOrderId == value)
					return;
					
				OnColumnChanging(IntegPaymentUpayColumn.UpayOrderId, this.entityData.UpayOrderId);
				this.entityData.UpayOrderId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegPaymentUpayColumn.UpayOrderId, this.entityData.UpayOrderId);
				OnPropertyChanged("UpayOrderId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpayPaymentCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String UpayPaymentCode
		{
			get
			{
				return this.entityData.UpayPaymentCode; 
			}
			
			set
			{
				if (this.entityData.UpayPaymentCode == value)
					return;
					
				OnColumnChanging(IntegPaymentUpayColumn.UpayPaymentCode, this.entityData.UpayPaymentCode);
				this.entityData.UpayPaymentCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegPaymentUpayColumn.UpayPaymentCode, this.entityData.UpayPaymentCode);
				OnPropertyChanged("UpayPaymentCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Auth property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String Auth
		{
			get
			{
				return this.entityData.Auth; 
			}
			
			set
			{
				if (this.entityData.Auth == value)
					return;
					
				OnColumnChanging(IntegPaymentUpayColumn.Auth, this.entityData.Auth);
				this.entityData.Auth = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegPaymentUpayColumn.Auth, this.entityData.Auth);
				OnPropertyChanged("Auth");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PostDate property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String PostDate
		{
			get
			{
				return this.entityData.PostDate; 
			}
			
			set
			{
				if (this.entityData.PostDate == value)
					return;
					
				OnColumnChanging(IntegPaymentUpayColumn.PostDate, this.entityData.PostDate);
				this.entityData.PostDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegPaymentUpayColumn.PostDate, this.entityData.PostDate);
				OnPropertyChanged("PostDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SafeNameRef property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String SafeNameRef
		{
			get
			{
				return this.entityData.SafeNameRef; 
			}
			
			set
			{
				if (this.entityData.SafeNameRef == value)
					return;
					
				OnColumnChanging(IntegPaymentUpayColumn.SafeNameRef, this.entityData.SafeNameRef);
				this.entityData.SafeNameRef = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegPaymentUpayColumn.SafeNameRef, this.entityData.SafeNameRef);
				OnPropertyChanged("SafeNameRef");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Result property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String Result
		{
			get
			{
				return this.entityData.Result; 
			}
			
			set
			{
				if (this.entityData.Result == value)
					return;
					
				OnColumnChanging(IntegPaymentUpayColumn.Result, this.entityData.Result);
				this.entityData.Result = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegPaymentUpayColumn.Result, this.entityData.Result);
				OnPropertyChanged("Result");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrackId property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String TrackId
		{
			get
			{
				return this.entityData.TrackId; 
			}
			
			set
			{
				if (this.entityData.TrackId == value)
					return;
					
				OnColumnChanging(IntegPaymentUpayColumn.TrackId, this.entityData.TrackId);
				this.entityData.TrackId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegPaymentUpayColumn.TrackId, this.entityData.TrackId);
				OnPropertyChanged("TrackId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TranId property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String TranId
		{
			get
			{
				return this.entityData.TranId; 
			}
			
			set
			{
				if (this.entityData.TranId == value)
					return;
					
				OnColumnChanging(IntegPaymentUpayColumn.TranId, this.entityData.TranId);
				this.entityData.TranId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IntegPaymentUpayColumn.TranId, this.entityData.TranId);
				OnPropertyChanged("TranId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("StudFacultyCode", "Stud Faculty Code"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("StudFacultyCode", "Stud Faculty Code", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UpayOrderId", "Upay Order Id", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UpayPaymentCode", "Upay Payment Code", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Auth", "Auth", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PostDate", "Post Date", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SafeNameRef", "Ref", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Result", "Result", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TrackId", "Track Id", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TranId", "Tran Id", 20));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "INTEG_Payment_UPay"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"INTEG_Payment_UPay_ID", "STUD_FACULTY_CODE", "FEE_STUD_VOUCHER_ID", "IS_Paid", "Payment_Method_ID", "Amount", "UPay_Order_Id", "UPay_Payment_Code", "Auth", "Post_Date", "Ref", "Result", "Track_ID", "Tran_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as IntegPaymentUpayEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (IntegPaymentUpay) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<IntegPaymentUpay>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as IntegPaymentUpay);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed IntegPaymentUpay Entity 
		///</summary>
		protected virtual IntegPaymentUpay Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			IntegPaymentUpay copy = new IntegPaymentUpay();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.IntegPaymentUpayId = this.IntegPaymentUpayId;
				copy.StudFacultyCode = this.StudFacultyCode;
				copy.FeeStudVoucherId = this.FeeStudVoucherId;
				copy.IsPaid = this.IsPaid;
				copy.PaymentMethodId = this.PaymentMethodId;
				copy.Amount = this.Amount;
				copy.UpayOrderId = this.UpayOrderId;
				copy.UpayPaymentCode = this.UpayPaymentCode;
				copy.Auth = this.Auth;
				copy.PostDate = this.PostDate;
				copy.SafeNameRef = this.SafeNameRef;
				copy.Result = this.Result;
				copy.TrackId = this.TrackId;
				copy.TranId = this.TranId;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed IntegPaymentUpay Entity 
		///</summary>
		public virtual IntegPaymentUpay Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed IntegPaymentUpay Entity which is a deep copy of the current entity.
		///</summary>
		public virtual IntegPaymentUpay DeepCopy()
		{
			return EntityHelper.Clone<IntegPaymentUpay>(this as IntegPaymentUpay);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as IntegPaymentUpayEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new IntegPaymentUpayEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as IntegPaymentUpayEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(IntegPaymentUpayColumn column)
		{
			switch(column)
			{
					case IntegPaymentUpayColumn.IntegPaymentUpayId:
					return entityData.IntegPaymentUpayId != _originalData.IntegPaymentUpayId;
					case IntegPaymentUpayColumn.StudFacultyCode:
					return entityData.StudFacultyCode != _originalData.StudFacultyCode;
					case IntegPaymentUpayColumn.FeeStudVoucherId:
					return entityData.FeeStudVoucherId != _originalData.FeeStudVoucherId;
					case IntegPaymentUpayColumn.IsPaid:
					return entityData.IsPaid != _originalData.IsPaid;
					case IntegPaymentUpayColumn.PaymentMethodId:
					return entityData.PaymentMethodId != _originalData.PaymentMethodId;
					case IntegPaymentUpayColumn.Amount:
					return entityData.Amount != _originalData.Amount;
					case IntegPaymentUpayColumn.UpayOrderId:
					return entityData.UpayOrderId != _originalData.UpayOrderId;
					case IntegPaymentUpayColumn.UpayPaymentCode:
					return entityData.UpayPaymentCode != _originalData.UpayPaymentCode;
					case IntegPaymentUpayColumn.Auth:
					return entityData.Auth != _originalData.Auth;
					case IntegPaymentUpayColumn.PostDate:
					return entityData.PostDate != _originalData.PostDate;
					case IntegPaymentUpayColumn.SafeNameRef:
					return entityData.SafeNameRef != _originalData.SafeNameRef;
					case IntegPaymentUpayColumn.Result:
					return entityData.Result != _originalData.Result;
					case IntegPaymentUpayColumn.TrackId:
					return entityData.TrackId != _originalData.TrackId;
					case IntegPaymentUpayColumn.TranId:
					return entityData.TranId != _originalData.TranId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< IntegPaymentUpayColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.IntegPaymentUpayId != _originalData.IntegPaymentUpayId;
			result = result || entityData.StudFacultyCode != _originalData.StudFacultyCode;
			result = result || entityData.FeeStudVoucherId != _originalData.FeeStudVoucherId;
			result = result || entityData.IsPaid != _originalData.IsPaid;
			result = result || entityData.PaymentMethodId != _originalData.PaymentMethodId;
			result = result || entityData.Amount != _originalData.Amount;
			result = result || entityData.UpayOrderId != _originalData.UpayOrderId;
			result = result || entityData.UpayPaymentCode != _originalData.UpayPaymentCode;
			result = result || entityData.Auth != _originalData.Auth;
			result = result || entityData.PostDate != _originalData.PostDate;
			result = result || entityData.SafeNameRef != _originalData.SafeNameRef;
			result = result || entityData.Result != _originalData.Result;
			result = result || entityData.TrackId != _originalData.TrackId;
			result = result || entityData.TranId != _originalData.TranId;
			return result;
		}	
		
		///<summary>
		///  Returns a IntegPaymentUpay Entity with the original data.
		///</summary>
		public IntegPaymentUpay GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateIntegPaymentUpay(
				_originalData.StudFacultyCode,
				_originalData.FeeStudVoucherId,
				_originalData.IsPaid,
				_originalData.PaymentMethodId,
				_originalData.Amount,
				_originalData.UpayOrderId,
				_originalData.UpayPaymentCode,
				_originalData.Auth,
				_originalData.PostDate,
				_originalData.SafeNameRef,
				_originalData.Result,
				_originalData.TrackId,
				_originalData.TranId
				);
				
			return (IntegPaymentUpay)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="IntegPaymentUpayBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is IntegPaymentUpayBase)
				return ValueEquals(this, (IntegPaymentUpayBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="IntegPaymentUpayBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.IntegPaymentUpayId.GetHashCode() ^ 
					this.StudFacultyCode.GetHashCode() ^ 
					this.FeeStudVoucherId.GetHashCode() ^ 
					this.IsPaid.GetHashCode() ^ 
					((this.PaymentMethodId == null) ? string.Empty : this.PaymentMethodId.ToString()).GetHashCode() ^ 
					this.Amount.GetHashCode() ^ 
					((this.UpayOrderId == null) ? string.Empty : this.UpayOrderId.ToString()).GetHashCode() ^ 
					((this.UpayPaymentCode == null) ? string.Empty : this.UpayPaymentCode.ToString()).GetHashCode() ^ 
					((this.Auth == null) ? string.Empty : this.Auth.ToString()).GetHashCode() ^ 
					((this.PostDate == null) ? string.Empty : this.PostDate.ToString()).GetHashCode() ^ 
					((this.SafeNameRef == null) ? string.Empty : this.SafeNameRef.ToString()).GetHashCode() ^ 
					((this.Result == null) ? string.Empty : this.Result.ToString()).GetHashCode() ^ 
					((this.TrackId == null) ? string.Empty : this.TrackId.ToString()).GetHashCode() ^ 
					((this.TranId == null) ? string.Empty : this.TranId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="IntegPaymentUpayBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(IntegPaymentUpayBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="IntegPaymentUpayBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="IntegPaymentUpayBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="IntegPaymentUpayBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(IntegPaymentUpayBase Object1, IntegPaymentUpayBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.IntegPaymentUpayId != Object2.IntegPaymentUpayId)
				equal = false;
			if (Object1.StudFacultyCode != Object2.StudFacultyCode)
				equal = false;
			if (Object1.FeeStudVoucherId != Object2.FeeStudVoucherId)
				equal = false;
			if (Object1.IsPaid != Object2.IsPaid)
				equal = false;
			if ( Object1.PaymentMethodId != null && Object2.PaymentMethodId != null )
			{
				if (Object1.PaymentMethodId != Object2.PaymentMethodId)
					equal = false;
			}
			else if (Object1.PaymentMethodId == null ^ Object2.PaymentMethodId == null )
			{
				equal = false;
			}
			if (Object1.Amount != Object2.Amount)
				equal = false;
			if ( Object1.UpayOrderId != null && Object2.UpayOrderId != null )
			{
				if (Object1.UpayOrderId != Object2.UpayOrderId)
					equal = false;
			}
			else if (Object1.UpayOrderId == null ^ Object2.UpayOrderId == null )
			{
				equal = false;
			}
			if ( Object1.UpayPaymentCode != null && Object2.UpayPaymentCode != null )
			{
				if (Object1.UpayPaymentCode != Object2.UpayPaymentCode)
					equal = false;
			}
			else if (Object1.UpayPaymentCode == null ^ Object2.UpayPaymentCode == null )
			{
				equal = false;
			}
			if ( Object1.Auth != null && Object2.Auth != null )
			{
				if (Object1.Auth != Object2.Auth)
					equal = false;
			}
			else if (Object1.Auth == null ^ Object2.Auth == null )
			{
				equal = false;
			}
			if ( Object1.PostDate != null && Object2.PostDate != null )
			{
				if (Object1.PostDate != Object2.PostDate)
					equal = false;
			}
			else if (Object1.PostDate == null ^ Object2.PostDate == null )
			{
				equal = false;
			}
			if ( Object1.SafeNameRef != null && Object2.SafeNameRef != null )
			{
				if (Object1.SafeNameRef != Object2.SafeNameRef)
					equal = false;
			}
			else if (Object1.SafeNameRef == null ^ Object2.SafeNameRef == null )
			{
				equal = false;
			}
			if ( Object1.Result != null && Object2.Result != null )
			{
				if (Object1.Result != Object2.Result)
					equal = false;
			}
			else if (Object1.Result == null ^ Object2.Result == null )
			{
				equal = false;
			}
			if ( Object1.TrackId != null && Object2.TrackId != null )
			{
				if (Object1.TrackId != Object2.TrackId)
					equal = false;
			}
			else if (Object1.TrackId == null ^ Object2.TrackId == null )
			{
				equal = false;
			}
			if ( Object1.TranId != null && Object2.TranId != null )
			{
				if (Object1.TranId != Object2.TranId)
					equal = false;
			}
			else if (Object1.TranId == null ^ Object2.TranId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((IntegPaymentUpayBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static IntegPaymentUpayComparer GetComparer()
        {
            return new IntegPaymentUpayComparer();
        }
        */

        // Comparer delegates back to IntegPaymentUpay
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(IntegPaymentUpay rhs, IntegPaymentUpayColumn which)
        {
            switch (which)
            {
            	
            	
            	case IntegPaymentUpayColumn.IntegPaymentUpayId:
            		return this.IntegPaymentUpayId.CompareTo(rhs.IntegPaymentUpayId);
            		
            		                 
            	
            	
            	case IntegPaymentUpayColumn.StudFacultyCode:
            		return this.StudFacultyCode.CompareTo(rhs.StudFacultyCode);
            		
            		                 
            	
            	
            	case IntegPaymentUpayColumn.FeeStudVoucherId:
            		return this.FeeStudVoucherId.CompareTo(rhs.FeeStudVoucherId);
            		
            		                 
            	
            	
            	case IntegPaymentUpayColumn.IsPaid:
            		return this.IsPaid.CompareTo(rhs.IsPaid);
            		
            		                 
            	
            	
            	case IntegPaymentUpayColumn.PaymentMethodId:
            		return this.PaymentMethodId.Value.CompareTo(rhs.PaymentMethodId.Value);
            		
            		                 
            	
            	
            	case IntegPaymentUpayColumn.Amount:
            		return this.Amount.CompareTo(rhs.Amount);
            		
            		                 
            	
            	
            	case IntegPaymentUpayColumn.UpayOrderId:
            		return this.UpayOrderId.CompareTo(rhs.UpayOrderId);
            		
            		                 
            	
            	
            	case IntegPaymentUpayColumn.UpayPaymentCode:
            		return this.UpayPaymentCode.CompareTo(rhs.UpayPaymentCode);
            		
            		                 
            	
            	
            	case IntegPaymentUpayColumn.Auth:
            		return this.Auth.CompareTo(rhs.Auth);
            		
            		                 
            	
            	
            	case IntegPaymentUpayColumn.PostDate:
            		return this.PostDate.CompareTo(rhs.PostDate);
            		
            		                 
            	
            	
            	case IntegPaymentUpayColumn.SafeNameRef:
            		return this.SafeNameRef.CompareTo(rhs.SafeNameRef);
            		
            		                 
            	
            	
            	case IntegPaymentUpayColumn.Result:
            		return this.Result.CompareTo(rhs.Result);
            		
            		                 
            	
            	
            	case IntegPaymentUpayColumn.TrackId:
            		return this.TrackId.CompareTo(rhs.TrackId);
            		
            		                 
            	
            	
            	case IntegPaymentUpayColumn.TranId:
            		return this.TranId.CompareTo(rhs.TranId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<IntegPaymentUpayKey> Members
		
		// member variable for the EntityId property
		private IntegPaymentUpayKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual IntegPaymentUpayKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new IntegPaymentUpayKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("IntegPaymentUpay")
					.Append("|").Append( this.IntegPaymentUpayId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{15}{14}- IntegPaymentUpayId: {0}{14}- StudFacultyCode: {1}{14}- FeeStudVoucherId: {2}{14}- IsPaid: {3}{14}- PaymentMethodId: {4}{14}- Amount: {5}{14}- UpayOrderId: {6}{14}- UpayPaymentCode: {7}{14}- Auth: {8}{14}- PostDate: {9}{14}- SafeNameRef: {10}{14}- Result: {11}{14}- TrackId: {12}{14}- TranId: {13}{14}{16}", 
				this.IntegPaymentUpayId,
				this.StudFacultyCode,
				this.FeeStudVoucherId,
				this.IsPaid,
				(this.PaymentMethodId == null) ? string.Empty : this.PaymentMethodId.ToString(),
				this.Amount,
				(this.UpayOrderId == null) ? string.Empty : this.UpayOrderId.ToString(),
				(this.UpayPaymentCode == null) ? string.Empty : this.UpayPaymentCode.ToString(),
				(this.Auth == null) ? string.Empty : this.Auth.ToString(),
				(this.PostDate == null) ? string.Empty : this.PostDate.ToString(),
				(this.SafeNameRef == null) ? string.Empty : this.SafeNameRef.ToString(),
				(this.Result == null) ? string.Empty : this.Result.ToString(),
				(this.TrackId == null) ? string.Empty : this.TrackId.ToString(),
				(this.TranId == null) ? string.Empty : this.TranId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'INTEG_Payment_UPay' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class IntegPaymentUpayEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// INTEG_Payment_UPay_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "INTEG_Payment_UPay"</remarks>
		public System.Decimal IntegPaymentUpayId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// STUD_FACULTY_CODE : 
		/// </summary>
		public System.String		  StudFacultyCode = string.Empty;
		
		/// <summary>
		/// FEE_STUD_VOUCHER_ID : 
		/// </summary>
		public System.Decimal		  FeeStudVoucherId = 0.0m;
		
		/// <summary>
		/// IS_Paid : 
		/// </summary>
		public System.Int32		  IsPaid = (int)0;
		
		/// <summary>
		/// Payment_Method_ID : 
		/// </summary>
		public System.Decimal?		  PaymentMethodId = null;
		
		/// <summary>
		/// Amount : 
		/// </summary>
		public System.Decimal		  Amount = 0.0m;
		
		/// <summary>
		/// UPay_Order_Id : 
		/// </summary>
		public System.String		  UpayOrderId = null;
		
		/// <summary>
		/// UPay_Payment_Code : 
		/// </summary>
		public System.String		  UpayPaymentCode = null;
		
		/// <summary>
		/// Auth : 
		/// </summary>
		public System.String		  Auth = null;
		
		/// <summary>
		/// Post_Date : 
		/// </summary>
		public System.String		  PostDate = null;
		
		/// <summary>
		/// Ref : 
		/// </summary>
		public System.String		  SafeNameRef = null;
		
		/// <summary>
		/// Result : 
		/// </summary>
		public System.String		  Result = null;
		
		/// <summary>
		/// Track_ID : 
		/// </summary>
		public System.String		  TrackId = null;
		
		/// <summary>
		/// Tran_ID : 
		/// </summary>
		public System.String		  TranId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			IntegPaymentUpayEntityData _tmp = new IntegPaymentUpayEntityData();
						
			_tmp.IntegPaymentUpayId = this.IntegPaymentUpayId;
			
			_tmp.StudFacultyCode = this.StudFacultyCode;
			_tmp.FeeStudVoucherId = this.FeeStudVoucherId;
			_tmp.IsPaid = this.IsPaid;
			_tmp.PaymentMethodId = this.PaymentMethodId;
			_tmp.Amount = this.Amount;
			_tmp.UpayOrderId = this.UpayOrderId;
			_tmp.UpayPaymentCode = this.UpayPaymentCode;
			_tmp.Auth = this.Auth;
			_tmp.PostDate = this.PostDate;
			_tmp.SafeNameRef = this.SafeNameRef;
			_tmp.Result = this.Result;
			_tmp.TrackId = this.TrackId;
			_tmp.TranId = this.TranId;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			IntegPaymentUpayEntityData _tmp = new IntegPaymentUpayEntityData();
						
			_tmp.IntegPaymentUpayId = this.IntegPaymentUpayId;
			
			_tmp.StudFacultyCode = this.StudFacultyCode;
			_tmp.FeeStudVoucherId = this.FeeStudVoucherId;
			_tmp.IsPaid = this.IsPaid;
			_tmp.PaymentMethodId = this.PaymentMethodId;
			_tmp.Amount = this.Amount;
			_tmp.UpayOrderId = this.UpayOrderId;
			_tmp.UpayPaymentCode = this.UpayPaymentCode;
			_tmp.Auth = this.Auth;
			_tmp.PostDate = this.PostDate;
			_tmp.SafeNameRef = this.SafeNameRef;
			_tmp.Result = this.Result;
			_tmp.TrackId = this.TrackId;
			_tmp.TranId = this.TranId;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IntegPaymentUpayColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(IntegPaymentUpayColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IntegPaymentUpayColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(IntegPaymentUpayColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IntegPaymentUpayColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(IntegPaymentUpayColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				IntegPaymentUpayEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new IntegPaymentUpayEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IntegPaymentUpayColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(IntegPaymentUpayColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				IntegPaymentUpayEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new IntegPaymentUpayEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region IntegPaymentUpayEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="IntegPaymentUpay"/> object.
	/// </remarks>
	public class IntegPaymentUpayEventArgs : System.EventArgs
	{
		private IntegPaymentUpayColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the IntegPaymentUpayEventArgs class.
		///</summary>
		public IntegPaymentUpayEventArgs(IntegPaymentUpayColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the IntegPaymentUpayEventArgs class.
		///</summary>
		public IntegPaymentUpayEventArgs(IntegPaymentUpayColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The IntegPaymentUpayColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="IntegPaymentUpayColumn" />
		public IntegPaymentUpayColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all IntegPaymentUpay related events.
	///</summary>
	public delegate void IntegPaymentUpayEventHandler(object sender, IntegPaymentUpayEventArgs e);
	
	#region IntegPaymentUpayComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class IntegPaymentUpayComparer : System.Collections.Generic.IComparer<IntegPaymentUpay>
	{
		IntegPaymentUpayColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:IntegPaymentUpayComparer"/> class.
        /// </summary>
		public IntegPaymentUpayComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:IntegPaymentUpayComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public IntegPaymentUpayComparer(IntegPaymentUpayColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="IntegPaymentUpay"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="IntegPaymentUpay"/> to compare.</param>
        /// <param name="b">The second <c>IntegPaymentUpay</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(IntegPaymentUpay a, IntegPaymentUpay b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(IntegPaymentUpay entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(IntegPaymentUpay a, IntegPaymentUpay b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public IntegPaymentUpayColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region IntegPaymentUpayKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="IntegPaymentUpay"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class IntegPaymentUpayKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the IntegPaymentUpayKey class.
		/// </summary>
		public IntegPaymentUpayKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the IntegPaymentUpayKey class.
		/// </summary>
		public IntegPaymentUpayKey(IntegPaymentUpayBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.IntegPaymentUpayId = entity.IntegPaymentUpayId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the IntegPaymentUpayKey class.
		/// </summary>
		public IntegPaymentUpayKey(System.Decimal _integPaymentUpayId)
		{
			#region Init Properties

			this.IntegPaymentUpayId = _integPaymentUpayId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private IntegPaymentUpayBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public IntegPaymentUpayBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the IntegPaymentUpayId property
		private System.Decimal _integPaymentUpayId;
		
		/// <summary>
		/// Gets or sets the IntegPaymentUpayId property.
		/// </summary>
		public System.Decimal IntegPaymentUpayId
		{
			get { return _integPaymentUpayId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.IntegPaymentUpayId = value;
				
				_integPaymentUpayId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				IntegPaymentUpayId = ( values["IntegPaymentUpayId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["IntegPaymentUpayId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("IntegPaymentUpayId", IntegPaymentUpayId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("IntegPaymentUpayId: {0}{1}",
								IntegPaymentUpayId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region IntegPaymentUpayColumn Enum
	
	/// <summary>
	/// Enumerate the IntegPaymentUpay columns.
	/// </summary>
	[Serializable]
	public enum IntegPaymentUpayColumn : int
	{
		/// <summary>
		/// IntegPaymentUpayId : 
		/// </summary>
		[EnumTextValue("INTEG_Payment_UPay_ID")]
		[ColumnEnum("INTEG_Payment_UPay_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, true, false)]
		IntegPaymentUpayId = 1,
		/// <summary>
		/// StudFacultyCode : 
		/// </summary>
		[EnumTextValue("STUD_FACULTY_CODE")]
		[ColumnEnum("STUD_FACULTY_CODE", typeof(System.String), System.Data.DbType.String, false, false, false, 30)]
		StudFacultyCode = 2,
		/// <summary>
		/// FeeStudVoucherId : 
		/// </summary>
		[EnumTextValue("FEE_STUD_VOUCHER_ID")]
		[ColumnEnum("FEE_STUD_VOUCHER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		FeeStudVoucherId = 3,
		/// <summary>
		/// IsPaid : 
		/// </summary>
		[EnumTextValue("IS_Paid")]
		[ColumnEnum("IS_Paid", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		IsPaid = 4,
		/// <summary>
		/// PaymentMethodId : 
		/// </summary>
		[EnumTextValue("Payment_Method_ID")]
		[ColumnEnum("Payment_Method_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PaymentMethodId = 5,
		/// <summary>
		/// Amount : 
		/// </summary>
		[EnumTextValue("Amount")]
		[ColumnEnum("Amount", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		Amount = 6,
		/// <summary>
		/// UpayOrderId : 
		/// </summary>
		[EnumTextValue("UPay_Order_Id")]
		[ColumnEnum("UPay_Order_Id", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		UpayOrderId = 7,
		/// <summary>
		/// UpayPaymentCode : 
		/// </summary>
		[EnumTextValue("UPay_Payment_Code")]
		[ColumnEnum("UPay_Payment_Code", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		UpayPaymentCode = 8,
		/// <summary>
		/// Auth : 
		/// </summary>
		[EnumTextValue("Auth")]
		[ColumnEnum("Auth", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		Auth = 9,
		/// <summary>
		/// PostDate : 
		/// </summary>
		[EnumTextValue("Post_Date")]
		[ColumnEnum("Post_Date", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		PostDate = 10,
		/// <summary>
		/// SafeNameRef : 
		/// </summary>
		[EnumTextValue("Ref")]
		[ColumnEnum("Ref", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		SafeNameRef = 11,
		/// <summary>
		/// Result : 
		/// </summary>
		[EnumTextValue("Result")]
		[ColumnEnum("Result", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		Result = 12,
		/// <summary>
		/// TrackId : 
		/// </summary>
		[EnumTextValue("Track_ID")]
		[ColumnEnum("Track_ID", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		TrackId = 13,
		/// <summary>
		/// TranId : 
		/// </summary>
		[EnumTextValue("Tran_ID")]
		[ColumnEnum("Tran_ID", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		TranId = 14
	}//End enum

	#endregion IntegPaymentUpayColumn Enum

} // end namespace
