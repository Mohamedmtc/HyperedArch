
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdSemesterOpen.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_SEMESTER_OPEN' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdSemesterOpenBase : EntityBase, IEdSemesterOpen, IEntityId<EdSemesterOpenKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdSemesterOpenEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdSemesterOpenEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdSemesterOpenEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdSemesterOpen> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdSemesterOpenEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdSemesterOpenEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdSemesterOpenBase"/> instance.
		///</summary>
		public EdSemesterOpenBase()
		{
			this.entityData = new EdSemesterOpenEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdSemesterOpenBase"/> instance.
		///</summary>
		///<param name="_edSemesterOpenId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_fromDate"></param>
		///<param name="_toDate"></param>
		///<param name="_descrAr"></param>
		///<param name="_descrEn"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_edCodeSemesterTypeId"></param>
		///<param name="_entMainId"></param>
		///<param name="_isCurrent"></param>
		///<param name="_isClosed"></param>
		///<param name="_isAgendaClosed"></param>
		///<param name="_examFlg"></param>
		///<param name="_rsultFlg"></param>
		///<param name="_regMthdFlg">ERU</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_groupFlg"></param>
		///<param name="_noWeeks"></param>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_edCodeStudyMethodId"></param>
		///<param name="_edCodeLevelId"></param>
		public EdSemesterOpenBase(System.Decimal _edSemesterOpenId, System.Decimal _edAcadYearId, 
			System.DateTime _fromDate, System.DateTime _toDate, System.String _descrAr, 
			System.String _descrEn, System.Decimal _edCodeSemesterId, System.Decimal _edCodeSemesterTypeId, 
			System.Decimal _entMainId, System.Decimal _isCurrent, System.Decimal _isClosed, 
			System.Decimal _isAgendaClosed, System.Decimal? _examFlg, System.Decimal? _rsultFlg, 
			System.Int16? _regMthdFlg, System.Decimal? _seUserId, System.DateTime? _lastDate, 
			System.Decimal? _groupFlg, System.Decimal? _noWeeks, System.Decimal? _asCodeDegreeClassId, 
			System.Decimal? _edCodeStudyMethodId, System.Decimal? _edCodeLevelId)
		{
			this.entityData = new EdSemesterOpenEntityData();
			this.backupData = null;

			this.EdSemesterOpenId = _edSemesterOpenId;
			this.EdAcadYearId = _edAcadYearId;
			this.FromDate = _fromDate;
			this.ToDate = _toDate;
			this.DescrAr = _descrAr;
			this.DescrEn = _descrEn;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.EdCodeSemesterTypeId = _edCodeSemesterTypeId;
			this.EntMainId = _entMainId;
			this.IsCurrent = _isCurrent;
			this.IsClosed = _isClosed;
			this.IsAgendaClosed = _isAgendaClosed;
			this.ExamFlg = _examFlg;
			this.RsultFlg = _rsultFlg;
			this.RegMthdFlg = _regMthdFlg;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
			this.GroupFlg = _groupFlg;
			this.NoWeeks = _noWeeks;
			this.AsCodeDegreeClassId = _asCodeDegreeClassId;
			this.EdCodeStudyMethodId = _edCodeStudyMethodId;
			this.EdCodeLevelId = _edCodeLevelId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdSemesterOpen"/> instance.
		///</summary>
		///<param name="_edSemesterOpenId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_fromDate"></param>
		///<param name="_toDate"></param>
		///<param name="_descrAr"></param>
		///<param name="_descrEn"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_edCodeSemesterTypeId"></param>
		///<param name="_entMainId"></param>
		///<param name="_isCurrent"></param>
		///<param name="_isClosed"></param>
		///<param name="_isAgendaClosed"></param>
		///<param name="_examFlg"></param>
		///<param name="_rsultFlg"></param>
		///<param name="_regMthdFlg">ERU</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_groupFlg"></param>
		///<param name="_noWeeks"></param>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_edCodeStudyMethodId"></param>
		///<param name="_edCodeLevelId"></param>
		public static EdSemesterOpen CreateEdSemesterOpen(System.Decimal _edSemesterOpenId, System.Decimal _edAcadYearId, 
			System.DateTime _fromDate, System.DateTime _toDate, System.String _descrAr, 
			System.String _descrEn, System.Decimal _edCodeSemesterId, System.Decimal _edCodeSemesterTypeId, 
			System.Decimal _entMainId, System.Decimal _isCurrent, System.Decimal _isClosed, 
			System.Decimal _isAgendaClosed, System.Decimal? _examFlg, System.Decimal? _rsultFlg, 
			System.Int16? _regMthdFlg, System.Decimal? _seUserId, System.DateTime? _lastDate, 
			System.Decimal? _groupFlg, System.Decimal? _noWeeks, System.Decimal? _asCodeDegreeClassId, 
			System.Decimal? _edCodeStudyMethodId, System.Decimal? _edCodeLevelId)
		{
			EdSemesterOpen newEdSemesterOpen = new EdSemesterOpen();
			newEdSemesterOpen.EdSemesterOpenId = _edSemesterOpenId;
			newEdSemesterOpen.EdAcadYearId = _edAcadYearId;
			newEdSemesterOpen.FromDate = _fromDate;
			newEdSemesterOpen.ToDate = _toDate;
			newEdSemesterOpen.DescrAr = _descrAr;
			newEdSemesterOpen.DescrEn = _descrEn;
			newEdSemesterOpen.EdCodeSemesterId = _edCodeSemesterId;
			newEdSemesterOpen.EdCodeSemesterTypeId = _edCodeSemesterTypeId;
			newEdSemesterOpen.EntMainId = _entMainId;
			newEdSemesterOpen.IsCurrent = _isCurrent;
			newEdSemesterOpen.IsClosed = _isClosed;
			newEdSemesterOpen.IsAgendaClosed = _isAgendaClosed;
			newEdSemesterOpen.ExamFlg = _examFlg;
			newEdSemesterOpen.RsultFlg = _rsultFlg;
			newEdSemesterOpen.RegMthdFlg = _regMthdFlg;
			newEdSemesterOpen.SeUserId = _seUserId;
			newEdSemesterOpen.LastDate = _lastDate;
			newEdSemesterOpen.GroupFlg = _groupFlg;
			newEdSemesterOpen.NoWeeks = _noWeeks;
			newEdSemesterOpen.AsCodeDegreeClassId = _asCodeDegreeClassId;
			newEdSemesterOpen.EdCodeStudyMethodId = _edCodeStudyMethodId;
			newEdSemesterOpen.EdCodeLevelId = _edCodeLevelId;
			return newEdSemesterOpen;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdSemesterOpenId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdSemesterOpenId
		{
			get
			{
				return this.entityData.EdSemesterOpenId; 
			}
			
			set
			{
				if (this.entityData.EdSemesterOpenId == value)
					return;
					
				OnColumnChanging(EdSemesterOpenColumn.EdSemesterOpenId, this.entityData.EdSemesterOpenId);
				this.entityData.EdSemesterOpenId = value;
				this.EntityId.EdSemesterOpenId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterOpenColumn.EdSemesterOpenId, this.entityData.EdSemesterOpenId);
				OnPropertyChanged("EdSemesterOpenId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_SEMESTER_OPEN_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ED_SEMESTER_OPEN_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdSemesterOpenId
		{
			get { return this.entityData.OriginalEdSemesterOpenId; }
			set { this.entityData.OriginalEdSemesterOpenId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(EdSemesterOpenColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterOpenColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FromDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime FromDate
		{
			get
			{
				return this.entityData.FromDate; 
			}
			
			set
			{
				if (this.entityData.FromDate == value)
					return;
					
				OnColumnChanging(EdSemesterOpenColumn.FromDate, this.entityData.FromDate);
				this.entityData.FromDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterOpenColumn.FromDate, this.entityData.FromDate);
				OnPropertyChanged("FromDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ToDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ToDate
		{
			get
			{
				return this.entityData.ToDate; 
			}
			
			set
			{
				if (this.entityData.ToDate == value)
					return;
					
				OnColumnChanging(EdSemesterOpenColumn.ToDate, this.entityData.ToDate);
				this.entityData.ToDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterOpenColumn.ToDate, this.entityData.ToDate);
				OnPropertyChanged("ToDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescrAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String DescrAr
		{
			get
			{
				return this.entityData.DescrAr; 
			}
			
			set
			{
				if (this.entityData.DescrAr == value)
					return;
					
				OnColumnChanging(EdSemesterOpenColumn.DescrAr, this.entityData.DescrAr);
				this.entityData.DescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterOpenColumn.DescrAr, this.entityData.DescrAr);
				OnPropertyChanged("DescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String DescrEn
		{
			get
			{
				return this.entityData.DescrEn; 
			}
			
			set
			{
				if (this.entityData.DescrEn == value)
					return;
					
				OnColumnChanging(EdSemesterOpenColumn.DescrEn, this.entityData.DescrEn);
				this.entityData.DescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterOpenColumn.DescrEn, this.entityData.DescrEn);
				OnPropertyChanged("DescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(EdSemesterOpenColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterOpenColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeSemesterTypeId
		{
			get
			{
				return this.entityData.EdCodeSemesterTypeId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterTypeId == value)
					return;
					
				OnColumnChanging(EdSemesterOpenColumn.EdCodeSemesterTypeId, this.entityData.EdCodeSemesterTypeId);
				this.entityData.EdCodeSemesterTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterOpenColumn.EdCodeSemesterTypeId, this.entityData.EdCodeSemesterTypeId);
				OnPropertyChanged("EdCodeSemesterTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntMainId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EntMainId
		{
			get
			{
				return this.entityData.EntMainId; 
			}
			
			set
			{
				if (this.entityData.EntMainId == value)
					return;
					
				OnColumnChanging(EdSemesterOpenColumn.EntMainId, this.entityData.EntMainId);
				this.entityData.EntMainId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterOpenColumn.EntMainId, this.entityData.EntMainId);
				OnPropertyChanged("EntMainId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsCurrent property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsCurrent
		{
			get
			{
				return this.entityData.IsCurrent; 
			}
			
			set
			{
				if (this.entityData.IsCurrent == value)
					return;
					
				OnColumnChanging(EdSemesterOpenColumn.IsCurrent, this.entityData.IsCurrent);
				this.entityData.IsCurrent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterOpenColumn.IsCurrent, this.entityData.IsCurrent);
				OnPropertyChanged("IsCurrent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsClosed property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsClosed
		{
			get
			{
				return this.entityData.IsClosed; 
			}
			
			set
			{
				if (this.entityData.IsClosed == value)
					return;
					
				OnColumnChanging(EdSemesterOpenColumn.IsClosed, this.entityData.IsClosed);
				this.entityData.IsClosed = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterOpenColumn.IsClosed, this.entityData.IsClosed);
				OnPropertyChanged("IsClosed");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsAgendaClosed property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsAgendaClosed
		{
			get
			{
				return this.entityData.IsAgendaClosed; 
			}
			
			set
			{
				if (this.entityData.IsAgendaClosed == value)
					return;
					
				OnColumnChanging(EdSemesterOpenColumn.IsAgendaClosed, this.entityData.IsAgendaClosed);
				this.entityData.IsAgendaClosed = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterOpenColumn.IsAgendaClosed, this.entityData.IsAgendaClosed);
				OnPropertyChanged("IsAgendaClosed");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExamFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsExamFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ExamFlg
		{
			get
			{
				return this.entityData.ExamFlg; 
			}
			
			set
			{
				if (this.entityData.ExamFlg == value)
					return;
					
				OnColumnChanging(EdSemesterOpenColumn.ExamFlg, this.entityData.ExamFlg);
				this.entityData.ExamFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterOpenColumn.ExamFlg, this.entityData.ExamFlg);
				OnPropertyChanged("ExamFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RsultFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRsultFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RsultFlg
		{
			get
			{
				return this.entityData.RsultFlg; 
			}
			
			set
			{
				if (this.entityData.RsultFlg == value)
					return;
					
				OnColumnChanging(EdSemesterOpenColumn.RsultFlg, this.entityData.RsultFlg);
				this.entityData.RsultFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterOpenColumn.RsultFlg, this.entityData.RsultFlg);
				OnPropertyChanged("RsultFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RegMthdFlg property. 
		///		ERU
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsRegMthdFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"ERU"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? RegMthdFlg
		{
			get
			{
				return this.entityData.RegMthdFlg; 
			}
			
			set
			{
				if (this.entityData.RegMthdFlg == value)
					return;
					
				OnColumnChanging(EdSemesterOpenColumn.RegMthdFlg, this.entityData.RegMthdFlg);
				this.entityData.RegMthdFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterOpenColumn.RegMthdFlg, this.entityData.RegMthdFlg);
				OnPropertyChanged("RegMthdFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(EdSemesterOpenColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterOpenColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(EdSemesterOpenColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterOpenColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GroupFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGroupFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GroupFlg
		{
			get
			{
				return this.entityData.GroupFlg; 
			}
			
			set
			{
				if (this.entityData.GroupFlg == value)
					return;
					
				OnColumnChanging(EdSemesterOpenColumn.GroupFlg, this.entityData.GroupFlg);
				this.entityData.GroupFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterOpenColumn.GroupFlg, this.entityData.GroupFlg);
				OnPropertyChanged("GroupFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NoWeeks property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsNoWeeksNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? NoWeeks
		{
			get
			{
				return this.entityData.NoWeeks; 
			}
			
			set
			{
				if (this.entityData.NoWeeks == value)
					return;
					
				OnColumnChanging(EdSemesterOpenColumn.NoWeeks, this.entityData.NoWeeks);
				this.entityData.NoWeeks = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterOpenColumn.NoWeeks, this.entityData.NoWeeks);
				OnPropertyChanged("NoWeeks");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeClassId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeClassIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeClassId
		{
			get
			{
				return this.entityData.AsCodeDegreeClassId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeClassId == value)
					return;
					
				OnColumnChanging(EdSemesterOpenColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				this.entityData.AsCodeDegreeClassId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterOpenColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				OnPropertyChanged("AsCodeDegreeClassId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeStudyMethodId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeStudyMethodIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeStudyMethodId
		{
			get
			{
				return this.entityData.EdCodeStudyMethodId; 
			}
			
			set
			{
				if (this.entityData.EdCodeStudyMethodId == value)
					return;
					
				OnColumnChanging(EdSemesterOpenColumn.EdCodeStudyMethodId, this.entityData.EdCodeStudyMethodId);
				this.entityData.EdCodeStudyMethodId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterOpenColumn.EdCodeStudyMethodId, this.entityData.EdCodeStudyMethodId);
				OnPropertyChanged("EdCodeStudyMethodId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeLevelId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeLevelIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeLevelId
		{
			get
			{
				return this.entityData.EdCodeLevelId; 
			}
			
			set
			{
				if (this.entityData.EdCodeLevelId == value)
					return;
					
				OnColumnChanging(EdSemesterOpenColumn.EdCodeLevelId, this.entityData.EdCodeLevelId);
				this.entityData.EdCodeLevelId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdSemesterOpenColumn.EdCodeLevelId, this.entityData.EdCodeLevelId);
				OnPropertyChanged("EdCodeLevelId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return entityData.AsCodeDegreeClassIdSource; }
            set { entityData.AsCodeDegreeClassIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeLevel EdCodeLevelIdSource
      	{
            get { return entityData.EdCodeLevelIdSource; }
            set { entityData.EdCodeLevelIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemesterType"/>.
		/// </summary>
		/// <value>The source EdCodeSemesterType for EdCodeSemesterTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemesterType EdCodeSemesterTypeIdSource
      	{
            get { return entityData.EdCodeSemesterTypeIdSource; }
            set { entityData.EdCodeSemesterTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeStudyMethod"/>.
		/// </summary>
		/// <value>The source EdCodeStudyMethod for EdCodeStudyMethodId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeStudyMethod EdCodeStudyMethodIdSource
      	{
            get { return entityData.EdCodeStudyMethodIdSource; }
            set { entityData.EdCodeStudyMethodIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return entityData.EntMainIdSource; }
            set { entityData.EntMainIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EdSemesterAgenda objects
		///	which are related to this object through the relation FK_ED_SEMESTER_AGENDA_ED_SEMESTER_OPEN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdSemesterAgenda> EdSemesterAgendaCollection
		{
			get { return entityData.EdSemesterAgendaCollection; }
			set { entityData.EdSemesterAgendaCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DescrAr", "Descr Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrAr", "Descr Ar", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DescrEn", "Descr En"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrEn", "Descr En", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_SEMESTER_OPEN"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_SEMESTER_OPEN_ID", "ED_ACAD_YEAR_ID", "FROM_DATE", "TO_DATE", "DESCR_AR", "DESCR_EN", "ED_CODE_SEMESTER_ID", "ED_CODE_SEMESTER_TYPE_ID", "ENT_MAIN_ID", "IS_CURRENT", "IS_CLOSED", "IS_AGENDA_CLOSED", "EXAM_FLG", "RSULT_FLG", "REG_MTHD_FLG", "SE_USER_ID", "LAST_DATE", "GROUP_FLG", "NO_WEEKS", "AS_CODE_DEGREE_CLASS_ID", "ED_CODE_STUDY_METHOD_ID", "ED_CODE_LEVEL_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdSemesterOpenEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdSemesterOpen) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdSemesterOpen>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdSemesterOpen);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdSemesterOpen Entity 
		///</summary>
		protected virtual EdSemesterOpen Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdSemesterOpen copy = new EdSemesterOpen();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdSemesterOpenId = this.EdSemesterOpenId;
					copy.OriginalEdSemesterOpenId = this.OriginalEdSemesterOpenId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.FromDate = this.FromDate;
				copy.ToDate = this.ToDate;
				copy.DescrAr = this.DescrAr;
				copy.DescrEn = this.DescrEn;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.EdCodeSemesterTypeId = this.EdCodeSemesterTypeId;
				copy.EntMainId = this.EntMainId;
				copy.IsCurrent = this.IsCurrent;
				copy.IsClosed = this.IsClosed;
				copy.IsAgendaClosed = this.IsAgendaClosed;
				copy.ExamFlg = this.ExamFlg;
				copy.RsultFlg = this.RsultFlg;
				copy.RegMthdFlg = this.RegMthdFlg;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
				copy.GroupFlg = this.GroupFlg;
				copy.NoWeeks = this.NoWeeks;
				copy.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
				copy.EdCodeStudyMethodId = this.EdCodeStudyMethodId;
				copy.EdCodeLevelId = this.EdCodeLevelId;
			
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				copy.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				copy.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeLevelIdSource != null && existingCopies.Contains(this.EdCodeLevelIdSource))
				copy.EdCodeLevelIdSource = existingCopies[this.EdCodeLevelIdSource] as EdCodeLevel;
			else
				copy.EdCodeLevelIdSource = MakeCopyOf(this.EdCodeLevelIdSource, existingCopies) as EdCodeLevel;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCodeSemesterTypeIdSource != null && existingCopies.Contains(this.EdCodeSemesterTypeIdSource))
				copy.EdCodeSemesterTypeIdSource = existingCopies[this.EdCodeSemesterTypeIdSource] as EdCodeSemesterType;
			else
				copy.EdCodeSemesterTypeIdSource = MakeCopyOf(this.EdCodeSemesterTypeIdSource, existingCopies) as EdCodeSemesterType;
			if (this.EdCodeStudyMethodIdSource != null && existingCopies.Contains(this.EdCodeStudyMethodIdSource))
				copy.EdCodeStudyMethodIdSource = existingCopies[this.EdCodeStudyMethodIdSource] as EdCodeStudyMethod;
			else
				copy.EdCodeStudyMethodIdSource = MakeCopyOf(this.EdCodeStudyMethodIdSource, existingCopies) as EdCodeStudyMethod;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				copy.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				copy.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
		
			//deep copy nested objects
			copy.EdSemesterAgendaCollection = (TList<EdSemesterAgenda>) MakeCopyOf(this.EdSemesterAgendaCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdSemesterOpen Entity 
		///</summary>
		public virtual EdSemesterOpen Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdSemesterOpen Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdSemesterOpen DeepCopy()
		{
			return EntityHelper.Clone<EdSemesterOpen>(this as EdSemesterOpen);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdSemesterOpenEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdSemesterOpenEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdSemesterOpenEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdSemesterOpenColumn column)
		{
			switch(column)
			{
					case EdSemesterOpenColumn.EdSemesterOpenId:
					return entityData.EdSemesterOpenId != _originalData.EdSemesterOpenId;
					case EdSemesterOpenColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case EdSemesterOpenColumn.FromDate:
					return entityData.FromDate != _originalData.FromDate;
					case EdSemesterOpenColumn.ToDate:
					return entityData.ToDate != _originalData.ToDate;
					case EdSemesterOpenColumn.DescrAr:
					return entityData.DescrAr != _originalData.DescrAr;
					case EdSemesterOpenColumn.DescrEn:
					return entityData.DescrEn != _originalData.DescrEn;
					case EdSemesterOpenColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case EdSemesterOpenColumn.EdCodeSemesterTypeId:
					return entityData.EdCodeSemesterTypeId != _originalData.EdCodeSemesterTypeId;
					case EdSemesterOpenColumn.EntMainId:
					return entityData.EntMainId != _originalData.EntMainId;
					case EdSemesterOpenColumn.IsCurrent:
					return entityData.IsCurrent != _originalData.IsCurrent;
					case EdSemesterOpenColumn.IsClosed:
					return entityData.IsClosed != _originalData.IsClosed;
					case EdSemesterOpenColumn.IsAgendaClosed:
					return entityData.IsAgendaClosed != _originalData.IsAgendaClosed;
					case EdSemesterOpenColumn.ExamFlg:
					return entityData.ExamFlg != _originalData.ExamFlg;
					case EdSemesterOpenColumn.RsultFlg:
					return entityData.RsultFlg != _originalData.RsultFlg;
					case EdSemesterOpenColumn.RegMthdFlg:
					return entityData.RegMthdFlg != _originalData.RegMthdFlg;
					case EdSemesterOpenColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case EdSemesterOpenColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case EdSemesterOpenColumn.GroupFlg:
					return entityData.GroupFlg != _originalData.GroupFlg;
					case EdSemesterOpenColumn.NoWeeks:
					return entityData.NoWeeks != _originalData.NoWeeks;
					case EdSemesterOpenColumn.AsCodeDegreeClassId:
					return entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
					case EdSemesterOpenColumn.EdCodeStudyMethodId:
					return entityData.EdCodeStudyMethodId != _originalData.EdCodeStudyMethodId;
					case EdSemesterOpenColumn.EdCodeLevelId:
					return entityData.EdCodeLevelId != _originalData.EdCodeLevelId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdSemesterOpenColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdSemesterOpenId != _originalData.EdSemesterOpenId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.FromDate != _originalData.FromDate;
			result = result || entityData.ToDate != _originalData.ToDate;
			result = result || entityData.DescrAr != _originalData.DescrAr;
			result = result || entityData.DescrEn != _originalData.DescrEn;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.EdCodeSemesterTypeId != _originalData.EdCodeSemesterTypeId;
			result = result || entityData.EntMainId != _originalData.EntMainId;
			result = result || entityData.IsCurrent != _originalData.IsCurrent;
			result = result || entityData.IsClosed != _originalData.IsClosed;
			result = result || entityData.IsAgendaClosed != _originalData.IsAgendaClosed;
			result = result || entityData.ExamFlg != _originalData.ExamFlg;
			result = result || entityData.RsultFlg != _originalData.RsultFlg;
			result = result || entityData.RegMthdFlg != _originalData.RegMthdFlg;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.GroupFlg != _originalData.GroupFlg;
			result = result || entityData.NoWeeks != _originalData.NoWeeks;
			result = result || entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
			result = result || entityData.EdCodeStudyMethodId != _originalData.EdCodeStudyMethodId;
			result = result || entityData.EdCodeLevelId != _originalData.EdCodeLevelId;
			return result;
		}	
		
		///<summary>
		///  Returns a EdSemesterOpen Entity with the original data.
		///</summary>
		public EdSemesterOpen GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdSemesterOpen(
				_originalData.EdSemesterOpenId,
				_originalData.EdAcadYearId,
				_originalData.FromDate,
				_originalData.ToDate,
				_originalData.DescrAr,
				_originalData.DescrEn,
				_originalData.EdCodeSemesterId,
				_originalData.EdCodeSemesterTypeId,
				_originalData.EntMainId,
				_originalData.IsCurrent,
				_originalData.IsClosed,
				_originalData.IsAgendaClosed,
				_originalData.ExamFlg,
				_originalData.RsultFlg,
				_originalData.RegMthdFlg,
				_originalData.SeUserId,
				_originalData.LastDate,
				_originalData.GroupFlg,
				_originalData.NoWeeks,
				_originalData.AsCodeDegreeClassId,
				_originalData.EdCodeStudyMethodId,
				_originalData.EdCodeLevelId
				);
				
			return (EdSemesterOpen)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdSemesterOpenBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdSemesterOpenBase)
				return ValueEquals(this, (EdSemesterOpenBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdSemesterOpenBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdSemesterOpenId.GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					this.FromDate.GetHashCode() ^ 
					this.ToDate.GetHashCode() ^ 
					this.DescrAr.GetHashCode() ^ 
					this.DescrEn.GetHashCode() ^ 
					this.EdCodeSemesterId.GetHashCode() ^ 
					this.EdCodeSemesterTypeId.GetHashCode() ^ 
					this.EntMainId.GetHashCode() ^ 
					this.IsCurrent.GetHashCode() ^ 
					this.IsClosed.GetHashCode() ^ 
					this.IsAgendaClosed.GetHashCode() ^ 
					((this.ExamFlg == null) ? string.Empty : this.ExamFlg.ToString()).GetHashCode() ^ 
					((this.RsultFlg == null) ? string.Empty : this.RsultFlg.ToString()).GetHashCode() ^ 
					((this.RegMthdFlg == null) ? string.Empty : this.RegMthdFlg.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.GroupFlg == null) ? string.Empty : this.GroupFlg.ToString()).GetHashCode() ^ 
					((this.NoWeeks == null) ? string.Empty : this.NoWeeks.ToString()).GetHashCode() ^ 
					((this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString()).GetHashCode() ^ 
					((this.EdCodeStudyMethodId == null) ? string.Empty : this.EdCodeStudyMethodId.ToString()).GetHashCode() ^ 
					((this.EdCodeLevelId == null) ? string.Empty : this.EdCodeLevelId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdSemesterOpenBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdSemesterOpenBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdSemesterOpenBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdSemesterOpenBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdSemesterOpenBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdSemesterOpenBase Object1, EdSemesterOpenBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdSemesterOpenId != Object2.EdSemesterOpenId)
				equal = false;
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if (Object1.FromDate != Object2.FromDate)
				equal = false;
			if (Object1.ToDate != Object2.ToDate)
				equal = false;
			if (Object1.DescrAr != Object2.DescrAr)
				equal = false;
			if (Object1.DescrEn != Object2.DescrEn)
				equal = false;
			if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
				equal = false;
			if (Object1.EdCodeSemesterTypeId != Object2.EdCodeSemesterTypeId)
				equal = false;
			if (Object1.EntMainId != Object2.EntMainId)
				equal = false;
			if (Object1.IsCurrent != Object2.IsCurrent)
				equal = false;
			if (Object1.IsClosed != Object2.IsClosed)
				equal = false;
			if (Object1.IsAgendaClosed != Object2.IsAgendaClosed)
				equal = false;
			if ( Object1.ExamFlg != null && Object2.ExamFlg != null )
			{
				if (Object1.ExamFlg != Object2.ExamFlg)
					equal = false;
			}
			else if (Object1.ExamFlg == null ^ Object2.ExamFlg == null )
			{
				equal = false;
			}
			if ( Object1.RsultFlg != null && Object2.RsultFlg != null )
			{
				if (Object1.RsultFlg != Object2.RsultFlg)
					equal = false;
			}
			else if (Object1.RsultFlg == null ^ Object2.RsultFlg == null )
			{
				equal = false;
			}
			if ( Object1.RegMthdFlg != null && Object2.RegMthdFlg != null )
			{
				if (Object1.RegMthdFlg != Object2.RegMthdFlg)
					equal = false;
			}
			else if (Object1.RegMthdFlg == null ^ Object2.RegMthdFlg == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.GroupFlg != null && Object2.GroupFlg != null )
			{
				if (Object1.GroupFlg != Object2.GroupFlg)
					equal = false;
			}
			else if (Object1.GroupFlg == null ^ Object2.GroupFlg == null )
			{
				equal = false;
			}
			if ( Object1.NoWeeks != null && Object2.NoWeeks != null )
			{
				if (Object1.NoWeeks != Object2.NoWeeks)
					equal = false;
			}
			else if (Object1.NoWeeks == null ^ Object2.NoWeeks == null )
			{
				equal = false;
			}
			if ( Object1.AsCodeDegreeClassId != null && Object2.AsCodeDegreeClassId != null )
			{
				if (Object1.AsCodeDegreeClassId != Object2.AsCodeDegreeClassId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeClassId == null ^ Object2.AsCodeDegreeClassId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeStudyMethodId != null && Object2.EdCodeStudyMethodId != null )
			{
				if (Object1.EdCodeStudyMethodId != Object2.EdCodeStudyMethodId)
					equal = false;
			}
			else if (Object1.EdCodeStudyMethodId == null ^ Object2.EdCodeStudyMethodId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeLevelId != null && Object2.EdCodeLevelId != null )
			{
				if (Object1.EdCodeLevelId != Object2.EdCodeLevelId)
					equal = false;
			}
			else if (Object1.EdCodeLevelId == null ^ Object2.EdCodeLevelId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdSemesterOpenBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdSemesterOpenComparer GetComparer()
        {
            return new EdSemesterOpenComparer();
        }
        */

        // Comparer delegates back to EdSemesterOpen
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdSemesterOpen rhs, EdSemesterOpenColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdSemesterOpenColumn.EdSemesterOpenId:
            		return this.EdSemesterOpenId.CompareTo(rhs.EdSemesterOpenId);
            		
            		                 
            	
            	
            	case EdSemesterOpenColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case EdSemesterOpenColumn.FromDate:
            		return this.FromDate.CompareTo(rhs.FromDate);
            		
            		                 
            	
            	
            	case EdSemesterOpenColumn.ToDate:
            		return this.ToDate.CompareTo(rhs.ToDate);
            		
            		                 
            	
            	
            	case EdSemesterOpenColumn.DescrAr:
            		return this.DescrAr.CompareTo(rhs.DescrAr);
            		
            		                 
            	
            	
            	case EdSemesterOpenColumn.DescrEn:
            		return this.DescrEn.CompareTo(rhs.DescrEn);
            		
            		                 
            	
            	
            	case EdSemesterOpenColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.CompareTo(rhs.EdCodeSemesterId);
            		
            		                 
            	
            	
            	case EdSemesterOpenColumn.EdCodeSemesterTypeId:
            		return this.EdCodeSemesterTypeId.CompareTo(rhs.EdCodeSemesterTypeId);
            		
            		                 
            	
            	
            	case EdSemesterOpenColumn.EntMainId:
            		return this.EntMainId.CompareTo(rhs.EntMainId);
            		
            		                 
            	
            	
            	case EdSemesterOpenColumn.IsCurrent:
            		return this.IsCurrent.CompareTo(rhs.IsCurrent);
            		
            		                 
            	
            	
            	case EdSemesterOpenColumn.IsClosed:
            		return this.IsClosed.CompareTo(rhs.IsClosed);
            		
            		                 
            	
            	
            	case EdSemesterOpenColumn.IsAgendaClosed:
            		return this.IsAgendaClosed.CompareTo(rhs.IsAgendaClosed);
            		
            		                 
            	
            	
            	case EdSemesterOpenColumn.ExamFlg:
            		return this.ExamFlg.Value.CompareTo(rhs.ExamFlg.Value);
            		
            		                 
            	
            	
            	case EdSemesterOpenColumn.RsultFlg:
            		return this.RsultFlg.Value.CompareTo(rhs.RsultFlg.Value);
            		
            		                 
            	
            	
            	case EdSemesterOpenColumn.RegMthdFlg:
            		return this.RegMthdFlg.Value.CompareTo(rhs.RegMthdFlg.Value);
            		
            		                 
            	
            	
            	case EdSemesterOpenColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case EdSemesterOpenColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case EdSemesterOpenColumn.GroupFlg:
            		return this.GroupFlg.Value.CompareTo(rhs.GroupFlg.Value);
            		
            		                 
            	
            	
            	case EdSemesterOpenColumn.NoWeeks:
            		return this.NoWeeks.Value.CompareTo(rhs.NoWeeks.Value);
            		
            		                 
            	
            	
            	case EdSemesterOpenColumn.AsCodeDegreeClassId:
            		return this.AsCodeDegreeClassId.Value.CompareTo(rhs.AsCodeDegreeClassId.Value);
            		
            		                 
            	
            	
            	case EdSemesterOpenColumn.EdCodeStudyMethodId:
            		return this.EdCodeStudyMethodId.Value.CompareTo(rhs.EdCodeStudyMethodId.Value);
            		
            		                 
            	
            	
            	case EdSemesterOpenColumn.EdCodeLevelId:
            		return this.EdCodeLevelId.Value.CompareTo(rhs.EdCodeLevelId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdSemesterOpenKey> Members
		
		// member variable for the EntityId property
		private EdSemesterOpenKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdSemesterOpenKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdSemesterOpenKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdSemesterOpen")
					.Append("|").Append( this.EdSemesterOpenId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{23}{22}- EdSemesterOpenId: {0}{22}- EdAcadYearId: {1}{22}- FromDate: {2}{22}- ToDate: {3}{22}- DescrAr: {4}{22}- DescrEn: {5}{22}- EdCodeSemesterId: {6}{22}- EdCodeSemesterTypeId: {7}{22}- EntMainId: {8}{22}- IsCurrent: {9}{22}- IsClosed: {10}{22}- IsAgendaClosed: {11}{22}- ExamFlg: {12}{22}- RsultFlg: {13}{22}- RegMthdFlg: {14}{22}- SeUserId: {15}{22}- LastDate: {16}{22}- GroupFlg: {17}{22}- NoWeeks: {18}{22}- AsCodeDegreeClassId: {19}{22}- EdCodeStudyMethodId: {20}{22}- EdCodeLevelId: {21}{22}{24}", 
				this.EdSemesterOpenId,
				this.EdAcadYearId,
				this.FromDate,
				this.ToDate,
				this.DescrAr,
				this.DescrEn,
				this.EdCodeSemesterId,
				this.EdCodeSemesterTypeId,
				this.EntMainId,
				this.IsCurrent,
				this.IsClosed,
				this.IsAgendaClosed,
				(this.ExamFlg == null) ? string.Empty : this.ExamFlg.ToString(),
				(this.RsultFlg == null) ? string.Empty : this.RsultFlg.ToString(),
				(this.RegMthdFlg == null) ? string.Empty : this.RegMthdFlg.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.GroupFlg == null) ? string.Empty : this.GroupFlg.ToString(),
				(this.NoWeeks == null) ? string.Empty : this.NoWeeks.ToString(),
				(this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString(),
				(this.EdCodeStudyMethodId == null) ? string.Empty : this.EdCodeStudyMethodId.ToString(),
				(this.EdCodeLevelId == null) ? string.Empty : this.EdCodeLevelId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_SEMESTER_OPEN' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdSemesterOpenEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_SEMESTER_OPEN_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_SEMESTER_OPEN"</remarks>
		public System.Decimal EdSemesterOpenId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdSemesterOpenId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// FROM_DATE : 
		/// </summary>
		public System.DateTime		  FromDate = DateTime.MinValue;
		
		/// <summary>
		/// TO_DATE : 
		/// </summary>
		public System.DateTime		  ToDate = DateTime.MinValue;
		
		/// <summary>
		/// DESCR_AR : 
		/// </summary>
		public System.String		  DescrAr = string.Empty;
		
		/// <summary>
		/// DESCR_EN : 
		/// </summary>
		public System.String		  DescrEn = string.Empty;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : 
		/// </summary>
		public System.Decimal		  EdCodeSemesterId = 0.0m;
		
		/// <summary>
		/// ED_CODE_SEMESTER_TYPE_ID : 
		/// </summary>
		public System.Decimal		  EdCodeSemesterTypeId = 0.0m;
		
		/// <summary>
		/// ENT_MAIN_ID : 
		/// </summary>
		public System.Decimal		  EntMainId = 0.0m;
		
		/// <summary>
		/// IS_CURRENT : 
		/// </summary>
		public System.Decimal		  IsCurrent = 0.0m;
		
		/// <summary>
		/// IS_CLOSED : 
		/// </summary>
		public System.Decimal		  IsClosed = 0.0m;
		
		/// <summary>
		/// IS_AGENDA_CLOSED : 
		/// </summary>
		public System.Decimal		  IsAgendaClosed = 0.0m;
		
		/// <summary>
		/// EXAM_FLG : 
		/// </summary>
		public System.Decimal?		  ExamFlg = null;
		
		/// <summary>
		/// RSULT_FLG : 
		/// </summary>
		public System.Decimal?		  RsultFlg = null;
		
		/// <summary>
		/// REG_MTHD_FLG : ERU
		/// </summary>
		public System.Int16?		  RegMthdFlg = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// GROUP_FLG : 
		/// </summary>
		public System.Decimal?		  GroupFlg = null;
		
		/// <summary>
		/// NO_WEEKS : 
		/// </summary>
		public System.Decimal?		  NoWeeks = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_CLASS_ID : 
		/// </summary>
		public System.Decimal?		  AsCodeDegreeClassId = null;
		
		/// <summary>
		/// ED_CODE_STUDY_METHOD_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeStudyMethodId = null;
		
		/// <summary>
		/// ED_CODE_LEVEL_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeLevelId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsCodeDegreeClass _asCodeDegreeClassIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return this._asCodeDegreeClassIdSource; }
            set { this._asCodeDegreeClassIdSource = value; }
      	}
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCodeLevel _edCodeLevelIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeLevel EdCodeLevelIdSource
      	{
            get { return this._edCodeLevelIdSource; }
            set { this._edCodeLevelIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private EdCodeSemesterType _edCodeSemesterTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemesterType"/>.
		/// </summary>
		/// <value>The source EdCodeSemesterType for EdCodeSemesterTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemesterType EdCodeSemesterTypeIdSource
      	{
            get { return this._edCodeSemesterTypeIdSource; }
            set { this._edCodeSemesterTypeIdSource = value; }
      	}
		private EdCodeStudyMethod _edCodeStudyMethodIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeStudyMethod"/>.
		/// </summary>
		/// <value>The source EdCodeStudyMethod for EdCodeStudyMethodId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeStudyMethod EdCodeStudyMethodIdSource
      	{
            get { return this._edCodeStudyMethodIdSource; }
            set { this._edCodeStudyMethodIdSource = value; }
      	}
		private EntityMain _entMainIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return this._entMainIdSource; }
            set { this._entMainIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EdSemesterAgendaCollection
		
		private TList<EdSemesterAgenda> _edSemesterAgendaEdSemesterOpenId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edSemesterAgendaEdSemesterOpenId
		/// </summary>
		
		public TList<EdSemesterAgenda> EdSemesterAgendaCollection
		{
			get
			{
				if (_edSemesterAgendaEdSemesterOpenId == null)
				{
				_edSemesterAgendaEdSemesterOpenId = new TList<EdSemesterAgenda>();
				}
	
				return _edSemesterAgendaEdSemesterOpenId;
			}
			set { _edSemesterAgendaEdSemesterOpenId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdSemesterOpenEntityData _tmp = new EdSemesterOpenEntityData();
						
			_tmp.EdSemesterOpenId = this.EdSemesterOpenId;
			_tmp.OriginalEdSemesterOpenId = this.OriginalEdSemesterOpenId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.FromDate = this.FromDate;
			_tmp.ToDate = this.ToDate;
			_tmp.DescrAr = this.DescrAr;
			_tmp.DescrEn = this.DescrEn;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdCodeSemesterTypeId = this.EdCodeSemesterTypeId;
			_tmp.EntMainId = this.EntMainId;
			_tmp.IsCurrent = this.IsCurrent;
			_tmp.IsClosed = this.IsClosed;
			_tmp.IsAgendaClosed = this.IsAgendaClosed;
			_tmp.ExamFlg = this.ExamFlg;
			_tmp.RsultFlg = this.RsultFlg;
			_tmp.RegMthdFlg = this.RegMthdFlg;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.GroupFlg = this.GroupFlg;
			_tmp.NoWeeks = this.NoWeeks;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.EdCodeStudyMethodId = this.EdCodeStudyMethodId;
			_tmp.EdCodeLevelId = this.EdCodeLevelId;
			
			#region Source Parent Composite Entities
			if (this.AsCodeDegreeClassIdSource != null)
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource) as AsCodeDegreeClass;
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCodeLevelIdSource != null)
				_tmp.EdCodeLevelIdSource = MakeCopyOf(this.EdCodeLevelIdSource) as EdCodeLevel;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.EdCodeSemesterTypeIdSource != null)
				_tmp.EdCodeSemesterTypeIdSource = MakeCopyOf(this.EdCodeSemesterTypeIdSource) as EdCodeSemesterType;
			if (this.EdCodeStudyMethodIdSource != null)
				_tmp.EdCodeStudyMethodIdSource = MakeCopyOf(this.EdCodeStudyMethodIdSource) as EdCodeStudyMethod;
			if (this.EntMainIdSource != null)
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource) as EntityMain;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._edSemesterAgendaEdSemesterOpenId != null)
				_tmp.EdSemesterAgendaCollection = (TList<EdSemesterAgenda>) MakeCopyOf(this.EdSemesterAgendaCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdSemesterOpenEntityData _tmp = new EdSemesterOpenEntityData();
						
			_tmp.EdSemesterOpenId = this.EdSemesterOpenId;
			_tmp.OriginalEdSemesterOpenId = this.OriginalEdSemesterOpenId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.FromDate = this.FromDate;
			_tmp.ToDate = this.ToDate;
			_tmp.DescrAr = this.DescrAr;
			_tmp.DescrEn = this.DescrEn;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdCodeSemesterTypeId = this.EdCodeSemesterTypeId;
			_tmp.EntMainId = this.EntMainId;
			_tmp.IsCurrent = this.IsCurrent;
			_tmp.IsClosed = this.IsClosed;
			_tmp.IsAgendaClosed = this.IsAgendaClosed;
			_tmp.ExamFlg = this.ExamFlg;
			_tmp.RsultFlg = this.RsultFlg;
			_tmp.RegMthdFlg = this.RegMthdFlg;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.GroupFlg = this.GroupFlg;
			_tmp.NoWeeks = this.NoWeeks;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.EdCodeStudyMethodId = this.EdCodeStudyMethodId;
			_tmp.EdCodeLevelId = this.EdCodeLevelId;
			
			#region Source Parent Composite Entities
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				_tmp.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeLevelIdSource != null && existingCopies.Contains(this.EdCodeLevelIdSource))
				_tmp.EdCodeLevelIdSource = existingCopies[this.EdCodeLevelIdSource] as EdCodeLevel;
			else
				_tmp.EdCodeLevelIdSource = MakeCopyOf(this.EdCodeLevelIdSource, existingCopies) as EdCodeLevel;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCodeSemesterTypeIdSource != null && existingCopies.Contains(this.EdCodeSemesterTypeIdSource))
				_tmp.EdCodeSemesterTypeIdSource = existingCopies[this.EdCodeSemesterTypeIdSource] as EdCodeSemesterType;
			else
				_tmp.EdCodeSemesterTypeIdSource = MakeCopyOf(this.EdCodeSemesterTypeIdSource, existingCopies) as EdCodeSemesterType;
			if (this.EdCodeStudyMethodIdSource != null && existingCopies.Contains(this.EdCodeStudyMethodIdSource))
				_tmp.EdCodeStudyMethodIdSource = existingCopies[this.EdCodeStudyMethodIdSource] as EdCodeStudyMethod;
			else
				_tmp.EdCodeStudyMethodIdSource = MakeCopyOf(this.EdCodeStudyMethodIdSource, existingCopies) as EdCodeStudyMethod;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				_tmp.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EdSemesterAgendaCollection = (TList<EdSemesterAgenda>) MakeCopyOf(this.EdSemesterAgendaCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdSemesterOpenColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdSemesterOpenColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdSemesterOpenColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdSemesterOpenColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdSemesterOpenColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdSemesterOpenColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdSemesterOpenEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdSemesterOpenEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdSemesterOpenColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdSemesterOpenColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdSemesterOpenEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdSemesterOpenEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdSemesterOpenEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdSemesterOpen"/> object.
	/// </remarks>
	public class EdSemesterOpenEventArgs : System.EventArgs
	{
		private EdSemesterOpenColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdSemesterOpenEventArgs class.
		///</summary>
		public EdSemesterOpenEventArgs(EdSemesterOpenColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdSemesterOpenEventArgs class.
		///</summary>
		public EdSemesterOpenEventArgs(EdSemesterOpenColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdSemesterOpenColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdSemesterOpenColumn" />
		public EdSemesterOpenColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdSemesterOpen related events.
	///</summary>
	public delegate void EdSemesterOpenEventHandler(object sender, EdSemesterOpenEventArgs e);
	
	#region EdSemesterOpenComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdSemesterOpenComparer : System.Collections.Generic.IComparer<EdSemesterOpen>
	{
		EdSemesterOpenColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdSemesterOpenComparer"/> class.
        /// </summary>
		public EdSemesterOpenComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdSemesterOpenComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdSemesterOpenComparer(EdSemesterOpenColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdSemesterOpen"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdSemesterOpen"/> to compare.</param>
        /// <param name="b">The second <c>EdSemesterOpen</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdSemesterOpen a, EdSemesterOpen b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdSemesterOpen entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdSemesterOpen a, EdSemesterOpen b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdSemesterOpenColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdSemesterOpenKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdSemesterOpen"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdSemesterOpenKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdSemesterOpenKey class.
		/// </summary>
		public EdSemesterOpenKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdSemesterOpenKey class.
		/// </summary>
		public EdSemesterOpenKey(EdSemesterOpenBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdSemesterOpenId = entity.EdSemesterOpenId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdSemesterOpenKey class.
		/// </summary>
		public EdSemesterOpenKey(System.Decimal _edSemesterOpenId)
		{
			#region Init Properties

			this.EdSemesterOpenId = _edSemesterOpenId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdSemesterOpenBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdSemesterOpenBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdSemesterOpenId property
		private System.Decimal _edSemesterOpenId;
		
		/// <summary>
		/// Gets or sets the EdSemesterOpenId property.
		/// </summary>
		public System.Decimal EdSemesterOpenId
		{
			get { return _edSemesterOpenId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdSemesterOpenId = value;
				
				_edSemesterOpenId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdSemesterOpenId = ( values["EdSemesterOpenId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdSemesterOpenId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdSemesterOpenId", EdSemesterOpenId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdSemesterOpenId: {0}{1}",
								EdSemesterOpenId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdSemesterOpenColumn Enum
	
	/// <summary>
	/// Enumerate the EdSemesterOpen columns.
	/// </summary>
	[Serializable]
	public enum EdSemesterOpenColumn : int
	{
		/// <summary>
		/// EdSemesterOpenId : 
		/// </summary>
		[EnumTextValue("ED_SEMESTER_OPEN_ID")]
		[ColumnEnum("ED_SEMESTER_OPEN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdSemesterOpenId = 1,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 2,
		/// <summary>
		/// FromDate : 
		/// </summary>
		[EnumTextValue("FROM_DATE")]
		[ColumnEnum("FROM_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, false)]
		FromDate = 3,
		/// <summary>
		/// ToDate : 
		/// </summary>
		[EnumTextValue("TO_DATE")]
		[ColumnEnum("TO_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, false)]
		ToDate = 4,
		/// <summary>
		/// DescrAr : 
		/// </summary>
		[EnumTextValue("DESCR_AR")]
		[ColumnEnum("DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		DescrAr = 5,
		/// <summary>
		/// DescrEn : 
		/// </summary>
		[EnumTextValue("DESCR_EN")]
		[ColumnEnum("DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		DescrEn = 6,
		/// <summary>
		/// EdCodeSemesterId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeSemesterId = 7,
		/// <summary>
		/// EdCodeSemesterTypeId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_TYPE_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeSemesterTypeId = 8,
		/// <summary>
		/// EntMainId : 
		/// </summary>
		[EnumTextValue("ENT_MAIN_ID")]
		[ColumnEnum("ENT_MAIN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EntMainId = 9,
		/// <summary>
		/// IsCurrent : 
		/// </summary>
		[EnumTextValue("IS_CURRENT")]
		[ColumnEnum("IS_CURRENT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsCurrent = 10,
		/// <summary>
		/// IsClosed : 
		/// </summary>
		[EnumTextValue("IS_CLOSED")]
		[ColumnEnum("IS_CLOSED", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsClosed = 11,
		/// <summary>
		/// IsAgendaClosed : 
		/// </summary>
		[EnumTextValue("IS_AGENDA_CLOSED")]
		[ColumnEnum("IS_AGENDA_CLOSED", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsAgendaClosed = 12,
		/// <summary>
		/// ExamFlg : 
		/// </summary>
		[EnumTextValue("EXAM_FLG")]
		[ColumnEnum("EXAM_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ExamFlg = 13,
		/// <summary>
		/// RsultFlg : 
		/// </summary>
		[EnumTextValue("RSULT_FLG")]
		[ColumnEnum("RSULT_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RsultFlg = 14,
		/// <summary>
		/// RegMthdFlg : ERU
		/// </summary>
		[EnumTextValue("REG_MTHD_FLG")]
		[ColumnEnum("REG_MTHD_FLG", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		RegMthdFlg = 15,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 16,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 17,
		/// <summary>
		/// GroupFlg : 
		/// </summary>
		[EnumTextValue("GROUP_FLG")]
		[ColumnEnum("GROUP_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GroupFlg = 18,
		/// <summary>
		/// NoWeeks : 
		/// </summary>
		[EnumTextValue("NO_WEEKS")]
		[ColumnEnum("NO_WEEKS", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		NoWeeks = 19,
		/// <summary>
		/// AsCodeDegreeClassId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_CLASS_ID")]
		[ColumnEnum("AS_CODE_DEGREE_CLASS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeClassId = 20,
		/// <summary>
		/// EdCodeStudyMethodId : 
		/// </summary>
		[EnumTextValue("ED_CODE_STUDY_METHOD_ID")]
		[ColumnEnum("ED_CODE_STUDY_METHOD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeStudyMethodId = 21,
		/// <summary>
		/// EdCodeLevelId : 
		/// </summary>
		[EnumTextValue("ED_CODE_LEVEL_ID")]
		[ColumnEnum("ED_CODE_LEVEL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeLevelId = 22
	}//End enum

	#endregion EdSemesterOpenColumn Enum

} // end namespace
