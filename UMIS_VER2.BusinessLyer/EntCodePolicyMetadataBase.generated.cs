
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EntCodePolicyMetadata.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ENT_CODE_POLICY_METADATA' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EntCodePolicyMetadataBase : EntityBase, IEntCodePolicyMetadata, IEntityId<EntCodePolicyMetadataKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EntCodePolicyMetadataEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EntCodePolicyMetadataEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EntCodePolicyMetadataEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EntCodePolicyMetadata> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EntCodePolicyMetadataEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EntCodePolicyMetadataEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EntCodePolicyMetadataBase"/> instance.
		///</summary>
		public EntCodePolicyMetadataBase()
		{
			this.entityData = new EntCodePolicyMetadataEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EntCodePolicyMetadataBase"/> instance.
		///</summary>
		///<param name="_entCodePolicyMdId"></param>
		///<param name="_descrAr"></param>
		///<param name="_descrEn"></param>
		///<param name="_tblRltdFlg"></param>
		///<param name="_tblName"></param>
		///<param name="_spChkName"></param>
		///<param name="_entCodeMdTypeId"></param>
		///<param name="_entCodePolicyCatId"></param>
		///<param name="_edCodeStudyMethodId"></param>
		///<param name="_dispOrder"></param>
		public EntCodePolicyMetadataBase(System.Decimal _entCodePolicyMdId, System.String _descrAr, 
			System.String _descrEn, System.Decimal _tblRltdFlg, System.String _tblName, 
			System.String _spChkName, System.Decimal _entCodeMdTypeId, System.Decimal? _entCodePolicyCatId, 
			System.Decimal? _edCodeStudyMethodId, System.Decimal? _dispOrder)
		{
			this.entityData = new EntCodePolicyMetadataEntityData();
			this.backupData = null;

			this.EntCodePolicyMdId = _entCodePolicyMdId;
			this.DescrAr = _descrAr;
			this.DescrEn = _descrEn;
			this.TblRltdFlg = _tblRltdFlg;
			this.TblName = _tblName;
			this.SpChkName = _spChkName;
			this.EntCodeMdTypeId = _entCodeMdTypeId;
			this.EntCodePolicyCatId = _entCodePolicyCatId;
			this.EdCodeStudyMethodId = _edCodeStudyMethodId;
			this.DispOrder = _dispOrder;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EntCodePolicyMetadata"/> instance.
		///</summary>
		///<param name="_entCodePolicyMdId"></param>
		///<param name="_descrAr"></param>
		///<param name="_descrEn"></param>
		///<param name="_tblRltdFlg"></param>
		///<param name="_tblName"></param>
		///<param name="_spChkName"></param>
		///<param name="_entCodeMdTypeId"></param>
		///<param name="_entCodePolicyCatId"></param>
		///<param name="_edCodeStudyMethodId"></param>
		///<param name="_dispOrder"></param>
		public static EntCodePolicyMetadata CreateEntCodePolicyMetadata(System.Decimal _entCodePolicyMdId, System.String _descrAr, 
			System.String _descrEn, System.Decimal _tblRltdFlg, System.String _tblName, 
			System.String _spChkName, System.Decimal _entCodeMdTypeId, System.Decimal? _entCodePolicyCatId, 
			System.Decimal? _edCodeStudyMethodId, System.Decimal? _dispOrder)
		{
			EntCodePolicyMetadata newEntCodePolicyMetadata = new EntCodePolicyMetadata();
			newEntCodePolicyMetadata.EntCodePolicyMdId = _entCodePolicyMdId;
			newEntCodePolicyMetadata.DescrAr = _descrAr;
			newEntCodePolicyMetadata.DescrEn = _descrEn;
			newEntCodePolicyMetadata.TblRltdFlg = _tblRltdFlg;
			newEntCodePolicyMetadata.TblName = _tblName;
			newEntCodePolicyMetadata.SpChkName = _spChkName;
			newEntCodePolicyMetadata.EntCodeMdTypeId = _entCodeMdTypeId;
			newEntCodePolicyMetadata.EntCodePolicyCatId = _entCodePolicyCatId;
			newEntCodePolicyMetadata.EdCodeStudyMethodId = _edCodeStudyMethodId;
			newEntCodePolicyMetadata.DispOrder = _dispOrder;
			return newEntCodePolicyMetadata;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EntCodePolicyMdId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EntCodePolicyMdId
		{
			get
			{
				return this.entityData.EntCodePolicyMdId; 
			}
			
			set
			{
				if (this.entityData.EntCodePolicyMdId == value)
					return;
					
				OnColumnChanging(EntCodePolicyMetadataColumn.EntCodePolicyMdId, this.entityData.EntCodePolicyMdId);
				this.entityData.EntCodePolicyMdId = value;
				this.EntityId.EntCodePolicyMdId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCodePolicyMetadataColumn.EntCodePolicyMdId, this.entityData.EntCodePolicyMdId);
				OnPropertyChanged("EntCodePolicyMdId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ENT_CODE_POLICY_MD_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ENT_CODE_POLICY_MD_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEntCodePolicyMdId
		{
			get { return this.entityData.OriginalEntCodePolicyMdId; }
			set { this.entityData.OriginalEntCodePolicyMdId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the DescrAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String DescrAr
		{
			get
			{
				return this.entityData.DescrAr; 
			}
			
			set
			{
				if (this.entityData.DescrAr == value)
					return;
					
				OnColumnChanging(EntCodePolicyMetadataColumn.DescrAr, this.entityData.DescrAr);
				this.entityData.DescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCodePolicyMetadataColumn.DescrAr, this.entityData.DescrAr);
				OnPropertyChanged("DescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String DescrEn
		{
			get
			{
				return this.entityData.DescrEn; 
			}
			
			set
			{
				if (this.entityData.DescrEn == value)
					return;
					
				OnColumnChanging(EntCodePolicyMetadataColumn.DescrEn, this.entityData.DescrEn);
				this.entityData.DescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCodePolicyMetadataColumn.DescrEn, this.entityData.DescrEn);
				OnPropertyChanged("DescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TblRltdFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal TblRltdFlg
		{
			get
			{
				return this.entityData.TblRltdFlg; 
			}
			
			set
			{
				if (this.entityData.TblRltdFlg == value)
					return;
					
				OnColumnChanging(EntCodePolicyMetadataColumn.TblRltdFlg, this.entityData.TblRltdFlg);
				this.entityData.TblRltdFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCodePolicyMetadataColumn.TblRltdFlg, this.entityData.TblRltdFlg);
				OnPropertyChanged("TblRltdFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TblName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String TblName
		{
			get
			{
				return this.entityData.TblName; 
			}
			
			set
			{
				if (this.entityData.TblName == value)
					return;
					
				OnColumnChanging(EntCodePolicyMetadataColumn.TblName, this.entityData.TblName);
				this.entityData.TblName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCodePolicyMetadataColumn.TblName, this.entityData.TblName);
				OnPropertyChanged("TblName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SpChkName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String SpChkName
		{
			get
			{
				return this.entityData.SpChkName; 
			}
			
			set
			{
				if (this.entityData.SpChkName == value)
					return;
					
				OnColumnChanging(EntCodePolicyMetadataColumn.SpChkName, this.entityData.SpChkName);
				this.entityData.SpChkName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCodePolicyMetadataColumn.SpChkName, this.entityData.SpChkName);
				OnPropertyChanged("SpChkName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntCodeMdTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EntCodeMdTypeId
		{
			get
			{
				return this.entityData.EntCodeMdTypeId; 
			}
			
			set
			{
				if (this.entityData.EntCodeMdTypeId == value)
					return;
					
				OnColumnChanging(EntCodePolicyMetadataColumn.EntCodeMdTypeId, this.entityData.EntCodeMdTypeId);
				this.entityData.EntCodeMdTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCodePolicyMetadataColumn.EntCodeMdTypeId, this.entityData.EntCodeMdTypeId);
				OnPropertyChanged("EntCodeMdTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntCodePolicyCatId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntCodePolicyCatIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntCodePolicyCatId
		{
			get
			{
				return this.entityData.EntCodePolicyCatId; 
			}
			
			set
			{
				if (this.entityData.EntCodePolicyCatId == value)
					return;
					
				OnColumnChanging(EntCodePolicyMetadataColumn.EntCodePolicyCatId, this.entityData.EntCodePolicyCatId);
				this.entityData.EntCodePolicyCatId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCodePolicyMetadataColumn.EntCodePolicyCatId, this.entityData.EntCodePolicyCatId);
				OnPropertyChanged("EntCodePolicyCatId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeStudyMethodId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeStudyMethodIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeStudyMethodId
		{
			get
			{
				return this.entityData.EdCodeStudyMethodId; 
			}
			
			set
			{
				if (this.entityData.EdCodeStudyMethodId == value)
					return;
					
				OnColumnChanging(EntCodePolicyMetadataColumn.EdCodeStudyMethodId, this.entityData.EdCodeStudyMethodId);
				this.entityData.EdCodeStudyMethodId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCodePolicyMetadataColumn.EdCodeStudyMethodId, this.entityData.EdCodeStudyMethodId);
				OnPropertyChanged("EdCodeStudyMethodId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DispOrder property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDispOrderNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DispOrder
		{
			get
			{
				return this.entityData.DispOrder; 
			}
			
			set
			{
				if (this.entityData.DispOrder == value)
					return;
					
				OnColumnChanging(EntCodePolicyMetadataColumn.DispOrder, this.entityData.DispOrder);
				this.entityData.DispOrder = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCodePolicyMetadataColumn.DispOrder, this.entityData.DispOrder);
				OnPropertyChanged("DispOrder");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EntCodeMdType"/>.
		/// </summary>
		/// <value>The source EntCodeMdType for EntCodeMdTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntCodeMdType EntCodeMdTypeIdSource
      	{
            get { return entityData.EntCodeMdTypeIdSource; }
            set { entityData.EntCodeMdTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeStudyMethod"/>.
		/// </summary>
		/// <value>The source EdCodeStudyMethod for EdCodeStudyMethodId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeStudyMethod EdCodeStudyMethodIdSource
      	{
            get { return entityData.EdCodeStudyMethodIdSource; }
            set { entityData.EdCodeStudyMethodIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntCodePolicyCat"/>.
		/// </summary>
		/// <value>The source EntCodePolicyCat for EntCodePolicyCatId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntCodePolicyCat EntCodePolicyCatIdSource
      	{
            get { return entityData.EntCodePolicyCatIdSource; }
            set { entityData.EntCodePolicyCatIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EntPolicyMetadata objects
		///	which are related to this object through the relation FK_ENT_POLICY_REQ_METADATA_POLICIES_METADATA
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolicyMetadata> EntPolicyMetadataCollection
		{
			get { return entityData.EntPolicyMetadataCollection; }
			set { entityData.EntPolicyMetadataCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DescrAr", "Descr Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrAr", "Descr Ar", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrEn", "Descr En", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TblName", "Tbl Name", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SpChkName", "Sp Chk Name", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ENT_CODE_POLICY_METADATA"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ENT_CODE_POLICY_MD_ID", "DESCR_AR", "DESCR_EN", "TBL_RLTD_FLG", "TBL_NAME", "SP_CHK_NAME", "ENT_CODE_MD_TYPE_ID", "ENT_CODE_POLICY_CAT_ID", "ED_CODE_STUDY_METHOD_ID", "DISP_ORDER"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EntCodePolicyMetadataEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EntCodePolicyMetadata) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EntCodePolicyMetadata>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EntCodePolicyMetadata);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EntCodePolicyMetadata Entity 
		///</summary>
		protected virtual EntCodePolicyMetadata Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EntCodePolicyMetadata copy = new EntCodePolicyMetadata();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EntCodePolicyMdId = this.EntCodePolicyMdId;
					copy.OriginalEntCodePolicyMdId = this.OriginalEntCodePolicyMdId;
				copy.DescrAr = this.DescrAr;
				copy.DescrEn = this.DescrEn;
				copy.TblRltdFlg = this.TblRltdFlg;
				copy.TblName = this.TblName;
				copy.SpChkName = this.SpChkName;
				copy.EntCodeMdTypeId = this.EntCodeMdTypeId;
				copy.EntCodePolicyCatId = this.EntCodePolicyCatId;
				copy.EdCodeStudyMethodId = this.EdCodeStudyMethodId;
				copy.DispOrder = this.DispOrder;
			
			if (this.EntCodeMdTypeIdSource != null && existingCopies.Contains(this.EntCodeMdTypeIdSource))
				copy.EntCodeMdTypeIdSource = existingCopies[this.EntCodeMdTypeIdSource] as EntCodeMdType;
			else
				copy.EntCodeMdTypeIdSource = MakeCopyOf(this.EntCodeMdTypeIdSource, existingCopies) as EntCodeMdType;
			if (this.EdCodeStudyMethodIdSource != null && existingCopies.Contains(this.EdCodeStudyMethodIdSource))
				copy.EdCodeStudyMethodIdSource = existingCopies[this.EdCodeStudyMethodIdSource] as EdCodeStudyMethod;
			else
				copy.EdCodeStudyMethodIdSource = MakeCopyOf(this.EdCodeStudyMethodIdSource, existingCopies) as EdCodeStudyMethod;
			if (this.EntCodePolicyCatIdSource != null && existingCopies.Contains(this.EntCodePolicyCatIdSource))
				copy.EntCodePolicyCatIdSource = existingCopies[this.EntCodePolicyCatIdSource] as EntCodePolicyCat;
			else
				copy.EntCodePolicyCatIdSource = MakeCopyOf(this.EntCodePolicyCatIdSource, existingCopies) as EntCodePolicyCat;
		
			//deep copy nested objects
			copy.EntPolicyMetadataCollection = (TList<EntPolicyMetadata>) MakeCopyOf(this.EntPolicyMetadataCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EntCodePolicyMetadata Entity 
		///</summary>
		public virtual EntCodePolicyMetadata Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EntCodePolicyMetadata Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EntCodePolicyMetadata DeepCopy()
		{
			return EntityHelper.Clone<EntCodePolicyMetadata>(this as EntCodePolicyMetadata);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EntCodePolicyMetadataEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EntCodePolicyMetadataEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EntCodePolicyMetadataEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EntCodePolicyMetadataColumn column)
		{
			switch(column)
			{
					case EntCodePolicyMetadataColumn.EntCodePolicyMdId:
					return entityData.EntCodePolicyMdId != _originalData.EntCodePolicyMdId;
					case EntCodePolicyMetadataColumn.DescrAr:
					return entityData.DescrAr != _originalData.DescrAr;
					case EntCodePolicyMetadataColumn.DescrEn:
					return entityData.DescrEn != _originalData.DescrEn;
					case EntCodePolicyMetadataColumn.TblRltdFlg:
					return entityData.TblRltdFlg != _originalData.TblRltdFlg;
					case EntCodePolicyMetadataColumn.TblName:
					return entityData.TblName != _originalData.TblName;
					case EntCodePolicyMetadataColumn.SpChkName:
					return entityData.SpChkName != _originalData.SpChkName;
					case EntCodePolicyMetadataColumn.EntCodeMdTypeId:
					return entityData.EntCodeMdTypeId != _originalData.EntCodeMdTypeId;
					case EntCodePolicyMetadataColumn.EntCodePolicyCatId:
					return entityData.EntCodePolicyCatId != _originalData.EntCodePolicyCatId;
					case EntCodePolicyMetadataColumn.EdCodeStudyMethodId:
					return entityData.EdCodeStudyMethodId != _originalData.EdCodeStudyMethodId;
					case EntCodePolicyMetadataColumn.DispOrder:
					return entityData.DispOrder != _originalData.DispOrder;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EntCodePolicyMetadataColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EntCodePolicyMdId != _originalData.EntCodePolicyMdId;
			result = result || entityData.DescrAr != _originalData.DescrAr;
			result = result || entityData.DescrEn != _originalData.DescrEn;
			result = result || entityData.TblRltdFlg != _originalData.TblRltdFlg;
			result = result || entityData.TblName != _originalData.TblName;
			result = result || entityData.SpChkName != _originalData.SpChkName;
			result = result || entityData.EntCodeMdTypeId != _originalData.EntCodeMdTypeId;
			result = result || entityData.EntCodePolicyCatId != _originalData.EntCodePolicyCatId;
			result = result || entityData.EdCodeStudyMethodId != _originalData.EdCodeStudyMethodId;
			result = result || entityData.DispOrder != _originalData.DispOrder;
			return result;
		}	
		
		///<summary>
		///  Returns a EntCodePolicyMetadata Entity with the original data.
		///</summary>
		public EntCodePolicyMetadata GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEntCodePolicyMetadata(
				_originalData.EntCodePolicyMdId,
				_originalData.DescrAr,
				_originalData.DescrEn,
				_originalData.TblRltdFlg,
				_originalData.TblName,
				_originalData.SpChkName,
				_originalData.EntCodeMdTypeId,
				_originalData.EntCodePolicyCatId,
				_originalData.EdCodeStudyMethodId,
				_originalData.DispOrder
				);
				
			return (EntCodePolicyMetadata)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EntCodePolicyMetadataBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EntCodePolicyMetadataBase)
				return ValueEquals(this, (EntCodePolicyMetadataBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EntCodePolicyMetadataBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EntCodePolicyMdId.GetHashCode() ^ 
					this.DescrAr.GetHashCode() ^ 
					((this.DescrEn == null) ? string.Empty : this.DescrEn.ToString()).GetHashCode() ^ 
					this.TblRltdFlg.GetHashCode() ^ 
					((this.TblName == null) ? string.Empty : this.TblName.ToString()).GetHashCode() ^ 
					((this.SpChkName == null) ? string.Empty : this.SpChkName.ToString()).GetHashCode() ^ 
					this.EntCodeMdTypeId.GetHashCode() ^ 
					((this.EntCodePolicyCatId == null) ? string.Empty : this.EntCodePolicyCatId.ToString()).GetHashCode() ^ 
					((this.EdCodeStudyMethodId == null) ? string.Empty : this.EdCodeStudyMethodId.ToString()).GetHashCode() ^ 
					((this.DispOrder == null) ? string.Empty : this.DispOrder.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EntCodePolicyMetadataBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EntCodePolicyMetadataBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EntCodePolicyMetadataBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EntCodePolicyMetadataBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EntCodePolicyMetadataBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EntCodePolicyMetadataBase Object1, EntCodePolicyMetadataBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EntCodePolicyMdId != Object2.EntCodePolicyMdId)
				equal = false;
			if (Object1.DescrAr != Object2.DescrAr)
				equal = false;
			if ( Object1.DescrEn != null && Object2.DescrEn != null )
			{
				if (Object1.DescrEn != Object2.DescrEn)
					equal = false;
			}
			else if (Object1.DescrEn == null ^ Object2.DescrEn == null )
			{
				equal = false;
			}
			if (Object1.TblRltdFlg != Object2.TblRltdFlg)
				equal = false;
			if ( Object1.TblName != null && Object2.TblName != null )
			{
				if (Object1.TblName != Object2.TblName)
					equal = false;
			}
			else if (Object1.TblName == null ^ Object2.TblName == null )
			{
				equal = false;
			}
			if ( Object1.SpChkName != null && Object2.SpChkName != null )
			{
				if (Object1.SpChkName != Object2.SpChkName)
					equal = false;
			}
			else if (Object1.SpChkName == null ^ Object2.SpChkName == null )
			{
				equal = false;
			}
			if (Object1.EntCodeMdTypeId != Object2.EntCodeMdTypeId)
				equal = false;
			if ( Object1.EntCodePolicyCatId != null && Object2.EntCodePolicyCatId != null )
			{
				if (Object1.EntCodePolicyCatId != Object2.EntCodePolicyCatId)
					equal = false;
			}
			else if (Object1.EntCodePolicyCatId == null ^ Object2.EntCodePolicyCatId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeStudyMethodId != null && Object2.EdCodeStudyMethodId != null )
			{
				if (Object1.EdCodeStudyMethodId != Object2.EdCodeStudyMethodId)
					equal = false;
			}
			else if (Object1.EdCodeStudyMethodId == null ^ Object2.EdCodeStudyMethodId == null )
			{
				equal = false;
			}
			if ( Object1.DispOrder != null && Object2.DispOrder != null )
			{
				if (Object1.DispOrder != Object2.DispOrder)
					equal = false;
			}
			else if (Object1.DispOrder == null ^ Object2.DispOrder == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EntCodePolicyMetadataBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EntCodePolicyMetadataComparer GetComparer()
        {
            return new EntCodePolicyMetadataComparer();
        }
        */

        // Comparer delegates back to EntCodePolicyMetadata
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EntCodePolicyMetadata rhs, EntCodePolicyMetadataColumn which)
        {
            switch (which)
            {
            	
            	
            	case EntCodePolicyMetadataColumn.EntCodePolicyMdId:
            		return this.EntCodePolicyMdId.CompareTo(rhs.EntCodePolicyMdId);
            		
            		                 
            	
            	
            	case EntCodePolicyMetadataColumn.DescrAr:
            		return this.DescrAr.CompareTo(rhs.DescrAr);
            		
            		                 
            	
            	
            	case EntCodePolicyMetadataColumn.DescrEn:
            		return this.DescrEn.CompareTo(rhs.DescrEn);
            		
            		                 
            	
            	
            	case EntCodePolicyMetadataColumn.TblRltdFlg:
            		return this.TblRltdFlg.CompareTo(rhs.TblRltdFlg);
            		
            		                 
            	
            	
            	case EntCodePolicyMetadataColumn.TblName:
            		return this.TblName.CompareTo(rhs.TblName);
            		
            		                 
            	
            	
            	case EntCodePolicyMetadataColumn.SpChkName:
            		return this.SpChkName.CompareTo(rhs.SpChkName);
            		
            		                 
            	
            	
            	case EntCodePolicyMetadataColumn.EntCodeMdTypeId:
            		return this.EntCodeMdTypeId.CompareTo(rhs.EntCodeMdTypeId);
            		
            		                 
            	
            	
            	case EntCodePolicyMetadataColumn.EntCodePolicyCatId:
            		return this.EntCodePolicyCatId.Value.CompareTo(rhs.EntCodePolicyCatId.Value);
            		
            		                 
            	
            	
            	case EntCodePolicyMetadataColumn.EdCodeStudyMethodId:
            		return this.EdCodeStudyMethodId.Value.CompareTo(rhs.EdCodeStudyMethodId.Value);
            		
            		                 
            	
            	
            	case EntCodePolicyMetadataColumn.DispOrder:
            		return this.DispOrder.Value.CompareTo(rhs.DispOrder.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EntCodePolicyMetadataKey> Members
		
		// member variable for the EntityId property
		private EntCodePolicyMetadataKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EntCodePolicyMetadataKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EntCodePolicyMetadataKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EntCodePolicyMetadata")
					.Append("|").Append( this.EntCodePolicyMdId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{11}{10}- EntCodePolicyMdId: {0}{10}- DescrAr: {1}{10}- DescrEn: {2}{10}- TblRltdFlg: {3}{10}- TblName: {4}{10}- SpChkName: {5}{10}- EntCodeMdTypeId: {6}{10}- EntCodePolicyCatId: {7}{10}- EdCodeStudyMethodId: {8}{10}- DispOrder: {9}{10}{12}", 
				this.EntCodePolicyMdId,
				this.DescrAr,
				(this.DescrEn == null) ? string.Empty : this.DescrEn.ToString(),
				this.TblRltdFlg,
				(this.TblName == null) ? string.Empty : this.TblName.ToString(),
				(this.SpChkName == null) ? string.Empty : this.SpChkName.ToString(),
				this.EntCodeMdTypeId,
				(this.EntCodePolicyCatId == null) ? string.Empty : this.EntCodePolicyCatId.ToString(),
				(this.EdCodeStudyMethodId == null) ? string.Empty : this.EdCodeStudyMethodId.ToString(),
				(this.DispOrder == null) ? string.Empty : this.DispOrder.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ENT_CODE_POLICY_METADATA' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EntCodePolicyMetadataEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ENT_CODE_POLICY_MD_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ENT_CODE_POLICY_METADATA"</remarks>
		public System.Decimal EntCodePolicyMdId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEntCodePolicyMdId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// DESCR_AR : 
		/// </summary>
		public System.String		  DescrAr = string.Empty;
		
		/// <summary>
		/// DESCR_EN : 
		/// </summary>
		public System.String		  DescrEn = null;
		
		/// <summary>
		/// TBL_RLTD_FLG : 
		/// </summary>
		public System.Decimal		  TblRltdFlg = 0.0m;
		
		/// <summary>
		/// TBL_NAME : 
		/// </summary>
		public System.String		  TblName = null;
		
		/// <summary>
		/// SP_CHK_NAME : 
		/// </summary>
		public System.String		  SpChkName = null;
		
		/// <summary>
		/// ENT_CODE_MD_TYPE_ID : 
		/// </summary>
		public System.Decimal		  EntCodeMdTypeId = 0.0m;
		
		/// <summary>
		/// ENT_CODE_POLICY_CAT_ID : 
		/// </summary>
		public System.Decimal?		  EntCodePolicyCatId = null;
		
		/// <summary>
		/// ED_CODE_STUDY_METHOD_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeStudyMethodId = null;
		
		/// <summary>
		/// DISP_ORDER : 
		/// </summary>
		public System.Decimal?		  DispOrder = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EntCodeMdType _entCodeMdTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntCodeMdType"/>.
		/// </summary>
		/// <value>The source EntCodeMdType for EntCodeMdTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntCodeMdType EntCodeMdTypeIdSource
      	{
            get { return this._entCodeMdTypeIdSource; }
            set { this._entCodeMdTypeIdSource = value; }
      	}
		private EdCodeStudyMethod _edCodeStudyMethodIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeStudyMethod"/>.
		/// </summary>
		/// <value>The source EdCodeStudyMethod for EdCodeStudyMethodId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeStudyMethod EdCodeStudyMethodIdSource
      	{
            get { return this._edCodeStudyMethodIdSource; }
            set { this._edCodeStudyMethodIdSource = value; }
      	}
		private EntCodePolicyCat _entCodePolicyCatIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntCodePolicyCat"/>.
		/// </summary>
		/// <value>The source EntCodePolicyCat for EntCodePolicyCatId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntCodePolicyCat EntCodePolicyCatIdSource
      	{
            get { return this._entCodePolicyCatIdSource; }
            set { this._entCodePolicyCatIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EntPolicyMetadataCollection
		
		private TList<EntPolicyMetadata> _entPolicyMetadataEntCodePolicyMdId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolicyMetadataEntCodePolicyMdId
		/// </summary>
		
		public TList<EntPolicyMetadata> EntPolicyMetadataCollection
		{
			get
			{
				if (_entPolicyMetadataEntCodePolicyMdId == null)
				{
				_entPolicyMetadataEntCodePolicyMdId = new TList<EntPolicyMetadata>();
				}
	
				return _entPolicyMetadataEntCodePolicyMdId;
			}
			set { _entPolicyMetadataEntCodePolicyMdId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EntCodePolicyMetadataEntityData _tmp = new EntCodePolicyMetadataEntityData();
						
			_tmp.EntCodePolicyMdId = this.EntCodePolicyMdId;
			_tmp.OriginalEntCodePolicyMdId = this.OriginalEntCodePolicyMdId;
			
			_tmp.DescrAr = this.DescrAr;
			_tmp.DescrEn = this.DescrEn;
			_tmp.TblRltdFlg = this.TblRltdFlg;
			_tmp.TblName = this.TblName;
			_tmp.SpChkName = this.SpChkName;
			_tmp.EntCodeMdTypeId = this.EntCodeMdTypeId;
			_tmp.EntCodePolicyCatId = this.EntCodePolicyCatId;
			_tmp.EdCodeStudyMethodId = this.EdCodeStudyMethodId;
			_tmp.DispOrder = this.DispOrder;
			
			#region Source Parent Composite Entities
			if (this.EntCodeMdTypeIdSource != null)
				_tmp.EntCodeMdTypeIdSource = MakeCopyOf(this.EntCodeMdTypeIdSource) as EntCodeMdType;
			if (this.EdCodeStudyMethodIdSource != null)
				_tmp.EdCodeStudyMethodIdSource = MakeCopyOf(this.EdCodeStudyMethodIdSource) as EdCodeStudyMethod;
			if (this.EntCodePolicyCatIdSource != null)
				_tmp.EntCodePolicyCatIdSource = MakeCopyOf(this.EntCodePolicyCatIdSource) as EntCodePolicyCat;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._entPolicyMetadataEntCodePolicyMdId != null)
				_tmp.EntPolicyMetadataCollection = (TList<EntPolicyMetadata>) MakeCopyOf(this.EntPolicyMetadataCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EntCodePolicyMetadataEntityData _tmp = new EntCodePolicyMetadataEntityData();
						
			_tmp.EntCodePolicyMdId = this.EntCodePolicyMdId;
			_tmp.OriginalEntCodePolicyMdId = this.OriginalEntCodePolicyMdId;
			
			_tmp.DescrAr = this.DescrAr;
			_tmp.DescrEn = this.DescrEn;
			_tmp.TblRltdFlg = this.TblRltdFlg;
			_tmp.TblName = this.TblName;
			_tmp.SpChkName = this.SpChkName;
			_tmp.EntCodeMdTypeId = this.EntCodeMdTypeId;
			_tmp.EntCodePolicyCatId = this.EntCodePolicyCatId;
			_tmp.EdCodeStudyMethodId = this.EdCodeStudyMethodId;
			_tmp.DispOrder = this.DispOrder;
			
			#region Source Parent Composite Entities
			if (this.EntCodeMdTypeIdSource != null && existingCopies.Contains(this.EntCodeMdTypeIdSource))
				_tmp.EntCodeMdTypeIdSource = existingCopies[this.EntCodeMdTypeIdSource] as EntCodeMdType;
			else
				_tmp.EntCodeMdTypeIdSource = MakeCopyOf(this.EntCodeMdTypeIdSource, existingCopies) as EntCodeMdType;
			if (this.EdCodeStudyMethodIdSource != null && existingCopies.Contains(this.EdCodeStudyMethodIdSource))
				_tmp.EdCodeStudyMethodIdSource = existingCopies[this.EdCodeStudyMethodIdSource] as EdCodeStudyMethod;
			else
				_tmp.EdCodeStudyMethodIdSource = MakeCopyOf(this.EdCodeStudyMethodIdSource, existingCopies) as EdCodeStudyMethod;
			if (this.EntCodePolicyCatIdSource != null && existingCopies.Contains(this.EntCodePolicyCatIdSource))
				_tmp.EntCodePolicyCatIdSource = existingCopies[this.EntCodePolicyCatIdSource] as EntCodePolicyCat;
			else
				_tmp.EntCodePolicyCatIdSource = MakeCopyOf(this.EntCodePolicyCatIdSource, existingCopies) as EntCodePolicyCat;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EntPolicyMetadataCollection = (TList<EntPolicyMetadata>) MakeCopyOf(this.EntPolicyMetadataCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntCodePolicyMetadataColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EntCodePolicyMetadataColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntCodePolicyMetadataColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EntCodePolicyMetadataColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntCodePolicyMetadataColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EntCodePolicyMetadataColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EntCodePolicyMetadataEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EntCodePolicyMetadataEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntCodePolicyMetadataColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EntCodePolicyMetadataColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EntCodePolicyMetadataEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EntCodePolicyMetadataEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EntCodePolicyMetadataEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EntCodePolicyMetadata"/> object.
	/// </remarks>
	public class EntCodePolicyMetadataEventArgs : System.EventArgs
	{
		private EntCodePolicyMetadataColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EntCodePolicyMetadataEventArgs class.
		///</summary>
		public EntCodePolicyMetadataEventArgs(EntCodePolicyMetadataColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EntCodePolicyMetadataEventArgs class.
		///</summary>
		public EntCodePolicyMetadataEventArgs(EntCodePolicyMetadataColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EntCodePolicyMetadataColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EntCodePolicyMetadataColumn" />
		public EntCodePolicyMetadataColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EntCodePolicyMetadata related events.
	///</summary>
	public delegate void EntCodePolicyMetadataEventHandler(object sender, EntCodePolicyMetadataEventArgs e);
	
	#region EntCodePolicyMetadataComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EntCodePolicyMetadataComparer : System.Collections.Generic.IComparer<EntCodePolicyMetadata>
	{
		EntCodePolicyMetadataColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EntCodePolicyMetadataComparer"/> class.
        /// </summary>
		public EntCodePolicyMetadataComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EntCodePolicyMetadataComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EntCodePolicyMetadataComparer(EntCodePolicyMetadataColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EntCodePolicyMetadata"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EntCodePolicyMetadata"/> to compare.</param>
        /// <param name="b">The second <c>EntCodePolicyMetadata</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EntCodePolicyMetadata a, EntCodePolicyMetadata b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EntCodePolicyMetadata entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EntCodePolicyMetadata a, EntCodePolicyMetadata b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EntCodePolicyMetadataColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EntCodePolicyMetadataKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EntCodePolicyMetadata"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EntCodePolicyMetadataKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EntCodePolicyMetadataKey class.
		/// </summary>
		public EntCodePolicyMetadataKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EntCodePolicyMetadataKey class.
		/// </summary>
		public EntCodePolicyMetadataKey(EntCodePolicyMetadataBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EntCodePolicyMdId = entity.EntCodePolicyMdId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EntCodePolicyMetadataKey class.
		/// </summary>
		public EntCodePolicyMetadataKey(System.Decimal _entCodePolicyMdId)
		{
			#region Init Properties

			this.EntCodePolicyMdId = _entCodePolicyMdId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EntCodePolicyMetadataBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EntCodePolicyMetadataBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EntCodePolicyMdId property
		private System.Decimal _entCodePolicyMdId;
		
		/// <summary>
		/// Gets or sets the EntCodePolicyMdId property.
		/// </summary>
		public System.Decimal EntCodePolicyMdId
		{
			get { return _entCodePolicyMdId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EntCodePolicyMdId = value;
				
				_entCodePolicyMdId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EntCodePolicyMdId = ( values["EntCodePolicyMdId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EntCodePolicyMdId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EntCodePolicyMdId", EntCodePolicyMdId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EntCodePolicyMdId: {0}{1}",
								EntCodePolicyMdId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EntCodePolicyMetadataColumn Enum
	
	/// <summary>
	/// Enumerate the EntCodePolicyMetadata columns.
	/// </summary>
	[Serializable]
	public enum EntCodePolicyMetadataColumn : int
	{
		/// <summary>
		/// EntCodePolicyMdId : 
		/// </summary>
		[EnumTextValue("ENT_CODE_POLICY_MD_ID")]
		[ColumnEnum("ENT_CODE_POLICY_MD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EntCodePolicyMdId = 1,
		/// <summary>
		/// DescrAr : 
		/// </summary>
		[EnumTextValue("DESCR_AR")]
		[ColumnEnum("DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		DescrAr = 2,
		/// <summary>
		/// DescrEn : 
		/// </summary>
		[EnumTextValue("DESCR_EN")]
		[ColumnEnum("DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		DescrEn = 3,
		/// <summary>
		/// TblRltdFlg : 
		/// </summary>
		[EnumTextValue("TBL_RLTD_FLG")]
		[ColumnEnum("TBL_RLTD_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		TblRltdFlg = 4,
		/// <summary>
		/// TblName : 
		/// </summary>
		[EnumTextValue("TBL_NAME")]
		[ColumnEnum("TBL_NAME", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		TblName = 5,
		/// <summary>
		/// SpChkName : 
		/// </summary>
		[EnumTextValue("SP_CHK_NAME")]
		[ColumnEnum("SP_CHK_NAME", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		SpChkName = 6,
		/// <summary>
		/// EntCodeMdTypeId : 
		/// </summary>
		[EnumTextValue("ENT_CODE_MD_TYPE_ID")]
		[ColumnEnum("ENT_CODE_MD_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EntCodeMdTypeId = 7,
		/// <summary>
		/// EntCodePolicyCatId : 
		/// </summary>
		[EnumTextValue("ENT_CODE_POLICY_CAT_ID")]
		[ColumnEnum("ENT_CODE_POLICY_CAT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntCodePolicyCatId = 8,
		/// <summary>
		/// EdCodeStudyMethodId : 
		/// </summary>
		[EnumTextValue("ED_CODE_STUDY_METHOD_ID")]
		[ColumnEnum("ED_CODE_STUDY_METHOD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeStudyMethodId = 9,
		/// <summary>
		/// DispOrder : 
		/// </summary>
		[EnumTextValue("DISP_ORDER")]
		[ColumnEnum("DISP_ORDER", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DispOrder = 10
	}//End enum

	#endregion EntCodePolicyMetadataColumn Enum

} // end namespace
