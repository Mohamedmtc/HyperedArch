
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file FeeRefundCodeDtl.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'FEE_REFUND_CODE_DTL' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class FeeRefundCodeDtlBase : EntityBase, IFeeRefundCodeDtl, IEntityId<FeeRefundCodeDtlKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private FeeRefundCodeDtlEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private FeeRefundCodeDtlEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private FeeRefundCodeDtlEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<FeeRefundCodeDtl> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeRefundCodeDtlEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeRefundCodeDtlEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="FeeRefundCodeDtlBase"/> instance.
		///</summary>
		public FeeRefundCodeDtlBase()
		{
			this.entityData = new FeeRefundCodeDtlEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="FeeRefundCodeDtlBase"/> instance.
		///</summary>
		///<param name="_feeRefundCodeDtlId">تفاصيل لائحة الاسترداد</param>
		///<param name="_feeRefundCodeId">RFND_ID لائحة الاسترداد</param>
		///<param name="_feeCodeItemId">البند المسترد</param>
		///<param name="_admCdeFeeId">لائحة بنود مصروفات القبول</param>
		///<param name="_dueDate">تاريخ الاستحقاق-اخر تاريخ دفع يوم-شهر</param>
		///<param name="_rfndPrcnt">نسبة الاسترداد</param>
		///<param name="_feeCodeItemRltId">البند المرتبط -لايمكن اضافته بمفرده- يتم التعامل بمجموع البند والبند المرتبط وتطبيق النسبة</param>
		///<param name="_feeCodeItemPnftId">البند المرحل  عليه</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public FeeRefundCodeDtlBase(System.Decimal _feeRefundCodeDtlId, System.Decimal _feeRefundCodeId, 
			System.Decimal? _feeCodeItemId, System.Decimal? _admCdeFeeId, System.DateTime? _dueDate, 
			System.Decimal _rfndPrcnt, System.Decimal? _feeCodeItemRltId, System.Decimal? _feeCodeItemPnftId, 
			System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			this.entityData = new FeeRefundCodeDtlEntityData();
			this.backupData = null;

			this.FeeRefundCodeDtlId = _feeRefundCodeDtlId;
			this.FeeRefundCodeId = _feeRefundCodeId;
			this.FeeCodeItemId = _feeCodeItemId;
			this.AdmCdeFeeId = _admCdeFeeId;
			this.DueDate = _dueDate;
			this.RfndPrcnt = _rfndPrcnt;
			this.FeeCodeItemRltId = _feeCodeItemRltId;
			this.FeeCodeItemPnftId = _feeCodeItemPnftId;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="FeeRefundCodeDtl"/> instance.
		///</summary>
		///<param name="_feeRefundCodeDtlId">تفاصيل لائحة الاسترداد</param>
		///<param name="_feeRefundCodeId">RFND_ID لائحة الاسترداد</param>
		///<param name="_feeCodeItemId">البند المسترد</param>
		///<param name="_admCdeFeeId">لائحة بنود مصروفات القبول</param>
		///<param name="_dueDate">تاريخ الاستحقاق-اخر تاريخ دفع يوم-شهر</param>
		///<param name="_rfndPrcnt">نسبة الاسترداد</param>
		///<param name="_feeCodeItemRltId">البند المرتبط -لايمكن اضافته بمفرده- يتم التعامل بمجموع البند والبند المرتبط وتطبيق النسبة</param>
		///<param name="_feeCodeItemPnftId">البند المرحل  عليه</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static FeeRefundCodeDtl CreateFeeRefundCodeDtl(System.Decimal _feeRefundCodeDtlId, System.Decimal _feeRefundCodeId, 
			System.Decimal? _feeCodeItemId, System.Decimal? _admCdeFeeId, System.DateTime? _dueDate, 
			System.Decimal _rfndPrcnt, System.Decimal? _feeCodeItemRltId, System.Decimal? _feeCodeItemPnftId, 
			System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			FeeRefundCodeDtl newFeeRefundCodeDtl = new FeeRefundCodeDtl();
			newFeeRefundCodeDtl.FeeRefundCodeDtlId = _feeRefundCodeDtlId;
			newFeeRefundCodeDtl.FeeRefundCodeId = _feeRefundCodeId;
			newFeeRefundCodeDtl.FeeCodeItemId = _feeCodeItemId;
			newFeeRefundCodeDtl.AdmCdeFeeId = _admCdeFeeId;
			newFeeRefundCodeDtl.DueDate = _dueDate;
			newFeeRefundCodeDtl.RfndPrcnt = _rfndPrcnt;
			newFeeRefundCodeDtl.FeeCodeItemRltId = _feeCodeItemRltId;
			newFeeRefundCodeDtl.FeeCodeItemPnftId = _feeCodeItemPnftId;
			newFeeRefundCodeDtl.SeUserId = _seUserId;
			newFeeRefundCodeDtl.LastDate = _lastDate;
			return newFeeRefundCodeDtl;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the FeeRefundCodeDtlId property. 
		///		تفاصيل لائحة الاسترداد
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"تفاصيل لائحة الاسترداد"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal FeeRefundCodeDtlId
		{
			get
			{
				return this.entityData.FeeRefundCodeDtlId; 
			}
			
			set
			{
				if (this.entityData.FeeRefundCodeDtlId == value)
					return;
					
				OnColumnChanging(FeeRefundCodeDtlColumn.FeeRefundCodeDtlId, this.entityData.FeeRefundCodeDtlId);
				this.entityData.FeeRefundCodeDtlId = value;
				this.EntityId.FeeRefundCodeDtlId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefundCodeDtlColumn.FeeRefundCodeDtlId, this.entityData.FeeRefundCodeDtlId);
				OnPropertyChanged("FeeRefundCodeDtlId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the FEE_REFUND_CODE_DTL_ID property.
		///		تفاصيل لائحة الاسترداد
		/// </summary>
		/// <remarks>This is the original value of the FEE_REFUND_CODE_DTL_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalFeeRefundCodeDtlId
		{
			get { return this.entityData.OriginalFeeRefundCodeDtlId; }
			set { this.entityData.OriginalFeeRefundCodeDtlId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the FeeRefundCodeId property. 
		///		RFND_ID لائحة الاسترداد
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"RFND_ID لائحة الاسترداد"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal FeeRefundCodeId
		{
			get
			{
				return this.entityData.FeeRefundCodeId; 
			}
			
			set
			{
				if (this.entityData.FeeRefundCodeId == value)
					return;
					
				OnColumnChanging(FeeRefundCodeDtlColumn.FeeRefundCodeId, this.entityData.FeeRefundCodeId);
				this.entityData.FeeRefundCodeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefundCodeDtlColumn.FeeRefundCodeId, this.entityData.FeeRefundCodeId);
				OnPropertyChanged("FeeRefundCodeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeCodeItemId property. 
		///		البند المسترد
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeCodeItemIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"البند المسترد"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeeCodeItemId
		{
			get
			{
				return this.entityData.FeeCodeItemId; 
			}
			
			set
			{
				if (this.entityData.FeeCodeItemId == value)
					return;
					
				OnColumnChanging(FeeRefundCodeDtlColumn.FeeCodeItemId, this.entityData.FeeCodeItemId);
				this.entityData.FeeCodeItemId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefundCodeDtlColumn.FeeCodeItemId, this.entityData.FeeCodeItemId);
				OnPropertyChanged("FeeCodeItemId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmCdeFeeId property. 
		///		لائحة بنود مصروفات القبول
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmCdeFeeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"لائحة بنود مصروفات القبول"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmCdeFeeId
		{
			get
			{
				return this.entityData.AdmCdeFeeId; 
			}
			
			set
			{
				if (this.entityData.AdmCdeFeeId == value)
					return;
					
				OnColumnChanging(FeeRefundCodeDtlColumn.AdmCdeFeeId, this.entityData.AdmCdeFeeId);
				this.entityData.AdmCdeFeeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefundCodeDtlColumn.AdmCdeFeeId, this.entityData.AdmCdeFeeId);
				OnPropertyChanged("AdmCdeFeeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DueDate property. 
		///		تاريخ الاستحقاق-اخر تاريخ دفع يوم-شهر
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsDueDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ الاستحقاق-اخر تاريخ دفع يوم-شهر"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DueDate
		{
			get
			{
				return this.entityData.DueDate; 
			}
			
			set
			{
				if (this.entityData.DueDate == value)
					return;
					
				OnColumnChanging(FeeRefundCodeDtlColumn.DueDate, this.entityData.DueDate);
				this.entityData.DueDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefundCodeDtlColumn.DueDate, this.entityData.DueDate);
				OnPropertyChanged("DueDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RfndPrcnt property. 
		///		نسبة الاسترداد
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"نسبة الاسترداد"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal RfndPrcnt
		{
			get
			{
				return this.entityData.RfndPrcnt; 
			}
			
			set
			{
				if (this.entityData.RfndPrcnt == value)
					return;
					
				OnColumnChanging(FeeRefundCodeDtlColumn.RfndPrcnt, this.entityData.RfndPrcnt);
				this.entityData.RfndPrcnt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefundCodeDtlColumn.RfndPrcnt, this.entityData.RfndPrcnt);
				OnPropertyChanged("RfndPrcnt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeCodeItemRltId property. 
		///		البند المرتبط -لايمكن اضافته بمفرده- يتم التعامل بمجموع البند والبند المرتبط وتطبيق النسبة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeCodeItemRltIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"البند المرتبط -لايمكن اضافته بمفرده- يتم التعامل بمجموع البند والبند المرتبط وتطبيق النسبة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeeCodeItemRltId
		{
			get
			{
				return this.entityData.FeeCodeItemRltId; 
			}
			
			set
			{
				if (this.entityData.FeeCodeItemRltId == value)
					return;
					
				OnColumnChanging(FeeRefundCodeDtlColumn.FeeCodeItemRltId, this.entityData.FeeCodeItemRltId);
				this.entityData.FeeCodeItemRltId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefundCodeDtlColumn.FeeCodeItemRltId, this.entityData.FeeCodeItemRltId);
				OnPropertyChanged("FeeCodeItemRltId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeCodeItemPnftId property. 
		///		البند المرحل  عليه
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeCodeItemPnftIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"البند المرحل  عليه"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeeCodeItemPnftId
		{
			get
			{
				return this.entityData.FeeCodeItemPnftId; 
			}
			
			set
			{
				if (this.entityData.FeeCodeItemPnftId == value)
					return;
					
				OnColumnChanging(FeeRefundCodeDtlColumn.FeeCodeItemPnftId, this.entityData.FeeCodeItemPnftId);
				this.entityData.FeeCodeItemPnftId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefundCodeDtlColumn.FeeCodeItemPnftId, this.entityData.FeeCodeItemPnftId);
				OnPropertyChanged("FeeCodeItemPnftId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(FeeRefundCodeDtlColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefundCodeDtlColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(FeeRefundCodeDtlColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefundCodeDtlColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdeFee"/>.
		/// </summary>
		/// <value>The source AdmCdeFee for AdmCdeFeeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmCdeFee AdmCdeFeeIdSource
      	{
            get { return entityData.AdmCdeFeeIdSource; }
            set { entityData.AdmCdeFeeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeItem"/>.
		/// </summary>
		/// <value>The source FeeCodeItem for FeeCodeItemId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeCodeItem FeeCodeItemIdSource
      	{
            get { return entityData.FeeCodeItemIdSource; }
            set { entityData.FeeCodeItemIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeItem"/>.
		/// </summary>
		/// <value>The source FeeCodeItem for FeeCodeItemRltId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeCodeItem FeeCodeItemRltIdSource
      	{
            get { return entityData.FeeCodeItemRltIdSource; }
            set { entityData.FeeCodeItemRltIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeItem"/>.
		/// </summary>
		/// <value>The source FeeCodeItem for FeeCodeItemPnftId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeCodeItem FeeCodeItemPnftIdSource
      	{
            get { return entityData.FeeCodeItemPnftIdSource; }
            set { entityData.FeeCodeItemPnftIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeRefundCode"/>.
		/// </summary>
		/// <value>The source FeeRefundCode for FeeRefundCodeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeRefundCode FeeRefundCodeIdSource
      	{
            get { return entityData.FeeRefundCodeIdSource; }
            set { entityData.FeeRefundCodeIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "FEE_REFUND_CODE_DTL"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"FEE_REFUND_CODE_DTL_ID", "FEE_REFUND_CODE_ID", "FEE_CODE_ITEM_ID", "ADM_CDE_FEE_ID", "DUE_DATE", "RFND_PRCNT", "FEE_CODE_ITEM_RLT_ID", "FEE_CODE_ITEM_PNFT_ID", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as FeeRefundCodeDtlEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (FeeRefundCodeDtl) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<FeeRefundCodeDtl>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as FeeRefundCodeDtl);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed FeeRefundCodeDtl Entity 
		///</summary>
		protected virtual FeeRefundCodeDtl Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			FeeRefundCodeDtl copy = new FeeRefundCodeDtl();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.FeeRefundCodeDtlId = this.FeeRefundCodeDtlId;
					copy.OriginalFeeRefundCodeDtlId = this.OriginalFeeRefundCodeDtlId;
				copy.FeeRefundCodeId = this.FeeRefundCodeId;
				copy.FeeCodeItemId = this.FeeCodeItemId;
				copy.AdmCdeFeeId = this.AdmCdeFeeId;
				copy.DueDate = this.DueDate;
				copy.RfndPrcnt = this.RfndPrcnt;
				copy.FeeCodeItemRltId = this.FeeCodeItemRltId;
				copy.FeeCodeItemPnftId = this.FeeCodeItemPnftId;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.AdmCdeFeeIdSource != null && existingCopies.Contains(this.AdmCdeFeeIdSource))
				copy.AdmCdeFeeIdSource = existingCopies[this.AdmCdeFeeIdSource] as AdmCdeFee;
			else
				copy.AdmCdeFeeIdSource = MakeCopyOf(this.AdmCdeFeeIdSource, existingCopies) as AdmCdeFee;
			if (this.FeeCodeItemIdSource != null && existingCopies.Contains(this.FeeCodeItemIdSource))
				copy.FeeCodeItemIdSource = existingCopies[this.FeeCodeItemIdSource] as FeeCodeItem;
			else
				copy.FeeCodeItemIdSource = MakeCopyOf(this.FeeCodeItemIdSource, existingCopies) as FeeCodeItem;
			if (this.FeeCodeItemRltIdSource != null && existingCopies.Contains(this.FeeCodeItemRltIdSource))
				copy.FeeCodeItemRltIdSource = existingCopies[this.FeeCodeItemRltIdSource] as FeeCodeItem;
			else
				copy.FeeCodeItemRltIdSource = MakeCopyOf(this.FeeCodeItemRltIdSource, existingCopies) as FeeCodeItem;
			if (this.FeeCodeItemPnftIdSource != null && existingCopies.Contains(this.FeeCodeItemPnftIdSource))
				copy.FeeCodeItemPnftIdSource = existingCopies[this.FeeCodeItemPnftIdSource] as FeeCodeItem;
			else
				copy.FeeCodeItemPnftIdSource = MakeCopyOf(this.FeeCodeItemPnftIdSource, existingCopies) as FeeCodeItem;
			if (this.FeeRefundCodeIdSource != null && existingCopies.Contains(this.FeeRefundCodeIdSource))
				copy.FeeRefundCodeIdSource = existingCopies[this.FeeRefundCodeIdSource] as FeeRefundCode;
			else
				copy.FeeRefundCodeIdSource = MakeCopyOf(this.FeeRefundCodeIdSource, existingCopies) as FeeRefundCode;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed FeeRefundCodeDtl Entity 
		///</summary>
		public virtual FeeRefundCodeDtl Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed FeeRefundCodeDtl Entity which is a deep copy of the current entity.
		///</summary>
		public virtual FeeRefundCodeDtl DeepCopy()
		{
			return EntityHelper.Clone<FeeRefundCodeDtl>(this as FeeRefundCodeDtl);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as FeeRefundCodeDtlEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new FeeRefundCodeDtlEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as FeeRefundCodeDtlEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(FeeRefundCodeDtlColumn column)
		{
			switch(column)
			{
					case FeeRefundCodeDtlColumn.FeeRefundCodeDtlId:
					return entityData.FeeRefundCodeDtlId != _originalData.FeeRefundCodeDtlId;
					case FeeRefundCodeDtlColumn.FeeRefundCodeId:
					return entityData.FeeRefundCodeId != _originalData.FeeRefundCodeId;
					case FeeRefundCodeDtlColumn.FeeCodeItemId:
					return entityData.FeeCodeItemId != _originalData.FeeCodeItemId;
					case FeeRefundCodeDtlColumn.AdmCdeFeeId:
					return entityData.AdmCdeFeeId != _originalData.AdmCdeFeeId;
					case FeeRefundCodeDtlColumn.DueDate:
					return entityData.DueDate != _originalData.DueDate;
					case FeeRefundCodeDtlColumn.RfndPrcnt:
					return entityData.RfndPrcnt != _originalData.RfndPrcnt;
					case FeeRefundCodeDtlColumn.FeeCodeItemRltId:
					return entityData.FeeCodeItemRltId != _originalData.FeeCodeItemRltId;
					case FeeRefundCodeDtlColumn.FeeCodeItemPnftId:
					return entityData.FeeCodeItemPnftId != _originalData.FeeCodeItemPnftId;
					case FeeRefundCodeDtlColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case FeeRefundCodeDtlColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< FeeRefundCodeDtlColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.FeeRefundCodeDtlId != _originalData.FeeRefundCodeDtlId;
			result = result || entityData.FeeRefundCodeId != _originalData.FeeRefundCodeId;
			result = result || entityData.FeeCodeItemId != _originalData.FeeCodeItemId;
			result = result || entityData.AdmCdeFeeId != _originalData.AdmCdeFeeId;
			result = result || entityData.DueDate != _originalData.DueDate;
			result = result || entityData.RfndPrcnt != _originalData.RfndPrcnt;
			result = result || entityData.FeeCodeItemRltId != _originalData.FeeCodeItemRltId;
			result = result || entityData.FeeCodeItemPnftId != _originalData.FeeCodeItemPnftId;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a FeeRefundCodeDtl Entity with the original data.
		///</summary>
		public FeeRefundCodeDtl GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateFeeRefundCodeDtl(
				_originalData.FeeRefundCodeDtlId,
				_originalData.FeeRefundCodeId,
				_originalData.FeeCodeItemId,
				_originalData.AdmCdeFeeId,
				_originalData.DueDate,
				_originalData.RfndPrcnt,
				_originalData.FeeCodeItemRltId,
				_originalData.FeeCodeItemPnftId,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (FeeRefundCodeDtl)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="FeeRefundCodeDtlBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is FeeRefundCodeDtlBase)
				return ValueEquals(this, (FeeRefundCodeDtlBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="FeeRefundCodeDtlBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.FeeRefundCodeDtlId.GetHashCode() ^ 
					this.FeeRefundCodeId.GetHashCode() ^ 
					((this.FeeCodeItemId == null) ? string.Empty : this.FeeCodeItemId.ToString()).GetHashCode() ^ 
					((this.AdmCdeFeeId == null) ? string.Empty : this.AdmCdeFeeId.ToString()).GetHashCode() ^ 
					((this.DueDate == null) ? string.Empty : this.DueDate.ToString()).GetHashCode() ^ 
					this.RfndPrcnt.GetHashCode() ^ 
					((this.FeeCodeItemRltId == null) ? string.Empty : this.FeeCodeItemRltId.ToString()).GetHashCode() ^ 
					((this.FeeCodeItemPnftId == null) ? string.Empty : this.FeeCodeItemPnftId.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="FeeRefundCodeDtlBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(FeeRefundCodeDtlBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="FeeRefundCodeDtlBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="FeeRefundCodeDtlBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="FeeRefundCodeDtlBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(FeeRefundCodeDtlBase Object1, FeeRefundCodeDtlBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.FeeRefundCodeDtlId != Object2.FeeRefundCodeDtlId)
				equal = false;
			if (Object1.FeeRefundCodeId != Object2.FeeRefundCodeId)
				equal = false;
			if ( Object1.FeeCodeItemId != null && Object2.FeeCodeItemId != null )
			{
				if (Object1.FeeCodeItemId != Object2.FeeCodeItemId)
					equal = false;
			}
			else if (Object1.FeeCodeItemId == null ^ Object2.FeeCodeItemId == null )
			{
				equal = false;
			}
			if ( Object1.AdmCdeFeeId != null && Object2.AdmCdeFeeId != null )
			{
				if (Object1.AdmCdeFeeId != Object2.AdmCdeFeeId)
					equal = false;
			}
			else if (Object1.AdmCdeFeeId == null ^ Object2.AdmCdeFeeId == null )
			{
				equal = false;
			}
			if ( Object1.DueDate != null && Object2.DueDate != null )
			{
				if (Object1.DueDate != Object2.DueDate)
					equal = false;
			}
			else if (Object1.DueDate == null ^ Object2.DueDate == null )
			{
				equal = false;
			}
			if (Object1.RfndPrcnt != Object2.RfndPrcnt)
				equal = false;
			if ( Object1.FeeCodeItemRltId != null && Object2.FeeCodeItemRltId != null )
			{
				if (Object1.FeeCodeItemRltId != Object2.FeeCodeItemRltId)
					equal = false;
			}
			else if (Object1.FeeCodeItemRltId == null ^ Object2.FeeCodeItemRltId == null )
			{
				equal = false;
			}
			if ( Object1.FeeCodeItemPnftId != null && Object2.FeeCodeItemPnftId != null )
			{
				if (Object1.FeeCodeItemPnftId != Object2.FeeCodeItemPnftId)
					equal = false;
			}
			else if (Object1.FeeCodeItemPnftId == null ^ Object2.FeeCodeItemPnftId == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((FeeRefundCodeDtlBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static FeeRefundCodeDtlComparer GetComparer()
        {
            return new FeeRefundCodeDtlComparer();
        }
        */

        // Comparer delegates back to FeeRefundCodeDtl
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(FeeRefundCodeDtl rhs, FeeRefundCodeDtlColumn which)
        {
            switch (which)
            {
            	
            	
            	case FeeRefundCodeDtlColumn.FeeRefundCodeDtlId:
            		return this.FeeRefundCodeDtlId.CompareTo(rhs.FeeRefundCodeDtlId);
            		
            		                 
            	
            	
            	case FeeRefundCodeDtlColumn.FeeRefundCodeId:
            		return this.FeeRefundCodeId.CompareTo(rhs.FeeRefundCodeId);
            		
            		                 
            	
            	
            	case FeeRefundCodeDtlColumn.FeeCodeItemId:
            		return this.FeeCodeItemId.Value.CompareTo(rhs.FeeCodeItemId.Value);
            		
            		                 
            	
            	
            	case FeeRefundCodeDtlColumn.AdmCdeFeeId:
            		return this.AdmCdeFeeId.Value.CompareTo(rhs.AdmCdeFeeId.Value);
            		
            		                 
            	
            	
            	case FeeRefundCodeDtlColumn.DueDate:
            		return this.DueDate.Value.CompareTo(rhs.DueDate.Value);
            		
            		                 
            	
            	
            	case FeeRefundCodeDtlColumn.RfndPrcnt:
            		return this.RfndPrcnt.CompareTo(rhs.RfndPrcnt);
            		
            		                 
            	
            	
            	case FeeRefundCodeDtlColumn.FeeCodeItemRltId:
            		return this.FeeCodeItemRltId.Value.CompareTo(rhs.FeeCodeItemRltId.Value);
            		
            		                 
            	
            	
            	case FeeRefundCodeDtlColumn.FeeCodeItemPnftId:
            		return this.FeeCodeItemPnftId.Value.CompareTo(rhs.FeeCodeItemPnftId.Value);
            		
            		                 
            	
            	
            	case FeeRefundCodeDtlColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case FeeRefundCodeDtlColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<FeeRefundCodeDtlKey> Members
		
		// member variable for the EntityId property
		private FeeRefundCodeDtlKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual FeeRefundCodeDtlKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new FeeRefundCodeDtlKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("FeeRefundCodeDtl")
					.Append("|").Append( this.FeeRefundCodeDtlId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{11}{10}- FeeRefundCodeDtlId: {0}{10}- FeeRefundCodeId: {1}{10}- FeeCodeItemId: {2}{10}- AdmCdeFeeId: {3}{10}- DueDate: {4}{10}- RfndPrcnt: {5}{10}- FeeCodeItemRltId: {6}{10}- FeeCodeItemPnftId: {7}{10}- SeUserId: {8}{10}- LastDate: {9}{10}{12}", 
				this.FeeRefundCodeDtlId,
				this.FeeRefundCodeId,
				(this.FeeCodeItemId == null) ? string.Empty : this.FeeCodeItemId.ToString(),
				(this.AdmCdeFeeId == null) ? string.Empty : this.AdmCdeFeeId.ToString(),
				(this.DueDate == null) ? string.Empty : this.DueDate.ToString(),
				this.RfndPrcnt,
				(this.FeeCodeItemRltId == null) ? string.Empty : this.FeeCodeItemRltId.ToString(),
				(this.FeeCodeItemPnftId == null) ? string.Empty : this.FeeCodeItemPnftId.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'FEE_REFUND_CODE_DTL' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class FeeRefundCodeDtlEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// FEE_REFUND_CODE_DTL_ID : تفاصيل لائحة الاسترداد
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "FEE_REFUND_CODE_DTL"</remarks>
		public System.Decimal FeeRefundCodeDtlId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalFeeRefundCodeDtlId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// FEE_REFUND_CODE_ID : RFND_ID لائحة الاسترداد
		/// </summary>
		public System.Decimal		  FeeRefundCodeId = 0.0m;
		
		/// <summary>
		/// FEE_CODE_ITEM_ID : البند المسترد
		/// </summary>
		public System.Decimal?		  FeeCodeItemId = null;
		
		/// <summary>
		/// ADM_CDE_FEE_ID : لائحة بنود مصروفات القبول
		/// </summary>
		public System.Decimal?		  AdmCdeFeeId = null;
		
		/// <summary>
		/// DUE_DATE : تاريخ الاستحقاق-اخر تاريخ دفع يوم-شهر
		/// </summary>
		public System.DateTime?		  DueDate = null;
		
		/// <summary>
		/// RFND_PRCNT : نسبة الاسترداد
		/// </summary>
		public System.Decimal		  RfndPrcnt = 0.0m;
		
		/// <summary>
		/// FEE_CODE_ITEM_RLT_ID : البند المرتبط -لايمكن اضافته بمفرده- يتم التعامل بمجموع البند والبند المرتبط وتطبيق النسبة
		/// </summary>
		public System.Decimal?		  FeeCodeItemRltId = null;
		
		/// <summary>
		/// FEE_CODE_ITEM_PNFT_ID : البند المرحل  عليه
		/// </summary>
		public System.Decimal?		  FeeCodeItemPnftId = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdmCdeFee _admCdeFeeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdeFee"/>.
		/// </summary>
		/// <value>The source AdmCdeFee for AdmCdeFeeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmCdeFee AdmCdeFeeIdSource
      	{
            get { return this._admCdeFeeIdSource; }
            set { this._admCdeFeeIdSource = value; }
      	}
		private FeeCodeItem _feeCodeItemIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeItem"/>.
		/// </summary>
		/// <value>The source FeeCodeItem for FeeCodeItemId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeCodeItem FeeCodeItemIdSource
      	{
            get { return this._feeCodeItemIdSource; }
            set { this._feeCodeItemIdSource = value; }
      	}
		private FeeCodeItem _feeCodeItemRltIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeItem"/>.
		/// </summary>
		/// <value>The source FeeCodeItem for FeeCodeItemRltId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeCodeItem FeeCodeItemRltIdSource
      	{
            get { return this._feeCodeItemRltIdSource; }
            set { this._feeCodeItemRltIdSource = value; }
      	}
		private FeeCodeItem _feeCodeItemPnftIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeItem"/>.
		/// </summary>
		/// <value>The source FeeCodeItem for FeeCodeItemPnftId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeCodeItem FeeCodeItemPnftIdSource
      	{
            get { return this._feeCodeItemPnftIdSource; }
            set { this._feeCodeItemPnftIdSource = value; }
      	}
		private FeeRefundCode _feeRefundCodeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeRefundCode"/>.
		/// </summary>
		/// <value>The source FeeRefundCode for FeeRefundCodeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeRefundCode FeeRefundCodeIdSource
      	{
            get { return this._feeRefundCodeIdSource; }
            set { this._feeRefundCodeIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			FeeRefundCodeDtlEntityData _tmp = new FeeRefundCodeDtlEntityData();
						
			_tmp.FeeRefundCodeDtlId = this.FeeRefundCodeDtlId;
			_tmp.OriginalFeeRefundCodeDtlId = this.OriginalFeeRefundCodeDtlId;
			
			_tmp.FeeRefundCodeId = this.FeeRefundCodeId;
			_tmp.FeeCodeItemId = this.FeeCodeItemId;
			_tmp.AdmCdeFeeId = this.AdmCdeFeeId;
			_tmp.DueDate = this.DueDate;
			_tmp.RfndPrcnt = this.RfndPrcnt;
			_tmp.FeeCodeItemRltId = this.FeeCodeItemRltId;
			_tmp.FeeCodeItemPnftId = this.FeeCodeItemPnftId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.AdmCdeFeeIdSource != null)
				_tmp.AdmCdeFeeIdSource = MakeCopyOf(this.AdmCdeFeeIdSource) as AdmCdeFee;
			if (this.FeeCodeItemIdSource != null)
				_tmp.FeeCodeItemIdSource = MakeCopyOf(this.FeeCodeItemIdSource) as FeeCodeItem;
			if (this.FeeCodeItemRltIdSource != null)
				_tmp.FeeCodeItemRltIdSource = MakeCopyOf(this.FeeCodeItemRltIdSource) as FeeCodeItem;
			if (this.FeeCodeItemPnftIdSource != null)
				_tmp.FeeCodeItemPnftIdSource = MakeCopyOf(this.FeeCodeItemPnftIdSource) as FeeCodeItem;
			if (this.FeeRefundCodeIdSource != null)
				_tmp.FeeRefundCodeIdSource = MakeCopyOf(this.FeeRefundCodeIdSource) as FeeRefundCode;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			FeeRefundCodeDtlEntityData _tmp = new FeeRefundCodeDtlEntityData();
						
			_tmp.FeeRefundCodeDtlId = this.FeeRefundCodeDtlId;
			_tmp.OriginalFeeRefundCodeDtlId = this.OriginalFeeRefundCodeDtlId;
			
			_tmp.FeeRefundCodeId = this.FeeRefundCodeId;
			_tmp.FeeCodeItemId = this.FeeCodeItemId;
			_tmp.AdmCdeFeeId = this.AdmCdeFeeId;
			_tmp.DueDate = this.DueDate;
			_tmp.RfndPrcnt = this.RfndPrcnt;
			_tmp.FeeCodeItemRltId = this.FeeCodeItemRltId;
			_tmp.FeeCodeItemPnftId = this.FeeCodeItemPnftId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.AdmCdeFeeIdSource != null && existingCopies.Contains(this.AdmCdeFeeIdSource))
				_tmp.AdmCdeFeeIdSource = existingCopies[this.AdmCdeFeeIdSource] as AdmCdeFee;
			else
				_tmp.AdmCdeFeeIdSource = MakeCopyOf(this.AdmCdeFeeIdSource, existingCopies) as AdmCdeFee;
			if (this.FeeCodeItemIdSource != null && existingCopies.Contains(this.FeeCodeItemIdSource))
				_tmp.FeeCodeItemIdSource = existingCopies[this.FeeCodeItemIdSource] as FeeCodeItem;
			else
				_tmp.FeeCodeItemIdSource = MakeCopyOf(this.FeeCodeItemIdSource, existingCopies) as FeeCodeItem;
			if (this.FeeCodeItemRltIdSource != null && existingCopies.Contains(this.FeeCodeItemRltIdSource))
				_tmp.FeeCodeItemRltIdSource = existingCopies[this.FeeCodeItemRltIdSource] as FeeCodeItem;
			else
				_tmp.FeeCodeItemRltIdSource = MakeCopyOf(this.FeeCodeItemRltIdSource, existingCopies) as FeeCodeItem;
			if (this.FeeCodeItemPnftIdSource != null && existingCopies.Contains(this.FeeCodeItemPnftIdSource))
				_tmp.FeeCodeItemPnftIdSource = existingCopies[this.FeeCodeItemPnftIdSource] as FeeCodeItem;
			else
				_tmp.FeeCodeItemPnftIdSource = MakeCopyOf(this.FeeCodeItemPnftIdSource, existingCopies) as FeeCodeItem;
			if (this.FeeRefundCodeIdSource != null && existingCopies.Contains(this.FeeRefundCodeIdSource))
				_tmp.FeeRefundCodeIdSource = existingCopies[this.FeeRefundCodeIdSource] as FeeRefundCode;
			else
				_tmp.FeeRefundCodeIdSource = MakeCopyOf(this.FeeRefundCodeIdSource, existingCopies) as FeeRefundCode;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeRefundCodeDtlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(FeeRefundCodeDtlColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeRefundCodeDtlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(FeeRefundCodeDtlColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeRefundCodeDtlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(FeeRefundCodeDtlColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				FeeRefundCodeDtlEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new FeeRefundCodeDtlEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeRefundCodeDtlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(FeeRefundCodeDtlColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				FeeRefundCodeDtlEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new FeeRefundCodeDtlEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region FeeRefundCodeDtlEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="FeeRefundCodeDtl"/> object.
	/// </remarks>
	public class FeeRefundCodeDtlEventArgs : System.EventArgs
	{
		private FeeRefundCodeDtlColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the FeeRefundCodeDtlEventArgs class.
		///</summary>
		public FeeRefundCodeDtlEventArgs(FeeRefundCodeDtlColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the FeeRefundCodeDtlEventArgs class.
		///</summary>
		public FeeRefundCodeDtlEventArgs(FeeRefundCodeDtlColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The FeeRefundCodeDtlColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="FeeRefundCodeDtlColumn" />
		public FeeRefundCodeDtlColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all FeeRefundCodeDtl related events.
	///</summary>
	public delegate void FeeRefundCodeDtlEventHandler(object sender, FeeRefundCodeDtlEventArgs e);
	
	#region FeeRefundCodeDtlComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class FeeRefundCodeDtlComparer : System.Collections.Generic.IComparer<FeeRefundCodeDtl>
	{
		FeeRefundCodeDtlColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:FeeRefundCodeDtlComparer"/> class.
        /// </summary>
		public FeeRefundCodeDtlComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:FeeRefundCodeDtlComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public FeeRefundCodeDtlComparer(FeeRefundCodeDtlColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="FeeRefundCodeDtl"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="FeeRefundCodeDtl"/> to compare.</param>
        /// <param name="b">The second <c>FeeRefundCodeDtl</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(FeeRefundCodeDtl a, FeeRefundCodeDtl b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(FeeRefundCodeDtl entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(FeeRefundCodeDtl a, FeeRefundCodeDtl b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public FeeRefundCodeDtlColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region FeeRefundCodeDtlKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="FeeRefundCodeDtl"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class FeeRefundCodeDtlKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the FeeRefundCodeDtlKey class.
		/// </summary>
		public FeeRefundCodeDtlKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeRefundCodeDtlKey class.
		/// </summary>
		public FeeRefundCodeDtlKey(FeeRefundCodeDtlBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.FeeRefundCodeDtlId = entity.FeeRefundCodeDtlId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeRefundCodeDtlKey class.
		/// </summary>
		public FeeRefundCodeDtlKey(System.Decimal _feeRefundCodeDtlId)
		{
			#region Init Properties

			this.FeeRefundCodeDtlId = _feeRefundCodeDtlId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private FeeRefundCodeDtlBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public FeeRefundCodeDtlBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the FeeRefundCodeDtlId property
		private System.Decimal _feeRefundCodeDtlId;
		
		/// <summary>
		/// Gets or sets the FeeRefundCodeDtlId property.
		/// </summary>
		public System.Decimal FeeRefundCodeDtlId
		{
			get { return _feeRefundCodeDtlId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.FeeRefundCodeDtlId = value;
				
				_feeRefundCodeDtlId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				FeeRefundCodeDtlId = ( values["FeeRefundCodeDtlId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["FeeRefundCodeDtlId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("FeeRefundCodeDtlId", FeeRefundCodeDtlId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("FeeRefundCodeDtlId: {0}{1}",
								FeeRefundCodeDtlId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region FeeRefundCodeDtlColumn Enum
	
	/// <summary>
	/// Enumerate the FeeRefundCodeDtl columns.
	/// </summary>
	[Serializable]
	public enum FeeRefundCodeDtlColumn : int
	{
		/// <summary>
		/// FeeRefundCodeDtlId : تفاصيل لائحة الاسترداد
		/// </summary>
		[EnumTextValue("FEE_REFUND_CODE_DTL_ID")]
		[ColumnEnum("FEE_REFUND_CODE_DTL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		FeeRefundCodeDtlId = 1,
		/// <summary>
		/// FeeRefundCodeId : RFND_ID لائحة الاسترداد
		/// </summary>
		[EnumTextValue("FEE_REFUND_CODE_ID")]
		[ColumnEnum("FEE_REFUND_CODE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		FeeRefundCodeId = 2,
		/// <summary>
		/// FeeCodeItemId : البند المسترد
		/// </summary>
		[EnumTextValue("FEE_CODE_ITEM_ID")]
		[ColumnEnum("FEE_CODE_ITEM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeeCodeItemId = 3,
		/// <summary>
		/// AdmCdeFeeId : لائحة بنود مصروفات القبول
		/// </summary>
		[EnumTextValue("ADM_CDE_FEE_ID")]
		[ColumnEnum("ADM_CDE_FEE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmCdeFeeId = 4,
		/// <summary>
		/// DueDate : تاريخ الاستحقاق-اخر تاريخ دفع يوم-شهر
		/// </summary>
		[EnumTextValue("DUE_DATE")]
		[ColumnEnum("DUE_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		DueDate = 5,
		/// <summary>
		/// RfndPrcnt : نسبة الاسترداد
		/// </summary>
		[EnumTextValue("RFND_PRCNT")]
		[ColumnEnum("RFND_PRCNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		RfndPrcnt = 6,
		/// <summary>
		/// FeeCodeItemRltId : البند المرتبط -لايمكن اضافته بمفرده- يتم التعامل بمجموع البند والبند المرتبط وتطبيق النسبة
		/// </summary>
		[EnumTextValue("FEE_CODE_ITEM_RLT_ID")]
		[ColumnEnum("FEE_CODE_ITEM_RLT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeeCodeItemRltId = 7,
		/// <summary>
		/// FeeCodeItemPnftId : البند المرحل  عليه
		/// </summary>
		[EnumTextValue("FEE_CODE_ITEM_PNFT_ID")]
		[ColumnEnum("FEE_CODE_ITEM_PNFT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeeCodeItemPnftId = 8,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 9,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 10
	}//End enum

	#endregion FeeRefundCodeDtlColumn Enum

} // end namespace
