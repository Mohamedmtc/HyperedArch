
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file FeeRefndStdReq.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'FEE_REFND_STD_REQ' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class FeeRefndStdReqBase : EntityBase, IFeeRefndStdReq, IEntityId<FeeRefndStdReqKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private FeeRefndStdReqEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private FeeRefndStdReqEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private FeeRefndStdReqEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<FeeRefndStdReq> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeRefndStdReqEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeRefndStdReqEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="FeeRefndStdReqBase"/> instance.
		///</summary>
		public FeeRefndStdReqBase()
		{
			this.entityData = new FeeRefndStdReqEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="FeeRefndStdReqBase"/> instance.
		///</summary>
		///<param name="_feeRefndStdReqId"></param>
		///<param name="_rfndDate"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_edStudId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_totRfndValue"></param>
		///<param name="_totRfndPrcnt"></param>
		///<param name="_rfndReason"></param>
		///<param name="_currencyId"></param>
		///<param name="_gsCodeReqStatusId"></param>
		///<param name="_notes"></param>
		///<param name="_rfndNumber"></param>
		///<param name="_calcRfndValue"></param>
		///<param name="_calcRfndPrcnt"></param>
		///<param name="_studFeeBalance">رصيد الطالب الحالى</param>
		///<param name="_refndTypeId">0:  من بند الى رصيد
		/// 		///  بند الى كاش: 1
		/// 		/// 2: بند الى شيك
		/// 		/// 3 : رصيد  لكاش
		/// 		/// 4: رصيد ل شيك
		/// 		/// </param>
		///<param name="_admApplicantId"></param>
		///<param name="_cancelFlg"></param>
		///<param name="_cancelDate"></param>
		///<param name="_seUserCnclId"></param>
		///<param name="_seUserId"></param>
		///<param name="_userName"></param>
		///<param name="_lastDate"></param>
		///<param name="_cheqNum">رقم الشيك فى حالة دفع بالشيك</param>
		///<param name="_accntNum">رقم حساب البنك  فى حالة ايداع&&في حالة السداد من نوع "الشيك"  يجب اظهار البنوك للاختيار منها وبعد اختيار البنك يقوم النظام باظهار رقم الحساب الخاص بالبنك</param>
		///<param name="_feeCodeBankId">في حالة وسيلة الدفع "شيك" يتم ادخال البنك ورقم الحساب ورقم الشيك وتاريخ استحقاق الشيك</param>
		public FeeRefndStdReqBase(System.Decimal _feeRefndStdReqId, System.DateTime _rfndDate, 
			System.Decimal _asFacultyInfoId, System.Decimal? _edStudId, System.Decimal _edAcadYearId, 
			System.Decimal _edCodeSemesterId, System.Decimal? _totRfndValue, System.Decimal? _totRfndPrcnt, 
			System.String _rfndReason, System.Decimal _currencyId, System.Decimal? _gsCodeReqStatusId, 
			System.String _notes, System.String _rfndNumber, System.Decimal? _calcRfndValue, 
			System.Decimal? _calcRfndPrcnt, System.Decimal? _studFeeBalance, System.Int32? _refndTypeId, 
			System.Decimal? _admApplicantId, System.Boolean? _cancelFlg, System.DateTime? _cancelDate, 
			System.Decimal? _seUserCnclId, System.Decimal? _seUserId, System.String _userName, 
			System.DateTime? _lastDate, System.String _cheqNum, System.String _accntNum, 
			System.Decimal? _feeCodeBankId)
		{
			this.entityData = new FeeRefndStdReqEntityData();
			this.backupData = null;

			this.FeeRefndStdReqId = _feeRefndStdReqId;
			this.RfndDate = _rfndDate;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.EdStudId = _edStudId;
			this.EdAcadYearId = _edAcadYearId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.TotRfndValue = _totRfndValue;
			this.TotRfndPrcnt = _totRfndPrcnt;
			this.RfndReason = _rfndReason;
			this.CurrencyId = _currencyId;
			this.GsCodeReqStatusId = _gsCodeReqStatusId;
			this.Notes = _notes;
			this.RfndNumber = _rfndNumber;
			this.CalcRfndValue = _calcRfndValue;
			this.CalcRfndPrcnt = _calcRfndPrcnt;
			this.StudFeeBalance = _studFeeBalance;
			this.RefndTypeId = _refndTypeId;
			this.AdmApplicantId = _admApplicantId;
			this.CancelFlg = _cancelFlg;
			this.CancelDate = _cancelDate;
			this.SeUserCnclId = _seUserCnclId;
			this.SeUserId = _seUserId;
			this.UserName = _userName;
			this.LastDate = _lastDate;
			this.CheqNum = _cheqNum;
			this.AccntNum = _accntNum;
			this.FeeCodeBankId = _feeCodeBankId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="FeeRefndStdReq"/> instance.
		///</summary>
		///<param name="_feeRefndStdReqId"></param>
		///<param name="_rfndDate"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_edStudId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_totRfndValue"></param>
		///<param name="_totRfndPrcnt"></param>
		///<param name="_rfndReason"></param>
		///<param name="_currencyId"></param>
		///<param name="_gsCodeReqStatusId"></param>
		///<param name="_notes"></param>
		///<param name="_rfndNumber"></param>
		///<param name="_calcRfndValue"></param>
		///<param name="_calcRfndPrcnt"></param>
		///<param name="_studFeeBalance">رصيد الطالب الحالى</param>
		///<param name="_refndTypeId">0:  من بند الى رصيد
		/// 		///  بند الى كاش: 1
		/// 		/// 2: بند الى شيك
		/// 		/// 3 : رصيد  لكاش
		/// 		/// 4: رصيد ل شيك
		/// 		/// </param>
		///<param name="_admApplicantId"></param>
		///<param name="_cancelFlg"></param>
		///<param name="_cancelDate"></param>
		///<param name="_seUserCnclId"></param>
		///<param name="_seUserId"></param>
		///<param name="_userName"></param>
		///<param name="_lastDate"></param>
		///<param name="_cheqNum">رقم الشيك فى حالة دفع بالشيك</param>
		///<param name="_accntNum">رقم حساب البنك  فى حالة ايداع&&في حالة السداد من نوع "الشيك"  يجب اظهار البنوك للاختيار منها وبعد اختيار البنك يقوم النظام باظهار رقم الحساب الخاص بالبنك</param>
		///<param name="_feeCodeBankId">في حالة وسيلة الدفع "شيك" يتم ادخال البنك ورقم الحساب ورقم الشيك وتاريخ استحقاق الشيك</param>
		public static FeeRefndStdReq CreateFeeRefndStdReq(System.Decimal _feeRefndStdReqId, System.DateTime _rfndDate, 
			System.Decimal _asFacultyInfoId, System.Decimal? _edStudId, System.Decimal _edAcadYearId, 
			System.Decimal _edCodeSemesterId, System.Decimal? _totRfndValue, System.Decimal? _totRfndPrcnt, 
			System.String _rfndReason, System.Decimal _currencyId, System.Decimal? _gsCodeReqStatusId, 
			System.String _notes, System.String _rfndNumber, System.Decimal? _calcRfndValue, 
			System.Decimal? _calcRfndPrcnt, System.Decimal? _studFeeBalance, System.Int32? _refndTypeId, 
			System.Decimal? _admApplicantId, System.Boolean? _cancelFlg, System.DateTime? _cancelDate, 
			System.Decimal? _seUserCnclId, System.Decimal? _seUserId, System.String _userName, 
			System.DateTime? _lastDate, System.String _cheqNum, System.String _accntNum, 
			System.Decimal? _feeCodeBankId)
		{
			FeeRefndStdReq newFeeRefndStdReq = new FeeRefndStdReq();
			newFeeRefndStdReq.FeeRefndStdReqId = _feeRefndStdReqId;
			newFeeRefndStdReq.RfndDate = _rfndDate;
			newFeeRefndStdReq.AsFacultyInfoId = _asFacultyInfoId;
			newFeeRefndStdReq.EdStudId = _edStudId;
			newFeeRefndStdReq.EdAcadYearId = _edAcadYearId;
			newFeeRefndStdReq.EdCodeSemesterId = _edCodeSemesterId;
			newFeeRefndStdReq.TotRfndValue = _totRfndValue;
			newFeeRefndStdReq.TotRfndPrcnt = _totRfndPrcnt;
			newFeeRefndStdReq.RfndReason = _rfndReason;
			newFeeRefndStdReq.CurrencyId = _currencyId;
			newFeeRefndStdReq.GsCodeReqStatusId = _gsCodeReqStatusId;
			newFeeRefndStdReq.Notes = _notes;
			newFeeRefndStdReq.RfndNumber = _rfndNumber;
			newFeeRefndStdReq.CalcRfndValue = _calcRfndValue;
			newFeeRefndStdReq.CalcRfndPrcnt = _calcRfndPrcnt;
			newFeeRefndStdReq.StudFeeBalance = _studFeeBalance;
			newFeeRefndStdReq.RefndTypeId = _refndTypeId;
			newFeeRefndStdReq.AdmApplicantId = _admApplicantId;
			newFeeRefndStdReq.CancelFlg = _cancelFlg;
			newFeeRefndStdReq.CancelDate = _cancelDate;
			newFeeRefndStdReq.SeUserCnclId = _seUserCnclId;
			newFeeRefndStdReq.SeUserId = _seUserId;
			newFeeRefndStdReq.UserName = _userName;
			newFeeRefndStdReq.LastDate = _lastDate;
			newFeeRefndStdReq.CheqNum = _cheqNum;
			newFeeRefndStdReq.AccntNum = _accntNum;
			newFeeRefndStdReq.FeeCodeBankId = _feeCodeBankId;
			return newFeeRefndStdReq;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the FeeRefndStdReqId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal FeeRefndStdReqId
		{
			get
			{
				return this.entityData.FeeRefndStdReqId; 
			}
			
			set
			{
				if (this.entityData.FeeRefndStdReqId == value)
					return;
					
				OnColumnChanging(FeeRefndStdReqColumn.FeeRefndStdReqId, this.entityData.FeeRefndStdReqId);
				this.entityData.FeeRefndStdReqId = value;
				this.EntityId.FeeRefndStdReqId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdReqColumn.FeeRefndStdReqId, this.entityData.FeeRefndStdReqId);
				OnPropertyChanged("FeeRefndStdReqId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the FEE_REFND_STD_REQ_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the FEE_REFND_STD_REQ_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalFeeRefndStdReqId
		{
			get { return this.entityData.OriginalFeeRefndStdReqId; }
			set { this.entityData.OriginalFeeRefndStdReqId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the RfndDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime RfndDate
		{
			get
			{
				return this.entityData.RfndDate; 
			}
			
			set
			{
				if (this.entityData.RfndDate == value)
					return;
					
				OnColumnChanging(FeeRefndStdReqColumn.RfndDate, this.entityData.RfndDate);
				this.entityData.RfndDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdReqColumn.RfndDate, this.entityData.RfndDate);
				OnPropertyChanged("RfndDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(FeeRefndStdReqColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdReqColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdStudIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(FeeRefndStdReqColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdReqColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(FeeRefndStdReqColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdReqColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(FeeRefndStdReqColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdReqColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotRfndValue property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotRfndValueNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotRfndValue
		{
			get
			{
				return this.entityData.TotRfndValue; 
			}
			
			set
			{
				if (this.entityData.TotRfndValue == value)
					return;
					
				OnColumnChanging(FeeRefndStdReqColumn.TotRfndValue, this.entityData.TotRfndValue);
				this.entityData.TotRfndValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdReqColumn.TotRfndValue, this.entityData.TotRfndValue);
				OnPropertyChanged("TotRfndValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotRfndPrcnt property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotRfndPrcntNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotRfndPrcnt
		{
			get
			{
				return this.entityData.TotRfndPrcnt; 
			}
			
			set
			{
				if (this.entityData.TotRfndPrcnt == value)
					return;
					
				OnColumnChanging(FeeRefndStdReqColumn.TotRfndPrcnt, this.entityData.TotRfndPrcnt);
				this.entityData.TotRfndPrcnt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdReqColumn.TotRfndPrcnt, this.entityData.TotRfndPrcnt);
				OnPropertyChanged("TotRfndPrcnt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RfndReason property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String RfndReason
		{
			get
			{
				return this.entityData.RfndReason; 
			}
			
			set
			{
				if (this.entityData.RfndReason == value)
					return;
					
				OnColumnChanging(FeeRefndStdReqColumn.RfndReason, this.entityData.RfndReason);
				this.entityData.RfndReason = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdReqColumn.RfndReason, this.entityData.RfndReason);
				OnPropertyChanged("RfndReason");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CurrencyId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal CurrencyId
		{
			get
			{
				return this.entityData.CurrencyId; 
			}
			
			set
			{
				if (this.entityData.CurrencyId == value)
					return;
					
				OnColumnChanging(FeeRefndStdReqColumn.CurrencyId, this.entityData.CurrencyId);
				this.entityData.CurrencyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdReqColumn.CurrencyId, this.entityData.CurrencyId);
				OnPropertyChanged("CurrencyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeReqStatusId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCodeReqStatusIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCodeReqStatusId
		{
			get
			{
				return this.entityData.GsCodeReqStatusId; 
			}
			
			set
			{
				if (this.entityData.GsCodeReqStatusId == value)
					return;
					
				OnColumnChanging(FeeRefndStdReqColumn.GsCodeReqStatusId, this.entityData.GsCodeReqStatusId);
				this.entityData.GsCodeReqStatusId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdReqColumn.GsCodeReqStatusId, this.entityData.GsCodeReqStatusId);
				OnPropertyChanged("GsCodeReqStatusId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(FeeRefndStdReqColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdReqColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RfndNumber property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String RfndNumber
		{
			get
			{
				return this.entityData.RfndNumber; 
			}
			
			set
			{
				if (this.entityData.RfndNumber == value)
					return;
					
				OnColumnChanging(FeeRefndStdReqColumn.RfndNumber, this.entityData.RfndNumber);
				this.entityData.RfndNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdReqColumn.RfndNumber, this.entityData.RfndNumber);
				OnPropertyChanged("RfndNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CalcRfndValue property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCalcRfndValueNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CalcRfndValue
		{
			get
			{
				return this.entityData.CalcRfndValue; 
			}
			
			set
			{
				if (this.entityData.CalcRfndValue == value)
					return;
					
				OnColumnChanging(FeeRefndStdReqColumn.CalcRfndValue, this.entityData.CalcRfndValue);
				this.entityData.CalcRfndValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdReqColumn.CalcRfndValue, this.entityData.CalcRfndValue);
				OnPropertyChanged("CalcRfndValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CalcRfndPrcnt property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCalcRfndPrcntNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CalcRfndPrcnt
		{
			get
			{
				return this.entityData.CalcRfndPrcnt; 
			}
			
			set
			{
				if (this.entityData.CalcRfndPrcnt == value)
					return;
					
				OnColumnChanging(FeeRefndStdReqColumn.CalcRfndPrcnt, this.entityData.CalcRfndPrcnt);
				this.entityData.CalcRfndPrcnt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdReqColumn.CalcRfndPrcnt, this.entityData.CalcRfndPrcnt);
				OnPropertyChanged("CalcRfndPrcnt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StudFeeBalance property. 
		///		رصيد الطالب الحالى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsStudFeeBalanceNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"رصيد الطالب الحالى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? StudFeeBalance
		{
			get
			{
				return this.entityData.StudFeeBalance; 
			}
			
			set
			{
				if (this.entityData.StudFeeBalance == value)
					return;
					
				OnColumnChanging(FeeRefndStdReqColumn.StudFeeBalance, this.entityData.StudFeeBalance);
				this.entityData.StudFeeBalance = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdReqColumn.StudFeeBalance, this.entityData.StudFeeBalance);
				OnPropertyChanged("StudFeeBalance");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RefndTypeId property. 
		///		0:  من بند الى رصيد
		/// 		///  بند الى كاش: 1
		/// 		/// 2: بند الى شيك
		/// 		/// 3 : رصيد  لكاش
		/// 		/// 4: رصيد ل شيك
		/// 		/// 
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsRefndTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"0:  من بند الى رصيد  بند الى كاش: 1 2: بند الى شيك 3 : رصيد  لكاش 4: رصيد ل شيك "), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? RefndTypeId
		{
			get
			{
				return this.entityData.RefndTypeId; 
			}
			
			set
			{
				if (this.entityData.RefndTypeId == value)
					return;
					
				OnColumnChanging(FeeRefndStdReqColumn.RefndTypeId, this.entityData.RefndTypeId);
				this.entityData.RefndTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdReqColumn.RefndTypeId, this.entityData.RefndTypeId);
				OnPropertyChanged("RefndTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmApplicantId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmApplicantIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmApplicantId
		{
			get
			{
				return this.entityData.AdmApplicantId; 
			}
			
			set
			{
				if (this.entityData.AdmApplicantId == value)
					return;
					
				OnColumnChanging(FeeRefndStdReqColumn.AdmApplicantId, this.entityData.AdmApplicantId);
				this.entityData.AdmApplicantId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdReqColumn.AdmApplicantId, this.entityData.AdmApplicantId);
				OnPropertyChanged("AdmApplicantId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CancelFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsCancelFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? CancelFlg
		{
			get
			{
				return this.entityData.CancelFlg; 
			}
			
			set
			{
				if (this.entityData.CancelFlg == value)
					return;
					
				OnColumnChanging(FeeRefndStdReqColumn.CancelFlg, this.entityData.CancelFlg);
				this.entityData.CancelFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdReqColumn.CancelFlg, this.entityData.CancelFlg);
				OnPropertyChanged("CancelFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CancelDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCancelDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CancelDate
		{
			get
			{
				return this.entityData.CancelDate; 
			}
			
			set
			{
				if (this.entityData.CancelDate == value)
					return;
					
				OnColumnChanging(FeeRefndStdReqColumn.CancelDate, this.entityData.CancelDate);
				this.entityData.CancelDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdReqColumn.CancelDate, this.entityData.CancelDate);
				OnPropertyChanged("CancelDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserCnclId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserCnclIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserCnclId
		{
			get
			{
				return this.entityData.SeUserCnclId; 
			}
			
			set
			{
				if (this.entityData.SeUserCnclId == value)
					return;
					
				OnColumnChanging(FeeRefndStdReqColumn.SeUserCnclId, this.entityData.SeUserCnclId);
				this.entityData.SeUserCnclId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdReqColumn.SeUserCnclId, this.entityData.SeUserCnclId);
				OnPropertyChanged("SeUserCnclId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(FeeRefndStdReqColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdReqColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String UserName
		{
			get
			{
				return this.entityData.UserName; 
			}
			
			set
			{
				if (this.entityData.UserName == value)
					return;
					
				OnColumnChanging(FeeRefndStdReqColumn.UserName, this.entityData.UserName);
				this.entityData.UserName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdReqColumn.UserName, this.entityData.UserName);
				OnPropertyChanged("UserName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(FeeRefndStdReqColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdReqColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CheqNum property. 
		///		رقم الشيك فى حالة دفع بالشيك
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"رقم الشيك فى حالة دفع بالشيك"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String CheqNum
		{
			get
			{
				return this.entityData.CheqNum; 
			}
			
			set
			{
				if (this.entityData.CheqNum == value)
					return;
					
				OnColumnChanging(FeeRefndStdReqColumn.CheqNum, this.entityData.CheqNum);
				this.entityData.CheqNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdReqColumn.CheqNum, this.entityData.CheqNum);
				OnPropertyChanged("CheqNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccntNum property. 
		///		رقم حساب البنك  فى حالة ايداع&&في حالة السداد من نوع "الشيك"  يجب اظهار البنوك للاختيار منها وبعد اختيار البنك يقوم النظام باظهار رقم الحساب الخاص بالبنك
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"رقم حساب البنك  فى حالة ايداع&&في حالة السداد من نوع 'الشيك'  يجب اظهار البنوك للاختيار منها وبعد اختيار البنك يقوم النظام باظهار رقم الحساب الخاص بالبنك"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String AccntNum
		{
			get
			{
				return this.entityData.AccntNum; 
			}
			
			set
			{
				if (this.entityData.AccntNum == value)
					return;
					
				OnColumnChanging(FeeRefndStdReqColumn.AccntNum, this.entityData.AccntNum);
				this.entityData.AccntNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdReqColumn.AccntNum, this.entityData.AccntNum);
				OnPropertyChanged("AccntNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeCodeBankId property. 
		///		في حالة وسيلة الدفع "شيك" يتم ادخال البنك ورقم الحساب ورقم الشيك وتاريخ استحقاق الشيك
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeCodeBankIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"في حالة وسيلة الدفع 'شيك' يتم ادخال البنك ورقم الحساب ورقم الشيك وتاريخ استحقاق الشيك"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeeCodeBankId
		{
			get
			{
				return this.entityData.FeeCodeBankId; 
			}
			
			set
			{
				if (this.entityData.FeeCodeBankId == value)
					return;
					
				OnColumnChanging(FeeRefndStdReqColumn.FeeCodeBankId, this.entityData.FeeCodeBankId);
				this.entityData.FeeCodeBankId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdReqColumn.FeeCodeBankId, this.entityData.FeeCodeBankId);
				OnPropertyChanged("FeeCodeBankId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdmApplicant"/>.
		/// </summary>
		/// <value>The source AdmApplicant for AdmApplicantId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmApplicant AdmApplicantIdSource
      	{
            get { return entityData.AdmApplicantIdSource; }
            set { entityData.AdmApplicantIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeBanks"/>.
		/// </summary>
		/// <value>The source FeeCodeBanks for FeeCodeBankId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeCodeBanks FeeCodeBankIdSource
      	{
            get { return entityData.FeeCodeBankIdSource; }
            set { entityData.FeeCodeBankIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeReqStatus"/>.
		/// </summary>
		/// <value>The source GsCodeReqStatus for GsCodeReqStatusId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeReqStatus GsCodeReqStatusIdSource
      	{
            get { return entityData.GsCodeReqStatusIdSource; }
            set { entityData.GsCodeReqStatusIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCurrency"/>.
		/// </summary>
		/// <value>The source GsCodeCurrency for CurrencyId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeCurrency CurrencyIdSource
      	{
            get { return entityData.CurrencyIdSource; }
            set { entityData.CurrencyIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of FeeRefndStdDet objects
		///	which are related to this object through the relation FK_REFUND_STUD_REQ_DET_REFUND_STUD_REQ_MASTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeRefndStdDet> FeeRefndStdDetCollection
		{
			get { return entityData.FeeRefndStdDetCollection; }
			set { entityData.FeeRefndStdDetCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("RfndReason", "Rfnd Reason", 150));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Notes", "Notes"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("RfndNumber", "Rfnd Number", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UserName", "User Name", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CheqNum", "Cheq Num", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AccntNum", "Accnt Num", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "FEE_REFND_STD_REQ"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"FEE_REFND_STD_REQ_ID", "RFND_DATE", "AS_FACULTY_INFO_ID", "ED_STUD_ID", "ED_ACAD_YEAR_ID", "ED_CODE_SEMESTER_ID", "TOT_RFND_VALUE", "TOT_RFND_PRCNT", "RFND_REASON", "CURRENCY_ID", "GS_CODE_REQ_STATUS_ID", "NOTES", "RFND_NUMBER", "CALC_RFND_VALUE", "CALC_RFND_PRCNT", "STUD_FEE_BALANCE", "REFND_TYPE_ID", "ADM_APPLICANT_ID", "CANCEL_FLG", "CANCEL_DATE", "SE_USER_CNCL_ID", "SE_USER_ID", "USER_NAME", "LAST_DATE", "CHEQ_NUM", "ACCNT_NUM", "FEE_CODE_BANK_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as FeeRefndStdReqEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (FeeRefndStdReq) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<FeeRefndStdReq>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as FeeRefndStdReq);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed FeeRefndStdReq Entity 
		///</summary>
		protected virtual FeeRefndStdReq Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			FeeRefndStdReq copy = new FeeRefndStdReq();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.FeeRefndStdReqId = this.FeeRefndStdReqId;
					copy.OriginalFeeRefndStdReqId = this.OriginalFeeRefndStdReqId;
				copy.RfndDate = this.RfndDate;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.EdStudId = this.EdStudId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.TotRfndValue = this.TotRfndValue;
				copy.TotRfndPrcnt = this.TotRfndPrcnt;
				copy.RfndReason = this.RfndReason;
				copy.CurrencyId = this.CurrencyId;
				copy.GsCodeReqStatusId = this.GsCodeReqStatusId;
				copy.Notes = this.Notes;
				copy.RfndNumber = this.RfndNumber;
				copy.CalcRfndValue = this.CalcRfndValue;
				copy.CalcRfndPrcnt = this.CalcRfndPrcnt;
				copy.StudFeeBalance = this.StudFeeBalance;
				copy.RefndTypeId = this.RefndTypeId;
				copy.AdmApplicantId = this.AdmApplicantId;
				copy.CancelFlg = this.CancelFlg;
				copy.CancelDate = this.CancelDate;
				copy.SeUserCnclId = this.SeUserCnclId;
				copy.SeUserId = this.SeUserId;
				copy.UserName = this.UserName;
				copy.LastDate = this.LastDate;
				copy.CheqNum = this.CheqNum;
				copy.AccntNum = this.AccntNum;
				copy.FeeCodeBankId = this.FeeCodeBankId;
			
			if (this.AdmApplicantIdSource != null && existingCopies.Contains(this.AdmApplicantIdSource))
				copy.AdmApplicantIdSource = existingCopies[this.AdmApplicantIdSource] as AdmApplicant;
			else
				copy.AdmApplicantIdSource = MakeCopyOf(this.AdmApplicantIdSource, existingCopies) as AdmApplicant;
			if (this.FeeCodeBankIdSource != null && existingCopies.Contains(this.FeeCodeBankIdSource))
				copy.FeeCodeBankIdSource = existingCopies[this.FeeCodeBankIdSource] as FeeCodeBanks;
			else
				copy.FeeCodeBankIdSource = MakeCopyOf(this.FeeCodeBankIdSource, existingCopies) as FeeCodeBanks;
			if (this.GsCodeReqStatusIdSource != null && existingCopies.Contains(this.GsCodeReqStatusIdSource))
				copy.GsCodeReqStatusIdSource = existingCopies[this.GsCodeReqStatusIdSource] as GsCodeReqStatus;
			else
				copy.GsCodeReqStatusIdSource = MakeCopyOf(this.GsCodeReqStatusIdSource, existingCopies) as GsCodeReqStatus;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.CurrencyIdSource != null && existingCopies.Contains(this.CurrencyIdSource))
				copy.CurrencyIdSource = existingCopies[this.CurrencyIdSource] as GsCodeCurrency;
			else
				copy.CurrencyIdSource = MakeCopyOf(this.CurrencyIdSource, existingCopies) as GsCodeCurrency;
		
			//deep copy nested objects
			copy.FeeRefndStdDetCollection = (TList<FeeRefndStdDet>) MakeCopyOf(this.FeeRefndStdDetCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed FeeRefndStdReq Entity 
		///</summary>
		public virtual FeeRefndStdReq Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed FeeRefndStdReq Entity which is a deep copy of the current entity.
		///</summary>
		public virtual FeeRefndStdReq DeepCopy()
		{
			return EntityHelper.Clone<FeeRefndStdReq>(this as FeeRefndStdReq);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as FeeRefndStdReqEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new FeeRefndStdReqEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as FeeRefndStdReqEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(FeeRefndStdReqColumn column)
		{
			switch(column)
			{
					case FeeRefndStdReqColumn.FeeRefndStdReqId:
					return entityData.FeeRefndStdReqId != _originalData.FeeRefndStdReqId;
					case FeeRefndStdReqColumn.RfndDate:
					return entityData.RfndDate != _originalData.RfndDate;
					case FeeRefndStdReqColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case FeeRefndStdReqColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case FeeRefndStdReqColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case FeeRefndStdReqColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case FeeRefndStdReqColumn.TotRfndValue:
					return entityData.TotRfndValue != _originalData.TotRfndValue;
					case FeeRefndStdReqColumn.TotRfndPrcnt:
					return entityData.TotRfndPrcnt != _originalData.TotRfndPrcnt;
					case FeeRefndStdReqColumn.RfndReason:
					return entityData.RfndReason != _originalData.RfndReason;
					case FeeRefndStdReqColumn.CurrencyId:
					return entityData.CurrencyId != _originalData.CurrencyId;
					case FeeRefndStdReqColumn.GsCodeReqStatusId:
					return entityData.GsCodeReqStatusId != _originalData.GsCodeReqStatusId;
					case FeeRefndStdReqColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case FeeRefndStdReqColumn.RfndNumber:
					return entityData.RfndNumber != _originalData.RfndNumber;
					case FeeRefndStdReqColumn.CalcRfndValue:
					return entityData.CalcRfndValue != _originalData.CalcRfndValue;
					case FeeRefndStdReqColumn.CalcRfndPrcnt:
					return entityData.CalcRfndPrcnt != _originalData.CalcRfndPrcnt;
					case FeeRefndStdReqColumn.StudFeeBalance:
					return entityData.StudFeeBalance != _originalData.StudFeeBalance;
					case FeeRefndStdReqColumn.RefndTypeId:
					return entityData.RefndTypeId != _originalData.RefndTypeId;
					case FeeRefndStdReqColumn.AdmApplicantId:
					return entityData.AdmApplicantId != _originalData.AdmApplicantId;
					case FeeRefndStdReqColumn.CancelFlg:
					return entityData.CancelFlg != _originalData.CancelFlg;
					case FeeRefndStdReqColumn.CancelDate:
					return entityData.CancelDate != _originalData.CancelDate;
					case FeeRefndStdReqColumn.SeUserCnclId:
					return entityData.SeUserCnclId != _originalData.SeUserCnclId;
					case FeeRefndStdReqColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case FeeRefndStdReqColumn.UserName:
					return entityData.UserName != _originalData.UserName;
					case FeeRefndStdReqColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case FeeRefndStdReqColumn.CheqNum:
					return entityData.CheqNum != _originalData.CheqNum;
					case FeeRefndStdReqColumn.AccntNum:
					return entityData.AccntNum != _originalData.AccntNum;
					case FeeRefndStdReqColumn.FeeCodeBankId:
					return entityData.FeeCodeBankId != _originalData.FeeCodeBankId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< FeeRefndStdReqColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.FeeRefndStdReqId != _originalData.FeeRefndStdReqId;
			result = result || entityData.RfndDate != _originalData.RfndDate;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.TotRfndValue != _originalData.TotRfndValue;
			result = result || entityData.TotRfndPrcnt != _originalData.TotRfndPrcnt;
			result = result || entityData.RfndReason != _originalData.RfndReason;
			result = result || entityData.CurrencyId != _originalData.CurrencyId;
			result = result || entityData.GsCodeReqStatusId != _originalData.GsCodeReqStatusId;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.RfndNumber != _originalData.RfndNumber;
			result = result || entityData.CalcRfndValue != _originalData.CalcRfndValue;
			result = result || entityData.CalcRfndPrcnt != _originalData.CalcRfndPrcnt;
			result = result || entityData.StudFeeBalance != _originalData.StudFeeBalance;
			result = result || entityData.RefndTypeId != _originalData.RefndTypeId;
			result = result || entityData.AdmApplicantId != _originalData.AdmApplicantId;
			result = result || entityData.CancelFlg != _originalData.CancelFlg;
			result = result || entityData.CancelDate != _originalData.CancelDate;
			result = result || entityData.SeUserCnclId != _originalData.SeUserCnclId;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.UserName != _originalData.UserName;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.CheqNum != _originalData.CheqNum;
			result = result || entityData.AccntNum != _originalData.AccntNum;
			result = result || entityData.FeeCodeBankId != _originalData.FeeCodeBankId;
			return result;
		}	
		
		///<summary>
		///  Returns a FeeRefndStdReq Entity with the original data.
		///</summary>
		public FeeRefndStdReq GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateFeeRefndStdReq(
				_originalData.FeeRefndStdReqId,
				_originalData.RfndDate,
				_originalData.AsFacultyInfoId,
				_originalData.EdStudId,
				_originalData.EdAcadYearId,
				_originalData.EdCodeSemesterId,
				_originalData.TotRfndValue,
				_originalData.TotRfndPrcnt,
				_originalData.RfndReason,
				_originalData.CurrencyId,
				_originalData.GsCodeReqStatusId,
				_originalData.Notes,
				_originalData.RfndNumber,
				_originalData.CalcRfndValue,
				_originalData.CalcRfndPrcnt,
				_originalData.StudFeeBalance,
				_originalData.RefndTypeId,
				_originalData.AdmApplicantId,
				_originalData.CancelFlg,
				_originalData.CancelDate,
				_originalData.SeUserCnclId,
				_originalData.SeUserId,
				_originalData.UserName,
				_originalData.LastDate,
				_originalData.CheqNum,
				_originalData.AccntNum,
				_originalData.FeeCodeBankId
				);
				
			return (FeeRefndStdReq)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="FeeRefndStdReqBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is FeeRefndStdReqBase)
				return ValueEquals(this, (FeeRefndStdReqBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="FeeRefndStdReqBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.FeeRefndStdReqId.GetHashCode() ^ 
					this.RfndDate.GetHashCode() ^ 
					this.AsFacultyInfoId.GetHashCode() ^ 
					((this.EdStudId == null) ? string.Empty : this.EdStudId.ToString()).GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					this.EdCodeSemesterId.GetHashCode() ^ 
					((this.TotRfndValue == null) ? string.Empty : this.TotRfndValue.ToString()).GetHashCode() ^ 
					((this.TotRfndPrcnt == null) ? string.Empty : this.TotRfndPrcnt.ToString()).GetHashCode() ^ 
					((this.RfndReason == null) ? string.Empty : this.RfndReason.ToString()).GetHashCode() ^ 
					this.CurrencyId.GetHashCode() ^ 
					((this.GsCodeReqStatusId == null) ? string.Empty : this.GsCodeReqStatusId.ToString()).GetHashCode() ^ 
					this.Notes.GetHashCode() ^ 
					((this.RfndNumber == null) ? string.Empty : this.RfndNumber.ToString()).GetHashCode() ^ 
					((this.CalcRfndValue == null) ? string.Empty : this.CalcRfndValue.ToString()).GetHashCode() ^ 
					((this.CalcRfndPrcnt == null) ? string.Empty : this.CalcRfndPrcnt.ToString()).GetHashCode() ^ 
					((this.StudFeeBalance == null) ? string.Empty : this.StudFeeBalance.ToString()).GetHashCode() ^ 
					((this.RefndTypeId == null) ? string.Empty : this.RefndTypeId.ToString()).GetHashCode() ^ 
					((this.AdmApplicantId == null) ? string.Empty : this.AdmApplicantId.ToString()).GetHashCode() ^ 
					((this.CancelFlg == null) ? string.Empty : this.CancelFlg.ToString()).GetHashCode() ^ 
					((this.CancelDate == null) ? string.Empty : this.CancelDate.ToString()).GetHashCode() ^ 
					((this.SeUserCnclId == null) ? string.Empty : this.SeUserCnclId.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.UserName == null) ? string.Empty : this.UserName.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.CheqNum == null) ? string.Empty : this.CheqNum.ToString()).GetHashCode() ^ 
					((this.AccntNum == null) ? string.Empty : this.AccntNum.ToString()).GetHashCode() ^ 
					((this.FeeCodeBankId == null) ? string.Empty : this.FeeCodeBankId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="FeeRefndStdReqBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(FeeRefndStdReqBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="FeeRefndStdReqBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="FeeRefndStdReqBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="FeeRefndStdReqBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(FeeRefndStdReqBase Object1, FeeRefndStdReqBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.FeeRefndStdReqId != Object2.FeeRefndStdReqId)
				equal = false;
			if (Object1.RfndDate != Object2.RfndDate)
				equal = false;
			if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
				equal = false;
			if ( Object1.EdStudId != null && Object2.EdStudId != null )
			{
				if (Object1.EdStudId != Object2.EdStudId)
					equal = false;
			}
			else if (Object1.EdStudId == null ^ Object2.EdStudId == null )
			{
				equal = false;
			}
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
				equal = false;
			if ( Object1.TotRfndValue != null && Object2.TotRfndValue != null )
			{
				if (Object1.TotRfndValue != Object2.TotRfndValue)
					equal = false;
			}
			else if (Object1.TotRfndValue == null ^ Object2.TotRfndValue == null )
			{
				equal = false;
			}
			if ( Object1.TotRfndPrcnt != null && Object2.TotRfndPrcnt != null )
			{
				if (Object1.TotRfndPrcnt != Object2.TotRfndPrcnt)
					equal = false;
			}
			else if (Object1.TotRfndPrcnt == null ^ Object2.TotRfndPrcnt == null )
			{
				equal = false;
			}
			if ( Object1.RfndReason != null && Object2.RfndReason != null )
			{
				if (Object1.RfndReason != Object2.RfndReason)
					equal = false;
			}
			else if (Object1.RfndReason == null ^ Object2.RfndReason == null )
			{
				equal = false;
			}
			if (Object1.CurrencyId != Object2.CurrencyId)
				equal = false;
			if ( Object1.GsCodeReqStatusId != null && Object2.GsCodeReqStatusId != null )
			{
				if (Object1.GsCodeReqStatusId != Object2.GsCodeReqStatusId)
					equal = false;
			}
			else if (Object1.GsCodeReqStatusId == null ^ Object2.GsCodeReqStatusId == null )
			{
				equal = false;
			}
			if (Object1.Notes != Object2.Notes)
				equal = false;
			if ( Object1.RfndNumber != null && Object2.RfndNumber != null )
			{
				if (Object1.RfndNumber != Object2.RfndNumber)
					equal = false;
			}
			else if (Object1.RfndNumber == null ^ Object2.RfndNumber == null )
			{
				equal = false;
			}
			if ( Object1.CalcRfndValue != null && Object2.CalcRfndValue != null )
			{
				if (Object1.CalcRfndValue != Object2.CalcRfndValue)
					equal = false;
			}
			else if (Object1.CalcRfndValue == null ^ Object2.CalcRfndValue == null )
			{
				equal = false;
			}
			if ( Object1.CalcRfndPrcnt != null && Object2.CalcRfndPrcnt != null )
			{
				if (Object1.CalcRfndPrcnt != Object2.CalcRfndPrcnt)
					equal = false;
			}
			else if (Object1.CalcRfndPrcnt == null ^ Object2.CalcRfndPrcnt == null )
			{
				equal = false;
			}
			if ( Object1.StudFeeBalance != null && Object2.StudFeeBalance != null )
			{
				if (Object1.StudFeeBalance != Object2.StudFeeBalance)
					equal = false;
			}
			else if (Object1.StudFeeBalance == null ^ Object2.StudFeeBalance == null )
			{
				equal = false;
			}
			if ( Object1.RefndTypeId != null && Object2.RefndTypeId != null )
			{
				if (Object1.RefndTypeId != Object2.RefndTypeId)
					equal = false;
			}
			else if (Object1.RefndTypeId == null ^ Object2.RefndTypeId == null )
			{
				equal = false;
			}
			if ( Object1.AdmApplicantId != null && Object2.AdmApplicantId != null )
			{
				if (Object1.AdmApplicantId != Object2.AdmApplicantId)
					equal = false;
			}
			else if (Object1.AdmApplicantId == null ^ Object2.AdmApplicantId == null )
			{
				equal = false;
			}
			if ( Object1.CancelFlg != null && Object2.CancelFlg != null )
			{
				if (Object1.CancelFlg != Object2.CancelFlg)
					equal = false;
			}
			else if (Object1.CancelFlg == null ^ Object2.CancelFlg == null )
			{
				equal = false;
			}
			if ( Object1.CancelDate != null && Object2.CancelDate != null )
			{
				if (Object1.CancelDate != Object2.CancelDate)
					equal = false;
			}
			else if (Object1.CancelDate == null ^ Object2.CancelDate == null )
			{
				equal = false;
			}
			if ( Object1.SeUserCnclId != null && Object2.SeUserCnclId != null )
			{
				if (Object1.SeUserCnclId != Object2.SeUserCnclId)
					equal = false;
			}
			else if (Object1.SeUserCnclId == null ^ Object2.SeUserCnclId == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.UserName != null && Object2.UserName != null )
			{
				if (Object1.UserName != Object2.UserName)
					equal = false;
			}
			else if (Object1.UserName == null ^ Object2.UserName == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.CheqNum != null && Object2.CheqNum != null )
			{
				if (Object1.CheqNum != Object2.CheqNum)
					equal = false;
			}
			else if (Object1.CheqNum == null ^ Object2.CheqNum == null )
			{
				equal = false;
			}
			if ( Object1.AccntNum != null && Object2.AccntNum != null )
			{
				if (Object1.AccntNum != Object2.AccntNum)
					equal = false;
			}
			else if (Object1.AccntNum == null ^ Object2.AccntNum == null )
			{
				equal = false;
			}
			if ( Object1.FeeCodeBankId != null && Object2.FeeCodeBankId != null )
			{
				if (Object1.FeeCodeBankId != Object2.FeeCodeBankId)
					equal = false;
			}
			else if (Object1.FeeCodeBankId == null ^ Object2.FeeCodeBankId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((FeeRefndStdReqBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static FeeRefndStdReqComparer GetComparer()
        {
            return new FeeRefndStdReqComparer();
        }
        */

        // Comparer delegates back to FeeRefndStdReq
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(FeeRefndStdReq rhs, FeeRefndStdReqColumn which)
        {
            switch (which)
            {
            	
            	
            	case FeeRefndStdReqColumn.FeeRefndStdReqId:
            		return this.FeeRefndStdReqId.CompareTo(rhs.FeeRefndStdReqId);
            		
            		                 
            	
            	
            	case FeeRefndStdReqColumn.RfndDate:
            		return this.RfndDate.CompareTo(rhs.RfndDate);
            		
            		                 
            	
            	
            	case FeeRefndStdReqColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.CompareTo(rhs.AsFacultyInfoId);
            		
            		                 
            	
            	
            	case FeeRefndStdReqColumn.EdStudId:
            		return this.EdStudId.Value.CompareTo(rhs.EdStudId.Value);
            		
            		                 
            	
            	
            	case FeeRefndStdReqColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case FeeRefndStdReqColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.CompareTo(rhs.EdCodeSemesterId);
            		
            		                 
            	
            	
            	case FeeRefndStdReqColumn.TotRfndValue:
            		return this.TotRfndValue.Value.CompareTo(rhs.TotRfndValue.Value);
            		
            		                 
            	
            	
            	case FeeRefndStdReqColumn.TotRfndPrcnt:
            		return this.TotRfndPrcnt.Value.CompareTo(rhs.TotRfndPrcnt.Value);
            		
            		                 
            	
            	
            	case FeeRefndStdReqColumn.RfndReason:
            		return this.RfndReason.CompareTo(rhs.RfndReason);
            		
            		                 
            	
            	
            	case FeeRefndStdReqColumn.CurrencyId:
            		return this.CurrencyId.CompareTo(rhs.CurrencyId);
            		
            		                 
            	
            	
            	case FeeRefndStdReqColumn.GsCodeReqStatusId:
            		return this.GsCodeReqStatusId.Value.CompareTo(rhs.GsCodeReqStatusId.Value);
            		
            		                 
            	
            	
            	case FeeRefndStdReqColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case FeeRefndStdReqColumn.RfndNumber:
            		return this.RfndNumber.CompareTo(rhs.RfndNumber);
            		
            		                 
            	
            	
            	case FeeRefndStdReqColumn.CalcRfndValue:
            		return this.CalcRfndValue.Value.CompareTo(rhs.CalcRfndValue.Value);
            		
            		                 
            	
            	
            	case FeeRefndStdReqColumn.CalcRfndPrcnt:
            		return this.CalcRfndPrcnt.Value.CompareTo(rhs.CalcRfndPrcnt.Value);
            		
            		                 
            	
            	
            	case FeeRefndStdReqColumn.StudFeeBalance:
            		return this.StudFeeBalance.Value.CompareTo(rhs.StudFeeBalance.Value);
            		
            		                 
            	
            	
            	case FeeRefndStdReqColumn.RefndTypeId:
            		return this.RefndTypeId.Value.CompareTo(rhs.RefndTypeId.Value);
            		
            		                 
            	
            	
            	case FeeRefndStdReqColumn.AdmApplicantId:
            		return this.AdmApplicantId.Value.CompareTo(rhs.AdmApplicantId.Value);
            		
            		                 
            	
            	
            	case FeeRefndStdReqColumn.CancelFlg:
            		return this.CancelFlg.Value.CompareTo(rhs.CancelFlg.Value);
            		
            		                 
            	
            	
            	case FeeRefndStdReqColumn.CancelDate:
            		return this.CancelDate.Value.CompareTo(rhs.CancelDate.Value);
            		
            		                 
            	
            	
            	case FeeRefndStdReqColumn.SeUserCnclId:
            		return this.SeUserCnclId.Value.CompareTo(rhs.SeUserCnclId.Value);
            		
            		                 
            	
            	
            	case FeeRefndStdReqColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case FeeRefndStdReqColumn.UserName:
            		return this.UserName.CompareTo(rhs.UserName);
            		
            		                 
            	
            	
            	case FeeRefndStdReqColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case FeeRefndStdReqColumn.CheqNum:
            		return this.CheqNum.CompareTo(rhs.CheqNum);
            		
            		                 
            	
            	
            	case FeeRefndStdReqColumn.AccntNum:
            		return this.AccntNum.CompareTo(rhs.AccntNum);
            		
            		                 
            	
            	
            	case FeeRefndStdReqColumn.FeeCodeBankId:
            		return this.FeeCodeBankId.Value.CompareTo(rhs.FeeCodeBankId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<FeeRefndStdReqKey> Members
		
		// member variable for the EntityId property
		private FeeRefndStdReqKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual FeeRefndStdReqKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new FeeRefndStdReqKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("FeeRefndStdReq")
					.Append("|").Append( this.FeeRefndStdReqId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{28}{27}- FeeRefndStdReqId: {0}{27}- RfndDate: {1}{27}- AsFacultyInfoId: {2}{27}- EdStudId: {3}{27}- EdAcadYearId: {4}{27}- EdCodeSemesterId: {5}{27}- TotRfndValue: {6}{27}- TotRfndPrcnt: {7}{27}- RfndReason: {8}{27}- CurrencyId: {9}{27}- GsCodeReqStatusId: {10}{27}- Notes: {11}{27}- RfndNumber: {12}{27}- CalcRfndValue: {13}{27}- CalcRfndPrcnt: {14}{27}- StudFeeBalance: {15}{27}- RefndTypeId: {16}{27}- AdmApplicantId: {17}{27}- CancelFlg: {18}{27}- CancelDate: {19}{27}- SeUserCnclId: {20}{27}- SeUserId: {21}{27}- UserName: {22}{27}- LastDate: {23}{27}- CheqNum: {24}{27}- AccntNum: {25}{27}- FeeCodeBankId: {26}{27}{29}", 
				this.FeeRefndStdReqId,
				this.RfndDate,
				this.AsFacultyInfoId,
				(this.EdStudId == null) ? string.Empty : this.EdStudId.ToString(),
				this.EdAcadYearId,
				this.EdCodeSemesterId,
				(this.TotRfndValue == null) ? string.Empty : this.TotRfndValue.ToString(),
				(this.TotRfndPrcnt == null) ? string.Empty : this.TotRfndPrcnt.ToString(),
				(this.RfndReason == null) ? string.Empty : this.RfndReason.ToString(),
				this.CurrencyId,
				(this.GsCodeReqStatusId == null) ? string.Empty : this.GsCodeReqStatusId.ToString(),
				this.Notes,
				(this.RfndNumber == null) ? string.Empty : this.RfndNumber.ToString(),
				(this.CalcRfndValue == null) ? string.Empty : this.CalcRfndValue.ToString(),
				(this.CalcRfndPrcnt == null) ? string.Empty : this.CalcRfndPrcnt.ToString(),
				(this.StudFeeBalance == null) ? string.Empty : this.StudFeeBalance.ToString(),
				(this.RefndTypeId == null) ? string.Empty : this.RefndTypeId.ToString(),
				(this.AdmApplicantId == null) ? string.Empty : this.AdmApplicantId.ToString(),
				(this.CancelFlg == null) ? string.Empty : this.CancelFlg.ToString(),
				(this.CancelDate == null) ? string.Empty : this.CancelDate.ToString(),
				(this.SeUserCnclId == null) ? string.Empty : this.SeUserCnclId.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.UserName == null) ? string.Empty : this.UserName.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.CheqNum == null) ? string.Empty : this.CheqNum.ToString(),
				(this.AccntNum == null) ? string.Empty : this.AccntNum.ToString(),
				(this.FeeCodeBankId == null) ? string.Empty : this.FeeCodeBankId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'FEE_REFND_STD_REQ' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class FeeRefndStdReqEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// FEE_REFND_STD_REQ_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "FEE_REFND_STD_REQ"</remarks>
		public System.Decimal FeeRefndStdReqId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalFeeRefndStdReqId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// RFND_DATE : 
		/// </summary>
		public System.DateTime		  RfndDate = DateTime.MinValue;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal		  AsFacultyInfoId = 0.0m;
		
		/// <summary>
		/// ED_STUD_ID : 
		/// </summary>
		public System.Decimal?		  EdStudId = null;
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : 
		/// </summary>
		public System.Decimal		  EdCodeSemesterId = 0.0m;
		
		/// <summary>
		/// TOT_RFND_VALUE : 
		/// </summary>
		public System.Decimal?		  TotRfndValue = null;
		
		/// <summary>
		/// TOT_RFND_PRCNT : 
		/// </summary>
		public System.Decimal?		  TotRfndPrcnt = null;
		
		/// <summary>
		/// RFND_REASON : 
		/// </summary>
		public System.String		  RfndReason = null;
		
		/// <summary>
		/// CURRENCY_ID : 
		/// </summary>
		public System.Decimal		  CurrencyId = 0.0m;
		
		/// <summary>
		/// GS_CODE_REQ_STATUS_ID : 
		/// </summary>
		public System.Decimal?		  GsCodeReqStatusId = null;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = string.Empty;
		
		/// <summary>
		/// RFND_NUMBER : 
		/// </summary>
		public System.String		  RfndNumber = null;
		
		/// <summary>
		/// CALC_RFND_VALUE : 
		/// </summary>
		public System.Decimal?		  CalcRfndValue = null;
		
		/// <summary>
		/// CALC_RFND_PRCNT : 
		/// </summary>
		public System.Decimal?		  CalcRfndPrcnt = null;
		
		/// <summary>
		/// STUD_FEE_BALANCE : رصيد الطالب الحالى
		/// </summary>
		public System.Decimal?		  StudFeeBalance = null;
		
		/// <summary>
		/// REFND_TYPE_ID : 0:  من بند الى رصيد
		/// 		///  بند الى كاش: 1
		/// 		/// 2: بند الى شيك
		/// 		/// 3 : رصيد  لكاش
		/// 		/// 4: رصيد ل شيك
		/// 		/// 
		/// </summary>
		public System.Int32?		  RefndTypeId = null;
		
		/// <summary>
		/// ADM_APPLICANT_ID : 
		/// </summary>
		public System.Decimal?		  AdmApplicantId = null;
		
		/// <summary>
		/// CANCEL_FLG : 
		/// </summary>
		public System.Boolean?		  CancelFlg = null;
		
		/// <summary>
		/// CANCEL_DATE : 
		/// </summary>
		public System.DateTime?		  CancelDate = null;
		
		/// <summary>
		/// SE_USER_CNCL_ID : 
		/// </summary>
		public System.Decimal?		  SeUserCnclId = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// USER_NAME : 
		/// </summary>
		public System.String		  UserName = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// CHEQ_NUM : رقم الشيك فى حالة دفع بالشيك
		/// </summary>
		public System.String		  CheqNum = null;
		
		/// <summary>
		/// ACCNT_NUM : رقم حساب البنك  فى حالة ايداع&&في حالة السداد من نوع "الشيك"  يجب اظهار البنوك للاختيار منها وبعد اختيار البنك يقوم النظام باظهار رقم الحساب الخاص بالبنك
		/// </summary>
		public System.String		  AccntNum = null;
		
		/// <summary>
		/// FEE_CODE_BANK_ID : في حالة وسيلة الدفع "شيك" يتم ادخال البنك ورقم الحساب ورقم الشيك وتاريخ استحقاق الشيك
		/// </summary>
		public System.Decimal?		  FeeCodeBankId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdmApplicant _admApplicantIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmApplicant"/>.
		/// </summary>
		/// <value>The source AdmApplicant for AdmApplicantId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmApplicant AdmApplicantIdSource
      	{
            get { return this._admApplicantIdSource; }
            set { this._admApplicantIdSource = value; }
      	}
		private FeeCodeBanks _feeCodeBankIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeBanks"/>.
		/// </summary>
		/// <value>The source FeeCodeBanks for FeeCodeBankId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeCodeBanks FeeCodeBankIdSource
      	{
            get { return this._feeCodeBankIdSource; }
            set { this._feeCodeBankIdSource = value; }
      	}
		private GsCodeReqStatus _gsCodeReqStatusIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeReqStatus"/>.
		/// </summary>
		/// <value>The source GsCodeReqStatus for GsCodeReqStatusId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeReqStatus GsCodeReqStatusIdSource
      	{
            get { return this._gsCodeReqStatusIdSource; }
            set { this._gsCodeReqStatusIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		private GsCodeCurrency _currencyIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCurrency"/>.
		/// </summary>
		/// <value>The source GsCodeCurrency for CurrencyId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeCurrency CurrencyIdSource
      	{
            get { return this._currencyIdSource; }
            set { this._currencyIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region FeeRefndStdDetCollection
		
		private TList<FeeRefndStdDet> _feeRefndStdDetFeeRefndStdReqId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeRefndStdDetFeeRefndStdReqId
		/// </summary>
		
		public TList<FeeRefndStdDet> FeeRefndStdDetCollection
		{
			get
			{
				if (_feeRefndStdDetFeeRefndStdReqId == null)
				{
				_feeRefndStdDetFeeRefndStdReqId = new TList<FeeRefndStdDet>();
				}
	
				return _feeRefndStdDetFeeRefndStdReqId;
			}
			set { _feeRefndStdDetFeeRefndStdReqId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			FeeRefndStdReqEntityData _tmp = new FeeRefndStdReqEntityData();
						
			_tmp.FeeRefndStdReqId = this.FeeRefndStdReqId;
			_tmp.OriginalFeeRefndStdReqId = this.OriginalFeeRefndStdReqId;
			
			_tmp.RfndDate = this.RfndDate;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.TotRfndValue = this.TotRfndValue;
			_tmp.TotRfndPrcnt = this.TotRfndPrcnt;
			_tmp.RfndReason = this.RfndReason;
			_tmp.CurrencyId = this.CurrencyId;
			_tmp.GsCodeReqStatusId = this.GsCodeReqStatusId;
			_tmp.Notes = this.Notes;
			_tmp.RfndNumber = this.RfndNumber;
			_tmp.CalcRfndValue = this.CalcRfndValue;
			_tmp.CalcRfndPrcnt = this.CalcRfndPrcnt;
			_tmp.StudFeeBalance = this.StudFeeBalance;
			_tmp.RefndTypeId = this.RefndTypeId;
			_tmp.AdmApplicantId = this.AdmApplicantId;
			_tmp.CancelFlg = this.CancelFlg;
			_tmp.CancelDate = this.CancelDate;
			_tmp.SeUserCnclId = this.SeUserCnclId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.UserName = this.UserName;
			_tmp.LastDate = this.LastDate;
			_tmp.CheqNum = this.CheqNum;
			_tmp.AccntNum = this.AccntNum;
			_tmp.FeeCodeBankId = this.FeeCodeBankId;
			
			#region Source Parent Composite Entities
			if (this.AdmApplicantIdSource != null)
				_tmp.AdmApplicantIdSource = MakeCopyOf(this.AdmApplicantIdSource) as AdmApplicant;
			if (this.FeeCodeBankIdSource != null)
				_tmp.FeeCodeBankIdSource = MakeCopyOf(this.FeeCodeBankIdSource) as FeeCodeBanks;
			if (this.GsCodeReqStatusIdSource != null)
				_tmp.GsCodeReqStatusIdSource = MakeCopyOf(this.GsCodeReqStatusIdSource) as GsCodeReqStatus;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			if (this.CurrencyIdSource != null)
				_tmp.CurrencyIdSource = MakeCopyOf(this.CurrencyIdSource) as GsCodeCurrency;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._feeRefndStdDetFeeRefndStdReqId != null)
				_tmp.FeeRefndStdDetCollection = (TList<FeeRefndStdDet>) MakeCopyOf(this.FeeRefndStdDetCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			FeeRefndStdReqEntityData _tmp = new FeeRefndStdReqEntityData();
						
			_tmp.FeeRefndStdReqId = this.FeeRefndStdReqId;
			_tmp.OriginalFeeRefndStdReqId = this.OriginalFeeRefndStdReqId;
			
			_tmp.RfndDate = this.RfndDate;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.TotRfndValue = this.TotRfndValue;
			_tmp.TotRfndPrcnt = this.TotRfndPrcnt;
			_tmp.RfndReason = this.RfndReason;
			_tmp.CurrencyId = this.CurrencyId;
			_tmp.GsCodeReqStatusId = this.GsCodeReqStatusId;
			_tmp.Notes = this.Notes;
			_tmp.RfndNumber = this.RfndNumber;
			_tmp.CalcRfndValue = this.CalcRfndValue;
			_tmp.CalcRfndPrcnt = this.CalcRfndPrcnt;
			_tmp.StudFeeBalance = this.StudFeeBalance;
			_tmp.RefndTypeId = this.RefndTypeId;
			_tmp.AdmApplicantId = this.AdmApplicantId;
			_tmp.CancelFlg = this.CancelFlg;
			_tmp.CancelDate = this.CancelDate;
			_tmp.SeUserCnclId = this.SeUserCnclId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.UserName = this.UserName;
			_tmp.LastDate = this.LastDate;
			_tmp.CheqNum = this.CheqNum;
			_tmp.AccntNum = this.AccntNum;
			_tmp.FeeCodeBankId = this.FeeCodeBankId;
			
			#region Source Parent Composite Entities
			if (this.AdmApplicantIdSource != null && existingCopies.Contains(this.AdmApplicantIdSource))
				_tmp.AdmApplicantIdSource = existingCopies[this.AdmApplicantIdSource] as AdmApplicant;
			else
				_tmp.AdmApplicantIdSource = MakeCopyOf(this.AdmApplicantIdSource, existingCopies) as AdmApplicant;
			if (this.FeeCodeBankIdSource != null && existingCopies.Contains(this.FeeCodeBankIdSource))
				_tmp.FeeCodeBankIdSource = existingCopies[this.FeeCodeBankIdSource] as FeeCodeBanks;
			else
				_tmp.FeeCodeBankIdSource = MakeCopyOf(this.FeeCodeBankIdSource, existingCopies) as FeeCodeBanks;
			if (this.GsCodeReqStatusIdSource != null && existingCopies.Contains(this.GsCodeReqStatusIdSource))
				_tmp.GsCodeReqStatusIdSource = existingCopies[this.GsCodeReqStatusIdSource] as GsCodeReqStatus;
			else
				_tmp.GsCodeReqStatusIdSource = MakeCopyOf(this.GsCodeReqStatusIdSource, existingCopies) as GsCodeReqStatus;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.CurrencyIdSource != null && existingCopies.Contains(this.CurrencyIdSource))
				_tmp.CurrencyIdSource = existingCopies[this.CurrencyIdSource] as GsCodeCurrency;
			else
				_tmp.CurrencyIdSource = MakeCopyOf(this.CurrencyIdSource, existingCopies) as GsCodeCurrency;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.FeeRefndStdDetCollection = (TList<FeeRefndStdDet>) MakeCopyOf(this.FeeRefndStdDetCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeRefndStdReqColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(FeeRefndStdReqColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeRefndStdReqColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(FeeRefndStdReqColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeRefndStdReqColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(FeeRefndStdReqColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				FeeRefndStdReqEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new FeeRefndStdReqEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeRefndStdReqColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(FeeRefndStdReqColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				FeeRefndStdReqEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new FeeRefndStdReqEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region FeeRefndStdReqEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="FeeRefndStdReq"/> object.
	/// </remarks>
	public class FeeRefndStdReqEventArgs : System.EventArgs
	{
		private FeeRefndStdReqColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the FeeRefndStdReqEventArgs class.
		///</summary>
		public FeeRefndStdReqEventArgs(FeeRefndStdReqColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the FeeRefndStdReqEventArgs class.
		///</summary>
		public FeeRefndStdReqEventArgs(FeeRefndStdReqColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The FeeRefndStdReqColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="FeeRefndStdReqColumn" />
		public FeeRefndStdReqColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all FeeRefndStdReq related events.
	///</summary>
	public delegate void FeeRefndStdReqEventHandler(object sender, FeeRefndStdReqEventArgs e);
	
	#region FeeRefndStdReqComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class FeeRefndStdReqComparer : System.Collections.Generic.IComparer<FeeRefndStdReq>
	{
		FeeRefndStdReqColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:FeeRefndStdReqComparer"/> class.
        /// </summary>
		public FeeRefndStdReqComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:FeeRefndStdReqComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public FeeRefndStdReqComparer(FeeRefndStdReqColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="FeeRefndStdReq"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="FeeRefndStdReq"/> to compare.</param>
        /// <param name="b">The second <c>FeeRefndStdReq</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(FeeRefndStdReq a, FeeRefndStdReq b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(FeeRefndStdReq entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(FeeRefndStdReq a, FeeRefndStdReq b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public FeeRefndStdReqColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region FeeRefndStdReqKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="FeeRefndStdReq"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class FeeRefndStdReqKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the FeeRefndStdReqKey class.
		/// </summary>
		public FeeRefndStdReqKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeRefndStdReqKey class.
		/// </summary>
		public FeeRefndStdReqKey(FeeRefndStdReqBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.FeeRefndStdReqId = entity.FeeRefndStdReqId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeRefndStdReqKey class.
		/// </summary>
		public FeeRefndStdReqKey(System.Decimal _feeRefndStdReqId)
		{
			#region Init Properties

			this.FeeRefndStdReqId = _feeRefndStdReqId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private FeeRefndStdReqBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public FeeRefndStdReqBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the FeeRefndStdReqId property
		private System.Decimal _feeRefndStdReqId;
		
		/// <summary>
		/// Gets or sets the FeeRefndStdReqId property.
		/// </summary>
		public System.Decimal FeeRefndStdReqId
		{
			get { return _feeRefndStdReqId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.FeeRefndStdReqId = value;
				
				_feeRefndStdReqId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				FeeRefndStdReqId = ( values["FeeRefndStdReqId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["FeeRefndStdReqId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("FeeRefndStdReqId", FeeRefndStdReqId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("FeeRefndStdReqId: {0}{1}",
								FeeRefndStdReqId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region FeeRefndStdReqColumn Enum
	
	/// <summary>
	/// Enumerate the FeeRefndStdReq columns.
	/// </summary>
	[Serializable]
	public enum FeeRefndStdReqColumn : int
	{
		/// <summary>
		/// FeeRefndStdReqId : 
		/// </summary>
		[EnumTextValue("FEE_REFND_STD_REQ_ID")]
		[ColumnEnum("FEE_REFND_STD_REQ_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		FeeRefndStdReqId = 1,
		/// <summary>
		/// RfndDate : 
		/// </summary>
		[EnumTextValue("RFND_DATE")]
		[ColumnEnum("RFND_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, false)]
		RfndDate = 2,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsFacultyInfoId = 3,
		/// <summary>
		/// EdStudId : 
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdStudId = 4,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 5,
		/// <summary>
		/// EdCodeSemesterId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeSemesterId = 6,
		/// <summary>
		/// TotRfndValue : 
		/// </summary>
		[EnumTextValue("TOT_RFND_VALUE")]
		[ColumnEnum("TOT_RFND_VALUE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotRfndValue = 7,
		/// <summary>
		/// TotRfndPrcnt : 
		/// </summary>
		[EnumTextValue("TOT_RFND_PRCNT")]
		[ColumnEnum("TOT_RFND_PRCNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotRfndPrcnt = 8,
		/// <summary>
		/// RfndReason : 
		/// </summary>
		[EnumTextValue("RFND_REASON")]
		[ColumnEnum("RFND_REASON", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 150)]
		RfndReason = 9,
		/// <summary>
		/// CurrencyId : 
		/// </summary>
		[EnumTextValue("CURRENCY_ID")]
		[ColumnEnum("CURRENCY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		CurrencyId = 10,
		/// <summary>
		/// GsCodeReqStatusId : 
		/// </summary>
		[EnumTextValue("GS_CODE_REQ_STATUS_ID")]
		[ColumnEnum("GS_CODE_REQ_STATUS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCodeReqStatusId = 11,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, false, 150)]
		Notes = 12,
		/// <summary>
		/// RfndNumber : 
		/// </summary>
		[EnumTextValue("RFND_NUMBER")]
		[ColumnEnum("RFND_NUMBER", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		RfndNumber = 13,
		/// <summary>
		/// CalcRfndValue : 
		/// </summary>
		[EnumTextValue("CALC_RFND_VALUE")]
		[ColumnEnum("CALC_RFND_VALUE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CalcRfndValue = 14,
		/// <summary>
		/// CalcRfndPrcnt : 
		/// </summary>
		[EnumTextValue("CALC_RFND_PRCNT")]
		[ColumnEnum("CALC_RFND_PRCNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CalcRfndPrcnt = 15,
		/// <summary>
		/// StudFeeBalance : رصيد الطالب الحالى
		/// </summary>
		[EnumTextValue("STUD_FEE_BALANCE")]
		[ColumnEnum("STUD_FEE_BALANCE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		StudFeeBalance = 16,
		/// <summary>
		/// RefndTypeId : 0:  من بند الى رصيد
		/// 		///  بند الى كاش: 1
		/// 		/// 2: بند الى شيك
		/// 		/// 3 : رصيد  لكاش
		/// 		/// 4: رصيد ل شيك
		/// 		/// 
		/// </summary>
		[EnumTextValue("REFND_TYPE_ID")]
		[ColumnEnum("REFND_TYPE_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		RefndTypeId = 17,
		/// <summary>
		/// AdmApplicantId : 
		/// </summary>
		[EnumTextValue("ADM_APPLICANT_ID")]
		[ColumnEnum("ADM_APPLICANT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmApplicantId = 18,
		/// <summary>
		/// CancelFlg : 
		/// </summary>
		[EnumTextValue("CANCEL_FLG")]
		[ColumnEnum("CANCEL_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		CancelFlg = 19,
		/// <summary>
		/// CancelDate : 
		/// </summary>
		[EnumTextValue("CANCEL_DATE")]
		[ColumnEnum("CANCEL_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CancelDate = 20,
		/// <summary>
		/// SeUserCnclId : 
		/// </summary>
		[EnumTextValue("SE_USER_CNCL_ID")]
		[ColumnEnum("SE_USER_CNCL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserCnclId = 21,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 22,
		/// <summary>
		/// UserName : 
		/// </summary>
		[EnumTextValue("USER_NAME")]
		[ColumnEnum("USER_NAME", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		UserName = 23,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 24,
		/// <summary>
		/// CheqNum : رقم الشيك فى حالة دفع بالشيك
		/// </summary>
		[EnumTextValue("CHEQ_NUM")]
		[ColumnEnum("CHEQ_NUM", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		CheqNum = 25,
		/// <summary>
		/// AccntNum : رقم حساب البنك  فى حالة ايداع&&في حالة السداد من نوع "الشيك"  يجب اظهار البنوك للاختيار منها وبعد اختيار البنك يقوم النظام باظهار رقم الحساب الخاص بالبنك
		/// </summary>
		[EnumTextValue("ACCNT_NUM")]
		[ColumnEnum("ACCNT_NUM", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		AccntNum = 26,
		/// <summary>
		/// FeeCodeBankId : في حالة وسيلة الدفع "شيك" يتم ادخال البنك ورقم الحساب ورقم الشيك وتاريخ استحقاق الشيك
		/// </summary>
		[EnumTextValue("FEE_CODE_BANK_ID")]
		[ColumnEnum("FEE_CODE_BANK_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeeCodeBankId = 27
	}//End enum

	#endregion FeeRefndStdReqColumn Enum

} // end namespace
