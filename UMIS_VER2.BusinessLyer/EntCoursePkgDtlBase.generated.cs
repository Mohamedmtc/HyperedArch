
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EntCoursePkgDtl.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ENT_COURSE_PKG_DTL' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EntCoursePkgDtlBase : EntityBase, IEntCoursePkgDtl, IEntityId<EntCoursePkgDtlKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EntCoursePkgDtlEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EntCoursePkgDtlEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EntCoursePkgDtlEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EntCoursePkgDtl> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EntCoursePkgDtlEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EntCoursePkgDtlEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EntCoursePkgDtlBase"/> instance.
		///</summary>
		public EntCoursePkgDtlBase()
		{
			this.entityData = new EntCoursePkgDtlEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EntCoursePkgDtlBase"/> instance.
		///</summary>
		///<param name="_entCoursePkgDtlId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_entCoursePkgHdrId"></param>
		///<param name="_addGpaFlg">يضاف للمعدل التراكمى- يضاف للمجموع التراكمى</param>
		///<param name="_addMjrgpaFlg"></param>
		///<param name="_crsExpFlg"></param>
		///<param name="_crsExp"></param>
		///<param name="_crsExpNameAr"></param>
		///<param name="_crsExpNameEn"></param>
		///<param name="_edCourseExpHdrId"></param>
		///<param name="_edCourseExpPrereqHdrId">XX not used </param>
		///<param name="_creditHours"></param>
		///<param name="_loadWithTrain"></param>
		///<param name="_prereqFlg"></param>
		///<param name="_prereqCodeExp"></param>
		///<param name="_prereqIdExp"></param>
		///<param name="_failFlg">مقرر  يحسب ضمن مقررات الرسوب</param>
		///<param name="_prereqStatusFlg">null/0 > شرط النجاح فى المقرر السابق(default)
		/// 		/// 1 > شرط التسجيل فقط</param>
		public EntCoursePkgDtlBase(System.Decimal _entCoursePkgDtlId, System.Decimal? _edCourseId, 
			System.Decimal? _entCoursePkgHdrId, System.Decimal _addGpaFlg, System.Decimal? _addMjrgpaFlg, 
			System.Decimal? _crsExpFlg, System.String _crsExp, System.String _crsExpNameAr, 
			System.String _crsExpNameEn, System.Decimal? _edCourseExpHdrId, System.Decimal? _edCourseExpPrereqHdrId, 
			System.Decimal? _creditHours, System.Decimal? _loadWithTrain, System.Decimal? _prereqFlg, 
			System.String _prereqCodeExp, System.String _prereqIdExp, System.Decimal _failFlg, 
			System.Decimal? _prereqStatusFlg)
		{
			this.entityData = new EntCoursePkgDtlEntityData();
			this.backupData = null;

			this.EntCoursePkgDtlId = _entCoursePkgDtlId;
			this.EdCourseId = _edCourseId;
			this.EntCoursePkgHdrId = _entCoursePkgHdrId;
			this.AddGpaFlg = _addGpaFlg;
			this.AddMjrgpaFlg = _addMjrgpaFlg;
			this.CrsExpFlg = _crsExpFlg;
			this.CrsExp = _crsExp;
			this.CrsExpNameAr = _crsExpNameAr;
			this.CrsExpNameEn = _crsExpNameEn;
			this.EdCourseExpHdrId = _edCourseExpHdrId;
			this.EdCourseExpPrereqHdrId = _edCourseExpPrereqHdrId;
			this.CreditHours = _creditHours;
			this.LoadWithTrain = _loadWithTrain;
			this.PrereqFlg = _prereqFlg;
			this.PrereqCodeExp = _prereqCodeExp;
			this.PrereqIdExp = _prereqIdExp;
			this.FailFlg = _failFlg;
			this.PrereqStatusFlg = _prereqStatusFlg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EntCoursePkgDtl"/> instance.
		///</summary>
		///<param name="_entCoursePkgDtlId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_entCoursePkgHdrId"></param>
		///<param name="_addGpaFlg">يضاف للمعدل التراكمى- يضاف للمجموع التراكمى</param>
		///<param name="_addMjrgpaFlg"></param>
		///<param name="_crsExpFlg"></param>
		///<param name="_crsExp"></param>
		///<param name="_crsExpNameAr"></param>
		///<param name="_crsExpNameEn"></param>
		///<param name="_edCourseExpHdrId"></param>
		///<param name="_edCourseExpPrereqHdrId">XX not used </param>
		///<param name="_creditHours"></param>
		///<param name="_loadWithTrain"></param>
		///<param name="_prereqFlg"></param>
		///<param name="_prereqCodeExp"></param>
		///<param name="_prereqIdExp"></param>
		///<param name="_failFlg">مقرر  يحسب ضمن مقررات الرسوب</param>
		///<param name="_prereqStatusFlg">null/0 > شرط النجاح فى المقرر السابق(default)
		/// 		/// 1 > شرط التسجيل فقط</param>
		public static EntCoursePkgDtl CreateEntCoursePkgDtl(System.Decimal _entCoursePkgDtlId, System.Decimal? _edCourseId, 
			System.Decimal? _entCoursePkgHdrId, System.Decimal _addGpaFlg, System.Decimal? _addMjrgpaFlg, 
			System.Decimal? _crsExpFlg, System.String _crsExp, System.String _crsExpNameAr, 
			System.String _crsExpNameEn, System.Decimal? _edCourseExpHdrId, System.Decimal? _edCourseExpPrereqHdrId, 
			System.Decimal? _creditHours, System.Decimal? _loadWithTrain, System.Decimal? _prereqFlg, 
			System.String _prereqCodeExp, System.String _prereqIdExp, System.Decimal _failFlg, 
			System.Decimal? _prereqStatusFlg)
		{
			EntCoursePkgDtl newEntCoursePkgDtl = new EntCoursePkgDtl();
			newEntCoursePkgDtl.EntCoursePkgDtlId = _entCoursePkgDtlId;
			newEntCoursePkgDtl.EdCourseId = _edCourseId;
			newEntCoursePkgDtl.EntCoursePkgHdrId = _entCoursePkgHdrId;
			newEntCoursePkgDtl.AddGpaFlg = _addGpaFlg;
			newEntCoursePkgDtl.AddMjrgpaFlg = _addMjrgpaFlg;
			newEntCoursePkgDtl.CrsExpFlg = _crsExpFlg;
			newEntCoursePkgDtl.CrsExp = _crsExp;
			newEntCoursePkgDtl.CrsExpNameAr = _crsExpNameAr;
			newEntCoursePkgDtl.CrsExpNameEn = _crsExpNameEn;
			newEntCoursePkgDtl.EdCourseExpHdrId = _edCourseExpHdrId;
			newEntCoursePkgDtl.EdCourseExpPrereqHdrId = _edCourseExpPrereqHdrId;
			newEntCoursePkgDtl.CreditHours = _creditHours;
			newEntCoursePkgDtl.LoadWithTrain = _loadWithTrain;
			newEntCoursePkgDtl.PrereqFlg = _prereqFlg;
			newEntCoursePkgDtl.PrereqCodeExp = _prereqCodeExp;
			newEntCoursePkgDtl.PrereqIdExp = _prereqIdExp;
			newEntCoursePkgDtl.FailFlg = _failFlg;
			newEntCoursePkgDtl.PrereqStatusFlg = _prereqStatusFlg;
			return newEntCoursePkgDtl;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EntCoursePkgDtlId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EntCoursePkgDtlId
		{
			get
			{
				return this.entityData.EntCoursePkgDtlId; 
			}
			
			set
			{
				if (this.entityData.EntCoursePkgDtlId == value)
					return;
					
				OnColumnChanging(EntCoursePkgDtlColumn.EntCoursePkgDtlId, this.entityData.EntCoursePkgDtlId);
				this.entityData.EntCoursePkgDtlId = value;
				this.EntityId.EntCoursePkgDtlId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCoursePkgDtlColumn.EntCoursePkgDtlId, this.entityData.EntCoursePkgDtlId);
				OnPropertyChanged("EntCoursePkgDtlId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ENT_COURSE_PKG_DTL_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ENT_COURSE_PKG_DTL_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEntCoursePkgDtlId
		{
			get { return this.entityData.OriginalEntCoursePkgDtlId; }
			set { this.entityData.OriginalEntCoursePkgDtlId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCourseIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCourseId
		{
			get
			{
				return this.entityData.EdCourseId; 
			}
			
			set
			{
				if (this.entityData.EdCourseId == value)
					return;
					
				OnColumnChanging(EntCoursePkgDtlColumn.EdCourseId, this.entityData.EdCourseId);
				this.entityData.EdCourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCoursePkgDtlColumn.EdCourseId, this.entityData.EdCourseId);
				OnPropertyChanged("EdCourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntCoursePkgHdrId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntCoursePkgHdrIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntCoursePkgHdrId
		{
			get
			{
				return this.entityData.EntCoursePkgHdrId; 
			}
			
			set
			{
				if (this.entityData.EntCoursePkgHdrId == value)
					return;
					
				OnColumnChanging(EntCoursePkgDtlColumn.EntCoursePkgHdrId, this.entityData.EntCoursePkgHdrId);
				this.entityData.EntCoursePkgHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCoursePkgDtlColumn.EntCoursePkgHdrId, this.entityData.EntCoursePkgHdrId);
				OnPropertyChanged("EntCoursePkgHdrId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AddGpaFlg property. 
		///		يضاف للمعدل التراكمى- يضاف للمجموع التراكمى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"يضاف للمعدل التراكمى- يضاف للمجموع التراكمى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AddGpaFlg
		{
			get
			{
				return this.entityData.AddGpaFlg; 
			}
			
			set
			{
				if (this.entityData.AddGpaFlg == value)
					return;
					
				OnColumnChanging(EntCoursePkgDtlColumn.AddGpaFlg, this.entityData.AddGpaFlg);
				this.entityData.AddGpaFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCoursePkgDtlColumn.AddGpaFlg, this.entityData.AddGpaFlg);
				OnPropertyChanged("AddGpaFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AddMjrgpaFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAddMjrgpaFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AddMjrgpaFlg
		{
			get
			{
				return this.entityData.AddMjrgpaFlg; 
			}
			
			set
			{
				if (this.entityData.AddMjrgpaFlg == value)
					return;
					
				OnColumnChanging(EntCoursePkgDtlColumn.AddMjrgpaFlg, this.entityData.AddMjrgpaFlg);
				this.entityData.AddMjrgpaFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCoursePkgDtlColumn.AddMjrgpaFlg, this.entityData.AddMjrgpaFlg);
				OnPropertyChanged("AddMjrgpaFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CrsExpFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCrsExpFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CrsExpFlg
		{
			get
			{
				return this.entityData.CrsExpFlg; 
			}
			
			set
			{
				if (this.entityData.CrsExpFlg == value)
					return;
					
				OnColumnChanging(EntCoursePkgDtlColumn.CrsExpFlg, this.entityData.CrsExpFlg);
				this.entityData.CrsExpFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCoursePkgDtlColumn.CrsExpFlg, this.entityData.CrsExpFlg);
				OnPropertyChanged("CrsExpFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CrsExp property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String CrsExp
		{
			get
			{
				return this.entityData.CrsExp; 
			}
			
			set
			{
				if (this.entityData.CrsExp == value)
					return;
					
				OnColumnChanging(EntCoursePkgDtlColumn.CrsExp, this.entityData.CrsExp);
				this.entityData.CrsExp = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCoursePkgDtlColumn.CrsExp, this.entityData.CrsExp);
				OnPropertyChanged("CrsExp");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CrsExpNameAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 60)]
		public virtual System.String CrsExpNameAr
		{
			get
			{
				return this.entityData.CrsExpNameAr; 
			}
			
			set
			{
				if (this.entityData.CrsExpNameAr == value)
					return;
					
				OnColumnChanging(EntCoursePkgDtlColumn.CrsExpNameAr, this.entityData.CrsExpNameAr);
				this.entityData.CrsExpNameAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCoursePkgDtlColumn.CrsExpNameAr, this.entityData.CrsExpNameAr);
				OnPropertyChanged("CrsExpNameAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CrsExpNameEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 60)]
		public virtual System.String CrsExpNameEn
		{
			get
			{
				return this.entityData.CrsExpNameEn; 
			}
			
			set
			{
				if (this.entityData.CrsExpNameEn == value)
					return;
					
				OnColumnChanging(EntCoursePkgDtlColumn.CrsExpNameEn, this.entityData.CrsExpNameEn);
				this.entityData.CrsExpNameEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCoursePkgDtlColumn.CrsExpNameEn, this.entityData.CrsExpNameEn);
				OnPropertyChanged("CrsExpNameEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseExpHdrId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCourseExpHdrIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCourseExpHdrId
		{
			get
			{
				return this.entityData.EdCourseExpHdrId; 
			}
			
			set
			{
				if (this.entityData.EdCourseExpHdrId == value)
					return;
					
				OnColumnChanging(EntCoursePkgDtlColumn.EdCourseExpHdrId, this.entityData.EdCourseExpHdrId);
				this.entityData.EdCourseExpHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCoursePkgDtlColumn.EdCourseExpHdrId, this.entityData.EdCourseExpHdrId);
				OnPropertyChanged("EdCourseExpHdrId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseExpPrereqHdrId property. 
		///		XX not used 
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCourseExpPrereqHdrIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XX not used "), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCourseExpPrereqHdrId
		{
			get
			{
				return this.entityData.EdCourseExpPrereqHdrId; 
			}
			
			set
			{
				if (this.entityData.EdCourseExpPrereqHdrId == value)
					return;
					
				OnColumnChanging(EntCoursePkgDtlColumn.EdCourseExpPrereqHdrId, this.entityData.EdCourseExpPrereqHdrId);
				this.entityData.EdCourseExpPrereqHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCoursePkgDtlColumn.EdCourseExpPrereqHdrId, this.entityData.EdCourseExpPrereqHdrId);
				OnPropertyChanged("EdCourseExpPrereqHdrId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreditHours property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCreditHoursNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CreditHours
		{
			get
			{
				return this.entityData.CreditHours; 
			}
			
			set
			{
				if (this.entityData.CreditHours == value)
					return;
					
				OnColumnChanging(EntCoursePkgDtlColumn.CreditHours, this.entityData.CreditHours);
				this.entityData.CreditHours = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCoursePkgDtlColumn.CreditHours, this.entityData.CreditHours);
				OnPropertyChanged("CreditHours");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LoadWithTrain property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsLoadWithTrainNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? LoadWithTrain
		{
			get
			{
				return this.entityData.LoadWithTrain; 
			}
			
			set
			{
				if (this.entityData.LoadWithTrain == value)
					return;
					
				OnColumnChanging(EntCoursePkgDtlColumn.LoadWithTrain, this.entityData.LoadWithTrain);
				this.entityData.LoadWithTrain = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCoursePkgDtlColumn.LoadWithTrain, this.entityData.LoadWithTrain);
				OnPropertyChanged("LoadWithTrain");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrereqFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPrereqFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PrereqFlg
		{
			get
			{
				return this.entityData.PrereqFlg; 
			}
			
			set
			{
				if (this.entityData.PrereqFlg == value)
					return;
					
				OnColumnChanging(EntCoursePkgDtlColumn.PrereqFlg, this.entityData.PrereqFlg);
				this.entityData.PrereqFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCoursePkgDtlColumn.PrereqFlg, this.entityData.PrereqFlg);
				OnPropertyChanged("PrereqFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrereqCodeExp property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String PrereqCodeExp
		{
			get
			{
				return this.entityData.PrereqCodeExp; 
			}
			
			set
			{
				if (this.entityData.PrereqCodeExp == value)
					return;
					
				OnColumnChanging(EntCoursePkgDtlColumn.PrereqCodeExp, this.entityData.PrereqCodeExp);
				this.entityData.PrereqCodeExp = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCoursePkgDtlColumn.PrereqCodeExp, this.entityData.PrereqCodeExp);
				OnPropertyChanged("PrereqCodeExp");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrereqIdExp property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String PrereqIdExp
		{
			get
			{
				return this.entityData.PrereqIdExp; 
			}
			
			set
			{
				if (this.entityData.PrereqIdExp == value)
					return;
					
				OnColumnChanging(EntCoursePkgDtlColumn.PrereqIdExp, this.entityData.PrereqIdExp);
				this.entityData.PrereqIdExp = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCoursePkgDtlColumn.PrereqIdExp, this.entityData.PrereqIdExp);
				OnPropertyChanged("PrereqIdExp");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FailFlg property. 
		///		مقرر  يحسب ضمن مقررات الرسوب
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"مقرر  يحسب ضمن مقررات الرسوب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal FailFlg
		{
			get
			{
				return this.entityData.FailFlg; 
			}
			
			set
			{
				if (this.entityData.FailFlg == value)
					return;
					
				OnColumnChanging(EntCoursePkgDtlColumn.FailFlg, this.entityData.FailFlg);
				this.entityData.FailFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCoursePkgDtlColumn.FailFlg, this.entityData.FailFlg);
				OnPropertyChanged("FailFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrereqStatusFlg property. 
		///		null/0 > شرط النجاح فى المقرر السابق(default)
		/// 		/// 1 > شرط التسجيل فقط
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPrereqStatusFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"null/0 > شرط النجاح فى المقرر السابق(default) 1 > شرط التسجيل فقط"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PrereqStatusFlg
		{
			get
			{
				return this.entityData.PrereqStatusFlg; 
			}
			
			set
			{
				if (this.entityData.PrereqStatusFlg == value)
					return;
					
				OnColumnChanging(EntCoursePkgDtlColumn.PrereqStatusFlg, this.entityData.PrereqStatusFlg);
				this.entityData.PrereqStatusFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCoursePkgDtlColumn.PrereqStatusFlg, this.entityData.PrereqStatusFlg);
				OnPropertyChanged("PrereqStatusFlg");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdCourseExpHdr"/>.
		/// </summary>
		/// <value>The source EdCourseExpHdr for EdCourseExpHdrId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCourseExpHdr EdCourseExpHdrIdSource
      	{
            get { return entityData.EdCourseExpHdrIdSource; }
            set { entityData.EdCourseExpHdrIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCourseExpHdr"/>.
		/// </summary>
		/// <value>The source EdCourseExpHdr for EdCourseExpPrereqHdrId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCourseExpHdr EdCourseExpPrereqHdrIdSource
      	{
            get { return entityData.EdCourseExpPrereqHdrIdSource; }
            set { entityData.EdCourseExpPrereqHdrIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return entityData.EdCourseIdSource; }
            set { entityData.EdCourseIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntCoursePkgHdr"/>.
		/// </summary>
		/// <value>The source EntCoursePkgHdr for EntCoursePkgHdrId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntCoursePkgHdr EntCoursePkgHdrIdSource
      	{
            get { return entityData.EntCoursePkgHdrIdSource; }
            set { entityData.EntCoursePkgHdrIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EdStudCourseReg objects
		///	which are related to this object through the relation FK_ED_STUD_COURSE_REG_ENT_COURSE_PKG_DTL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCourseReg> EdStudCourseRegCollection
		{
			get { return entityData.EdStudCourseRegCollection; }
			set { entityData.EdStudCourseRegCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CrsExp", "Crs Exp", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CrsExpNameAr", "Crs Exp Name Ar", 60));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CrsExpNameEn", "Crs Exp Name En", 60));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PrereqCodeExp", "Prereq Code Exp", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PrereqIdExp", "Prereq Id Exp", 250));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ENT_COURSE_PKG_DTL"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ENT_COURSE_PKG_DTL_ID", "ED_COURSE_ID", "ENT_COURSE_PKG_HDR_ID", "ADD_GPA_FLG", "ADD_MJRGPA_FLG", "CRS_EXP_FLG", "CRS_EXP", "CRS_EXP_NAME_AR", "CRS_EXP_NAME_EN", "ED_COURSE_EXP_HDR_ID", "ED_COURSE_EXP_PREREQ_HDR_ID", "CREDIT_HOURS", "LOAD_WITH_TRAIN", "PREREQ_FLG", "PREREQ_CODE_EXP", "PREREQ_ID_EXP", "FAIL_FLG", "PREREQ_STATUS_FLG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EntCoursePkgDtlEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EntCoursePkgDtl) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EntCoursePkgDtl>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EntCoursePkgDtl);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EntCoursePkgDtl Entity 
		///</summary>
		protected virtual EntCoursePkgDtl Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EntCoursePkgDtl copy = new EntCoursePkgDtl();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EntCoursePkgDtlId = this.EntCoursePkgDtlId;
					copy.OriginalEntCoursePkgDtlId = this.OriginalEntCoursePkgDtlId;
				copy.EdCourseId = this.EdCourseId;
				copy.EntCoursePkgHdrId = this.EntCoursePkgHdrId;
				copy.AddGpaFlg = this.AddGpaFlg;
				copy.AddMjrgpaFlg = this.AddMjrgpaFlg;
				copy.CrsExpFlg = this.CrsExpFlg;
				copy.CrsExp = this.CrsExp;
				copy.CrsExpNameAr = this.CrsExpNameAr;
				copy.CrsExpNameEn = this.CrsExpNameEn;
				copy.EdCourseExpHdrId = this.EdCourseExpHdrId;
				copy.EdCourseExpPrereqHdrId = this.EdCourseExpPrereqHdrId;
				copy.CreditHours = this.CreditHours;
				copy.LoadWithTrain = this.LoadWithTrain;
				copy.PrereqFlg = this.PrereqFlg;
				copy.PrereqCodeExp = this.PrereqCodeExp;
				copy.PrereqIdExp = this.PrereqIdExp;
				copy.FailFlg = this.FailFlg;
				copy.PrereqStatusFlg = this.PrereqStatusFlg;
			
			if (this.EdCourseExpHdrIdSource != null && existingCopies.Contains(this.EdCourseExpHdrIdSource))
				copy.EdCourseExpHdrIdSource = existingCopies[this.EdCourseExpHdrIdSource] as EdCourseExpHdr;
			else
				copy.EdCourseExpHdrIdSource = MakeCopyOf(this.EdCourseExpHdrIdSource, existingCopies) as EdCourseExpHdr;
			if (this.EdCourseExpPrereqHdrIdSource != null && existingCopies.Contains(this.EdCourseExpPrereqHdrIdSource))
				copy.EdCourseExpPrereqHdrIdSource = existingCopies[this.EdCourseExpPrereqHdrIdSource] as EdCourseExpHdr;
			else
				copy.EdCourseExpPrereqHdrIdSource = MakeCopyOf(this.EdCourseExpPrereqHdrIdSource, existingCopies) as EdCourseExpHdr;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				copy.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				copy.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EntCoursePkgHdrIdSource != null && existingCopies.Contains(this.EntCoursePkgHdrIdSource))
				copy.EntCoursePkgHdrIdSource = existingCopies[this.EntCoursePkgHdrIdSource] as EntCoursePkgHdr;
			else
				copy.EntCoursePkgHdrIdSource = MakeCopyOf(this.EntCoursePkgHdrIdSource, existingCopies) as EntCoursePkgHdr;
		
			//deep copy nested objects
			copy.EdStudCourseRegCollection = (TList<EdStudCourseReg>) MakeCopyOf(this.EdStudCourseRegCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EntCoursePkgDtl Entity 
		///</summary>
		public virtual EntCoursePkgDtl Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EntCoursePkgDtl Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EntCoursePkgDtl DeepCopy()
		{
			return EntityHelper.Clone<EntCoursePkgDtl>(this as EntCoursePkgDtl);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EntCoursePkgDtlEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EntCoursePkgDtlEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EntCoursePkgDtlEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EntCoursePkgDtlColumn column)
		{
			switch(column)
			{
					case EntCoursePkgDtlColumn.EntCoursePkgDtlId:
					return entityData.EntCoursePkgDtlId != _originalData.EntCoursePkgDtlId;
					case EntCoursePkgDtlColumn.EdCourseId:
					return entityData.EdCourseId != _originalData.EdCourseId;
					case EntCoursePkgDtlColumn.EntCoursePkgHdrId:
					return entityData.EntCoursePkgHdrId != _originalData.EntCoursePkgHdrId;
					case EntCoursePkgDtlColumn.AddGpaFlg:
					return entityData.AddGpaFlg != _originalData.AddGpaFlg;
					case EntCoursePkgDtlColumn.AddMjrgpaFlg:
					return entityData.AddMjrgpaFlg != _originalData.AddMjrgpaFlg;
					case EntCoursePkgDtlColumn.CrsExpFlg:
					return entityData.CrsExpFlg != _originalData.CrsExpFlg;
					case EntCoursePkgDtlColumn.CrsExp:
					return entityData.CrsExp != _originalData.CrsExp;
					case EntCoursePkgDtlColumn.CrsExpNameAr:
					return entityData.CrsExpNameAr != _originalData.CrsExpNameAr;
					case EntCoursePkgDtlColumn.CrsExpNameEn:
					return entityData.CrsExpNameEn != _originalData.CrsExpNameEn;
					case EntCoursePkgDtlColumn.EdCourseExpHdrId:
					return entityData.EdCourseExpHdrId != _originalData.EdCourseExpHdrId;
					case EntCoursePkgDtlColumn.EdCourseExpPrereqHdrId:
					return entityData.EdCourseExpPrereqHdrId != _originalData.EdCourseExpPrereqHdrId;
					case EntCoursePkgDtlColumn.CreditHours:
					return entityData.CreditHours != _originalData.CreditHours;
					case EntCoursePkgDtlColumn.LoadWithTrain:
					return entityData.LoadWithTrain != _originalData.LoadWithTrain;
					case EntCoursePkgDtlColumn.PrereqFlg:
					return entityData.PrereqFlg != _originalData.PrereqFlg;
					case EntCoursePkgDtlColumn.PrereqCodeExp:
					return entityData.PrereqCodeExp != _originalData.PrereqCodeExp;
					case EntCoursePkgDtlColumn.PrereqIdExp:
					return entityData.PrereqIdExp != _originalData.PrereqIdExp;
					case EntCoursePkgDtlColumn.FailFlg:
					return entityData.FailFlg != _originalData.FailFlg;
					case EntCoursePkgDtlColumn.PrereqStatusFlg:
					return entityData.PrereqStatusFlg != _originalData.PrereqStatusFlg;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EntCoursePkgDtlColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EntCoursePkgDtlId != _originalData.EntCoursePkgDtlId;
			result = result || entityData.EdCourseId != _originalData.EdCourseId;
			result = result || entityData.EntCoursePkgHdrId != _originalData.EntCoursePkgHdrId;
			result = result || entityData.AddGpaFlg != _originalData.AddGpaFlg;
			result = result || entityData.AddMjrgpaFlg != _originalData.AddMjrgpaFlg;
			result = result || entityData.CrsExpFlg != _originalData.CrsExpFlg;
			result = result || entityData.CrsExp != _originalData.CrsExp;
			result = result || entityData.CrsExpNameAr != _originalData.CrsExpNameAr;
			result = result || entityData.CrsExpNameEn != _originalData.CrsExpNameEn;
			result = result || entityData.EdCourseExpHdrId != _originalData.EdCourseExpHdrId;
			result = result || entityData.EdCourseExpPrereqHdrId != _originalData.EdCourseExpPrereqHdrId;
			result = result || entityData.CreditHours != _originalData.CreditHours;
			result = result || entityData.LoadWithTrain != _originalData.LoadWithTrain;
			result = result || entityData.PrereqFlg != _originalData.PrereqFlg;
			result = result || entityData.PrereqCodeExp != _originalData.PrereqCodeExp;
			result = result || entityData.PrereqIdExp != _originalData.PrereqIdExp;
			result = result || entityData.FailFlg != _originalData.FailFlg;
			result = result || entityData.PrereqStatusFlg != _originalData.PrereqStatusFlg;
			return result;
		}	
		
		///<summary>
		///  Returns a EntCoursePkgDtl Entity with the original data.
		///</summary>
		public EntCoursePkgDtl GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEntCoursePkgDtl(
				_originalData.EntCoursePkgDtlId,
				_originalData.EdCourseId,
				_originalData.EntCoursePkgHdrId,
				_originalData.AddGpaFlg,
				_originalData.AddMjrgpaFlg,
				_originalData.CrsExpFlg,
				_originalData.CrsExp,
				_originalData.CrsExpNameAr,
				_originalData.CrsExpNameEn,
				_originalData.EdCourseExpHdrId,
				_originalData.EdCourseExpPrereqHdrId,
				_originalData.CreditHours,
				_originalData.LoadWithTrain,
				_originalData.PrereqFlg,
				_originalData.PrereqCodeExp,
				_originalData.PrereqIdExp,
				_originalData.FailFlg,
				_originalData.PrereqStatusFlg
				);
				
			return (EntCoursePkgDtl)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EntCoursePkgDtlBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EntCoursePkgDtlBase)
				return ValueEquals(this, (EntCoursePkgDtlBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EntCoursePkgDtlBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EntCoursePkgDtlId.GetHashCode() ^ 
					((this.EdCourseId == null) ? string.Empty : this.EdCourseId.ToString()).GetHashCode() ^ 
					((this.EntCoursePkgHdrId == null) ? string.Empty : this.EntCoursePkgHdrId.ToString()).GetHashCode() ^ 
					this.AddGpaFlg.GetHashCode() ^ 
					((this.AddMjrgpaFlg == null) ? string.Empty : this.AddMjrgpaFlg.ToString()).GetHashCode() ^ 
					((this.CrsExpFlg == null) ? string.Empty : this.CrsExpFlg.ToString()).GetHashCode() ^ 
					((this.CrsExp == null) ? string.Empty : this.CrsExp.ToString()).GetHashCode() ^ 
					((this.CrsExpNameAr == null) ? string.Empty : this.CrsExpNameAr.ToString()).GetHashCode() ^ 
					((this.CrsExpNameEn == null) ? string.Empty : this.CrsExpNameEn.ToString()).GetHashCode() ^ 
					((this.EdCourseExpHdrId == null) ? string.Empty : this.EdCourseExpHdrId.ToString()).GetHashCode() ^ 
					((this.EdCourseExpPrereqHdrId == null) ? string.Empty : this.EdCourseExpPrereqHdrId.ToString()).GetHashCode() ^ 
					((this.CreditHours == null) ? string.Empty : this.CreditHours.ToString()).GetHashCode() ^ 
					((this.LoadWithTrain == null) ? string.Empty : this.LoadWithTrain.ToString()).GetHashCode() ^ 
					((this.PrereqFlg == null) ? string.Empty : this.PrereqFlg.ToString()).GetHashCode() ^ 
					((this.PrereqCodeExp == null) ? string.Empty : this.PrereqCodeExp.ToString()).GetHashCode() ^ 
					((this.PrereqIdExp == null) ? string.Empty : this.PrereqIdExp.ToString()).GetHashCode() ^ 
					this.FailFlg.GetHashCode() ^ 
					((this.PrereqStatusFlg == null) ? string.Empty : this.PrereqStatusFlg.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EntCoursePkgDtlBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EntCoursePkgDtlBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EntCoursePkgDtlBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EntCoursePkgDtlBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EntCoursePkgDtlBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EntCoursePkgDtlBase Object1, EntCoursePkgDtlBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EntCoursePkgDtlId != Object2.EntCoursePkgDtlId)
				equal = false;
			if ( Object1.EdCourseId != null && Object2.EdCourseId != null )
			{
				if (Object1.EdCourseId != Object2.EdCourseId)
					equal = false;
			}
			else if (Object1.EdCourseId == null ^ Object2.EdCourseId == null )
			{
				equal = false;
			}
			if ( Object1.EntCoursePkgHdrId != null && Object2.EntCoursePkgHdrId != null )
			{
				if (Object1.EntCoursePkgHdrId != Object2.EntCoursePkgHdrId)
					equal = false;
			}
			else if (Object1.EntCoursePkgHdrId == null ^ Object2.EntCoursePkgHdrId == null )
			{
				equal = false;
			}
			if (Object1.AddGpaFlg != Object2.AddGpaFlg)
				equal = false;
			if ( Object1.AddMjrgpaFlg != null && Object2.AddMjrgpaFlg != null )
			{
				if (Object1.AddMjrgpaFlg != Object2.AddMjrgpaFlg)
					equal = false;
			}
			else if (Object1.AddMjrgpaFlg == null ^ Object2.AddMjrgpaFlg == null )
			{
				equal = false;
			}
			if ( Object1.CrsExpFlg != null && Object2.CrsExpFlg != null )
			{
				if (Object1.CrsExpFlg != Object2.CrsExpFlg)
					equal = false;
			}
			else if (Object1.CrsExpFlg == null ^ Object2.CrsExpFlg == null )
			{
				equal = false;
			}
			if ( Object1.CrsExp != null && Object2.CrsExp != null )
			{
				if (Object1.CrsExp != Object2.CrsExp)
					equal = false;
			}
			else if (Object1.CrsExp == null ^ Object2.CrsExp == null )
			{
				equal = false;
			}
			if ( Object1.CrsExpNameAr != null && Object2.CrsExpNameAr != null )
			{
				if (Object1.CrsExpNameAr != Object2.CrsExpNameAr)
					equal = false;
			}
			else if (Object1.CrsExpNameAr == null ^ Object2.CrsExpNameAr == null )
			{
				equal = false;
			}
			if ( Object1.CrsExpNameEn != null && Object2.CrsExpNameEn != null )
			{
				if (Object1.CrsExpNameEn != Object2.CrsExpNameEn)
					equal = false;
			}
			else if (Object1.CrsExpNameEn == null ^ Object2.CrsExpNameEn == null )
			{
				equal = false;
			}
			if ( Object1.EdCourseExpHdrId != null && Object2.EdCourseExpHdrId != null )
			{
				if (Object1.EdCourseExpHdrId != Object2.EdCourseExpHdrId)
					equal = false;
			}
			else if (Object1.EdCourseExpHdrId == null ^ Object2.EdCourseExpHdrId == null )
			{
				equal = false;
			}
			if ( Object1.EdCourseExpPrereqHdrId != null && Object2.EdCourseExpPrereqHdrId != null )
			{
				if (Object1.EdCourseExpPrereqHdrId != Object2.EdCourseExpPrereqHdrId)
					equal = false;
			}
			else if (Object1.EdCourseExpPrereqHdrId == null ^ Object2.EdCourseExpPrereqHdrId == null )
			{
				equal = false;
			}
			if ( Object1.CreditHours != null && Object2.CreditHours != null )
			{
				if (Object1.CreditHours != Object2.CreditHours)
					equal = false;
			}
			else if (Object1.CreditHours == null ^ Object2.CreditHours == null )
			{
				equal = false;
			}
			if ( Object1.LoadWithTrain != null && Object2.LoadWithTrain != null )
			{
				if (Object1.LoadWithTrain != Object2.LoadWithTrain)
					equal = false;
			}
			else if (Object1.LoadWithTrain == null ^ Object2.LoadWithTrain == null )
			{
				equal = false;
			}
			if ( Object1.PrereqFlg != null && Object2.PrereqFlg != null )
			{
				if (Object1.PrereqFlg != Object2.PrereqFlg)
					equal = false;
			}
			else if (Object1.PrereqFlg == null ^ Object2.PrereqFlg == null )
			{
				equal = false;
			}
			if ( Object1.PrereqCodeExp != null && Object2.PrereqCodeExp != null )
			{
				if (Object1.PrereqCodeExp != Object2.PrereqCodeExp)
					equal = false;
			}
			else if (Object1.PrereqCodeExp == null ^ Object2.PrereqCodeExp == null )
			{
				equal = false;
			}
			if ( Object1.PrereqIdExp != null && Object2.PrereqIdExp != null )
			{
				if (Object1.PrereqIdExp != Object2.PrereqIdExp)
					equal = false;
			}
			else if (Object1.PrereqIdExp == null ^ Object2.PrereqIdExp == null )
			{
				equal = false;
			}
			if (Object1.FailFlg != Object2.FailFlg)
				equal = false;
			if ( Object1.PrereqStatusFlg != null && Object2.PrereqStatusFlg != null )
			{
				if (Object1.PrereqStatusFlg != Object2.PrereqStatusFlg)
					equal = false;
			}
			else if (Object1.PrereqStatusFlg == null ^ Object2.PrereqStatusFlg == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EntCoursePkgDtlBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EntCoursePkgDtlComparer GetComparer()
        {
            return new EntCoursePkgDtlComparer();
        }
        */

        // Comparer delegates back to EntCoursePkgDtl
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EntCoursePkgDtl rhs, EntCoursePkgDtlColumn which)
        {
            switch (which)
            {
            	
            	
            	case EntCoursePkgDtlColumn.EntCoursePkgDtlId:
            		return this.EntCoursePkgDtlId.CompareTo(rhs.EntCoursePkgDtlId);
            		
            		                 
            	
            	
            	case EntCoursePkgDtlColumn.EdCourseId:
            		return this.EdCourseId.Value.CompareTo(rhs.EdCourseId.Value);
            		
            		                 
            	
            	
            	case EntCoursePkgDtlColumn.EntCoursePkgHdrId:
            		return this.EntCoursePkgHdrId.Value.CompareTo(rhs.EntCoursePkgHdrId.Value);
            		
            		                 
            	
            	
            	case EntCoursePkgDtlColumn.AddGpaFlg:
            		return this.AddGpaFlg.CompareTo(rhs.AddGpaFlg);
            		
            		                 
            	
            	
            	case EntCoursePkgDtlColumn.AddMjrgpaFlg:
            		return this.AddMjrgpaFlg.Value.CompareTo(rhs.AddMjrgpaFlg.Value);
            		
            		                 
            	
            	
            	case EntCoursePkgDtlColumn.CrsExpFlg:
            		return this.CrsExpFlg.Value.CompareTo(rhs.CrsExpFlg.Value);
            		
            		                 
            	
            	
            	case EntCoursePkgDtlColumn.CrsExp:
            		return this.CrsExp.CompareTo(rhs.CrsExp);
            		
            		                 
            	
            	
            	case EntCoursePkgDtlColumn.CrsExpNameAr:
            		return this.CrsExpNameAr.CompareTo(rhs.CrsExpNameAr);
            		
            		                 
            	
            	
            	case EntCoursePkgDtlColumn.CrsExpNameEn:
            		return this.CrsExpNameEn.CompareTo(rhs.CrsExpNameEn);
            		
            		                 
            	
            	
            	case EntCoursePkgDtlColumn.EdCourseExpHdrId:
            		return this.EdCourseExpHdrId.Value.CompareTo(rhs.EdCourseExpHdrId.Value);
            		
            		                 
            	
            	
            	case EntCoursePkgDtlColumn.EdCourseExpPrereqHdrId:
            		return this.EdCourseExpPrereqHdrId.Value.CompareTo(rhs.EdCourseExpPrereqHdrId.Value);
            		
            		                 
            	
            	
            	case EntCoursePkgDtlColumn.CreditHours:
            		return this.CreditHours.Value.CompareTo(rhs.CreditHours.Value);
            		
            		                 
            	
            	
            	case EntCoursePkgDtlColumn.LoadWithTrain:
            		return this.LoadWithTrain.Value.CompareTo(rhs.LoadWithTrain.Value);
            		
            		                 
            	
            	
            	case EntCoursePkgDtlColumn.PrereqFlg:
            		return this.PrereqFlg.Value.CompareTo(rhs.PrereqFlg.Value);
            		
            		                 
            	
            	
            	case EntCoursePkgDtlColumn.PrereqCodeExp:
            		return this.PrereqCodeExp.CompareTo(rhs.PrereqCodeExp);
            		
            		                 
            	
            	
            	case EntCoursePkgDtlColumn.PrereqIdExp:
            		return this.PrereqIdExp.CompareTo(rhs.PrereqIdExp);
            		
            		                 
            	
            	
            	case EntCoursePkgDtlColumn.FailFlg:
            		return this.FailFlg.CompareTo(rhs.FailFlg);
            		
            		                 
            	
            	
            	case EntCoursePkgDtlColumn.PrereqStatusFlg:
            		return this.PrereqStatusFlg.Value.CompareTo(rhs.PrereqStatusFlg.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EntCoursePkgDtlKey> Members
		
		// member variable for the EntityId property
		private EntCoursePkgDtlKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EntCoursePkgDtlKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EntCoursePkgDtlKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EntCoursePkgDtl")
					.Append("|").Append( this.EntCoursePkgDtlId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{19}{18}- EntCoursePkgDtlId: {0}{18}- EdCourseId: {1}{18}- EntCoursePkgHdrId: {2}{18}- AddGpaFlg: {3}{18}- AddMjrgpaFlg: {4}{18}- CrsExpFlg: {5}{18}- CrsExp: {6}{18}- CrsExpNameAr: {7}{18}- CrsExpNameEn: {8}{18}- EdCourseExpHdrId: {9}{18}- EdCourseExpPrereqHdrId: {10}{18}- CreditHours: {11}{18}- LoadWithTrain: {12}{18}- PrereqFlg: {13}{18}- PrereqCodeExp: {14}{18}- PrereqIdExp: {15}{18}- FailFlg: {16}{18}- PrereqStatusFlg: {17}{18}{20}", 
				this.EntCoursePkgDtlId,
				(this.EdCourseId == null) ? string.Empty : this.EdCourseId.ToString(),
				(this.EntCoursePkgHdrId == null) ? string.Empty : this.EntCoursePkgHdrId.ToString(),
				this.AddGpaFlg,
				(this.AddMjrgpaFlg == null) ? string.Empty : this.AddMjrgpaFlg.ToString(),
				(this.CrsExpFlg == null) ? string.Empty : this.CrsExpFlg.ToString(),
				(this.CrsExp == null) ? string.Empty : this.CrsExp.ToString(),
				(this.CrsExpNameAr == null) ? string.Empty : this.CrsExpNameAr.ToString(),
				(this.CrsExpNameEn == null) ? string.Empty : this.CrsExpNameEn.ToString(),
				(this.EdCourseExpHdrId == null) ? string.Empty : this.EdCourseExpHdrId.ToString(),
				(this.EdCourseExpPrereqHdrId == null) ? string.Empty : this.EdCourseExpPrereqHdrId.ToString(),
				(this.CreditHours == null) ? string.Empty : this.CreditHours.ToString(),
				(this.LoadWithTrain == null) ? string.Empty : this.LoadWithTrain.ToString(),
				(this.PrereqFlg == null) ? string.Empty : this.PrereqFlg.ToString(),
				(this.PrereqCodeExp == null) ? string.Empty : this.PrereqCodeExp.ToString(),
				(this.PrereqIdExp == null) ? string.Empty : this.PrereqIdExp.ToString(),
				this.FailFlg,
				(this.PrereqStatusFlg == null) ? string.Empty : this.PrereqStatusFlg.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ENT_COURSE_PKG_DTL' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EntCoursePkgDtlEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ENT_COURSE_PKG_DTL_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ENT_COURSE_PKG_DTL"</remarks>
		public System.Decimal EntCoursePkgDtlId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEntCoursePkgDtlId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_COURSE_ID : 
		/// </summary>
		public System.Decimal?		  EdCourseId = null;
		
		/// <summary>
		/// ENT_COURSE_PKG_HDR_ID : 
		/// </summary>
		public System.Decimal?		  EntCoursePkgHdrId = null;
		
		/// <summary>
		/// ADD_GPA_FLG : يضاف للمعدل التراكمى- يضاف للمجموع التراكمى
		/// </summary>
		public System.Decimal		  AddGpaFlg = 0.0m;
		
		/// <summary>
		/// ADD_MJRGPA_FLG : 
		/// </summary>
		public System.Decimal?		  AddMjrgpaFlg = null;
		
		/// <summary>
		/// CRS_EXP_FLG : 
		/// </summary>
		public System.Decimal?		  CrsExpFlg = null;
		
		/// <summary>
		/// CRS_EXP : 
		/// </summary>
		public System.String		  CrsExp = null;
		
		/// <summary>
		/// CRS_EXP_NAME_AR : 
		/// </summary>
		public System.String		  CrsExpNameAr = null;
		
		/// <summary>
		/// CRS_EXP_NAME_EN : 
		/// </summary>
		public System.String		  CrsExpNameEn = null;
		
		/// <summary>
		/// ED_COURSE_EXP_HDR_ID : 
		/// </summary>
		public System.Decimal?		  EdCourseExpHdrId = null;
		
		/// <summary>
		/// ED_COURSE_EXP_PREREQ_HDR_ID : XX not used 
		/// </summary>
		public System.Decimal?		  EdCourseExpPrereqHdrId = null;
		
		/// <summary>
		/// CREDIT_HOURS : 
		/// </summary>
		public System.Decimal?		  CreditHours = null;
		
		/// <summary>
		/// LOAD_WITH_TRAIN : 
		/// </summary>
		public System.Decimal?		  LoadWithTrain = null;
		
		/// <summary>
		/// PREREQ_FLG : 
		/// </summary>
		public System.Decimal?		  PrereqFlg = null;
		
		/// <summary>
		/// PREREQ_CODE_EXP : 
		/// </summary>
		public System.String		  PrereqCodeExp = null;
		
		/// <summary>
		/// PREREQ_ID_EXP : 
		/// </summary>
		public System.String		  PrereqIdExp = null;
		
		/// <summary>
		/// FAIL_FLG : مقرر  يحسب ضمن مقررات الرسوب
		/// </summary>
		public System.Decimal		  FailFlg = 0.0m;
		
		/// <summary>
		/// PREREQ_STATUS_FLG : null/0 > شرط النجاح فى المقرر السابق(default)
		/// 		/// 1 > شرط التسجيل فقط
		/// </summary>
		public System.Decimal?		  PrereqStatusFlg = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdCourseExpHdr _edCourseExpHdrIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCourseExpHdr"/>.
		/// </summary>
		/// <value>The source EdCourseExpHdr for EdCourseExpHdrId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCourseExpHdr EdCourseExpHdrIdSource
      	{
            get { return this._edCourseExpHdrIdSource; }
            set { this._edCourseExpHdrIdSource = value; }
      	}
		private EdCourseExpHdr _edCourseExpPrereqHdrIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCourseExpHdr"/>.
		/// </summary>
		/// <value>The source EdCourseExpHdr for EdCourseExpPrereqHdrId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCourseExpHdr EdCourseExpPrereqHdrIdSource
      	{
            get { return this._edCourseExpPrereqHdrIdSource; }
            set { this._edCourseExpPrereqHdrIdSource = value; }
      	}
		private EdCourse _edCourseIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return this._edCourseIdSource; }
            set { this._edCourseIdSource = value; }
      	}
		private EntCoursePkgHdr _entCoursePkgHdrIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntCoursePkgHdr"/>.
		/// </summary>
		/// <value>The source EntCoursePkgHdr for EntCoursePkgHdrId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntCoursePkgHdr EntCoursePkgHdrIdSource
      	{
            get { return this._entCoursePkgHdrIdSource; }
            set { this._entCoursePkgHdrIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EdStudCourseRegCollection
		
		private TList<EdStudCourseReg> _edStudCourseRegEntCoursePkgDtlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCourseRegEntCoursePkgDtlId
		/// </summary>
		
		public TList<EdStudCourseReg> EdStudCourseRegCollection
		{
			get
			{
				if (_edStudCourseRegEntCoursePkgDtlId == null)
				{
				_edStudCourseRegEntCoursePkgDtlId = new TList<EdStudCourseReg>();
				}
	
				return _edStudCourseRegEntCoursePkgDtlId;
			}
			set { _edStudCourseRegEntCoursePkgDtlId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EntCoursePkgDtlEntityData _tmp = new EntCoursePkgDtlEntityData();
						
			_tmp.EntCoursePkgDtlId = this.EntCoursePkgDtlId;
			_tmp.OriginalEntCoursePkgDtlId = this.OriginalEntCoursePkgDtlId;
			
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.EntCoursePkgHdrId = this.EntCoursePkgHdrId;
			_tmp.AddGpaFlg = this.AddGpaFlg;
			_tmp.AddMjrgpaFlg = this.AddMjrgpaFlg;
			_tmp.CrsExpFlg = this.CrsExpFlg;
			_tmp.CrsExp = this.CrsExp;
			_tmp.CrsExpNameAr = this.CrsExpNameAr;
			_tmp.CrsExpNameEn = this.CrsExpNameEn;
			_tmp.EdCourseExpHdrId = this.EdCourseExpHdrId;
			_tmp.EdCourseExpPrereqHdrId = this.EdCourseExpPrereqHdrId;
			_tmp.CreditHours = this.CreditHours;
			_tmp.LoadWithTrain = this.LoadWithTrain;
			_tmp.PrereqFlg = this.PrereqFlg;
			_tmp.PrereqCodeExp = this.PrereqCodeExp;
			_tmp.PrereqIdExp = this.PrereqIdExp;
			_tmp.FailFlg = this.FailFlg;
			_tmp.PrereqStatusFlg = this.PrereqStatusFlg;
			
			#region Source Parent Composite Entities
			if (this.EdCourseExpHdrIdSource != null)
				_tmp.EdCourseExpHdrIdSource = MakeCopyOf(this.EdCourseExpHdrIdSource) as EdCourseExpHdr;
			if (this.EdCourseExpPrereqHdrIdSource != null)
				_tmp.EdCourseExpPrereqHdrIdSource = MakeCopyOf(this.EdCourseExpPrereqHdrIdSource) as EdCourseExpHdr;
			if (this.EdCourseIdSource != null)
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource) as EdCourse;
			if (this.EntCoursePkgHdrIdSource != null)
				_tmp.EntCoursePkgHdrIdSource = MakeCopyOf(this.EntCoursePkgHdrIdSource) as EntCoursePkgHdr;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._edStudCourseRegEntCoursePkgDtlId != null)
				_tmp.EdStudCourseRegCollection = (TList<EdStudCourseReg>) MakeCopyOf(this.EdStudCourseRegCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EntCoursePkgDtlEntityData _tmp = new EntCoursePkgDtlEntityData();
						
			_tmp.EntCoursePkgDtlId = this.EntCoursePkgDtlId;
			_tmp.OriginalEntCoursePkgDtlId = this.OriginalEntCoursePkgDtlId;
			
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.EntCoursePkgHdrId = this.EntCoursePkgHdrId;
			_tmp.AddGpaFlg = this.AddGpaFlg;
			_tmp.AddMjrgpaFlg = this.AddMjrgpaFlg;
			_tmp.CrsExpFlg = this.CrsExpFlg;
			_tmp.CrsExp = this.CrsExp;
			_tmp.CrsExpNameAr = this.CrsExpNameAr;
			_tmp.CrsExpNameEn = this.CrsExpNameEn;
			_tmp.EdCourseExpHdrId = this.EdCourseExpHdrId;
			_tmp.EdCourseExpPrereqHdrId = this.EdCourseExpPrereqHdrId;
			_tmp.CreditHours = this.CreditHours;
			_tmp.LoadWithTrain = this.LoadWithTrain;
			_tmp.PrereqFlg = this.PrereqFlg;
			_tmp.PrereqCodeExp = this.PrereqCodeExp;
			_tmp.PrereqIdExp = this.PrereqIdExp;
			_tmp.FailFlg = this.FailFlg;
			_tmp.PrereqStatusFlg = this.PrereqStatusFlg;
			
			#region Source Parent Composite Entities
			if (this.EdCourseExpHdrIdSource != null && existingCopies.Contains(this.EdCourseExpHdrIdSource))
				_tmp.EdCourseExpHdrIdSource = existingCopies[this.EdCourseExpHdrIdSource] as EdCourseExpHdr;
			else
				_tmp.EdCourseExpHdrIdSource = MakeCopyOf(this.EdCourseExpHdrIdSource, existingCopies) as EdCourseExpHdr;
			if (this.EdCourseExpPrereqHdrIdSource != null && existingCopies.Contains(this.EdCourseExpPrereqHdrIdSource))
				_tmp.EdCourseExpPrereqHdrIdSource = existingCopies[this.EdCourseExpPrereqHdrIdSource] as EdCourseExpHdr;
			else
				_tmp.EdCourseExpPrereqHdrIdSource = MakeCopyOf(this.EdCourseExpPrereqHdrIdSource, existingCopies) as EdCourseExpHdr;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				_tmp.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EntCoursePkgHdrIdSource != null && existingCopies.Contains(this.EntCoursePkgHdrIdSource))
				_tmp.EntCoursePkgHdrIdSource = existingCopies[this.EntCoursePkgHdrIdSource] as EntCoursePkgHdr;
			else
				_tmp.EntCoursePkgHdrIdSource = MakeCopyOf(this.EntCoursePkgHdrIdSource, existingCopies) as EntCoursePkgHdr;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EdStudCourseRegCollection = (TList<EdStudCourseReg>) MakeCopyOf(this.EdStudCourseRegCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntCoursePkgDtlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EntCoursePkgDtlColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntCoursePkgDtlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EntCoursePkgDtlColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntCoursePkgDtlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EntCoursePkgDtlColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EntCoursePkgDtlEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EntCoursePkgDtlEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntCoursePkgDtlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EntCoursePkgDtlColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EntCoursePkgDtlEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EntCoursePkgDtlEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EntCoursePkgDtlEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EntCoursePkgDtl"/> object.
	/// </remarks>
	public class EntCoursePkgDtlEventArgs : System.EventArgs
	{
		private EntCoursePkgDtlColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EntCoursePkgDtlEventArgs class.
		///</summary>
		public EntCoursePkgDtlEventArgs(EntCoursePkgDtlColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EntCoursePkgDtlEventArgs class.
		///</summary>
		public EntCoursePkgDtlEventArgs(EntCoursePkgDtlColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EntCoursePkgDtlColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EntCoursePkgDtlColumn" />
		public EntCoursePkgDtlColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EntCoursePkgDtl related events.
	///</summary>
	public delegate void EntCoursePkgDtlEventHandler(object sender, EntCoursePkgDtlEventArgs e);
	
	#region EntCoursePkgDtlComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EntCoursePkgDtlComparer : System.Collections.Generic.IComparer<EntCoursePkgDtl>
	{
		EntCoursePkgDtlColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EntCoursePkgDtlComparer"/> class.
        /// </summary>
		public EntCoursePkgDtlComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EntCoursePkgDtlComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EntCoursePkgDtlComparer(EntCoursePkgDtlColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EntCoursePkgDtl"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EntCoursePkgDtl"/> to compare.</param>
        /// <param name="b">The second <c>EntCoursePkgDtl</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EntCoursePkgDtl a, EntCoursePkgDtl b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EntCoursePkgDtl entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EntCoursePkgDtl a, EntCoursePkgDtl b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EntCoursePkgDtlColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EntCoursePkgDtlKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EntCoursePkgDtl"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EntCoursePkgDtlKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EntCoursePkgDtlKey class.
		/// </summary>
		public EntCoursePkgDtlKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EntCoursePkgDtlKey class.
		/// </summary>
		public EntCoursePkgDtlKey(EntCoursePkgDtlBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EntCoursePkgDtlId = entity.EntCoursePkgDtlId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EntCoursePkgDtlKey class.
		/// </summary>
		public EntCoursePkgDtlKey(System.Decimal _entCoursePkgDtlId)
		{
			#region Init Properties

			this.EntCoursePkgDtlId = _entCoursePkgDtlId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EntCoursePkgDtlBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EntCoursePkgDtlBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EntCoursePkgDtlId property
		private System.Decimal _entCoursePkgDtlId;
		
		/// <summary>
		/// Gets or sets the EntCoursePkgDtlId property.
		/// </summary>
		public System.Decimal EntCoursePkgDtlId
		{
			get { return _entCoursePkgDtlId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EntCoursePkgDtlId = value;
				
				_entCoursePkgDtlId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EntCoursePkgDtlId = ( values["EntCoursePkgDtlId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EntCoursePkgDtlId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EntCoursePkgDtlId", EntCoursePkgDtlId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EntCoursePkgDtlId: {0}{1}",
								EntCoursePkgDtlId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EntCoursePkgDtlColumn Enum
	
	/// <summary>
	/// Enumerate the EntCoursePkgDtl columns.
	/// </summary>
	[Serializable]
	public enum EntCoursePkgDtlColumn : int
	{
		/// <summary>
		/// EntCoursePkgDtlId : 
		/// </summary>
		[EnumTextValue("ENT_COURSE_PKG_DTL_ID")]
		[ColumnEnum("ENT_COURSE_PKG_DTL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EntCoursePkgDtlId = 1,
		/// <summary>
		/// EdCourseId : 
		/// </summary>
		[EnumTextValue("ED_COURSE_ID")]
		[ColumnEnum("ED_COURSE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCourseId = 2,
		/// <summary>
		/// EntCoursePkgHdrId : 
		/// </summary>
		[EnumTextValue("ENT_COURSE_PKG_HDR_ID")]
		[ColumnEnum("ENT_COURSE_PKG_HDR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntCoursePkgHdrId = 3,
		/// <summary>
		/// AddGpaFlg : يضاف للمعدل التراكمى- يضاف للمجموع التراكمى
		/// </summary>
		[EnumTextValue("ADD_GPA_FLG")]
		[ColumnEnum("ADD_GPA_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AddGpaFlg = 4,
		/// <summary>
		/// AddMjrgpaFlg : 
		/// </summary>
		[EnumTextValue("ADD_MJRGPA_FLG")]
		[ColumnEnum("ADD_MJRGPA_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AddMjrgpaFlg = 5,
		/// <summary>
		/// CrsExpFlg : 
		/// </summary>
		[EnumTextValue("CRS_EXP_FLG")]
		[ColumnEnum("CRS_EXP_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CrsExpFlg = 6,
		/// <summary>
		/// CrsExp : 
		/// </summary>
		[EnumTextValue("CRS_EXP")]
		[ColumnEnum("CRS_EXP", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		CrsExp = 7,
		/// <summary>
		/// CrsExpNameAr : 
		/// </summary>
		[EnumTextValue("CRS_EXP_NAME_AR")]
		[ColumnEnum("CRS_EXP_NAME_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 60)]
		CrsExpNameAr = 8,
		/// <summary>
		/// CrsExpNameEn : 
		/// </summary>
		[EnumTextValue("CRS_EXP_NAME_EN")]
		[ColumnEnum("CRS_EXP_NAME_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 60)]
		CrsExpNameEn = 9,
		/// <summary>
		/// EdCourseExpHdrId : 
		/// </summary>
		[EnumTextValue("ED_COURSE_EXP_HDR_ID")]
		[ColumnEnum("ED_COURSE_EXP_HDR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCourseExpHdrId = 10,
		/// <summary>
		/// EdCourseExpPrereqHdrId : XX not used 
		/// </summary>
		[EnumTextValue("ED_COURSE_EXP_PREREQ_HDR_ID")]
		[ColumnEnum("ED_COURSE_EXP_PREREQ_HDR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCourseExpPrereqHdrId = 11,
		/// <summary>
		/// CreditHours : 
		/// </summary>
		[EnumTextValue("CREDIT_HOURS")]
		[ColumnEnum("CREDIT_HOURS", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CreditHours = 12,
		/// <summary>
		/// LoadWithTrain : 
		/// </summary>
		[EnumTextValue("LOAD_WITH_TRAIN")]
		[ColumnEnum("LOAD_WITH_TRAIN", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		LoadWithTrain = 13,
		/// <summary>
		/// PrereqFlg : 
		/// </summary>
		[EnumTextValue("PREREQ_FLG")]
		[ColumnEnum("PREREQ_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PrereqFlg = 14,
		/// <summary>
		/// PrereqCodeExp : 
		/// </summary>
		[EnumTextValue("PREREQ_CODE_EXP")]
		[ColumnEnum("PREREQ_CODE_EXP", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		PrereqCodeExp = 15,
		/// <summary>
		/// PrereqIdExp : 
		/// </summary>
		[EnumTextValue("PREREQ_ID_EXP")]
		[ColumnEnum("PREREQ_ID_EXP", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		PrereqIdExp = 16,
		/// <summary>
		/// FailFlg : مقرر  يحسب ضمن مقررات الرسوب
		/// </summary>
		[EnumTextValue("FAIL_FLG")]
		[ColumnEnum("FAIL_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		FailFlg = 17,
		/// <summary>
		/// PrereqStatusFlg : null/0 > شرط النجاح فى المقرر السابق(default)
		/// 		/// 1 > شرط التسجيل فقط
		/// </summary>
		[EnumTextValue("PREREQ_STATUS_FLG")]
		[ColumnEnum("PREREQ_STATUS_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PrereqStatusFlg = 18
	}//End enum

	#endregion EntCoursePkgDtlColumn Enum

} // end namespace
