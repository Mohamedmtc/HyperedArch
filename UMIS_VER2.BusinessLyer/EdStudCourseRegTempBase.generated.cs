
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdStudCourseRegTemp.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_STUD_COURSE_REG_TEMP' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdStudCourseRegTempBase : EntityBase, IEdStudCourseRegTemp, IEntityId<EdStudCourseRegTempKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdStudCourseRegTempEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdStudCourseRegTempEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdStudCourseRegTempEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdStudCourseRegTemp> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudCourseRegTempEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudCourseRegTempEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdStudCourseRegTempBase"/> instance.
		///</summary>
		public EdStudCourseRegTempBase()
		{
			this.entityData = new EdStudCourseRegTempEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdStudCourseRegTempBase"/> instance.
		///</summary>
		///<param name="_edStudCourseRegTempId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_regDate"></param>
		///<param name="_auditFlg"></param>
		///<param name="_repeatFlg"></param>
		///<param name="_isLast"></param>
		///<param name="_isApproved"></param>
		///<param name="_approveDate"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_edCodeCourseStatusId"></param>
		///<param name="_edCodeGradingId"></param>
		///<param name="_courseDegree"></param>
		///<param name="_coursePoint"></param>
		///<param name="_entPolicyGradingHdrId"></param>
		///<param name="_gsCodePassFailId"></param>
		///<param name="_edStudSemesterId"></param>
		///<param name="_addGpaFlg"></param>
		///<param name="_entPolicyAssessHdrId"></param>
		///<param name="_incompFlg"></param>
		///<param name="_hideFlg"></param>
		///<param name="_hideReason"></param>
		///<param name="_edCourseSubId"></param>
		///<param name="_lastDate"></param>
		///<param name="_seFormId"></param>
		///<param name="_seUserId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_edStudId"></param>
		public EdStudCourseRegTempBase(System.Decimal _edStudCourseRegTempId, System.Decimal _edCourseId, 
			System.DateTime? _regDate, System.Decimal _auditFlg, System.Decimal _repeatFlg, 
			System.Decimal _isLast, System.Decimal _isApproved, System.DateTime? _approveDate, 
			System.Decimal _asFacultyInfoId, System.Decimal? _edCodeCourseStatusId, System.Decimal? _edCodeGradingId, 
			System.Decimal? _courseDegree, System.Decimal? _coursePoint, System.Decimal? _entPolicyGradingHdrId, 
			System.Decimal? _gsCodePassFailId, System.Decimal? _edStudSemesterId, System.Decimal _addGpaFlg, 
			System.Decimal? _entPolicyAssessHdrId, System.Decimal _incompFlg, System.Decimal _hideFlg, 
			System.String _hideReason, System.Decimal? _edCourseSubId, System.DateTime? _lastDate, 
			System.Decimal? _seFormId, System.Decimal? _seUserId, System.Decimal? _edAcadYearId, 
			System.Decimal? _edCodeSemesterId, System.Decimal? _edStudId)
		{
			this.entityData = new EdStudCourseRegTempEntityData();
			this.backupData = null;

			this.EdStudCourseRegTempId = _edStudCourseRegTempId;
			this.EdCourseId = _edCourseId;
			this.RegDate = _regDate;
			this.AuditFlg = _auditFlg;
			this.RepeatFlg = _repeatFlg;
			this.IsLast = _isLast;
			this.IsApproved = _isApproved;
			this.ApproveDate = _approveDate;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.EdCodeCourseStatusId = _edCodeCourseStatusId;
			this.EdCodeGradingId = _edCodeGradingId;
			this.CourseDegree = _courseDegree;
			this.CoursePoint = _coursePoint;
			this.EntPolicyGradingHdrId = _entPolicyGradingHdrId;
			this.GsCodePassFailId = _gsCodePassFailId;
			this.EdStudSemesterId = _edStudSemesterId;
			this.AddGpaFlg = _addGpaFlg;
			this.EntPolicyAssessHdrId = _entPolicyAssessHdrId;
			this.IncompFlg = _incompFlg;
			this.HideFlg = _hideFlg;
			this.HideReason = _hideReason;
			this.EdCourseSubId = _edCourseSubId;
			this.LastDate = _lastDate;
			this.SeFormId = _seFormId;
			this.SeUserId = _seUserId;
			this.EdAcadYearId = _edAcadYearId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.EdStudId = _edStudId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdStudCourseRegTemp"/> instance.
		///</summary>
		///<param name="_edStudCourseRegTempId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_regDate"></param>
		///<param name="_auditFlg"></param>
		///<param name="_repeatFlg"></param>
		///<param name="_isLast"></param>
		///<param name="_isApproved"></param>
		///<param name="_approveDate"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_edCodeCourseStatusId"></param>
		///<param name="_edCodeGradingId"></param>
		///<param name="_courseDegree"></param>
		///<param name="_coursePoint"></param>
		///<param name="_entPolicyGradingHdrId"></param>
		///<param name="_gsCodePassFailId"></param>
		///<param name="_edStudSemesterId"></param>
		///<param name="_addGpaFlg"></param>
		///<param name="_entPolicyAssessHdrId"></param>
		///<param name="_incompFlg"></param>
		///<param name="_hideFlg"></param>
		///<param name="_hideReason"></param>
		///<param name="_edCourseSubId"></param>
		///<param name="_lastDate"></param>
		///<param name="_seFormId"></param>
		///<param name="_seUserId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_edStudId"></param>
		public static EdStudCourseRegTemp CreateEdStudCourseRegTemp(System.Decimal _edStudCourseRegTempId, System.Decimal _edCourseId, 
			System.DateTime? _regDate, System.Decimal _auditFlg, System.Decimal _repeatFlg, 
			System.Decimal _isLast, System.Decimal _isApproved, System.DateTime? _approveDate, 
			System.Decimal _asFacultyInfoId, System.Decimal? _edCodeCourseStatusId, System.Decimal? _edCodeGradingId, 
			System.Decimal? _courseDegree, System.Decimal? _coursePoint, System.Decimal? _entPolicyGradingHdrId, 
			System.Decimal? _gsCodePassFailId, System.Decimal? _edStudSemesterId, System.Decimal _addGpaFlg, 
			System.Decimal? _entPolicyAssessHdrId, System.Decimal _incompFlg, System.Decimal _hideFlg, 
			System.String _hideReason, System.Decimal? _edCourseSubId, System.DateTime? _lastDate, 
			System.Decimal? _seFormId, System.Decimal? _seUserId, System.Decimal? _edAcadYearId, 
			System.Decimal? _edCodeSemesterId, System.Decimal? _edStudId)
		{
			EdStudCourseRegTemp newEdStudCourseRegTemp = new EdStudCourseRegTemp();
			newEdStudCourseRegTemp.EdStudCourseRegTempId = _edStudCourseRegTempId;
			newEdStudCourseRegTemp.EdCourseId = _edCourseId;
			newEdStudCourseRegTemp.RegDate = _regDate;
			newEdStudCourseRegTemp.AuditFlg = _auditFlg;
			newEdStudCourseRegTemp.RepeatFlg = _repeatFlg;
			newEdStudCourseRegTemp.IsLast = _isLast;
			newEdStudCourseRegTemp.IsApproved = _isApproved;
			newEdStudCourseRegTemp.ApproveDate = _approveDate;
			newEdStudCourseRegTemp.AsFacultyInfoId = _asFacultyInfoId;
			newEdStudCourseRegTemp.EdCodeCourseStatusId = _edCodeCourseStatusId;
			newEdStudCourseRegTemp.EdCodeGradingId = _edCodeGradingId;
			newEdStudCourseRegTemp.CourseDegree = _courseDegree;
			newEdStudCourseRegTemp.CoursePoint = _coursePoint;
			newEdStudCourseRegTemp.EntPolicyGradingHdrId = _entPolicyGradingHdrId;
			newEdStudCourseRegTemp.GsCodePassFailId = _gsCodePassFailId;
			newEdStudCourseRegTemp.EdStudSemesterId = _edStudSemesterId;
			newEdStudCourseRegTemp.AddGpaFlg = _addGpaFlg;
			newEdStudCourseRegTemp.EntPolicyAssessHdrId = _entPolicyAssessHdrId;
			newEdStudCourseRegTemp.IncompFlg = _incompFlg;
			newEdStudCourseRegTemp.HideFlg = _hideFlg;
			newEdStudCourseRegTemp.HideReason = _hideReason;
			newEdStudCourseRegTemp.EdCourseSubId = _edCourseSubId;
			newEdStudCourseRegTemp.LastDate = _lastDate;
			newEdStudCourseRegTemp.SeFormId = _seFormId;
			newEdStudCourseRegTemp.SeUserId = _seUserId;
			newEdStudCourseRegTemp.EdAcadYearId = _edAcadYearId;
			newEdStudCourseRegTemp.EdCodeSemesterId = _edCodeSemesterId;
			newEdStudCourseRegTemp.EdStudId = _edStudId;
			return newEdStudCourseRegTemp;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdStudCourseRegTempId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdStudCourseRegTempId
		{
			get
			{
				return this.entityData.EdStudCourseRegTempId; 
			}
			
			set
			{
				if (this.entityData.EdStudCourseRegTempId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.EdStudCourseRegTempId, this.entityData.EdStudCourseRegTempId);
				this.entityData.EdStudCourseRegTempId = value;
				this.EntityId.EdStudCourseRegTempId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.EdStudCourseRegTempId, this.entityData.EdStudCourseRegTempId);
				OnPropertyChanged("EdStudCourseRegTempId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_STUD_COURSE_REG_TEMP_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ED_STUD_COURSE_REG_TEMP_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdStudCourseRegTempId
		{
			get { return this.entityData.OriginalEdStudCourseRegTempId; }
			set { this.entityData.OriginalEdStudCourseRegTempId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCourseId
		{
			get
			{
				return this.entityData.EdCourseId; 
			}
			
			set
			{
				if (this.entityData.EdCourseId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.EdCourseId, this.entityData.EdCourseId);
				this.entityData.EdCourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.EdCourseId, this.entityData.EdCourseId);
				OnPropertyChanged("EdCourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RegDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsRegDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? RegDate
		{
			get
			{
				return this.entityData.RegDate; 
			}
			
			set
			{
				if (this.entityData.RegDate == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.RegDate, this.entityData.RegDate);
				this.entityData.RegDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.RegDate, this.entityData.RegDate);
				OnPropertyChanged("RegDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AuditFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AuditFlg
		{
			get
			{
				return this.entityData.AuditFlg; 
			}
			
			set
			{
				if (this.entityData.AuditFlg == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.AuditFlg, this.entityData.AuditFlg);
				this.entityData.AuditFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.AuditFlg, this.entityData.AuditFlg);
				OnPropertyChanged("AuditFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RepeatFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal RepeatFlg
		{
			get
			{
				return this.entityData.RepeatFlg; 
			}
			
			set
			{
				if (this.entityData.RepeatFlg == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.RepeatFlg, this.entityData.RepeatFlg);
				this.entityData.RepeatFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.RepeatFlg, this.entityData.RepeatFlg);
				OnPropertyChanged("RepeatFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsLast property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsLast
		{
			get
			{
				return this.entityData.IsLast; 
			}
			
			set
			{
				if (this.entityData.IsLast == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.IsLast, this.entityData.IsLast);
				this.entityData.IsLast = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.IsLast, this.entityData.IsLast);
				OnPropertyChanged("IsLast");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsApproved property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsApproved
		{
			get
			{
				return this.entityData.IsApproved; 
			}
			
			set
			{
				if (this.entityData.IsApproved == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.IsApproved, this.entityData.IsApproved);
				this.entityData.IsApproved = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.IsApproved, this.entityData.IsApproved);
				OnPropertyChanged("IsApproved");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApproveDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsApproveDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ApproveDate
		{
			get
			{
				return this.entityData.ApproveDate; 
			}
			
			set
			{
				if (this.entityData.ApproveDate == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.ApproveDate, this.entityData.ApproveDate);
				this.entityData.ApproveDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.ApproveDate, this.entityData.ApproveDate);
				OnPropertyChanged("ApproveDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeCourseStatusId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeCourseStatusIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeCourseStatusId
		{
			get
			{
				return this.entityData.EdCodeCourseStatusId; 
			}
			
			set
			{
				if (this.entityData.EdCodeCourseStatusId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.EdCodeCourseStatusId, this.entityData.EdCodeCourseStatusId);
				this.entityData.EdCodeCourseStatusId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.EdCodeCourseStatusId, this.entityData.EdCodeCourseStatusId);
				OnPropertyChanged("EdCodeCourseStatusId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeGradingId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeGradingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeGradingId
		{
			get
			{
				return this.entityData.EdCodeGradingId; 
			}
			
			set
			{
				if (this.entityData.EdCodeGradingId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.EdCodeGradingId, this.entityData.EdCodeGradingId);
				this.entityData.EdCodeGradingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.EdCodeGradingId, this.entityData.EdCodeGradingId);
				OnPropertyChanged("EdCodeGradingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CourseDegree property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCourseDegreeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CourseDegree
		{
			get
			{
				return this.entityData.CourseDegree; 
			}
			
			set
			{
				if (this.entityData.CourseDegree == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.CourseDegree, this.entityData.CourseDegree);
				this.entityData.CourseDegree = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.CourseDegree, this.entityData.CourseDegree);
				OnPropertyChanged("CourseDegree");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CoursePoint property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCoursePointNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CoursePoint
		{
			get
			{
				return this.entityData.CoursePoint; 
			}
			
			set
			{
				if (this.entityData.CoursePoint == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.CoursePoint, this.entityData.CoursePoint);
				this.entityData.CoursePoint = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.CoursePoint, this.entityData.CoursePoint);
				OnPropertyChanged("CoursePoint");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntPolicyGradingHdrId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntPolicyGradingHdrIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntPolicyGradingHdrId
		{
			get
			{
				return this.entityData.EntPolicyGradingHdrId; 
			}
			
			set
			{
				if (this.entityData.EntPolicyGradingHdrId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.EntPolicyGradingHdrId, this.entityData.EntPolicyGradingHdrId);
				this.entityData.EntPolicyGradingHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.EntPolicyGradingHdrId, this.entityData.EntPolicyGradingHdrId);
				OnPropertyChanged("EntPolicyGradingHdrId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodePassFailId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCodePassFailIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCodePassFailId
		{
			get
			{
				return this.entityData.GsCodePassFailId; 
			}
			
			set
			{
				if (this.entityData.GsCodePassFailId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.GsCodePassFailId, this.entityData.GsCodePassFailId);
				this.entityData.GsCodePassFailId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.GsCodePassFailId, this.entityData.GsCodePassFailId);
				OnPropertyChanged("GsCodePassFailId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdStudSemesterIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdStudSemesterId
		{
			get
			{
				return this.entityData.EdStudSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdStudSemesterId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.EdStudSemesterId, this.entityData.EdStudSemesterId);
				this.entityData.EdStudSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.EdStudSemesterId, this.entityData.EdStudSemesterId);
				OnPropertyChanged("EdStudSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AddGpaFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AddGpaFlg
		{
			get
			{
				return this.entityData.AddGpaFlg; 
			}
			
			set
			{
				if (this.entityData.AddGpaFlg == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.AddGpaFlg, this.entityData.AddGpaFlg);
				this.entityData.AddGpaFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.AddGpaFlg, this.entityData.AddGpaFlg);
				OnPropertyChanged("AddGpaFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntPolicyAssessHdrId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntPolicyAssessHdrIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntPolicyAssessHdrId
		{
			get
			{
				return this.entityData.EntPolicyAssessHdrId; 
			}
			
			set
			{
				if (this.entityData.EntPolicyAssessHdrId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.EntPolicyAssessHdrId, this.entityData.EntPolicyAssessHdrId);
				this.entityData.EntPolicyAssessHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.EntPolicyAssessHdrId, this.entityData.EntPolicyAssessHdrId);
				OnPropertyChanged("EntPolicyAssessHdrId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IncompFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IncompFlg
		{
			get
			{
				return this.entityData.IncompFlg; 
			}
			
			set
			{
				if (this.entityData.IncompFlg == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.IncompFlg, this.entityData.IncompFlg);
				this.entityData.IncompFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.IncompFlg, this.entityData.IncompFlg);
				OnPropertyChanged("IncompFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HideFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal HideFlg
		{
			get
			{
				return this.entityData.HideFlg; 
			}
			
			set
			{
				if (this.entityData.HideFlg == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.HideFlg, this.entityData.HideFlg);
				this.entityData.HideFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.HideFlg, this.entityData.HideFlg);
				OnPropertyChanged("HideFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HideReason property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String HideReason
		{
			get
			{
				return this.entityData.HideReason; 
			}
			
			set
			{
				if (this.entityData.HideReason == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.HideReason, this.entityData.HideReason);
				this.entityData.HideReason = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.HideReason, this.entityData.HideReason);
				OnPropertyChanged("HideReason");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseSubId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCourseSubIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCourseSubId
		{
			get
			{
				return this.entityData.EdCourseSubId; 
			}
			
			set
			{
				if (this.entityData.EdCourseSubId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.EdCourseSubId, this.entityData.EdCourseSubId);
				this.entityData.EdCourseSubId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.EdCourseSubId, this.entityData.EdCourseSubId);
				OnPropertyChanged("EdCourseSubId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeFormId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeFormIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeFormId
		{
			get
			{
				return this.entityData.SeFormId; 
			}
			
			set
			{
				if (this.entityData.SeFormId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.SeFormId, this.entityData.SeFormId);
				this.entityData.SeFormId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.SeFormId, this.entityData.SeFormId);
				OnPropertyChanged("SeFormId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdAcadYearIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeSemesterIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdStudIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegTempColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegTempColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseStatus"/>.
		/// </summary>
		/// <value>The source EdCodeCourseStatus for EdCodeCourseStatusId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeCourseStatus EdCodeCourseStatusIdSource
      	{
            get { return entityData.EdCodeCourseStatusIdSource; }
            set { entityData.EdCodeCourseStatusIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeGradingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeGrading EdCodeGradingIdSource
      	{
            get { return entityData.EdCodeGradingIdSource; }
            set { entityData.EdCodeGradingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStudSemester"/>.
		/// </summary>
		/// <value>The source EdStudSemester for EdStudSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStudSemester EdStudSemesterIdSource
      	{
            get { return entityData.EdStudSemesterIdSource; }
            set { entityData.EdStudSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntPolicyAssessHdr"/>.
		/// </summary>
		/// <value>The source EntPolicyAssessHdr for EntPolicyAssessHdrId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntPolicyAssessHdr EntPolicyAssessHdrIdSource
      	{
            get { return entityData.EntPolicyAssessHdrIdSource; }
            set { entityData.EntPolicyAssessHdrIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntPolicyGradingHdr"/>.
		/// </summary>
		/// <value>The source EntPolicyGradingHdr for EntPolicyGradingHdrId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntPolicyGradingHdr EntPolicyGradingHdrIdSource
      	{
            get { return entityData.EntPolicyGradingHdrIdSource; }
            set { entityData.EntPolicyGradingHdrIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodePassFail"/>.
		/// </summary>
		/// <value>The source GsCodePassFail for GsCodePassFailId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodePassFail GsCodePassFailIdSource
      	{
            get { return entityData.GsCodePassFailIdSource; }
            set { entityData.GsCodePassFailIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return entityData.EdCourseIdSource; }
            set { entityData.EdCourseIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HideReason", "Hide Reason", 250));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_STUD_COURSE_REG_TEMP"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_STUD_COURSE_REG_TEMP_ID", "ED_COURSE_ID", "REG_DATE", "AUDIT_FLG", "REPEAT_FLG", "IS_LAST", "IS_APPROVED", "APPROVE_DATE", "AS_FACULTY_INFO_ID", "ED_CODE_COURSE_STATUS_ID", "ED_CODE_GRADING_ID", "COURSE_DEGREE", "COURSE_POINT", "ENT_POLICY_GRADING_HDR_ID", "GS_CODE_PASS_FAIL_ID", "ED_STUD_SEMESTER_ID", "ADD_GPA_FLG", "ENT_POLICY_ASSESS_HDR_ID", "INCOMP_FLG", "HIDE_FLG", "HIDE_REASON", "ED_COURSE_SUB_ID", "LAST_DATE", "SE_FORM_ID", "SE_USER_ID", "ED_ACAD_YEAR_ID", "ED_CODE_SEMESTER_ID", "ED_STUD_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdStudCourseRegTempEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdStudCourseRegTemp) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdStudCourseRegTemp>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdStudCourseRegTemp);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdStudCourseRegTemp Entity 
		///</summary>
		protected virtual EdStudCourseRegTemp Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdStudCourseRegTemp copy = new EdStudCourseRegTemp();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdStudCourseRegTempId = this.EdStudCourseRegTempId;
					copy.OriginalEdStudCourseRegTempId = this.OriginalEdStudCourseRegTempId;
				copy.EdCourseId = this.EdCourseId;
				copy.RegDate = this.RegDate;
				copy.AuditFlg = this.AuditFlg;
				copy.RepeatFlg = this.RepeatFlg;
				copy.IsLast = this.IsLast;
				copy.IsApproved = this.IsApproved;
				copy.ApproveDate = this.ApproveDate;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.EdCodeCourseStatusId = this.EdCodeCourseStatusId;
				copy.EdCodeGradingId = this.EdCodeGradingId;
				copy.CourseDegree = this.CourseDegree;
				copy.CoursePoint = this.CoursePoint;
				copy.EntPolicyGradingHdrId = this.EntPolicyGradingHdrId;
				copy.GsCodePassFailId = this.GsCodePassFailId;
				copy.EdStudSemesterId = this.EdStudSemesterId;
				copy.AddGpaFlg = this.AddGpaFlg;
				copy.EntPolicyAssessHdrId = this.EntPolicyAssessHdrId;
				copy.IncompFlg = this.IncompFlg;
				copy.HideFlg = this.HideFlg;
				copy.HideReason = this.HideReason;
				copy.EdCourseSubId = this.EdCourseSubId;
				copy.LastDate = this.LastDate;
				copy.SeFormId = this.SeFormId;
				copy.SeUserId = this.SeUserId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.EdStudId = this.EdStudId;
			
			if (this.EdCodeCourseStatusIdSource != null && existingCopies.Contains(this.EdCodeCourseStatusIdSource))
				copy.EdCodeCourseStatusIdSource = existingCopies[this.EdCodeCourseStatusIdSource] as EdCodeCourseStatus;
			else
				copy.EdCodeCourseStatusIdSource = MakeCopyOf(this.EdCodeCourseStatusIdSource, existingCopies) as EdCodeCourseStatus;
			if (this.EdCodeGradingIdSource != null && existingCopies.Contains(this.EdCodeGradingIdSource))
				copy.EdCodeGradingIdSource = existingCopies[this.EdCodeGradingIdSource] as EdCodeGrading;
			else
				copy.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource, existingCopies) as EdCodeGrading;
			if (this.EdStudSemesterIdSource != null && existingCopies.Contains(this.EdStudSemesterIdSource))
				copy.EdStudSemesterIdSource = existingCopies[this.EdStudSemesterIdSource] as EdStudSemester;
			else
				copy.EdStudSemesterIdSource = MakeCopyOf(this.EdStudSemesterIdSource, existingCopies) as EdStudSemester;
			if (this.EntPolicyAssessHdrIdSource != null && existingCopies.Contains(this.EntPolicyAssessHdrIdSource))
				copy.EntPolicyAssessHdrIdSource = existingCopies[this.EntPolicyAssessHdrIdSource] as EntPolicyAssessHdr;
			else
				copy.EntPolicyAssessHdrIdSource = MakeCopyOf(this.EntPolicyAssessHdrIdSource, existingCopies) as EntPolicyAssessHdr;
			if (this.EntPolicyGradingHdrIdSource != null && existingCopies.Contains(this.EntPolicyGradingHdrIdSource))
				copy.EntPolicyGradingHdrIdSource = existingCopies[this.EntPolicyGradingHdrIdSource] as EntPolicyGradingHdr;
			else
				copy.EntPolicyGradingHdrIdSource = MakeCopyOf(this.EntPolicyGradingHdrIdSource, existingCopies) as EntPolicyGradingHdr;
			if (this.GsCodePassFailIdSource != null && existingCopies.Contains(this.GsCodePassFailIdSource))
				copy.GsCodePassFailIdSource = existingCopies[this.GsCodePassFailIdSource] as GsCodePassFail;
			else
				copy.GsCodePassFailIdSource = MakeCopyOf(this.GsCodePassFailIdSource, existingCopies) as GsCodePassFail;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				copy.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				copy.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdStudCourseRegTemp Entity 
		///</summary>
		public virtual EdStudCourseRegTemp Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdStudCourseRegTemp Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdStudCourseRegTemp DeepCopy()
		{
			return EntityHelper.Clone<EdStudCourseRegTemp>(this as EdStudCourseRegTemp);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdStudCourseRegTempEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdStudCourseRegTempEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdStudCourseRegTempEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdStudCourseRegTempColumn column)
		{
			switch(column)
			{
					case EdStudCourseRegTempColumn.EdStudCourseRegTempId:
					return entityData.EdStudCourseRegTempId != _originalData.EdStudCourseRegTempId;
					case EdStudCourseRegTempColumn.EdCourseId:
					return entityData.EdCourseId != _originalData.EdCourseId;
					case EdStudCourseRegTempColumn.RegDate:
					return entityData.RegDate != _originalData.RegDate;
					case EdStudCourseRegTempColumn.AuditFlg:
					return entityData.AuditFlg != _originalData.AuditFlg;
					case EdStudCourseRegTempColumn.RepeatFlg:
					return entityData.RepeatFlg != _originalData.RepeatFlg;
					case EdStudCourseRegTempColumn.IsLast:
					return entityData.IsLast != _originalData.IsLast;
					case EdStudCourseRegTempColumn.IsApproved:
					return entityData.IsApproved != _originalData.IsApproved;
					case EdStudCourseRegTempColumn.ApproveDate:
					return entityData.ApproveDate != _originalData.ApproveDate;
					case EdStudCourseRegTempColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case EdStudCourseRegTempColumn.EdCodeCourseStatusId:
					return entityData.EdCodeCourseStatusId != _originalData.EdCodeCourseStatusId;
					case EdStudCourseRegTempColumn.EdCodeGradingId:
					return entityData.EdCodeGradingId != _originalData.EdCodeGradingId;
					case EdStudCourseRegTempColumn.CourseDegree:
					return entityData.CourseDegree != _originalData.CourseDegree;
					case EdStudCourseRegTempColumn.CoursePoint:
					return entityData.CoursePoint != _originalData.CoursePoint;
					case EdStudCourseRegTempColumn.EntPolicyGradingHdrId:
					return entityData.EntPolicyGradingHdrId != _originalData.EntPolicyGradingHdrId;
					case EdStudCourseRegTempColumn.GsCodePassFailId:
					return entityData.GsCodePassFailId != _originalData.GsCodePassFailId;
					case EdStudCourseRegTempColumn.EdStudSemesterId:
					return entityData.EdStudSemesterId != _originalData.EdStudSemesterId;
					case EdStudCourseRegTempColumn.AddGpaFlg:
					return entityData.AddGpaFlg != _originalData.AddGpaFlg;
					case EdStudCourseRegTempColumn.EntPolicyAssessHdrId:
					return entityData.EntPolicyAssessHdrId != _originalData.EntPolicyAssessHdrId;
					case EdStudCourseRegTempColumn.IncompFlg:
					return entityData.IncompFlg != _originalData.IncompFlg;
					case EdStudCourseRegTempColumn.HideFlg:
					return entityData.HideFlg != _originalData.HideFlg;
					case EdStudCourseRegTempColumn.HideReason:
					return entityData.HideReason != _originalData.HideReason;
					case EdStudCourseRegTempColumn.EdCourseSubId:
					return entityData.EdCourseSubId != _originalData.EdCourseSubId;
					case EdStudCourseRegTempColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case EdStudCourseRegTempColumn.SeFormId:
					return entityData.SeFormId != _originalData.SeFormId;
					case EdStudCourseRegTempColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case EdStudCourseRegTempColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case EdStudCourseRegTempColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case EdStudCourseRegTempColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdStudCourseRegTempColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdStudCourseRegTempId != _originalData.EdStudCourseRegTempId;
			result = result || entityData.EdCourseId != _originalData.EdCourseId;
			result = result || entityData.RegDate != _originalData.RegDate;
			result = result || entityData.AuditFlg != _originalData.AuditFlg;
			result = result || entityData.RepeatFlg != _originalData.RepeatFlg;
			result = result || entityData.IsLast != _originalData.IsLast;
			result = result || entityData.IsApproved != _originalData.IsApproved;
			result = result || entityData.ApproveDate != _originalData.ApproveDate;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.EdCodeCourseStatusId != _originalData.EdCodeCourseStatusId;
			result = result || entityData.EdCodeGradingId != _originalData.EdCodeGradingId;
			result = result || entityData.CourseDegree != _originalData.CourseDegree;
			result = result || entityData.CoursePoint != _originalData.CoursePoint;
			result = result || entityData.EntPolicyGradingHdrId != _originalData.EntPolicyGradingHdrId;
			result = result || entityData.GsCodePassFailId != _originalData.GsCodePassFailId;
			result = result || entityData.EdStudSemesterId != _originalData.EdStudSemesterId;
			result = result || entityData.AddGpaFlg != _originalData.AddGpaFlg;
			result = result || entityData.EntPolicyAssessHdrId != _originalData.EntPolicyAssessHdrId;
			result = result || entityData.IncompFlg != _originalData.IncompFlg;
			result = result || entityData.HideFlg != _originalData.HideFlg;
			result = result || entityData.HideReason != _originalData.HideReason;
			result = result || entityData.EdCourseSubId != _originalData.EdCourseSubId;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.SeFormId != _originalData.SeFormId;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			return result;
		}	
		
		///<summary>
		///  Returns a EdStudCourseRegTemp Entity with the original data.
		///</summary>
		public EdStudCourseRegTemp GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdStudCourseRegTemp(
				_originalData.EdStudCourseRegTempId,
				_originalData.EdCourseId,
				_originalData.RegDate,
				_originalData.AuditFlg,
				_originalData.RepeatFlg,
				_originalData.IsLast,
				_originalData.IsApproved,
				_originalData.ApproveDate,
				_originalData.AsFacultyInfoId,
				_originalData.EdCodeCourseStatusId,
				_originalData.EdCodeGradingId,
				_originalData.CourseDegree,
				_originalData.CoursePoint,
				_originalData.EntPolicyGradingHdrId,
				_originalData.GsCodePassFailId,
				_originalData.EdStudSemesterId,
				_originalData.AddGpaFlg,
				_originalData.EntPolicyAssessHdrId,
				_originalData.IncompFlg,
				_originalData.HideFlg,
				_originalData.HideReason,
				_originalData.EdCourseSubId,
				_originalData.LastDate,
				_originalData.SeFormId,
				_originalData.SeUserId,
				_originalData.EdAcadYearId,
				_originalData.EdCodeSemesterId,
				_originalData.EdStudId
				);
				
			return (EdStudCourseRegTemp)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdStudCourseRegTempBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdStudCourseRegTempBase)
				return ValueEquals(this, (EdStudCourseRegTempBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdStudCourseRegTempBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdStudCourseRegTempId.GetHashCode() ^ 
					this.EdCourseId.GetHashCode() ^ 
					((this.RegDate == null) ? string.Empty : this.RegDate.ToString()).GetHashCode() ^ 
					this.AuditFlg.GetHashCode() ^ 
					this.RepeatFlg.GetHashCode() ^ 
					this.IsLast.GetHashCode() ^ 
					this.IsApproved.GetHashCode() ^ 
					((this.ApproveDate == null) ? string.Empty : this.ApproveDate.ToString()).GetHashCode() ^ 
					this.AsFacultyInfoId.GetHashCode() ^ 
					((this.EdCodeCourseStatusId == null) ? string.Empty : this.EdCodeCourseStatusId.ToString()).GetHashCode() ^ 
					((this.EdCodeGradingId == null) ? string.Empty : this.EdCodeGradingId.ToString()).GetHashCode() ^ 
					((this.CourseDegree == null) ? string.Empty : this.CourseDegree.ToString()).GetHashCode() ^ 
					((this.CoursePoint == null) ? string.Empty : this.CoursePoint.ToString()).GetHashCode() ^ 
					((this.EntPolicyGradingHdrId == null) ? string.Empty : this.EntPolicyGradingHdrId.ToString()).GetHashCode() ^ 
					((this.GsCodePassFailId == null) ? string.Empty : this.GsCodePassFailId.ToString()).GetHashCode() ^ 
					((this.EdStudSemesterId == null) ? string.Empty : this.EdStudSemesterId.ToString()).GetHashCode() ^ 
					this.AddGpaFlg.GetHashCode() ^ 
					((this.EntPolicyAssessHdrId == null) ? string.Empty : this.EntPolicyAssessHdrId.ToString()).GetHashCode() ^ 
					this.IncompFlg.GetHashCode() ^ 
					this.HideFlg.GetHashCode() ^ 
					((this.HideReason == null) ? string.Empty : this.HideReason.ToString()).GetHashCode() ^ 
					((this.EdCourseSubId == null) ? string.Empty : this.EdCourseSubId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.SeFormId == null) ? string.Empty : this.SeFormId.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.EdAcadYearId == null) ? string.Empty : this.EdAcadYearId.ToString()).GetHashCode() ^ 
					((this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString()).GetHashCode() ^ 
					((this.EdStudId == null) ? string.Empty : this.EdStudId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdStudCourseRegTempBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdStudCourseRegTempBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdStudCourseRegTempBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdStudCourseRegTempBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdStudCourseRegTempBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdStudCourseRegTempBase Object1, EdStudCourseRegTempBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdStudCourseRegTempId != Object2.EdStudCourseRegTempId)
				equal = false;
			if (Object1.EdCourseId != Object2.EdCourseId)
				equal = false;
			if ( Object1.RegDate != null && Object2.RegDate != null )
			{
				if (Object1.RegDate != Object2.RegDate)
					equal = false;
			}
			else if (Object1.RegDate == null ^ Object2.RegDate == null )
			{
				equal = false;
			}
			if (Object1.AuditFlg != Object2.AuditFlg)
				equal = false;
			if (Object1.RepeatFlg != Object2.RepeatFlg)
				equal = false;
			if (Object1.IsLast != Object2.IsLast)
				equal = false;
			if (Object1.IsApproved != Object2.IsApproved)
				equal = false;
			if ( Object1.ApproveDate != null && Object2.ApproveDate != null )
			{
				if (Object1.ApproveDate != Object2.ApproveDate)
					equal = false;
			}
			else if (Object1.ApproveDate == null ^ Object2.ApproveDate == null )
			{
				equal = false;
			}
			if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
				equal = false;
			if ( Object1.EdCodeCourseStatusId != null && Object2.EdCodeCourseStatusId != null )
			{
				if (Object1.EdCodeCourseStatusId != Object2.EdCodeCourseStatusId)
					equal = false;
			}
			else if (Object1.EdCodeCourseStatusId == null ^ Object2.EdCodeCourseStatusId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeGradingId != null && Object2.EdCodeGradingId != null )
			{
				if (Object1.EdCodeGradingId != Object2.EdCodeGradingId)
					equal = false;
			}
			else if (Object1.EdCodeGradingId == null ^ Object2.EdCodeGradingId == null )
			{
				equal = false;
			}
			if ( Object1.CourseDegree != null && Object2.CourseDegree != null )
			{
				if (Object1.CourseDegree != Object2.CourseDegree)
					equal = false;
			}
			else if (Object1.CourseDegree == null ^ Object2.CourseDegree == null )
			{
				equal = false;
			}
			if ( Object1.CoursePoint != null && Object2.CoursePoint != null )
			{
				if (Object1.CoursePoint != Object2.CoursePoint)
					equal = false;
			}
			else if (Object1.CoursePoint == null ^ Object2.CoursePoint == null )
			{
				equal = false;
			}
			if ( Object1.EntPolicyGradingHdrId != null && Object2.EntPolicyGradingHdrId != null )
			{
				if (Object1.EntPolicyGradingHdrId != Object2.EntPolicyGradingHdrId)
					equal = false;
			}
			else if (Object1.EntPolicyGradingHdrId == null ^ Object2.EntPolicyGradingHdrId == null )
			{
				equal = false;
			}
			if ( Object1.GsCodePassFailId != null && Object2.GsCodePassFailId != null )
			{
				if (Object1.GsCodePassFailId != Object2.GsCodePassFailId)
					equal = false;
			}
			else if (Object1.GsCodePassFailId == null ^ Object2.GsCodePassFailId == null )
			{
				equal = false;
			}
			if ( Object1.EdStudSemesterId != null && Object2.EdStudSemesterId != null )
			{
				if (Object1.EdStudSemesterId != Object2.EdStudSemesterId)
					equal = false;
			}
			else if (Object1.EdStudSemesterId == null ^ Object2.EdStudSemesterId == null )
			{
				equal = false;
			}
			if (Object1.AddGpaFlg != Object2.AddGpaFlg)
				equal = false;
			if ( Object1.EntPolicyAssessHdrId != null && Object2.EntPolicyAssessHdrId != null )
			{
				if (Object1.EntPolicyAssessHdrId != Object2.EntPolicyAssessHdrId)
					equal = false;
			}
			else if (Object1.EntPolicyAssessHdrId == null ^ Object2.EntPolicyAssessHdrId == null )
			{
				equal = false;
			}
			if (Object1.IncompFlg != Object2.IncompFlg)
				equal = false;
			if (Object1.HideFlg != Object2.HideFlg)
				equal = false;
			if ( Object1.HideReason != null && Object2.HideReason != null )
			{
				if (Object1.HideReason != Object2.HideReason)
					equal = false;
			}
			else if (Object1.HideReason == null ^ Object2.HideReason == null )
			{
				equal = false;
			}
			if ( Object1.EdCourseSubId != null && Object2.EdCourseSubId != null )
			{
				if (Object1.EdCourseSubId != Object2.EdCourseSubId)
					equal = false;
			}
			else if (Object1.EdCourseSubId == null ^ Object2.EdCourseSubId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.SeFormId != null && Object2.SeFormId != null )
			{
				if (Object1.SeFormId != Object2.SeFormId)
					equal = false;
			}
			else if (Object1.SeFormId == null ^ Object2.SeFormId == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.EdAcadYearId != null && Object2.EdAcadYearId != null )
			{
				if (Object1.EdAcadYearId != Object2.EdAcadYearId)
					equal = false;
			}
			else if (Object1.EdAcadYearId == null ^ Object2.EdAcadYearId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeSemesterId != null && Object2.EdCodeSemesterId != null )
			{
				if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
					equal = false;
			}
			else if (Object1.EdCodeSemesterId == null ^ Object2.EdCodeSemesterId == null )
			{
				equal = false;
			}
			if ( Object1.EdStudId != null && Object2.EdStudId != null )
			{
				if (Object1.EdStudId != Object2.EdStudId)
					equal = false;
			}
			else if (Object1.EdStudId == null ^ Object2.EdStudId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdStudCourseRegTempBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdStudCourseRegTempComparer GetComparer()
        {
            return new EdStudCourseRegTempComparer();
        }
        */

        // Comparer delegates back to EdStudCourseRegTemp
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdStudCourseRegTemp rhs, EdStudCourseRegTempColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdStudCourseRegTempColumn.EdStudCourseRegTempId:
            		return this.EdStudCourseRegTempId.CompareTo(rhs.EdStudCourseRegTempId);
            		
            		                 
            	
            	
            	case EdStudCourseRegTempColumn.EdCourseId:
            		return this.EdCourseId.CompareTo(rhs.EdCourseId);
            		
            		                 
            	
            	
            	case EdStudCourseRegTempColumn.RegDate:
            		return this.RegDate.Value.CompareTo(rhs.RegDate.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegTempColumn.AuditFlg:
            		return this.AuditFlg.CompareTo(rhs.AuditFlg);
            		
            		                 
            	
            	
            	case EdStudCourseRegTempColumn.RepeatFlg:
            		return this.RepeatFlg.CompareTo(rhs.RepeatFlg);
            		
            		                 
            	
            	
            	case EdStudCourseRegTempColumn.IsLast:
            		return this.IsLast.CompareTo(rhs.IsLast);
            		
            		                 
            	
            	
            	case EdStudCourseRegTempColumn.IsApproved:
            		return this.IsApproved.CompareTo(rhs.IsApproved);
            		
            		                 
            	
            	
            	case EdStudCourseRegTempColumn.ApproveDate:
            		return this.ApproveDate.Value.CompareTo(rhs.ApproveDate.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegTempColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.CompareTo(rhs.AsFacultyInfoId);
            		
            		                 
            	
            	
            	case EdStudCourseRegTempColumn.EdCodeCourseStatusId:
            		return this.EdCodeCourseStatusId.Value.CompareTo(rhs.EdCodeCourseStatusId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegTempColumn.EdCodeGradingId:
            		return this.EdCodeGradingId.Value.CompareTo(rhs.EdCodeGradingId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegTempColumn.CourseDegree:
            		return this.CourseDegree.Value.CompareTo(rhs.CourseDegree.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegTempColumn.CoursePoint:
            		return this.CoursePoint.Value.CompareTo(rhs.CoursePoint.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegTempColumn.EntPolicyGradingHdrId:
            		return this.EntPolicyGradingHdrId.Value.CompareTo(rhs.EntPolicyGradingHdrId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegTempColumn.GsCodePassFailId:
            		return this.GsCodePassFailId.Value.CompareTo(rhs.GsCodePassFailId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegTempColumn.EdStudSemesterId:
            		return this.EdStudSemesterId.Value.CompareTo(rhs.EdStudSemesterId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegTempColumn.AddGpaFlg:
            		return this.AddGpaFlg.CompareTo(rhs.AddGpaFlg);
            		
            		                 
            	
            	
            	case EdStudCourseRegTempColumn.EntPolicyAssessHdrId:
            		return this.EntPolicyAssessHdrId.Value.CompareTo(rhs.EntPolicyAssessHdrId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegTempColumn.IncompFlg:
            		return this.IncompFlg.CompareTo(rhs.IncompFlg);
            		
            		                 
            	
            	
            	case EdStudCourseRegTempColumn.HideFlg:
            		return this.HideFlg.CompareTo(rhs.HideFlg);
            		
            		                 
            	
            	
            	case EdStudCourseRegTempColumn.HideReason:
            		return this.HideReason.CompareTo(rhs.HideReason);
            		
            		                 
            	
            	
            	case EdStudCourseRegTempColumn.EdCourseSubId:
            		return this.EdCourseSubId.Value.CompareTo(rhs.EdCourseSubId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegTempColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegTempColumn.SeFormId:
            		return this.SeFormId.Value.CompareTo(rhs.SeFormId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegTempColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegTempColumn.EdAcadYearId:
            		return this.EdAcadYearId.Value.CompareTo(rhs.EdAcadYearId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegTempColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.Value.CompareTo(rhs.EdCodeSemesterId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegTempColumn.EdStudId:
            		return this.EdStudId.Value.CompareTo(rhs.EdStudId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdStudCourseRegTempKey> Members
		
		// member variable for the EntityId property
		private EdStudCourseRegTempKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdStudCourseRegTempKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdStudCourseRegTempKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdStudCourseRegTemp")
					.Append("|").Append( this.EdStudCourseRegTempId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{29}{28}- EdStudCourseRegTempId: {0}{28}- EdCourseId: {1}{28}- RegDate: {2}{28}- AuditFlg: {3}{28}- RepeatFlg: {4}{28}- IsLast: {5}{28}- IsApproved: {6}{28}- ApproveDate: {7}{28}- AsFacultyInfoId: {8}{28}- EdCodeCourseStatusId: {9}{28}- EdCodeGradingId: {10}{28}- CourseDegree: {11}{28}- CoursePoint: {12}{28}- EntPolicyGradingHdrId: {13}{28}- GsCodePassFailId: {14}{28}- EdStudSemesterId: {15}{28}- AddGpaFlg: {16}{28}- EntPolicyAssessHdrId: {17}{28}- IncompFlg: {18}{28}- HideFlg: {19}{28}- HideReason: {20}{28}- EdCourseSubId: {21}{28}- LastDate: {22}{28}- SeFormId: {23}{28}- SeUserId: {24}{28}- EdAcadYearId: {25}{28}- EdCodeSemesterId: {26}{28}- EdStudId: {27}{28}{30}", 
				this.EdStudCourseRegTempId,
				this.EdCourseId,
				(this.RegDate == null) ? string.Empty : this.RegDate.ToString(),
				this.AuditFlg,
				this.RepeatFlg,
				this.IsLast,
				this.IsApproved,
				(this.ApproveDate == null) ? string.Empty : this.ApproveDate.ToString(),
				this.AsFacultyInfoId,
				(this.EdCodeCourseStatusId == null) ? string.Empty : this.EdCodeCourseStatusId.ToString(),
				(this.EdCodeGradingId == null) ? string.Empty : this.EdCodeGradingId.ToString(),
				(this.CourseDegree == null) ? string.Empty : this.CourseDegree.ToString(),
				(this.CoursePoint == null) ? string.Empty : this.CoursePoint.ToString(),
				(this.EntPolicyGradingHdrId == null) ? string.Empty : this.EntPolicyGradingHdrId.ToString(),
				(this.GsCodePassFailId == null) ? string.Empty : this.GsCodePassFailId.ToString(),
				(this.EdStudSemesterId == null) ? string.Empty : this.EdStudSemesterId.ToString(),
				this.AddGpaFlg,
				(this.EntPolicyAssessHdrId == null) ? string.Empty : this.EntPolicyAssessHdrId.ToString(),
				this.IncompFlg,
				this.HideFlg,
				(this.HideReason == null) ? string.Empty : this.HideReason.ToString(),
				(this.EdCourseSubId == null) ? string.Empty : this.EdCourseSubId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.SeFormId == null) ? string.Empty : this.SeFormId.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.EdAcadYearId == null) ? string.Empty : this.EdAcadYearId.ToString(),
				(this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString(),
				(this.EdStudId == null) ? string.Empty : this.EdStudId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_STUD_COURSE_REG_TEMP' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdStudCourseRegTempEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_STUD_COURSE_REG_TEMP_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_STUD_COURSE_REG_TEMP"</remarks>
		public System.Decimal EdStudCourseRegTempId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdStudCourseRegTempId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_COURSE_ID : 
		/// </summary>
		public System.Decimal		  EdCourseId = 0.0m;
		
		/// <summary>
		/// REG_DATE : 
		/// </summary>
		public System.DateTime?		  RegDate = null;
		
		/// <summary>
		/// AUDIT_FLG : 
		/// </summary>
		public System.Decimal		  AuditFlg = 0.0m;
		
		/// <summary>
		/// REPEAT_FLG : 
		/// </summary>
		public System.Decimal		  RepeatFlg = 0.0m;
		
		/// <summary>
		/// IS_LAST : 
		/// </summary>
		public System.Decimal		  IsLast = 0.0m;
		
		/// <summary>
		/// IS_APPROVED : 
		/// </summary>
		public System.Decimal		  IsApproved = 0.0m;
		
		/// <summary>
		/// APPROVE_DATE : 
		/// </summary>
		public System.DateTime?		  ApproveDate = null;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal		  AsFacultyInfoId = 0.0m;
		
		/// <summary>
		/// ED_CODE_COURSE_STATUS_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeCourseStatusId = null;
		
		/// <summary>
		/// ED_CODE_GRADING_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeGradingId = null;
		
		/// <summary>
		/// COURSE_DEGREE : 
		/// </summary>
		public System.Decimal?		  CourseDegree = null;
		
		/// <summary>
		/// COURSE_POINT : 
		/// </summary>
		public System.Decimal?		  CoursePoint = null;
		
		/// <summary>
		/// ENT_POLICY_GRADING_HDR_ID : 
		/// </summary>
		public System.Decimal?		  EntPolicyGradingHdrId = null;
		
		/// <summary>
		/// GS_CODE_PASS_FAIL_ID : 
		/// </summary>
		public System.Decimal?		  GsCodePassFailId = null;
		
		/// <summary>
		/// ED_STUD_SEMESTER_ID : 
		/// </summary>
		public System.Decimal?		  EdStudSemesterId = null;
		
		/// <summary>
		/// ADD_GPA_FLG : 
		/// </summary>
		public System.Decimal		  AddGpaFlg = 0.0m;
		
		/// <summary>
		/// ENT_POLICY_ASSESS_HDR_ID : 
		/// </summary>
		public System.Decimal?		  EntPolicyAssessHdrId = null;
		
		/// <summary>
		/// INCOMP_FLG : 
		/// </summary>
		public System.Decimal		  IncompFlg = 0.0m;
		
		/// <summary>
		/// HIDE_FLG : 
		/// </summary>
		public System.Decimal		  HideFlg = 0.0m;
		
		/// <summary>
		/// HIDE_REASON : 
		/// </summary>
		public System.String		  HideReason = null;
		
		/// <summary>
		/// ED_COURSE_SUB_ID : 
		/// </summary>
		public System.Decimal?		  EdCourseSubId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// SE_FORM_ID : 
		/// </summary>
		public System.Decimal?		  SeFormId = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal?		  EdAcadYearId = null;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeSemesterId = null;
		
		/// <summary>
		/// ED_STUD_ID : 
		/// </summary>
		public System.Decimal?		  EdStudId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdCodeCourseStatus _edCodeCourseStatusIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseStatus"/>.
		/// </summary>
		/// <value>The source EdCodeCourseStatus for EdCodeCourseStatusId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeCourseStatus EdCodeCourseStatusIdSource
      	{
            get { return this._edCodeCourseStatusIdSource; }
            set { this._edCodeCourseStatusIdSource = value; }
      	}
		private EdCodeGrading _edCodeGradingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeGradingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeGrading EdCodeGradingIdSource
      	{
            get { return this._edCodeGradingIdSource; }
            set { this._edCodeGradingIdSource = value; }
      	}
		private EdStudSemester _edStudSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStudSemester"/>.
		/// </summary>
		/// <value>The source EdStudSemester for EdStudSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStudSemester EdStudSemesterIdSource
      	{
            get { return this._edStudSemesterIdSource; }
            set { this._edStudSemesterIdSource = value; }
      	}
		private EntPolicyAssessHdr _entPolicyAssessHdrIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntPolicyAssessHdr"/>.
		/// </summary>
		/// <value>The source EntPolicyAssessHdr for EntPolicyAssessHdrId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntPolicyAssessHdr EntPolicyAssessHdrIdSource
      	{
            get { return this._entPolicyAssessHdrIdSource; }
            set { this._entPolicyAssessHdrIdSource = value; }
      	}
		private EntPolicyGradingHdr _entPolicyGradingHdrIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntPolicyGradingHdr"/>.
		/// </summary>
		/// <value>The source EntPolicyGradingHdr for EntPolicyGradingHdrId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntPolicyGradingHdr EntPolicyGradingHdrIdSource
      	{
            get { return this._entPolicyGradingHdrIdSource; }
            set { this._entPolicyGradingHdrIdSource = value; }
      	}
		private GsCodePassFail _gsCodePassFailIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodePassFail"/>.
		/// </summary>
		/// <value>The source GsCodePassFail for GsCodePassFailId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodePassFail GsCodePassFailIdSource
      	{
            get { return this._gsCodePassFailIdSource; }
            set { this._gsCodePassFailIdSource = value; }
      	}
		private EdCourse _edCourseIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return this._edCourseIdSource; }
            set { this._edCourseIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdStudCourseRegTempEntityData _tmp = new EdStudCourseRegTempEntityData();
						
			_tmp.EdStudCourseRegTempId = this.EdStudCourseRegTempId;
			_tmp.OriginalEdStudCourseRegTempId = this.OriginalEdStudCourseRegTempId;
			
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.RegDate = this.RegDate;
			_tmp.AuditFlg = this.AuditFlg;
			_tmp.RepeatFlg = this.RepeatFlg;
			_tmp.IsLast = this.IsLast;
			_tmp.IsApproved = this.IsApproved;
			_tmp.ApproveDate = this.ApproveDate;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdCodeCourseStatusId = this.EdCodeCourseStatusId;
			_tmp.EdCodeGradingId = this.EdCodeGradingId;
			_tmp.CourseDegree = this.CourseDegree;
			_tmp.CoursePoint = this.CoursePoint;
			_tmp.EntPolicyGradingHdrId = this.EntPolicyGradingHdrId;
			_tmp.GsCodePassFailId = this.GsCodePassFailId;
			_tmp.EdStudSemesterId = this.EdStudSemesterId;
			_tmp.AddGpaFlg = this.AddGpaFlg;
			_tmp.EntPolicyAssessHdrId = this.EntPolicyAssessHdrId;
			_tmp.IncompFlg = this.IncompFlg;
			_tmp.HideFlg = this.HideFlg;
			_tmp.HideReason = this.HideReason;
			_tmp.EdCourseSubId = this.EdCourseSubId;
			_tmp.LastDate = this.LastDate;
			_tmp.SeFormId = this.SeFormId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdStudId = this.EdStudId;
			
			#region Source Parent Composite Entities
			if (this.EdCodeCourseStatusIdSource != null)
				_tmp.EdCodeCourseStatusIdSource = MakeCopyOf(this.EdCodeCourseStatusIdSource) as EdCodeCourseStatus;
			if (this.EdCodeGradingIdSource != null)
				_tmp.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource) as EdCodeGrading;
			if (this.EdStudSemesterIdSource != null)
				_tmp.EdStudSemesterIdSource = MakeCopyOf(this.EdStudSemesterIdSource) as EdStudSemester;
			if (this.EntPolicyAssessHdrIdSource != null)
				_tmp.EntPolicyAssessHdrIdSource = MakeCopyOf(this.EntPolicyAssessHdrIdSource) as EntPolicyAssessHdr;
			if (this.EntPolicyGradingHdrIdSource != null)
				_tmp.EntPolicyGradingHdrIdSource = MakeCopyOf(this.EntPolicyGradingHdrIdSource) as EntPolicyGradingHdr;
			if (this.GsCodePassFailIdSource != null)
				_tmp.GsCodePassFailIdSource = MakeCopyOf(this.GsCodePassFailIdSource) as GsCodePassFail;
			if (this.EdCourseIdSource != null)
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource) as EdCourse;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdStudCourseRegTempEntityData _tmp = new EdStudCourseRegTempEntityData();
						
			_tmp.EdStudCourseRegTempId = this.EdStudCourseRegTempId;
			_tmp.OriginalEdStudCourseRegTempId = this.OriginalEdStudCourseRegTempId;
			
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.RegDate = this.RegDate;
			_tmp.AuditFlg = this.AuditFlg;
			_tmp.RepeatFlg = this.RepeatFlg;
			_tmp.IsLast = this.IsLast;
			_tmp.IsApproved = this.IsApproved;
			_tmp.ApproveDate = this.ApproveDate;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdCodeCourseStatusId = this.EdCodeCourseStatusId;
			_tmp.EdCodeGradingId = this.EdCodeGradingId;
			_tmp.CourseDegree = this.CourseDegree;
			_tmp.CoursePoint = this.CoursePoint;
			_tmp.EntPolicyGradingHdrId = this.EntPolicyGradingHdrId;
			_tmp.GsCodePassFailId = this.GsCodePassFailId;
			_tmp.EdStudSemesterId = this.EdStudSemesterId;
			_tmp.AddGpaFlg = this.AddGpaFlg;
			_tmp.EntPolicyAssessHdrId = this.EntPolicyAssessHdrId;
			_tmp.IncompFlg = this.IncompFlg;
			_tmp.HideFlg = this.HideFlg;
			_tmp.HideReason = this.HideReason;
			_tmp.EdCourseSubId = this.EdCourseSubId;
			_tmp.LastDate = this.LastDate;
			_tmp.SeFormId = this.SeFormId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdStudId = this.EdStudId;
			
			#region Source Parent Composite Entities
			if (this.EdCodeCourseStatusIdSource != null && existingCopies.Contains(this.EdCodeCourseStatusIdSource))
				_tmp.EdCodeCourseStatusIdSource = existingCopies[this.EdCodeCourseStatusIdSource] as EdCodeCourseStatus;
			else
				_tmp.EdCodeCourseStatusIdSource = MakeCopyOf(this.EdCodeCourseStatusIdSource, existingCopies) as EdCodeCourseStatus;
			if (this.EdCodeGradingIdSource != null && existingCopies.Contains(this.EdCodeGradingIdSource))
				_tmp.EdCodeGradingIdSource = existingCopies[this.EdCodeGradingIdSource] as EdCodeGrading;
			else
				_tmp.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource, existingCopies) as EdCodeGrading;
			if (this.EdStudSemesterIdSource != null && existingCopies.Contains(this.EdStudSemesterIdSource))
				_tmp.EdStudSemesterIdSource = existingCopies[this.EdStudSemesterIdSource] as EdStudSemester;
			else
				_tmp.EdStudSemesterIdSource = MakeCopyOf(this.EdStudSemesterIdSource, existingCopies) as EdStudSemester;
			if (this.EntPolicyAssessHdrIdSource != null && existingCopies.Contains(this.EntPolicyAssessHdrIdSource))
				_tmp.EntPolicyAssessHdrIdSource = existingCopies[this.EntPolicyAssessHdrIdSource] as EntPolicyAssessHdr;
			else
				_tmp.EntPolicyAssessHdrIdSource = MakeCopyOf(this.EntPolicyAssessHdrIdSource, existingCopies) as EntPolicyAssessHdr;
			if (this.EntPolicyGradingHdrIdSource != null && existingCopies.Contains(this.EntPolicyGradingHdrIdSource))
				_tmp.EntPolicyGradingHdrIdSource = existingCopies[this.EntPolicyGradingHdrIdSource] as EntPolicyGradingHdr;
			else
				_tmp.EntPolicyGradingHdrIdSource = MakeCopyOf(this.EntPolicyGradingHdrIdSource, existingCopies) as EntPolicyGradingHdr;
			if (this.GsCodePassFailIdSource != null && existingCopies.Contains(this.GsCodePassFailIdSource))
				_tmp.GsCodePassFailIdSource = existingCopies[this.GsCodePassFailIdSource] as GsCodePassFail;
			else
				_tmp.GsCodePassFailIdSource = MakeCopyOf(this.GsCodePassFailIdSource, existingCopies) as GsCodePassFail;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				_tmp.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudCourseRegTempColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdStudCourseRegTempColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudCourseRegTempColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdStudCourseRegTempColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudCourseRegTempColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdStudCourseRegTempColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdStudCourseRegTempEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdStudCourseRegTempEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudCourseRegTempColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdStudCourseRegTempColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdStudCourseRegTempEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdStudCourseRegTempEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdStudCourseRegTempEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdStudCourseRegTemp"/> object.
	/// </remarks>
	public class EdStudCourseRegTempEventArgs : System.EventArgs
	{
		private EdStudCourseRegTempColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdStudCourseRegTempEventArgs class.
		///</summary>
		public EdStudCourseRegTempEventArgs(EdStudCourseRegTempColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdStudCourseRegTempEventArgs class.
		///</summary>
		public EdStudCourseRegTempEventArgs(EdStudCourseRegTempColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdStudCourseRegTempColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdStudCourseRegTempColumn" />
		public EdStudCourseRegTempColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdStudCourseRegTemp related events.
	///</summary>
	public delegate void EdStudCourseRegTempEventHandler(object sender, EdStudCourseRegTempEventArgs e);
	
	#region EdStudCourseRegTempComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdStudCourseRegTempComparer : System.Collections.Generic.IComparer<EdStudCourseRegTemp>
	{
		EdStudCourseRegTempColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudCourseRegTempComparer"/> class.
        /// </summary>
		public EdStudCourseRegTempComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudCourseRegTempComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdStudCourseRegTempComparer(EdStudCourseRegTempColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdStudCourseRegTemp"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdStudCourseRegTemp"/> to compare.</param>
        /// <param name="b">The second <c>EdStudCourseRegTemp</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdStudCourseRegTemp a, EdStudCourseRegTemp b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdStudCourseRegTemp entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdStudCourseRegTemp a, EdStudCourseRegTemp b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdStudCourseRegTempColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdStudCourseRegTempKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdStudCourseRegTemp"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdStudCourseRegTempKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegTempKey class.
		/// </summary>
		public EdStudCourseRegTempKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegTempKey class.
		/// </summary>
		public EdStudCourseRegTempKey(EdStudCourseRegTempBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdStudCourseRegTempId = entity.EdStudCourseRegTempId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegTempKey class.
		/// </summary>
		public EdStudCourseRegTempKey(System.Decimal _edStudCourseRegTempId)
		{
			#region Init Properties

			this.EdStudCourseRegTempId = _edStudCourseRegTempId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdStudCourseRegTempBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdStudCourseRegTempBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdStudCourseRegTempId property
		private System.Decimal _edStudCourseRegTempId;
		
		/// <summary>
		/// Gets or sets the EdStudCourseRegTempId property.
		/// </summary>
		public System.Decimal EdStudCourseRegTempId
		{
			get { return _edStudCourseRegTempId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdStudCourseRegTempId = value;
				
				_edStudCourseRegTempId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdStudCourseRegTempId = ( values["EdStudCourseRegTempId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdStudCourseRegTempId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdStudCourseRegTempId", EdStudCourseRegTempId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdStudCourseRegTempId: {0}{1}",
								EdStudCourseRegTempId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdStudCourseRegTempColumn Enum
	
	/// <summary>
	/// Enumerate the EdStudCourseRegTemp columns.
	/// </summary>
	[Serializable]
	public enum EdStudCourseRegTempColumn : int
	{
		/// <summary>
		/// EdStudCourseRegTempId : 
		/// </summary>
		[EnumTextValue("ED_STUD_COURSE_REG_TEMP_ID")]
		[ColumnEnum("ED_STUD_COURSE_REG_TEMP_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdStudCourseRegTempId = 1,
		/// <summary>
		/// EdCourseId : 
		/// </summary>
		[EnumTextValue("ED_COURSE_ID")]
		[ColumnEnum("ED_COURSE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCourseId = 2,
		/// <summary>
		/// RegDate : 
		/// </summary>
		[EnumTextValue("REG_DATE")]
		[ColumnEnum("REG_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		RegDate = 3,
		/// <summary>
		/// AuditFlg : 
		/// </summary>
		[EnumTextValue("AUDIT_FLG")]
		[ColumnEnum("AUDIT_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AuditFlg = 4,
		/// <summary>
		/// RepeatFlg : 
		/// </summary>
		[EnumTextValue("REPEAT_FLG")]
		[ColumnEnum("REPEAT_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		RepeatFlg = 5,
		/// <summary>
		/// IsLast : 
		/// </summary>
		[EnumTextValue("IS_LAST")]
		[ColumnEnum("IS_LAST", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsLast = 6,
		/// <summary>
		/// IsApproved : 
		/// </summary>
		[EnumTextValue("IS_APPROVED")]
		[ColumnEnum("IS_APPROVED", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsApproved = 7,
		/// <summary>
		/// ApproveDate : 
		/// </summary>
		[EnumTextValue("APPROVE_DATE")]
		[ColumnEnum("APPROVE_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ApproveDate = 8,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsFacultyInfoId = 9,
		/// <summary>
		/// EdCodeCourseStatusId : 
		/// </summary>
		[EnumTextValue("ED_CODE_COURSE_STATUS_ID")]
		[ColumnEnum("ED_CODE_COURSE_STATUS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeCourseStatusId = 10,
		/// <summary>
		/// EdCodeGradingId : 
		/// </summary>
		[EnumTextValue("ED_CODE_GRADING_ID")]
		[ColumnEnum("ED_CODE_GRADING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeGradingId = 11,
		/// <summary>
		/// CourseDegree : 
		/// </summary>
		[EnumTextValue("COURSE_DEGREE")]
		[ColumnEnum("COURSE_DEGREE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CourseDegree = 12,
		/// <summary>
		/// CoursePoint : 
		/// </summary>
		[EnumTextValue("COURSE_POINT")]
		[ColumnEnum("COURSE_POINT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CoursePoint = 13,
		/// <summary>
		/// EntPolicyGradingHdrId : 
		/// </summary>
		[EnumTextValue("ENT_POLICY_GRADING_HDR_ID")]
		[ColumnEnum("ENT_POLICY_GRADING_HDR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntPolicyGradingHdrId = 14,
		/// <summary>
		/// GsCodePassFailId : 
		/// </summary>
		[EnumTextValue("GS_CODE_PASS_FAIL_ID")]
		[ColumnEnum("GS_CODE_PASS_FAIL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCodePassFailId = 15,
		/// <summary>
		/// EdStudSemesterId : 
		/// </summary>
		[EnumTextValue("ED_STUD_SEMESTER_ID")]
		[ColumnEnum("ED_STUD_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdStudSemesterId = 16,
		/// <summary>
		/// AddGpaFlg : 
		/// </summary>
		[EnumTextValue("ADD_GPA_FLG")]
		[ColumnEnum("ADD_GPA_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AddGpaFlg = 17,
		/// <summary>
		/// EntPolicyAssessHdrId : 
		/// </summary>
		[EnumTextValue("ENT_POLICY_ASSESS_HDR_ID")]
		[ColumnEnum("ENT_POLICY_ASSESS_HDR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntPolicyAssessHdrId = 18,
		/// <summary>
		/// IncompFlg : 
		/// </summary>
		[EnumTextValue("INCOMP_FLG")]
		[ColumnEnum("INCOMP_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IncompFlg = 19,
		/// <summary>
		/// HideFlg : 
		/// </summary>
		[EnumTextValue("HIDE_FLG")]
		[ColumnEnum("HIDE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		HideFlg = 20,
		/// <summary>
		/// HideReason : 
		/// </summary>
		[EnumTextValue("HIDE_REASON")]
		[ColumnEnum("HIDE_REASON", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		HideReason = 21,
		/// <summary>
		/// EdCourseSubId : 
		/// </summary>
		[EnumTextValue("ED_COURSE_SUB_ID")]
		[ColumnEnum("ED_COURSE_SUB_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCourseSubId = 22,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 23,
		/// <summary>
		/// SeFormId : 
		/// </summary>
		[EnumTextValue("SE_FORM_ID")]
		[ColumnEnum("SE_FORM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeFormId = 24,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 25,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdAcadYearId = 26,
		/// <summary>
		/// EdCodeSemesterId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeSemesterId = 27,
		/// <summary>
		/// EdStudId : 
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdStudId = 28
	}//End enum

	#endregion EdStudCourseRegTempColumn Enum

} // end namespace
