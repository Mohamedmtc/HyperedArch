
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdGuard.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_GUARD' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdGuardBase : EntityBase, IEdGuard, IEntityId<EdGuardKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdGuardEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdGuardEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdGuardEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdGuard> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdGuardEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdGuardEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdGuardBase"/> instance.
		///</summary>
		public EdGuardBase()
		{
			this.entityData = new EdGuardEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdGuardBase"/> instance.
		///</summary>
		///<param name="_edGuardId"></param>
		///<param name="_fullNameEn"></param>
		///<param name="_jobTitle"></param>
		///<param name="_permAddr"></param>
		///<param name="_eMail"></param>
		///<param name="_phoneNum"></param>
		///<param name="_mobileNum"></param>
		///<param name="_monthIncome"></param>
		///<param name="_staffFlg"></param>
		///<param name="_diplomaticFlg"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_birthDate"></param>
		///<param name="_gsCodeMaritalStateId"></param>
		///<param name="_gsCodeEducationLevelId"></param>
		///<param name="_companyName"></param>
		///<param name="_gsCountryNodeId"></param>
		///<param name="_fullNameAr"></param>
		///<param name="_cpr"></param>
		///<param name="_passporNo"></param>
		///<param name="_passporExpireDate"></param>
		///<param name="_residentExpireDate"></param>
		///<param name="_residentId"></param>
		///<param name="_username"></param>
		///<param name="_passwordSalt"></param>
		///<param name="_passwordHash"></param>
		///<param name="_securityQs"></param>
		///<param name="_securityQsAnsSalt"></param>
		///<param name="_securityQsAnsHash"></param>
		///<param name="_empFlg"></param>
		///<param name="_workAddress">عنوان العمل</param>
		public EdGuardBase(System.Decimal _edGuardId, System.String _fullNameEn, System.String _jobTitle, 
			System.String _permAddr, System.String _eMail, System.String _phoneNum, System.String _mobileNum, 
			System.Decimal? _monthIncome, System.Decimal _staffFlg, System.Decimal _diplomaticFlg, System.Decimal? _saStfMemberId, 
			System.DateTime? _birthDate, System.Decimal? _gsCodeMaritalStateId, System.Decimal? _gsCodeEducationLevelId, 
			System.String _companyName, System.Decimal? _gsCountryNodeId, System.String _fullNameAr, System.String _cpr, 
			System.String _passporNo, System.DateTime? _passporExpireDate, System.DateTime? _residentExpireDate, 
			System.String _residentId, System.String _username, System.String _passwordSalt, System.String _passwordHash, 
			System.String _securityQs, System.String _securityQsAnsSalt, System.String _securityQsAnsHash, System.Decimal? _empFlg, 
			System.String _workAddress)
		{
			this.entityData = new EdGuardEntityData();
			this.backupData = null;

			this.EdGuardId = _edGuardId;
			this.FullNameEn = _fullNameEn;
			this.JobTitle = _jobTitle;
			this.PermAddr = _permAddr;
			this.EMail = _eMail;
			this.PhoneNum = _phoneNum;
			this.MobileNum = _mobileNum;
			this.MonthIncome = _monthIncome;
			this.StaffFlg = _staffFlg;
			this.DiplomaticFlg = _diplomaticFlg;
			this.SaStfMemberId = _saStfMemberId;
			this.BirthDate = _birthDate;
			this.GsCodeMaritalStateId = _gsCodeMaritalStateId;
			this.GsCodeEducationLevelId = _gsCodeEducationLevelId;
			this.CompanyName = _companyName;
			this.GsCountryNodeId = _gsCountryNodeId;
			this.FullNameAr = _fullNameAr;
			this.Cpr = _cpr;
			this.PassporNo = _passporNo;
			this.PassporExpireDate = _passporExpireDate;
			this.ResidentExpireDate = _residentExpireDate;
			this.ResidentId = _residentId;
			this.Username = _username;
			this.PasswordSalt = _passwordSalt;
			this.PasswordHash = _passwordHash;
			this.SecurityQs = _securityQs;
			this.SecurityQsAnsSalt = _securityQsAnsSalt;
			this.SecurityQsAnsHash = _securityQsAnsHash;
			this.EmpFlg = _empFlg;
			this.WorkAddress = _workAddress;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdGuard"/> instance.
		///</summary>
		///<param name="_edGuardId"></param>
		///<param name="_fullNameEn"></param>
		///<param name="_jobTitle"></param>
		///<param name="_permAddr"></param>
		///<param name="_eMail"></param>
		///<param name="_phoneNum"></param>
		///<param name="_mobileNum"></param>
		///<param name="_monthIncome"></param>
		///<param name="_staffFlg"></param>
		///<param name="_diplomaticFlg"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_birthDate"></param>
		///<param name="_gsCodeMaritalStateId"></param>
		///<param name="_gsCodeEducationLevelId"></param>
		///<param name="_companyName"></param>
		///<param name="_gsCountryNodeId"></param>
		///<param name="_fullNameAr"></param>
		///<param name="_cpr"></param>
		///<param name="_passporNo"></param>
		///<param name="_passporExpireDate"></param>
		///<param name="_residentExpireDate"></param>
		///<param name="_residentId"></param>
		///<param name="_username"></param>
		///<param name="_passwordSalt"></param>
		///<param name="_passwordHash"></param>
		///<param name="_securityQs"></param>
		///<param name="_securityQsAnsSalt"></param>
		///<param name="_securityQsAnsHash"></param>
		///<param name="_empFlg"></param>
		///<param name="_workAddress">عنوان العمل</param>
		public static EdGuard CreateEdGuard(System.Decimal _edGuardId, System.String _fullNameEn, System.String _jobTitle, 
			System.String _permAddr, System.String _eMail, System.String _phoneNum, System.String _mobileNum, 
			System.Decimal? _monthIncome, System.Decimal _staffFlg, System.Decimal _diplomaticFlg, System.Decimal? _saStfMemberId, 
			System.DateTime? _birthDate, System.Decimal? _gsCodeMaritalStateId, System.Decimal? _gsCodeEducationLevelId, 
			System.String _companyName, System.Decimal? _gsCountryNodeId, System.String _fullNameAr, System.String _cpr, 
			System.String _passporNo, System.DateTime? _passporExpireDate, System.DateTime? _residentExpireDate, 
			System.String _residentId, System.String _username, System.String _passwordSalt, System.String _passwordHash, 
			System.String _securityQs, System.String _securityQsAnsSalt, System.String _securityQsAnsHash, System.Decimal? _empFlg, 
			System.String _workAddress)
		{
			EdGuard newEdGuard = new EdGuard();
			newEdGuard.EdGuardId = _edGuardId;
			newEdGuard.FullNameEn = _fullNameEn;
			newEdGuard.JobTitle = _jobTitle;
			newEdGuard.PermAddr = _permAddr;
			newEdGuard.EMail = _eMail;
			newEdGuard.PhoneNum = _phoneNum;
			newEdGuard.MobileNum = _mobileNum;
			newEdGuard.MonthIncome = _monthIncome;
			newEdGuard.StaffFlg = _staffFlg;
			newEdGuard.DiplomaticFlg = _diplomaticFlg;
			newEdGuard.SaStfMemberId = _saStfMemberId;
			newEdGuard.BirthDate = _birthDate;
			newEdGuard.GsCodeMaritalStateId = _gsCodeMaritalStateId;
			newEdGuard.GsCodeEducationLevelId = _gsCodeEducationLevelId;
			newEdGuard.CompanyName = _companyName;
			newEdGuard.GsCountryNodeId = _gsCountryNodeId;
			newEdGuard.FullNameAr = _fullNameAr;
			newEdGuard.Cpr = _cpr;
			newEdGuard.PassporNo = _passporNo;
			newEdGuard.PassporExpireDate = _passporExpireDate;
			newEdGuard.ResidentExpireDate = _residentExpireDate;
			newEdGuard.ResidentId = _residentId;
			newEdGuard.Username = _username;
			newEdGuard.PasswordSalt = _passwordSalt;
			newEdGuard.PasswordHash = _passwordHash;
			newEdGuard.SecurityQs = _securityQs;
			newEdGuard.SecurityQsAnsSalt = _securityQsAnsSalt;
			newEdGuard.SecurityQsAnsHash = _securityQsAnsHash;
			newEdGuard.EmpFlg = _empFlg;
			newEdGuard.WorkAddress = _workAddress;
			return newEdGuard;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdGuardId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdGuardId
		{
			get
			{
				return this.entityData.EdGuardId; 
			}
			
			set
			{
				if (this.entityData.EdGuardId == value)
					return;
					
				OnColumnChanging(EdGuardColumn.EdGuardId, this.entityData.EdGuardId);
				this.entityData.EdGuardId = value;
				this.EntityId.EdGuardId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.EdGuardId, this.entityData.EdGuardId);
				OnPropertyChanged("EdGuardId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_GUARD_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ED_GUARD_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdGuardId
		{
			get { return this.entityData.OriginalEdGuardId; }
			set { this.entityData.OriginalEdGuardId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the FullNameEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 64)]
		public virtual System.String FullNameEn
		{
			get
			{
				return this.entityData.FullNameEn; 
			}
			
			set
			{
				if (this.entityData.FullNameEn == value)
					return;
					
				OnColumnChanging(EdGuardColumn.FullNameEn, this.entityData.FullNameEn);
				this.entityData.FullNameEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.FullNameEn, this.entityData.FullNameEn);
				OnPropertyChanged("FullNameEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the JobTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 64)]
		public virtual System.String JobTitle
		{
			get
			{
				return this.entityData.JobTitle; 
			}
			
			set
			{
				if (this.entityData.JobTitle == value)
					return;
					
				OnColumnChanging(EdGuardColumn.JobTitle, this.entityData.JobTitle);
				this.entityData.JobTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.JobTitle, this.entityData.JobTitle);
				OnPropertyChanged("JobTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PermAddr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 90)]
		public virtual System.String PermAddr
		{
			get
			{
				return this.entityData.PermAddr; 
			}
			
			set
			{
				if (this.entityData.PermAddr == value)
					return;
					
				OnColumnChanging(EdGuardColumn.PermAddr, this.entityData.PermAddr);
				this.entityData.PermAddr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.PermAddr, this.entityData.PermAddr);
				OnPropertyChanged("PermAddr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EMail property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String EMail
		{
			get
			{
				return this.entityData.EMail; 
			}
			
			set
			{
				if (this.entityData.EMail == value)
					return;
					
				OnColumnChanging(EdGuardColumn.EMail, this.entityData.EMail);
				this.entityData.EMail = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.EMail, this.entityData.EMail);
				OnPropertyChanged("EMail");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PhoneNum property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String PhoneNum
		{
			get
			{
				return this.entityData.PhoneNum; 
			}
			
			set
			{
				if (this.entityData.PhoneNum == value)
					return;
					
				OnColumnChanging(EdGuardColumn.PhoneNum, this.entityData.PhoneNum);
				this.entityData.PhoneNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.PhoneNum, this.entityData.PhoneNum);
				OnPropertyChanged("PhoneNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MobileNum property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String MobileNum
		{
			get
			{
				return this.entityData.MobileNum; 
			}
			
			set
			{
				if (this.entityData.MobileNum == value)
					return;
					
				OnColumnChanging(EdGuardColumn.MobileNum, this.entityData.MobileNum);
				this.entityData.MobileNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.MobileNum, this.entityData.MobileNum);
				OnPropertyChanged("MobileNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MonthIncome property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMonthIncomeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MonthIncome
		{
			get
			{
				return this.entityData.MonthIncome; 
			}
			
			set
			{
				if (this.entityData.MonthIncome == value)
					return;
					
				OnColumnChanging(EdGuardColumn.MonthIncome, this.entityData.MonthIncome);
				this.entityData.MonthIncome = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.MonthIncome, this.entityData.MonthIncome);
				OnPropertyChanged("MonthIncome");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StaffFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal StaffFlg
		{
			get
			{
				return this.entityData.StaffFlg; 
			}
			
			set
			{
				if (this.entityData.StaffFlg == value)
					return;
					
				OnColumnChanging(EdGuardColumn.StaffFlg, this.entityData.StaffFlg);
				this.entityData.StaffFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.StaffFlg, this.entityData.StaffFlg);
				OnPropertyChanged("StaffFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DiplomaticFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal DiplomaticFlg
		{
			get
			{
				return this.entityData.DiplomaticFlg; 
			}
			
			set
			{
				if (this.entityData.DiplomaticFlg == value)
					return;
					
				OnColumnChanging(EdGuardColumn.DiplomaticFlg, this.entityData.DiplomaticFlg);
				this.entityData.DiplomaticFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.DiplomaticFlg, this.entityData.DiplomaticFlg);
				OnPropertyChanged("DiplomaticFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaStfMemberId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSaStfMemberIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SaStfMemberId
		{
			get
			{
				return this.entityData.SaStfMemberId; 
			}
			
			set
			{
				if (this.entityData.SaStfMemberId == value)
					return;
					
				OnColumnChanging(EdGuardColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				this.entityData.SaStfMemberId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				OnPropertyChanged("SaStfMemberId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BirthDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsBirthDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? BirthDate
		{
			get
			{
				return this.entityData.BirthDate; 
			}
			
			set
			{
				if (this.entityData.BirthDate == value)
					return;
					
				OnColumnChanging(EdGuardColumn.BirthDate, this.entityData.BirthDate);
				this.entityData.BirthDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.BirthDate, this.entityData.BirthDate);
				OnPropertyChanged("BirthDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeMaritalStateId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCodeMaritalStateIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCodeMaritalStateId
		{
			get
			{
				return this.entityData.GsCodeMaritalStateId; 
			}
			
			set
			{
				if (this.entityData.GsCodeMaritalStateId == value)
					return;
					
				OnColumnChanging(EdGuardColumn.GsCodeMaritalStateId, this.entityData.GsCodeMaritalStateId);
				this.entityData.GsCodeMaritalStateId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.GsCodeMaritalStateId, this.entityData.GsCodeMaritalStateId);
				OnPropertyChanged("GsCodeMaritalStateId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeEducationLevelId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCodeEducationLevelIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCodeEducationLevelId
		{
			get
			{
				return this.entityData.GsCodeEducationLevelId; 
			}
			
			set
			{
				if (this.entityData.GsCodeEducationLevelId == value)
					return;
					
				OnColumnChanging(EdGuardColumn.GsCodeEducationLevelId, this.entityData.GsCodeEducationLevelId);
				this.entityData.GsCodeEducationLevelId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.GsCodeEducationLevelId, this.entityData.GsCodeEducationLevelId);
				OnPropertyChanged("GsCodeEducationLevelId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CompanyName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String CompanyName
		{
			get
			{
				return this.entityData.CompanyName; 
			}
			
			set
			{
				if (this.entityData.CompanyName == value)
					return;
					
				OnColumnChanging(EdGuardColumn.CompanyName, this.entityData.CompanyName);
				this.entityData.CompanyName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.CompanyName, this.entityData.CompanyName);
				OnPropertyChanged("CompanyName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCountryNodeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCountryNodeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCountryNodeId
		{
			get
			{
				return this.entityData.GsCountryNodeId; 
			}
			
			set
			{
				if (this.entityData.GsCountryNodeId == value)
					return;
					
				OnColumnChanging(EdGuardColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				this.entityData.GsCountryNodeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				OnPropertyChanged("GsCountryNodeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FullNameAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 64)]
		public virtual System.String FullNameAr
		{
			get
			{
				return this.entityData.FullNameAr; 
			}
			
			set
			{
				if (this.entityData.FullNameAr == value)
					return;
					
				OnColumnChanging(EdGuardColumn.FullNameAr, this.entityData.FullNameAr);
				this.entityData.FullNameAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.FullNameAr, this.entityData.FullNameAr);
				OnPropertyChanged("FullNameAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Cpr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String Cpr
		{
			get
			{
				return this.entityData.Cpr; 
			}
			
			set
			{
				if (this.entityData.Cpr == value)
					return;
					
				OnColumnChanging(EdGuardColumn.Cpr, this.entityData.Cpr);
				this.entityData.Cpr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.Cpr, this.entityData.Cpr);
				OnPropertyChanged("Cpr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PassporNo property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String PassporNo
		{
			get
			{
				return this.entityData.PassporNo; 
			}
			
			set
			{
				if (this.entityData.PassporNo == value)
					return;
					
				OnColumnChanging(EdGuardColumn.PassporNo, this.entityData.PassporNo);
				this.entityData.PassporNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.PassporNo, this.entityData.PassporNo);
				OnPropertyChanged("PassporNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PassporExpireDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsPassporExpireDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? PassporExpireDate
		{
			get
			{
				return this.entityData.PassporExpireDate; 
			}
			
			set
			{
				if (this.entityData.PassporExpireDate == value)
					return;
					
				OnColumnChanging(EdGuardColumn.PassporExpireDate, this.entityData.PassporExpireDate);
				this.entityData.PassporExpireDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.PassporExpireDate, this.entityData.PassporExpireDate);
				OnPropertyChanged("PassporExpireDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResidentExpireDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsResidentExpireDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ResidentExpireDate
		{
			get
			{
				return this.entityData.ResidentExpireDate; 
			}
			
			set
			{
				if (this.entityData.ResidentExpireDate == value)
					return;
					
				OnColumnChanging(EdGuardColumn.ResidentExpireDate, this.entityData.ResidentExpireDate);
				this.entityData.ResidentExpireDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.ResidentExpireDate, this.entityData.ResidentExpireDate);
				OnPropertyChanged("ResidentExpireDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResidentId property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String ResidentId
		{
			get
			{
				return this.entityData.ResidentId; 
			}
			
			set
			{
				if (this.entityData.ResidentId == value)
					return;
					
				OnColumnChanging(EdGuardColumn.ResidentId, this.entityData.ResidentId);
				this.entityData.ResidentId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.ResidentId, this.entityData.ResidentId);
				OnPropertyChanged("ResidentId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Username property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Username
		{
			get
			{
				return this.entityData.Username; 
			}
			
			set
			{
				if (this.entityData.Username == value)
					return;
					
				OnColumnChanging(EdGuardColumn.Username, this.entityData.Username);
				this.entityData.Username = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.Username, this.entityData.Username);
				OnPropertyChanged("Username");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PasswordSalt property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String PasswordSalt
		{
			get
			{
				return this.entityData.PasswordSalt; 
			}
			
			set
			{
				if (this.entityData.PasswordSalt == value)
					return;
					
				OnColumnChanging(EdGuardColumn.PasswordSalt, this.entityData.PasswordSalt);
				this.entityData.PasswordSalt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.PasswordSalt, this.entityData.PasswordSalt);
				OnPropertyChanged("PasswordSalt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PasswordHash property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String PasswordHash
		{
			get
			{
				return this.entityData.PasswordHash; 
			}
			
			set
			{
				if (this.entityData.PasswordHash == value)
					return;
					
				OnColumnChanging(EdGuardColumn.PasswordHash, this.entityData.PasswordHash);
				this.entityData.PasswordHash = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.PasswordHash, this.entityData.PasswordHash);
				OnPropertyChanged("PasswordHash");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SecurityQs property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 350)]
		public virtual System.String SecurityQs
		{
			get
			{
				return this.entityData.SecurityQs; 
			}
			
			set
			{
				if (this.entityData.SecurityQs == value)
					return;
					
				OnColumnChanging(EdGuardColumn.SecurityQs, this.entityData.SecurityQs);
				this.entityData.SecurityQs = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.SecurityQs, this.entityData.SecurityQs);
				OnPropertyChanged("SecurityQs");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SecurityQsAnsSalt property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String SecurityQsAnsSalt
		{
			get
			{
				return this.entityData.SecurityQsAnsSalt; 
			}
			
			set
			{
				if (this.entityData.SecurityQsAnsSalt == value)
					return;
					
				OnColumnChanging(EdGuardColumn.SecurityQsAnsSalt, this.entityData.SecurityQsAnsSalt);
				this.entityData.SecurityQsAnsSalt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.SecurityQsAnsSalt, this.entityData.SecurityQsAnsSalt);
				OnPropertyChanged("SecurityQsAnsSalt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SecurityQsAnsHash property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String SecurityQsAnsHash
		{
			get
			{
				return this.entityData.SecurityQsAnsHash; 
			}
			
			set
			{
				if (this.entityData.SecurityQsAnsHash == value)
					return;
					
				OnColumnChanging(EdGuardColumn.SecurityQsAnsHash, this.entityData.SecurityQsAnsHash);
				this.entityData.SecurityQsAnsHash = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.SecurityQsAnsHash, this.entityData.SecurityQsAnsHash);
				OnPropertyChanged("SecurityQsAnsHash");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmpFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEmpFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EmpFlg
		{
			get
			{
				return this.entityData.EmpFlg; 
			}
			
			set
			{
				if (this.entityData.EmpFlg == value)
					return;
					
				OnColumnChanging(EdGuardColumn.EmpFlg, this.entityData.EmpFlg);
				this.entityData.EmpFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.EmpFlg, this.entityData.EmpFlg);
				OnPropertyChanged("EmpFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WorkAddress property. 
		///		عنوان العمل
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"عنوان العمل"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String WorkAddress
		{
			get
			{
				return this.entityData.WorkAddress; 
			}
			
			set
			{
				if (this.entityData.WorkAddress == value)
					return;
					
				OnColumnChanging(EdGuardColumn.WorkAddress, this.entityData.WorkAddress);
				this.entityData.WorkAddress = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGuardColumn.WorkAddress, this.entityData.WorkAddress);
				OnPropertyChanged("WorkAddress");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="GsCdeMaritalStatus"/>.
		/// </summary>
		/// <value>The source GsCdeMaritalStatus for GsCodeMaritalStateId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCdeMaritalStatus GsCodeMaritalStateIdSource
      	{
            get { return entityData.GsCodeMaritalStateIdSource; }
            set { entityData.GsCodeMaritalStateIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCountryNode"/>.
		/// </summary>
		/// <value>The source GsCountryNode for GsCountryNodeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCountryNode GsCountryNodeIdSource
      	{
            get { return entityData.GsCountryNodeIdSource; }
            set { entityData.GsCountryNodeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeEducationLevel"/>.
		/// </summary>
		/// <value>The source GsCodeEducationLevel for GsCodeEducationLevelId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeEducationLevel GsCodeEducationLevelIdSource
      	{
            get { return entityData.GsCodeEducationLevelIdSource; }
            set { entityData.GsCodeEducationLevelIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return entityData.SaStfMemberIdSource; }
            set { entityData.SaStfMemberIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EdStudGuard objects
		///	which are related to this object through the relation FK_ED_STUD_GUARD_ED_GUARD
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudGuard> EdStudGuardCollection
		{
			get { return entityData.EdStudGuardCollection; }
			set { entityData.EdStudGuardCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FullNameEn", "Full Name En", 64));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("JobTitle", "Job Title", 64));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PermAddr", "Perm Addr", 90));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EMail", "E Mail", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PhoneNum", "Phone Num", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MobileNum", "Mobile Num", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CompanyName", "Company Name", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FullNameAr", "Full Name Ar", 64));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Cpr", "Cpr", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PassporNo", "Passpor No", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ResidentId", "Resident Id", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Username", "Username", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PasswordSalt", "Password Salt", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PasswordHash", "Password Hash", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SecurityQs", "Security Qs", 350));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SecurityQsAnsSalt", "Security Qs Ans Salt", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SecurityQsAnsHash", "Security Qs Ans Hash", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("WorkAddress", "Work Address", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_GUARD"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_GUARD_ID", "FULL_NAME_EN", "JOB_TITLE", "PERM_ADDR", "E_MAIL", "PHONE_NUM", "MOBILE_NUM", "MONTH_INCOME", "STAFF_FLG", "DIPLOMATIC_FLG", "SA_STF_MEMBER_ID", "BIRTH_DATE", "GS_CODE_MARITAL_STATE_ID", "GS_CODE_EDUCATION_LEVEL_ID", "COMPANY_NAME", "GS_COUNTRY_NODE_ID", "FULL_NAME_AR", "CPR", "PASSPOR_NO", "PASSPOR_EXPIRE_DATE", "RESIDENT_EXPIRE_DATE", "RESIDENT_ID", "USERNAME", "PASSWORD_SALT", "PASSWORD_HASH", "SECURITY_QS", "SECURITY_QS_ANS_SALT", "SECURITY_QS_ANS_HASH", "EMP_FLG", "WORK_ADDRESS"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdGuardEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdGuard) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdGuard>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdGuard);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdGuard Entity 
		///</summary>
		protected virtual EdGuard Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdGuard copy = new EdGuard();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdGuardId = this.EdGuardId;
					copy.OriginalEdGuardId = this.OriginalEdGuardId;
				copy.FullNameEn = this.FullNameEn;
				copy.JobTitle = this.JobTitle;
				copy.PermAddr = this.PermAddr;
				copy.EMail = this.EMail;
				copy.PhoneNum = this.PhoneNum;
				copy.MobileNum = this.MobileNum;
				copy.MonthIncome = this.MonthIncome;
				copy.StaffFlg = this.StaffFlg;
				copy.DiplomaticFlg = this.DiplomaticFlg;
				copy.SaStfMemberId = this.SaStfMemberId;
				copy.BirthDate = this.BirthDate;
				copy.GsCodeMaritalStateId = this.GsCodeMaritalStateId;
				copy.GsCodeEducationLevelId = this.GsCodeEducationLevelId;
				copy.CompanyName = this.CompanyName;
				copy.GsCountryNodeId = this.GsCountryNodeId;
				copy.FullNameAr = this.FullNameAr;
				copy.Cpr = this.Cpr;
				copy.PassporNo = this.PassporNo;
				copy.PassporExpireDate = this.PassporExpireDate;
				copy.ResidentExpireDate = this.ResidentExpireDate;
				copy.ResidentId = this.ResidentId;
				copy.Username = this.Username;
				copy.PasswordSalt = this.PasswordSalt;
				copy.PasswordHash = this.PasswordHash;
				copy.SecurityQs = this.SecurityQs;
				copy.SecurityQsAnsSalt = this.SecurityQsAnsSalt;
				copy.SecurityQsAnsHash = this.SecurityQsAnsHash;
				copy.EmpFlg = this.EmpFlg;
				copy.WorkAddress = this.WorkAddress;
			
			if (this.GsCodeMaritalStateIdSource != null && existingCopies.Contains(this.GsCodeMaritalStateIdSource))
				copy.GsCodeMaritalStateIdSource = existingCopies[this.GsCodeMaritalStateIdSource] as GsCdeMaritalStatus;
			else
				copy.GsCodeMaritalStateIdSource = MakeCopyOf(this.GsCodeMaritalStateIdSource, existingCopies) as GsCdeMaritalStatus;
			if (this.GsCountryNodeIdSource != null && existingCopies.Contains(this.GsCountryNodeIdSource))
				copy.GsCountryNodeIdSource = existingCopies[this.GsCountryNodeIdSource] as GsCountryNode;
			else
				copy.GsCountryNodeIdSource = MakeCopyOf(this.GsCountryNodeIdSource, existingCopies) as GsCountryNode;
			if (this.GsCodeEducationLevelIdSource != null && existingCopies.Contains(this.GsCodeEducationLevelIdSource))
				copy.GsCodeEducationLevelIdSource = existingCopies[this.GsCodeEducationLevelIdSource] as GsCodeEducationLevel;
			else
				copy.GsCodeEducationLevelIdSource = MakeCopyOf(this.GsCodeEducationLevelIdSource, existingCopies) as GsCodeEducationLevel;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				copy.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				copy.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
		
			//deep copy nested objects
			copy.EdStudGuardCollection = (TList<EdStudGuard>) MakeCopyOf(this.EdStudGuardCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdGuard Entity 
		///</summary>
		public virtual EdGuard Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdGuard Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdGuard DeepCopy()
		{
			return EntityHelper.Clone<EdGuard>(this as EdGuard);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdGuardEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdGuardEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdGuardEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdGuardColumn column)
		{
			switch(column)
			{
					case EdGuardColumn.EdGuardId:
					return entityData.EdGuardId != _originalData.EdGuardId;
					case EdGuardColumn.FullNameEn:
					return entityData.FullNameEn != _originalData.FullNameEn;
					case EdGuardColumn.JobTitle:
					return entityData.JobTitle != _originalData.JobTitle;
					case EdGuardColumn.PermAddr:
					return entityData.PermAddr != _originalData.PermAddr;
					case EdGuardColumn.EMail:
					return entityData.EMail != _originalData.EMail;
					case EdGuardColumn.PhoneNum:
					return entityData.PhoneNum != _originalData.PhoneNum;
					case EdGuardColumn.MobileNum:
					return entityData.MobileNum != _originalData.MobileNum;
					case EdGuardColumn.MonthIncome:
					return entityData.MonthIncome != _originalData.MonthIncome;
					case EdGuardColumn.StaffFlg:
					return entityData.StaffFlg != _originalData.StaffFlg;
					case EdGuardColumn.DiplomaticFlg:
					return entityData.DiplomaticFlg != _originalData.DiplomaticFlg;
					case EdGuardColumn.SaStfMemberId:
					return entityData.SaStfMemberId != _originalData.SaStfMemberId;
					case EdGuardColumn.BirthDate:
					return entityData.BirthDate != _originalData.BirthDate;
					case EdGuardColumn.GsCodeMaritalStateId:
					return entityData.GsCodeMaritalStateId != _originalData.GsCodeMaritalStateId;
					case EdGuardColumn.GsCodeEducationLevelId:
					return entityData.GsCodeEducationLevelId != _originalData.GsCodeEducationLevelId;
					case EdGuardColumn.CompanyName:
					return entityData.CompanyName != _originalData.CompanyName;
					case EdGuardColumn.GsCountryNodeId:
					return entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
					case EdGuardColumn.FullNameAr:
					return entityData.FullNameAr != _originalData.FullNameAr;
					case EdGuardColumn.Cpr:
					return entityData.Cpr != _originalData.Cpr;
					case EdGuardColumn.PassporNo:
					return entityData.PassporNo != _originalData.PassporNo;
					case EdGuardColumn.PassporExpireDate:
					return entityData.PassporExpireDate != _originalData.PassporExpireDate;
					case EdGuardColumn.ResidentExpireDate:
					return entityData.ResidentExpireDate != _originalData.ResidentExpireDate;
					case EdGuardColumn.ResidentId:
					return entityData.ResidentId != _originalData.ResidentId;
					case EdGuardColumn.Username:
					return entityData.Username != _originalData.Username;
					case EdGuardColumn.PasswordSalt:
					return entityData.PasswordSalt != _originalData.PasswordSalt;
					case EdGuardColumn.PasswordHash:
					return entityData.PasswordHash != _originalData.PasswordHash;
					case EdGuardColumn.SecurityQs:
					return entityData.SecurityQs != _originalData.SecurityQs;
					case EdGuardColumn.SecurityQsAnsSalt:
					return entityData.SecurityQsAnsSalt != _originalData.SecurityQsAnsSalt;
					case EdGuardColumn.SecurityQsAnsHash:
					return entityData.SecurityQsAnsHash != _originalData.SecurityQsAnsHash;
					case EdGuardColumn.EmpFlg:
					return entityData.EmpFlg != _originalData.EmpFlg;
					case EdGuardColumn.WorkAddress:
					return entityData.WorkAddress != _originalData.WorkAddress;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdGuardColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdGuardId != _originalData.EdGuardId;
			result = result || entityData.FullNameEn != _originalData.FullNameEn;
			result = result || entityData.JobTitle != _originalData.JobTitle;
			result = result || entityData.PermAddr != _originalData.PermAddr;
			result = result || entityData.EMail != _originalData.EMail;
			result = result || entityData.PhoneNum != _originalData.PhoneNum;
			result = result || entityData.MobileNum != _originalData.MobileNum;
			result = result || entityData.MonthIncome != _originalData.MonthIncome;
			result = result || entityData.StaffFlg != _originalData.StaffFlg;
			result = result || entityData.DiplomaticFlg != _originalData.DiplomaticFlg;
			result = result || entityData.SaStfMemberId != _originalData.SaStfMemberId;
			result = result || entityData.BirthDate != _originalData.BirthDate;
			result = result || entityData.GsCodeMaritalStateId != _originalData.GsCodeMaritalStateId;
			result = result || entityData.GsCodeEducationLevelId != _originalData.GsCodeEducationLevelId;
			result = result || entityData.CompanyName != _originalData.CompanyName;
			result = result || entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
			result = result || entityData.FullNameAr != _originalData.FullNameAr;
			result = result || entityData.Cpr != _originalData.Cpr;
			result = result || entityData.PassporNo != _originalData.PassporNo;
			result = result || entityData.PassporExpireDate != _originalData.PassporExpireDate;
			result = result || entityData.ResidentExpireDate != _originalData.ResidentExpireDate;
			result = result || entityData.ResidentId != _originalData.ResidentId;
			result = result || entityData.Username != _originalData.Username;
			result = result || entityData.PasswordSalt != _originalData.PasswordSalt;
			result = result || entityData.PasswordHash != _originalData.PasswordHash;
			result = result || entityData.SecurityQs != _originalData.SecurityQs;
			result = result || entityData.SecurityQsAnsSalt != _originalData.SecurityQsAnsSalt;
			result = result || entityData.SecurityQsAnsHash != _originalData.SecurityQsAnsHash;
			result = result || entityData.EmpFlg != _originalData.EmpFlg;
			result = result || entityData.WorkAddress != _originalData.WorkAddress;
			return result;
		}	
		
		///<summary>
		///  Returns a EdGuard Entity with the original data.
		///</summary>
		public EdGuard GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdGuard(
				_originalData.EdGuardId,
				_originalData.FullNameEn,
				_originalData.JobTitle,
				_originalData.PermAddr,
				_originalData.EMail,
				_originalData.PhoneNum,
				_originalData.MobileNum,
				_originalData.MonthIncome,
				_originalData.StaffFlg,
				_originalData.DiplomaticFlg,
				_originalData.SaStfMemberId,
				_originalData.BirthDate,
				_originalData.GsCodeMaritalStateId,
				_originalData.GsCodeEducationLevelId,
				_originalData.CompanyName,
				_originalData.GsCountryNodeId,
				_originalData.FullNameAr,
				_originalData.Cpr,
				_originalData.PassporNo,
				_originalData.PassporExpireDate,
				_originalData.ResidentExpireDate,
				_originalData.ResidentId,
				_originalData.Username,
				_originalData.PasswordSalt,
				_originalData.PasswordHash,
				_originalData.SecurityQs,
				_originalData.SecurityQsAnsSalt,
				_originalData.SecurityQsAnsHash,
				_originalData.EmpFlg,
				_originalData.WorkAddress
				);
				
			return (EdGuard)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdGuardBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdGuardBase)
				return ValueEquals(this, (EdGuardBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdGuardBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdGuardId.GetHashCode() ^ 
					((this.FullNameEn == null) ? string.Empty : this.FullNameEn.ToString()).GetHashCode() ^ 
					((this.JobTitle == null) ? string.Empty : this.JobTitle.ToString()).GetHashCode() ^ 
					((this.PermAddr == null) ? string.Empty : this.PermAddr.ToString()).GetHashCode() ^ 
					((this.EMail == null) ? string.Empty : this.EMail.ToString()).GetHashCode() ^ 
					((this.PhoneNum == null) ? string.Empty : this.PhoneNum.ToString()).GetHashCode() ^ 
					((this.MobileNum == null) ? string.Empty : this.MobileNum.ToString()).GetHashCode() ^ 
					((this.MonthIncome == null) ? string.Empty : this.MonthIncome.ToString()).GetHashCode() ^ 
					this.StaffFlg.GetHashCode() ^ 
					this.DiplomaticFlg.GetHashCode() ^ 
					((this.SaStfMemberId == null) ? string.Empty : this.SaStfMemberId.ToString()).GetHashCode() ^ 
					((this.BirthDate == null) ? string.Empty : this.BirthDate.ToString()).GetHashCode() ^ 
					((this.GsCodeMaritalStateId == null) ? string.Empty : this.GsCodeMaritalStateId.ToString()).GetHashCode() ^ 
					((this.GsCodeEducationLevelId == null) ? string.Empty : this.GsCodeEducationLevelId.ToString()).GetHashCode() ^ 
					((this.CompanyName == null) ? string.Empty : this.CompanyName.ToString()).GetHashCode() ^ 
					((this.GsCountryNodeId == null) ? string.Empty : this.GsCountryNodeId.ToString()).GetHashCode() ^ 
					((this.FullNameAr == null) ? string.Empty : this.FullNameAr.ToString()).GetHashCode() ^ 
					((this.Cpr == null) ? string.Empty : this.Cpr.ToString()).GetHashCode() ^ 
					((this.PassporNo == null) ? string.Empty : this.PassporNo.ToString()).GetHashCode() ^ 
					((this.PassporExpireDate == null) ? string.Empty : this.PassporExpireDate.ToString()).GetHashCode() ^ 
					((this.ResidentExpireDate == null) ? string.Empty : this.ResidentExpireDate.ToString()).GetHashCode() ^ 
					((this.ResidentId == null) ? string.Empty : this.ResidentId.ToString()).GetHashCode() ^ 
					((this.Username == null) ? string.Empty : this.Username.ToString()).GetHashCode() ^ 
					((this.PasswordSalt == null) ? string.Empty : this.PasswordSalt.ToString()).GetHashCode() ^ 
					((this.PasswordHash == null) ? string.Empty : this.PasswordHash.ToString()).GetHashCode() ^ 
					((this.SecurityQs == null) ? string.Empty : this.SecurityQs.ToString()).GetHashCode() ^ 
					((this.SecurityQsAnsSalt == null) ? string.Empty : this.SecurityQsAnsSalt.ToString()).GetHashCode() ^ 
					((this.SecurityQsAnsHash == null) ? string.Empty : this.SecurityQsAnsHash.ToString()).GetHashCode() ^ 
					((this.EmpFlg == null) ? string.Empty : this.EmpFlg.ToString()).GetHashCode() ^ 
					((this.WorkAddress == null) ? string.Empty : this.WorkAddress.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdGuardBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdGuardBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdGuardBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdGuardBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdGuardBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdGuardBase Object1, EdGuardBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdGuardId != Object2.EdGuardId)
				equal = false;
			if ( Object1.FullNameEn != null && Object2.FullNameEn != null )
			{
				if (Object1.FullNameEn != Object2.FullNameEn)
					equal = false;
			}
			else if (Object1.FullNameEn == null ^ Object2.FullNameEn == null )
			{
				equal = false;
			}
			if ( Object1.JobTitle != null && Object2.JobTitle != null )
			{
				if (Object1.JobTitle != Object2.JobTitle)
					equal = false;
			}
			else if (Object1.JobTitle == null ^ Object2.JobTitle == null )
			{
				equal = false;
			}
			if ( Object1.PermAddr != null && Object2.PermAddr != null )
			{
				if (Object1.PermAddr != Object2.PermAddr)
					equal = false;
			}
			else if (Object1.PermAddr == null ^ Object2.PermAddr == null )
			{
				equal = false;
			}
			if ( Object1.EMail != null && Object2.EMail != null )
			{
				if (Object1.EMail != Object2.EMail)
					equal = false;
			}
			else if (Object1.EMail == null ^ Object2.EMail == null )
			{
				equal = false;
			}
			if ( Object1.PhoneNum != null && Object2.PhoneNum != null )
			{
				if (Object1.PhoneNum != Object2.PhoneNum)
					equal = false;
			}
			else if (Object1.PhoneNum == null ^ Object2.PhoneNum == null )
			{
				equal = false;
			}
			if ( Object1.MobileNum != null && Object2.MobileNum != null )
			{
				if (Object1.MobileNum != Object2.MobileNum)
					equal = false;
			}
			else if (Object1.MobileNum == null ^ Object2.MobileNum == null )
			{
				equal = false;
			}
			if ( Object1.MonthIncome != null && Object2.MonthIncome != null )
			{
				if (Object1.MonthIncome != Object2.MonthIncome)
					equal = false;
			}
			else if (Object1.MonthIncome == null ^ Object2.MonthIncome == null )
			{
				equal = false;
			}
			if (Object1.StaffFlg != Object2.StaffFlg)
				equal = false;
			if (Object1.DiplomaticFlg != Object2.DiplomaticFlg)
				equal = false;
			if ( Object1.SaStfMemberId != null && Object2.SaStfMemberId != null )
			{
				if (Object1.SaStfMemberId != Object2.SaStfMemberId)
					equal = false;
			}
			else if (Object1.SaStfMemberId == null ^ Object2.SaStfMemberId == null )
			{
				equal = false;
			}
			if ( Object1.BirthDate != null && Object2.BirthDate != null )
			{
				if (Object1.BirthDate != Object2.BirthDate)
					equal = false;
			}
			else if (Object1.BirthDate == null ^ Object2.BirthDate == null )
			{
				equal = false;
			}
			if ( Object1.GsCodeMaritalStateId != null && Object2.GsCodeMaritalStateId != null )
			{
				if (Object1.GsCodeMaritalStateId != Object2.GsCodeMaritalStateId)
					equal = false;
			}
			else if (Object1.GsCodeMaritalStateId == null ^ Object2.GsCodeMaritalStateId == null )
			{
				equal = false;
			}
			if ( Object1.GsCodeEducationLevelId != null && Object2.GsCodeEducationLevelId != null )
			{
				if (Object1.GsCodeEducationLevelId != Object2.GsCodeEducationLevelId)
					equal = false;
			}
			else if (Object1.GsCodeEducationLevelId == null ^ Object2.GsCodeEducationLevelId == null )
			{
				equal = false;
			}
			if ( Object1.CompanyName != null && Object2.CompanyName != null )
			{
				if (Object1.CompanyName != Object2.CompanyName)
					equal = false;
			}
			else if (Object1.CompanyName == null ^ Object2.CompanyName == null )
			{
				equal = false;
			}
			if ( Object1.GsCountryNodeId != null && Object2.GsCountryNodeId != null )
			{
				if (Object1.GsCountryNodeId != Object2.GsCountryNodeId)
					equal = false;
			}
			else if (Object1.GsCountryNodeId == null ^ Object2.GsCountryNodeId == null )
			{
				equal = false;
			}
			if ( Object1.FullNameAr != null && Object2.FullNameAr != null )
			{
				if (Object1.FullNameAr != Object2.FullNameAr)
					equal = false;
			}
			else if (Object1.FullNameAr == null ^ Object2.FullNameAr == null )
			{
				equal = false;
			}
			if ( Object1.Cpr != null && Object2.Cpr != null )
			{
				if (Object1.Cpr != Object2.Cpr)
					equal = false;
			}
			else if (Object1.Cpr == null ^ Object2.Cpr == null )
			{
				equal = false;
			}
			if ( Object1.PassporNo != null && Object2.PassporNo != null )
			{
				if (Object1.PassporNo != Object2.PassporNo)
					equal = false;
			}
			else if (Object1.PassporNo == null ^ Object2.PassporNo == null )
			{
				equal = false;
			}
			if ( Object1.PassporExpireDate != null && Object2.PassporExpireDate != null )
			{
				if (Object1.PassporExpireDate != Object2.PassporExpireDate)
					equal = false;
			}
			else if (Object1.PassporExpireDate == null ^ Object2.PassporExpireDate == null )
			{
				equal = false;
			}
			if ( Object1.ResidentExpireDate != null && Object2.ResidentExpireDate != null )
			{
				if (Object1.ResidentExpireDate != Object2.ResidentExpireDate)
					equal = false;
			}
			else if (Object1.ResidentExpireDate == null ^ Object2.ResidentExpireDate == null )
			{
				equal = false;
			}
			if ( Object1.ResidentId != null && Object2.ResidentId != null )
			{
				if (Object1.ResidentId != Object2.ResidentId)
					equal = false;
			}
			else if (Object1.ResidentId == null ^ Object2.ResidentId == null )
			{
				equal = false;
			}
			if ( Object1.Username != null && Object2.Username != null )
			{
				if (Object1.Username != Object2.Username)
					equal = false;
			}
			else if (Object1.Username == null ^ Object2.Username == null )
			{
				equal = false;
			}
			if ( Object1.PasswordSalt != null && Object2.PasswordSalt != null )
			{
				if (Object1.PasswordSalt != Object2.PasswordSalt)
					equal = false;
			}
			else if (Object1.PasswordSalt == null ^ Object2.PasswordSalt == null )
			{
				equal = false;
			}
			if ( Object1.PasswordHash != null && Object2.PasswordHash != null )
			{
				if (Object1.PasswordHash != Object2.PasswordHash)
					equal = false;
			}
			else if (Object1.PasswordHash == null ^ Object2.PasswordHash == null )
			{
				equal = false;
			}
			if ( Object1.SecurityQs != null && Object2.SecurityQs != null )
			{
				if (Object1.SecurityQs != Object2.SecurityQs)
					equal = false;
			}
			else if (Object1.SecurityQs == null ^ Object2.SecurityQs == null )
			{
				equal = false;
			}
			if ( Object1.SecurityQsAnsSalt != null && Object2.SecurityQsAnsSalt != null )
			{
				if (Object1.SecurityQsAnsSalt != Object2.SecurityQsAnsSalt)
					equal = false;
			}
			else if (Object1.SecurityQsAnsSalt == null ^ Object2.SecurityQsAnsSalt == null )
			{
				equal = false;
			}
			if ( Object1.SecurityQsAnsHash != null && Object2.SecurityQsAnsHash != null )
			{
				if (Object1.SecurityQsAnsHash != Object2.SecurityQsAnsHash)
					equal = false;
			}
			else if (Object1.SecurityQsAnsHash == null ^ Object2.SecurityQsAnsHash == null )
			{
				equal = false;
			}
			if ( Object1.EmpFlg != null && Object2.EmpFlg != null )
			{
				if (Object1.EmpFlg != Object2.EmpFlg)
					equal = false;
			}
			else if (Object1.EmpFlg == null ^ Object2.EmpFlg == null )
			{
				equal = false;
			}
			if ( Object1.WorkAddress != null && Object2.WorkAddress != null )
			{
				if (Object1.WorkAddress != Object2.WorkAddress)
					equal = false;
			}
			else if (Object1.WorkAddress == null ^ Object2.WorkAddress == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdGuardBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdGuardComparer GetComparer()
        {
            return new EdGuardComparer();
        }
        */

        // Comparer delegates back to EdGuard
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdGuard rhs, EdGuardColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdGuardColumn.EdGuardId:
            		return this.EdGuardId.CompareTo(rhs.EdGuardId);
            		
            		                 
            	
            	
            	case EdGuardColumn.FullNameEn:
            		return this.FullNameEn.CompareTo(rhs.FullNameEn);
            		
            		                 
            	
            	
            	case EdGuardColumn.JobTitle:
            		return this.JobTitle.CompareTo(rhs.JobTitle);
            		
            		                 
            	
            	
            	case EdGuardColumn.PermAddr:
            		return this.PermAddr.CompareTo(rhs.PermAddr);
            		
            		                 
            	
            	
            	case EdGuardColumn.EMail:
            		return this.EMail.CompareTo(rhs.EMail);
            		
            		                 
            	
            	
            	case EdGuardColumn.PhoneNum:
            		return this.PhoneNum.CompareTo(rhs.PhoneNum);
            		
            		                 
            	
            	
            	case EdGuardColumn.MobileNum:
            		return this.MobileNum.CompareTo(rhs.MobileNum);
            		
            		                 
            	
            	
            	case EdGuardColumn.MonthIncome:
            		return this.MonthIncome.Value.CompareTo(rhs.MonthIncome.Value);
            		
            		                 
            	
            	
            	case EdGuardColumn.StaffFlg:
            		return this.StaffFlg.CompareTo(rhs.StaffFlg);
            		
            		                 
            	
            	
            	case EdGuardColumn.DiplomaticFlg:
            		return this.DiplomaticFlg.CompareTo(rhs.DiplomaticFlg);
            		
            		                 
            	
            	
            	case EdGuardColumn.SaStfMemberId:
            		return this.SaStfMemberId.Value.CompareTo(rhs.SaStfMemberId.Value);
            		
            		                 
            	
            	
            	case EdGuardColumn.BirthDate:
            		return this.BirthDate.Value.CompareTo(rhs.BirthDate.Value);
            		
            		                 
            	
            	
            	case EdGuardColumn.GsCodeMaritalStateId:
            		return this.GsCodeMaritalStateId.Value.CompareTo(rhs.GsCodeMaritalStateId.Value);
            		
            		                 
            	
            	
            	case EdGuardColumn.GsCodeEducationLevelId:
            		return this.GsCodeEducationLevelId.Value.CompareTo(rhs.GsCodeEducationLevelId.Value);
            		
            		                 
            	
            	
            	case EdGuardColumn.CompanyName:
            		return this.CompanyName.CompareTo(rhs.CompanyName);
            		
            		                 
            	
            	
            	case EdGuardColumn.GsCountryNodeId:
            		return this.GsCountryNodeId.Value.CompareTo(rhs.GsCountryNodeId.Value);
            		
            		                 
            	
            	
            	case EdGuardColumn.FullNameAr:
            		return this.FullNameAr.CompareTo(rhs.FullNameAr);
            		
            		                 
            	
            	
            	case EdGuardColumn.Cpr:
            		return this.Cpr.CompareTo(rhs.Cpr);
            		
            		                 
            	
            	
            	case EdGuardColumn.PassporNo:
            		return this.PassporNo.CompareTo(rhs.PassporNo);
            		
            		                 
            	
            	
            	case EdGuardColumn.PassporExpireDate:
            		return this.PassporExpireDate.Value.CompareTo(rhs.PassporExpireDate.Value);
            		
            		                 
            	
            	
            	case EdGuardColumn.ResidentExpireDate:
            		return this.ResidentExpireDate.Value.CompareTo(rhs.ResidentExpireDate.Value);
            		
            		                 
            	
            	
            	case EdGuardColumn.ResidentId:
            		return this.ResidentId.CompareTo(rhs.ResidentId);
            		
            		                 
            	
            	
            	case EdGuardColumn.Username:
            		return this.Username.CompareTo(rhs.Username);
            		
            		                 
            	
            	
            	case EdGuardColumn.PasswordSalt:
            		return this.PasswordSalt.CompareTo(rhs.PasswordSalt);
            		
            		                 
            	
            	
            	case EdGuardColumn.PasswordHash:
            		return this.PasswordHash.CompareTo(rhs.PasswordHash);
            		
            		                 
            	
            	
            	case EdGuardColumn.SecurityQs:
            		return this.SecurityQs.CompareTo(rhs.SecurityQs);
            		
            		                 
            	
            	
            	case EdGuardColumn.SecurityQsAnsSalt:
            		return this.SecurityQsAnsSalt.CompareTo(rhs.SecurityQsAnsSalt);
            		
            		                 
            	
            	
            	case EdGuardColumn.SecurityQsAnsHash:
            		return this.SecurityQsAnsHash.CompareTo(rhs.SecurityQsAnsHash);
            		
            		                 
            	
            	
            	case EdGuardColumn.EmpFlg:
            		return this.EmpFlg.Value.CompareTo(rhs.EmpFlg.Value);
            		
            		                 
            	
            	
            	case EdGuardColumn.WorkAddress:
            		return this.WorkAddress.CompareTo(rhs.WorkAddress);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdGuardKey> Members
		
		// member variable for the EntityId property
		private EdGuardKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdGuardKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdGuardKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdGuard")
					.Append("|").Append( this.EdGuardId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{31}{30}- EdGuardId: {0}{30}- FullNameEn: {1}{30}- JobTitle: {2}{30}- PermAddr: {3}{30}- EMail: {4}{30}- PhoneNum: {5}{30}- MobileNum: {6}{30}- MonthIncome: {7}{30}- StaffFlg: {8}{30}- DiplomaticFlg: {9}{30}- SaStfMemberId: {10}{30}- BirthDate: {11}{30}- GsCodeMaritalStateId: {12}{30}- GsCodeEducationLevelId: {13}{30}- CompanyName: {14}{30}- GsCountryNodeId: {15}{30}- FullNameAr: {16}{30}- Cpr: {17}{30}- PassporNo: {18}{30}- PassporExpireDate: {19}{30}- ResidentExpireDate: {20}{30}- ResidentId: {21}{30}- Username: {22}{30}- PasswordSalt: {23}{30}- PasswordHash: {24}{30}- SecurityQs: {25}{30}- SecurityQsAnsSalt: {26}{30}- SecurityQsAnsHash: {27}{30}- EmpFlg: {28}{30}- WorkAddress: {29}{30}{32}", 
				this.EdGuardId,
				(this.FullNameEn == null) ? string.Empty : this.FullNameEn.ToString(),
				(this.JobTitle == null) ? string.Empty : this.JobTitle.ToString(),
				(this.PermAddr == null) ? string.Empty : this.PermAddr.ToString(),
				(this.EMail == null) ? string.Empty : this.EMail.ToString(),
				(this.PhoneNum == null) ? string.Empty : this.PhoneNum.ToString(),
				(this.MobileNum == null) ? string.Empty : this.MobileNum.ToString(),
				(this.MonthIncome == null) ? string.Empty : this.MonthIncome.ToString(),
				this.StaffFlg,
				this.DiplomaticFlg,
				(this.SaStfMemberId == null) ? string.Empty : this.SaStfMemberId.ToString(),
				(this.BirthDate == null) ? string.Empty : this.BirthDate.ToString(),
				(this.GsCodeMaritalStateId == null) ? string.Empty : this.GsCodeMaritalStateId.ToString(),
				(this.GsCodeEducationLevelId == null) ? string.Empty : this.GsCodeEducationLevelId.ToString(),
				(this.CompanyName == null) ? string.Empty : this.CompanyName.ToString(),
				(this.GsCountryNodeId == null) ? string.Empty : this.GsCountryNodeId.ToString(),
				(this.FullNameAr == null) ? string.Empty : this.FullNameAr.ToString(),
				(this.Cpr == null) ? string.Empty : this.Cpr.ToString(),
				(this.PassporNo == null) ? string.Empty : this.PassporNo.ToString(),
				(this.PassporExpireDate == null) ? string.Empty : this.PassporExpireDate.ToString(),
				(this.ResidentExpireDate == null) ? string.Empty : this.ResidentExpireDate.ToString(),
				(this.ResidentId == null) ? string.Empty : this.ResidentId.ToString(),
				(this.Username == null) ? string.Empty : this.Username.ToString(),
				(this.PasswordSalt == null) ? string.Empty : this.PasswordSalt.ToString(),
				(this.PasswordHash == null) ? string.Empty : this.PasswordHash.ToString(),
				(this.SecurityQs == null) ? string.Empty : this.SecurityQs.ToString(),
				(this.SecurityQsAnsSalt == null) ? string.Empty : this.SecurityQsAnsSalt.ToString(),
				(this.SecurityQsAnsHash == null) ? string.Empty : this.SecurityQsAnsHash.ToString(),
				(this.EmpFlg == null) ? string.Empty : this.EmpFlg.ToString(),
				(this.WorkAddress == null) ? string.Empty : this.WorkAddress.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_GUARD' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdGuardEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_GUARD_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_GUARD"</remarks>
		public System.Decimal EdGuardId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdGuardId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// FULL_NAME_EN : 
		/// </summary>
		public System.String		  FullNameEn = null;
		
		/// <summary>
		/// JOB_TITLE : 
		/// </summary>
		public System.String		  JobTitle = null;
		
		/// <summary>
		/// PERM_ADDR : 
		/// </summary>
		public System.String		  PermAddr = null;
		
		/// <summary>
		/// E_MAIL : 
		/// </summary>
		public System.String		  EMail = null;
		
		/// <summary>
		/// PHONE_NUM : 
		/// </summary>
		public System.String		  PhoneNum = null;
		
		/// <summary>
		/// MOBILE_NUM : 
		/// </summary>
		public System.String		  MobileNum = null;
		
		/// <summary>
		/// MONTH_INCOME : 
		/// </summary>
		public System.Decimal?		  MonthIncome = null;
		
		/// <summary>
		/// STAFF_FLG : 
		/// </summary>
		public System.Decimal		  StaffFlg = 0.0m;
		
		/// <summary>
		/// DIPLOMATIC_FLG : 
		/// </summary>
		public System.Decimal		  DiplomaticFlg = 0.0m;
		
		/// <summary>
		/// SA_STF_MEMBER_ID : 
		/// </summary>
		public System.Decimal?		  SaStfMemberId = null;
		
		/// <summary>
		/// BIRTH_DATE : 
		/// </summary>
		public System.DateTime?		  BirthDate = null;
		
		/// <summary>
		/// GS_CODE_MARITAL_STATE_ID : 
		/// </summary>
		public System.Decimal?		  GsCodeMaritalStateId = null;
		
		/// <summary>
		/// GS_CODE_EDUCATION_LEVEL_ID : 
		/// </summary>
		public System.Decimal?		  GsCodeEducationLevelId = null;
		
		/// <summary>
		/// COMPANY_NAME : 
		/// </summary>
		public System.String		  CompanyName = null;
		
		/// <summary>
		/// GS_COUNTRY_NODE_ID : 
		/// </summary>
		public System.Decimal?		  GsCountryNodeId = null;
		
		/// <summary>
		/// FULL_NAME_AR : 
		/// </summary>
		public System.String		  FullNameAr = null;
		
		/// <summary>
		/// CPR : 
		/// </summary>
		public System.String		  Cpr = null;
		
		/// <summary>
		/// PASSPOR_NO : 
		/// </summary>
		public System.String		  PassporNo = null;
		
		/// <summary>
		/// PASSPOR_EXPIRE_DATE : 
		/// </summary>
		public System.DateTime?		  PassporExpireDate = null;
		
		/// <summary>
		/// RESIDENT_EXPIRE_DATE : 
		/// </summary>
		public System.DateTime?		  ResidentExpireDate = null;
		
		/// <summary>
		/// RESIDENT_ID : 
		/// </summary>
		public System.String		  ResidentId = null;
		
		/// <summary>
		/// USERNAME : 
		/// </summary>
		public System.String		  Username = null;
		
		/// <summary>
		/// PASSWORD_SALT : 
		/// </summary>
		public System.String		  PasswordSalt = null;
		
		/// <summary>
		/// PASSWORD_HASH : 
		/// </summary>
		public System.String		  PasswordHash = null;
		
		/// <summary>
		/// SECURITY_QS : 
		/// </summary>
		public System.String		  SecurityQs = null;
		
		/// <summary>
		/// SECURITY_QS_ANS_SALT : 
		/// </summary>
		public System.String		  SecurityQsAnsSalt = null;
		
		/// <summary>
		/// SECURITY_QS_ANS_HASH : 
		/// </summary>
		public System.String		  SecurityQsAnsHash = null;
		
		/// <summary>
		/// EMP_FLG : 
		/// </summary>
		public System.Decimal?		  EmpFlg = null;
		
		/// <summary>
		/// WORK_ADDRESS : عنوان العمل
		/// </summary>
		public System.String		  WorkAddress = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private GsCdeMaritalStatus _gsCodeMaritalStateIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCdeMaritalStatus"/>.
		/// </summary>
		/// <value>The source GsCdeMaritalStatus for GsCodeMaritalStateId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCdeMaritalStatus GsCodeMaritalStateIdSource
      	{
            get { return this._gsCodeMaritalStateIdSource; }
            set { this._gsCodeMaritalStateIdSource = value; }
      	}
		private GsCountryNode _gsCountryNodeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCountryNode"/>.
		/// </summary>
		/// <value>The source GsCountryNode for GsCountryNodeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCountryNode GsCountryNodeIdSource
      	{
            get { return this._gsCountryNodeIdSource; }
            set { this._gsCountryNodeIdSource = value; }
      	}
		private GsCodeEducationLevel _gsCodeEducationLevelIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeEducationLevel"/>.
		/// </summary>
		/// <value>The source GsCodeEducationLevel for GsCodeEducationLevelId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeEducationLevel GsCodeEducationLevelIdSource
      	{
            get { return this._gsCodeEducationLevelIdSource; }
            set { this._gsCodeEducationLevelIdSource = value; }
      	}
		private SaStfMember _saStfMemberIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return this._saStfMemberIdSource; }
            set { this._saStfMemberIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EdStudGuardCollection
		
		private TList<EdStudGuard> _edStudGuardEdGuardId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudGuardEdGuardId
		/// </summary>
		
		public TList<EdStudGuard> EdStudGuardCollection
		{
			get
			{
				if (_edStudGuardEdGuardId == null)
				{
				_edStudGuardEdGuardId = new TList<EdStudGuard>();
				}
	
				return _edStudGuardEdGuardId;
			}
			set { _edStudGuardEdGuardId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdGuardEntityData _tmp = new EdGuardEntityData();
						
			_tmp.EdGuardId = this.EdGuardId;
			_tmp.OriginalEdGuardId = this.OriginalEdGuardId;
			
			_tmp.FullNameEn = this.FullNameEn;
			_tmp.JobTitle = this.JobTitle;
			_tmp.PermAddr = this.PermAddr;
			_tmp.EMail = this.EMail;
			_tmp.PhoneNum = this.PhoneNum;
			_tmp.MobileNum = this.MobileNum;
			_tmp.MonthIncome = this.MonthIncome;
			_tmp.StaffFlg = this.StaffFlg;
			_tmp.DiplomaticFlg = this.DiplomaticFlg;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.BirthDate = this.BirthDate;
			_tmp.GsCodeMaritalStateId = this.GsCodeMaritalStateId;
			_tmp.GsCodeEducationLevelId = this.GsCodeEducationLevelId;
			_tmp.CompanyName = this.CompanyName;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.FullNameAr = this.FullNameAr;
			_tmp.Cpr = this.Cpr;
			_tmp.PassporNo = this.PassporNo;
			_tmp.PassporExpireDate = this.PassporExpireDate;
			_tmp.ResidentExpireDate = this.ResidentExpireDate;
			_tmp.ResidentId = this.ResidentId;
			_tmp.Username = this.Username;
			_tmp.PasswordSalt = this.PasswordSalt;
			_tmp.PasswordHash = this.PasswordHash;
			_tmp.SecurityQs = this.SecurityQs;
			_tmp.SecurityQsAnsSalt = this.SecurityQsAnsSalt;
			_tmp.SecurityQsAnsHash = this.SecurityQsAnsHash;
			_tmp.EmpFlg = this.EmpFlg;
			_tmp.WorkAddress = this.WorkAddress;
			
			#region Source Parent Composite Entities
			if (this.GsCodeMaritalStateIdSource != null)
				_tmp.GsCodeMaritalStateIdSource = MakeCopyOf(this.GsCodeMaritalStateIdSource) as GsCdeMaritalStatus;
			if (this.GsCountryNodeIdSource != null)
				_tmp.GsCountryNodeIdSource = MakeCopyOf(this.GsCountryNodeIdSource) as GsCountryNode;
			if (this.GsCodeEducationLevelIdSource != null)
				_tmp.GsCodeEducationLevelIdSource = MakeCopyOf(this.GsCodeEducationLevelIdSource) as GsCodeEducationLevel;
			if (this.SaStfMemberIdSource != null)
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource) as SaStfMember;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._edStudGuardEdGuardId != null)
				_tmp.EdStudGuardCollection = (TList<EdStudGuard>) MakeCopyOf(this.EdStudGuardCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdGuardEntityData _tmp = new EdGuardEntityData();
						
			_tmp.EdGuardId = this.EdGuardId;
			_tmp.OriginalEdGuardId = this.OriginalEdGuardId;
			
			_tmp.FullNameEn = this.FullNameEn;
			_tmp.JobTitle = this.JobTitle;
			_tmp.PermAddr = this.PermAddr;
			_tmp.EMail = this.EMail;
			_tmp.PhoneNum = this.PhoneNum;
			_tmp.MobileNum = this.MobileNum;
			_tmp.MonthIncome = this.MonthIncome;
			_tmp.StaffFlg = this.StaffFlg;
			_tmp.DiplomaticFlg = this.DiplomaticFlg;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.BirthDate = this.BirthDate;
			_tmp.GsCodeMaritalStateId = this.GsCodeMaritalStateId;
			_tmp.GsCodeEducationLevelId = this.GsCodeEducationLevelId;
			_tmp.CompanyName = this.CompanyName;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.FullNameAr = this.FullNameAr;
			_tmp.Cpr = this.Cpr;
			_tmp.PassporNo = this.PassporNo;
			_tmp.PassporExpireDate = this.PassporExpireDate;
			_tmp.ResidentExpireDate = this.ResidentExpireDate;
			_tmp.ResidentId = this.ResidentId;
			_tmp.Username = this.Username;
			_tmp.PasswordSalt = this.PasswordSalt;
			_tmp.PasswordHash = this.PasswordHash;
			_tmp.SecurityQs = this.SecurityQs;
			_tmp.SecurityQsAnsSalt = this.SecurityQsAnsSalt;
			_tmp.SecurityQsAnsHash = this.SecurityQsAnsHash;
			_tmp.EmpFlg = this.EmpFlg;
			_tmp.WorkAddress = this.WorkAddress;
			
			#region Source Parent Composite Entities
			if (this.GsCodeMaritalStateIdSource != null && existingCopies.Contains(this.GsCodeMaritalStateIdSource))
				_tmp.GsCodeMaritalStateIdSource = existingCopies[this.GsCodeMaritalStateIdSource] as GsCdeMaritalStatus;
			else
				_tmp.GsCodeMaritalStateIdSource = MakeCopyOf(this.GsCodeMaritalStateIdSource, existingCopies) as GsCdeMaritalStatus;
			if (this.GsCountryNodeIdSource != null && existingCopies.Contains(this.GsCountryNodeIdSource))
				_tmp.GsCountryNodeIdSource = existingCopies[this.GsCountryNodeIdSource] as GsCountryNode;
			else
				_tmp.GsCountryNodeIdSource = MakeCopyOf(this.GsCountryNodeIdSource, existingCopies) as GsCountryNode;
			if (this.GsCodeEducationLevelIdSource != null && existingCopies.Contains(this.GsCodeEducationLevelIdSource))
				_tmp.GsCodeEducationLevelIdSource = existingCopies[this.GsCodeEducationLevelIdSource] as GsCodeEducationLevel;
			else
				_tmp.GsCodeEducationLevelIdSource = MakeCopyOf(this.GsCodeEducationLevelIdSource, existingCopies) as GsCodeEducationLevel;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				_tmp.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EdStudGuardCollection = (TList<EdStudGuard>) MakeCopyOf(this.EdStudGuardCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdGuardColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdGuardColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdGuardColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdGuardColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdGuardColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdGuardColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdGuardEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdGuardEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdGuardColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdGuardColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdGuardEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdGuardEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdGuardEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdGuard"/> object.
	/// </remarks>
	public class EdGuardEventArgs : System.EventArgs
	{
		private EdGuardColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdGuardEventArgs class.
		///</summary>
		public EdGuardEventArgs(EdGuardColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdGuardEventArgs class.
		///</summary>
		public EdGuardEventArgs(EdGuardColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdGuardColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdGuardColumn" />
		public EdGuardColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdGuard related events.
	///</summary>
	public delegate void EdGuardEventHandler(object sender, EdGuardEventArgs e);
	
	#region EdGuardComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdGuardComparer : System.Collections.Generic.IComparer<EdGuard>
	{
		EdGuardColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdGuardComparer"/> class.
        /// </summary>
		public EdGuardComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdGuardComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdGuardComparer(EdGuardColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdGuard"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdGuard"/> to compare.</param>
        /// <param name="b">The second <c>EdGuard</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdGuard a, EdGuard b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdGuard entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdGuard a, EdGuard b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdGuardColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdGuardKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdGuard"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdGuardKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdGuardKey class.
		/// </summary>
		public EdGuardKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdGuardKey class.
		/// </summary>
		public EdGuardKey(EdGuardBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdGuardId = entity.EdGuardId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdGuardKey class.
		/// </summary>
		public EdGuardKey(System.Decimal _edGuardId)
		{
			#region Init Properties

			this.EdGuardId = _edGuardId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdGuardBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdGuardBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdGuardId property
		private System.Decimal _edGuardId;
		
		/// <summary>
		/// Gets or sets the EdGuardId property.
		/// </summary>
		public System.Decimal EdGuardId
		{
			get { return _edGuardId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdGuardId = value;
				
				_edGuardId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdGuardId = ( values["EdGuardId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdGuardId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdGuardId", EdGuardId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdGuardId: {0}{1}",
								EdGuardId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdGuardColumn Enum
	
	/// <summary>
	/// Enumerate the EdGuard columns.
	/// </summary>
	[Serializable]
	public enum EdGuardColumn : int
	{
		/// <summary>
		/// EdGuardId : 
		/// </summary>
		[EnumTextValue("ED_GUARD_ID")]
		[ColumnEnum("ED_GUARD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdGuardId = 1,
		/// <summary>
		/// FullNameEn : 
		/// </summary>
		[EnumTextValue("FULL_NAME_EN")]
		[ColumnEnum("FULL_NAME_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 64)]
		FullNameEn = 2,
		/// <summary>
		/// JobTitle : 
		/// </summary>
		[EnumTextValue("JOB_TITLE")]
		[ColumnEnum("JOB_TITLE", typeof(System.String), System.Data.DbType.String, false, false, true, 64)]
		JobTitle = 3,
		/// <summary>
		/// PermAddr : 
		/// </summary>
		[EnumTextValue("PERM_ADDR")]
		[ColumnEnum("PERM_ADDR", typeof(System.String), System.Data.DbType.String, false, false, true, 90)]
		PermAddr = 4,
		/// <summary>
		/// EMail : 
		/// </summary>
		[EnumTextValue("E_MAIL")]
		[ColumnEnum("E_MAIL", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		EMail = 5,
		/// <summary>
		/// PhoneNum : 
		/// </summary>
		[EnumTextValue("PHONE_NUM")]
		[ColumnEnum("PHONE_NUM", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		PhoneNum = 6,
		/// <summary>
		/// MobileNum : 
		/// </summary>
		[EnumTextValue("MOBILE_NUM")]
		[ColumnEnum("MOBILE_NUM", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		MobileNum = 7,
		/// <summary>
		/// MonthIncome : 
		/// </summary>
		[EnumTextValue("MONTH_INCOME")]
		[ColumnEnum("MONTH_INCOME", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MonthIncome = 8,
		/// <summary>
		/// StaffFlg : 
		/// </summary>
		[EnumTextValue("STAFF_FLG")]
		[ColumnEnum("STAFF_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		StaffFlg = 9,
		/// <summary>
		/// DiplomaticFlg : 
		/// </summary>
		[EnumTextValue("DIPLOMATIC_FLG")]
		[ColumnEnum("DIPLOMATIC_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		DiplomaticFlg = 10,
		/// <summary>
		/// SaStfMemberId : 
		/// </summary>
		[EnumTextValue("SA_STF_MEMBER_ID")]
		[ColumnEnum("SA_STF_MEMBER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SaStfMemberId = 11,
		/// <summary>
		/// BirthDate : 
		/// </summary>
		[EnumTextValue("BIRTH_DATE")]
		[ColumnEnum("BIRTH_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		BirthDate = 12,
		/// <summary>
		/// GsCodeMaritalStateId : 
		/// </summary>
		[EnumTextValue("GS_CODE_MARITAL_STATE_ID")]
		[ColumnEnum("GS_CODE_MARITAL_STATE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCodeMaritalStateId = 13,
		/// <summary>
		/// GsCodeEducationLevelId : 
		/// </summary>
		[EnumTextValue("GS_CODE_EDUCATION_LEVEL_ID")]
		[ColumnEnum("GS_CODE_EDUCATION_LEVEL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCodeEducationLevelId = 14,
		/// <summary>
		/// CompanyName : 
		/// </summary>
		[EnumTextValue("COMPANY_NAME")]
		[ColumnEnum("COMPANY_NAME", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		CompanyName = 15,
		/// <summary>
		/// GsCountryNodeId : 
		/// </summary>
		[EnumTextValue("GS_COUNTRY_NODE_ID")]
		[ColumnEnum("GS_COUNTRY_NODE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCountryNodeId = 16,
		/// <summary>
		/// FullNameAr : 
		/// </summary>
		[EnumTextValue("FULL_NAME_AR")]
		[ColumnEnum("FULL_NAME_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 64)]
		FullNameAr = 17,
		/// <summary>
		/// Cpr : 
		/// </summary>
		[EnumTextValue("CPR")]
		[ColumnEnum("CPR", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		Cpr = 18,
		/// <summary>
		/// PassporNo : 
		/// </summary>
		[EnumTextValue("PASSPOR_NO")]
		[ColumnEnum("PASSPOR_NO", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		PassporNo = 19,
		/// <summary>
		/// PassporExpireDate : 
		/// </summary>
		[EnumTextValue("PASSPOR_EXPIRE_DATE")]
		[ColumnEnum("PASSPOR_EXPIRE_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		PassporExpireDate = 20,
		/// <summary>
		/// ResidentExpireDate : 
		/// </summary>
		[EnumTextValue("RESIDENT_EXPIRE_DATE")]
		[ColumnEnum("RESIDENT_EXPIRE_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		ResidentExpireDate = 21,
		/// <summary>
		/// ResidentId : 
		/// </summary>
		[EnumTextValue("RESIDENT_ID")]
		[ColumnEnum("RESIDENT_ID", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		ResidentId = 22,
		/// <summary>
		/// Username : 
		/// </summary>
		[EnumTextValue("USERNAME")]
		[ColumnEnum("USERNAME", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Username = 23,
		/// <summary>
		/// PasswordSalt : 
		/// </summary>
		[EnumTextValue("PASSWORD_SALT")]
		[ColumnEnum("PASSWORD_SALT", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		PasswordSalt = 24,
		/// <summary>
		/// PasswordHash : 
		/// </summary>
		[EnumTextValue("PASSWORD_HASH")]
		[ColumnEnum("PASSWORD_HASH", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		PasswordHash = 25,
		/// <summary>
		/// SecurityQs : 
		/// </summary>
		[EnumTextValue("SECURITY_QS")]
		[ColumnEnum("SECURITY_QS", typeof(System.String), System.Data.DbType.String, false, false, true, 350)]
		SecurityQs = 26,
		/// <summary>
		/// SecurityQsAnsSalt : 
		/// </summary>
		[EnumTextValue("SECURITY_QS_ANS_SALT")]
		[ColumnEnum("SECURITY_QS_ANS_SALT", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		SecurityQsAnsSalt = 27,
		/// <summary>
		/// SecurityQsAnsHash : 
		/// </summary>
		[EnumTextValue("SECURITY_QS_ANS_HASH")]
		[ColumnEnum("SECURITY_QS_ANS_HASH", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		SecurityQsAnsHash = 28,
		/// <summary>
		/// EmpFlg : 
		/// </summary>
		[EnumTextValue("EMP_FLG")]
		[ColumnEnum("EMP_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EmpFlg = 29,
		/// <summary>
		/// WorkAddress : عنوان العمل
		/// </summary>
		[EnumTextValue("WORK_ADDRESS")]
		[ColumnEnum("WORK_ADDRESS", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		WorkAddress = 30
	}//End enum

	#endregion EdGuardColumn Enum

} // end namespace
