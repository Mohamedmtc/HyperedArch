
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file CtrCdeMealItem.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'CTR_CDE_MEAL_ITEM' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class CtrCdeMealItemBase : EntityBase, ICtrCdeMealItem, IEntityId<CtrCdeMealItemKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CtrCdeMealItemEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CtrCdeMealItemEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CtrCdeMealItemEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<CtrCdeMealItem> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CtrCdeMealItemEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CtrCdeMealItemEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CtrCdeMealItemBase"/> instance.
		///</summary>
		public CtrCdeMealItemBase()
		{
			this.entityData = new CtrCdeMealItemEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CtrCdeMealItemBase"/> instance.
		///</summary>
		///<param name="_ctrCdeMealItemId">عناصر الطعام</param>
		///<param name="_ctrCdeItemTypeId">نوع العنصر</param>
		///<param name="_mealItemAr">فراخ-بيض-خيار</param>
		///<param name="_mealItemEn">موز-عنب-تفاح</param>
		///<param name="_itemCal"></param>
		///<param name="_ctrCdeUnitId">اكواد وحدات الصرف</param>
		///<param name="_ctrCdeSrvMthdId">انواع تقديم</param>
		public CtrCdeMealItemBase(System.Decimal _ctrCdeMealItemId, System.Decimal _ctrCdeItemTypeId, 
			System.String _mealItemAr, System.String _mealItemEn, System.Decimal? _itemCal, 
			System.Decimal? _ctrCdeUnitId, System.Decimal? _ctrCdeSrvMthdId)
		{
			this.entityData = new CtrCdeMealItemEntityData();
			this.backupData = null;

			this.CtrCdeMealItemId = _ctrCdeMealItemId;
			this.CtrCdeItemTypeId = _ctrCdeItemTypeId;
			this.MealItemAr = _mealItemAr;
			this.MealItemEn = _mealItemEn;
			this.ItemCal = _itemCal;
			this.CtrCdeUnitId = _ctrCdeUnitId;
			this.CtrCdeSrvMthdId = _ctrCdeSrvMthdId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="CtrCdeMealItem"/> instance.
		///</summary>
		///<param name="_ctrCdeMealItemId">عناصر الطعام</param>
		///<param name="_ctrCdeItemTypeId">نوع العنصر</param>
		///<param name="_mealItemAr">فراخ-بيض-خيار</param>
		///<param name="_mealItemEn">موز-عنب-تفاح</param>
		///<param name="_itemCal"></param>
		///<param name="_ctrCdeUnitId">اكواد وحدات الصرف</param>
		///<param name="_ctrCdeSrvMthdId">انواع تقديم</param>
		public static CtrCdeMealItem CreateCtrCdeMealItem(System.Decimal _ctrCdeMealItemId, System.Decimal _ctrCdeItemTypeId, 
			System.String _mealItemAr, System.String _mealItemEn, System.Decimal? _itemCal, 
			System.Decimal? _ctrCdeUnitId, System.Decimal? _ctrCdeSrvMthdId)
		{
			CtrCdeMealItem newCtrCdeMealItem = new CtrCdeMealItem();
			newCtrCdeMealItem.CtrCdeMealItemId = _ctrCdeMealItemId;
			newCtrCdeMealItem.CtrCdeItemTypeId = _ctrCdeItemTypeId;
			newCtrCdeMealItem.MealItemAr = _mealItemAr;
			newCtrCdeMealItem.MealItemEn = _mealItemEn;
			newCtrCdeMealItem.ItemCal = _itemCal;
			newCtrCdeMealItem.CtrCdeUnitId = _ctrCdeUnitId;
			newCtrCdeMealItem.CtrCdeSrvMthdId = _ctrCdeSrvMthdId;
			return newCtrCdeMealItem;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the CtrCdeMealItemId property. 
		///		عناصر الطعام
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"عناصر الطعام"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal CtrCdeMealItemId
		{
			get
			{
				return this.entityData.CtrCdeMealItemId; 
			}
			
			set
			{
				if (this.entityData.CtrCdeMealItemId == value)
					return;
					
				OnColumnChanging(CtrCdeMealItemColumn.CtrCdeMealItemId, this.entityData.CtrCdeMealItemId);
				this.entityData.CtrCdeMealItemId = value;
				this.EntityId.CtrCdeMealItemId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CtrCdeMealItemColumn.CtrCdeMealItemId, this.entityData.CtrCdeMealItemId);
				OnPropertyChanged("CtrCdeMealItemId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the CTR_CDE_MEAL_ITEM_ID property.
		///		عناصر الطعام
		/// </summary>
		/// <remarks>This is the original value of the CTR_CDE_MEAL_ITEM_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalCtrCdeMealItemId
		{
			get { return this.entityData.OriginalCtrCdeMealItemId; }
			set { this.entityData.OriginalCtrCdeMealItemId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the CtrCdeItemTypeId property. 
		///		نوع العنصر
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"نوع العنصر"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal CtrCdeItemTypeId
		{
			get
			{
				return this.entityData.CtrCdeItemTypeId; 
			}
			
			set
			{
				if (this.entityData.CtrCdeItemTypeId == value)
					return;
					
				OnColumnChanging(CtrCdeMealItemColumn.CtrCdeItemTypeId, this.entityData.CtrCdeItemTypeId);
				this.entityData.CtrCdeItemTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CtrCdeMealItemColumn.CtrCdeItemTypeId, this.entityData.CtrCdeItemTypeId);
				OnPropertyChanged("CtrCdeItemTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MealItemAr property. 
		///		فراخ-بيض-خيار
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"فراخ-بيض-خيار"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String MealItemAr
		{
			get
			{
				return this.entityData.MealItemAr; 
			}
			
			set
			{
				if (this.entityData.MealItemAr == value)
					return;
					
				OnColumnChanging(CtrCdeMealItemColumn.MealItemAr, this.entityData.MealItemAr);
				this.entityData.MealItemAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CtrCdeMealItemColumn.MealItemAr, this.entityData.MealItemAr);
				OnPropertyChanged("MealItemAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MealItemEn property. 
		///		موز-عنب-تفاح
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"موز-عنب-تفاح"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String MealItemEn
		{
			get
			{
				return this.entityData.MealItemEn; 
			}
			
			set
			{
				if (this.entityData.MealItemEn == value)
					return;
					
				OnColumnChanging(CtrCdeMealItemColumn.MealItemEn, this.entityData.MealItemEn);
				this.entityData.MealItemEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CtrCdeMealItemColumn.MealItemEn, this.entityData.MealItemEn);
				OnPropertyChanged("MealItemEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ItemCal property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsItemCalNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ItemCal
		{
			get
			{
				return this.entityData.ItemCal; 
			}
			
			set
			{
				if (this.entityData.ItemCal == value)
					return;
					
				OnColumnChanging(CtrCdeMealItemColumn.ItemCal, this.entityData.ItemCal);
				this.entityData.ItemCal = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CtrCdeMealItemColumn.ItemCal, this.entityData.ItemCal);
				OnPropertyChanged("ItemCal");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CtrCdeUnitId property. 
		///		اكواد وحدات الصرف
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCtrCdeUnitIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"اكواد وحدات الصرف"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CtrCdeUnitId
		{
			get
			{
				return this.entityData.CtrCdeUnitId; 
			}
			
			set
			{
				if (this.entityData.CtrCdeUnitId == value)
					return;
					
				OnColumnChanging(CtrCdeMealItemColumn.CtrCdeUnitId, this.entityData.CtrCdeUnitId);
				this.entityData.CtrCdeUnitId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CtrCdeMealItemColumn.CtrCdeUnitId, this.entityData.CtrCdeUnitId);
				OnPropertyChanged("CtrCdeUnitId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CtrCdeSrvMthdId property. 
		///		انواع تقديم
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCtrCdeSrvMthdIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"انواع تقديم"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CtrCdeSrvMthdId
		{
			get
			{
				return this.entityData.CtrCdeSrvMthdId; 
			}
			
			set
			{
				if (this.entityData.CtrCdeSrvMthdId == value)
					return;
					
				OnColumnChanging(CtrCdeMealItemColumn.CtrCdeSrvMthdId, this.entityData.CtrCdeSrvMthdId);
				this.entityData.CtrCdeSrvMthdId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CtrCdeMealItemColumn.CtrCdeSrvMthdId, this.entityData.CtrCdeSrvMthdId);
				OnPropertyChanged("CtrCdeSrvMthdId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="CtrCdeItemType"/>.
		/// </summary>
		/// <value>The source CtrCdeItemType for CtrCdeItemTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual CtrCdeItemType CtrCdeItemTypeIdSource
      	{
            get { return entityData.CtrCdeItemTypeIdSource; }
            set { entityData.CtrCdeItemTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="CtrCdeSrvMthd"/>.
		/// </summary>
		/// <value>The source CtrCdeSrvMthd for CtrCdeSrvMthdId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual CtrCdeSrvMthd CtrCdeSrvMthdIdSource
      	{
            get { return entityData.CtrCdeSrvMthdIdSource; }
            set { entityData.CtrCdeSrvMthdIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="CtrCdeUnit"/>.
		/// </summary>
		/// <value>The source CtrCdeUnit for CtrCdeUnitId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual CtrCdeUnit CtrCdeUnitIdSource
      	{
            get { return entityData.CtrCdeUnitIdSource; }
            set { entityData.CtrCdeUnitIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of CtrMenuActItem objects
		///	which are related to this object through the relation FK_CTR_MENU_ACT_ITEM_CTR_CDE_MEAL_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CtrMenuActItem> CtrMenuActItemCollection
		{
			get { return entityData.CtrMenuActItemCollection; }
			set { entityData.CtrMenuActItemCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CtrMealItem objects
		///	which are related to this object through the relation FK_CTR_MEAL_ITEM_CTR_CDE_MEAL_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CtrMealItem> CtrMealItemCollection
		{
			get { return entityData.CtrMealItemCollection; }
			set { entityData.CtrMealItemCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CtrMenuItem objects
		///	which are related to this object through the relation FK_CTR_MENU_ITEM_CTR_CDE_MEAL_ITEM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CtrMenuItem> CtrMenuItemCollection
		{
			get { return entityData.CtrMenuItemCollection; }
			set { entityData.CtrMenuItemCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MealItemAr", "Meal Item Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MealItemAr", "Meal Item Ar", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MealItemEn", "Meal Item En"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MealItemEn", "Meal Item En", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "CTR_CDE_MEAL_ITEM"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"CTR_CDE_MEAL_ITEM_ID", "CTR_CDE_ITEM_TYPE_ID", "MEAL_ITEM_AR", "MEAL_ITEM_EN", "ITEM_CAL", "CTR_CDE_UNIT_ID", "CTR_CDE_SRV_MTHD_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CtrCdeMealItemEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (CtrCdeMealItem) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<CtrCdeMealItem>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as CtrCdeMealItem);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed CtrCdeMealItem Entity 
		///</summary>
		protected virtual CtrCdeMealItem Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			CtrCdeMealItem copy = new CtrCdeMealItem();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.CtrCdeMealItemId = this.CtrCdeMealItemId;
					copy.OriginalCtrCdeMealItemId = this.OriginalCtrCdeMealItemId;
				copy.CtrCdeItemTypeId = this.CtrCdeItemTypeId;
				copy.MealItemAr = this.MealItemAr;
				copy.MealItemEn = this.MealItemEn;
				copy.ItemCal = this.ItemCal;
				copy.CtrCdeUnitId = this.CtrCdeUnitId;
				copy.CtrCdeSrvMthdId = this.CtrCdeSrvMthdId;
			
			if (this.CtrCdeItemTypeIdSource != null && existingCopies.Contains(this.CtrCdeItemTypeIdSource))
				copy.CtrCdeItemTypeIdSource = existingCopies[this.CtrCdeItemTypeIdSource] as CtrCdeItemType;
			else
				copy.CtrCdeItemTypeIdSource = MakeCopyOf(this.CtrCdeItemTypeIdSource, existingCopies) as CtrCdeItemType;
			if (this.CtrCdeSrvMthdIdSource != null && existingCopies.Contains(this.CtrCdeSrvMthdIdSource))
				copy.CtrCdeSrvMthdIdSource = existingCopies[this.CtrCdeSrvMthdIdSource] as CtrCdeSrvMthd;
			else
				copy.CtrCdeSrvMthdIdSource = MakeCopyOf(this.CtrCdeSrvMthdIdSource, existingCopies) as CtrCdeSrvMthd;
			if (this.CtrCdeUnitIdSource != null && existingCopies.Contains(this.CtrCdeUnitIdSource))
				copy.CtrCdeUnitIdSource = existingCopies[this.CtrCdeUnitIdSource] as CtrCdeUnit;
			else
				copy.CtrCdeUnitIdSource = MakeCopyOf(this.CtrCdeUnitIdSource, existingCopies) as CtrCdeUnit;
		
			//deep copy nested objects
			copy.CtrMenuActItemCollection = (TList<CtrMenuActItem>) MakeCopyOf(this.CtrMenuActItemCollection, existingCopies); 
			copy.CtrMealItemCollection = (TList<CtrMealItem>) MakeCopyOf(this.CtrMealItemCollection, existingCopies); 
			copy.CtrMenuItemCollection = (TList<CtrMenuItem>) MakeCopyOf(this.CtrMenuItemCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed CtrCdeMealItem Entity 
		///</summary>
		public virtual CtrCdeMealItem Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed CtrCdeMealItem Entity which is a deep copy of the current entity.
		///</summary>
		public virtual CtrCdeMealItem DeepCopy()
		{
			return EntityHelper.Clone<CtrCdeMealItem>(this as CtrCdeMealItem);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CtrCdeMealItemEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new CtrCdeMealItemEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CtrCdeMealItemEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CtrCdeMealItemColumn column)
		{
			switch(column)
			{
					case CtrCdeMealItemColumn.CtrCdeMealItemId:
					return entityData.CtrCdeMealItemId != _originalData.CtrCdeMealItemId;
					case CtrCdeMealItemColumn.CtrCdeItemTypeId:
					return entityData.CtrCdeItemTypeId != _originalData.CtrCdeItemTypeId;
					case CtrCdeMealItemColumn.MealItemAr:
					return entityData.MealItemAr != _originalData.MealItemAr;
					case CtrCdeMealItemColumn.MealItemEn:
					return entityData.MealItemEn != _originalData.MealItemEn;
					case CtrCdeMealItemColumn.ItemCal:
					return entityData.ItemCal != _originalData.ItemCal;
					case CtrCdeMealItemColumn.CtrCdeUnitId:
					return entityData.CtrCdeUnitId != _originalData.CtrCdeUnitId;
					case CtrCdeMealItemColumn.CtrCdeSrvMthdId:
					return entityData.CtrCdeSrvMthdId != _originalData.CtrCdeSrvMthdId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< CtrCdeMealItemColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.CtrCdeMealItemId != _originalData.CtrCdeMealItemId;
			result = result || entityData.CtrCdeItemTypeId != _originalData.CtrCdeItemTypeId;
			result = result || entityData.MealItemAr != _originalData.MealItemAr;
			result = result || entityData.MealItemEn != _originalData.MealItemEn;
			result = result || entityData.ItemCal != _originalData.ItemCal;
			result = result || entityData.CtrCdeUnitId != _originalData.CtrCdeUnitId;
			result = result || entityData.CtrCdeSrvMthdId != _originalData.CtrCdeSrvMthdId;
			return result;
		}	
		
		///<summary>
		///  Returns a CtrCdeMealItem Entity with the original data.
		///</summary>
		public CtrCdeMealItem GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateCtrCdeMealItem(
				_originalData.CtrCdeMealItemId,
				_originalData.CtrCdeItemTypeId,
				_originalData.MealItemAr,
				_originalData.MealItemEn,
				_originalData.ItemCal,
				_originalData.CtrCdeUnitId,
				_originalData.CtrCdeSrvMthdId
				);
				
			return (CtrCdeMealItem)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CtrCdeMealItemBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is CtrCdeMealItemBase)
				return ValueEquals(this, (CtrCdeMealItemBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CtrCdeMealItemBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.CtrCdeMealItemId.GetHashCode() ^ 
					this.CtrCdeItemTypeId.GetHashCode() ^ 
					this.MealItemAr.GetHashCode() ^ 
					this.MealItemEn.GetHashCode() ^ 
					((this.ItemCal == null) ? string.Empty : this.ItemCal.ToString()).GetHashCode() ^ 
					((this.CtrCdeUnitId == null) ? string.Empty : this.CtrCdeUnitId.ToString()).GetHashCode() ^ 
					((this.CtrCdeSrvMthdId == null) ? string.Empty : this.CtrCdeSrvMthdId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CtrCdeMealItemBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CtrCdeMealItemBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="CtrCdeMealItemBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="CtrCdeMealItemBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CtrCdeMealItemBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(CtrCdeMealItemBase Object1, CtrCdeMealItemBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.CtrCdeMealItemId != Object2.CtrCdeMealItemId)
				equal = false;
			if (Object1.CtrCdeItemTypeId != Object2.CtrCdeItemTypeId)
				equal = false;
			if (Object1.MealItemAr != Object2.MealItemAr)
				equal = false;
			if (Object1.MealItemEn != Object2.MealItemEn)
				equal = false;
			if ( Object1.ItemCal != null && Object2.ItemCal != null )
			{
				if (Object1.ItemCal != Object2.ItemCal)
					equal = false;
			}
			else if (Object1.ItemCal == null ^ Object2.ItemCal == null )
			{
				equal = false;
			}
			if ( Object1.CtrCdeUnitId != null && Object2.CtrCdeUnitId != null )
			{
				if (Object1.CtrCdeUnitId != Object2.CtrCdeUnitId)
					equal = false;
			}
			else if (Object1.CtrCdeUnitId == null ^ Object2.CtrCdeUnitId == null )
			{
				equal = false;
			}
			if ( Object1.CtrCdeSrvMthdId != null && Object2.CtrCdeSrvMthdId != null )
			{
				if (Object1.CtrCdeSrvMthdId != Object2.CtrCdeSrvMthdId)
					equal = false;
			}
			else if (Object1.CtrCdeSrvMthdId == null ^ Object2.CtrCdeSrvMthdId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CtrCdeMealItemBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CtrCdeMealItemComparer GetComparer()
        {
            return new CtrCdeMealItemComparer();
        }
        */

        // Comparer delegates back to CtrCdeMealItem
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(CtrCdeMealItem rhs, CtrCdeMealItemColumn which)
        {
            switch (which)
            {
            	
            	
            	case CtrCdeMealItemColumn.CtrCdeMealItemId:
            		return this.CtrCdeMealItemId.CompareTo(rhs.CtrCdeMealItemId);
            		
            		                 
            	
            	
            	case CtrCdeMealItemColumn.CtrCdeItemTypeId:
            		return this.CtrCdeItemTypeId.CompareTo(rhs.CtrCdeItemTypeId);
            		
            		                 
            	
            	
            	case CtrCdeMealItemColumn.MealItemAr:
            		return this.MealItemAr.CompareTo(rhs.MealItemAr);
            		
            		                 
            	
            	
            	case CtrCdeMealItemColumn.MealItemEn:
            		return this.MealItemEn.CompareTo(rhs.MealItemEn);
            		
            		                 
            	
            	
            	case CtrCdeMealItemColumn.ItemCal:
            		return this.ItemCal.Value.CompareTo(rhs.ItemCal.Value);
            		
            		                 
            	
            	
            	case CtrCdeMealItemColumn.CtrCdeUnitId:
            		return this.CtrCdeUnitId.Value.CompareTo(rhs.CtrCdeUnitId.Value);
            		
            		                 
            	
            	
            	case CtrCdeMealItemColumn.CtrCdeSrvMthdId:
            		return this.CtrCdeSrvMthdId.Value.CompareTo(rhs.CtrCdeSrvMthdId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CtrCdeMealItemKey> Members
		
		// member variable for the EntityId property
		private CtrCdeMealItemKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual CtrCdeMealItemKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CtrCdeMealItemKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("CtrCdeMealItem")
					.Append("|").Append( this.CtrCdeMealItemId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{8}{7}- CtrCdeMealItemId: {0}{7}- CtrCdeItemTypeId: {1}{7}- MealItemAr: {2}{7}- MealItemEn: {3}{7}- ItemCal: {4}{7}- CtrCdeUnitId: {5}{7}- CtrCdeSrvMthdId: {6}{7}{9}", 
				this.CtrCdeMealItemId,
				this.CtrCdeItemTypeId,
				this.MealItemAr,
				this.MealItemEn,
				(this.ItemCal == null) ? string.Empty : this.ItemCal.ToString(),
				(this.CtrCdeUnitId == null) ? string.Empty : this.CtrCdeUnitId.ToString(),
				(this.CtrCdeSrvMthdId == null) ? string.Empty : this.CtrCdeSrvMthdId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'CTR_CDE_MEAL_ITEM' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CtrCdeMealItemEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// CTR_CDE_MEAL_ITEM_ID : عناصر الطعام
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "CTR_CDE_MEAL_ITEM"</remarks>
		public System.Decimal CtrCdeMealItemId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalCtrCdeMealItemId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// CTR_CDE_ITEM_TYPE_ID : نوع العنصر
		/// </summary>
		public System.Decimal		  CtrCdeItemTypeId = 0.0m;
		
		/// <summary>
		/// MEAL_ITEM_AR : فراخ-بيض-خيار
		/// </summary>
		public System.String		  MealItemAr = string.Empty;
		
		/// <summary>
		/// MEAL_ITEM_EN : موز-عنب-تفاح
		/// </summary>
		public System.String		  MealItemEn = string.Empty;
		
		/// <summary>
		/// ITEM_CAL : 
		/// </summary>
		public System.Decimal?		  ItemCal = null;
		
		/// <summary>
		/// CTR_CDE_UNIT_ID : اكواد وحدات الصرف
		/// </summary>
		public System.Decimal?		  CtrCdeUnitId = null;
		
		/// <summary>
		/// CTR_CDE_SRV_MTHD_ID : انواع تقديم
		/// </summary>
		public System.Decimal?		  CtrCdeSrvMthdId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private CtrCdeItemType _ctrCdeItemTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="CtrCdeItemType"/>.
		/// </summary>
		/// <value>The source CtrCdeItemType for CtrCdeItemTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual CtrCdeItemType CtrCdeItemTypeIdSource
      	{
            get { return this._ctrCdeItemTypeIdSource; }
            set { this._ctrCdeItemTypeIdSource = value; }
      	}
		private CtrCdeSrvMthd _ctrCdeSrvMthdIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="CtrCdeSrvMthd"/>.
		/// </summary>
		/// <value>The source CtrCdeSrvMthd for CtrCdeSrvMthdId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual CtrCdeSrvMthd CtrCdeSrvMthdIdSource
      	{
            get { return this._ctrCdeSrvMthdIdSource; }
            set { this._ctrCdeSrvMthdIdSource = value; }
      	}
		private CtrCdeUnit _ctrCdeUnitIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="CtrCdeUnit"/>.
		/// </summary>
		/// <value>The source CtrCdeUnit for CtrCdeUnitId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual CtrCdeUnit CtrCdeUnitIdSource
      	{
            get { return this._ctrCdeUnitIdSource; }
            set { this._ctrCdeUnitIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region CtrMenuActItemCollection
		
		private TList<CtrMenuActItem> _ctrMenuActItemCtrCdeMealItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _ctrMenuActItemCtrCdeMealItemId
		/// </summary>
		
		public TList<CtrMenuActItem> CtrMenuActItemCollection
		{
			get
			{
				if (_ctrMenuActItemCtrCdeMealItemId == null)
				{
				_ctrMenuActItemCtrCdeMealItemId = new TList<CtrMenuActItem>();
				}
	
				return _ctrMenuActItemCtrCdeMealItemId;
			}
			set { _ctrMenuActItemCtrCdeMealItemId = value; }
		}
		
		#endregion

		#region CtrMealItemCollection
		
		private TList<CtrMealItem> _ctrMealItemCtrCdeMealItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _ctrMealItemCtrCdeMealItemId
		/// </summary>
		
		public TList<CtrMealItem> CtrMealItemCollection
		{
			get
			{
				if (_ctrMealItemCtrCdeMealItemId == null)
				{
				_ctrMealItemCtrCdeMealItemId = new TList<CtrMealItem>();
				}
	
				return _ctrMealItemCtrCdeMealItemId;
			}
			set { _ctrMealItemCtrCdeMealItemId = value; }
		}
		
		#endregion

		#region CtrMenuItemCollection
		
		private TList<CtrMenuItem> _ctrMenuItemCtrCdeMealItemId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _ctrMenuItemCtrCdeMealItemId
		/// </summary>
		
		public TList<CtrMenuItem> CtrMenuItemCollection
		{
			get
			{
				if (_ctrMenuItemCtrCdeMealItemId == null)
				{
				_ctrMenuItemCtrCdeMealItemId = new TList<CtrMenuItem>();
				}
	
				return _ctrMenuItemCtrCdeMealItemId;
			}
			set { _ctrMenuItemCtrCdeMealItemId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CtrCdeMealItemEntityData _tmp = new CtrCdeMealItemEntityData();
						
			_tmp.CtrCdeMealItemId = this.CtrCdeMealItemId;
			_tmp.OriginalCtrCdeMealItemId = this.OriginalCtrCdeMealItemId;
			
			_tmp.CtrCdeItemTypeId = this.CtrCdeItemTypeId;
			_tmp.MealItemAr = this.MealItemAr;
			_tmp.MealItemEn = this.MealItemEn;
			_tmp.ItemCal = this.ItemCal;
			_tmp.CtrCdeUnitId = this.CtrCdeUnitId;
			_tmp.CtrCdeSrvMthdId = this.CtrCdeSrvMthdId;
			
			#region Source Parent Composite Entities
			if (this.CtrCdeItemTypeIdSource != null)
				_tmp.CtrCdeItemTypeIdSource = MakeCopyOf(this.CtrCdeItemTypeIdSource) as CtrCdeItemType;
			if (this.CtrCdeSrvMthdIdSource != null)
				_tmp.CtrCdeSrvMthdIdSource = MakeCopyOf(this.CtrCdeSrvMthdIdSource) as CtrCdeSrvMthd;
			if (this.CtrCdeUnitIdSource != null)
				_tmp.CtrCdeUnitIdSource = MakeCopyOf(this.CtrCdeUnitIdSource) as CtrCdeUnit;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._ctrMenuActItemCtrCdeMealItemId != null)
				_tmp.CtrMenuActItemCollection = (TList<CtrMenuActItem>) MakeCopyOf(this.CtrMenuActItemCollection); 
			if (this._ctrMealItemCtrCdeMealItemId != null)
				_tmp.CtrMealItemCollection = (TList<CtrMealItem>) MakeCopyOf(this.CtrMealItemCollection); 
			if (this._ctrMenuItemCtrCdeMealItemId != null)
				_tmp.CtrMenuItemCollection = (TList<CtrMenuItem>) MakeCopyOf(this.CtrMenuItemCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			CtrCdeMealItemEntityData _tmp = new CtrCdeMealItemEntityData();
						
			_tmp.CtrCdeMealItemId = this.CtrCdeMealItemId;
			_tmp.OriginalCtrCdeMealItemId = this.OriginalCtrCdeMealItemId;
			
			_tmp.CtrCdeItemTypeId = this.CtrCdeItemTypeId;
			_tmp.MealItemAr = this.MealItemAr;
			_tmp.MealItemEn = this.MealItemEn;
			_tmp.ItemCal = this.ItemCal;
			_tmp.CtrCdeUnitId = this.CtrCdeUnitId;
			_tmp.CtrCdeSrvMthdId = this.CtrCdeSrvMthdId;
			
			#region Source Parent Composite Entities
			if (this.CtrCdeItemTypeIdSource != null && existingCopies.Contains(this.CtrCdeItemTypeIdSource))
				_tmp.CtrCdeItemTypeIdSource = existingCopies[this.CtrCdeItemTypeIdSource] as CtrCdeItemType;
			else
				_tmp.CtrCdeItemTypeIdSource = MakeCopyOf(this.CtrCdeItemTypeIdSource, existingCopies) as CtrCdeItemType;
			if (this.CtrCdeSrvMthdIdSource != null && existingCopies.Contains(this.CtrCdeSrvMthdIdSource))
				_tmp.CtrCdeSrvMthdIdSource = existingCopies[this.CtrCdeSrvMthdIdSource] as CtrCdeSrvMthd;
			else
				_tmp.CtrCdeSrvMthdIdSource = MakeCopyOf(this.CtrCdeSrvMthdIdSource, existingCopies) as CtrCdeSrvMthd;
			if (this.CtrCdeUnitIdSource != null && existingCopies.Contains(this.CtrCdeUnitIdSource))
				_tmp.CtrCdeUnitIdSource = existingCopies[this.CtrCdeUnitIdSource] as CtrCdeUnit;
			else
				_tmp.CtrCdeUnitIdSource = MakeCopyOf(this.CtrCdeUnitIdSource, existingCopies) as CtrCdeUnit;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.CtrMenuActItemCollection = (TList<CtrMenuActItem>) MakeCopyOf(this.CtrMenuActItemCollection, existingCopies); 
			_tmp.CtrMealItemCollection = (TList<CtrMealItem>) MakeCopyOf(this.CtrMealItemCollection, existingCopies); 
			_tmp.CtrMenuItemCollection = (TList<CtrMenuItem>) MakeCopyOf(this.CtrMenuItemCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CtrCdeMealItemColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(CtrCdeMealItemColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CtrCdeMealItemColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(CtrCdeMealItemColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CtrCdeMealItemColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(CtrCdeMealItemColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				CtrCdeMealItemEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CtrCdeMealItemEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CtrCdeMealItemColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(CtrCdeMealItemColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CtrCdeMealItemEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CtrCdeMealItemEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CtrCdeMealItemEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="CtrCdeMealItem"/> object.
	/// </remarks>
	public class CtrCdeMealItemEventArgs : System.EventArgs
	{
		private CtrCdeMealItemColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CtrCdeMealItemEventArgs class.
		///</summary>
		public CtrCdeMealItemEventArgs(CtrCdeMealItemColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CtrCdeMealItemEventArgs class.
		///</summary>
		public CtrCdeMealItemEventArgs(CtrCdeMealItemColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CtrCdeMealItemColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CtrCdeMealItemColumn" />
		public CtrCdeMealItemColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all CtrCdeMealItem related events.
	///</summary>
	public delegate void CtrCdeMealItemEventHandler(object sender, CtrCdeMealItemEventArgs e);
	
	#region CtrCdeMealItemComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CtrCdeMealItemComparer : System.Collections.Generic.IComparer<CtrCdeMealItem>
	{
		CtrCdeMealItemColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CtrCdeMealItemComparer"/> class.
        /// </summary>
		public CtrCdeMealItemComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CtrCdeMealItemComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CtrCdeMealItemComparer(CtrCdeMealItemColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="CtrCdeMealItem"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="CtrCdeMealItem"/> to compare.</param>
        /// <param name="b">The second <c>CtrCdeMealItem</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(CtrCdeMealItem a, CtrCdeMealItem b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(CtrCdeMealItem entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(CtrCdeMealItem a, CtrCdeMealItem b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CtrCdeMealItemColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CtrCdeMealItemKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="CtrCdeMealItem"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CtrCdeMealItemKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CtrCdeMealItemKey class.
		/// </summary>
		public CtrCdeMealItemKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CtrCdeMealItemKey class.
		/// </summary>
		public CtrCdeMealItemKey(CtrCdeMealItemBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.CtrCdeMealItemId = entity.CtrCdeMealItemId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CtrCdeMealItemKey class.
		/// </summary>
		public CtrCdeMealItemKey(System.Decimal _ctrCdeMealItemId)
		{
			#region Init Properties

			this.CtrCdeMealItemId = _ctrCdeMealItemId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CtrCdeMealItemBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CtrCdeMealItemBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the CtrCdeMealItemId property
		private System.Decimal _ctrCdeMealItemId;
		
		/// <summary>
		/// Gets or sets the CtrCdeMealItemId property.
		/// </summary>
		public System.Decimal CtrCdeMealItemId
		{
			get { return _ctrCdeMealItemId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.CtrCdeMealItemId = value;
				
				_ctrCdeMealItemId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				CtrCdeMealItemId = ( values["CtrCdeMealItemId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["CtrCdeMealItemId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("CtrCdeMealItemId", CtrCdeMealItemId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("CtrCdeMealItemId: {0}{1}",
								CtrCdeMealItemId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CtrCdeMealItemColumn Enum
	
	/// <summary>
	/// Enumerate the CtrCdeMealItem columns.
	/// </summary>
	[Serializable]
	public enum CtrCdeMealItemColumn : int
	{
		/// <summary>
		/// CtrCdeMealItemId : عناصر الطعام
		/// </summary>
		[EnumTextValue("CTR_CDE_MEAL_ITEM_ID")]
		[ColumnEnum("CTR_CDE_MEAL_ITEM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		CtrCdeMealItemId = 1,
		/// <summary>
		/// CtrCdeItemTypeId : نوع العنصر
		/// </summary>
		[EnumTextValue("CTR_CDE_ITEM_TYPE_ID")]
		[ColumnEnum("CTR_CDE_ITEM_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		CtrCdeItemTypeId = 2,
		/// <summary>
		/// MealItemAr : فراخ-بيض-خيار
		/// </summary>
		[EnumTextValue("MEAL_ITEM_AR")]
		[ColumnEnum("MEAL_ITEM_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		MealItemAr = 3,
		/// <summary>
		/// MealItemEn : موز-عنب-تفاح
		/// </summary>
		[EnumTextValue("MEAL_ITEM_EN")]
		[ColumnEnum("MEAL_ITEM_EN", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		MealItemEn = 4,
		/// <summary>
		/// ItemCal : 
		/// </summary>
		[EnumTextValue("ITEM_CAL")]
		[ColumnEnum("ITEM_CAL", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ItemCal = 5,
		/// <summary>
		/// CtrCdeUnitId : اكواد وحدات الصرف
		/// </summary>
		[EnumTextValue("CTR_CDE_UNIT_ID")]
		[ColumnEnum("CTR_CDE_UNIT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CtrCdeUnitId = 6,
		/// <summary>
		/// CtrCdeSrvMthdId : انواع تقديم
		/// </summary>
		[EnumTextValue("CTR_CDE_SRV_MTHD_ID")]
		[ColumnEnum("CTR_CDE_SRV_MTHD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CtrCdeSrvMthdId = 7
	}//End enum

	#endregion CtrCdeMealItemColumn Enum

} // end namespace
