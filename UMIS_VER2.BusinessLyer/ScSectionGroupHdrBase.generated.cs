
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ScSectionGroupHdr.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SC_SECTION_GROUP_HDR' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ScSectionGroupHdrBase : EntityBase, IScSectionGroupHdr, IEntityId<ScSectionGroupHdrKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ScSectionGroupHdrEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ScSectionGroupHdrEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ScSectionGroupHdrEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ScSectionGroupHdr> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ScSectionGroupHdrEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ScSectionGroupHdrEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ScSectionGroupHdrBase"/> instance.
		///</summary>
		public ScSectionGroupHdrBase()
		{
			this.entityData = new ScSectionGroupHdrEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ScSectionGroupHdrBase"/> instance.
		///</summary>
		///<param name="_scSectionGroupHdrId"></param>
		///<param name="_groupCode"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_edCodeLevelId"></param>
		///<param name="_grpTypeFlg"></param>
		///<param name="_loadFlg"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_entMainId"></param>
		///<param name="_gsCodeLanguageId"></param>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_isActive"></param>
		///<param name="_grpDescAr"></param>
		///<param name="_grpDescEn"></param>
		public ScSectionGroupHdrBase(System.Decimal _scSectionGroupHdrId, System.String _groupCode, 
			System.Decimal? _edAcadYearId, System.Decimal _edCodeSemesterId, System.Decimal? _edCodeLevelId, 
			System.Decimal _grpTypeFlg, System.Decimal _loadFlg, System.Decimal? _asFacultyInfoId, 
			System.Decimal? _entMainId, System.Decimal? _gsCodeLanguageId, System.Decimal? _asCodeDegreeClassId, 
			System.Decimal? _edCourseId, System.Boolean? _isActive, System.String _grpDescAr, 
			System.String _grpDescEn)
		{
			this.entityData = new ScSectionGroupHdrEntityData();
			this.backupData = null;

			this.ScSectionGroupHdrId = _scSectionGroupHdrId;
			this.GroupCode = _groupCode;
			this.EdAcadYearId = _edAcadYearId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.EdCodeLevelId = _edCodeLevelId;
			this.GrpTypeFlg = _grpTypeFlg;
			this.LoadFlg = _loadFlg;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.EntMainId = _entMainId;
			this.GsCodeLanguageId = _gsCodeLanguageId;
			this.AsCodeDegreeClassId = _asCodeDegreeClassId;
			this.EdCourseId = _edCourseId;
			this.IsActive = _isActive;
			this.GrpDescAr = _grpDescAr;
			this.GrpDescEn = _grpDescEn;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ScSectionGroupHdr"/> instance.
		///</summary>
		///<param name="_scSectionGroupHdrId"></param>
		///<param name="_groupCode"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_edCodeLevelId"></param>
		///<param name="_grpTypeFlg"></param>
		///<param name="_loadFlg"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_entMainId"></param>
		///<param name="_gsCodeLanguageId"></param>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_isActive"></param>
		///<param name="_grpDescAr"></param>
		///<param name="_grpDescEn"></param>
		public static ScSectionGroupHdr CreateScSectionGroupHdr(System.Decimal _scSectionGroupHdrId, System.String _groupCode, 
			System.Decimal? _edAcadYearId, System.Decimal _edCodeSemesterId, System.Decimal? _edCodeLevelId, 
			System.Decimal _grpTypeFlg, System.Decimal _loadFlg, System.Decimal? _asFacultyInfoId, 
			System.Decimal? _entMainId, System.Decimal? _gsCodeLanguageId, System.Decimal? _asCodeDegreeClassId, 
			System.Decimal? _edCourseId, System.Boolean? _isActive, System.String _grpDescAr, 
			System.String _grpDescEn)
		{
			ScSectionGroupHdr newScSectionGroupHdr = new ScSectionGroupHdr();
			newScSectionGroupHdr.ScSectionGroupHdrId = _scSectionGroupHdrId;
			newScSectionGroupHdr.GroupCode = _groupCode;
			newScSectionGroupHdr.EdAcadYearId = _edAcadYearId;
			newScSectionGroupHdr.EdCodeSemesterId = _edCodeSemesterId;
			newScSectionGroupHdr.EdCodeLevelId = _edCodeLevelId;
			newScSectionGroupHdr.GrpTypeFlg = _grpTypeFlg;
			newScSectionGroupHdr.LoadFlg = _loadFlg;
			newScSectionGroupHdr.AsFacultyInfoId = _asFacultyInfoId;
			newScSectionGroupHdr.EntMainId = _entMainId;
			newScSectionGroupHdr.GsCodeLanguageId = _gsCodeLanguageId;
			newScSectionGroupHdr.AsCodeDegreeClassId = _asCodeDegreeClassId;
			newScSectionGroupHdr.EdCourseId = _edCourseId;
			newScSectionGroupHdr.IsActive = _isActive;
			newScSectionGroupHdr.GrpDescAr = _grpDescAr;
			newScSectionGroupHdr.GrpDescEn = _grpDescEn;
			return newScSectionGroupHdr;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the ScSectionGroupHdrId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal ScSectionGroupHdrId
		{
			get
			{
				return this.entityData.ScSectionGroupHdrId; 
			}
			
			set
			{
				if (this.entityData.ScSectionGroupHdrId == value)
					return;
					
				OnColumnChanging(ScSectionGroupHdrColumn.ScSectionGroupHdrId, this.entityData.ScSectionGroupHdrId);
				this.entityData.ScSectionGroupHdrId = value;
				this.EntityId.ScSectionGroupHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSectionGroupHdrColumn.ScSectionGroupHdrId, this.entityData.ScSectionGroupHdrId);
				OnPropertyChanged("ScSectionGroupHdrId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SC_SECTION_GROUP_HDR_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SC_SECTION_GROUP_HDR_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalScSectionGroupHdrId
		{
			get { return this.entityData.OriginalScSectionGroupHdrId; }
			set { this.entityData.OriginalScSectionGroupHdrId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the GroupCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String GroupCode
		{
			get
			{
				return this.entityData.GroupCode; 
			}
			
			set
			{
				if (this.entityData.GroupCode == value)
					return;
					
				OnColumnChanging(ScSectionGroupHdrColumn.GroupCode, this.entityData.GroupCode);
				this.entityData.GroupCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSectionGroupHdrColumn.GroupCode, this.entityData.GroupCode);
				OnPropertyChanged("GroupCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdAcadYearIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(ScSectionGroupHdrColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSectionGroupHdrColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(ScSectionGroupHdrColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSectionGroupHdrColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeLevelId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeLevelIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeLevelId
		{
			get
			{
				return this.entityData.EdCodeLevelId; 
			}
			
			set
			{
				if (this.entityData.EdCodeLevelId == value)
					return;
					
				OnColumnChanging(ScSectionGroupHdrColumn.EdCodeLevelId, this.entityData.EdCodeLevelId);
				this.entityData.EdCodeLevelId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSectionGroupHdrColumn.EdCodeLevelId, this.entityData.EdCodeLevelId);
				OnPropertyChanged("EdCodeLevelId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GrpTypeFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GrpTypeFlg
		{
			get
			{
				return this.entityData.GrpTypeFlg; 
			}
			
			set
			{
				if (this.entityData.GrpTypeFlg == value)
					return;
					
				OnColumnChanging(ScSectionGroupHdrColumn.GrpTypeFlg, this.entityData.GrpTypeFlg);
				this.entityData.GrpTypeFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSectionGroupHdrColumn.GrpTypeFlg, this.entityData.GrpTypeFlg);
				OnPropertyChanged("GrpTypeFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LoadFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal LoadFlg
		{
			get
			{
				return this.entityData.LoadFlg; 
			}
			
			set
			{
				if (this.entityData.LoadFlg == value)
					return;
					
				OnColumnChanging(ScSectionGroupHdrColumn.LoadFlg, this.entityData.LoadFlg);
				this.entityData.LoadFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSectionGroupHdrColumn.LoadFlg, this.entityData.LoadFlg);
				OnPropertyChanged("LoadFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(ScSectionGroupHdrColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSectionGroupHdrColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntMainId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntMainIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntMainId
		{
			get
			{
				return this.entityData.EntMainId; 
			}
			
			set
			{
				if (this.entityData.EntMainId == value)
					return;
					
				OnColumnChanging(ScSectionGroupHdrColumn.EntMainId, this.entityData.EntMainId);
				this.entityData.EntMainId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSectionGroupHdrColumn.EntMainId, this.entityData.EntMainId);
				OnPropertyChanged("EntMainId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeLanguageId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCodeLanguageIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCodeLanguageId
		{
			get
			{
				return this.entityData.GsCodeLanguageId; 
			}
			
			set
			{
				if (this.entityData.GsCodeLanguageId == value)
					return;
					
				OnColumnChanging(ScSectionGroupHdrColumn.GsCodeLanguageId, this.entityData.GsCodeLanguageId);
				this.entityData.GsCodeLanguageId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSectionGroupHdrColumn.GsCodeLanguageId, this.entityData.GsCodeLanguageId);
				OnPropertyChanged("GsCodeLanguageId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeClassId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeClassIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeClassId
		{
			get
			{
				return this.entityData.AsCodeDegreeClassId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeClassId == value)
					return;
					
				OnColumnChanging(ScSectionGroupHdrColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				this.entityData.AsCodeDegreeClassId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSectionGroupHdrColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				OnPropertyChanged("AsCodeDegreeClassId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCourseIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCourseId
		{
			get
			{
				return this.entityData.EdCourseId; 
			}
			
			set
			{
				if (this.entityData.EdCourseId == value)
					return;
					
				OnColumnChanging(ScSectionGroupHdrColumn.EdCourseId, this.entityData.EdCourseId);
				this.entityData.EdCourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSectionGroupHdrColumn.EdCourseId, this.entityData.EdCourseId);
				OnPropertyChanged("EdCourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsActiveNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
				OnColumnChanging(ScSectionGroupHdrColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSectionGroupHdrColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GrpDescAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String GrpDescAr
		{
			get
			{
				return this.entityData.GrpDescAr; 
			}
			
			set
			{
				if (this.entityData.GrpDescAr == value)
					return;
					
				OnColumnChanging(ScSectionGroupHdrColumn.GrpDescAr, this.entityData.GrpDescAr);
				this.entityData.GrpDescAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSectionGroupHdrColumn.GrpDescAr, this.entityData.GrpDescAr);
				OnPropertyChanged("GrpDescAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GrpDescEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String GrpDescEn
		{
			get
			{
				return this.entityData.GrpDescEn; 
			}
			
			set
			{
				if (this.entityData.GrpDescEn == value)
					return;
					
				OnColumnChanging(ScSectionGroupHdrColumn.GrpDescEn, this.entityData.GrpDescEn);
				this.entityData.GrpDescEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScSectionGroupHdrColumn.GrpDescEn, this.entityData.GrpDescEn);
				OnPropertyChanged("GrpDescEn");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return entityData.AsCodeDegreeClassIdSource; }
            set { entityData.AsCodeDegreeClassIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeLevel EdCodeLevelIdSource
      	{
            get { return entityData.EdCodeLevelIdSource; }
            set { entityData.EdCodeLevelIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return entityData.EdCourseIdSource; }
            set { entityData.EdCourseIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return entityData.EntMainIdSource; }
            set { entityData.EntMainIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeLanguage"/>.
		/// </summary>
		/// <value>The source GsCodeLanguage for GsCodeLanguageId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeLanguage GsCodeLanguageIdSource
      	{
            get { return entityData.GsCodeLanguageIdSource; }
            set { entityData.GsCodeLanguageIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of ScSectionGroupDtl objects
		///	which are related to this object through the relation FK_ED_SECTION_GROUP_ED_SEC_GRP_HDR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScSectionGroupDtl> ScSectionGroupDtlCollection
		{
			get { return entityData.ScSectionGroupDtlCollection; }
			set { entityData.ScSectionGroupDtlCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudCourseReg objects
		///	which are related to this object through the relation FK_ED_STUD_COURSE_REG_SC_SECTION_GROUP_HDR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCourseReg> EdStudCourseRegCollection
		{
			get { return entityData.EdStudCourseRegCollection; }
			set { entityData.EdStudCourseRegCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudCourseRegPre objects
		///	which are related to this object through the relation FK_ED_STUD_COURSE_REG_PRE_SC_SECTION_GROUP_HDR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCourseRegPre> EdStudCourseRegPreCollection
		{
			get { return entityData.EdStudCourseRegPreCollection; }
			set { entityData.EdStudCourseRegPreCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("GroupCode", "Group Code"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GroupCode", "Group Code", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GrpDescAr", "Grp Desc Ar", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GrpDescEn", "Grp Desc En", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SC_SECTION_GROUP_HDR"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SC_SECTION_GROUP_HDR_ID", "GROUP_CODE", "ED_ACAD_YEAR_ID", "ED_CODE_SEMESTER_ID", "ED_CODE_LEVEL_ID", "GRP_TYPE_FLG", "LOAD_FLG", "AS_FACULTY_INFO_ID", "ENT_MAIN_ID", "GS_CODE_LANGUAGE_ID", "AS_CODE_DEGREE_CLASS_ID", "ED_COURSE_ID", "IS_ACTIVE", "GRP_DESC_AR", "GRP_DESC_EN"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ScSectionGroupHdrEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ScSectionGroupHdr) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ScSectionGroupHdr>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ScSectionGroupHdr);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ScSectionGroupHdr Entity 
		///</summary>
		protected virtual ScSectionGroupHdr Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ScSectionGroupHdr copy = new ScSectionGroupHdr();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.ScSectionGroupHdrId = this.ScSectionGroupHdrId;
					copy.OriginalScSectionGroupHdrId = this.OriginalScSectionGroupHdrId;
				copy.GroupCode = this.GroupCode;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.EdCodeLevelId = this.EdCodeLevelId;
				copy.GrpTypeFlg = this.GrpTypeFlg;
				copy.LoadFlg = this.LoadFlg;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.EntMainId = this.EntMainId;
				copy.GsCodeLanguageId = this.GsCodeLanguageId;
				copy.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
				copy.EdCourseId = this.EdCourseId;
				copy.IsActive = this.IsActive;
				copy.GrpDescAr = this.GrpDescAr;
				copy.GrpDescEn = this.GrpDescEn;
			
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				copy.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				copy.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdCodeLevelIdSource != null && existingCopies.Contains(this.EdCodeLevelIdSource))
				copy.EdCodeLevelIdSource = existingCopies[this.EdCodeLevelIdSource] as EdCodeLevel;
			else
				copy.EdCodeLevelIdSource = MakeCopyOf(this.EdCodeLevelIdSource, existingCopies) as EdCodeLevel;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				copy.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				copy.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				copy.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				copy.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.GsCodeLanguageIdSource != null && existingCopies.Contains(this.GsCodeLanguageIdSource))
				copy.GsCodeLanguageIdSource = existingCopies[this.GsCodeLanguageIdSource] as GsCodeLanguage;
			else
				copy.GsCodeLanguageIdSource = MakeCopyOf(this.GsCodeLanguageIdSource, existingCopies) as GsCodeLanguage;
		
			//deep copy nested objects
			copy.ScSectionGroupDtlCollection = (TList<ScSectionGroupDtl>) MakeCopyOf(this.ScSectionGroupDtlCollection, existingCopies); 
			copy.EdStudCourseRegCollection = (TList<EdStudCourseReg>) MakeCopyOf(this.EdStudCourseRegCollection, existingCopies); 
			copy.EdStudCourseRegPreCollection = (TList<EdStudCourseRegPre>) MakeCopyOf(this.EdStudCourseRegPreCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ScSectionGroupHdr Entity 
		///</summary>
		public virtual ScSectionGroupHdr Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ScSectionGroupHdr Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ScSectionGroupHdr DeepCopy()
		{
			return EntityHelper.Clone<ScSectionGroupHdr>(this as ScSectionGroupHdr);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ScSectionGroupHdrEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ScSectionGroupHdrEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ScSectionGroupHdrEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ScSectionGroupHdrColumn column)
		{
			switch(column)
			{
					case ScSectionGroupHdrColumn.ScSectionGroupHdrId:
					return entityData.ScSectionGroupHdrId != _originalData.ScSectionGroupHdrId;
					case ScSectionGroupHdrColumn.GroupCode:
					return entityData.GroupCode != _originalData.GroupCode;
					case ScSectionGroupHdrColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case ScSectionGroupHdrColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case ScSectionGroupHdrColumn.EdCodeLevelId:
					return entityData.EdCodeLevelId != _originalData.EdCodeLevelId;
					case ScSectionGroupHdrColumn.GrpTypeFlg:
					return entityData.GrpTypeFlg != _originalData.GrpTypeFlg;
					case ScSectionGroupHdrColumn.LoadFlg:
					return entityData.LoadFlg != _originalData.LoadFlg;
					case ScSectionGroupHdrColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case ScSectionGroupHdrColumn.EntMainId:
					return entityData.EntMainId != _originalData.EntMainId;
					case ScSectionGroupHdrColumn.GsCodeLanguageId:
					return entityData.GsCodeLanguageId != _originalData.GsCodeLanguageId;
					case ScSectionGroupHdrColumn.AsCodeDegreeClassId:
					return entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
					case ScSectionGroupHdrColumn.EdCourseId:
					return entityData.EdCourseId != _originalData.EdCourseId;
					case ScSectionGroupHdrColumn.IsActive:
					return entityData.IsActive != _originalData.IsActive;
					case ScSectionGroupHdrColumn.GrpDescAr:
					return entityData.GrpDescAr != _originalData.GrpDescAr;
					case ScSectionGroupHdrColumn.GrpDescEn:
					return entityData.GrpDescEn != _originalData.GrpDescEn;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ScSectionGroupHdrColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.ScSectionGroupHdrId != _originalData.ScSectionGroupHdrId;
			result = result || entityData.GroupCode != _originalData.GroupCode;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.EdCodeLevelId != _originalData.EdCodeLevelId;
			result = result || entityData.GrpTypeFlg != _originalData.GrpTypeFlg;
			result = result || entityData.LoadFlg != _originalData.LoadFlg;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.EntMainId != _originalData.EntMainId;
			result = result || entityData.GsCodeLanguageId != _originalData.GsCodeLanguageId;
			result = result || entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
			result = result || entityData.EdCourseId != _originalData.EdCourseId;
			result = result || entityData.IsActive != _originalData.IsActive;
			result = result || entityData.GrpDescAr != _originalData.GrpDescAr;
			result = result || entityData.GrpDescEn != _originalData.GrpDescEn;
			return result;
		}	
		
		///<summary>
		///  Returns a ScSectionGroupHdr Entity with the original data.
		///</summary>
		public ScSectionGroupHdr GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateScSectionGroupHdr(
				_originalData.ScSectionGroupHdrId,
				_originalData.GroupCode,
				_originalData.EdAcadYearId,
				_originalData.EdCodeSemesterId,
				_originalData.EdCodeLevelId,
				_originalData.GrpTypeFlg,
				_originalData.LoadFlg,
				_originalData.AsFacultyInfoId,
				_originalData.EntMainId,
				_originalData.GsCodeLanguageId,
				_originalData.AsCodeDegreeClassId,
				_originalData.EdCourseId,
				_originalData.IsActive,
				_originalData.GrpDescAr,
				_originalData.GrpDescEn
				);
				
			return (ScSectionGroupHdr)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ScSectionGroupHdrBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ScSectionGroupHdrBase)
				return ValueEquals(this, (ScSectionGroupHdrBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ScSectionGroupHdrBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.ScSectionGroupHdrId.GetHashCode() ^ 
					this.GroupCode.GetHashCode() ^ 
					((this.EdAcadYearId == null) ? string.Empty : this.EdAcadYearId.ToString()).GetHashCode() ^ 
					this.EdCodeSemesterId.GetHashCode() ^ 
					((this.EdCodeLevelId == null) ? string.Empty : this.EdCodeLevelId.ToString()).GetHashCode() ^ 
					this.GrpTypeFlg.GetHashCode() ^ 
					this.LoadFlg.GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					((this.EntMainId == null) ? string.Empty : this.EntMainId.ToString()).GetHashCode() ^ 
					((this.GsCodeLanguageId == null) ? string.Empty : this.GsCodeLanguageId.ToString()).GetHashCode() ^ 
					((this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString()).GetHashCode() ^ 
					((this.EdCourseId == null) ? string.Empty : this.EdCourseId.ToString()).GetHashCode() ^ 
					((this.IsActive == null) ? string.Empty : this.IsActive.ToString()).GetHashCode() ^ 
					((this.GrpDescAr == null) ? string.Empty : this.GrpDescAr.ToString()).GetHashCode() ^ 
					((this.GrpDescEn == null) ? string.Empty : this.GrpDescEn.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ScSectionGroupHdrBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ScSectionGroupHdrBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ScSectionGroupHdrBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ScSectionGroupHdrBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ScSectionGroupHdrBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ScSectionGroupHdrBase Object1, ScSectionGroupHdrBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ScSectionGroupHdrId != Object2.ScSectionGroupHdrId)
				equal = false;
			if (Object1.GroupCode != Object2.GroupCode)
				equal = false;
			if ( Object1.EdAcadYearId != null && Object2.EdAcadYearId != null )
			{
				if (Object1.EdAcadYearId != Object2.EdAcadYearId)
					equal = false;
			}
			else if (Object1.EdAcadYearId == null ^ Object2.EdAcadYearId == null )
			{
				equal = false;
			}
			if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
				equal = false;
			if ( Object1.EdCodeLevelId != null && Object2.EdCodeLevelId != null )
			{
				if (Object1.EdCodeLevelId != Object2.EdCodeLevelId)
					equal = false;
			}
			else if (Object1.EdCodeLevelId == null ^ Object2.EdCodeLevelId == null )
			{
				equal = false;
			}
			if (Object1.GrpTypeFlg != Object2.GrpTypeFlg)
				equal = false;
			if (Object1.LoadFlg != Object2.LoadFlg)
				equal = false;
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if ( Object1.EntMainId != null && Object2.EntMainId != null )
			{
				if (Object1.EntMainId != Object2.EntMainId)
					equal = false;
			}
			else if (Object1.EntMainId == null ^ Object2.EntMainId == null )
			{
				equal = false;
			}
			if ( Object1.GsCodeLanguageId != null && Object2.GsCodeLanguageId != null )
			{
				if (Object1.GsCodeLanguageId != Object2.GsCodeLanguageId)
					equal = false;
			}
			else if (Object1.GsCodeLanguageId == null ^ Object2.GsCodeLanguageId == null )
			{
				equal = false;
			}
			if ( Object1.AsCodeDegreeClassId != null && Object2.AsCodeDegreeClassId != null )
			{
				if (Object1.AsCodeDegreeClassId != Object2.AsCodeDegreeClassId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeClassId == null ^ Object2.AsCodeDegreeClassId == null )
			{
				equal = false;
			}
			if ( Object1.EdCourseId != null && Object2.EdCourseId != null )
			{
				if (Object1.EdCourseId != Object2.EdCourseId)
					equal = false;
			}
			else if (Object1.EdCourseId == null ^ Object2.EdCourseId == null )
			{
				equal = false;
			}
			if ( Object1.IsActive != null && Object2.IsActive != null )
			{
				if (Object1.IsActive != Object2.IsActive)
					equal = false;
			}
			else if (Object1.IsActive == null ^ Object2.IsActive == null )
			{
				equal = false;
			}
			if ( Object1.GrpDescAr != null && Object2.GrpDescAr != null )
			{
				if (Object1.GrpDescAr != Object2.GrpDescAr)
					equal = false;
			}
			else if (Object1.GrpDescAr == null ^ Object2.GrpDescAr == null )
			{
				equal = false;
			}
			if ( Object1.GrpDescEn != null && Object2.GrpDescEn != null )
			{
				if (Object1.GrpDescEn != Object2.GrpDescEn)
					equal = false;
			}
			else if (Object1.GrpDescEn == null ^ Object2.GrpDescEn == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ScSectionGroupHdrBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ScSectionGroupHdrComparer GetComparer()
        {
            return new ScSectionGroupHdrComparer();
        }
        */

        // Comparer delegates back to ScSectionGroupHdr
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ScSectionGroupHdr rhs, ScSectionGroupHdrColumn which)
        {
            switch (which)
            {
            	
            	
            	case ScSectionGroupHdrColumn.ScSectionGroupHdrId:
            		return this.ScSectionGroupHdrId.CompareTo(rhs.ScSectionGroupHdrId);
            		
            		                 
            	
            	
            	case ScSectionGroupHdrColumn.GroupCode:
            		return this.GroupCode.CompareTo(rhs.GroupCode);
            		
            		                 
            	
            	
            	case ScSectionGroupHdrColumn.EdAcadYearId:
            		return this.EdAcadYearId.Value.CompareTo(rhs.EdAcadYearId.Value);
            		
            		                 
            	
            	
            	case ScSectionGroupHdrColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.CompareTo(rhs.EdCodeSemesterId);
            		
            		                 
            	
            	
            	case ScSectionGroupHdrColumn.EdCodeLevelId:
            		return this.EdCodeLevelId.Value.CompareTo(rhs.EdCodeLevelId.Value);
            		
            		                 
            	
            	
            	case ScSectionGroupHdrColumn.GrpTypeFlg:
            		return this.GrpTypeFlg.CompareTo(rhs.GrpTypeFlg);
            		
            		                 
            	
            	
            	case ScSectionGroupHdrColumn.LoadFlg:
            		return this.LoadFlg.CompareTo(rhs.LoadFlg);
            		
            		                 
            	
            	
            	case ScSectionGroupHdrColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case ScSectionGroupHdrColumn.EntMainId:
            		return this.EntMainId.Value.CompareTo(rhs.EntMainId.Value);
            		
            		                 
            	
            	
            	case ScSectionGroupHdrColumn.GsCodeLanguageId:
            		return this.GsCodeLanguageId.Value.CompareTo(rhs.GsCodeLanguageId.Value);
            		
            		                 
            	
            	
            	case ScSectionGroupHdrColumn.AsCodeDegreeClassId:
            		return this.AsCodeDegreeClassId.Value.CompareTo(rhs.AsCodeDegreeClassId.Value);
            		
            		                 
            	
            	
            	case ScSectionGroupHdrColumn.EdCourseId:
            		return this.EdCourseId.Value.CompareTo(rhs.EdCourseId.Value);
            		
            		                 
            	
            	
            	case ScSectionGroupHdrColumn.IsActive:
            		return this.IsActive.Value.CompareTo(rhs.IsActive.Value);
            		
            		                 
            	
            	
            	case ScSectionGroupHdrColumn.GrpDescAr:
            		return this.GrpDescAr.CompareTo(rhs.GrpDescAr);
            		
            		                 
            	
            	
            	case ScSectionGroupHdrColumn.GrpDescEn:
            		return this.GrpDescEn.CompareTo(rhs.GrpDescEn);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ScSectionGroupHdrKey> Members
		
		// member variable for the EntityId property
		private ScSectionGroupHdrKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ScSectionGroupHdrKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ScSectionGroupHdrKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ScSectionGroupHdr")
					.Append("|").Append( this.ScSectionGroupHdrId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{16}{15}- ScSectionGroupHdrId: {0}{15}- GroupCode: {1}{15}- EdAcadYearId: {2}{15}- EdCodeSemesterId: {3}{15}- EdCodeLevelId: {4}{15}- GrpTypeFlg: {5}{15}- LoadFlg: {6}{15}- AsFacultyInfoId: {7}{15}- EntMainId: {8}{15}- GsCodeLanguageId: {9}{15}- AsCodeDegreeClassId: {10}{15}- EdCourseId: {11}{15}- IsActive: {12}{15}- GrpDescAr: {13}{15}- GrpDescEn: {14}{15}{17}", 
				this.ScSectionGroupHdrId,
				this.GroupCode,
				(this.EdAcadYearId == null) ? string.Empty : this.EdAcadYearId.ToString(),
				this.EdCodeSemesterId,
				(this.EdCodeLevelId == null) ? string.Empty : this.EdCodeLevelId.ToString(),
				this.GrpTypeFlg,
				this.LoadFlg,
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				(this.EntMainId == null) ? string.Empty : this.EntMainId.ToString(),
				(this.GsCodeLanguageId == null) ? string.Empty : this.GsCodeLanguageId.ToString(),
				(this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString(),
				(this.EdCourseId == null) ? string.Empty : this.EdCourseId.ToString(),
				(this.IsActive == null) ? string.Empty : this.IsActive.ToString(),
				(this.GrpDescAr == null) ? string.Empty : this.GrpDescAr.ToString(),
				(this.GrpDescEn == null) ? string.Empty : this.GrpDescEn.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SC_SECTION_GROUP_HDR' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ScSectionGroupHdrEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SC_SECTION_GROUP_HDR_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SC_SECTION_GROUP_HDR"</remarks>
		public System.Decimal ScSectionGroupHdrId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalScSectionGroupHdrId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// GROUP_CODE : 
		/// </summary>
		public System.String		  GroupCode = string.Empty;
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal?		  EdAcadYearId = null;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : 
		/// </summary>
		public System.Decimal		  EdCodeSemesterId = 0.0m;
		
		/// <summary>
		/// ED_CODE_LEVEL_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeLevelId = null;
		
		/// <summary>
		/// GRP_TYPE_FLG : 
		/// </summary>
		public System.Decimal		  GrpTypeFlg = 0.0m;
		
		/// <summary>
		/// LOAD_FLG : 
		/// </summary>
		public System.Decimal		  LoadFlg = 0.0m;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// ENT_MAIN_ID : 
		/// </summary>
		public System.Decimal?		  EntMainId = null;
		
		/// <summary>
		/// GS_CODE_LANGUAGE_ID : 
		/// </summary>
		public System.Decimal?		  GsCodeLanguageId = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_CLASS_ID : 
		/// </summary>
		public System.Decimal?		  AsCodeDegreeClassId = null;
		
		/// <summary>
		/// ED_COURSE_ID : 
		/// </summary>
		public System.Decimal?		  EdCourseId = null;
		
		/// <summary>
		/// IS_ACTIVE : 
		/// </summary>
		public System.Boolean?		  IsActive = null;
		
		/// <summary>
		/// GRP_DESC_AR : 
		/// </summary>
		public System.String		  GrpDescAr = null;
		
		/// <summary>
		/// GRP_DESC_EN : 
		/// </summary>
		public System.String		  GrpDescEn = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private AsCodeDegreeClass _asCodeDegreeClassIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return this._asCodeDegreeClassIdSource; }
            set { this._asCodeDegreeClassIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdCodeLevel _edCodeLevelIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeLevel EdCodeLevelIdSource
      	{
            get { return this._edCodeLevelIdSource; }
            set { this._edCodeLevelIdSource = value; }
      	}
		private EdCourse _edCourseIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return this._edCourseIdSource; }
            set { this._edCourseIdSource = value; }
      	}
		private EntityMain _entMainIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return this._entMainIdSource; }
            set { this._entMainIdSource = value; }
      	}
		private GsCodeLanguage _gsCodeLanguageIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeLanguage"/>.
		/// </summary>
		/// <value>The source GsCodeLanguage for GsCodeLanguageId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeLanguage GsCodeLanguageIdSource
      	{
            get { return this._gsCodeLanguageIdSource; }
            set { this._gsCodeLanguageIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region ScSectionGroupDtlCollection
		
		private TList<ScSectionGroupDtl> _scSectionGroupDtlScSectionGroupHdrId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scSectionGroupDtlScSectionGroupHdrId
		/// </summary>
		
		public TList<ScSectionGroupDtl> ScSectionGroupDtlCollection
		{
			get
			{
				if (_scSectionGroupDtlScSectionGroupHdrId == null)
				{
				_scSectionGroupDtlScSectionGroupHdrId = new TList<ScSectionGroupDtl>();
				}
	
				return _scSectionGroupDtlScSectionGroupHdrId;
			}
			set { _scSectionGroupDtlScSectionGroupHdrId = value; }
		}
		
		#endregion

		#region EdStudCourseRegCollection
		
		private TList<EdStudCourseReg> _edStudCourseRegScSectionGroupHdrId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCourseRegScSectionGroupHdrId
		/// </summary>
		
		public TList<EdStudCourseReg> EdStudCourseRegCollection
		{
			get
			{
				if (_edStudCourseRegScSectionGroupHdrId == null)
				{
				_edStudCourseRegScSectionGroupHdrId = new TList<EdStudCourseReg>();
				}
	
				return _edStudCourseRegScSectionGroupHdrId;
			}
			set { _edStudCourseRegScSectionGroupHdrId = value; }
		}
		
		#endregion

		#region EdStudCourseRegPreCollection
		
		private TList<EdStudCourseRegPre> _edStudCourseRegPreScSectionGroupHdrId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCourseRegPreScSectionGroupHdrId
		/// </summary>
		
		public TList<EdStudCourseRegPre> EdStudCourseRegPreCollection
		{
			get
			{
				if (_edStudCourseRegPreScSectionGroupHdrId == null)
				{
				_edStudCourseRegPreScSectionGroupHdrId = new TList<EdStudCourseRegPre>();
				}
	
				return _edStudCourseRegPreScSectionGroupHdrId;
			}
			set { _edStudCourseRegPreScSectionGroupHdrId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ScSectionGroupHdrEntityData _tmp = new ScSectionGroupHdrEntityData();
						
			_tmp.ScSectionGroupHdrId = this.ScSectionGroupHdrId;
			_tmp.OriginalScSectionGroupHdrId = this.OriginalScSectionGroupHdrId;
			
			_tmp.GroupCode = this.GroupCode;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdCodeLevelId = this.EdCodeLevelId;
			_tmp.GrpTypeFlg = this.GrpTypeFlg;
			_tmp.LoadFlg = this.LoadFlg;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EntMainId = this.EntMainId;
			_tmp.GsCodeLanguageId = this.GsCodeLanguageId;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.IsActive = this.IsActive;
			_tmp.GrpDescAr = this.GrpDescAr;
			_tmp.GrpDescEn = this.GrpDescEn;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.AsCodeDegreeClassIdSource != null)
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdCodeLevelIdSource != null)
				_tmp.EdCodeLevelIdSource = MakeCopyOf(this.EdCodeLevelIdSource) as EdCodeLevel;
			if (this.EdCourseIdSource != null)
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource) as EdCourse;
			if (this.EntMainIdSource != null)
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource) as EntityMain;
			if (this.GsCodeLanguageIdSource != null)
				_tmp.GsCodeLanguageIdSource = MakeCopyOf(this.GsCodeLanguageIdSource) as GsCodeLanguage;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._scSectionGroupDtlScSectionGroupHdrId != null)
				_tmp.ScSectionGroupDtlCollection = (TList<ScSectionGroupDtl>) MakeCopyOf(this.ScSectionGroupDtlCollection); 
			if (this._edStudCourseRegScSectionGroupHdrId != null)
				_tmp.EdStudCourseRegCollection = (TList<EdStudCourseReg>) MakeCopyOf(this.EdStudCourseRegCollection); 
			if (this._edStudCourseRegPreScSectionGroupHdrId != null)
				_tmp.EdStudCourseRegPreCollection = (TList<EdStudCourseRegPre>) MakeCopyOf(this.EdStudCourseRegPreCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ScSectionGroupHdrEntityData _tmp = new ScSectionGroupHdrEntityData();
						
			_tmp.ScSectionGroupHdrId = this.ScSectionGroupHdrId;
			_tmp.OriginalScSectionGroupHdrId = this.OriginalScSectionGroupHdrId;
			
			_tmp.GroupCode = this.GroupCode;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdCodeLevelId = this.EdCodeLevelId;
			_tmp.GrpTypeFlg = this.GrpTypeFlg;
			_tmp.LoadFlg = this.LoadFlg;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EntMainId = this.EntMainId;
			_tmp.GsCodeLanguageId = this.GsCodeLanguageId;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.IsActive = this.IsActive;
			_tmp.GrpDescAr = this.GrpDescAr;
			_tmp.GrpDescEn = this.GrpDescEn;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				_tmp.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdCodeLevelIdSource != null && existingCopies.Contains(this.EdCodeLevelIdSource))
				_tmp.EdCodeLevelIdSource = existingCopies[this.EdCodeLevelIdSource] as EdCodeLevel;
			else
				_tmp.EdCodeLevelIdSource = MakeCopyOf(this.EdCodeLevelIdSource, existingCopies) as EdCodeLevel;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				_tmp.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				_tmp.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.GsCodeLanguageIdSource != null && existingCopies.Contains(this.GsCodeLanguageIdSource))
				_tmp.GsCodeLanguageIdSource = existingCopies[this.GsCodeLanguageIdSource] as GsCodeLanguage;
			else
				_tmp.GsCodeLanguageIdSource = MakeCopyOf(this.GsCodeLanguageIdSource, existingCopies) as GsCodeLanguage;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.ScSectionGroupDtlCollection = (TList<ScSectionGroupDtl>) MakeCopyOf(this.ScSectionGroupDtlCollection, existingCopies); 
			_tmp.EdStudCourseRegCollection = (TList<EdStudCourseReg>) MakeCopyOf(this.EdStudCourseRegCollection, existingCopies); 
			_tmp.EdStudCourseRegPreCollection = (TList<EdStudCourseRegPre>) MakeCopyOf(this.EdStudCourseRegPreCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScSectionGroupHdrColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ScSectionGroupHdrColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScSectionGroupHdrColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ScSectionGroupHdrColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScSectionGroupHdrColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ScSectionGroupHdrColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ScSectionGroupHdrEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ScSectionGroupHdrEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScSectionGroupHdrColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ScSectionGroupHdrColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ScSectionGroupHdrEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ScSectionGroupHdrEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ScSectionGroupHdrEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ScSectionGroupHdr"/> object.
	/// </remarks>
	public class ScSectionGroupHdrEventArgs : System.EventArgs
	{
		private ScSectionGroupHdrColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ScSectionGroupHdrEventArgs class.
		///</summary>
		public ScSectionGroupHdrEventArgs(ScSectionGroupHdrColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ScSectionGroupHdrEventArgs class.
		///</summary>
		public ScSectionGroupHdrEventArgs(ScSectionGroupHdrColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ScSectionGroupHdrColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ScSectionGroupHdrColumn" />
		public ScSectionGroupHdrColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ScSectionGroupHdr related events.
	///</summary>
	public delegate void ScSectionGroupHdrEventHandler(object sender, ScSectionGroupHdrEventArgs e);
	
	#region ScSectionGroupHdrComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ScSectionGroupHdrComparer : System.Collections.Generic.IComparer<ScSectionGroupHdr>
	{
		ScSectionGroupHdrColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ScSectionGroupHdrComparer"/> class.
        /// </summary>
		public ScSectionGroupHdrComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ScSectionGroupHdrComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ScSectionGroupHdrComparer(ScSectionGroupHdrColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="ScSectionGroupHdr"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="ScSectionGroupHdr"/> to compare.</param>
        /// <param name="b">The second <c>ScSectionGroupHdr</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ScSectionGroupHdr a, ScSectionGroupHdr b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ScSectionGroupHdr entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ScSectionGroupHdr a, ScSectionGroupHdr b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ScSectionGroupHdrColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ScSectionGroupHdrKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ScSectionGroupHdr"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ScSectionGroupHdrKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ScSectionGroupHdrKey class.
		/// </summary>
		public ScSectionGroupHdrKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ScSectionGroupHdrKey class.
		/// </summary>
		public ScSectionGroupHdrKey(ScSectionGroupHdrBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.ScSectionGroupHdrId = entity.ScSectionGroupHdrId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ScSectionGroupHdrKey class.
		/// </summary>
		public ScSectionGroupHdrKey(System.Decimal _scSectionGroupHdrId)
		{
			#region Init Properties

			this.ScSectionGroupHdrId = _scSectionGroupHdrId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ScSectionGroupHdrBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ScSectionGroupHdrBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ScSectionGroupHdrId property
		private System.Decimal _scSectionGroupHdrId;
		
		/// <summary>
		/// Gets or sets the ScSectionGroupHdrId property.
		/// </summary>
		public System.Decimal ScSectionGroupHdrId
		{
			get { return _scSectionGroupHdrId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ScSectionGroupHdrId = value;
				
				_scSectionGroupHdrId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ScSectionGroupHdrId = ( values["ScSectionGroupHdrId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["ScSectionGroupHdrId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ScSectionGroupHdrId", ScSectionGroupHdrId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ScSectionGroupHdrId: {0}{1}",
								ScSectionGroupHdrId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ScSectionGroupHdrColumn Enum
	
	/// <summary>
	/// Enumerate the ScSectionGroupHdr columns.
	/// </summary>
	[Serializable]
	public enum ScSectionGroupHdrColumn : int
	{
		/// <summary>
		/// ScSectionGroupHdrId : 
		/// </summary>
		[EnumTextValue("SC_SECTION_GROUP_HDR_ID")]
		[ColumnEnum("SC_SECTION_GROUP_HDR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		ScSectionGroupHdrId = 1,
		/// <summary>
		/// GroupCode : 
		/// </summary>
		[EnumTextValue("GROUP_CODE")]
		[ColumnEnum("GROUP_CODE", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		GroupCode = 2,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdAcadYearId = 3,
		/// <summary>
		/// EdCodeSemesterId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeSemesterId = 4,
		/// <summary>
		/// EdCodeLevelId : 
		/// </summary>
		[EnumTextValue("ED_CODE_LEVEL_ID")]
		[ColumnEnum("ED_CODE_LEVEL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeLevelId = 5,
		/// <summary>
		/// GrpTypeFlg : 
		/// </summary>
		[EnumTextValue("GRP_TYPE_FLG")]
		[ColumnEnum("GRP_TYPE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GrpTypeFlg = 6,
		/// <summary>
		/// LoadFlg : 
		/// </summary>
		[EnumTextValue("LOAD_FLG")]
		[ColumnEnum("LOAD_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		LoadFlg = 7,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 8,
		/// <summary>
		/// EntMainId : 
		/// </summary>
		[EnumTextValue("ENT_MAIN_ID")]
		[ColumnEnum("ENT_MAIN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntMainId = 9,
		/// <summary>
		/// GsCodeLanguageId : 
		/// </summary>
		[EnumTextValue("GS_CODE_LANGUAGE_ID")]
		[ColumnEnum("GS_CODE_LANGUAGE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCodeLanguageId = 10,
		/// <summary>
		/// AsCodeDegreeClassId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_CLASS_ID")]
		[ColumnEnum("AS_CODE_DEGREE_CLASS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeClassId = 11,
		/// <summary>
		/// EdCourseId : 
		/// </summary>
		[EnumTextValue("ED_COURSE_ID")]
		[ColumnEnum("ED_COURSE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCourseId = 12,
		/// <summary>
		/// IsActive : 
		/// </summary>
		[EnumTextValue("IS_ACTIVE")]
		[ColumnEnum("IS_ACTIVE", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsActive = 13,
		/// <summary>
		/// GrpDescAr : 
		/// </summary>
		[EnumTextValue("GRP_DESC_AR")]
		[ColumnEnum("GRP_DESC_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		GrpDescAr = 14,
		/// <summary>
		/// GrpDescEn : 
		/// </summary>
		[EnumTextValue("GRP_DESC_EN")]
		[ColumnEnum("GRP_DESC_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		GrpDescEn = 15
	}//End enum

	#endregion ScSectionGroupHdrColumn Enum

} // end namespace
