/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file GetAllTransactionFeesViewB415102017.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'GetAllTransactionFeesView_b415-10-2017' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("GetAllTransactionFeesViewB415102017Base")]
	public abstract partial class GetAllTransactionFeesViewB415102017Base : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// EdStudId : 
		/// </summary>
		private System.Decimal?		  _edStudId = null;
		
		/// <summary>
		/// FeesId : 
		/// </summary>
		private System.Decimal?		  _feesId = null;
		
		/// <summary>
		/// FeeCodeItemId : 
		/// </summary>
		private System.Decimal		  _feeCodeItemId = 0.0m;
		
		/// <summary>
		/// TransactionDate : 
		/// </summary>
		private System.DateTime?		  _transactionDate = null;
		
		/// <summary>
		/// YearId : 
		/// </summary>
		private System.Decimal		  _yearId = 0.0m;
		
		/// <summary>
		/// Semester : 
		/// </summary>
		private System.Decimal?		  _semester = null;
		
		/// <summary>
		/// Depit : 
		/// </summary>
		private System.Decimal?		  _depit = null;
		
		/// <summary>
		/// Credit : 
		/// </summary>
		private System.Decimal?		  _credit = null;
		
		/// <summary>
		/// Credit2 : 
		/// </summary>
		private System.Decimal?		  _credit2 = null;
		
		/// <summary>
		/// TransactionType : 
		/// </summary>
		private System.Int32		  _transactionType = (int)0;
		
		/// <summary>
		/// DiscType : 
		/// </summary>
		private System.Decimal?		  _discType = null;
		
		/// <summary>
		/// DiscountStatus : 
		/// </summary>
		private System.Decimal?		  _discountStatus = null;
		
		/// <summary>
		/// DiscCat : 
		/// </summary>
		private System.Int32?		  _discCat = null;
		
		/// <summary>
		/// RefundType : 
		/// </summary>
		private System.Int32?		  _refundType = null;
		
		/// <summary>
		/// YearOfLoad : 
		/// </summary>
		private System.Decimal?		  _yearOfLoad = null;
		
		/// <summary>
		/// SemOfLoad : 
		/// </summary>
		private System.Decimal?		  _semOfLoad = null;
		
		/// <summary>
		/// PayMethod : 
		/// </summary>
		private System.Decimal?		  _payMethod = null;
		
		/// <summary>
		/// credit3 : 
		/// </summary>
		private System.Decimal?		  _credit3 = null;
		
		/// <summary>
		/// refundValue : 
		/// </summary>
		private System.Decimal?		  _refundValue = null;
		
		/// <summary>
		/// VouchearId : 
		/// </summary>
		private System.Decimal?		  _vouchearId = null;
		
		/// <summary>
		/// recieptNum : 
		/// </summary>
		private System.String		  _recieptNum = null;
		
		/// <summary>
		/// ApplicantId : 
		/// </summary>
		private System.Decimal?		  _applicantId = null;
		
		/// <summary>
		/// FeeStudFeeItemId : 
		/// </summary>
		private System.Decimal?		  _feeStudFeeItemId = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="GetAllTransactionFeesViewB415102017Base"/> instance.
		///</summary>
		public GetAllTransactionFeesViewB415102017Base()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="GetAllTransactionFeesViewB415102017Base"/> instance.
		///</summary>
		///<param name="_edStudId"></param>
		///<param name="_feesId"></param>
		///<param name="_feeCodeItemId"></param>
		///<param name="_transactionDate"></param>
		///<param name="_yearId"></param>
		///<param name="_semester"></param>
		///<param name="_depit"></param>
		///<param name="_credit"></param>
		///<param name="_credit2"></param>
		///<param name="_transactionType"></param>
		///<param name="_discType"></param>
		///<param name="_discountStatus"></param>
		///<param name="_discCat"></param>
		///<param name="_refundType"></param>
		///<param name="_yearOfLoad"></param>
		///<param name="_semOfLoad"></param>
		///<param name="_payMethod"></param>
		///<param name="_credit3"></param>
		///<param name="_refundValue"></param>
		///<param name="_vouchearId"></param>
		///<param name="_recieptNum"></param>
		///<param name="_applicantId"></param>
		///<param name="_feeStudFeeItemId"></param>
		public GetAllTransactionFeesViewB415102017Base(System.Decimal? _edStudId, System.Decimal? _feesId, System.Decimal _feeCodeItemId, System.DateTime? _transactionDate, System.Decimal _yearId, System.Decimal? _semester, System.Decimal? _depit, System.Decimal? _credit, System.Decimal? _credit2, System.Int32 _transactionType, System.Decimal? _discType, System.Decimal? _discountStatus, System.Int32? _discCat, System.Int32? _refundType, System.Decimal? _yearOfLoad, System.Decimal? _semOfLoad, System.Decimal? _payMethod, System.Decimal? _credit3, System.Decimal? _refundValue, System.Decimal? _vouchearId, System.String _recieptNum, System.Decimal? _applicantId, System.Decimal? _feeStudFeeItemId)
		{
			this._edStudId = _edStudId;
			this._feesId = _feesId;
			this._feeCodeItemId = _feeCodeItemId;
			this._transactionDate = _transactionDate;
			this._yearId = _yearId;
			this._semester = _semester;
			this._depit = _depit;
			this._credit = _credit;
			this._credit2 = _credit2;
			this._transactionType = _transactionType;
			this._discType = _discType;
			this._discountStatus = _discountStatus;
			this._discCat = _discCat;
			this._refundType = _refundType;
			this._yearOfLoad = _yearOfLoad;
			this._semOfLoad = _semOfLoad;
			this._payMethod = _payMethod;
			this._credit3 = _credit3;
			this._refundValue = _refundValue;
			this._vouchearId = _vouchearId;
			this._recieptNum = _recieptNum;
			this._applicantId = _applicantId;
			this._feeStudFeeItemId = _feeStudFeeItemId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="GetAllTransactionFeesViewB415102017"/> instance.
		///</summary>
		///<param name="_edStudId"></param>
		///<param name="_feesId"></param>
		///<param name="_feeCodeItemId"></param>
		///<param name="_transactionDate"></param>
		///<param name="_yearId"></param>
		///<param name="_semester"></param>
		///<param name="_depit"></param>
		///<param name="_credit"></param>
		///<param name="_credit2"></param>
		///<param name="_transactionType"></param>
		///<param name="_discType"></param>
		///<param name="_discountStatus"></param>
		///<param name="_discCat"></param>
		///<param name="_refundType"></param>
		///<param name="_yearOfLoad"></param>
		///<param name="_semOfLoad"></param>
		///<param name="_payMethod"></param>
		///<param name="_credit3"></param>
		///<param name="_refundValue"></param>
		///<param name="_vouchearId"></param>
		///<param name="_recieptNum"></param>
		///<param name="_applicantId"></param>
		///<param name="_feeStudFeeItemId"></param>
		public static GetAllTransactionFeesViewB415102017 CreateGetAllTransactionFeesViewB415102017(System.Decimal? _edStudId, System.Decimal? _feesId, System.Decimal _feeCodeItemId, System.DateTime? _transactionDate, System.Decimal _yearId, System.Decimal? _semester, System.Decimal? _depit, System.Decimal? _credit, System.Decimal? _credit2, System.Int32 _transactionType, System.Decimal? _discType, System.Decimal? _discountStatus, System.Int32? _discCat, System.Int32? _refundType, System.Decimal? _yearOfLoad, System.Decimal? _semOfLoad, System.Decimal? _payMethod, System.Decimal? _credit3, System.Decimal? _refundValue, System.Decimal? _vouchearId, System.String _recieptNum, System.Decimal? _applicantId, System.Decimal? _feeStudFeeItemId)
		{
			GetAllTransactionFeesViewB415102017 newGetAllTransactionFeesViewB415102017 = new GetAllTransactionFeesViewB415102017();
			newGetAllTransactionFeesViewB415102017.EdStudId = _edStudId;
			newGetAllTransactionFeesViewB415102017.FeesId = _feesId;
			newGetAllTransactionFeesViewB415102017.FeeCodeItemId = _feeCodeItemId;
			newGetAllTransactionFeesViewB415102017.TransactionDate = _transactionDate;
			newGetAllTransactionFeesViewB415102017.YearId = _yearId;
			newGetAllTransactionFeesViewB415102017.Semester = _semester;
			newGetAllTransactionFeesViewB415102017.Depit = _depit;
			newGetAllTransactionFeesViewB415102017.Credit = _credit;
			newGetAllTransactionFeesViewB415102017.Credit2 = _credit2;
			newGetAllTransactionFeesViewB415102017.TransactionType = _transactionType;
			newGetAllTransactionFeesViewB415102017.DiscType = _discType;
			newGetAllTransactionFeesViewB415102017.DiscountStatus = _discountStatus;
			newGetAllTransactionFeesViewB415102017.DiscCat = _discCat;
			newGetAllTransactionFeesViewB415102017.RefundType = _refundType;
			newGetAllTransactionFeesViewB415102017.YearOfLoad = _yearOfLoad;
			newGetAllTransactionFeesViewB415102017.SemOfLoad = _semOfLoad;
			newGetAllTransactionFeesViewB415102017.PayMethod = _payMethod;
			newGetAllTransactionFeesViewB415102017.Credit3 = _credit3;
			newGetAllTransactionFeesViewB415102017.RefundValue = _refundValue;
			newGetAllTransactionFeesViewB415102017.VouchearId = _vouchearId;
			newGetAllTransactionFeesViewB415102017.RecieptNum = _recieptNum;
			newGetAllTransactionFeesViewB415102017.ApplicantId = _applicantId;
			newGetAllTransactionFeesViewB415102017.FeeStudFeeItemId = _feeStudFeeItemId;
			return newGetAllTransactionFeesViewB415102017;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the EdStudId property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdStudIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? EdStudId
		{
			get
			{
				return this._edStudId; 
			}
			set
			{
				if (_edStudId == value && EdStudId != null )
					return;
					
				this._edStudId = value;
				this._isDirty = true;
				
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FeesId property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeesIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? FeesId
		{
			get
			{
				return this._feesId; 
			}
			set
			{
				if (_feesId == value && FeesId != null )
					return;
					
				this._feesId = value;
				this._isDirty = true;
				
				OnPropertyChanged("FeesId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FeeCodeItemId property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal FeeCodeItemId
		{
			get
			{
				return this._feeCodeItemId; 
			}
			set
			{
				if (_feeCodeItemId == value)
					return;
					
				this._feeCodeItemId = value;
				this._isDirty = true;
				
				OnPropertyChanged("FeeCodeItemId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TransactionDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsTransactionDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? TransactionDate
		{
			get
			{
				return this._transactionDate; 
			}
			set
			{
				if (_transactionDate == value && TransactionDate != null )
					return;
					
				this._transactionDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("TransactionDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the YearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal YearId
		{
			get
			{
				return this._yearId; 
			}
			set
			{
				if (_yearId == value)
					return;
					
				this._yearId = value;
				this._isDirty = true;
				
				OnPropertyChanged("YearId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Semester property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSemesterNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? Semester
		{
			get
			{
				return this._semester; 
			}
			set
			{
				if (_semester == value && Semester != null )
					return;
					
				this._semester = value;
				this._isDirty = true;
				
				OnPropertyChanged("Semester");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Depit property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDepitNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? Depit
		{
			get
			{
				return this._depit; 
			}
			set
			{
				if (_depit == value && Depit != null )
					return;
					
				this._depit = value;
				this._isDirty = true;
				
				OnPropertyChanged("Depit");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Credit property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCreditNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? Credit
		{
			get
			{
				return this._credit; 
			}
			set
			{
				if (_credit == value && Credit != null )
					return;
					
				this._credit = value;
				this._isDirty = true;
				
				OnPropertyChanged("Credit");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Credit2 property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCredit2Null() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? Credit2
		{
			get
			{
				return this._credit2; 
			}
			set
			{
				if (_credit2 == value && Credit2 != null )
					return;
					
				this._credit2 = value;
				this._isDirty = true;
				
				OnPropertyChanged("Credit2");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TransactionType property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 TransactionType
		{
			get
			{
				return this._transactionType; 
			}
			set
			{
				if (_transactionType == value)
					return;
					
				this._transactionType = value;
				this._isDirty = true;
				
				OnPropertyChanged("TransactionType");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DiscType property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDiscTypeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? DiscType
		{
			get
			{
				return this._discType; 
			}
			set
			{
				if (_discType == value && DiscType != null )
					return;
					
				this._discType = value;
				this._isDirty = true;
				
				OnPropertyChanged("DiscType");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DiscountStatus property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDiscountStatusNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? DiscountStatus
		{
			get
			{
				return this._discountStatus; 
			}
			set
			{
				if (_discountStatus == value && DiscountStatus != null )
					return;
					
				this._discountStatus = value;
				this._isDirty = true;
				
				OnPropertyChanged("DiscountStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DiscCat property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDiscCatNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? DiscCat
		{
			get
			{
				return this._discCat; 
			}
			set
			{
				if (_discCat == value && DiscCat != null )
					return;
					
				this._discCat = value;
				this._isDirty = true;
				
				OnPropertyChanged("DiscCat");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the RefundType property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsRefundTypeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? RefundType
		{
			get
			{
				return this._refundType; 
			}
			set
			{
				if (_refundType == value && RefundType != null )
					return;
					
				this._refundType = value;
				this._isDirty = true;
				
				OnPropertyChanged("RefundType");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the YearOfLoad property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsYearOfLoadNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? YearOfLoad
		{
			get
			{
				return this._yearOfLoad; 
			}
			set
			{
				if (_yearOfLoad == value && YearOfLoad != null )
					return;
					
				this._yearOfLoad = value;
				this._isDirty = true;
				
				OnPropertyChanged("YearOfLoad");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SemOfLoad property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSemOfLoadNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? SemOfLoad
		{
			get
			{
				return this._semOfLoad; 
			}
			set
			{
				if (_semOfLoad == value && SemOfLoad != null )
					return;
					
				this._semOfLoad = value;
				this._isDirty = true;
				
				OnPropertyChanged("SemOfLoad");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the PayMethod property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPayMethodNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? PayMethod
		{
			get
			{
				return this._payMethod; 
			}
			set
			{
				if (_payMethod == value && PayMethod != null )
					return;
					
				this._payMethod = value;
				this._isDirty = true;
				
				OnPropertyChanged("PayMethod");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the credit3 property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCredit3Null() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? Credit3
		{
			get
			{
				return this._credit3; 
			}
			set
			{
				if (_credit3 == value && Credit3 != null )
					return;
					
				this._credit3 = value;
				this._isDirty = true;
				
				OnPropertyChanged("Credit3");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the refundValue property. 
		///		
		/// </summary>
		/// <value>This type is decimal</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRefundValueNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? RefundValue
		{
			get
			{
				return this._refundValue; 
			}
			set
			{
				if (_refundValue == value && RefundValue != null )
					return;
					
				this._refundValue = value;
				this._isDirty = true;
				
				OnPropertyChanged("RefundValue");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the VouchearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsVouchearIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? VouchearId
		{
			get
			{
				return this._vouchearId; 
			}
			set
			{
				if (_vouchearId == value && VouchearId != null )
					return;
					
				this._vouchearId = value;
				this._isDirty = true;
				
				OnPropertyChanged("VouchearId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the recieptNum property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String RecieptNum
		{
			get
			{
				return this._recieptNum; 
			}
			set
			{
				if (_recieptNum == value)
					return;
					
				this._recieptNum = value;
				this._isDirty = true;
				
				OnPropertyChanged("RecieptNum");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ApplicantId property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsApplicantIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? ApplicantId
		{
			get
			{
				return this._applicantId; 
			}
			set
			{
				if (_applicantId == value && ApplicantId != null )
					return;
					
				this._applicantId = value;
				this._isDirty = true;
				
				OnPropertyChanged("ApplicantId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FeeStudFeeItemId property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeStudFeeItemIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? FeeStudFeeItemId
		{
			get
			{
				return this._feeStudFeeItemId; 
			}
			set
			{
				if (_feeStudFeeItemId == value && FeeStudFeeItemId != null )
					return;
					
				this._feeStudFeeItemId = value;
				this._isDirty = true;
				
				OnPropertyChanged("FeeStudFeeItemId");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "GetAllTransactionFeesView_b415-10-2017"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed GetAllTransactionFeesViewB415102017Base Entity 
		///</summary>
		public virtual GetAllTransactionFeesViewB415102017Base Copy()
		{
			//shallow copy entity
			GetAllTransactionFeesViewB415102017 copy = new GetAllTransactionFeesViewB415102017();
				copy.EdStudId = this.EdStudId;
				copy.FeesId = this.FeesId;
				copy.FeeCodeItemId = this.FeeCodeItemId;
				copy.TransactionDate = this.TransactionDate;
				copy.YearId = this.YearId;
				copy.Semester = this.Semester;
				copy.Depit = this.Depit;
				copy.Credit = this.Credit;
				copy.Credit2 = this.Credit2;
				copy.TransactionType = this.TransactionType;
				copy.DiscType = this.DiscType;
				copy.DiscountStatus = this.DiscountStatus;
				copy.DiscCat = this.DiscCat;
				copy.RefundType = this.RefundType;
				copy.YearOfLoad = this.YearOfLoad;
				copy.SemOfLoad = this.SemOfLoad;
				copy.PayMethod = this.PayMethod;
				copy.Credit3 = this.Credit3;
				copy.RefundValue = this.RefundValue;
				copy.VouchearId = this.VouchearId;
				copy.RecieptNum = this.RecieptNum;
				copy.ApplicantId = this.ApplicantId;
				copy.FeeStudFeeItemId = this.FeeStudFeeItemId;
			copy.AcceptChanges();
			return (GetAllTransactionFeesViewB415102017)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="GetAllTransactionFeesViewB415102017Base"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(GetAllTransactionFeesViewB415102017Base toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="GetAllTransactionFeesViewB415102017Base"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="GetAllTransactionFeesViewB415102017Base"/> to compare.</param>
		///<param name="Object2">The second <see cref="GetAllTransactionFeesViewB415102017Base"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(GetAllTransactionFeesViewB415102017Base Object1, GetAllTransactionFeesViewB415102017Base Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.EdStudId != null && Object2.EdStudId != null )
			{
				if (Object1.EdStudId != Object2.EdStudId)
					equal = false;
			}
			else if (Object1.EdStudId == null ^ Object1.EdStudId == null )
			{
				equal = false;
			}
			if (Object1.FeesId != null && Object2.FeesId != null )
			{
				if (Object1.FeesId != Object2.FeesId)
					equal = false;
			}
			else if (Object1.FeesId == null ^ Object1.FeesId == null )
			{
				equal = false;
			}
			if (Object1.FeeCodeItemId != Object2.FeeCodeItemId)
				equal = false;
			if (Object1.TransactionDate != null && Object2.TransactionDate != null )
			{
				if (Object1.TransactionDate != Object2.TransactionDate)
					equal = false;
			}
			else if (Object1.TransactionDate == null ^ Object1.TransactionDate == null )
			{
				equal = false;
			}
			if (Object1.YearId != Object2.YearId)
				equal = false;
			if (Object1.Semester != null && Object2.Semester != null )
			{
				if (Object1.Semester != Object2.Semester)
					equal = false;
			}
			else if (Object1.Semester == null ^ Object1.Semester == null )
			{
				equal = false;
			}
			if (Object1.Depit != null && Object2.Depit != null )
			{
				if (Object1.Depit != Object2.Depit)
					equal = false;
			}
			else if (Object1.Depit == null ^ Object1.Depit == null )
			{
				equal = false;
			}
			if (Object1.Credit != null && Object2.Credit != null )
			{
				if (Object1.Credit != Object2.Credit)
					equal = false;
			}
			else if (Object1.Credit == null ^ Object1.Credit == null )
			{
				equal = false;
			}
			if (Object1.Credit2 != null && Object2.Credit2 != null )
			{
				if (Object1.Credit2 != Object2.Credit2)
					equal = false;
			}
			else if (Object1.Credit2 == null ^ Object1.Credit2 == null )
			{
				equal = false;
			}
			if (Object1.TransactionType != Object2.TransactionType)
				equal = false;
			if (Object1.DiscType != null && Object2.DiscType != null )
			{
				if (Object1.DiscType != Object2.DiscType)
					equal = false;
			}
			else if (Object1.DiscType == null ^ Object1.DiscType == null )
			{
				equal = false;
			}
			if (Object1.DiscountStatus != null && Object2.DiscountStatus != null )
			{
				if (Object1.DiscountStatus != Object2.DiscountStatus)
					equal = false;
			}
			else if (Object1.DiscountStatus == null ^ Object1.DiscountStatus == null )
			{
				equal = false;
			}
			if (Object1.DiscCat != null && Object2.DiscCat != null )
			{
				if (Object1.DiscCat != Object2.DiscCat)
					equal = false;
			}
			else if (Object1.DiscCat == null ^ Object1.DiscCat == null )
			{
				equal = false;
			}
			if (Object1.RefundType != null && Object2.RefundType != null )
			{
				if (Object1.RefundType != Object2.RefundType)
					equal = false;
			}
			else if (Object1.RefundType == null ^ Object1.RefundType == null )
			{
				equal = false;
			}
			if (Object1.YearOfLoad != null && Object2.YearOfLoad != null )
			{
				if (Object1.YearOfLoad != Object2.YearOfLoad)
					equal = false;
			}
			else if (Object1.YearOfLoad == null ^ Object1.YearOfLoad == null )
			{
				equal = false;
			}
			if (Object1.SemOfLoad != null && Object2.SemOfLoad != null )
			{
				if (Object1.SemOfLoad != Object2.SemOfLoad)
					equal = false;
			}
			else if (Object1.SemOfLoad == null ^ Object1.SemOfLoad == null )
			{
				equal = false;
			}
			if (Object1.PayMethod != null && Object2.PayMethod != null )
			{
				if (Object1.PayMethod != Object2.PayMethod)
					equal = false;
			}
			else if (Object1.PayMethod == null ^ Object1.PayMethod == null )
			{
				equal = false;
			}
			if (Object1.Credit3 != null && Object2.Credit3 != null )
			{
				if (Object1.Credit3 != Object2.Credit3)
					equal = false;
			}
			else if (Object1.Credit3 == null ^ Object1.Credit3 == null )
			{
				equal = false;
			}
			if (Object1.RefundValue != null && Object2.RefundValue != null )
			{
				if (Object1.RefundValue != Object2.RefundValue)
					equal = false;
			}
			else if (Object1.RefundValue == null ^ Object1.RefundValue == null )
			{
				equal = false;
			}
			if (Object1.VouchearId != null && Object2.VouchearId != null )
			{
				if (Object1.VouchearId != Object2.VouchearId)
					equal = false;
			}
			else if (Object1.VouchearId == null ^ Object1.VouchearId == null )
			{
				equal = false;
			}
			if (Object1.RecieptNum != null && Object2.RecieptNum != null )
			{
				if (Object1.RecieptNum != Object2.RecieptNum)
					equal = false;
			}
			else if (Object1.RecieptNum == null ^ Object1.RecieptNum == null )
			{
				equal = false;
			}
			if (Object1.ApplicantId != null && Object2.ApplicantId != null )
			{
				if (Object1.ApplicantId != Object2.ApplicantId)
					equal = false;
			}
			else if (Object1.ApplicantId == null ^ Object1.ApplicantId == null )
			{
				equal = false;
			}
			if (Object1.FeeStudFeeItemId != null && Object2.FeeStudFeeItemId != null )
			{
				if (Object1.FeeStudFeeItemId != Object2.FeeStudFeeItemId)
					equal = false;
			}
			else if (Object1.FeeStudFeeItemId == null ^ Object1.FeeStudFeeItemId == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(GetAllTransactionFeesViewB415102017 entity, string propertyName)
		{
			switch (propertyName)
			{
				case "EdStudId":
					return entity.EdStudId;
				case "FeesId":
					return entity.FeesId;
				case "FeeCodeItemId":
					return entity.FeeCodeItemId;
				case "TransactionDate":
					return entity.TransactionDate;
				case "YearId":
					return entity.YearId;
				case "Semester":
					return entity.Semester;
				case "Depit":
					return entity.Depit;
				case "Credit":
					return entity.Credit;
				case "Credit2":
					return entity.Credit2;
				case "TransactionType":
					return entity.TransactionType;
				case "DiscType":
					return entity.DiscType;
				case "DiscountStatus":
					return entity.DiscountStatus;
				case "DiscCat":
					return entity.DiscCat;
				case "RefundType":
					return entity.RefundType;
				case "YearOfLoad":
					return entity.YearOfLoad;
				case "SemOfLoad":
					return entity.SemOfLoad;
				case "PayMethod":
					return entity.PayMethod;
				case "Credit3":
					return entity.Credit3;
				case "RefundValue":
					return entity.RefundValue;
				case "VouchearId":
					return entity.VouchearId;
				case "RecieptNum":
					return entity.RecieptNum;
				case "ApplicantId":
					return entity.ApplicantId;
				case "FeeStudFeeItemId":
					return entity.FeeStudFeeItemId;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as GetAllTransactionFeesViewB415102017, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{24}{23}- EdStudId: {0}{23}- FeesId: {1}{23}- FeeCodeItemId: {2}{23}- TransactionDate: {3}{23}- YearId: {4}{23}- Semester: {5}{23}- Depit: {6}{23}- Credit: {7}{23}- Credit2: {8}{23}- TransactionType: {9}{23}- DiscType: {10}{23}- DiscountStatus: {11}{23}- DiscCat: {12}{23}- RefundType: {13}{23}- YearOfLoad: {14}{23}- SemOfLoad: {15}{23}- PayMethod: {16}{23}- Credit3: {17}{23}- RefundValue: {18}{23}- VouchearId: {19}{23}- RecieptNum: {20}{23}- ApplicantId: {21}{23}- FeeStudFeeItemId: {22}{23}", 
				(this.EdStudId == null) ? string.Empty : this.EdStudId.ToString(),
			     
				(this.FeesId == null) ? string.Empty : this.FeesId.ToString(),
			     
				this.FeeCodeItemId,
				(this.TransactionDate == null) ? string.Empty : this.TransactionDate.ToString(),
			     
				this.YearId,
				(this.Semester == null) ? string.Empty : this.Semester.ToString(),
			     
				(this.Depit == null) ? string.Empty : this.Depit.ToString(),
			     
				(this.Credit == null) ? string.Empty : this.Credit.ToString(),
			     
				(this.Credit2 == null) ? string.Empty : this.Credit2.ToString(),
			     
				this.TransactionType,
				(this.DiscType == null) ? string.Empty : this.DiscType.ToString(),
			     
				(this.DiscountStatus == null) ? string.Empty : this.DiscountStatus.ToString(),
			     
				(this.DiscCat == null) ? string.Empty : this.DiscCat.ToString(),
			     
				(this.RefundType == null) ? string.Empty : this.RefundType.ToString(),
			     
				(this.YearOfLoad == null) ? string.Empty : this.YearOfLoad.ToString(),
			     
				(this.SemOfLoad == null) ? string.Empty : this.SemOfLoad.ToString(),
			     
				(this.PayMethod == null) ? string.Empty : this.PayMethod.ToString(),
			     
				(this.Credit3 == null) ? string.Empty : this.Credit3.ToString(),
			     
				(this.RefundValue == null) ? string.Empty : this.RefundValue.ToString(),
			     
				(this.VouchearId == null) ? string.Empty : this.VouchearId.ToString(),
			     
				(this.RecieptNum == null) ? string.Empty : this.RecieptNum.ToString(),
			     
				(this.ApplicantId == null) ? string.Empty : this.ApplicantId.ToString(),
			     
				(this.FeeStudFeeItemId == null) ? string.Empty : this.FeeStudFeeItemId.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the GetAllTransactionFeesViewB415102017 columns.
	/// </summary>
	[Serializable]
	public enum GetAllTransactionFeesViewB415102017Column
	{
		/// <summary>
		/// EdStudId : 
		/// </summary>
		[EnumTextValue("EdStudId")]
		[ColumnEnum("EdStudId", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdStudId,
		/// <summary>
		/// FeesId : 
		/// </summary>
		[EnumTextValue("FeesId")]
		[ColumnEnum("FeesId", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeesId,
		/// <summary>
		/// FeeCodeItemId : 
		/// </summary>
		[EnumTextValue("FeeCodeItemId")]
		[ColumnEnum("FeeCodeItemId", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		FeeCodeItemId,
		/// <summary>
		/// TransactionDate : 
		/// </summary>
		[EnumTextValue("TransactionDate")]
		[ColumnEnum("TransactionDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		TransactionDate,
		/// <summary>
		/// YearId : 
		/// </summary>
		[EnumTextValue("YearId")]
		[ColumnEnum("YearId", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		YearId,
		/// <summary>
		/// Semester : 
		/// </summary>
		[EnumTextValue("Semester")]
		[ColumnEnum("Semester", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Semester,
		/// <summary>
		/// Depit : 
		/// </summary>
		[EnumTextValue("Depit")]
		[ColumnEnum("Depit", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Depit,
		/// <summary>
		/// Credit : 
		/// </summary>
		[EnumTextValue("Credit")]
		[ColumnEnum("Credit", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Credit,
		/// <summary>
		/// Credit2 : 
		/// </summary>
		[EnumTextValue("Credit2")]
		[ColumnEnum("Credit2", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Credit2,
		/// <summary>
		/// TransactionType : 
		/// </summary>
		[EnumTextValue("TransactionType")]
		[ColumnEnum("TransactionType", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		TransactionType,
		/// <summary>
		/// DiscType : 
		/// </summary>
		[EnumTextValue("DiscType")]
		[ColumnEnum("DiscType", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DiscType,
		/// <summary>
		/// DiscountStatus : 
		/// </summary>
		[EnumTextValue("DiscountStatus")]
		[ColumnEnum("DiscountStatus", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DiscountStatus,
		/// <summary>
		/// DiscCat : 
		/// </summary>
		[EnumTextValue("DiscCat")]
		[ColumnEnum("DiscCat", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DiscCat,
		/// <summary>
		/// RefundType : 
		/// </summary>
		[EnumTextValue("RefundType")]
		[ColumnEnum("RefundType", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		RefundType,
		/// <summary>
		/// YearOfLoad : 
		/// </summary>
		[EnumTextValue("YearOfLoad")]
		[ColumnEnum("YearOfLoad", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		YearOfLoad,
		/// <summary>
		/// SemOfLoad : 
		/// </summary>
		[EnumTextValue("SemOfLoad")]
		[ColumnEnum("SemOfLoad", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SemOfLoad,
		/// <summary>
		/// PayMethod : 
		/// </summary>
		[EnumTextValue("PayMethod")]
		[ColumnEnum("PayMethod", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PayMethod,
		/// <summary>
		/// credit3 : 
		/// </summary>
		[EnumTextValue("credit3")]
		[ColumnEnum("credit3", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Credit3,
		/// <summary>
		/// refundValue : 
		/// </summary>
		[EnumTextValue("refundValue")]
		[ColumnEnum("refundValue", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RefundValue,
		/// <summary>
		/// VouchearId : 
		/// </summary>
		[EnumTextValue("VouchearId")]
		[ColumnEnum("VouchearId", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		VouchearId,
		/// <summary>
		/// recieptNum : 
		/// </summary>
		[EnumTextValue("recieptNum")]
		[ColumnEnum("recieptNum", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		RecieptNum,
		/// <summary>
		/// ApplicantId : 
		/// </summary>
		[EnumTextValue("ApplicantId")]
		[ColumnEnum("ApplicantId", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ApplicantId,
		/// <summary>
		/// FeeStudFeeItemId : 
		/// </summary>
		[EnumTextValue("FeeStudFeeItemId")]
		[ColumnEnum("FeeStudFeeItemId", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeeStudFeeItemId
	}//End enum

} // end namespace
