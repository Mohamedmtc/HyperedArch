/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ApplicantRequiredDocumentView.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ApplicantRequiredDocument_View' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("ApplicantRequiredDocumentViewBase")]
	public abstract partial class ApplicantRequiredDocumentViewBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// ENT_MAIN_ID : 
		/// </summary>
		private System.Decimal		  _entMainId = 0.0m;
		
		/// <summary>
		/// ENT_DESCR_AR : 
		/// </summary>
		private System.String		  _entDescrAr = null;
		
		/// <summary>
		/// ENT_DESCR_EN : 
		/// </summary>
		private System.String		  _entDescrEn = null;
		
		/// <summary>
		/// DESCR_AR : 
		/// </summary>
		private System.String		  _descrAr = null;
		
		/// <summary>
		/// DESCR_EN : 
		/// </summary>
		private System.String		  _descrEn = null;
		
		/// <summary>
		/// DOC_TYPE_FLG : 
		/// </summary>
		private System.Decimal		  _docTypeFlg = 0.0m;
		
		/// <summary>
		/// CLASS_DESCR_AR : 
		/// </summary>
		private System.String		  _classDescrAr = string.Empty;
		
		/// <summary>
		/// CLASS_DESCR_EN : 
		/// </summary>
		private System.String		  _classDescrEn = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_CLASS_ID : 
		/// </summary>
		private System.Decimal?		  _asCodeDegreeClassId = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ApplicantRequiredDocumentViewBase"/> instance.
		///</summary>
		public ApplicantRequiredDocumentViewBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="ApplicantRequiredDocumentViewBase"/> instance.
		///</summary>
		///<param name="_entMainId"></param>
		///<param name="_entDescrAr"></param>
		///<param name="_entDescrEn"></param>
		///<param name="_descrAr"></param>
		///<param name="_descrEn"></param>
		///<param name="_docTypeFlg"></param>
		///<param name="_classDescrAr"></param>
		///<param name="_classDescrEn"></param>
		///<param name="_asCodeDegreeClassId"></param>
		public ApplicantRequiredDocumentViewBase(System.Decimal _entMainId, System.String _entDescrAr, System.String _entDescrEn, System.String _descrAr, System.String _descrEn, System.Decimal _docTypeFlg, System.String _classDescrAr, System.String _classDescrEn, System.Decimal? _asCodeDegreeClassId)
		{
			this._entMainId = _entMainId;
			this._entDescrAr = _entDescrAr;
			this._entDescrEn = _entDescrEn;
			this._descrAr = _descrAr;
			this._descrEn = _descrEn;
			this._docTypeFlg = _docTypeFlg;
			this._classDescrAr = _classDescrAr;
			this._classDescrEn = _classDescrEn;
			this._asCodeDegreeClassId = _asCodeDegreeClassId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ApplicantRequiredDocumentView"/> instance.
		///</summary>
		///<param name="_entMainId"></param>
		///<param name="_entDescrAr"></param>
		///<param name="_entDescrEn"></param>
		///<param name="_descrAr"></param>
		///<param name="_descrEn"></param>
		///<param name="_docTypeFlg"></param>
		///<param name="_classDescrAr"></param>
		///<param name="_classDescrEn"></param>
		///<param name="_asCodeDegreeClassId"></param>
		public static ApplicantRequiredDocumentView CreateApplicantRequiredDocumentView(System.Decimal _entMainId, System.String _entDescrAr, System.String _entDescrEn, System.String _descrAr, System.String _descrEn, System.Decimal _docTypeFlg, System.String _classDescrAr, System.String _classDescrEn, System.Decimal? _asCodeDegreeClassId)
		{
			ApplicantRequiredDocumentView newApplicantRequiredDocumentView = new ApplicantRequiredDocumentView();
			newApplicantRequiredDocumentView.EntMainId = _entMainId;
			newApplicantRequiredDocumentView.EntDescrAr = _entDescrAr;
			newApplicantRequiredDocumentView.EntDescrEn = _entDescrEn;
			newApplicantRequiredDocumentView.DescrAr = _descrAr;
			newApplicantRequiredDocumentView.DescrEn = _descrEn;
			newApplicantRequiredDocumentView.DocTypeFlg = _docTypeFlg;
			newApplicantRequiredDocumentView.ClassDescrAr = _classDescrAr;
			newApplicantRequiredDocumentView.ClassDescrEn = _classDescrEn;
			newApplicantRequiredDocumentView.AsCodeDegreeClassId = _asCodeDegreeClassId;
			return newApplicantRequiredDocumentView;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the ENT_MAIN_ID property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal EntMainId
		{
			get
			{
				return this._entMainId; 
			}
			set
			{
				if (_entMainId == value)
					return;
					
				this._entMainId = value;
				this._isDirty = true;
				
				OnPropertyChanged("EntMainId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ENT_DESCR_AR property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String EntDescrAr
		{
			get
			{
				return this._entDescrAr; 
			}
			set
			{
				if (_entDescrAr == value)
					return;
					
				this._entDescrAr = value;
				this._isDirty = true;
				
				OnPropertyChanged("EntDescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ENT_DESCR_EN property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String EntDescrEn
		{
			get
			{
				return this._entDescrEn; 
			}
			set
			{
				if (_entDescrEn == value)
					return;
					
				this._entDescrEn = value;
				this._isDirty = true;
				
				OnPropertyChanged("EntDescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DESCR_AR property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DescrAr
		{
			get
			{
				return this._descrAr; 
			}
			set
			{
				if (_descrAr == value)
					return;
					
				this._descrAr = value;
				this._isDirty = true;
				
				OnPropertyChanged("DescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DESCR_EN property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DescrEn
		{
			get
			{
				return this._descrEn; 
			}
			set
			{
				if (_descrEn == value)
					return;
					
				this._descrEn = value;
				this._isDirty = true;
				
				OnPropertyChanged("DescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DOC_TYPE_FLG property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal DocTypeFlg
		{
			get
			{
				return this._docTypeFlg; 
			}
			set
			{
				if (_docTypeFlg == value)
					return;
					
				this._docTypeFlg = value;
				this._isDirty = true;
				
				OnPropertyChanged("DocTypeFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CLASS_DESCR_AR property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ClassDescrAr
		{
			get
			{
				return this._classDescrAr; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "ClassDescrAr does not allow null values.");
				if (_classDescrAr == value)
					return;
					
				this._classDescrAr = value;
				this._isDirty = true;
				
				OnPropertyChanged("ClassDescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CLASS_DESCR_EN property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ClassDescrEn
		{
			get
			{
				return this._classDescrEn; 
			}
			set
			{
				if (_classDescrEn == value)
					return;
					
				this._classDescrEn = value;
				this._isDirty = true;
				
				OnPropertyChanged("ClassDescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the AS_CODE_DEGREE_CLASS_ID property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeClassIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? AsCodeDegreeClassId
		{
			get
			{
				return this._asCodeDegreeClassId; 
			}
			set
			{
				if (_asCodeDegreeClassId == value && AsCodeDegreeClassId != null )
					return;
					
				this._asCodeDegreeClassId = value;
				this._isDirty = true;
				
				OnPropertyChanged("AsCodeDegreeClassId");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "ApplicantRequiredDocument_View"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ApplicantRequiredDocumentViewBase Entity 
		///</summary>
		public virtual ApplicantRequiredDocumentViewBase Copy()
		{
			//shallow copy entity
			ApplicantRequiredDocumentView copy = new ApplicantRequiredDocumentView();
				copy.EntMainId = this.EntMainId;
				copy.EntDescrAr = this.EntDescrAr;
				copy.EntDescrEn = this.EntDescrEn;
				copy.DescrAr = this.DescrAr;
				copy.DescrEn = this.DescrEn;
				copy.DocTypeFlg = this.DocTypeFlg;
				copy.ClassDescrAr = this.ClassDescrAr;
				copy.ClassDescrEn = this.ClassDescrEn;
				copy.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			copy.AcceptChanges();
			return (ApplicantRequiredDocumentView)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ApplicantRequiredDocumentViewBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ApplicantRequiredDocumentViewBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ApplicantRequiredDocumentViewBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ApplicantRequiredDocumentViewBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ApplicantRequiredDocumentViewBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ApplicantRequiredDocumentViewBase Object1, ApplicantRequiredDocumentViewBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.EntMainId != Object2.EntMainId)
				equal = false;
			if (Object1.EntDescrAr != null && Object2.EntDescrAr != null )
			{
				if (Object1.EntDescrAr != Object2.EntDescrAr)
					equal = false;
			}
			else if (Object1.EntDescrAr == null ^ Object1.EntDescrAr == null )
			{
				equal = false;
			}
			if (Object1.EntDescrEn != null && Object2.EntDescrEn != null )
			{
				if (Object1.EntDescrEn != Object2.EntDescrEn)
					equal = false;
			}
			else if (Object1.EntDescrEn == null ^ Object1.EntDescrEn == null )
			{
				equal = false;
			}
			if (Object1.DescrAr != null && Object2.DescrAr != null )
			{
				if (Object1.DescrAr != Object2.DescrAr)
					equal = false;
			}
			else if (Object1.DescrAr == null ^ Object1.DescrAr == null )
			{
				equal = false;
			}
			if (Object1.DescrEn != null && Object2.DescrEn != null )
			{
				if (Object1.DescrEn != Object2.DescrEn)
					equal = false;
			}
			else if (Object1.DescrEn == null ^ Object1.DescrEn == null )
			{
				equal = false;
			}
			if (Object1.DocTypeFlg != Object2.DocTypeFlg)
				equal = false;
			if (Object1.ClassDescrAr != Object2.ClassDescrAr)
				equal = false;
			if (Object1.ClassDescrEn != null && Object2.ClassDescrEn != null )
			{
				if (Object1.ClassDescrEn != Object2.ClassDescrEn)
					equal = false;
			}
			else if (Object1.ClassDescrEn == null ^ Object1.ClassDescrEn == null )
			{
				equal = false;
			}
			if (Object1.AsCodeDegreeClassId != null && Object2.AsCodeDegreeClassId != null )
			{
				if (Object1.AsCodeDegreeClassId != Object2.AsCodeDegreeClassId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeClassId == null ^ Object1.AsCodeDegreeClassId == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(ApplicantRequiredDocumentView entity, string propertyName)
		{
			switch (propertyName)
			{
				case "EntMainId":
					return entity.EntMainId;
				case "EntDescrAr":
					return entity.EntDescrAr;
				case "EntDescrEn":
					return entity.EntDescrEn;
				case "DescrAr":
					return entity.DescrAr;
				case "DescrEn":
					return entity.DescrEn;
				case "DocTypeFlg":
					return entity.DocTypeFlg;
				case "ClassDescrAr":
					return entity.ClassDescrAr;
				case "ClassDescrEn":
					return entity.ClassDescrEn;
				case "AsCodeDegreeClassId":
					return entity.AsCodeDegreeClassId;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as ApplicantRequiredDocumentView, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- EntMainId: {0}{9}- EntDescrAr: {1}{9}- EntDescrEn: {2}{9}- DescrAr: {3}{9}- DescrEn: {4}{9}- DocTypeFlg: {5}{9}- ClassDescrAr: {6}{9}- ClassDescrEn: {7}{9}- AsCodeDegreeClassId: {8}{9}", 
				this.EntMainId,
				(this.EntDescrAr == null) ? string.Empty : this.EntDescrAr.ToString(),
			     
				(this.EntDescrEn == null) ? string.Empty : this.EntDescrEn.ToString(),
			     
				(this.DescrAr == null) ? string.Empty : this.DescrAr.ToString(),
			     
				(this.DescrEn == null) ? string.Empty : this.DescrEn.ToString(),
			     
				this.DocTypeFlg,
				this.ClassDescrAr,
				(this.ClassDescrEn == null) ? string.Empty : this.ClassDescrEn.ToString(),
			     
				(this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the ApplicantRequiredDocumentView columns.
	/// </summary>
	[Serializable]
	public enum ApplicantRequiredDocumentViewColumn
	{
		/// <summary>
		/// ENT_MAIN_ID : 
		/// </summary>
		[EnumTextValue("ENT_MAIN_ID")]
		[ColumnEnum("ENT_MAIN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EntMainId,
		/// <summary>
		/// ENT_DESCR_AR : 
		/// </summary>
		[EnumTextValue("ENT_DESCR_AR")]
		[ColumnEnum("ENT_DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		EntDescrAr,
		/// <summary>
		/// ENT_DESCR_EN : 
		/// </summary>
		[EnumTextValue("ENT_DESCR_EN")]
		[ColumnEnum("ENT_DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		EntDescrEn,
		/// <summary>
		/// DESCR_AR : 
		/// </summary>
		[EnumTextValue("DESCR_AR")]
		[ColumnEnum("DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		DescrAr,
		/// <summary>
		/// DESCR_EN : 
		/// </summary>
		[EnumTextValue("DESCR_EN")]
		[ColumnEnum("DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		DescrEn,
		/// <summary>
		/// DOC_TYPE_FLG : 
		/// </summary>
		[EnumTextValue("DOC_TYPE_FLG")]
		[ColumnEnum("DOC_TYPE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		DocTypeFlg,
		/// <summary>
		/// CLASS_DESCR_AR : 
		/// </summary>
		[EnumTextValue("CLASS_DESCR_AR")]
		[ColumnEnum("CLASS_DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		ClassDescrAr,
		/// <summary>
		/// CLASS_DESCR_EN : 
		/// </summary>
		[EnumTextValue("CLASS_DESCR_EN")]
		[ColumnEnum("CLASS_DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		ClassDescrEn,
		/// <summary>
		/// AS_CODE_DEGREE_CLASS_ID : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_CLASS_ID")]
		[ColumnEnum("AS_CODE_DEGREE_CLASS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeClassId
	}//End enum

} // end namespace
