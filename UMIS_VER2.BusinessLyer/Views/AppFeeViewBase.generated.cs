/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AppFeeView.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'APP_FEE_VIEW' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("AppFeeViewBase")]
	public abstract partial class AppFeeViewBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// DESCR_AR : 
		/// </summary>
		private System.String		  _descrAr = string.Empty;
		
		/// <summary>
		/// DESCR_EN : 
		/// </summary>
		private System.String		  _descrEn = string.Empty;
		
		/// <summary>
		/// AMOUNT : 
		/// </summary>
		private System.Decimal		  _amount = 0.0m;
		
		/// <summary>
		/// CURRENCY_DESCR_AR : 
		/// </summary>
		private System.String		  _currencyDescrAr = string.Empty;
		
		/// <summary>
		/// CURRENCY_DESCR_EN : 
		/// </summary>
		private System.String		  _currencyDescrEn = null;
		
		/// <summary>
		/// AUTOLOAD_FLG : 
		/// </summary>
		private System.Decimal		  _autoloadFlg = 0.0m;
		
		/// <summary>
		/// TRANS_APP_FLG : 
		/// </summary>
		private System.Decimal		  _transAppFlg = 0.0m;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AppFeeViewBase"/> instance.
		///</summary>
		public AppFeeViewBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="AppFeeViewBase"/> instance.
		///</summary>
		///<param name="_descrAr"></param>
		///<param name="_descrEn"></param>
		///<param name="_amount"></param>
		///<param name="_currencyDescrAr"></param>
		///<param name="_currencyDescrEn"></param>
		///<param name="_autoloadFlg"></param>
		///<param name="_transAppFlg"></param>
		public AppFeeViewBase(System.String _descrAr, System.String _descrEn, System.Decimal _amount, System.String _currencyDescrAr, System.String _currencyDescrEn, System.Decimal _autoloadFlg, System.Decimal _transAppFlg)
		{
			this._descrAr = _descrAr;
			this._descrEn = _descrEn;
			this._amount = _amount;
			this._currencyDescrAr = _currencyDescrAr;
			this._currencyDescrEn = _currencyDescrEn;
			this._autoloadFlg = _autoloadFlg;
			this._transAppFlg = _transAppFlg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AppFeeView"/> instance.
		///</summary>
		///<param name="_descrAr"></param>
		///<param name="_descrEn"></param>
		///<param name="_amount"></param>
		///<param name="_currencyDescrAr"></param>
		///<param name="_currencyDescrEn"></param>
		///<param name="_autoloadFlg"></param>
		///<param name="_transAppFlg"></param>
		public static AppFeeView CreateAppFeeView(System.String _descrAr, System.String _descrEn, System.Decimal _amount, System.String _currencyDescrAr, System.String _currencyDescrEn, System.Decimal _autoloadFlg, System.Decimal _transAppFlg)
		{
			AppFeeView newAppFeeView = new AppFeeView();
			newAppFeeView.DescrAr = _descrAr;
			newAppFeeView.DescrEn = _descrEn;
			newAppFeeView.Amount = _amount;
			newAppFeeView.CurrencyDescrAr = _currencyDescrAr;
			newAppFeeView.CurrencyDescrEn = _currencyDescrEn;
			newAppFeeView.AutoloadFlg = _autoloadFlg;
			newAppFeeView.TransAppFlg = _transAppFlg;
			return newAppFeeView;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the DESCR_AR property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DescrAr
		{
			get
			{
				return this._descrAr; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "DescrAr does not allow null values.");
				if (_descrAr == value)
					return;
					
				this._descrAr = value;
				this._isDirty = true;
				
				OnPropertyChanged("DescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DESCR_EN property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DescrEn
		{
			get
			{
				return this._descrEn; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "DescrEn does not allow null values.");
				if (_descrEn == value)
					return;
					
				this._descrEn = value;
				this._isDirty = true;
				
				OnPropertyChanged("DescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the AMOUNT property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal Amount
		{
			get
			{
				return this._amount; 
			}
			set
			{
				if (_amount == value)
					return;
					
				this._amount = value;
				this._isDirty = true;
				
				OnPropertyChanged("Amount");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CURRENCY_DESCR_AR property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CurrencyDescrAr
		{
			get
			{
				return this._currencyDescrAr; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "CurrencyDescrAr does not allow null values.");
				if (_currencyDescrAr == value)
					return;
					
				this._currencyDescrAr = value;
				this._isDirty = true;
				
				OnPropertyChanged("CurrencyDescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CURRENCY_DESCR_EN property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CurrencyDescrEn
		{
			get
			{
				return this._currencyDescrEn; 
			}
			set
			{
				if (_currencyDescrEn == value)
					return;
					
				this._currencyDescrEn = value;
				this._isDirty = true;
				
				OnPropertyChanged("CurrencyDescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the AUTOLOAD_FLG property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal AutoloadFlg
		{
			get
			{
				return this._autoloadFlg; 
			}
			set
			{
				if (_autoloadFlg == value)
					return;
					
				this._autoloadFlg = value;
				this._isDirty = true;
				
				OnPropertyChanged("AutoloadFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the TRANS_APP_FLG property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal TransAppFlg
		{
			get
			{
				return this._transAppFlg; 
			}
			set
			{
				if (_transAppFlg == value)
					return;
					
				this._transAppFlg = value;
				this._isDirty = true;
				
				OnPropertyChanged("TransAppFlg");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "APP_FEE_VIEW"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AppFeeViewBase Entity 
		///</summary>
		public virtual AppFeeViewBase Copy()
		{
			//shallow copy entity
			AppFeeView copy = new AppFeeView();
				copy.DescrAr = this.DescrAr;
				copy.DescrEn = this.DescrEn;
				copy.Amount = this.Amount;
				copy.CurrencyDescrAr = this.CurrencyDescrAr;
				copy.CurrencyDescrEn = this.CurrencyDescrEn;
				copy.AutoloadFlg = this.AutoloadFlg;
				copy.TransAppFlg = this.TransAppFlg;
			copy.AcceptChanges();
			return (AppFeeView)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AppFeeViewBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AppFeeViewBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="AppFeeViewBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="AppFeeViewBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AppFeeViewBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(AppFeeViewBase Object1, AppFeeViewBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.DescrAr != Object2.DescrAr)
				equal = false;
			if (Object1.DescrEn != Object2.DescrEn)
				equal = false;
			if (Object1.Amount != Object2.Amount)
				equal = false;
			if (Object1.CurrencyDescrAr != Object2.CurrencyDescrAr)
				equal = false;
			if (Object1.CurrencyDescrEn != null && Object2.CurrencyDescrEn != null )
			{
				if (Object1.CurrencyDescrEn != Object2.CurrencyDescrEn)
					equal = false;
			}
			else if (Object1.CurrencyDescrEn == null ^ Object1.CurrencyDescrEn == null )
			{
				equal = false;
			}
			if (Object1.AutoloadFlg != Object2.AutoloadFlg)
				equal = false;
			if (Object1.TransAppFlg != Object2.TransAppFlg)
				equal = false;
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(AppFeeView entity, string propertyName)
		{
			switch (propertyName)
			{
				case "DescrAr":
					return entity.DescrAr;
				case "DescrEn":
					return entity.DescrEn;
				case "Amount":
					return entity.Amount;
				case "CurrencyDescrAr":
					return entity.CurrencyDescrAr;
				case "CurrencyDescrEn":
					return entity.CurrencyDescrEn;
				case "AutoloadFlg":
					return entity.AutoloadFlg;
				case "TransAppFlg":
					return entity.TransAppFlg;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as AppFeeView, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{8}{7}- DescrAr: {0}{7}- DescrEn: {1}{7}- Amount: {2}{7}- CurrencyDescrAr: {3}{7}- CurrencyDescrEn: {4}{7}- AutoloadFlg: {5}{7}- TransAppFlg: {6}{7}", 
				this.DescrAr,
				this.DescrEn,
				this.Amount,
				this.CurrencyDescrAr,
				(this.CurrencyDescrEn == null) ? string.Empty : this.CurrencyDescrEn.ToString(),
			     
				this.AutoloadFlg,
				this.TransAppFlg,
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the AppFeeView columns.
	/// </summary>
	[Serializable]
	public enum AppFeeViewColumn
	{
		/// <summary>
		/// DESCR_AR : 
		/// </summary>
		[EnumTextValue("DESCR_AR")]
		[ColumnEnum("DESCR_AR", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		DescrAr,
		/// <summary>
		/// DESCR_EN : 
		/// </summary>
		[EnumTextValue("DESCR_EN")]
		[ColumnEnum("DESCR_EN", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		DescrEn,
		/// <summary>
		/// AMOUNT : 
		/// </summary>
		[EnumTextValue("AMOUNT")]
		[ColumnEnum("AMOUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		Amount,
		/// <summary>
		/// CURRENCY_DESCR_AR : 
		/// </summary>
		[EnumTextValue("CURRENCY_DESCR_AR")]
		[ColumnEnum("CURRENCY_DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 70)]
		CurrencyDescrAr,
		/// <summary>
		/// CURRENCY_DESCR_EN : 
		/// </summary>
		[EnumTextValue("CURRENCY_DESCR_EN")]
		[ColumnEnum("CURRENCY_DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 70)]
		CurrencyDescrEn,
		/// <summary>
		/// AUTOLOAD_FLG : 
		/// </summary>
		[EnumTextValue("AUTOLOAD_FLG")]
		[ColumnEnum("AUTOLOAD_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AutoloadFlg,
		/// <summary>
		/// TRANS_APP_FLG : 
		/// </summary>
		[EnumTextValue("TRANS_APP_FLG")]
		[ColumnEnum("TRANS_APP_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		TransAppFlg
	}//End enum

} // end namespace
