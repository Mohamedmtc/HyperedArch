/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file StaffAcademicLoads.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'StaffAcademicLoads' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("StaffAcademicLoadsBase")]
	public abstract partial class StaffAcademicLoadsBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// YEAR_DESCR_EN : 
		/// </summary>
		private System.String		  _yearDescrEn = null;
		
		/// <summary>
		/// SEMESTER_DESCR_EN : 
		/// </summary>
		private System.String		  _semesterDescrEn = null;
		
		/// <summary>
		/// FACULTY_DESCR_EN : 
		/// </summary>
		private System.String		  _facultyDescrEn = null;
		
		/// <summary>
		/// DEPARTMENT_DESCR_EN : 
		/// </summary>
		private System.String		  _departmentDescrEn = null;
		
		/// <summary>
		/// STF_FULL_NAME_AR : 
		/// </summary>
		private System.String		  _stfFullNameAr = null;
		
		/// <summary>
		/// STF_FULL_NAME_EN : 
		/// </summary>
		private System.String		  _stfFullNameEn = null;
		
		/// <summary>
		/// STF_CODE : 
		/// </summary>
		private System.String		  _stfCode = null;
		
		/// <summary>
		/// NORMAL_LOAD : 
		/// </summary>
		private System.Decimal		  _normalLoad = 0.0m;
		
		/// <summary>
		/// EXTRA_LOAD : 
		/// </summary>
		private System.Decimal?		  _extraLoad = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="StaffAcademicLoadsBase"/> instance.
		///</summary>
		public StaffAcademicLoadsBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="StaffAcademicLoadsBase"/> instance.
		///</summary>
		///<param name="_yearDescrEn"></param>
		///<param name="_semesterDescrEn"></param>
		///<param name="_facultyDescrEn"></param>
		///<param name="_departmentDescrEn"></param>
		///<param name="_stfFullNameAr"></param>
		///<param name="_stfFullNameEn"></param>
		///<param name="_stfCode"></param>
		///<param name="_normalLoad"></param>
		///<param name="_extraLoad"></param>
		public StaffAcademicLoadsBase(System.String _yearDescrEn, System.String _semesterDescrEn, System.String _facultyDescrEn, System.String _departmentDescrEn, System.String _stfFullNameAr, System.String _stfFullNameEn, System.String _stfCode, System.Decimal _normalLoad, System.Decimal? _extraLoad)
		{
			this._yearDescrEn = _yearDescrEn;
			this._semesterDescrEn = _semesterDescrEn;
			this._facultyDescrEn = _facultyDescrEn;
			this._departmentDescrEn = _departmentDescrEn;
			this._stfFullNameAr = _stfFullNameAr;
			this._stfFullNameEn = _stfFullNameEn;
			this._stfCode = _stfCode;
			this._normalLoad = _normalLoad;
			this._extraLoad = _extraLoad;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="StaffAcademicLoads"/> instance.
		///</summary>
		///<param name="_yearDescrEn"></param>
		///<param name="_semesterDescrEn"></param>
		///<param name="_facultyDescrEn"></param>
		///<param name="_departmentDescrEn"></param>
		///<param name="_stfFullNameAr"></param>
		///<param name="_stfFullNameEn"></param>
		///<param name="_stfCode"></param>
		///<param name="_normalLoad"></param>
		///<param name="_extraLoad"></param>
		public static StaffAcademicLoads CreateStaffAcademicLoads(System.String _yearDescrEn, System.String _semesterDescrEn, System.String _facultyDescrEn, System.String _departmentDescrEn, System.String _stfFullNameAr, System.String _stfFullNameEn, System.String _stfCode, System.Decimal _normalLoad, System.Decimal? _extraLoad)
		{
			StaffAcademicLoads newStaffAcademicLoads = new StaffAcademicLoads();
			newStaffAcademicLoads.YearDescrEn = _yearDescrEn;
			newStaffAcademicLoads.SemesterDescrEn = _semesterDescrEn;
			newStaffAcademicLoads.FacultyDescrEn = _facultyDescrEn;
			newStaffAcademicLoads.DepartmentDescrEn = _departmentDescrEn;
			newStaffAcademicLoads.StfFullNameAr = _stfFullNameAr;
			newStaffAcademicLoads.StfFullNameEn = _stfFullNameEn;
			newStaffAcademicLoads.StfCode = _stfCode;
			newStaffAcademicLoads.NormalLoad = _normalLoad;
			newStaffAcademicLoads.ExtraLoad = _extraLoad;
			return newStaffAcademicLoads;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the YEAR_DESCR_EN property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String YearDescrEn
		{
			get
			{
				return this._yearDescrEn; 
			}
			set
			{
				if (_yearDescrEn == value)
					return;
					
				this._yearDescrEn = value;
				this._isDirty = true;
				
				OnPropertyChanged("YearDescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SEMESTER_DESCR_EN property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SemesterDescrEn
		{
			get
			{
				return this._semesterDescrEn; 
			}
			set
			{
				if (_semesterDescrEn == value)
					return;
					
				this._semesterDescrEn = value;
				this._isDirty = true;
				
				OnPropertyChanged("SemesterDescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the FACULTY_DESCR_EN property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String FacultyDescrEn
		{
			get
			{
				return this._facultyDescrEn; 
			}
			set
			{
				if (_facultyDescrEn == value)
					return;
					
				this._facultyDescrEn = value;
				this._isDirty = true;
				
				OnPropertyChanged("FacultyDescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DEPARTMENT_DESCR_EN property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DepartmentDescrEn
		{
			get
			{
				return this._departmentDescrEn; 
			}
			set
			{
				if (_departmentDescrEn == value)
					return;
					
				this._departmentDescrEn = value;
				this._isDirty = true;
				
				OnPropertyChanged("DepartmentDescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the STF_FULL_NAME_AR property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String StfFullNameAr
		{
			get
			{
				return this._stfFullNameAr; 
			}
			set
			{
				if (_stfFullNameAr == value)
					return;
					
				this._stfFullNameAr = value;
				this._isDirty = true;
				
				OnPropertyChanged("StfFullNameAr");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the STF_FULL_NAME_EN property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String StfFullNameEn
		{
			get
			{
				return this._stfFullNameEn; 
			}
			set
			{
				if (_stfFullNameEn == value)
					return;
					
				this._stfFullNameEn = value;
				this._isDirty = true;
				
				OnPropertyChanged("StfFullNameEn");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the STF_CODE property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String StfCode
		{
			get
			{
				return this._stfCode; 
			}
			set
			{
				if (_stfCode == value)
					return;
					
				this._stfCode = value;
				this._isDirty = true;
				
				OnPropertyChanged("StfCode");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the NORMAL_LOAD property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal NormalLoad
		{
			get
			{
				return this._normalLoad; 
			}
			set
			{
				if (_normalLoad == value)
					return;
					
				this._normalLoad = value;
				this._isDirty = true;
				
				OnPropertyChanged("NormalLoad");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the EXTRA_LOAD property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsExtraLoadNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? ExtraLoad
		{
			get
			{
				return this._extraLoad; 
			}
			set
			{
				if (_extraLoad == value && ExtraLoad != null )
					return;
					
				this._extraLoad = value;
				this._isDirty = true;
				
				OnPropertyChanged("ExtraLoad");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "StaffAcademicLoads"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed StaffAcademicLoadsBase Entity 
		///</summary>
		public virtual StaffAcademicLoadsBase Copy()
		{
			//shallow copy entity
			StaffAcademicLoads copy = new StaffAcademicLoads();
				copy.YearDescrEn = this.YearDescrEn;
				copy.SemesterDescrEn = this.SemesterDescrEn;
				copy.FacultyDescrEn = this.FacultyDescrEn;
				copy.DepartmentDescrEn = this.DepartmentDescrEn;
				copy.StfFullNameAr = this.StfFullNameAr;
				copy.StfFullNameEn = this.StfFullNameEn;
				copy.StfCode = this.StfCode;
				copy.NormalLoad = this.NormalLoad;
				copy.ExtraLoad = this.ExtraLoad;
			copy.AcceptChanges();
			return (StaffAcademicLoads)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="StaffAcademicLoadsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(StaffAcademicLoadsBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="StaffAcademicLoadsBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="StaffAcademicLoadsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="StaffAcademicLoadsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(StaffAcademicLoadsBase Object1, StaffAcademicLoadsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.YearDescrEn != null && Object2.YearDescrEn != null )
			{
				if (Object1.YearDescrEn != Object2.YearDescrEn)
					equal = false;
			}
			else if (Object1.YearDescrEn == null ^ Object1.YearDescrEn == null )
			{
				equal = false;
			}
			if (Object1.SemesterDescrEn != null && Object2.SemesterDescrEn != null )
			{
				if (Object1.SemesterDescrEn != Object2.SemesterDescrEn)
					equal = false;
			}
			else if (Object1.SemesterDescrEn == null ^ Object1.SemesterDescrEn == null )
			{
				equal = false;
			}
			if (Object1.FacultyDescrEn != null && Object2.FacultyDescrEn != null )
			{
				if (Object1.FacultyDescrEn != Object2.FacultyDescrEn)
					equal = false;
			}
			else if (Object1.FacultyDescrEn == null ^ Object1.FacultyDescrEn == null )
			{
				equal = false;
			}
			if (Object1.DepartmentDescrEn != null && Object2.DepartmentDescrEn != null )
			{
				if (Object1.DepartmentDescrEn != Object2.DepartmentDescrEn)
					equal = false;
			}
			else if (Object1.DepartmentDescrEn == null ^ Object1.DepartmentDescrEn == null )
			{
				equal = false;
			}
			if (Object1.StfFullNameAr != null && Object2.StfFullNameAr != null )
			{
				if (Object1.StfFullNameAr != Object2.StfFullNameAr)
					equal = false;
			}
			else if (Object1.StfFullNameAr == null ^ Object1.StfFullNameAr == null )
			{
				equal = false;
			}
			if (Object1.StfFullNameEn != null && Object2.StfFullNameEn != null )
			{
				if (Object1.StfFullNameEn != Object2.StfFullNameEn)
					equal = false;
			}
			else if (Object1.StfFullNameEn == null ^ Object1.StfFullNameEn == null )
			{
				equal = false;
			}
			if (Object1.StfCode != null && Object2.StfCode != null )
			{
				if (Object1.StfCode != Object2.StfCode)
					equal = false;
			}
			else if (Object1.StfCode == null ^ Object1.StfCode == null )
			{
				equal = false;
			}
			if (Object1.NormalLoad != Object2.NormalLoad)
				equal = false;
			if (Object1.ExtraLoad != null && Object2.ExtraLoad != null )
			{
				if (Object1.ExtraLoad != Object2.ExtraLoad)
					equal = false;
			}
			else if (Object1.ExtraLoad == null ^ Object1.ExtraLoad == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(StaffAcademicLoads entity, string propertyName)
		{
			switch (propertyName)
			{
				case "YearDescrEn":
					return entity.YearDescrEn;
				case "SemesterDescrEn":
					return entity.SemesterDescrEn;
				case "FacultyDescrEn":
					return entity.FacultyDescrEn;
				case "DepartmentDescrEn":
					return entity.DepartmentDescrEn;
				case "StfFullNameAr":
					return entity.StfFullNameAr;
				case "StfFullNameEn":
					return entity.StfFullNameEn;
				case "StfCode":
					return entity.StfCode;
				case "NormalLoad":
					return entity.NormalLoad;
				case "ExtraLoad":
					return entity.ExtraLoad;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as StaffAcademicLoads, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- YearDescrEn: {0}{9}- SemesterDescrEn: {1}{9}- FacultyDescrEn: {2}{9}- DepartmentDescrEn: {3}{9}- StfFullNameAr: {4}{9}- StfFullNameEn: {5}{9}- StfCode: {6}{9}- NormalLoad: {7}{9}- ExtraLoad: {8}{9}", 
				(this.YearDescrEn == null) ? string.Empty : this.YearDescrEn.ToString(),
			     
				(this.SemesterDescrEn == null) ? string.Empty : this.SemesterDescrEn.ToString(),
			     
				(this.FacultyDescrEn == null) ? string.Empty : this.FacultyDescrEn.ToString(),
			     
				(this.DepartmentDescrEn == null) ? string.Empty : this.DepartmentDescrEn.ToString(),
			     
				(this.StfFullNameAr == null) ? string.Empty : this.StfFullNameAr.ToString(),
			     
				(this.StfFullNameEn == null) ? string.Empty : this.StfFullNameEn.ToString(),
			     
				(this.StfCode == null) ? string.Empty : this.StfCode.ToString(),
			     
				this.NormalLoad,
				(this.ExtraLoad == null) ? string.Empty : this.ExtraLoad.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the StaffAcademicLoads columns.
	/// </summary>
	[Serializable]
	public enum StaffAcademicLoadsColumn
	{
		/// <summary>
		/// YEAR_DESCR_EN : 
		/// </summary>
		[EnumTextValue("YEAR_DESCR_EN")]
		[ColumnEnum("YEAR_DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		YearDescrEn,
		/// <summary>
		/// SEMESTER_DESCR_EN : 
		/// </summary>
		[EnumTextValue("SEMESTER_DESCR_EN")]
		[ColumnEnum("SEMESTER_DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		SemesterDescrEn,
		/// <summary>
		/// FACULTY_DESCR_EN : 
		/// </summary>
		[EnumTextValue("FACULTY_DESCR_EN")]
		[ColumnEnum("FACULTY_DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		FacultyDescrEn,
		/// <summary>
		/// DEPARTMENT_DESCR_EN : 
		/// </summary>
		[EnumTextValue("DEPARTMENT_DESCR_EN")]
		[ColumnEnum("DEPARTMENT_DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		DepartmentDescrEn,
		/// <summary>
		/// STF_FULL_NAME_AR : 
		/// </summary>
		[EnumTextValue("STF_FULL_NAME_AR")]
		[ColumnEnum("STF_FULL_NAME_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		StfFullNameAr,
		/// <summary>
		/// STF_FULL_NAME_EN : 
		/// </summary>
		[EnumTextValue("STF_FULL_NAME_EN")]
		[ColumnEnum("STF_FULL_NAME_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		StfFullNameEn,
		/// <summary>
		/// STF_CODE : 
		/// </summary>
		[EnumTextValue("STF_CODE")]
		[ColumnEnum("STF_CODE", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		StfCode,
		/// <summary>
		/// NORMAL_LOAD : 
		/// </summary>
		[EnumTextValue("NORMAL_LOAD")]
		[ColumnEnum("NORMAL_LOAD", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		NormalLoad,
		/// <summary>
		/// EXTRA_LOAD : 
		/// </summary>
		[EnumTextValue("EXTRA_LOAD")]
		[ColumnEnum("EXTRA_LOAD", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ExtraLoad
	}//End enum

} // end namespace
