/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file VwGetAcadmicPlanCourses.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'Vw_GetAcadmicPlanCourses' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("VwGetAcadmicPlanCoursesBase")]
	public abstract partial class VwGetAcadmicPlanCoursesBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// ED_COURSE_ID : 
		/// </summary>
		private System.Decimal?		  _edCourseId = null;
		
		/// <summary>
		/// AcadPlanEntityMainID : 
		/// </summary>
		private System.Decimal		  _acadPlanEntityMainId = 0.0m;
		
		/// <summary>
		/// AcadPalnYearID : 
		/// </summary>
		private System.Decimal?		  _acadPalnYearId = null;
		
		/// <summary>
		/// PlanHdr_EdCodesemesterID : 
		/// </summary>
		private System.Decimal		  _planHdrEdCodesemesterId = 0.0m;
		
		/// <summary>
		/// PlanHdr_CodeLevelID : 
		/// </summary>
		private System.Decimal		  _planHdrCodeLevelId = 0.0m;
		
		/// <summary>
		/// PlanHdr_LevelOrder : 
		/// </summary>
		private System.Decimal?		  _planHdrLevelOrder = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VwGetAcadmicPlanCoursesBase"/> instance.
		///</summary>
		public VwGetAcadmicPlanCoursesBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="VwGetAcadmicPlanCoursesBase"/> instance.
		///</summary>
		///<param name="_edCourseId"></param>
		///<param name="_acadPlanEntityMainId"></param>
		///<param name="_acadPalnYearId"></param>
		///<param name="_planHdrEdCodesemesterId"></param>
		///<param name="_planHdrCodeLevelId"></param>
		///<param name="_planHdrLevelOrder"></param>
		public VwGetAcadmicPlanCoursesBase(System.Decimal? _edCourseId, System.Decimal _acadPlanEntityMainId, System.Decimal? _acadPalnYearId, System.Decimal _planHdrEdCodesemesterId, System.Decimal _planHdrCodeLevelId, System.Decimal? _planHdrLevelOrder)
		{
			this._edCourseId = _edCourseId;
			this._acadPlanEntityMainId = _acadPlanEntityMainId;
			this._acadPalnYearId = _acadPalnYearId;
			this._planHdrEdCodesemesterId = _planHdrEdCodesemesterId;
			this._planHdrCodeLevelId = _planHdrCodeLevelId;
			this._planHdrLevelOrder = _planHdrLevelOrder;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VwGetAcadmicPlanCourses"/> instance.
		///</summary>
		///<param name="_edCourseId"></param>
		///<param name="_acadPlanEntityMainId"></param>
		///<param name="_acadPalnYearId"></param>
		///<param name="_planHdrEdCodesemesterId"></param>
		///<param name="_planHdrCodeLevelId"></param>
		///<param name="_planHdrLevelOrder"></param>
		public static VwGetAcadmicPlanCourses CreateVwGetAcadmicPlanCourses(System.Decimal? _edCourseId, System.Decimal _acadPlanEntityMainId, System.Decimal? _acadPalnYearId, System.Decimal _planHdrEdCodesemesterId, System.Decimal _planHdrCodeLevelId, System.Decimal? _planHdrLevelOrder)
		{
			VwGetAcadmicPlanCourses newVwGetAcadmicPlanCourses = new VwGetAcadmicPlanCourses();
			newVwGetAcadmicPlanCourses.EdCourseId = _edCourseId;
			newVwGetAcadmicPlanCourses.AcadPlanEntityMainId = _acadPlanEntityMainId;
			newVwGetAcadmicPlanCourses.AcadPalnYearId = _acadPalnYearId;
			newVwGetAcadmicPlanCourses.PlanHdrEdCodesemesterId = _planHdrEdCodesemesterId;
			newVwGetAcadmicPlanCourses.PlanHdrCodeLevelId = _planHdrCodeLevelId;
			newVwGetAcadmicPlanCourses.PlanHdrLevelOrder = _planHdrLevelOrder;
			return newVwGetAcadmicPlanCourses;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the ED_COURSE_ID property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCourseIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? EdCourseId
		{
			get
			{
				return this._edCourseId; 
			}
			set
			{
				if (_edCourseId == value && EdCourseId != null )
					return;
					
				this._edCourseId = value;
				this._isDirty = true;
				
				OnPropertyChanged("EdCourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the AcadPlanEntityMainID property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal AcadPlanEntityMainId
		{
			get
			{
				return this._acadPlanEntityMainId; 
			}
			set
			{
				if (_acadPlanEntityMainId == value)
					return;
					
				this._acadPlanEntityMainId = value;
				this._isDirty = true;
				
				OnPropertyChanged("AcadPlanEntityMainId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the AcadPalnYearID property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAcadPalnYearIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? AcadPalnYearId
		{
			get
			{
				return this._acadPalnYearId; 
			}
			set
			{
				if (_acadPalnYearId == value && AcadPalnYearId != null )
					return;
					
				this._acadPalnYearId = value;
				this._isDirty = true;
				
				OnPropertyChanged("AcadPalnYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the PlanHdr_EdCodesemesterID property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal PlanHdrEdCodesemesterId
		{
			get
			{
				return this._planHdrEdCodesemesterId; 
			}
			set
			{
				if (_planHdrEdCodesemesterId == value)
					return;
					
				this._planHdrEdCodesemesterId = value;
				this._isDirty = true;
				
				OnPropertyChanged("PlanHdrEdCodesemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the PlanHdr_CodeLevelID property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal PlanHdrCodeLevelId
		{
			get
			{
				return this._planHdrCodeLevelId; 
			}
			set
			{
				if (_planHdrCodeLevelId == value)
					return;
					
				this._planHdrCodeLevelId = value;
				this._isDirty = true;
				
				OnPropertyChanged("PlanHdrCodeLevelId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the PlanHdr_LevelOrder property. 
		///		
		/// </summary>
		/// <value>This type is numeric</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPlanHdrLevelOrderNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? PlanHdrLevelOrder
		{
			get
			{
				return this._planHdrLevelOrder; 
			}
			set
			{
				if (_planHdrLevelOrder == value && PlanHdrLevelOrder != null )
					return;
					
				this._planHdrLevelOrder = value;
				this._isDirty = true;
				
				OnPropertyChanged("PlanHdrLevelOrder");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "Vw_GetAcadmicPlanCourses"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VwGetAcadmicPlanCoursesBase Entity 
		///</summary>
		public virtual VwGetAcadmicPlanCoursesBase Copy()
		{
			//shallow copy entity
			VwGetAcadmicPlanCourses copy = new VwGetAcadmicPlanCourses();
				copy.EdCourseId = this.EdCourseId;
				copy.AcadPlanEntityMainId = this.AcadPlanEntityMainId;
				copy.AcadPalnYearId = this.AcadPalnYearId;
				copy.PlanHdrEdCodesemesterId = this.PlanHdrEdCodesemesterId;
				copy.PlanHdrCodeLevelId = this.PlanHdrCodeLevelId;
				copy.PlanHdrLevelOrder = this.PlanHdrLevelOrder;
			copy.AcceptChanges();
			return (VwGetAcadmicPlanCourses)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VwGetAcadmicPlanCoursesBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VwGetAcadmicPlanCoursesBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="VwGetAcadmicPlanCoursesBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="VwGetAcadmicPlanCoursesBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VwGetAcadmicPlanCoursesBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(VwGetAcadmicPlanCoursesBase Object1, VwGetAcadmicPlanCoursesBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.EdCourseId != null && Object2.EdCourseId != null )
			{
				if (Object1.EdCourseId != Object2.EdCourseId)
					equal = false;
			}
			else if (Object1.EdCourseId == null ^ Object1.EdCourseId == null )
			{
				equal = false;
			}
			if (Object1.AcadPlanEntityMainId != Object2.AcadPlanEntityMainId)
				equal = false;
			if (Object1.AcadPalnYearId != null && Object2.AcadPalnYearId != null )
			{
				if (Object1.AcadPalnYearId != Object2.AcadPalnYearId)
					equal = false;
			}
			else if (Object1.AcadPalnYearId == null ^ Object1.AcadPalnYearId == null )
			{
				equal = false;
			}
			if (Object1.PlanHdrEdCodesemesterId != Object2.PlanHdrEdCodesemesterId)
				equal = false;
			if (Object1.PlanHdrCodeLevelId != Object2.PlanHdrCodeLevelId)
				equal = false;
			if (Object1.PlanHdrLevelOrder != null && Object2.PlanHdrLevelOrder != null )
			{
				if (Object1.PlanHdrLevelOrder != Object2.PlanHdrLevelOrder)
					equal = false;
			}
			else if (Object1.PlanHdrLevelOrder == null ^ Object1.PlanHdrLevelOrder == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(VwGetAcadmicPlanCourses entity, string propertyName)
		{
			switch (propertyName)
			{
				case "EdCourseId":
					return entity.EdCourseId;
				case "AcadPlanEntityMainId":
					return entity.AcadPlanEntityMainId;
				case "AcadPalnYearId":
					return entity.AcadPalnYearId;
				case "PlanHdrEdCodesemesterId":
					return entity.PlanHdrEdCodesemesterId;
				case "PlanHdrCodeLevelId":
					return entity.PlanHdrCodeLevelId;
				case "PlanHdrLevelOrder":
					return entity.PlanHdrLevelOrder;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as VwGetAcadmicPlanCourses, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{7}{6}- EdCourseId: {0}{6}- AcadPlanEntityMainId: {1}{6}- AcadPalnYearId: {2}{6}- PlanHdrEdCodesemesterId: {3}{6}- PlanHdrCodeLevelId: {4}{6}- PlanHdrLevelOrder: {5}{6}", 
				(this.EdCourseId == null) ? string.Empty : this.EdCourseId.ToString(),
			     
				this.AcadPlanEntityMainId,
				(this.AcadPalnYearId == null) ? string.Empty : this.AcadPalnYearId.ToString(),
			     
				this.PlanHdrEdCodesemesterId,
				this.PlanHdrCodeLevelId,
				(this.PlanHdrLevelOrder == null) ? string.Empty : this.PlanHdrLevelOrder.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the VwGetAcadmicPlanCourses columns.
	/// </summary>
	[Serializable]
	public enum VwGetAcadmicPlanCoursesColumn
	{
		/// <summary>
		/// ED_COURSE_ID : 
		/// </summary>
		[EnumTextValue("ED_COURSE_ID")]
		[ColumnEnum("ED_COURSE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCourseId,
		/// <summary>
		/// AcadPlanEntityMainID : 
		/// </summary>
		[EnumTextValue("AcadPlanEntityMainID")]
		[ColumnEnum("AcadPlanEntityMainID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AcadPlanEntityMainId,
		/// <summary>
		/// AcadPalnYearID : 
		/// </summary>
		[EnumTextValue("AcadPalnYearID")]
		[ColumnEnum("AcadPalnYearID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AcadPalnYearId,
		/// <summary>
		/// PlanHdr_EdCodesemesterID : 
		/// </summary>
		[EnumTextValue("PlanHdr_EdCodesemesterID")]
		[ColumnEnum("PlanHdr_EdCodesemesterID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		PlanHdrEdCodesemesterId,
		/// <summary>
		/// PlanHdr_CodeLevelID : 
		/// </summary>
		[EnumTextValue("PlanHdr_CodeLevelID")]
		[ColumnEnum("PlanHdr_CodeLevelID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		PlanHdrCodeLevelId,
		/// <summary>
		/// PlanHdr_LevelOrder : 
		/// </summary>
		[EnumTextValue("PlanHdr_LevelOrder")]
		[ColumnEnum("PlanHdr_LevelOrder", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PlanHdrLevelOrder
	}//End enum

} // end namespace
