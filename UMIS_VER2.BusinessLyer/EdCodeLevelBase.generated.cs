
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdCodeLevel.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_CODE_LEVEL' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdCodeLevelBase : EntityBase, IEdCodeLevel, IEntityId<EdCodeLevelKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdCodeLevelEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdCodeLevelEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdCodeLevelEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdCodeLevel> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdCodeLevelEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdCodeLevelEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdCodeLevelBase"/> instance.
		///</summary>
		public EdCodeLevelBase()
		{
			this.entityData = new EdCodeLevelEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdCodeLevelBase"/> instance.
		///</summary>
		///<param name="_edCodeLevelId"></param>
		///<param name="_descrEn"></param>
		///<param name="_descrAr"></param>
		///<param name="_levelOrder"></param>
		///<param name="_asFacultyInfoId"></param>
		public EdCodeLevelBase(System.Decimal _edCodeLevelId, System.String _descrEn, System.String _descrAr, 
			System.Decimal? _levelOrder, System.Decimal? _asFacultyInfoId)
		{
			this.entityData = new EdCodeLevelEntityData();
			this.backupData = null;

			this.EdCodeLevelId = _edCodeLevelId;
			this.DescrEn = _descrEn;
			this.DescrAr = _descrAr;
			this.LevelOrder = _levelOrder;
			this.AsFacultyInfoId = _asFacultyInfoId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdCodeLevel"/> instance.
		///</summary>
		///<param name="_edCodeLevelId"></param>
		///<param name="_descrEn"></param>
		///<param name="_descrAr"></param>
		///<param name="_levelOrder"></param>
		///<param name="_asFacultyInfoId"></param>
		public static EdCodeLevel CreateEdCodeLevel(System.Decimal _edCodeLevelId, System.String _descrEn, System.String _descrAr, 
			System.Decimal? _levelOrder, System.Decimal? _asFacultyInfoId)
		{
			EdCodeLevel newEdCodeLevel = new EdCodeLevel();
			newEdCodeLevel.EdCodeLevelId = _edCodeLevelId;
			newEdCodeLevel.DescrEn = _descrEn;
			newEdCodeLevel.DescrAr = _descrAr;
			newEdCodeLevel.LevelOrder = _levelOrder;
			newEdCodeLevel.AsFacultyInfoId = _asFacultyInfoId;
			return newEdCodeLevel;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdCodeLevelId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdCodeLevelId
		{
			get
			{
				return this.entityData.EdCodeLevelId; 
			}
			
			set
			{
				if (this.entityData.EdCodeLevelId == value)
					return;
					
				OnColumnChanging(EdCodeLevelColumn.EdCodeLevelId, this.entityData.EdCodeLevelId);
				this.entityData.EdCodeLevelId = value;
				this.EntityId.EdCodeLevelId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeLevelColumn.EdCodeLevelId, this.entityData.EdCodeLevelId);
				OnPropertyChanged("EdCodeLevelId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_CODE_LEVEL_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ED_CODE_LEVEL_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdCodeLevelId
		{
			get { return this.entityData.OriginalEdCodeLevelId; }
			set { this.entityData.OriginalEdCodeLevelId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the DescrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String DescrEn
		{
			get
			{
				return this.entityData.DescrEn; 
			}
			
			set
			{
				if (this.entityData.DescrEn == value)
					return;
					
				OnColumnChanging(EdCodeLevelColumn.DescrEn, this.entityData.DescrEn);
				this.entityData.DescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeLevelColumn.DescrEn, this.entityData.DescrEn);
				OnPropertyChanged("DescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescrAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String DescrAr
		{
			get
			{
				return this.entityData.DescrAr; 
			}
			
			set
			{
				if (this.entityData.DescrAr == value)
					return;
					
				OnColumnChanging(EdCodeLevelColumn.DescrAr, this.entityData.DescrAr);
				this.entityData.DescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeLevelColumn.DescrAr, this.entityData.DescrAr);
				OnPropertyChanged("DescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LevelOrder property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsLevelOrderNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? LevelOrder
		{
			get
			{
				return this.entityData.LevelOrder; 
			}
			
			set
			{
				if (this.entityData.LevelOrder == value)
					return;
					
				OnColumnChanging(EdCodeLevelColumn.LevelOrder, this.entityData.LevelOrder);
				this.entityData.LevelOrder = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeLevelColumn.LevelOrder, this.entityData.LevelOrder);
				OnPropertyChanged("LevelOrder");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(EdCodeLevelColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeLevelColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of AdmAppTransReq objects
		///	which are related to this object through the relation FK_ADM_APP_TRANS_REQ_ED_CODE_LEVEL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppTransReq> AdmAppTransReqCollectionGetByEdCodeLevelReqId
		{
			get { return entityData.AdmAppTransReqCollectionGetByEdCodeLevelReqId; }
			set { entityData.AdmAppTransReqCollectionGetByEdCodeLevelReqId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntMajorPhase objects
		///	which are related to this object through the relation FK_ENT_MAJOR_PHASE_ED_CODE_LEVEL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntMajorPhase> EntMajorPhaseCollectionGetByEdCodeLevelFromId
		{
			get { return entityData.EntMajorPhaseCollectionGetByEdCodeLevelFromId; }
			set { entityData.EntMajorPhaseCollectionGetByEdCodeLevelFromId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdSemesterOpen objects
		///	which are related to this object through the relation FK_ED_SEMESTER_OPEN_ED_CODE_LEVEL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdSemesterOpen> EdSemesterOpenCollection
		{
			get { return entityData.EdSemesterOpenCollection; }
			set { entityData.EdSemesterOpenCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CoControlRoom objects
		///	which are related to this object through the relation FK_CO_CONTROL_PHASE_ED_CODE_LEVEL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoControlRoom> CoControlRoomCollection
		{
			get { return entityData.CoControlRoomCollection; }
			set { entityData.CoControlRoomCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of MltLvlBhvrAttndc objects
		///	which are related to this object through the relation FK_MLT_LVL_BHVR_ATTNDC_ED_CODE_LEVEL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<MltLvlBhvrAttndc> MltLvlBhvrAttndcCollection
		{
			get { return entityData.MltLvlBhvrAttndcCollection; }
			set { entityData.MltLvlBhvrAttndcCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SvStaffEvl objects
		///	which are related to this object through the relation FK_SV_STAFF_EVL_ED_CODE_LEVEL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SvStaffEvl> SvStaffEvlCollection
		{
			get { return entityData.SvStaffEvlCollection; }
			set { entityData.SvStaffEvlCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPolcyGrdngHdr objects
		///	which are related to this object through the relation FK_ENT_POLCY_GRDNG_HDR_ED_CODE_LEVEL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolcyGrdngHdr> EntPolcyGrdngHdrCollection
		{
			get { return entityData.EntPolcyGrdngHdrCollection; }
			set { entityData.EntPolcyGrdngHdrCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPolicyGradingLevel objects
		///	which are related to this object through the relation FK_ENT_POLICY_GRADING_LEVEL_ED_CODE_LEVEL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolicyGradingLevel> EntPolicyGradingLevelCollection
		{
			get { return entityData.EntPolicyGradingLevelCollection; }
			set { entityData.EntPolicyGradingLevelCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmAppRegHistory objects
		///	which are related to this object through the relation FK_ADM_APP_REG_HISTORY_ED_CODE_LEVEL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppRegHistory> AdmAppRegHistoryCollection
		{
			get { return entityData.AdmAppRegHistoryCollection; }
			set { entityData.AdmAppRegHistoryCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeFacultyRule objects
		///	which are related to this object through the relation FK_FEE_FACULTY_RULE_ED_CODE_LEVEL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeFacultyRule> FeeFacultyRuleCollection
		{
			get { return entityData.FeeFacultyRuleCollection; }
			set { entityData.FeeFacultyRuleCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudSemester objects
		///	which are related to this object through the relation FK_ED_STUD_SEMESTER_ED_CODE_LEVEL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudSemester> EdStudSemesterCollection
		{
			get { return entityData.EdStudSemesterCollection; }
			set { entityData.EdStudSemesterCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPolicyAbsence objects
		///	which are related to this object through the relation FK_ENT_POLICY_ABSENCE_ED_CODE_LEVEL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolicyAbsence> EntPolicyAbsenceCollection
		{
			get { return entityData.EntPolicyAbsenceCollection; }
			set { entityData.EntPolicyAbsenceCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudSemesterTemp objects
		///	which are related to this object through the relation FK_ED_STUD_SEMESTER_OLD_ED_CODE_LEVEL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudSemesterTemp> EdStudSemesterTempCollection
		{
			get { return entityData.EdStudSemesterTempCollection; }
			set { entityData.EdStudSemesterTempCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdCourseInfo objects
		///	which are related to this object through the relation FK_ED_COURSE_INFO_ED_CODE_LEVELto
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdCourseInfo> EdCourseInfoCollectionGetByEdCodeLevelToId
		{
			get { return entityData.EdCourseInfoCollectionGetByEdCodeLevelToId; }
			set { entityData.EdCourseInfoCollectionGetByEdCodeLevelToId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SeUserCrsAssess objects
		///	which are related to this object through the relation FK_SE_USER_CRS_ASSESS_ED_CODE_LEVEL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SeUserCrsAssess> SeUserCrsAssessCollection
		{
			get { return entityData.SeUserCrsAssessCollection; }
			set { entityData.SeUserCrsAssessCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmAppTransReq objects
		///	which are related to this object through the relation FK_ADM_APP_TRANS_REQ_ED_CODE_LEVEL1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppTransReq> AdmAppTransReqCollectionGetByEdCodeLevelAppId
		{
			get { return entityData.AdmAppTransReqCollectionGetByEdCodeLevelAppId; }
			set { entityData.AdmAppTransReqCollectionGetByEdCodeLevelAppId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ScGroupInfo objects
		///	which are related to this object through the relation FK_SC_GROUP_INFO_ED_CODE_LEVEL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScGroupInfo> ScGroupInfoCollection
		{
			get { return entityData.ScGroupInfoCollection; }
			set { entityData.ScGroupInfoCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdAcadPlanHdr objects
		///	which are related to this object through the relation FK_ED_ACAD_PLAN_HDR_ED_CODE_LEVEL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdAcadPlanHdr> EdAcadPlanHdrCollection
		{
			get { return entityData.EdAcadPlanHdrCollection; }
			set { entityData.EdAcadPlanHdrCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntMajorPhase objects
		///	which are related to this object through the relation FK_ENT_MAJOR_PHASE_ED_CODE_LEVEL1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntMajorPhase> EntMajorPhaseCollectionGetByEdCodeLevelToId
		{
			get { return entityData.EntMajorPhaseCollectionGetByEdCodeLevelToId; }
			set { entityData.EntMajorPhaseCollectionGetByEdCodeLevelToId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdSemAgendaDtl objects
		///	which are related to this object through the relation FK_ED_SEM_AGENDA_DTL_ED_CODE_LEVEL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdSemAgendaDtl> EdSemAgendaDtlCollection
		{
			get { return entityData.EdSemAgendaDtlCollection; }
			set { entityData.EdSemAgendaDtlCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPolicyLoad objects
		///	which are related to this object through the relation FK_ENT_POLICY_LOAD_ED_CODE_LEVEL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolicyLoad> EntPolicyLoadCollection
		{
			get { return entityData.EntPolicyLoadCollection; }
			set { entityData.EntPolicyLoadCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdCourseInfo objects
		///	which are related to this object through the relation FK_ED_COURSE_INFO_ED_CODE_LEVELfrom
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdCourseInfo> EdCourseInfoCollectionGetByEdCodeLevelFromId
		{
			get { return entityData.EdCourseInfoCollectionGetByEdCodeLevelFromId; }
			set { entityData.EdCourseInfoCollectionGetByEdCodeLevelFromId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdBranchRule objects
		///	which are related to this object through the relation FK_ED_BRANCH_RULE_ED_CODE_LEVEL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdBranchRule> EdBranchRuleCollection
		{
			get { return entityData.EdBranchRuleCollection; }
			set { entityData.EdBranchRuleCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ScSectionGroupHdr objects
		///	which are related to this object through the relation FK_SC_SECTION_GROUP_HDR_ED_CODE_LEVEL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScSectionGroupHdr> ScSectionGroupHdrCollection
		{
			get { return entityData.ScSectionGroupHdrCollection; }
			set { entityData.ScSectionGroupHdrCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntityMain objects
		///	which are related to this object through the relation FK_ENTITY_MAIN_ED_CODE_LEVEL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntityMain> EntityMainCollection
		{
			get { return entityData.EntityMainCollection; }
			set { entityData.EntityMainCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DescrEn", "Descr En"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrEn", "Descr En", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrAr", "Descr Ar", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_CODE_LEVEL"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_CODE_LEVEL_ID", "DESCR_EN", "DESCR_AR", "LEVEL_ORDER", "AS_FACULTY_INFO_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdCodeLevelEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdCodeLevel) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdCodeLevel>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdCodeLevel);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdCodeLevel Entity 
		///</summary>
		protected virtual EdCodeLevel Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdCodeLevel copy = new EdCodeLevel();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdCodeLevelId = this.EdCodeLevelId;
					copy.OriginalEdCodeLevelId = this.OriginalEdCodeLevelId;
				copy.DescrEn = this.DescrEn;
				copy.DescrAr = this.DescrAr;
				copy.LevelOrder = this.LevelOrder;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
			
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
		
			//deep copy nested objects
			copy.AdmAppTransReqCollectionGetByEdCodeLevelReqId = (TList<AdmAppTransReq>) MakeCopyOf(this.AdmAppTransReqCollectionGetByEdCodeLevelReqId, existingCopies); 
			copy.EntMajorPhaseCollectionGetByEdCodeLevelFromId = (TList<EntMajorPhase>) MakeCopyOf(this.EntMajorPhaseCollectionGetByEdCodeLevelFromId, existingCopies); 
			copy.EdSemesterOpenCollection = (TList<EdSemesterOpen>) MakeCopyOf(this.EdSemesterOpenCollection, existingCopies); 
			copy.CoControlRoomCollection = (TList<CoControlRoom>) MakeCopyOf(this.CoControlRoomCollection, existingCopies); 
			copy.MltLvlBhvrAttndcCollection = (TList<MltLvlBhvrAttndc>) MakeCopyOf(this.MltLvlBhvrAttndcCollection, existingCopies); 
			copy.SvStaffEvlCollection = (TList<SvStaffEvl>) MakeCopyOf(this.SvStaffEvlCollection, existingCopies); 
			copy.EntPolcyGrdngHdrCollection = (TList<EntPolcyGrdngHdr>) MakeCopyOf(this.EntPolcyGrdngHdrCollection, existingCopies); 
			copy.EntPolicyGradingLevelCollection = (TList<EntPolicyGradingLevel>) MakeCopyOf(this.EntPolicyGradingLevelCollection, existingCopies); 
			copy.AdmAppRegHistoryCollection = (TList<AdmAppRegHistory>) MakeCopyOf(this.AdmAppRegHistoryCollection, existingCopies); 
			copy.FeeFacultyRuleCollection = (TList<FeeFacultyRule>) MakeCopyOf(this.FeeFacultyRuleCollection, existingCopies); 
			copy.EdStudSemesterCollection = (TList<EdStudSemester>) MakeCopyOf(this.EdStudSemesterCollection, existingCopies); 
			copy.EntPolicyAbsenceCollection = (TList<EntPolicyAbsence>) MakeCopyOf(this.EntPolicyAbsenceCollection, existingCopies); 
			copy.EdStudSemesterTempCollection = (TList<EdStudSemesterTemp>) MakeCopyOf(this.EdStudSemesterTempCollection, existingCopies); 
			copy.EdCourseInfoCollectionGetByEdCodeLevelToId = (TList<EdCourseInfo>) MakeCopyOf(this.EdCourseInfoCollectionGetByEdCodeLevelToId, existingCopies); 
			copy.SeUserCrsAssessCollection = (TList<SeUserCrsAssess>) MakeCopyOf(this.SeUserCrsAssessCollection, existingCopies); 
			copy.AdmAppTransReqCollectionGetByEdCodeLevelAppId = (TList<AdmAppTransReq>) MakeCopyOf(this.AdmAppTransReqCollectionGetByEdCodeLevelAppId, existingCopies); 
			copy.ScGroupInfoCollection = (TList<ScGroupInfo>) MakeCopyOf(this.ScGroupInfoCollection, existingCopies); 
			copy.EdAcadPlanHdrCollection = (TList<EdAcadPlanHdr>) MakeCopyOf(this.EdAcadPlanHdrCollection, existingCopies); 
			copy.EntMajorPhaseCollectionGetByEdCodeLevelToId = (TList<EntMajorPhase>) MakeCopyOf(this.EntMajorPhaseCollectionGetByEdCodeLevelToId, existingCopies); 
			copy.EdSemAgendaDtlCollection = (TList<EdSemAgendaDtl>) MakeCopyOf(this.EdSemAgendaDtlCollection, existingCopies); 
			copy.EntPolicyLoadCollection = (TList<EntPolicyLoad>) MakeCopyOf(this.EntPolicyLoadCollection, existingCopies); 
			copy.EdCourseInfoCollectionGetByEdCodeLevelFromId = (TList<EdCourseInfo>) MakeCopyOf(this.EdCourseInfoCollectionGetByEdCodeLevelFromId, existingCopies); 
			copy.EdBranchRuleCollection = (TList<EdBranchRule>) MakeCopyOf(this.EdBranchRuleCollection, existingCopies); 
			copy.ScSectionGroupHdrCollection = (TList<ScSectionGroupHdr>) MakeCopyOf(this.ScSectionGroupHdrCollection, existingCopies); 
			copy.EntityMainCollection = (TList<EntityMain>) MakeCopyOf(this.EntityMainCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdCodeLevel Entity 
		///</summary>
		public virtual EdCodeLevel Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdCodeLevel Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdCodeLevel DeepCopy()
		{
			return EntityHelper.Clone<EdCodeLevel>(this as EdCodeLevel);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdCodeLevelEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdCodeLevelEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdCodeLevelEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdCodeLevelColumn column)
		{
			switch(column)
			{
					case EdCodeLevelColumn.EdCodeLevelId:
					return entityData.EdCodeLevelId != _originalData.EdCodeLevelId;
					case EdCodeLevelColumn.DescrEn:
					return entityData.DescrEn != _originalData.DescrEn;
					case EdCodeLevelColumn.DescrAr:
					return entityData.DescrAr != _originalData.DescrAr;
					case EdCodeLevelColumn.LevelOrder:
					return entityData.LevelOrder != _originalData.LevelOrder;
					case EdCodeLevelColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdCodeLevelColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdCodeLevelId != _originalData.EdCodeLevelId;
			result = result || entityData.DescrEn != _originalData.DescrEn;
			result = result || entityData.DescrAr != _originalData.DescrAr;
			result = result || entityData.LevelOrder != _originalData.LevelOrder;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			return result;
		}	
		
		///<summary>
		///  Returns a EdCodeLevel Entity with the original data.
		///</summary>
		public EdCodeLevel GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdCodeLevel(
				_originalData.EdCodeLevelId,
				_originalData.DescrEn,
				_originalData.DescrAr,
				_originalData.LevelOrder,
				_originalData.AsFacultyInfoId
				);
				
			return (EdCodeLevel)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdCodeLevelBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdCodeLevelBase)
				return ValueEquals(this, (EdCodeLevelBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdCodeLevelBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdCodeLevelId.GetHashCode() ^ 
					this.DescrEn.GetHashCode() ^ 
					((this.DescrAr == null) ? string.Empty : this.DescrAr.ToString()).GetHashCode() ^ 
					((this.LevelOrder == null) ? string.Empty : this.LevelOrder.ToString()).GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdCodeLevelBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdCodeLevelBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdCodeLevelBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdCodeLevelBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdCodeLevelBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdCodeLevelBase Object1, EdCodeLevelBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdCodeLevelId != Object2.EdCodeLevelId)
				equal = false;
			if (Object1.DescrEn != Object2.DescrEn)
				equal = false;
			if ( Object1.DescrAr != null && Object2.DescrAr != null )
			{
				if (Object1.DescrAr != Object2.DescrAr)
					equal = false;
			}
			else if (Object1.DescrAr == null ^ Object2.DescrAr == null )
			{
				equal = false;
			}
			if ( Object1.LevelOrder != null && Object2.LevelOrder != null )
			{
				if (Object1.LevelOrder != Object2.LevelOrder)
					equal = false;
			}
			else if (Object1.LevelOrder == null ^ Object2.LevelOrder == null )
			{
				equal = false;
			}
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdCodeLevelBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdCodeLevelComparer GetComparer()
        {
            return new EdCodeLevelComparer();
        }
        */

        // Comparer delegates back to EdCodeLevel
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdCodeLevel rhs, EdCodeLevelColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdCodeLevelColumn.EdCodeLevelId:
            		return this.EdCodeLevelId.CompareTo(rhs.EdCodeLevelId);
            		
            		                 
            	
            	
            	case EdCodeLevelColumn.DescrEn:
            		return this.DescrEn.CompareTo(rhs.DescrEn);
            		
            		                 
            	
            	
            	case EdCodeLevelColumn.DescrAr:
            		return this.DescrAr.CompareTo(rhs.DescrAr);
            		
            		                 
            	
            	
            	case EdCodeLevelColumn.LevelOrder:
            		return this.LevelOrder.Value.CompareTo(rhs.LevelOrder.Value);
            		
            		                 
            	
            	
            	case EdCodeLevelColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdCodeLevelKey> Members
		
		// member variable for the EntityId property
		private EdCodeLevelKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdCodeLevelKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdCodeLevelKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdCodeLevel")
					.Append("|").Append( this.EdCodeLevelId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{6}{5}- EdCodeLevelId: {0}{5}- DescrEn: {1}{5}- DescrAr: {2}{5}- LevelOrder: {3}{5}- AsFacultyInfoId: {4}{5}{7}", 
				this.EdCodeLevelId,
				this.DescrEn,
				(this.DescrAr == null) ? string.Empty : this.DescrAr.ToString(),
				(this.LevelOrder == null) ? string.Empty : this.LevelOrder.ToString(),
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_CODE_LEVEL' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdCodeLevelEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_CODE_LEVEL_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_CODE_LEVEL"</remarks>
		public System.Decimal EdCodeLevelId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdCodeLevelId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// DESCR_EN : 
		/// </summary>
		public System.String		  DescrEn = string.Empty;
		
		/// <summary>
		/// DESCR_AR : 
		/// </summary>
		public System.String		  DescrAr = null;
		
		/// <summary>
		/// LEVEL_ORDER : 
		/// </summary>
		public System.Decimal?		  LevelOrder = null;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region AdmAppTransReqCollectionGetByEdCodeLevelReqId
		
		private TList<AdmAppTransReq> _admAppTransReqEdCodeLevelAppIdGetByEdCodeLevelReqId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppTransReqEdCodeLevelAppIdGetByEdCodeLevelReqId
		/// </summary>
		
		public TList<AdmAppTransReq> AdmAppTransReqCollectionGetByEdCodeLevelReqId
		{
			get
			{
				if (_admAppTransReqEdCodeLevelAppIdGetByEdCodeLevelReqId == null)
				{
				_admAppTransReqEdCodeLevelAppIdGetByEdCodeLevelReqId = new TList<AdmAppTransReq>();
				}
	
				return _admAppTransReqEdCodeLevelAppIdGetByEdCodeLevelReqId;
			}
			set { _admAppTransReqEdCodeLevelAppIdGetByEdCodeLevelReqId = value; }
		}
		
		#endregion

		#region EntMajorPhaseCollectionGetByEdCodeLevelFromId
		
		private TList<EntMajorPhase> _entMajorPhaseEdCodeLevelToIdGetByEdCodeLevelFromId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entMajorPhaseEdCodeLevelToIdGetByEdCodeLevelFromId
		/// </summary>
		
		public TList<EntMajorPhase> EntMajorPhaseCollectionGetByEdCodeLevelFromId
		{
			get
			{
				if (_entMajorPhaseEdCodeLevelToIdGetByEdCodeLevelFromId == null)
				{
				_entMajorPhaseEdCodeLevelToIdGetByEdCodeLevelFromId = new TList<EntMajorPhase>();
				}
	
				return _entMajorPhaseEdCodeLevelToIdGetByEdCodeLevelFromId;
			}
			set { _entMajorPhaseEdCodeLevelToIdGetByEdCodeLevelFromId = value; }
		}
		
		#endregion

		#region EdSemesterOpenCollection
		
		private TList<EdSemesterOpen> _edSemesterOpenEdCodeLevelId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edSemesterOpenEdCodeLevelId
		/// </summary>
		
		public TList<EdSemesterOpen> EdSemesterOpenCollection
		{
			get
			{
				if (_edSemesterOpenEdCodeLevelId == null)
				{
				_edSemesterOpenEdCodeLevelId = new TList<EdSemesterOpen>();
				}
	
				return _edSemesterOpenEdCodeLevelId;
			}
			set { _edSemesterOpenEdCodeLevelId = value; }
		}
		
		#endregion

		#region CoControlRoomCollection
		
		private TList<CoControlRoom> _coControlRoomEdCodeLevelId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coControlRoomEdCodeLevelId
		/// </summary>
		
		public TList<CoControlRoom> CoControlRoomCollection
		{
			get
			{
				if (_coControlRoomEdCodeLevelId == null)
				{
				_coControlRoomEdCodeLevelId = new TList<CoControlRoom>();
				}
	
				return _coControlRoomEdCodeLevelId;
			}
			set { _coControlRoomEdCodeLevelId = value; }
		}
		
		#endregion

		#region MltLvlBhvrAttndcCollection
		
		private TList<MltLvlBhvrAttndc> _mltLvlBhvrAttndcEdCodeLevelId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _mltLvlBhvrAttndcEdCodeLevelId
		/// </summary>
		
		public TList<MltLvlBhvrAttndc> MltLvlBhvrAttndcCollection
		{
			get
			{
				if (_mltLvlBhvrAttndcEdCodeLevelId == null)
				{
				_mltLvlBhvrAttndcEdCodeLevelId = new TList<MltLvlBhvrAttndc>();
				}
	
				return _mltLvlBhvrAttndcEdCodeLevelId;
			}
			set { _mltLvlBhvrAttndcEdCodeLevelId = value; }
		}
		
		#endregion

		#region SvStaffEvlCollection
		
		private TList<SvStaffEvl> _svStaffEvlEdCodeLevelId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _svStaffEvlEdCodeLevelId
		/// </summary>
		
		public TList<SvStaffEvl> SvStaffEvlCollection
		{
			get
			{
				if (_svStaffEvlEdCodeLevelId == null)
				{
				_svStaffEvlEdCodeLevelId = new TList<SvStaffEvl>();
				}
	
				return _svStaffEvlEdCodeLevelId;
			}
			set { _svStaffEvlEdCodeLevelId = value; }
		}
		
		#endregion

		#region EntPolcyGrdngHdrCollection
		
		private TList<EntPolcyGrdngHdr> _entPolcyGrdngHdrEdCodeLevelId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolcyGrdngHdrEdCodeLevelId
		/// </summary>
		
		public TList<EntPolcyGrdngHdr> EntPolcyGrdngHdrCollection
		{
			get
			{
				if (_entPolcyGrdngHdrEdCodeLevelId == null)
				{
				_entPolcyGrdngHdrEdCodeLevelId = new TList<EntPolcyGrdngHdr>();
				}
	
				return _entPolcyGrdngHdrEdCodeLevelId;
			}
			set { _entPolcyGrdngHdrEdCodeLevelId = value; }
		}
		
		#endregion

		#region EntPolicyGradingLevelCollection
		
		private TList<EntPolicyGradingLevel> _entPolicyGradingLevelEdCodeLevelId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolicyGradingLevelEdCodeLevelId
		/// </summary>
		
		public TList<EntPolicyGradingLevel> EntPolicyGradingLevelCollection
		{
			get
			{
				if (_entPolicyGradingLevelEdCodeLevelId == null)
				{
				_entPolicyGradingLevelEdCodeLevelId = new TList<EntPolicyGradingLevel>();
				}
	
				return _entPolicyGradingLevelEdCodeLevelId;
			}
			set { _entPolicyGradingLevelEdCodeLevelId = value; }
		}
		
		#endregion

		#region AdmAppRegHistoryCollection
		
		private TList<AdmAppRegHistory> _admAppRegHistoryEdCodeLevelId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppRegHistoryEdCodeLevelId
		/// </summary>
		
		public TList<AdmAppRegHistory> AdmAppRegHistoryCollection
		{
			get
			{
				if (_admAppRegHistoryEdCodeLevelId == null)
				{
				_admAppRegHistoryEdCodeLevelId = new TList<AdmAppRegHistory>();
				}
	
				return _admAppRegHistoryEdCodeLevelId;
			}
			set { _admAppRegHistoryEdCodeLevelId = value; }
		}
		
		#endregion

		#region FeeFacultyRuleCollection
		
		private TList<FeeFacultyRule> _feeFacultyRuleEdCodeLevelId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeFacultyRuleEdCodeLevelId
		/// </summary>
		
		public TList<FeeFacultyRule> FeeFacultyRuleCollection
		{
			get
			{
				if (_feeFacultyRuleEdCodeLevelId == null)
				{
				_feeFacultyRuleEdCodeLevelId = new TList<FeeFacultyRule>();
				}
	
				return _feeFacultyRuleEdCodeLevelId;
			}
			set { _feeFacultyRuleEdCodeLevelId = value; }
		}
		
		#endregion

		#region EdStudSemesterCollection
		
		private TList<EdStudSemester> _edStudSemesterEdCodeLevelId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudSemesterEdCodeLevelId
		/// </summary>
		
		public TList<EdStudSemester> EdStudSemesterCollection
		{
			get
			{
				if (_edStudSemesterEdCodeLevelId == null)
				{
				_edStudSemesterEdCodeLevelId = new TList<EdStudSemester>();
				}
	
				return _edStudSemesterEdCodeLevelId;
			}
			set { _edStudSemesterEdCodeLevelId = value; }
		}
		
		#endregion

		#region EntPolicyAbsenceCollection
		
		private TList<EntPolicyAbsence> _entPolicyAbsenceEdCodeLevelId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolicyAbsenceEdCodeLevelId
		/// </summary>
		
		public TList<EntPolicyAbsence> EntPolicyAbsenceCollection
		{
			get
			{
				if (_entPolicyAbsenceEdCodeLevelId == null)
				{
				_entPolicyAbsenceEdCodeLevelId = new TList<EntPolicyAbsence>();
				}
	
				return _entPolicyAbsenceEdCodeLevelId;
			}
			set { _entPolicyAbsenceEdCodeLevelId = value; }
		}
		
		#endregion

		#region EdStudSemesterTempCollection
		
		private TList<EdStudSemesterTemp> _edStudSemesterTempEdCodeLevelId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudSemesterTempEdCodeLevelId
		/// </summary>
		
		public TList<EdStudSemesterTemp> EdStudSemesterTempCollection
		{
			get
			{
				if (_edStudSemesterTempEdCodeLevelId == null)
				{
				_edStudSemesterTempEdCodeLevelId = new TList<EdStudSemesterTemp>();
				}
	
				return _edStudSemesterTempEdCodeLevelId;
			}
			set { _edStudSemesterTempEdCodeLevelId = value; }
		}
		
		#endregion

		#region EdCourseInfoCollectionGetByEdCodeLevelToId
		
		private TList<EdCourseInfo> _edCourseInfoEdCodeLevelToIdGetByEdCodeLevelToId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edCourseInfoEdCodeLevelToIdGetByEdCodeLevelToId
		/// </summary>
		
		public TList<EdCourseInfo> EdCourseInfoCollectionGetByEdCodeLevelToId
		{
			get
			{
				if (_edCourseInfoEdCodeLevelToIdGetByEdCodeLevelToId == null)
				{
				_edCourseInfoEdCodeLevelToIdGetByEdCodeLevelToId = new TList<EdCourseInfo>();
				}
	
				return _edCourseInfoEdCodeLevelToIdGetByEdCodeLevelToId;
			}
			set { _edCourseInfoEdCodeLevelToIdGetByEdCodeLevelToId = value; }
		}
		
		#endregion

		#region SeUserCrsAssessCollection
		
		private TList<SeUserCrsAssess> _seUserCrsAssessEdCodeLevelId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _seUserCrsAssessEdCodeLevelId
		/// </summary>
		
		public TList<SeUserCrsAssess> SeUserCrsAssessCollection
		{
			get
			{
				if (_seUserCrsAssessEdCodeLevelId == null)
				{
				_seUserCrsAssessEdCodeLevelId = new TList<SeUserCrsAssess>();
				}
	
				return _seUserCrsAssessEdCodeLevelId;
			}
			set { _seUserCrsAssessEdCodeLevelId = value; }
		}
		
		#endregion

		#region AdmAppTransReqCollectionGetByEdCodeLevelAppId
		
		private TList<AdmAppTransReq> _admAppTransReqEdCodeLevelAppIdGetByEdCodeLevelAppId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppTransReqEdCodeLevelAppIdGetByEdCodeLevelAppId
		/// </summary>
		
		public TList<AdmAppTransReq> AdmAppTransReqCollectionGetByEdCodeLevelAppId
		{
			get
			{
				if (_admAppTransReqEdCodeLevelAppIdGetByEdCodeLevelAppId == null)
				{
				_admAppTransReqEdCodeLevelAppIdGetByEdCodeLevelAppId = new TList<AdmAppTransReq>();
				}
	
				return _admAppTransReqEdCodeLevelAppIdGetByEdCodeLevelAppId;
			}
			set { _admAppTransReqEdCodeLevelAppIdGetByEdCodeLevelAppId = value; }
		}
		
		#endregion

		#region ScGroupInfoCollection
		
		private TList<ScGroupInfo> _scGroupInfoEdCodeLevelId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scGroupInfoEdCodeLevelId
		/// </summary>
		
		public TList<ScGroupInfo> ScGroupInfoCollection
		{
			get
			{
				if (_scGroupInfoEdCodeLevelId == null)
				{
				_scGroupInfoEdCodeLevelId = new TList<ScGroupInfo>();
				}
	
				return _scGroupInfoEdCodeLevelId;
			}
			set { _scGroupInfoEdCodeLevelId = value; }
		}
		
		#endregion

		#region EdAcadPlanHdrCollection
		
		private TList<EdAcadPlanHdr> _edAcadPlanHdrEdCodeLevelId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edAcadPlanHdrEdCodeLevelId
		/// </summary>
		
		public TList<EdAcadPlanHdr> EdAcadPlanHdrCollection
		{
			get
			{
				if (_edAcadPlanHdrEdCodeLevelId == null)
				{
				_edAcadPlanHdrEdCodeLevelId = new TList<EdAcadPlanHdr>();
				}
	
				return _edAcadPlanHdrEdCodeLevelId;
			}
			set { _edAcadPlanHdrEdCodeLevelId = value; }
		}
		
		#endregion

		#region EntMajorPhaseCollectionGetByEdCodeLevelToId
		
		private TList<EntMajorPhase> _entMajorPhaseEdCodeLevelToIdGetByEdCodeLevelToId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entMajorPhaseEdCodeLevelToIdGetByEdCodeLevelToId
		/// </summary>
		
		public TList<EntMajorPhase> EntMajorPhaseCollectionGetByEdCodeLevelToId
		{
			get
			{
				if (_entMajorPhaseEdCodeLevelToIdGetByEdCodeLevelToId == null)
				{
				_entMajorPhaseEdCodeLevelToIdGetByEdCodeLevelToId = new TList<EntMajorPhase>();
				}
	
				return _entMajorPhaseEdCodeLevelToIdGetByEdCodeLevelToId;
			}
			set { _entMajorPhaseEdCodeLevelToIdGetByEdCodeLevelToId = value; }
		}
		
		#endregion

		#region EdSemAgendaDtlCollection
		
		private TList<EdSemAgendaDtl> _edSemAgendaDtlEdCodeLevelId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edSemAgendaDtlEdCodeLevelId
		/// </summary>
		
		public TList<EdSemAgendaDtl> EdSemAgendaDtlCollection
		{
			get
			{
				if (_edSemAgendaDtlEdCodeLevelId == null)
				{
				_edSemAgendaDtlEdCodeLevelId = new TList<EdSemAgendaDtl>();
				}
	
				return _edSemAgendaDtlEdCodeLevelId;
			}
			set { _edSemAgendaDtlEdCodeLevelId = value; }
		}
		
		#endregion

		#region EntPolicyLoadCollection
		
		private TList<EntPolicyLoad> _entPolicyLoadEdCodeLevelId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolicyLoadEdCodeLevelId
		/// </summary>
		
		public TList<EntPolicyLoad> EntPolicyLoadCollection
		{
			get
			{
				if (_entPolicyLoadEdCodeLevelId == null)
				{
				_entPolicyLoadEdCodeLevelId = new TList<EntPolicyLoad>();
				}
	
				return _entPolicyLoadEdCodeLevelId;
			}
			set { _entPolicyLoadEdCodeLevelId = value; }
		}
		
		#endregion

		#region EdCourseInfoCollectionGetByEdCodeLevelFromId
		
		private TList<EdCourseInfo> _edCourseInfoEdCodeLevelToIdGetByEdCodeLevelFromId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edCourseInfoEdCodeLevelToIdGetByEdCodeLevelFromId
		/// </summary>
		
		public TList<EdCourseInfo> EdCourseInfoCollectionGetByEdCodeLevelFromId
		{
			get
			{
				if (_edCourseInfoEdCodeLevelToIdGetByEdCodeLevelFromId == null)
				{
				_edCourseInfoEdCodeLevelToIdGetByEdCodeLevelFromId = new TList<EdCourseInfo>();
				}
	
				return _edCourseInfoEdCodeLevelToIdGetByEdCodeLevelFromId;
			}
			set { _edCourseInfoEdCodeLevelToIdGetByEdCodeLevelFromId = value; }
		}
		
		#endregion

		#region EdBranchRuleCollection
		
		private TList<EdBranchRule> _edBranchRuleEdCodeLevelId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edBranchRuleEdCodeLevelId
		/// </summary>
		
		public TList<EdBranchRule> EdBranchRuleCollection
		{
			get
			{
				if (_edBranchRuleEdCodeLevelId == null)
				{
				_edBranchRuleEdCodeLevelId = new TList<EdBranchRule>();
				}
	
				return _edBranchRuleEdCodeLevelId;
			}
			set { _edBranchRuleEdCodeLevelId = value; }
		}
		
		#endregion

		#region ScSectionGroupHdrCollection
		
		private TList<ScSectionGroupHdr> _scSectionGroupHdrEdCodeLevelId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scSectionGroupHdrEdCodeLevelId
		/// </summary>
		
		public TList<ScSectionGroupHdr> ScSectionGroupHdrCollection
		{
			get
			{
				if (_scSectionGroupHdrEdCodeLevelId == null)
				{
				_scSectionGroupHdrEdCodeLevelId = new TList<ScSectionGroupHdr>();
				}
	
				return _scSectionGroupHdrEdCodeLevelId;
			}
			set { _scSectionGroupHdrEdCodeLevelId = value; }
		}
		
		#endregion

		#region EntityMainCollection
		
		private TList<EntityMain> _entityMainEdCodeLevelId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entityMainEdCodeLevelId
		/// </summary>
		
		public TList<EntityMain> EntityMainCollection
		{
			get
			{
				if (_entityMainEdCodeLevelId == null)
				{
				_entityMainEdCodeLevelId = new TList<EntityMain>();
				}
	
				return _entityMainEdCodeLevelId;
			}
			set { _entityMainEdCodeLevelId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdCodeLevelEntityData _tmp = new EdCodeLevelEntityData();
						
			_tmp.EdCodeLevelId = this.EdCodeLevelId;
			_tmp.OriginalEdCodeLevelId = this.OriginalEdCodeLevelId;
			
			_tmp.DescrEn = this.DescrEn;
			_tmp.DescrAr = this.DescrAr;
			_tmp.LevelOrder = this.LevelOrder;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._admAppTransReqEdCodeLevelAppIdGetByEdCodeLevelReqId != null)
				_tmp.AdmAppTransReqCollectionGetByEdCodeLevelReqId = (TList<AdmAppTransReq>) MakeCopyOf(this.AdmAppTransReqCollectionGetByEdCodeLevelReqId); 
			if (this._entMajorPhaseEdCodeLevelToIdGetByEdCodeLevelFromId != null)
				_tmp.EntMajorPhaseCollectionGetByEdCodeLevelFromId = (TList<EntMajorPhase>) MakeCopyOf(this.EntMajorPhaseCollectionGetByEdCodeLevelFromId); 
			if (this._edSemesterOpenEdCodeLevelId != null)
				_tmp.EdSemesterOpenCollection = (TList<EdSemesterOpen>) MakeCopyOf(this.EdSemesterOpenCollection); 
			if (this._coControlRoomEdCodeLevelId != null)
				_tmp.CoControlRoomCollection = (TList<CoControlRoom>) MakeCopyOf(this.CoControlRoomCollection); 
			if (this._mltLvlBhvrAttndcEdCodeLevelId != null)
				_tmp.MltLvlBhvrAttndcCollection = (TList<MltLvlBhvrAttndc>) MakeCopyOf(this.MltLvlBhvrAttndcCollection); 
			if (this._svStaffEvlEdCodeLevelId != null)
				_tmp.SvStaffEvlCollection = (TList<SvStaffEvl>) MakeCopyOf(this.SvStaffEvlCollection); 
			if (this._entPolcyGrdngHdrEdCodeLevelId != null)
				_tmp.EntPolcyGrdngHdrCollection = (TList<EntPolcyGrdngHdr>) MakeCopyOf(this.EntPolcyGrdngHdrCollection); 
			if (this._entPolicyGradingLevelEdCodeLevelId != null)
				_tmp.EntPolicyGradingLevelCollection = (TList<EntPolicyGradingLevel>) MakeCopyOf(this.EntPolicyGradingLevelCollection); 
			if (this._admAppRegHistoryEdCodeLevelId != null)
				_tmp.AdmAppRegHistoryCollection = (TList<AdmAppRegHistory>) MakeCopyOf(this.AdmAppRegHistoryCollection); 
			if (this._feeFacultyRuleEdCodeLevelId != null)
				_tmp.FeeFacultyRuleCollection = (TList<FeeFacultyRule>) MakeCopyOf(this.FeeFacultyRuleCollection); 
			if (this._edStudSemesterEdCodeLevelId != null)
				_tmp.EdStudSemesterCollection = (TList<EdStudSemester>) MakeCopyOf(this.EdStudSemesterCollection); 
			if (this._entPolicyAbsenceEdCodeLevelId != null)
				_tmp.EntPolicyAbsenceCollection = (TList<EntPolicyAbsence>) MakeCopyOf(this.EntPolicyAbsenceCollection); 
			if (this._edStudSemesterTempEdCodeLevelId != null)
				_tmp.EdStudSemesterTempCollection = (TList<EdStudSemesterTemp>) MakeCopyOf(this.EdStudSemesterTempCollection); 
			if (this._edCourseInfoEdCodeLevelToIdGetByEdCodeLevelToId != null)
				_tmp.EdCourseInfoCollectionGetByEdCodeLevelToId = (TList<EdCourseInfo>) MakeCopyOf(this.EdCourseInfoCollectionGetByEdCodeLevelToId); 
			if (this._seUserCrsAssessEdCodeLevelId != null)
				_tmp.SeUserCrsAssessCollection = (TList<SeUserCrsAssess>) MakeCopyOf(this.SeUserCrsAssessCollection); 
			if (this._admAppTransReqEdCodeLevelAppIdGetByEdCodeLevelAppId != null)
				_tmp.AdmAppTransReqCollectionGetByEdCodeLevelAppId = (TList<AdmAppTransReq>) MakeCopyOf(this.AdmAppTransReqCollectionGetByEdCodeLevelAppId); 
			if (this._scGroupInfoEdCodeLevelId != null)
				_tmp.ScGroupInfoCollection = (TList<ScGroupInfo>) MakeCopyOf(this.ScGroupInfoCollection); 
			if (this._edAcadPlanHdrEdCodeLevelId != null)
				_tmp.EdAcadPlanHdrCollection = (TList<EdAcadPlanHdr>) MakeCopyOf(this.EdAcadPlanHdrCollection); 
			if (this._entMajorPhaseEdCodeLevelToIdGetByEdCodeLevelToId != null)
				_tmp.EntMajorPhaseCollectionGetByEdCodeLevelToId = (TList<EntMajorPhase>) MakeCopyOf(this.EntMajorPhaseCollectionGetByEdCodeLevelToId); 
			if (this._edSemAgendaDtlEdCodeLevelId != null)
				_tmp.EdSemAgendaDtlCollection = (TList<EdSemAgendaDtl>) MakeCopyOf(this.EdSemAgendaDtlCollection); 
			if (this._entPolicyLoadEdCodeLevelId != null)
				_tmp.EntPolicyLoadCollection = (TList<EntPolicyLoad>) MakeCopyOf(this.EntPolicyLoadCollection); 
			if (this._edCourseInfoEdCodeLevelToIdGetByEdCodeLevelFromId != null)
				_tmp.EdCourseInfoCollectionGetByEdCodeLevelFromId = (TList<EdCourseInfo>) MakeCopyOf(this.EdCourseInfoCollectionGetByEdCodeLevelFromId); 
			if (this._edBranchRuleEdCodeLevelId != null)
				_tmp.EdBranchRuleCollection = (TList<EdBranchRule>) MakeCopyOf(this.EdBranchRuleCollection); 
			if (this._scSectionGroupHdrEdCodeLevelId != null)
				_tmp.ScSectionGroupHdrCollection = (TList<ScSectionGroupHdr>) MakeCopyOf(this.ScSectionGroupHdrCollection); 
			if (this._entityMainEdCodeLevelId != null)
				_tmp.EntityMainCollection = (TList<EntityMain>) MakeCopyOf(this.EntityMainCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdCodeLevelEntityData _tmp = new EdCodeLevelEntityData();
						
			_tmp.EdCodeLevelId = this.EdCodeLevelId;
			_tmp.OriginalEdCodeLevelId = this.OriginalEdCodeLevelId;
			
			_tmp.DescrEn = this.DescrEn;
			_tmp.DescrAr = this.DescrAr;
			_tmp.LevelOrder = this.LevelOrder;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.AdmAppTransReqCollectionGetByEdCodeLevelReqId = (TList<AdmAppTransReq>) MakeCopyOf(this.AdmAppTransReqCollectionGetByEdCodeLevelReqId, existingCopies); 
			_tmp.EntMajorPhaseCollectionGetByEdCodeLevelFromId = (TList<EntMajorPhase>) MakeCopyOf(this.EntMajorPhaseCollectionGetByEdCodeLevelFromId, existingCopies); 
			_tmp.EdSemesterOpenCollection = (TList<EdSemesterOpen>) MakeCopyOf(this.EdSemesterOpenCollection, existingCopies); 
			_tmp.CoControlRoomCollection = (TList<CoControlRoom>) MakeCopyOf(this.CoControlRoomCollection, existingCopies); 
			_tmp.MltLvlBhvrAttndcCollection = (TList<MltLvlBhvrAttndc>) MakeCopyOf(this.MltLvlBhvrAttndcCollection, existingCopies); 
			_tmp.SvStaffEvlCollection = (TList<SvStaffEvl>) MakeCopyOf(this.SvStaffEvlCollection, existingCopies); 
			_tmp.EntPolcyGrdngHdrCollection = (TList<EntPolcyGrdngHdr>) MakeCopyOf(this.EntPolcyGrdngHdrCollection, existingCopies); 
			_tmp.EntPolicyGradingLevelCollection = (TList<EntPolicyGradingLevel>) MakeCopyOf(this.EntPolicyGradingLevelCollection, existingCopies); 
			_tmp.AdmAppRegHistoryCollection = (TList<AdmAppRegHistory>) MakeCopyOf(this.AdmAppRegHistoryCollection, existingCopies); 
			_tmp.FeeFacultyRuleCollection = (TList<FeeFacultyRule>) MakeCopyOf(this.FeeFacultyRuleCollection, existingCopies); 
			_tmp.EdStudSemesterCollection = (TList<EdStudSemester>) MakeCopyOf(this.EdStudSemesterCollection, existingCopies); 
			_tmp.EntPolicyAbsenceCollection = (TList<EntPolicyAbsence>) MakeCopyOf(this.EntPolicyAbsenceCollection, existingCopies); 
			_tmp.EdStudSemesterTempCollection = (TList<EdStudSemesterTemp>) MakeCopyOf(this.EdStudSemesterTempCollection, existingCopies); 
			_tmp.EdCourseInfoCollectionGetByEdCodeLevelToId = (TList<EdCourseInfo>) MakeCopyOf(this.EdCourseInfoCollectionGetByEdCodeLevelToId, existingCopies); 
			_tmp.SeUserCrsAssessCollection = (TList<SeUserCrsAssess>) MakeCopyOf(this.SeUserCrsAssessCollection, existingCopies); 
			_tmp.AdmAppTransReqCollectionGetByEdCodeLevelAppId = (TList<AdmAppTransReq>) MakeCopyOf(this.AdmAppTransReqCollectionGetByEdCodeLevelAppId, existingCopies); 
			_tmp.ScGroupInfoCollection = (TList<ScGroupInfo>) MakeCopyOf(this.ScGroupInfoCollection, existingCopies); 
			_tmp.EdAcadPlanHdrCollection = (TList<EdAcadPlanHdr>) MakeCopyOf(this.EdAcadPlanHdrCollection, existingCopies); 
			_tmp.EntMajorPhaseCollectionGetByEdCodeLevelToId = (TList<EntMajorPhase>) MakeCopyOf(this.EntMajorPhaseCollectionGetByEdCodeLevelToId, existingCopies); 
			_tmp.EdSemAgendaDtlCollection = (TList<EdSemAgendaDtl>) MakeCopyOf(this.EdSemAgendaDtlCollection, existingCopies); 
			_tmp.EntPolicyLoadCollection = (TList<EntPolicyLoad>) MakeCopyOf(this.EntPolicyLoadCollection, existingCopies); 
			_tmp.EdCourseInfoCollectionGetByEdCodeLevelFromId = (TList<EdCourseInfo>) MakeCopyOf(this.EdCourseInfoCollectionGetByEdCodeLevelFromId, existingCopies); 
			_tmp.EdBranchRuleCollection = (TList<EdBranchRule>) MakeCopyOf(this.EdBranchRuleCollection, existingCopies); 
			_tmp.ScSectionGroupHdrCollection = (TList<ScSectionGroupHdr>) MakeCopyOf(this.ScSectionGroupHdrCollection, existingCopies); 
			_tmp.EntityMainCollection = (TList<EntityMain>) MakeCopyOf(this.EntityMainCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCodeLevelColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdCodeLevelColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCodeLevelColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdCodeLevelColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCodeLevelColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdCodeLevelColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdCodeLevelEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdCodeLevelEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCodeLevelColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdCodeLevelColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdCodeLevelEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdCodeLevelEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdCodeLevelEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdCodeLevel"/> object.
	/// </remarks>
	public class EdCodeLevelEventArgs : System.EventArgs
	{
		private EdCodeLevelColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdCodeLevelEventArgs class.
		///</summary>
		public EdCodeLevelEventArgs(EdCodeLevelColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdCodeLevelEventArgs class.
		///</summary>
		public EdCodeLevelEventArgs(EdCodeLevelColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdCodeLevelColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdCodeLevelColumn" />
		public EdCodeLevelColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdCodeLevel related events.
	///</summary>
	public delegate void EdCodeLevelEventHandler(object sender, EdCodeLevelEventArgs e);
	
	#region EdCodeLevelComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdCodeLevelComparer : System.Collections.Generic.IComparer<EdCodeLevel>
	{
		EdCodeLevelColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdCodeLevelComparer"/> class.
        /// </summary>
		public EdCodeLevelComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdCodeLevelComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdCodeLevelComparer(EdCodeLevelColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdCodeLevel"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdCodeLevel"/> to compare.</param>
        /// <param name="b">The second <c>EdCodeLevel</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdCodeLevel a, EdCodeLevel b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdCodeLevel entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdCodeLevel a, EdCodeLevel b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdCodeLevelColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdCodeLevelKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdCodeLevel"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdCodeLevelKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdCodeLevelKey class.
		/// </summary>
		public EdCodeLevelKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdCodeLevelKey class.
		/// </summary>
		public EdCodeLevelKey(EdCodeLevelBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdCodeLevelId = entity.EdCodeLevelId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdCodeLevelKey class.
		/// </summary>
		public EdCodeLevelKey(System.Decimal _edCodeLevelId)
		{
			#region Init Properties

			this.EdCodeLevelId = _edCodeLevelId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdCodeLevelBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdCodeLevelBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdCodeLevelId property
		private System.Decimal _edCodeLevelId;
		
		/// <summary>
		/// Gets or sets the EdCodeLevelId property.
		/// </summary>
		public System.Decimal EdCodeLevelId
		{
			get { return _edCodeLevelId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdCodeLevelId = value;
				
				_edCodeLevelId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdCodeLevelId = ( values["EdCodeLevelId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdCodeLevelId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdCodeLevelId", EdCodeLevelId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdCodeLevelId: {0}{1}",
								EdCodeLevelId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdCodeLevelColumn Enum
	
	/// <summary>
	/// Enumerate the EdCodeLevel columns.
	/// </summary>
	[Serializable]
	public enum EdCodeLevelColumn : int
	{
		/// <summary>
		/// EdCodeLevelId : 
		/// </summary>
		[EnumTextValue("ED_CODE_LEVEL_ID")]
		[ColumnEnum("ED_CODE_LEVEL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdCodeLevelId = 1,
		/// <summary>
		/// DescrEn : 
		/// </summary>
		[EnumTextValue("DESCR_EN")]
		[ColumnEnum("DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, false, 150)]
		DescrEn = 2,
		/// <summary>
		/// DescrAr : 
		/// </summary>
		[EnumTextValue("DESCR_AR")]
		[ColumnEnum("DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		DescrAr = 3,
		/// <summary>
		/// LevelOrder : 
		/// </summary>
		[EnumTextValue("LEVEL_ORDER")]
		[ColumnEnum("LEVEL_ORDER", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		LevelOrder = 4,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 5
	}//End enum

	#endregion EdCodeLevelColumn Enum

} // end namespace
