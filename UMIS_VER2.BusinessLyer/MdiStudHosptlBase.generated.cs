
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file MdiStudHosptl.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'MDI_STUD_HOSPTL' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class MdiStudHosptlBase : EntityBase, IMdiStudHosptl, IEntityId<MdiStudHosptlKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private MdiStudHosptlEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private MdiStudHosptlEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private MdiStudHosptlEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<MdiStudHosptl> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MdiStudHosptlEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MdiStudHosptlEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="MdiStudHosptlBase"/> instance.
		///</summary>
		public MdiStudHosptlBase()
		{
			this.entityData = new MdiStudHosptlEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="MdiStudHosptlBase"/> instance.
		///</summary>
		///<param name="_mdiStudHosptlId">بيانات دخول مستشفى</param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId">مسلسل الفصل الدراسي</param>
		///<param name="_rqustNum"></param>
		///<param name="_edStudId">مسلسل الطالب</param>
		///<param name="_mdiCdeHosptlId"></param>
		///<param name="_entrncDatetime">تاريخ الدخول</param>
		///<param name="_exitDatetime">تاريخ الخروج</param>
		///<param name="_complaint">الشكوى/الاعراض</param>
		///<param name="_treatment">الاجراء/العلاح</param>
		///<param name="_recommend">التوصية لطبية</param>
		///<param name="_hosptlFlg">0 حجز تحت الملاحظة - 1 مستشفى</param>
		///<param name="_notes"></param>
		public MdiStudHosptlBase(System.Decimal _mdiStudHosptlId, System.Decimal? _edAcadYearId, 
			System.Decimal? _edCodeSemesterId, System.String _rqustNum, System.Decimal _edStudId, 
			System.Decimal? _mdiCdeHosptlId, System.DateTime _entrncDatetime, System.DateTime? _exitDatetime, 
			System.String _complaint, System.String _treatment, System.String _recommend, 
			System.Decimal? _hosptlFlg, System.String _notes)
		{
			this.entityData = new MdiStudHosptlEntityData();
			this.backupData = null;

			this.MdiStudHosptlId = _mdiStudHosptlId;
			this.EdAcadYearId = _edAcadYearId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.RqustNum = _rqustNum;
			this.EdStudId = _edStudId;
			this.MdiCdeHosptlId = _mdiCdeHosptlId;
			this.EntrncDatetime = _entrncDatetime;
			this.ExitDatetime = _exitDatetime;
			this.Complaint = _complaint;
			this.Treatment = _treatment;
			this.Recommend = _recommend;
			this.HosptlFlg = _hosptlFlg;
			this.Notes = _notes;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="MdiStudHosptl"/> instance.
		///</summary>
		///<param name="_mdiStudHosptlId">بيانات دخول مستشفى</param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId">مسلسل الفصل الدراسي</param>
		///<param name="_rqustNum"></param>
		///<param name="_edStudId">مسلسل الطالب</param>
		///<param name="_mdiCdeHosptlId"></param>
		///<param name="_entrncDatetime">تاريخ الدخول</param>
		///<param name="_exitDatetime">تاريخ الخروج</param>
		///<param name="_complaint">الشكوى/الاعراض</param>
		///<param name="_treatment">الاجراء/العلاح</param>
		///<param name="_recommend">التوصية لطبية</param>
		///<param name="_hosptlFlg">0 حجز تحت الملاحظة - 1 مستشفى</param>
		///<param name="_notes"></param>
		public static MdiStudHosptl CreateMdiStudHosptl(System.Decimal _mdiStudHosptlId, System.Decimal? _edAcadYearId, 
			System.Decimal? _edCodeSemesterId, System.String _rqustNum, System.Decimal _edStudId, 
			System.Decimal? _mdiCdeHosptlId, System.DateTime _entrncDatetime, System.DateTime? _exitDatetime, 
			System.String _complaint, System.String _treatment, System.String _recommend, 
			System.Decimal? _hosptlFlg, System.String _notes)
		{
			MdiStudHosptl newMdiStudHosptl = new MdiStudHosptl();
			newMdiStudHosptl.MdiStudHosptlId = _mdiStudHosptlId;
			newMdiStudHosptl.EdAcadYearId = _edAcadYearId;
			newMdiStudHosptl.EdCodeSemesterId = _edCodeSemesterId;
			newMdiStudHosptl.RqustNum = _rqustNum;
			newMdiStudHosptl.EdStudId = _edStudId;
			newMdiStudHosptl.MdiCdeHosptlId = _mdiCdeHosptlId;
			newMdiStudHosptl.EntrncDatetime = _entrncDatetime;
			newMdiStudHosptl.ExitDatetime = _exitDatetime;
			newMdiStudHosptl.Complaint = _complaint;
			newMdiStudHosptl.Treatment = _treatment;
			newMdiStudHosptl.Recommend = _recommend;
			newMdiStudHosptl.HosptlFlg = _hosptlFlg;
			newMdiStudHosptl.Notes = _notes;
			return newMdiStudHosptl;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MdiStudHosptlId property. 
		///		بيانات دخول مستشفى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"بيانات دخول مستشفى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal MdiStudHosptlId
		{
			get
			{
				return this.entityData.MdiStudHosptlId; 
			}
			
			set
			{
				if (this.entityData.MdiStudHosptlId == value)
					return;
					
				OnColumnChanging(MdiStudHosptlColumn.MdiStudHosptlId, this.entityData.MdiStudHosptlId);
				this.entityData.MdiStudHosptlId = value;
				this.EntityId.MdiStudHosptlId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiStudHosptlColumn.MdiStudHosptlId, this.entityData.MdiStudHosptlId);
				OnPropertyChanged("MdiStudHosptlId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the MDI_STUD_HOSPTL_ID property.
		///		بيانات دخول مستشفى
		/// </summary>
		/// <remarks>This is the original value of the MDI_STUD_HOSPTL_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalMdiStudHosptlId
		{
			get { return this.entityData.OriginalMdiStudHosptlId; }
			set { this.entityData.OriginalMdiStudHosptlId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdAcadYearIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(MdiStudHosptlColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiStudHosptlColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		مسلسل الفصل الدراسي
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeSemesterIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مسلسل الفصل الدراسي"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(MdiStudHosptlColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiStudHosptlColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RqustNum property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String RqustNum
		{
			get
			{
				return this.entityData.RqustNum; 
			}
			
			set
			{
				if (this.entityData.RqustNum == value)
					return;
					
				OnColumnChanging(MdiStudHosptlColumn.RqustNum, this.entityData.RqustNum);
				this.entityData.RqustNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiStudHosptlColumn.RqustNum, this.entityData.RqustNum);
				OnPropertyChanged("RqustNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		مسلسل الطالب
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"مسلسل الطالب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(MdiStudHosptlColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiStudHosptlColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MdiCdeHosptlId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMdiCdeHosptlIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MdiCdeHosptlId
		{
			get
			{
				return this.entityData.MdiCdeHosptlId; 
			}
			
			set
			{
				if (this.entityData.MdiCdeHosptlId == value)
					return;
					
				OnColumnChanging(MdiStudHosptlColumn.MdiCdeHosptlId, this.entityData.MdiCdeHosptlId);
				this.entityData.MdiCdeHosptlId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiStudHosptlColumn.MdiCdeHosptlId, this.entityData.MdiCdeHosptlId);
				OnPropertyChanged("MdiCdeHosptlId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntrncDatetime property. 
		///		تاريخ الدخول
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"تاريخ الدخول"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime EntrncDatetime
		{
			get
			{
				return this.entityData.EntrncDatetime; 
			}
			
			set
			{
				if (this.entityData.EntrncDatetime == value)
					return;
					
				OnColumnChanging(MdiStudHosptlColumn.EntrncDatetime, this.entityData.EntrncDatetime);
				this.entityData.EntrncDatetime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiStudHosptlColumn.EntrncDatetime, this.entityData.EntrncDatetime);
				OnPropertyChanged("EntrncDatetime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExitDatetime property. 
		///		تاريخ الخروج
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsExitDatetimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ الخروج"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ExitDatetime
		{
			get
			{
				return this.entityData.ExitDatetime; 
			}
			
			set
			{
				if (this.entityData.ExitDatetime == value)
					return;
					
				OnColumnChanging(MdiStudHosptlColumn.ExitDatetime, this.entityData.ExitDatetime);
				this.entityData.ExitDatetime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiStudHosptlColumn.ExitDatetime, this.entityData.ExitDatetime);
				OnPropertyChanged("ExitDatetime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Complaint property. 
		///		الشكوى/الاعراض
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"الشكوى/الاعراض"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 300)]
		public virtual System.String Complaint
		{
			get
			{
				return this.entityData.Complaint; 
			}
			
			set
			{
				if (this.entityData.Complaint == value)
					return;
					
				OnColumnChanging(MdiStudHosptlColumn.Complaint, this.entityData.Complaint);
				this.entityData.Complaint = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiStudHosptlColumn.Complaint, this.entityData.Complaint);
				OnPropertyChanged("Complaint");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Treatment property. 
		///		الاجراء/العلاح
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"الاجراء/العلاح"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 300)]
		public virtual System.String Treatment
		{
			get
			{
				return this.entityData.Treatment; 
			}
			
			set
			{
				if (this.entityData.Treatment == value)
					return;
					
				OnColumnChanging(MdiStudHosptlColumn.Treatment, this.entityData.Treatment);
				this.entityData.Treatment = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiStudHosptlColumn.Treatment, this.entityData.Treatment);
				OnPropertyChanged("Treatment");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Recommend property. 
		///		التوصية لطبية
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"التوصية لطبية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 300)]
		public virtual System.String Recommend
		{
			get
			{
				return this.entityData.Recommend; 
			}
			
			set
			{
				if (this.entityData.Recommend == value)
					return;
					
				OnColumnChanging(MdiStudHosptlColumn.Recommend, this.entityData.Recommend);
				this.entityData.Recommend = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiStudHosptlColumn.Recommend, this.entityData.Recommend);
				OnPropertyChanged("Recommend");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HosptlFlg property. 
		///		0 حجز تحت الملاحظة - 1 مستشفى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsHosptlFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"0 حجز تحت الملاحظة - 1 مستشفى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HosptlFlg
		{
			get
			{
				return this.entityData.HosptlFlg; 
			}
			
			set
			{
				if (this.entityData.HosptlFlg == value)
					return;
					
				OnColumnChanging(MdiStudHosptlColumn.HosptlFlg, this.entityData.HosptlFlg);
				this.entityData.HosptlFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiStudHosptlColumn.HosptlFlg, this.entityData.HosptlFlg);
				OnPropertyChanged("HosptlFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 300)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(MdiStudHosptlColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiStudHosptlColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="MdiCdeHosptl"/>.
		/// </summary>
		/// <value>The source MdiCdeHosptl for MdiCdeHosptlId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual MdiCdeHosptl MdiCdeHosptlIdSource
      	{
            get { return entityData.MdiCdeHosptlIdSource; }
            set { entityData.MdiCdeHosptlIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of MltStudBhvrAttndc objects
		///	which are related to this object through the relation FK_MLT_STUD_BHVR_ATTNDC_MDI_STUD_HOSPTL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<MltStudBhvrAttndc> MltStudBhvrAttndcCollection
		{
			get { return entityData.MltStudBhvrAttndcCollection; }
			set { entityData.MltStudBhvrAttndcCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("RqustNum", "Rqust Num", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Complaint", "Complaint", 300));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Treatment", "Treatment", 300));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Recommend", "Recommend", 300));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 300));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "MDI_STUD_HOSPTL"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MDI_STUD_HOSPTL_ID", "ED_ACAD_YEAR_ID", "ED_CODE_SEMESTER_ID", "RQUST_NUM", "ED_STUD_ID", "MDI_CDE_HOSPTL_ID", "ENTRNC_DATETIME", "EXIT_DATETIME", "COMPLAINT", "TREATMENT", "RECOMMEND", "HOSPTL_FLG", "NOTES"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as MdiStudHosptlEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (MdiStudHosptl) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<MdiStudHosptl>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as MdiStudHosptl);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed MdiStudHosptl Entity 
		///</summary>
		protected virtual MdiStudHosptl Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			MdiStudHosptl copy = new MdiStudHosptl();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MdiStudHosptlId = this.MdiStudHosptlId;
					copy.OriginalMdiStudHosptlId = this.OriginalMdiStudHosptlId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.RqustNum = this.RqustNum;
				copy.EdStudId = this.EdStudId;
				copy.MdiCdeHosptlId = this.MdiCdeHosptlId;
				copy.EntrncDatetime = this.EntrncDatetime;
				copy.ExitDatetime = this.ExitDatetime;
				copy.Complaint = this.Complaint;
				copy.Treatment = this.Treatment;
				copy.Recommend = this.Recommend;
				copy.HosptlFlg = this.HosptlFlg;
				copy.Notes = this.Notes;
			
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.MdiCdeHosptlIdSource != null && existingCopies.Contains(this.MdiCdeHosptlIdSource))
				copy.MdiCdeHosptlIdSource = existingCopies[this.MdiCdeHosptlIdSource] as MdiCdeHosptl;
			else
				copy.MdiCdeHosptlIdSource = MakeCopyOf(this.MdiCdeHosptlIdSource, existingCopies) as MdiCdeHosptl;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
		
			//deep copy nested objects
			copy.MltStudBhvrAttndcCollection = (TList<MltStudBhvrAttndc>) MakeCopyOf(this.MltStudBhvrAttndcCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed MdiStudHosptl Entity 
		///</summary>
		public virtual MdiStudHosptl Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed MdiStudHosptl Entity which is a deep copy of the current entity.
		///</summary>
		public virtual MdiStudHosptl DeepCopy()
		{
			return EntityHelper.Clone<MdiStudHosptl>(this as MdiStudHosptl);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as MdiStudHosptlEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new MdiStudHosptlEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as MdiStudHosptlEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(MdiStudHosptlColumn column)
		{
			switch(column)
			{
					case MdiStudHosptlColumn.MdiStudHosptlId:
					return entityData.MdiStudHosptlId != _originalData.MdiStudHosptlId;
					case MdiStudHosptlColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case MdiStudHosptlColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case MdiStudHosptlColumn.RqustNum:
					return entityData.RqustNum != _originalData.RqustNum;
					case MdiStudHosptlColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case MdiStudHosptlColumn.MdiCdeHosptlId:
					return entityData.MdiCdeHosptlId != _originalData.MdiCdeHosptlId;
					case MdiStudHosptlColumn.EntrncDatetime:
					return entityData.EntrncDatetime != _originalData.EntrncDatetime;
					case MdiStudHosptlColumn.ExitDatetime:
					return entityData.ExitDatetime != _originalData.ExitDatetime;
					case MdiStudHosptlColumn.Complaint:
					return entityData.Complaint != _originalData.Complaint;
					case MdiStudHosptlColumn.Treatment:
					return entityData.Treatment != _originalData.Treatment;
					case MdiStudHosptlColumn.Recommend:
					return entityData.Recommend != _originalData.Recommend;
					case MdiStudHosptlColumn.HosptlFlg:
					return entityData.HosptlFlg != _originalData.HosptlFlg;
					case MdiStudHosptlColumn.Notes:
					return entityData.Notes != _originalData.Notes;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< MdiStudHosptlColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MdiStudHosptlId != _originalData.MdiStudHosptlId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.RqustNum != _originalData.RqustNum;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.MdiCdeHosptlId != _originalData.MdiCdeHosptlId;
			result = result || entityData.EntrncDatetime != _originalData.EntrncDatetime;
			result = result || entityData.ExitDatetime != _originalData.ExitDatetime;
			result = result || entityData.Complaint != _originalData.Complaint;
			result = result || entityData.Treatment != _originalData.Treatment;
			result = result || entityData.Recommend != _originalData.Recommend;
			result = result || entityData.HosptlFlg != _originalData.HosptlFlg;
			result = result || entityData.Notes != _originalData.Notes;
			return result;
		}	
		
		///<summary>
		///  Returns a MdiStudHosptl Entity with the original data.
		///</summary>
		public MdiStudHosptl GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateMdiStudHosptl(
				_originalData.MdiStudHosptlId,
				_originalData.EdAcadYearId,
				_originalData.EdCodeSemesterId,
				_originalData.RqustNum,
				_originalData.EdStudId,
				_originalData.MdiCdeHosptlId,
				_originalData.EntrncDatetime,
				_originalData.ExitDatetime,
				_originalData.Complaint,
				_originalData.Treatment,
				_originalData.Recommend,
				_originalData.HosptlFlg,
				_originalData.Notes
				);
				
			return (MdiStudHosptl)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="MdiStudHosptlBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is MdiStudHosptlBase)
				return ValueEquals(this, (MdiStudHosptlBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="MdiStudHosptlBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MdiStudHosptlId.GetHashCode() ^ 
					((this.EdAcadYearId == null) ? string.Empty : this.EdAcadYearId.ToString()).GetHashCode() ^ 
					((this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString()).GetHashCode() ^ 
					((this.RqustNum == null) ? string.Empty : this.RqustNum.ToString()).GetHashCode() ^ 
					this.EdStudId.GetHashCode() ^ 
					((this.MdiCdeHosptlId == null) ? string.Empty : this.MdiCdeHosptlId.ToString()).GetHashCode() ^ 
					this.EntrncDatetime.GetHashCode() ^ 
					((this.ExitDatetime == null) ? string.Empty : this.ExitDatetime.ToString()).GetHashCode() ^ 
					((this.Complaint == null) ? string.Empty : this.Complaint.ToString()).GetHashCode() ^ 
					((this.Treatment == null) ? string.Empty : this.Treatment.ToString()).GetHashCode() ^ 
					((this.Recommend == null) ? string.Empty : this.Recommend.ToString()).GetHashCode() ^ 
					((this.HosptlFlg == null) ? string.Empty : this.HosptlFlg.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="MdiStudHosptlBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(MdiStudHosptlBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="MdiStudHosptlBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="MdiStudHosptlBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="MdiStudHosptlBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(MdiStudHosptlBase Object1, MdiStudHosptlBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MdiStudHosptlId != Object2.MdiStudHosptlId)
				equal = false;
			if ( Object1.EdAcadYearId != null && Object2.EdAcadYearId != null )
			{
				if (Object1.EdAcadYearId != Object2.EdAcadYearId)
					equal = false;
			}
			else if (Object1.EdAcadYearId == null ^ Object2.EdAcadYearId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeSemesterId != null && Object2.EdCodeSemesterId != null )
			{
				if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
					equal = false;
			}
			else if (Object1.EdCodeSemesterId == null ^ Object2.EdCodeSemesterId == null )
			{
				equal = false;
			}
			if ( Object1.RqustNum != null && Object2.RqustNum != null )
			{
				if (Object1.RqustNum != Object2.RqustNum)
					equal = false;
			}
			else if (Object1.RqustNum == null ^ Object2.RqustNum == null )
			{
				equal = false;
			}
			if (Object1.EdStudId != Object2.EdStudId)
				equal = false;
			if ( Object1.MdiCdeHosptlId != null && Object2.MdiCdeHosptlId != null )
			{
				if (Object1.MdiCdeHosptlId != Object2.MdiCdeHosptlId)
					equal = false;
			}
			else if (Object1.MdiCdeHosptlId == null ^ Object2.MdiCdeHosptlId == null )
			{
				equal = false;
			}
			if (Object1.EntrncDatetime != Object2.EntrncDatetime)
				equal = false;
			if ( Object1.ExitDatetime != null && Object2.ExitDatetime != null )
			{
				if (Object1.ExitDatetime != Object2.ExitDatetime)
					equal = false;
			}
			else if (Object1.ExitDatetime == null ^ Object2.ExitDatetime == null )
			{
				equal = false;
			}
			if ( Object1.Complaint != null && Object2.Complaint != null )
			{
				if (Object1.Complaint != Object2.Complaint)
					equal = false;
			}
			else if (Object1.Complaint == null ^ Object2.Complaint == null )
			{
				equal = false;
			}
			if ( Object1.Treatment != null && Object2.Treatment != null )
			{
				if (Object1.Treatment != Object2.Treatment)
					equal = false;
			}
			else if (Object1.Treatment == null ^ Object2.Treatment == null )
			{
				equal = false;
			}
			if ( Object1.Recommend != null && Object2.Recommend != null )
			{
				if (Object1.Recommend != Object2.Recommend)
					equal = false;
			}
			else if (Object1.Recommend == null ^ Object2.Recommend == null )
			{
				equal = false;
			}
			if ( Object1.HosptlFlg != null && Object2.HosptlFlg != null )
			{
				if (Object1.HosptlFlg != Object2.HosptlFlg)
					equal = false;
			}
			else if (Object1.HosptlFlg == null ^ Object2.HosptlFlg == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((MdiStudHosptlBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static MdiStudHosptlComparer GetComparer()
        {
            return new MdiStudHosptlComparer();
        }
        */

        // Comparer delegates back to MdiStudHosptl
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(MdiStudHosptl rhs, MdiStudHosptlColumn which)
        {
            switch (which)
            {
            	
            	
            	case MdiStudHosptlColumn.MdiStudHosptlId:
            		return this.MdiStudHosptlId.CompareTo(rhs.MdiStudHosptlId);
            		
            		                 
            	
            	
            	case MdiStudHosptlColumn.EdAcadYearId:
            		return this.EdAcadYearId.Value.CompareTo(rhs.EdAcadYearId.Value);
            		
            		                 
            	
            	
            	case MdiStudHosptlColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.Value.CompareTo(rhs.EdCodeSemesterId.Value);
            		
            		                 
            	
            	
            	case MdiStudHosptlColumn.RqustNum:
            		return this.RqustNum.CompareTo(rhs.RqustNum);
            		
            		                 
            	
            	
            	case MdiStudHosptlColumn.EdStudId:
            		return this.EdStudId.CompareTo(rhs.EdStudId);
            		
            		                 
            	
            	
            	case MdiStudHosptlColumn.MdiCdeHosptlId:
            		return this.MdiCdeHosptlId.Value.CompareTo(rhs.MdiCdeHosptlId.Value);
            		
            		                 
            	
            	
            	case MdiStudHosptlColumn.EntrncDatetime:
            		return this.EntrncDatetime.CompareTo(rhs.EntrncDatetime);
            		
            		                 
            	
            	
            	case MdiStudHosptlColumn.ExitDatetime:
            		return this.ExitDatetime.Value.CompareTo(rhs.ExitDatetime.Value);
            		
            		                 
            	
            	
            	case MdiStudHosptlColumn.Complaint:
            		return this.Complaint.CompareTo(rhs.Complaint);
            		
            		                 
            	
            	
            	case MdiStudHosptlColumn.Treatment:
            		return this.Treatment.CompareTo(rhs.Treatment);
            		
            		                 
            	
            	
            	case MdiStudHosptlColumn.Recommend:
            		return this.Recommend.CompareTo(rhs.Recommend);
            		
            		                 
            	
            	
            	case MdiStudHosptlColumn.HosptlFlg:
            		return this.HosptlFlg.Value.CompareTo(rhs.HosptlFlg.Value);
            		
            		                 
            	
            	
            	case MdiStudHosptlColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<MdiStudHosptlKey> Members
		
		// member variable for the EntityId property
		private MdiStudHosptlKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual MdiStudHosptlKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new MdiStudHosptlKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("MdiStudHosptl")
					.Append("|").Append( this.MdiStudHosptlId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{14}{13}- MdiStudHosptlId: {0}{13}- EdAcadYearId: {1}{13}- EdCodeSemesterId: {2}{13}- RqustNum: {3}{13}- EdStudId: {4}{13}- MdiCdeHosptlId: {5}{13}- EntrncDatetime: {6}{13}- ExitDatetime: {7}{13}- Complaint: {8}{13}- Treatment: {9}{13}- Recommend: {10}{13}- HosptlFlg: {11}{13}- Notes: {12}{13}{15}", 
				this.MdiStudHosptlId,
				(this.EdAcadYearId == null) ? string.Empty : this.EdAcadYearId.ToString(),
				(this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString(),
				(this.RqustNum == null) ? string.Empty : this.RqustNum.ToString(),
				this.EdStudId,
				(this.MdiCdeHosptlId == null) ? string.Empty : this.MdiCdeHosptlId.ToString(),
				this.EntrncDatetime,
				(this.ExitDatetime == null) ? string.Empty : this.ExitDatetime.ToString(),
				(this.Complaint == null) ? string.Empty : this.Complaint.ToString(),
				(this.Treatment == null) ? string.Empty : this.Treatment.ToString(),
				(this.Recommend == null) ? string.Empty : this.Recommend.ToString(),
				(this.HosptlFlg == null) ? string.Empty : this.HosptlFlg.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'MDI_STUD_HOSPTL' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class MdiStudHosptlEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MDI_STUD_HOSPTL_ID : بيانات دخول مستشفى
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "MDI_STUD_HOSPTL"</remarks>
		public System.Decimal MdiStudHosptlId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalMdiStudHosptlId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal?		  EdAcadYearId = null;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : مسلسل الفصل الدراسي
		/// </summary>
		public System.Decimal?		  EdCodeSemesterId = null;
		
		/// <summary>
		/// RQUST_NUM : 
		/// </summary>
		public System.String		  RqustNum = null;
		
		/// <summary>
		/// ED_STUD_ID : مسلسل الطالب
		/// </summary>
		public System.Decimal		  EdStudId = 0.0m;
		
		/// <summary>
		/// MDI_CDE_HOSPTL_ID : 
		/// </summary>
		public System.Decimal?		  MdiCdeHosptlId = null;
		
		/// <summary>
		/// ENTRNC_DATETIME : تاريخ الدخول
		/// </summary>
		public System.DateTime		  EntrncDatetime = DateTime.MinValue;
		
		/// <summary>
		/// EXIT_DATETIME : تاريخ الخروج
		/// </summary>
		public System.DateTime?		  ExitDatetime = null;
		
		/// <summary>
		/// COMPLAINT : الشكوى/الاعراض
		/// </summary>
		public System.String		  Complaint = null;
		
		/// <summary>
		/// TREATMENT : الاجراء/العلاح
		/// </summary>
		public System.String		  Treatment = null;
		
		/// <summary>
		/// RECOMMEND : التوصية لطبية
		/// </summary>
		public System.String		  Recommend = null;
		
		/// <summary>
		/// HOSPTL_FLG : 0 حجز تحت الملاحظة - 1 مستشفى
		/// </summary>
		public System.Decimal?		  HosptlFlg = null;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private MdiCdeHosptl _mdiCdeHosptlIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="MdiCdeHosptl"/>.
		/// </summary>
		/// <value>The source MdiCdeHosptl for MdiCdeHosptlId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual MdiCdeHosptl MdiCdeHosptlIdSource
      	{
            get { return this._mdiCdeHosptlIdSource; }
            set { this._mdiCdeHosptlIdSource = value; }
      	}
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region MltStudBhvrAttndcCollection
		
		private TList<MltStudBhvrAttndc> _mltStudBhvrAttndcMdiStudHosptlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _mltStudBhvrAttndcMdiStudHosptlId
		/// </summary>
		
		public TList<MltStudBhvrAttndc> MltStudBhvrAttndcCollection
		{
			get
			{
				if (_mltStudBhvrAttndcMdiStudHosptlId == null)
				{
				_mltStudBhvrAttndcMdiStudHosptlId = new TList<MltStudBhvrAttndc>();
				}
	
				return _mltStudBhvrAttndcMdiStudHosptlId;
			}
			set { _mltStudBhvrAttndcMdiStudHosptlId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			MdiStudHosptlEntityData _tmp = new MdiStudHosptlEntityData();
						
			_tmp.MdiStudHosptlId = this.MdiStudHosptlId;
			_tmp.OriginalMdiStudHosptlId = this.OriginalMdiStudHosptlId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.RqustNum = this.RqustNum;
			_tmp.EdStudId = this.EdStudId;
			_tmp.MdiCdeHosptlId = this.MdiCdeHosptlId;
			_tmp.EntrncDatetime = this.EntrncDatetime;
			_tmp.ExitDatetime = this.ExitDatetime;
			_tmp.Complaint = this.Complaint;
			_tmp.Treatment = this.Treatment;
			_tmp.Recommend = this.Recommend;
			_tmp.HosptlFlg = this.HosptlFlg;
			_tmp.Notes = this.Notes;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.MdiCdeHosptlIdSource != null)
				_tmp.MdiCdeHosptlIdSource = MakeCopyOf(this.MdiCdeHosptlIdSource) as MdiCdeHosptl;
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._mltStudBhvrAttndcMdiStudHosptlId != null)
				_tmp.MltStudBhvrAttndcCollection = (TList<MltStudBhvrAttndc>) MakeCopyOf(this.MltStudBhvrAttndcCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			MdiStudHosptlEntityData _tmp = new MdiStudHosptlEntityData();
						
			_tmp.MdiStudHosptlId = this.MdiStudHosptlId;
			_tmp.OriginalMdiStudHosptlId = this.OriginalMdiStudHosptlId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.RqustNum = this.RqustNum;
			_tmp.EdStudId = this.EdStudId;
			_tmp.MdiCdeHosptlId = this.MdiCdeHosptlId;
			_tmp.EntrncDatetime = this.EntrncDatetime;
			_tmp.ExitDatetime = this.ExitDatetime;
			_tmp.Complaint = this.Complaint;
			_tmp.Treatment = this.Treatment;
			_tmp.Recommend = this.Recommend;
			_tmp.HosptlFlg = this.HosptlFlg;
			_tmp.Notes = this.Notes;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.MdiCdeHosptlIdSource != null && existingCopies.Contains(this.MdiCdeHosptlIdSource))
				_tmp.MdiCdeHosptlIdSource = existingCopies[this.MdiCdeHosptlIdSource] as MdiCdeHosptl;
			else
				_tmp.MdiCdeHosptlIdSource = MakeCopyOf(this.MdiCdeHosptlIdSource, existingCopies) as MdiCdeHosptl;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.MltStudBhvrAttndcCollection = (TList<MltStudBhvrAttndc>) MakeCopyOf(this.MltStudBhvrAttndcCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MdiStudHosptlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(MdiStudHosptlColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MdiStudHosptlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(MdiStudHosptlColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MdiStudHosptlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(MdiStudHosptlColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				MdiStudHosptlEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new MdiStudHosptlEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MdiStudHosptlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(MdiStudHosptlColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				MdiStudHosptlEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new MdiStudHosptlEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region MdiStudHosptlEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="MdiStudHosptl"/> object.
	/// </remarks>
	public class MdiStudHosptlEventArgs : System.EventArgs
	{
		private MdiStudHosptlColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the MdiStudHosptlEventArgs class.
		///</summary>
		public MdiStudHosptlEventArgs(MdiStudHosptlColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the MdiStudHosptlEventArgs class.
		///</summary>
		public MdiStudHosptlEventArgs(MdiStudHosptlColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The MdiStudHosptlColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="MdiStudHosptlColumn" />
		public MdiStudHosptlColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all MdiStudHosptl related events.
	///</summary>
	public delegate void MdiStudHosptlEventHandler(object sender, MdiStudHosptlEventArgs e);
	
	#region MdiStudHosptlComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class MdiStudHosptlComparer : System.Collections.Generic.IComparer<MdiStudHosptl>
	{
		MdiStudHosptlColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:MdiStudHosptlComparer"/> class.
        /// </summary>
		public MdiStudHosptlComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:MdiStudHosptlComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public MdiStudHosptlComparer(MdiStudHosptlColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="MdiStudHosptl"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="MdiStudHosptl"/> to compare.</param>
        /// <param name="b">The second <c>MdiStudHosptl</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(MdiStudHosptl a, MdiStudHosptl b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(MdiStudHosptl entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(MdiStudHosptl a, MdiStudHosptl b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public MdiStudHosptlColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region MdiStudHosptlKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="MdiStudHosptl"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class MdiStudHosptlKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the MdiStudHosptlKey class.
		/// </summary>
		public MdiStudHosptlKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the MdiStudHosptlKey class.
		/// </summary>
		public MdiStudHosptlKey(MdiStudHosptlBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MdiStudHosptlId = entity.MdiStudHosptlId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the MdiStudHosptlKey class.
		/// </summary>
		public MdiStudHosptlKey(System.Decimal _mdiStudHosptlId)
		{
			#region Init Properties

			this.MdiStudHosptlId = _mdiStudHosptlId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private MdiStudHosptlBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public MdiStudHosptlBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MdiStudHosptlId property
		private System.Decimal _mdiStudHosptlId;
		
		/// <summary>
		/// Gets or sets the MdiStudHosptlId property.
		/// </summary>
		public System.Decimal MdiStudHosptlId
		{
			get { return _mdiStudHosptlId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MdiStudHosptlId = value;
				
				_mdiStudHosptlId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MdiStudHosptlId = ( values["MdiStudHosptlId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["MdiStudHosptlId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MdiStudHosptlId", MdiStudHosptlId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MdiStudHosptlId: {0}{1}",
								MdiStudHosptlId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region MdiStudHosptlColumn Enum
	
	/// <summary>
	/// Enumerate the MdiStudHosptl columns.
	/// </summary>
	[Serializable]
	public enum MdiStudHosptlColumn : int
	{
		/// <summary>
		/// MdiStudHosptlId : بيانات دخول مستشفى
		/// </summary>
		[EnumTextValue("MDI_STUD_HOSPTL_ID")]
		[ColumnEnum("MDI_STUD_HOSPTL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		MdiStudHosptlId = 1,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdAcadYearId = 2,
		/// <summary>
		/// EdCodeSemesterId : مسلسل الفصل الدراسي
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeSemesterId = 3,
		/// <summary>
		/// RqustNum : 
		/// </summary>
		[EnumTextValue("RQUST_NUM")]
		[ColumnEnum("RQUST_NUM", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		RqustNum = 4,
		/// <summary>
		/// EdStudId : مسلسل الطالب
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudId = 5,
		/// <summary>
		/// MdiCdeHosptlId : 
		/// </summary>
		[EnumTextValue("MDI_CDE_HOSPTL_ID")]
		[ColumnEnum("MDI_CDE_HOSPTL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MdiCdeHosptlId = 6,
		/// <summary>
		/// EntrncDatetime : تاريخ الدخول
		/// </summary>
		[EnumTextValue("ENTRNC_DATETIME")]
		[ColumnEnum("ENTRNC_DATETIME", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		EntrncDatetime = 7,
		/// <summary>
		/// ExitDatetime : تاريخ الخروج
		/// </summary>
		[EnumTextValue("EXIT_DATETIME")]
		[ColumnEnum("EXIT_DATETIME", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ExitDatetime = 8,
		/// <summary>
		/// Complaint : الشكوى/الاعراض
		/// </summary>
		[EnumTextValue("COMPLAINT")]
		[ColumnEnum("COMPLAINT", typeof(System.String), System.Data.DbType.String, false, false, true, 300)]
		Complaint = 9,
		/// <summary>
		/// Treatment : الاجراء/العلاح
		/// </summary>
		[EnumTextValue("TREATMENT")]
		[ColumnEnum("TREATMENT", typeof(System.String), System.Data.DbType.String, false, false, true, 300)]
		Treatment = 10,
		/// <summary>
		/// Recommend : التوصية لطبية
		/// </summary>
		[EnumTextValue("RECOMMEND")]
		[ColumnEnum("RECOMMEND", typeof(System.String), System.Data.DbType.String, false, false, true, 300)]
		Recommend = 11,
		/// <summary>
		/// HosptlFlg : 0 حجز تحت الملاحظة - 1 مستشفى
		/// </summary>
		[EnumTextValue("HOSPTL_FLG")]
		[ColumnEnum("HOSPTL_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HosptlFlg = 12,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 300)]
		Notes = 13
	}//End enum

	#endregion MdiStudHosptlColumn Enum

} // end namespace
