
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SeApplicationAudit.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SE_APPLICATION_AUDIT' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SeApplicationAuditBase : EntityBase, ISeApplicationAudit, IEntityId<SeApplicationAuditKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SeApplicationAuditEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SeApplicationAuditEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SeApplicationAuditEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SeApplicationAudit> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SeApplicationAuditEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SeApplicationAuditEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SeApplicationAuditBase"/> instance.
		///</summary>
		public SeApplicationAuditBase()
		{
			this.entityData = new SeApplicationAuditEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SeApplicationAuditBase"/> instance.
		///</summary>
		///<param name="_auditDate"></param>
		///<param name="_sysUser"></param>
		///<param name="_application"></param>
		///<param name="_auditTableName"></param>
		///<param name="_operation"></param>
		///<param name="_primaryKey"></param>
		///<param name="_rowDescription"></param>
		///<param name="_secondaryRow"></param>
		///<param name="_auditColumnName"></param>
		///<param name="_oldValue"></param>
		///<param name="_newValue"></param>
		public SeApplicationAuditBase(System.DateTime _auditDate, System.String _sysUser, 
			System.String _application, System.String _auditTableName, System.String _operation, 
			System.Int32 _primaryKey, System.String _rowDescription, System.String _secondaryRow, 
			System.String _auditColumnName, System.String _oldValue, System.String _newValue)
		{
			this.entityData = new SeApplicationAuditEntityData();
			this.backupData = null;

			this.AuditDate = _auditDate;
			this.SysUser = _sysUser;
			this.Application = _application;
			this.AuditTableName = _auditTableName;
			this.Operation = _operation;
			this.PrimaryKey = _primaryKey;
			this.RowDescription = _rowDescription;
			this.SecondaryRow = _secondaryRow;
			this.AuditColumnName = _auditColumnName;
			this.OldValue = _oldValue;
			this.NewValue = _newValue;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SeApplicationAudit"/> instance.
		///</summary>
		///<param name="_auditDate"></param>
		///<param name="_sysUser"></param>
		///<param name="_application"></param>
		///<param name="_auditTableName"></param>
		///<param name="_operation"></param>
		///<param name="_primaryKey"></param>
		///<param name="_rowDescription"></param>
		///<param name="_secondaryRow"></param>
		///<param name="_auditColumnName"></param>
		///<param name="_oldValue"></param>
		///<param name="_newValue"></param>
		public static SeApplicationAudit CreateSeApplicationAudit(System.DateTime _auditDate, System.String _sysUser, 
			System.String _application, System.String _auditTableName, System.String _operation, 
			System.Int32 _primaryKey, System.String _rowDescription, System.String _secondaryRow, 
			System.String _auditColumnName, System.String _oldValue, System.String _newValue)
		{
			SeApplicationAudit newSeApplicationAudit = new SeApplicationAudit();
			newSeApplicationAudit.AuditDate = _auditDate;
			newSeApplicationAudit.SysUser = _sysUser;
			newSeApplicationAudit.Application = _application;
			newSeApplicationAudit.AuditTableName = _auditTableName;
			newSeApplicationAudit.Operation = _operation;
			newSeApplicationAudit.PrimaryKey = _primaryKey;
			newSeApplicationAudit.RowDescription = _rowDescription;
			newSeApplicationAudit.SecondaryRow = _secondaryRow;
			newSeApplicationAudit.AuditColumnName = _auditColumnName;
			newSeApplicationAudit.OldValue = _oldValue;
			newSeApplicationAudit.NewValue = _newValue;
			return newSeApplicationAudit;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SeApplicationAuditId property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int64 SeApplicationAuditId
		{
			get
			{
				return this.entityData.SeApplicationAuditId; 
			}
			
			set
			{
				if (this.entityData.SeApplicationAuditId == value)
					return;
					
				OnColumnChanging(SeApplicationAuditColumn.SeApplicationAuditId, this.entityData.SeApplicationAuditId);
				this.entityData.SeApplicationAuditId = value;
				this.EntityId.SeApplicationAuditId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeApplicationAuditColumn.SeApplicationAuditId, this.entityData.SeApplicationAuditId);
				OnPropertyChanged("SeApplicationAuditId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AuditDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime AuditDate
		{
			get
			{
				return this.entityData.AuditDate; 
			}
			
			set
			{
				if (this.entityData.AuditDate == value)
					return;
					
				OnColumnChanging(SeApplicationAuditColumn.AuditDate, this.entityData.AuditDate);
				this.entityData.AuditDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeApplicationAuditColumn.AuditDate, this.entityData.AuditDate);
				OnPropertyChanged("AuditDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SysUser property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String SysUser
		{
			get
			{
				return this.entityData.SysUser; 
			}
			
			set
			{
				if (this.entityData.SysUser == value)
					return;
					
				OnColumnChanging(SeApplicationAuditColumn.SysUser, this.entityData.SysUser);
				this.entityData.SysUser = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeApplicationAuditColumn.SysUser, this.entityData.SysUser);
				OnPropertyChanged("SysUser");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Application property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String Application
		{
			get
			{
				return this.entityData.Application; 
			}
			
			set
			{
				if (this.entityData.Application == value)
					return;
					
				OnColumnChanging(SeApplicationAuditColumn.Application, this.entityData.Application);
				this.entityData.Application = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeApplicationAuditColumn.Application, this.entityData.Application);
				OnPropertyChanged("Application");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AuditTableName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 128)]
		public virtual System.String AuditTableName
		{
			get
			{
				return this.entityData.AuditTableName; 
			}
			
			set
			{
				if (this.entityData.AuditTableName == value)
					return;
					
				OnColumnChanging(SeApplicationAuditColumn.AuditTableName, this.entityData.AuditTableName);
				this.entityData.AuditTableName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeApplicationAuditColumn.AuditTableName, this.entityData.AuditTableName);
				OnPropertyChanged("AuditTableName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Operation property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 1)]
		public virtual System.String Operation
		{
			get
			{
				return this.entityData.Operation; 
			}
			
			set
			{
				if (this.entityData.Operation == value)
					return;
					
				OnColumnChanging(SeApplicationAuditColumn.Operation, this.entityData.Operation);
				this.entityData.Operation = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeApplicationAuditColumn.Operation, this.entityData.Operation);
				OnPropertyChanged("Operation");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrimaryKey property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 PrimaryKey
		{
			get
			{
				return this.entityData.PrimaryKey; 
			}
			
			set
			{
				if (this.entityData.PrimaryKey == value)
					return;
					
				OnColumnChanging(SeApplicationAuditColumn.PrimaryKey, this.entityData.PrimaryKey);
				this.entityData.PrimaryKey = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeApplicationAuditColumn.PrimaryKey, this.entityData.PrimaryKey);
				OnPropertyChanged("PrimaryKey");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RowDescription property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String RowDescription
		{
			get
			{
				return this.entityData.RowDescription; 
			}
			
			set
			{
				if (this.entityData.RowDescription == value)
					return;
					
				OnColumnChanging(SeApplicationAuditColumn.RowDescription, this.entityData.RowDescription);
				this.entityData.RowDescription = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeApplicationAuditColumn.RowDescription, this.entityData.RowDescription);
				OnPropertyChanged("RowDescription");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SecondaryRow property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String SecondaryRow
		{
			get
			{
				return this.entityData.SecondaryRow; 
			}
			
			set
			{
				if (this.entityData.SecondaryRow == value)
					return;
					
				OnColumnChanging(SeApplicationAuditColumn.SecondaryRow, this.entityData.SecondaryRow);
				this.entityData.SecondaryRow = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeApplicationAuditColumn.SecondaryRow, this.entityData.SecondaryRow);
				OnPropertyChanged("SecondaryRow");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AuditColumnName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 128)]
		public virtual System.String AuditColumnName
		{
			get
			{
				return this.entityData.AuditColumnName; 
			}
			
			set
			{
				if (this.entityData.AuditColumnName == value)
					return;
					
				OnColumnChanging(SeApplicationAuditColumn.AuditColumnName, this.entityData.AuditColumnName);
				this.entityData.AuditColumnName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeApplicationAuditColumn.AuditColumnName, this.entityData.AuditColumnName);
				OnPropertyChanged("AuditColumnName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OldValue property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String OldValue
		{
			get
			{
				return this.entityData.OldValue; 
			}
			
			set
			{
				if (this.entityData.OldValue == value)
					return;
					
				OnColumnChanging(SeApplicationAuditColumn.OldValue, this.entityData.OldValue);
				this.entityData.OldValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeApplicationAuditColumn.OldValue, this.entityData.OldValue);
				OnPropertyChanged("OldValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NewValue property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String NewValue
		{
			get
			{
				return this.entityData.NewValue; 
			}
			
			set
			{
				if (this.entityData.NewValue == value)
					return;
					
				OnColumnChanging(SeApplicationAuditColumn.NewValue, this.entityData.NewValue);
				this.entityData.NewValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeApplicationAuditColumn.NewValue, this.entityData.NewValue);
				OnPropertyChanged("NewValue");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("SysUser", "Sys User"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SysUser", "Sys User", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Application", "Application"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Application", "Application", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("AuditTableName", "Audit Table Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AuditTableName", "Audit Table Name", 128));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Operation", "Operation"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Operation", "Operation", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("RowDescription", "Row Description", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SecondaryRow", "Secondary Row", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AuditColumnName", "Audit Column Name", 128));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("OldValue", "Old Value", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NewValue", "New Value", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SE_APPLICATION_AUDIT"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SE_APPLICATION_AUDIT_ID", "AUDIT_DATE", "SYS_USER", "APPLICATION", "AUDIT_TABLE_NAME", "OPERATION", "PRIMARY_KEY", "ROW_DESCRIPTION", "SECONDARY_ROW", "AUDIT_COLUMN_NAME", "OLD_VALUE", "NEW_VALUE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SeApplicationAuditEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SeApplicationAudit) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SeApplicationAudit>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SeApplicationAudit);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SeApplicationAudit Entity 
		///</summary>
		protected virtual SeApplicationAudit Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SeApplicationAudit copy = new SeApplicationAudit();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SeApplicationAuditId = this.SeApplicationAuditId;
				copy.AuditDate = this.AuditDate;
				copy.SysUser = this.SysUser;
				copy.Application = this.Application;
				copy.AuditTableName = this.AuditTableName;
				copy.Operation = this.Operation;
				copy.PrimaryKey = this.PrimaryKey;
				copy.RowDescription = this.RowDescription;
				copy.SecondaryRow = this.SecondaryRow;
				copy.AuditColumnName = this.AuditColumnName;
				copy.OldValue = this.OldValue;
				copy.NewValue = this.NewValue;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SeApplicationAudit Entity 
		///</summary>
		public virtual SeApplicationAudit Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SeApplicationAudit Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SeApplicationAudit DeepCopy()
		{
			return EntityHelper.Clone<SeApplicationAudit>(this as SeApplicationAudit);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SeApplicationAuditEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SeApplicationAuditEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SeApplicationAuditEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SeApplicationAuditColumn column)
		{
			switch(column)
			{
					case SeApplicationAuditColumn.SeApplicationAuditId:
					return entityData.SeApplicationAuditId != _originalData.SeApplicationAuditId;
					case SeApplicationAuditColumn.AuditDate:
					return entityData.AuditDate != _originalData.AuditDate;
					case SeApplicationAuditColumn.SysUser:
					return entityData.SysUser != _originalData.SysUser;
					case SeApplicationAuditColumn.Application:
					return entityData.Application != _originalData.Application;
					case SeApplicationAuditColumn.AuditTableName:
					return entityData.AuditTableName != _originalData.AuditTableName;
					case SeApplicationAuditColumn.Operation:
					return entityData.Operation != _originalData.Operation;
					case SeApplicationAuditColumn.PrimaryKey:
					return entityData.PrimaryKey != _originalData.PrimaryKey;
					case SeApplicationAuditColumn.RowDescription:
					return entityData.RowDescription != _originalData.RowDescription;
					case SeApplicationAuditColumn.SecondaryRow:
					return entityData.SecondaryRow != _originalData.SecondaryRow;
					case SeApplicationAuditColumn.AuditColumnName:
					return entityData.AuditColumnName != _originalData.AuditColumnName;
					case SeApplicationAuditColumn.OldValue:
					return entityData.OldValue != _originalData.OldValue;
					case SeApplicationAuditColumn.NewValue:
					return entityData.NewValue != _originalData.NewValue;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SeApplicationAuditColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SeApplicationAuditId != _originalData.SeApplicationAuditId;
			result = result || entityData.AuditDate != _originalData.AuditDate;
			result = result || entityData.SysUser != _originalData.SysUser;
			result = result || entityData.Application != _originalData.Application;
			result = result || entityData.AuditTableName != _originalData.AuditTableName;
			result = result || entityData.Operation != _originalData.Operation;
			result = result || entityData.PrimaryKey != _originalData.PrimaryKey;
			result = result || entityData.RowDescription != _originalData.RowDescription;
			result = result || entityData.SecondaryRow != _originalData.SecondaryRow;
			result = result || entityData.AuditColumnName != _originalData.AuditColumnName;
			result = result || entityData.OldValue != _originalData.OldValue;
			result = result || entityData.NewValue != _originalData.NewValue;
			return result;
		}	
		
		///<summary>
		///  Returns a SeApplicationAudit Entity with the original data.
		///</summary>
		public SeApplicationAudit GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSeApplicationAudit(
				_originalData.AuditDate,
				_originalData.SysUser,
				_originalData.Application,
				_originalData.AuditTableName,
				_originalData.Operation,
				_originalData.PrimaryKey,
				_originalData.RowDescription,
				_originalData.SecondaryRow,
				_originalData.AuditColumnName,
				_originalData.OldValue,
				_originalData.NewValue
				);
				
			return (SeApplicationAudit)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SeApplicationAuditBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SeApplicationAuditBase)
				return ValueEquals(this, (SeApplicationAuditBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SeApplicationAuditBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SeApplicationAuditId.GetHashCode() ^ 
					this.AuditDate.GetHashCode() ^ 
					this.SysUser.GetHashCode() ^ 
					this.Application.GetHashCode() ^ 
					this.AuditTableName.GetHashCode() ^ 
					this.Operation.GetHashCode() ^ 
					this.PrimaryKey.GetHashCode() ^ 
					((this.RowDescription == null) ? string.Empty : this.RowDescription.ToString()).GetHashCode() ^ 
					((this.SecondaryRow == null) ? string.Empty : this.SecondaryRow.ToString()).GetHashCode() ^ 
					((this.AuditColumnName == null) ? string.Empty : this.AuditColumnName.ToString()).GetHashCode() ^ 
					((this.OldValue == null) ? string.Empty : this.OldValue.ToString()).GetHashCode() ^ 
					((this.NewValue == null) ? string.Empty : this.NewValue.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SeApplicationAuditBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SeApplicationAuditBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SeApplicationAuditBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SeApplicationAuditBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SeApplicationAuditBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SeApplicationAuditBase Object1, SeApplicationAuditBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SeApplicationAuditId != Object2.SeApplicationAuditId)
				equal = false;
			if (Object1.AuditDate != Object2.AuditDate)
				equal = false;
			if (Object1.SysUser != Object2.SysUser)
				equal = false;
			if (Object1.Application != Object2.Application)
				equal = false;
			if (Object1.AuditTableName != Object2.AuditTableName)
				equal = false;
			if (Object1.Operation != Object2.Operation)
				equal = false;
			if (Object1.PrimaryKey != Object2.PrimaryKey)
				equal = false;
			if ( Object1.RowDescription != null && Object2.RowDescription != null )
			{
				if (Object1.RowDescription != Object2.RowDescription)
					equal = false;
			}
			else if (Object1.RowDescription == null ^ Object2.RowDescription == null )
			{
				equal = false;
			}
			if ( Object1.SecondaryRow != null && Object2.SecondaryRow != null )
			{
				if (Object1.SecondaryRow != Object2.SecondaryRow)
					equal = false;
			}
			else if (Object1.SecondaryRow == null ^ Object2.SecondaryRow == null )
			{
				equal = false;
			}
			if ( Object1.AuditColumnName != null && Object2.AuditColumnName != null )
			{
				if (Object1.AuditColumnName != Object2.AuditColumnName)
					equal = false;
			}
			else if (Object1.AuditColumnName == null ^ Object2.AuditColumnName == null )
			{
				equal = false;
			}
			if ( Object1.OldValue != null && Object2.OldValue != null )
			{
				if (Object1.OldValue != Object2.OldValue)
					equal = false;
			}
			else if (Object1.OldValue == null ^ Object2.OldValue == null )
			{
				equal = false;
			}
			if ( Object1.NewValue != null && Object2.NewValue != null )
			{
				if (Object1.NewValue != Object2.NewValue)
					equal = false;
			}
			else if (Object1.NewValue == null ^ Object2.NewValue == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SeApplicationAuditBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SeApplicationAuditComparer GetComparer()
        {
            return new SeApplicationAuditComparer();
        }
        */

        // Comparer delegates back to SeApplicationAudit
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SeApplicationAudit rhs, SeApplicationAuditColumn which)
        {
            switch (which)
            {
            	
            	
            	case SeApplicationAuditColumn.SeApplicationAuditId:
            		return this.SeApplicationAuditId.CompareTo(rhs.SeApplicationAuditId);
            		
            		                 
            	
            	
            	case SeApplicationAuditColumn.AuditDate:
            		return this.AuditDate.CompareTo(rhs.AuditDate);
            		
            		                 
            	
            	
            	case SeApplicationAuditColumn.SysUser:
            		return this.SysUser.CompareTo(rhs.SysUser);
            		
            		                 
            	
            	
            	case SeApplicationAuditColumn.Application:
            		return this.Application.CompareTo(rhs.Application);
            		
            		                 
            	
            	
            	case SeApplicationAuditColumn.AuditTableName:
            		return this.AuditTableName.CompareTo(rhs.AuditTableName);
            		
            		                 
            	
            	
            	case SeApplicationAuditColumn.Operation:
            		return this.Operation.CompareTo(rhs.Operation);
            		
            		                 
            	
            	
            	case SeApplicationAuditColumn.PrimaryKey:
            		return this.PrimaryKey.CompareTo(rhs.PrimaryKey);
            		
            		                 
            	
            	
            	case SeApplicationAuditColumn.RowDescription:
            		return this.RowDescription.CompareTo(rhs.RowDescription);
            		
            		                 
            	
            	
            	case SeApplicationAuditColumn.SecondaryRow:
            		return this.SecondaryRow.CompareTo(rhs.SecondaryRow);
            		
            		                 
            	
            	
            	case SeApplicationAuditColumn.AuditColumnName:
            		return this.AuditColumnName.CompareTo(rhs.AuditColumnName);
            		
            		                 
            	
            	
            	case SeApplicationAuditColumn.OldValue:
            		return this.OldValue.CompareTo(rhs.OldValue);
            		
            		                 
            	
            	
            	case SeApplicationAuditColumn.NewValue:
            		return this.NewValue.CompareTo(rhs.NewValue);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SeApplicationAuditKey> Members
		
		// member variable for the EntityId property
		private SeApplicationAuditKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SeApplicationAuditKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SeApplicationAuditKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SeApplicationAudit")
					.Append("|").Append( this.SeApplicationAuditId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- SeApplicationAuditId: {0}{12}- AuditDate: {1}{12}- SysUser: {2}{12}- Application: {3}{12}- AuditTableName: {4}{12}- Operation: {5}{12}- PrimaryKey: {6}{12}- RowDescription: {7}{12}- SecondaryRow: {8}{12}- AuditColumnName: {9}{12}- OldValue: {10}{12}- NewValue: {11}{12}{14}", 
				this.SeApplicationAuditId,
				this.AuditDate,
				this.SysUser,
				this.Application,
				this.AuditTableName,
				this.Operation,
				this.PrimaryKey,
				(this.RowDescription == null) ? string.Empty : this.RowDescription.ToString(),
				(this.SecondaryRow == null) ? string.Empty : this.SecondaryRow.ToString(),
				(this.AuditColumnName == null) ? string.Empty : this.AuditColumnName.ToString(),
				(this.OldValue == null) ? string.Empty : this.OldValue.ToString(),
				(this.NewValue == null) ? string.Empty : this.NewValue.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SE_APPLICATION_AUDIT' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SeApplicationAuditEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SE_APPLICATION_AUDIT_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SE_APPLICATION_AUDIT"</remarks>
		public System.Int64 SeApplicationAuditId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// AUDIT_DATE : 
		/// </summary>
		public System.DateTime		  AuditDate = DateTime.MinValue;
		
		/// <summary>
		/// SYS_USER : 
		/// </summary>
		public System.String		  SysUser = string.Empty;
		
		/// <summary>
		/// APPLICATION : 
		/// </summary>
		public System.String		  Application = string.Empty;
		
		/// <summary>
		/// AUDIT_TABLE_NAME : 
		/// </summary>
		public System.String		  AuditTableName = string.Empty;
		
		/// <summary>
		/// OPERATION : 
		/// </summary>
		public System.String		  Operation = string.Empty;
		
		/// <summary>
		/// PRIMARY_KEY : 
		/// </summary>
		public System.Int32		  PrimaryKey = (int)0;
		
		/// <summary>
		/// ROW_DESCRIPTION : 
		/// </summary>
		public System.String		  RowDescription = null;
		
		/// <summary>
		/// SECONDARY_ROW : 
		/// </summary>
		public System.String		  SecondaryRow = null;
		
		/// <summary>
		/// AUDIT_COLUMN_NAME : 
		/// </summary>
		public System.String		  AuditColumnName = null;
		
		/// <summary>
		/// OLD_VALUE : 
		/// </summary>
		public System.String		  OldValue = null;
		
		/// <summary>
		/// NEW_VALUE : 
		/// </summary>
		public System.String		  NewValue = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SeApplicationAuditEntityData _tmp = new SeApplicationAuditEntityData();
						
			_tmp.SeApplicationAuditId = this.SeApplicationAuditId;
			
			_tmp.AuditDate = this.AuditDate;
			_tmp.SysUser = this.SysUser;
			_tmp.Application = this.Application;
			_tmp.AuditTableName = this.AuditTableName;
			_tmp.Operation = this.Operation;
			_tmp.PrimaryKey = this.PrimaryKey;
			_tmp.RowDescription = this.RowDescription;
			_tmp.SecondaryRow = this.SecondaryRow;
			_tmp.AuditColumnName = this.AuditColumnName;
			_tmp.OldValue = this.OldValue;
			_tmp.NewValue = this.NewValue;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SeApplicationAuditEntityData _tmp = new SeApplicationAuditEntityData();
						
			_tmp.SeApplicationAuditId = this.SeApplicationAuditId;
			
			_tmp.AuditDate = this.AuditDate;
			_tmp.SysUser = this.SysUser;
			_tmp.Application = this.Application;
			_tmp.AuditTableName = this.AuditTableName;
			_tmp.Operation = this.Operation;
			_tmp.PrimaryKey = this.PrimaryKey;
			_tmp.RowDescription = this.RowDescription;
			_tmp.SecondaryRow = this.SecondaryRow;
			_tmp.AuditColumnName = this.AuditColumnName;
			_tmp.OldValue = this.OldValue;
			_tmp.NewValue = this.NewValue;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SeApplicationAuditColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SeApplicationAuditColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SeApplicationAuditColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SeApplicationAuditColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SeApplicationAuditColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SeApplicationAuditColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SeApplicationAuditEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SeApplicationAuditEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SeApplicationAuditColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SeApplicationAuditColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SeApplicationAuditEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SeApplicationAuditEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SeApplicationAuditEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SeApplicationAudit"/> object.
	/// </remarks>
	public class SeApplicationAuditEventArgs : System.EventArgs
	{
		private SeApplicationAuditColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SeApplicationAuditEventArgs class.
		///</summary>
		public SeApplicationAuditEventArgs(SeApplicationAuditColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SeApplicationAuditEventArgs class.
		///</summary>
		public SeApplicationAuditEventArgs(SeApplicationAuditColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SeApplicationAuditColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SeApplicationAuditColumn" />
		public SeApplicationAuditColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SeApplicationAudit related events.
	///</summary>
	public delegate void SeApplicationAuditEventHandler(object sender, SeApplicationAuditEventArgs e);
	
	#region SeApplicationAuditComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SeApplicationAuditComparer : System.Collections.Generic.IComparer<SeApplicationAudit>
	{
		SeApplicationAuditColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SeApplicationAuditComparer"/> class.
        /// </summary>
		public SeApplicationAuditComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SeApplicationAuditComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SeApplicationAuditComparer(SeApplicationAuditColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SeApplicationAudit"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SeApplicationAudit"/> to compare.</param>
        /// <param name="b">The second <c>SeApplicationAudit</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SeApplicationAudit a, SeApplicationAudit b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SeApplicationAudit entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SeApplicationAudit a, SeApplicationAudit b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SeApplicationAuditColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SeApplicationAuditKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SeApplicationAudit"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SeApplicationAuditKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SeApplicationAuditKey class.
		/// </summary>
		public SeApplicationAuditKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SeApplicationAuditKey class.
		/// </summary>
		public SeApplicationAuditKey(SeApplicationAuditBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SeApplicationAuditId = entity.SeApplicationAuditId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SeApplicationAuditKey class.
		/// </summary>
		public SeApplicationAuditKey(System.Int64 _seApplicationAuditId)
		{
			#region Init Properties

			this.SeApplicationAuditId = _seApplicationAuditId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SeApplicationAuditBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SeApplicationAuditBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SeApplicationAuditId property
		private System.Int64 _seApplicationAuditId;
		
		/// <summary>
		/// Gets or sets the SeApplicationAuditId property.
		/// </summary>
		public System.Int64 SeApplicationAuditId
		{
			get { return _seApplicationAuditId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SeApplicationAuditId = value;
				
				_seApplicationAuditId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SeApplicationAuditId = ( values["SeApplicationAuditId"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["SeApplicationAuditId"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SeApplicationAuditId", SeApplicationAuditId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SeApplicationAuditId: {0}{1}",
								SeApplicationAuditId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SeApplicationAuditColumn Enum
	
	/// <summary>
	/// Enumerate the SeApplicationAudit columns.
	/// </summary>
	[Serializable]
	public enum SeApplicationAuditColumn : int
	{
		/// <summary>
		/// SeApplicationAuditId : 
		/// </summary>
		[EnumTextValue("SE_APPLICATION_AUDIT_ID")]
		[ColumnEnum("SE_APPLICATION_AUDIT_ID", typeof(System.Int64), System.Data.DbType.Int64, true, true, false)]
		SeApplicationAuditId = 1,
		/// <summary>
		/// AuditDate : 
		/// </summary>
		[EnumTextValue("AUDIT_DATE")]
		[ColumnEnum("AUDIT_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		AuditDate = 2,
		/// <summary>
		/// SysUser : 
		/// </summary>
		[EnumTextValue("SYS_USER")]
		[ColumnEnum("SYS_USER", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		SysUser = 3,
		/// <summary>
		/// Application : 
		/// </summary>
		[EnumTextValue("APPLICATION")]
		[ColumnEnum("APPLICATION", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		Application = 4,
		/// <summary>
		/// AuditTableName : 
		/// </summary>
		[EnumTextValue("AUDIT_TABLE_NAME")]
		[ColumnEnum("AUDIT_TABLE_NAME", typeof(System.String), System.Data.DbType.String, false, false, false, 128)]
		AuditTableName = 5,
		/// <summary>
		/// Operation : 
		/// </summary>
		[EnumTextValue("OPERATION")]
		[ColumnEnum("OPERATION", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, false, 1)]
		Operation = 6,
		/// <summary>
		/// PrimaryKey : 
		/// </summary>
		[EnumTextValue("PRIMARY_KEY")]
		[ColumnEnum("PRIMARY_KEY", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		PrimaryKey = 7,
		/// <summary>
		/// RowDescription : 
		/// </summary>
		[EnumTextValue("ROW_DESCRIPTION")]
		[ColumnEnum("ROW_DESCRIPTION", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		RowDescription = 8,
		/// <summary>
		/// SecondaryRow : 
		/// </summary>
		[EnumTextValue("SECONDARY_ROW")]
		[ColumnEnum("SECONDARY_ROW", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		SecondaryRow = 9,
		/// <summary>
		/// AuditColumnName : 
		/// </summary>
		[EnumTextValue("AUDIT_COLUMN_NAME")]
		[ColumnEnum("AUDIT_COLUMN_NAME", typeof(System.String), System.Data.DbType.String, false, false, true, 128)]
		AuditColumnName = 10,
		/// <summary>
		/// OldValue : 
		/// </summary>
		[EnumTextValue("OLD_VALUE")]
		[ColumnEnum("OLD_VALUE", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		OldValue = 11,
		/// <summary>
		/// NewValue : 
		/// </summary>
		[EnumTextValue("NEW_VALUE")]
		[ColumnEnum("NEW_VALUE", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		NewValue = 12
	}//End enum

	#endregion SeApplicationAuditColumn Enum

} // end namespace
