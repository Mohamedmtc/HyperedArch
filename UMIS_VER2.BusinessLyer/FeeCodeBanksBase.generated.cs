
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file FeeCodeBanks.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'FEE_CODE_BANKS' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class FeeCodeBanksBase : EntityBase, IFeeCodeBanks, IEntityId<FeeCodeBanksKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private FeeCodeBanksEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private FeeCodeBanksEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private FeeCodeBanksEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<FeeCodeBanks> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeCodeBanksEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeCodeBanksEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="FeeCodeBanksBase"/> instance.
		///</summary>
		public FeeCodeBanksBase()
		{
			this.entityData = new FeeCodeBanksEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="FeeCodeBanksBase"/> instance.
		///</summary>
		///<param name="_feeCodeBankId">اكواد  البنوك</param>
		///<param name="_descrAr"></param>
		///<param name="_descrEn"></param>
		///<param name="_bankAddress"></param>
		///<param name="_swiftCode">Ejust</param>
		///<param name="_seUserId"></param>
		///<param name="_dfultFlg"></param>
		///<param name="_trnsCommPrcnt">عمولة اونلاين البنك نسبة</param>
		///<param name="_trnsCommValue">عمولة اونلاين البنك قيمة</param>
		///<param name="_bankCode"></param>
		///<param name="_isVisible"></param>
		///<param name="_payPermissionDate"></param>
		public FeeCodeBanksBase(System.Decimal _feeCodeBankId, System.String _descrAr, 
			System.String _descrEn, System.String _bankAddress, System.String _swiftCode, System.Decimal? _seUserId, 
			System.Boolean? _dfultFlg, System.Decimal? _trnsCommPrcnt, System.Decimal? _trnsCommValue, 
			System.String _bankCode, System.Boolean? _isVisible, System.DateTime? _payPermissionDate)
		{
			this.entityData = new FeeCodeBanksEntityData();
			this.backupData = null;

			this.FeeCodeBankId = _feeCodeBankId;
			this.DescrAr = _descrAr;
			this.DescrEn = _descrEn;
			this.BankAddress = _bankAddress;
			this.SwiftCode = _swiftCode;
			this.SeUserId = _seUserId;
			this.DfultFlg = _dfultFlg;
			this.TrnsCommPrcnt = _trnsCommPrcnt;
			this.TrnsCommValue = _trnsCommValue;
			this.BankCode = _bankCode;
			this.IsVisible = _isVisible;
			this.PayPermissionDate = _payPermissionDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="FeeCodeBanks"/> instance.
		///</summary>
		///<param name="_feeCodeBankId">اكواد  البنوك</param>
		///<param name="_descrAr"></param>
		///<param name="_descrEn"></param>
		///<param name="_bankAddress"></param>
		///<param name="_swiftCode">Ejust</param>
		///<param name="_seUserId"></param>
		///<param name="_dfultFlg"></param>
		///<param name="_trnsCommPrcnt">عمولة اونلاين البنك نسبة</param>
		///<param name="_trnsCommValue">عمولة اونلاين البنك قيمة</param>
		///<param name="_bankCode"></param>
		///<param name="_isVisible"></param>
		///<param name="_payPermissionDate"></param>
		public static FeeCodeBanks CreateFeeCodeBanks(System.Decimal _feeCodeBankId, System.String _descrAr, 
			System.String _descrEn, System.String _bankAddress, System.String _swiftCode, System.Decimal? _seUserId, 
			System.Boolean? _dfultFlg, System.Decimal? _trnsCommPrcnt, System.Decimal? _trnsCommValue, 
			System.String _bankCode, System.Boolean? _isVisible, System.DateTime? _payPermissionDate)
		{
			FeeCodeBanks newFeeCodeBanks = new FeeCodeBanks();
			newFeeCodeBanks.FeeCodeBankId = _feeCodeBankId;
			newFeeCodeBanks.DescrAr = _descrAr;
			newFeeCodeBanks.DescrEn = _descrEn;
			newFeeCodeBanks.BankAddress = _bankAddress;
			newFeeCodeBanks.SwiftCode = _swiftCode;
			newFeeCodeBanks.SeUserId = _seUserId;
			newFeeCodeBanks.DfultFlg = _dfultFlg;
			newFeeCodeBanks.TrnsCommPrcnt = _trnsCommPrcnt;
			newFeeCodeBanks.TrnsCommValue = _trnsCommValue;
			newFeeCodeBanks.BankCode = _bankCode;
			newFeeCodeBanks.IsVisible = _isVisible;
			newFeeCodeBanks.PayPermissionDate = _payPermissionDate;
			return newFeeCodeBanks;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the FeeCodeBankId property. 
		///		اكواد  البنوك
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"اكواد  البنوك"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal FeeCodeBankId
		{
			get
			{
				return this.entityData.FeeCodeBankId; 
			}
			
			set
			{
				if (this.entityData.FeeCodeBankId == value)
					return;
					
				OnColumnChanging(FeeCodeBanksColumn.FeeCodeBankId, this.entityData.FeeCodeBankId);
				this.entityData.FeeCodeBankId = value;
				this.EntityId.FeeCodeBankId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeBanksColumn.FeeCodeBankId, this.entityData.FeeCodeBankId);
				OnPropertyChanged("FeeCodeBankId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the FEE_CODE_BANK_ID property.
		///		اكواد  البنوك
		/// </summary>
		/// <remarks>This is the original value of the FEE_CODE_BANK_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalFeeCodeBankId
		{
			get { return this.entityData.OriginalFeeCodeBankId; }
			set { this.entityData.OriginalFeeCodeBankId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the DescrAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String DescrAr
		{
			get
			{
				return this.entityData.DescrAr; 
			}
			
			set
			{
				if (this.entityData.DescrAr == value)
					return;
					
				OnColumnChanging(FeeCodeBanksColumn.DescrAr, this.entityData.DescrAr);
				this.entityData.DescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeBanksColumn.DescrAr, this.entityData.DescrAr);
				OnPropertyChanged("DescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String DescrEn
		{
			get
			{
				return this.entityData.DescrEn; 
			}
			
			set
			{
				if (this.entityData.DescrEn == value)
					return;
					
				OnColumnChanging(FeeCodeBanksColumn.DescrEn, this.entityData.DescrEn);
				this.entityData.DescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeBanksColumn.DescrEn, this.entityData.DescrEn);
				OnPropertyChanged("DescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BankAddress property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String BankAddress
		{
			get
			{
				return this.entityData.BankAddress; 
			}
			
			set
			{
				if (this.entityData.BankAddress == value)
					return;
					
				OnColumnChanging(FeeCodeBanksColumn.BankAddress, this.entityData.BankAddress);
				this.entityData.BankAddress = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeBanksColumn.BankAddress, this.entityData.BankAddress);
				OnPropertyChanged("BankAddress");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SwiftCode property. 
		///		Ejust
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Ejust"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String SwiftCode
		{
			get
			{
				return this.entityData.SwiftCode; 
			}
			
			set
			{
				if (this.entityData.SwiftCode == value)
					return;
					
				OnColumnChanging(FeeCodeBanksColumn.SwiftCode, this.entityData.SwiftCode);
				this.entityData.SwiftCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeBanksColumn.SwiftCode, this.entityData.SwiftCode);
				OnPropertyChanged("SwiftCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(FeeCodeBanksColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeBanksColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DfultFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsDfultFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? DfultFlg
		{
			get
			{
				return this.entityData.DfultFlg; 
			}
			
			set
			{
				if (this.entityData.DfultFlg == value)
					return;
					
				OnColumnChanging(FeeCodeBanksColumn.DfultFlg, this.entityData.DfultFlg);
				this.entityData.DfultFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeBanksColumn.DfultFlg, this.entityData.DfultFlg);
				OnPropertyChanged("DfultFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrnsCommPrcnt property. 
		///		عمولة اونلاين البنك نسبة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTrnsCommPrcntNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"عمولة اونلاين البنك نسبة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TrnsCommPrcnt
		{
			get
			{
				return this.entityData.TrnsCommPrcnt; 
			}
			
			set
			{
				if (this.entityData.TrnsCommPrcnt == value)
					return;
					
				OnColumnChanging(FeeCodeBanksColumn.TrnsCommPrcnt, this.entityData.TrnsCommPrcnt);
				this.entityData.TrnsCommPrcnt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeBanksColumn.TrnsCommPrcnt, this.entityData.TrnsCommPrcnt);
				OnPropertyChanged("TrnsCommPrcnt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrnsCommValue property. 
		///		عمولة اونلاين البنك قيمة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTrnsCommValueNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"عمولة اونلاين البنك قيمة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TrnsCommValue
		{
			get
			{
				return this.entityData.TrnsCommValue; 
			}
			
			set
			{
				if (this.entityData.TrnsCommValue == value)
					return;
					
				OnColumnChanging(FeeCodeBanksColumn.TrnsCommValue, this.entityData.TrnsCommValue);
				this.entityData.TrnsCommValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeBanksColumn.TrnsCommValue, this.entityData.TrnsCommValue);
				OnPropertyChanged("TrnsCommValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BankCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String BankCode
		{
			get
			{
				return this.entityData.BankCode; 
			}
			
			set
			{
				if (this.entityData.BankCode == value)
					return;
					
				OnColumnChanging(FeeCodeBanksColumn.BankCode, this.entityData.BankCode);
				this.entityData.BankCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeBanksColumn.BankCode, this.entityData.BankCode);
				OnPropertyChanged("BankCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsVisible property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsVisibleNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsVisible
		{
			get
			{
				return this.entityData.IsVisible; 
			}
			
			set
			{
				if (this.entityData.IsVisible == value)
					return;
					
				OnColumnChanging(FeeCodeBanksColumn.IsVisible, this.entityData.IsVisible);
				this.entityData.IsVisible = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeBanksColumn.IsVisible, this.entityData.IsVisible);
				OnPropertyChanged("IsVisible");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PayPermissionDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsPayPermissionDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? PayPermissionDate
		{
			get
			{
				return this.entityData.PayPermissionDate; 
			}
			
			set
			{
				if (this.entityData.PayPermissionDate == value)
					return;
					
				OnColumnChanging(FeeCodeBanksColumn.PayPermissionDate, this.entityData.PayPermissionDate);
				this.entityData.PayPermissionDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCodeBanksColumn.PayPermissionDate, this.entityData.PayPermissionDate);
				OnPropertyChanged("PayPermissionDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of FeeYearPrdBank objects
		///	which are related to this object through the relation FK_FEE_YEAR_PRD_BANK_FEE_CODE_BANKS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeYearPrdBank> FeeYearPrdBankCollection
		{
			get { return entityData.FeeYearPrdBankCollection; }
			set { entityData.FeeYearPrdBankCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmAppFees objects
		///	which are related to this object through the relation FK_ADM_APP_FEES_FEE_CODE_BANKS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppFees> AdmAppFeesCollection
		{
			get { return entityData.AdmAppFeesCollection; }
			set { entityData.AdmAppFeesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeStudBank objects
		///	which are related to this object through the relation FK_FEE_STUD_BANK_FEE_CODE_BANKS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeStudBank> FeeStudBankCollection
		{
			get { return entityData.FeeStudBankCollection; }
			set { entityData.FeeStudBankCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmRegStepPayOnline objects
		///	which are related to this object through the relation FK_ADM_REG_STEP_PAY_ONLINE_FEE_CODE_BANKS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmRegStepPayOnline> AdmRegStepPayOnlineCollection
		{
			get { return entityData.AdmRegStepPayOnlineCollection; }
			set { entityData.AdmRegStepPayOnlineCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeStudVoucher objects
		///	which are related to this object through the relation FK_FEE_STUD_VOUCHER_FEE_CODE_BANKS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeStudVoucher> FeeStudVoucherCollection
		{
			get { return entityData.FeeStudVoucherCollection; }
			set { entityData.FeeStudVoucherCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeRefndStdReq objects
		///	which are related to this object through the relation FK_FEE_REFND_STD_REQ_FEE_CODE_BANKS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeRefndStdReq> FeeRefndStdReqCollection
		{
			get { return entityData.FeeRefndStdReqCollection; }
			set { entityData.FeeRefndStdReqCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeCdeBankAccnt objects
		///	which are related to this object through the relation FK_FEE_CDE_BANK_ACCNT_FEE_CODE_BANKS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeCdeBankAccnt> FeeCdeBankAccntCollection
		{
			get { return entityData.FeeCdeBankAccntCollection; }
			set { entityData.FeeCdeBankAccntCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeStudVoucherPayMthod objects
		///	which are related to this object through the relation FK_FEE_STUD_VOUCHER_PAY_MTHOD_FEE_CODE_BANKS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeStudVoucherPayMthod> FeeStudVoucherPayMthodCollection
		{
			get { return entityData.FeeStudVoucherPayMthodCollection; }
			set { entityData.FeeStudVoucherPayMthodCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrAr", "Descr Ar", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrEn", "Descr En", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BankAddress", "Bank Address", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SwiftCode", "Swift Code", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BankCode", "Bank Code", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "FEE_CODE_BANKS"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"FEE_CODE_BANK_ID", "DESCR_AR", "DESCR_EN", "BANK_ADDRESS", "SWIFT_CODE", "SE_USER_ID", "DFULT_FLG", "TRNS_COMM_PRCNT", "TRNS_COMM_VALUE", "BANK_CODE", "Is_Visible", "PAY_PERMISSION_Date"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as FeeCodeBanksEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (FeeCodeBanks) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<FeeCodeBanks>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as FeeCodeBanks);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed FeeCodeBanks Entity 
		///</summary>
		protected virtual FeeCodeBanks Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			FeeCodeBanks copy = new FeeCodeBanks();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.FeeCodeBankId = this.FeeCodeBankId;
					copy.OriginalFeeCodeBankId = this.OriginalFeeCodeBankId;
				copy.DescrAr = this.DescrAr;
				copy.DescrEn = this.DescrEn;
				copy.BankAddress = this.BankAddress;
				copy.SwiftCode = this.SwiftCode;
				copy.SeUserId = this.SeUserId;
				copy.DfultFlg = this.DfultFlg;
				copy.TrnsCommPrcnt = this.TrnsCommPrcnt;
				copy.TrnsCommValue = this.TrnsCommValue;
				copy.BankCode = this.BankCode;
				copy.IsVisible = this.IsVisible;
				copy.PayPermissionDate = this.PayPermissionDate;
			
		
			//deep copy nested objects
			copy.FeeYearPrdBankCollection = (TList<FeeYearPrdBank>) MakeCopyOf(this.FeeYearPrdBankCollection, existingCopies); 
			copy.AdmAppFeesCollection = (TList<AdmAppFees>) MakeCopyOf(this.AdmAppFeesCollection, existingCopies); 
			copy.FeeStudBankCollection = (TList<FeeStudBank>) MakeCopyOf(this.FeeStudBankCollection, existingCopies); 
			copy.AdmRegStepPayOnlineCollection = (TList<AdmRegStepPayOnline>) MakeCopyOf(this.AdmRegStepPayOnlineCollection, existingCopies); 
			copy.FeeStudVoucherCollection = (TList<FeeStudVoucher>) MakeCopyOf(this.FeeStudVoucherCollection, existingCopies); 
			copy.FeeRefndStdReqCollection = (TList<FeeRefndStdReq>) MakeCopyOf(this.FeeRefndStdReqCollection, existingCopies); 
			copy.FeeCdeBankAccntCollection = (TList<FeeCdeBankAccnt>) MakeCopyOf(this.FeeCdeBankAccntCollection, existingCopies); 
			copy.FeeStudVoucherPayMthodCollection = (TList<FeeStudVoucherPayMthod>) MakeCopyOf(this.FeeStudVoucherPayMthodCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed FeeCodeBanks Entity 
		///</summary>
		public virtual FeeCodeBanks Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed FeeCodeBanks Entity which is a deep copy of the current entity.
		///</summary>
		public virtual FeeCodeBanks DeepCopy()
		{
			return EntityHelper.Clone<FeeCodeBanks>(this as FeeCodeBanks);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as FeeCodeBanksEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new FeeCodeBanksEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as FeeCodeBanksEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(FeeCodeBanksColumn column)
		{
			switch(column)
			{
					case FeeCodeBanksColumn.FeeCodeBankId:
					return entityData.FeeCodeBankId != _originalData.FeeCodeBankId;
					case FeeCodeBanksColumn.DescrAr:
					return entityData.DescrAr != _originalData.DescrAr;
					case FeeCodeBanksColumn.DescrEn:
					return entityData.DescrEn != _originalData.DescrEn;
					case FeeCodeBanksColumn.BankAddress:
					return entityData.BankAddress != _originalData.BankAddress;
					case FeeCodeBanksColumn.SwiftCode:
					return entityData.SwiftCode != _originalData.SwiftCode;
					case FeeCodeBanksColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case FeeCodeBanksColumn.DfultFlg:
					return entityData.DfultFlg != _originalData.DfultFlg;
					case FeeCodeBanksColumn.TrnsCommPrcnt:
					return entityData.TrnsCommPrcnt != _originalData.TrnsCommPrcnt;
					case FeeCodeBanksColumn.TrnsCommValue:
					return entityData.TrnsCommValue != _originalData.TrnsCommValue;
					case FeeCodeBanksColumn.BankCode:
					return entityData.BankCode != _originalData.BankCode;
					case FeeCodeBanksColumn.IsVisible:
					return entityData.IsVisible != _originalData.IsVisible;
					case FeeCodeBanksColumn.PayPermissionDate:
					return entityData.PayPermissionDate != _originalData.PayPermissionDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< FeeCodeBanksColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.FeeCodeBankId != _originalData.FeeCodeBankId;
			result = result || entityData.DescrAr != _originalData.DescrAr;
			result = result || entityData.DescrEn != _originalData.DescrEn;
			result = result || entityData.BankAddress != _originalData.BankAddress;
			result = result || entityData.SwiftCode != _originalData.SwiftCode;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.DfultFlg != _originalData.DfultFlg;
			result = result || entityData.TrnsCommPrcnt != _originalData.TrnsCommPrcnt;
			result = result || entityData.TrnsCommValue != _originalData.TrnsCommValue;
			result = result || entityData.BankCode != _originalData.BankCode;
			result = result || entityData.IsVisible != _originalData.IsVisible;
			result = result || entityData.PayPermissionDate != _originalData.PayPermissionDate;
			return result;
		}	
		
		///<summary>
		///  Returns a FeeCodeBanks Entity with the original data.
		///</summary>
		public FeeCodeBanks GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateFeeCodeBanks(
				_originalData.FeeCodeBankId,
				_originalData.DescrAr,
				_originalData.DescrEn,
				_originalData.BankAddress,
				_originalData.SwiftCode,
				_originalData.SeUserId,
				_originalData.DfultFlg,
				_originalData.TrnsCommPrcnt,
				_originalData.TrnsCommValue,
				_originalData.BankCode,
				_originalData.IsVisible,
				_originalData.PayPermissionDate
				);
				
			return (FeeCodeBanks)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="FeeCodeBanksBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is FeeCodeBanksBase)
				return ValueEquals(this, (FeeCodeBanksBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="FeeCodeBanksBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.FeeCodeBankId.GetHashCode() ^ 
					((this.DescrAr == null) ? string.Empty : this.DescrAr.ToString()).GetHashCode() ^ 
					((this.DescrEn == null) ? string.Empty : this.DescrEn.ToString()).GetHashCode() ^ 
					((this.BankAddress == null) ? string.Empty : this.BankAddress.ToString()).GetHashCode() ^ 
					((this.SwiftCode == null) ? string.Empty : this.SwiftCode.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.DfultFlg == null) ? string.Empty : this.DfultFlg.ToString()).GetHashCode() ^ 
					((this.TrnsCommPrcnt == null) ? string.Empty : this.TrnsCommPrcnt.ToString()).GetHashCode() ^ 
					((this.TrnsCommValue == null) ? string.Empty : this.TrnsCommValue.ToString()).GetHashCode() ^ 
					((this.BankCode == null) ? string.Empty : this.BankCode.ToString()).GetHashCode() ^ 
					((this.IsVisible == null) ? string.Empty : this.IsVisible.ToString()).GetHashCode() ^ 
					((this.PayPermissionDate == null) ? string.Empty : this.PayPermissionDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="FeeCodeBanksBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(FeeCodeBanksBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="FeeCodeBanksBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="FeeCodeBanksBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="FeeCodeBanksBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(FeeCodeBanksBase Object1, FeeCodeBanksBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.FeeCodeBankId != Object2.FeeCodeBankId)
				equal = false;
			if ( Object1.DescrAr != null && Object2.DescrAr != null )
			{
				if (Object1.DescrAr != Object2.DescrAr)
					equal = false;
			}
			else if (Object1.DescrAr == null ^ Object2.DescrAr == null )
			{
				equal = false;
			}
			if ( Object1.DescrEn != null && Object2.DescrEn != null )
			{
				if (Object1.DescrEn != Object2.DescrEn)
					equal = false;
			}
			else if (Object1.DescrEn == null ^ Object2.DescrEn == null )
			{
				equal = false;
			}
			if ( Object1.BankAddress != null && Object2.BankAddress != null )
			{
				if (Object1.BankAddress != Object2.BankAddress)
					equal = false;
			}
			else if (Object1.BankAddress == null ^ Object2.BankAddress == null )
			{
				equal = false;
			}
			if ( Object1.SwiftCode != null && Object2.SwiftCode != null )
			{
				if (Object1.SwiftCode != Object2.SwiftCode)
					equal = false;
			}
			else if (Object1.SwiftCode == null ^ Object2.SwiftCode == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.DfultFlg != null && Object2.DfultFlg != null )
			{
				if (Object1.DfultFlg != Object2.DfultFlg)
					equal = false;
			}
			else if (Object1.DfultFlg == null ^ Object2.DfultFlg == null )
			{
				equal = false;
			}
			if ( Object1.TrnsCommPrcnt != null && Object2.TrnsCommPrcnt != null )
			{
				if (Object1.TrnsCommPrcnt != Object2.TrnsCommPrcnt)
					equal = false;
			}
			else if (Object1.TrnsCommPrcnt == null ^ Object2.TrnsCommPrcnt == null )
			{
				equal = false;
			}
			if ( Object1.TrnsCommValue != null && Object2.TrnsCommValue != null )
			{
				if (Object1.TrnsCommValue != Object2.TrnsCommValue)
					equal = false;
			}
			else if (Object1.TrnsCommValue == null ^ Object2.TrnsCommValue == null )
			{
				equal = false;
			}
			if ( Object1.BankCode != null && Object2.BankCode != null )
			{
				if (Object1.BankCode != Object2.BankCode)
					equal = false;
			}
			else if (Object1.BankCode == null ^ Object2.BankCode == null )
			{
				equal = false;
			}
			if ( Object1.IsVisible != null && Object2.IsVisible != null )
			{
				if (Object1.IsVisible != Object2.IsVisible)
					equal = false;
			}
			else if (Object1.IsVisible == null ^ Object2.IsVisible == null )
			{
				equal = false;
			}
			if ( Object1.PayPermissionDate != null && Object2.PayPermissionDate != null )
			{
				if (Object1.PayPermissionDate != Object2.PayPermissionDate)
					equal = false;
			}
			else if (Object1.PayPermissionDate == null ^ Object2.PayPermissionDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((FeeCodeBanksBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static FeeCodeBanksComparer GetComparer()
        {
            return new FeeCodeBanksComparer();
        }
        */

        // Comparer delegates back to FeeCodeBanks
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(FeeCodeBanks rhs, FeeCodeBanksColumn which)
        {
            switch (which)
            {
            	
            	
            	case FeeCodeBanksColumn.FeeCodeBankId:
            		return this.FeeCodeBankId.CompareTo(rhs.FeeCodeBankId);
            		
            		                 
            	
            	
            	case FeeCodeBanksColumn.DescrAr:
            		return this.DescrAr.CompareTo(rhs.DescrAr);
            		
            		                 
            	
            	
            	case FeeCodeBanksColumn.DescrEn:
            		return this.DescrEn.CompareTo(rhs.DescrEn);
            		
            		                 
            	
            	
            	case FeeCodeBanksColumn.BankAddress:
            		return this.BankAddress.CompareTo(rhs.BankAddress);
            		
            		                 
            	
            	
            	case FeeCodeBanksColumn.SwiftCode:
            		return this.SwiftCode.CompareTo(rhs.SwiftCode);
            		
            		                 
            	
            	
            	case FeeCodeBanksColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case FeeCodeBanksColumn.DfultFlg:
            		return this.DfultFlg.Value.CompareTo(rhs.DfultFlg.Value);
            		
            		                 
            	
            	
            	case FeeCodeBanksColumn.TrnsCommPrcnt:
            		return this.TrnsCommPrcnt.Value.CompareTo(rhs.TrnsCommPrcnt.Value);
            		
            		                 
            	
            	
            	case FeeCodeBanksColumn.TrnsCommValue:
            		return this.TrnsCommValue.Value.CompareTo(rhs.TrnsCommValue.Value);
            		
            		                 
            	
            	
            	case FeeCodeBanksColumn.BankCode:
            		return this.BankCode.CompareTo(rhs.BankCode);
            		
            		                 
            	
            	
            	case FeeCodeBanksColumn.IsVisible:
            		return this.IsVisible.Value.CompareTo(rhs.IsVisible.Value);
            		
            		                 
            	
            	
            	case FeeCodeBanksColumn.PayPermissionDate:
            		return this.PayPermissionDate.Value.CompareTo(rhs.PayPermissionDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<FeeCodeBanksKey> Members
		
		// member variable for the EntityId property
		private FeeCodeBanksKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual FeeCodeBanksKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new FeeCodeBanksKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("FeeCodeBanks")
					.Append("|").Append( this.FeeCodeBankId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- FeeCodeBankId: {0}{12}- DescrAr: {1}{12}- DescrEn: {2}{12}- BankAddress: {3}{12}- SwiftCode: {4}{12}- SeUserId: {5}{12}- DfultFlg: {6}{12}- TrnsCommPrcnt: {7}{12}- TrnsCommValue: {8}{12}- BankCode: {9}{12}- IsVisible: {10}{12}- PayPermissionDate: {11}{12}{14}", 
				this.FeeCodeBankId,
				(this.DescrAr == null) ? string.Empty : this.DescrAr.ToString(),
				(this.DescrEn == null) ? string.Empty : this.DescrEn.ToString(),
				(this.BankAddress == null) ? string.Empty : this.BankAddress.ToString(),
				(this.SwiftCode == null) ? string.Empty : this.SwiftCode.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.DfultFlg == null) ? string.Empty : this.DfultFlg.ToString(),
				(this.TrnsCommPrcnt == null) ? string.Empty : this.TrnsCommPrcnt.ToString(),
				(this.TrnsCommValue == null) ? string.Empty : this.TrnsCommValue.ToString(),
				(this.BankCode == null) ? string.Empty : this.BankCode.ToString(),
				(this.IsVisible == null) ? string.Empty : this.IsVisible.ToString(),
				(this.PayPermissionDate == null) ? string.Empty : this.PayPermissionDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'FEE_CODE_BANKS' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class FeeCodeBanksEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// FEE_CODE_BANK_ID : اكواد  البنوك
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "FEE_CODE_BANKS"</remarks>
		public System.Decimal FeeCodeBankId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalFeeCodeBankId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// DESCR_AR : 
		/// </summary>
		public System.String		  DescrAr = null;
		
		/// <summary>
		/// DESCR_EN : 
		/// </summary>
		public System.String		  DescrEn = null;
		
		/// <summary>
		/// BANK_ADDRESS : 
		/// </summary>
		public System.String		  BankAddress = null;
		
		/// <summary>
		/// SWIFT_CODE : Ejust
		/// </summary>
		public System.String		  SwiftCode = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// DFULT_FLG : 
		/// </summary>
		public System.Boolean?		  DfultFlg = null;
		
		/// <summary>
		/// TRNS_COMM_PRCNT : عمولة اونلاين البنك نسبة
		/// </summary>
		public System.Decimal?		  TrnsCommPrcnt = null;
		
		/// <summary>
		/// TRNS_COMM_VALUE : عمولة اونلاين البنك قيمة
		/// </summary>
		public System.Decimal?		  TrnsCommValue = null;
		
		/// <summary>
		/// BANK_CODE : 
		/// </summary>
		public System.String		  BankCode = null;
		
		/// <summary>
		/// Is_Visible : 
		/// </summary>
		public System.Boolean?		  IsVisible = null;
		
		/// <summary>
		/// PAY_PERMISSION_Date : 
		/// </summary>
		public System.DateTime?		  PayPermissionDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region FeeYearPrdBankCollection
		
		private TList<FeeYearPrdBank> _feeYearPrdBankFeeCodeBankId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeYearPrdBankFeeCodeBankId
		/// </summary>
		
		public TList<FeeYearPrdBank> FeeYearPrdBankCollection
		{
			get
			{
				if (_feeYearPrdBankFeeCodeBankId == null)
				{
				_feeYearPrdBankFeeCodeBankId = new TList<FeeYearPrdBank>();
				}
	
				return _feeYearPrdBankFeeCodeBankId;
			}
			set { _feeYearPrdBankFeeCodeBankId = value; }
		}
		
		#endregion

		#region AdmAppFeesCollection
		
		private TList<AdmAppFees> _admAppFeesFeeCodeBankId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppFeesFeeCodeBankId
		/// </summary>
		
		public TList<AdmAppFees> AdmAppFeesCollection
		{
			get
			{
				if (_admAppFeesFeeCodeBankId == null)
				{
				_admAppFeesFeeCodeBankId = new TList<AdmAppFees>();
				}
	
				return _admAppFeesFeeCodeBankId;
			}
			set { _admAppFeesFeeCodeBankId = value; }
		}
		
		#endregion

		#region FeeStudBankCollection
		
		private TList<FeeStudBank> _feeStudBankFeeCodeBankId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeStudBankFeeCodeBankId
		/// </summary>
		
		public TList<FeeStudBank> FeeStudBankCollection
		{
			get
			{
				if (_feeStudBankFeeCodeBankId == null)
				{
				_feeStudBankFeeCodeBankId = new TList<FeeStudBank>();
				}
	
				return _feeStudBankFeeCodeBankId;
			}
			set { _feeStudBankFeeCodeBankId = value; }
		}
		
		#endregion

		#region AdmRegStepPayOnlineCollection
		
		private TList<AdmRegStepPayOnline> _admRegStepPayOnlineFeeCodeBankId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admRegStepPayOnlineFeeCodeBankId
		/// </summary>
		
		public TList<AdmRegStepPayOnline> AdmRegStepPayOnlineCollection
		{
			get
			{
				if (_admRegStepPayOnlineFeeCodeBankId == null)
				{
				_admRegStepPayOnlineFeeCodeBankId = new TList<AdmRegStepPayOnline>();
				}
	
				return _admRegStepPayOnlineFeeCodeBankId;
			}
			set { _admRegStepPayOnlineFeeCodeBankId = value; }
		}
		
		#endregion

		#region FeeStudVoucherCollection
		
		private TList<FeeStudVoucher> _feeStudVoucherFeeCodeBankId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeStudVoucherFeeCodeBankId
		/// </summary>
		
		public TList<FeeStudVoucher> FeeStudVoucherCollection
		{
			get
			{
				if (_feeStudVoucherFeeCodeBankId == null)
				{
				_feeStudVoucherFeeCodeBankId = new TList<FeeStudVoucher>();
				}
	
				return _feeStudVoucherFeeCodeBankId;
			}
			set { _feeStudVoucherFeeCodeBankId = value; }
		}
		
		#endregion

		#region FeeRefndStdReqCollection
		
		private TList<FeeRefndStdReq> _feeRefndStdReqFeeCodeBankId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeRefndStdReqFeeCodeBankId
		/// </summary>
		
		public TList<FeeRefndStdReq> FeeRefndStdReqCollection
		{
			get
			{
				if (_feeRefndStdReqFeeCodeBankId == null)
				{
				_feeRefndStdReqFeeCodeBankId = new TList<FeeRefndStdReq>();
				}
	
				return _feeRefndStdReqFeeCodeBankId;
			}
			set { _feeRefndStdReqFeeCodeBankId = value; }
		}
		
		#endregion

		#region FeeCdeBankAccntCollection
		
		private TList<FeeCdeBankAccnt> _feeCdeBankAccntFeeCodeBankId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeCdeBankAccntFeeCodeBankId
		/// </summary>
		
		public TList<FeeCdeBankAccnt> FeeCdeBankAccntCollection
		{
			get
			{
				if (_feeCdeBankAccntFeeCodeBankId == null)
				{
				_feeCdeBankAccntFeeCodeBankId = new TList<FeeCdeBankAccnt>();
				}
	
				return _feeCdeBankAccntFeeCodeBankId;
			}
			set { _feeCdeBankAccntFeeCodeBankId = value; }
		}
		
		#endregion

		#region FeeStudVoucherPayMthodCollection
		
		private TList<FeeStudVoucherPayMthod> _feeStudVoucherPayMthodFeeCodeBankId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeStudVoucherPayMthodFeeCodeBankId
		/// </summary>
		
		public TList<FeeStudVoucherPayMthod> FeeStudVoucherPayMthodCollection
		{
			get
			{
				if (_feeStudVoucherPayMthodFeeCodeBankId == null)
				{
				_feeStudVoucherPayMthodFeeCodeBankId = new TList<FeeStudVoucherPayMthod>();
				}
	
				return _feeStudVoucherPayMthodFeeCodeBankId;
			}
			set { _feeStudVoucherPayMthodFeeCodeBankId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			FeeCodeBanksEntityData _tmp = new FeeCodeBanksEntityData();
						
			_tmp.FeeCodeBankId = this.FeeCodeBankId;
			_tmp.OriginalFeeCodeBankId = this.OriginalFeeCodeBankId;
			
			_tmp.DescrAr = this.DescrAr;
			_tmp.DescrEn = this.DescrEn;
			_tmp.BankAddress = this.BankAddress;
			_tmp.SwiftCode = this.SwiftCode;
			_tmp.SeUserId = this.SeUserId;
			_tmp.DfultFlg = this.DfultFlg;
			_tmp.TrnsCommPrcnt = this.TrnsCommPrcnt;
			_tmp.TrnsCommValue = this.TrnsCommValue;
			_tmp.BankCode = this.BankCode;
			_tmp.IsVisible = this.IsVisible;
			_tmp.PayPermissionDate = this.PayPermissionDate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._feeYearPrdBankFeeCodeBankId != null)
				_tmp.FeeYearPrdBankCollection = (TList<FeeYearPrdBank>) MakeCopyOf(this.FeeYearPrdBankCollection); 
			if (this._admAppFeesFeeCodeBankId != null)
				_tmp.AdmAppFeesCollection = (TList<AdmAppFees>) MakeCopyOf(this.AdmAppFeesCollection); 
			if (this._feeStudBankFeeCodeBankId != null)
				_tmp.FeeStudBankCollection = (TList<FeeStudBank>) MakeCopyOf(this.FeeStudBankCollection); 
			if (this._admRegStepPayOnlineFeeCodeBankId != null)
				_tmp.AdmRegStepPayOnlineCollection = (TList<AdmRegStepPayOnline>) MakeCopyOf(this.AdmRegStepPayOnlineCollection); 
			if (this._feeStudVoucherFeeCodeBankId != null)
				_tmp.FeeStudVoucherCollection = (TList<FeeStudVoucher>) MakeCopyOf(this.FeeStudVoucherCollection); 
			if (this._feeRefndStdReqFeeCodeBankId != null)
				_tmp.FeeRefndStdReqCollection = (TList<FeeRefndStdReq>) MakeCopyOf(this.FeeRefndStdReqCollection); 
			if (this._feeCdeBankAccntFeeCodeBankId != null)
				_tmp.FeeCdeBankAccntCollection = (TList<FeeCdeBankAccnt>) MakeCopyOf(this.FeeCdeBankAccntCollection); 
			if (this._feeStudVoucherPayMthodFeeCodeBankId != null)
				_tmp.FeeStudVoucherPayMthodCollection = (TList<FeeStudVoucherPayMthod>) MakeCopyOf(this.FeeStudVoucherPayMthodCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			FeeCodeBanksEntityData _tmp = new FeeCodeBanksEntityData();
						
			_tmp.FeeCodeBankId = this.FeeCodeBankId;
			_tmp.OriginalFeeCodeBankId = this.OriginalFeeCodeBankId;
			
			_tmp.DescrAr = this.DescrAr;
			_tmp.DescrEn = this.DescrEn;
			_tmp.BankAddress = this.BankAddress;
			_tmp.SwiftCode = this.SwiftCode;
			_tmp.SeUserId = this.SeUserId;
			_tmp.DfultFlg = this.DfultFlg;
			_tmp.TrnsCommPrcnt = this.TrnsCommPrcnt;
			_tmp.TrnsCommValue = this.TrnsCommValue;
			_tmp.BankCode = this.BankCode;
			_tmp.IsVisible = this.IsVisible;
			_tmp.PayPermissionDate = this.PayPermissionDate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.FeeYearPrdBankCollection = (TList<FeeYearPrdBank>) MakeCopyOf(this.FeeYearPrdBankCollection, existingCopies); 
			_tmp.AdmAppFeesCollection = (TList<AdmAppFees>) MakeCopyOf(this.AdmAppFeesCollection, existingCopies); 
			_tmp.FeeStudBankCollection = (TList<FeeStudBank>) MakeCopyOf(this.FeeStudBankCollection, existingCopies); 
			_tmp.AdmRegStepPayOnlineCollection = (TList<AdmRegStepPayOnline>) MakeCopyOf(this.AdmRegStepPayOnlineCollection, existingCopies); 
			_tmp.FeeStudVoucherCollection = (TList<FeeStudVoucher>) MakeCopyOf(this.FeeStudVoucherCollection, existingCopies); 
			_tmp.FeeRefndStdReqCollection = (TList<FeeRefndStdReq>) MakeCopyOf(this.FeeRefndStdReqCollection, existingCopies); 
			_tmp.FeeCdeBankAccntCollection = (TList<FeeCdeBankAccnt>) MakeCopyOf(this.FeeCdeBankAccntCollection, existingCopies); 
			_tmp.FeeStudVoucherPayMthodCollection = (TList<FeeStudVoucherPayMthod>) MakeCopyOf(this.FeeStudVoucherPayMthodCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeCodeBanksColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(FeeCodeBanksColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeCodeBanksColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(FeeCodeBanksColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeCodeBanksColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(FeeCodeBanksColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				FeeCodeBanksEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new FeeCodeBanksEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeCodeBanksColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(FeeCodeBanksColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				FeeCodeBanksEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new FeeCodeBanksEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region FeeCodeBanksEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="FeeCodeBanks"/> object.
	/// </remarks>
	public class FeeCodeBanksEventArgs : System.EventArgs
	{
		private FeeCodeBanksColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the FeeCodeBanksEventArgs class.
		///</summary>
		public FeeCodeBanksEventArgs(FeeCodeBanksColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the FeeCodeBanksEventArgs class.
		///</summary>
		public FeeCodeBanksEventArgs(FeeCodeBanksColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The FeeCodeBanksColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="FeeCodeBanksColumn" />
		public FeeCodeBanksColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all FeeCodeBanks related events.
	///</summary>
	public delegate void FeeCodeBanksEventHandler(object sender, FeeCodeBanksEventArgs e);
	
	#region FeeCodeBanksComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class FeeCodeBanksComparer : System.Collections.Generic.IComparer<FeeCodeBanks>
	{
		FeeCodeBanksColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:FeeCodeBanksComparer"/> class.
        /// </summary>
		public FeeCodeBanksComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:FeeCodeBanksComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public FeeCodeBanksComparer(FeeCodeBanksColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="FeeCodeBanks"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="FeeCodeBanks"/> to compare.</param>
        /// <param name="b">The second <c>FeeCodeBanks</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(FeeCodeBanks a, FeeCodeBanks b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(FeeCodeBanks entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(FeeCodeBanks a, FeeCodeBanks b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public FeeCodeBanksColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region FeeCodeBanksKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="FeeCodeBanks"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class FeeCodeBanksKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the FeeCodeBanksKey class.
		/// </summary>
		public FeeCodeBanksKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeCodeBanksKey class.
		/// </summary>
		public FeeCodeBanksKey(FeeCodeBanksBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.FeeCodeBankId = entity.FeeCodeBankId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeCodeBanksKey class.
		/// </summary>
		public FeeCodeBanksKey(System.Decimal _feeCodeBankId)
		{
			#region Init Properties

			this.FeeCodeBankId = _feeCodeBankId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private FeeCodeBanksBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public FeeCodeBanksBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the FeeCodeBankId property
		private System.Decimal _feeCodeBankId;
		
		/// <summary>
		/// Gets or sets the FeeCodeBankId property.
		/// </summary>
		public System.Decimal FeeCodeBankId
		{
			get { return _feeCodeBankId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.FeeCodeBankId = value;
				
				_feeCodeBankId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				FeeCodeBankId = ( values["FeeCodeBankId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["FeeCodeBankId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("FeeCodeBankId", FeeCodeBankId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("FeeCodeBankId: {0}{1}",
								FeeCodeBankId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region FeeCodeBanksColumn Enum
	
	/// <summary>
	/// Enumerate the FeeCodeBanks columns.
	/// </summary>
	[Serializable]
	public enum FeeCodeBanksColumn : int
	{
		/// <summary>
		/// FeeCodeBankId : اكواد  البنوك
		/// </summary>
		[EnumTextValue("FEE_CODE_BANK_ID")]
		[ColumnEnum("FEE_CODE_BANK_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		FeeCodeBankId = 1,
		/// <summary>
		/// DescrAr : 
		/// </summary>
		[EnumTextValue("DESCR_AR")]
		[ColumnEnum("DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		DescrAr = 2,
		/// <summary>
		/// DescrEn : 
		/// </summary>
		[EnumTextValue("DESCR_EN")]
		[ColumnEnum("DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		DescrEn = 3,
		/// <summary>
		/// BankAddress : 
		/// </summary>
		[EnumTextValue("BANK_ADDRESS")]
		[ColumnEnum("BANK_ADDRESS", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		BankAddress = 4,
		/// <summary>
		/// SwiftCode : Ejust
		/// </summary>
		[EnumTextValue("SWIFT_CODE")]
		[ColumnEnum("SWIFT_CODE", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		SwiftCode = 5,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 6,
		/// <summary>
		/// DfultFlg : 
		/// </summary>
		[EnumTextValue("DFULT_FLG")]
		[ColumnEnum("DFULT_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		DfultFlg = 7,
		/// <summary>
		/// TrnsCommPrcnt : عمولة اونلاين البنك نسبة
		/// </summary>
		[EnumTextValue("TRNS_COMM_PRCNT")]
		[ColumnEnum("TRNS_COMM_PRCNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TrnsCommPrcnt = 8,
		/// <summary>
		/// TrnsCommValue : عمولة اونلاين البنك قيمة
		/// </summary>
		[EnumTextValue("TRNS_COMM_VALUE")]
		[ColumnEnum("TRNS_COMM_VALUE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TrnsCommValue = 9,
		/// <summary>
		/// BankCode : 
		/// </summary>
		[EnumTextValue("BANK_CODE")]
		[ColumnEnum("BANK_CODE", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		BankCode = 10,
		/// <summary>
		/// IsVisible : 
		/// </summary>
		[EnumTextValue("Is_Visible")]
		[ColumnEnum("Is_Visible", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsVisible = 11,
		/// <summary>
		/// PayPermissionDate : 
		/// </summary>
		[EnumTextValue("PAY_PERMISSION_Date")]
		[ColumnEnum("PAY_PERMISSION_Date", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		PayPermissionDate = 12
	}//End enum

	#endregion FeeCodeBanksColumn Enum

} // end namespace
