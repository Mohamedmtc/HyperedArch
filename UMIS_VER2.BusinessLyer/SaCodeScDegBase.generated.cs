
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SaCodeScDeg.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SA_CODE_SC_DEG' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SaCodeScDegBase : EntityBase, ISaCodeScDeg, IEntityId<SaCodeScDegKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SaCodeScDegEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SaCodeScDegEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SaCodeScDegEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SaCodeScDeg> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaCodeScDegEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaCodeScDegEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SaCodeScDegBase"/> instance.
		///</summary>
		public SaCodeScDegBase()
		{
			this.entityData = new SaCodeScDegEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SaCodeScDegBase"/> instance.
		///</summary>
		///<param name="_saCodeScDegId"></param>
		///<param name="_scDegCode"></param>
		///<param name="_scDegDescrAr"></param>
		///<param name="_scDegDescrEn"></param>
		///<param name="_startSal"></param>
		///<param name="_endSal"></param>
		///<param name="_degPeriod"></param>
		///<param name="_staffFlag"></param>
		///<param name="_degOrder"></param>
		///<param name="_degPeriodMonth"></param>
		///<param name="_constant"></param>
		public SaCodeScDegBase(System.Decimal _saCodeScDegId, System.String _scDegCode, 
			System.String _scDegDescrAr, System.String _scDegDescrEn, System.Decimal? _startSal, 
			System.Decimal? _endSal, System.Decimal _degPeriod, System.Decimal? _staffFlag, 
			System.Decimal _degOrder, System.Decimal _degPeriodMonth, System.Decimal? _constant)
		{
			this.entityData = new SaCodeScDegEntityData();
			this.backupData = null;

			this.SaCodeScDegId = _saCodeScDegId;
			this.ScDegCode = _scDegCode;
			this.ScDegDescrAr = _scDegDescrAr;
			this.ScDegDescrEn = _scDegDescrEn;
			this.StartSal = _startSal;
			this.EndSal = _endSal;
			this.DegPeriod = _degPeriod;
			this.StaffFlag = _staffFlag;
			this.DegOrder = _degOrder;
			this.DegPeriodMonth = _degPeriodMonth;
			this.Constant = _constant;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SaCodeScDeg"/> instance.
		///</summary>
		///<param name="_saCodeScDegId"></param>
		///<param name="_scDegCode"></param>
		///<param name="_scDegDescrAr"></param>
		///<param name="_scDegDescrEn"></param>
		///<param name="_startSal"></param>
		///<param name="_endSal"></param>
		///<param name="_degPeriod"></param>
		///<param name="_staffFlag"></param>
		///<param name="_degOrder"></param>
		///<param name="_degPeriodMonth"></param>
		///<param name="_constant"></param>
		public static SaCodeScDeg CreateSaCodeScDeg(System.Decimal _saCodeScDegId, System.String _scDegCode, 
			System.String _scDegDescrAr, System.String _scDegDescrEn, System.Decimal? _startSal, 
			System.Decimal? _endSal, System.Decimal _degPeriod, System.Decimal? _staffFlag, 
			System.Decimal _degOrder, System.Decimal _degPeriodMonth, System.Decimal? _constant)
		{
			SaCodeScDeg newSaCodeScDeg = new SaCodeScDeg();
			newSaCodeScDeg.SaCodeScDegId = _saCodeScDegId;
			newSaCodeScDeg.ScDegCode = _scDegCode;
			newSaCodeScDeg.ScDegDescrAr = _scDegDescrAr;
			newSaCodeScDeg.ScDegDescrEn = _scDegDescrEn;
			newSaCodeScDeg.StartSal = _startSal;
			newSaCodeScDeg.EndSal = _endSal;
			newSaCodeScDeg.DegPeriod = _degPeriod;
			newSaCodeScDeg.StaffFlag = _staffFlag;
			newSaCodeScDeg.DegOrder = _degOrder;
			newSaCodeScDeg.DegPeriodMonth = _degPeriodMonth;
			newSaCodeScDeg.Constant = _constant;
			return newSaCodeScDeg;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SaCodeScDegId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SaCodeScDegId
		{
			get
			{
				return this.entityData.SaCodeScDegId; 
			}
			
			set
			{
				if (this.entityData.SaCodeScDegId == value)
					return;
					
				OnColumnChanging(SaCodeScDegColumn.SaCodeScDegId, this.entityData.SaCodeScDegId);
				this.entityData.SaCodeScDegId = value;
				this.EntityId.SaCodeScDegId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaCodeScDegColumn.SaCodeScDegId, this.entityData.SaCodeScDegId);
				OnPropertyChanged("SaCodeScDegId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SA_CODE_SC_DEG_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SA_CODE_SC_DEG_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSaCodeScDegId
		{
			get { return this.entityData.OriginalSaCodeScDegId; }
			set { this.entityData.OriginalSaCodeScDegId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the ScDegCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 5)]
		public virtual System.String ScDegCode
		{
			get
			{
				return this.entityData.ScDegCode; 
			}
			
			set
			{
				if (this.entityData.ScDegCode == value)
					return;
					
				OnColumnChanging(SaCodeScDegColumn.ScDegCode, this.entityData.ScDegCode);
				this.entityData.ScDegCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaCodeScDegColumn.ScDegCode, this.entityData.ScDegCode);
				OnPropertyChanged("ScDegCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScDegDescrAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String ScDegDescrAr
		{
			get
			{
				return this.entityData.ScDegDescrAr; 
			}
			
			set
			{
				if (this.entityData.ScDegDescrAr == value)
					return;
					
				OnColumnChanging(SaCodeScDegColumn.ScDegDescrAr, this.entityData.ScDegDescrAr);
				this.entityData.ScDegDescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaCodeScDegColumn.ScDegDescrAr, this.entityData.ScDegDescrAr);
				OnPropertyChanged("ScDegDescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScDegDescrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ScDegDescrEn
		{
			get
			{
				return this.entityData.ScDegDescrEn; 
			}
			
			set
			{
				if (this.entityData.ScDegDescrEn == value)
					return;
					
				OnColumnChanging(SaCodeScDegColumn.ScDegDescrEn, this.entityData.ScDegDescrEn);
				this.entityData.ScDegDescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaCodeScDegColumn.ScDegDescrEn, this.entityData.ScDegDescrEn);
				OnPropertyChanged("ScDegDescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StartSal property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsStartSalNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? StartSal
		{
			get
			{
				return this.entityData.StartSal; 
			}
			
			set
			{
				if (this.entityData.StartSal == value)
					return;
					
				OnColumnChanging(SaCodeScDegColumn.StartSal, this.entityData.StartSal);
				this.entityData.StartSal = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaCodeScDegColumn.StartSal, this.entityData.StartSal);
				OnPropertyChanged("StartSal");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EndSal property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEndSalNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EndSal
		{
			get
			{
				return this.entityData.EndSal; 
			}
			
			set
			{
				if (this.entityData.EndSal == value)
					return;
					
				OnColumnChanging(SaCodeScDegColumn.EndSal, this.entityData.EndSal);
				this.entityData.EndSal = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaCodeScDegColumn.EndSal, this.entityData.EndSal);
				OnPropertyChanged("EndSal");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DegPeriod property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal DegPeriod
		{
			get
			{
				return this.entityData.DegPeriod; 
			}
			
			set
			{
				if (this.entityData.DegPeriod == value)
					return;
					
				OnColumnChanging(SaCodeScDegColumn.DegPeriod, this.entityData.DegPeriod);
				this.entityData.DegPeriod = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaCodeScDegColumn.DegPeriod, this.entityData.DegPeriod);
				OnPropertyChanged("DegPeriod");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StaffFlag property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsStaffFlagNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? StaffFlag
		{
			get
			{
				return this.entityData.StaffFlag; 
			}
			
			set
			{
				if (this.entityData.StaffFlag == value)
					return;
					
				OnColumnChanging(SaCodeScDegColumn.StaffFlag, this.entityData.StaffFlag);
				this.entityData.StaffFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaCodeScDegColumn.StaffFlag, this.entityData.StaffFlag);
				OnPropertyChanged("StaffFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DegOrder property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal DegOrder
		{
			get
			{
				return this.entityData.DegOrder; 
			}
			
			set
			{
				if (this.entityData.DegOrder == value)
					return;
					
				OnColumnChanging(SaCodeScDegColumn.DegOrder, this.entityData.DegOrder);
				this.entityData.DegOrder = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaCodeScDegColumn.DegOrder, this.entityData.DegOrder);
				OnPropertyChanged("DegOrder");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DegPeriodMonth property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal DegPeriodMonth
		{
			get
			{
				return this.entityData.DegPeriodMonth; 
			}
			
			set
			{
				if (this.entityData.DegPeriodMonth == value)
					return;
					
				OnColumnChanging(SaCodeScDegColumn.DegPeriodMonth, this.entityData.DegPeriodMonth);
				this.entityData.DegPeriodMonth = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaCodeScDegColumn.DegPeriodMonth, this.entityData.DegPeriodMonth);
				OnPropertyChanged("DegPeriodMonth");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Constant property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsConstantNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Constant
		{
			get
			{
				return this.entityData.Constant; 
			}
			
			set
			{
				if (this.entityData.Constant == value)
					return;
					
				OnColumnChanging(SaCodeScDegColumn.Constant, this.entityData.Constant);
				this.entityData.Constant = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaCodeScDegColumn.Constant, this.entityData.Constant);
				OnPropertyChanged("Constant");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of SaEmployment objects
		///	which are related to this object through the relation FK_SA_EMPLOYMENT_SA_CODE_SC_DEG
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SaEmployment> SaEmploymentCollection
		{
			get { return entityData.SaEmploymentCollection; }
			set { entityData.SaEmploymentCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of PgExtMember objects
		///	which are related to this object through the relation FK_AUTO_039b
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgExtMember> PgExtMemberCollection
		{
			get { return entityData.PgExtMemberCollection; }
			set { entityData.PgExtMemberCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SaResearchTeam objects
		///	which are related to this object through the relation FK_AUTO_034f
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SaResearchTeam> SaResearchTeamCollection
		{
			get { return entityData.SaResearchTeamCollection; }
			set { entityData.SaResearchTeamCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CoControlMember objects
		///	which are related to this object through the relation FK_AUTO_0173
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoControlMember> CoControlMemberCollection
		{
			get { return entityData.CoControlMemberCollection; }
			set { entityData.CoControlMemberCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SaCommMember objects
		///	which are related to this object through the relation FK_AUTO_032e
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SaCommMember> SaCommMemberCollection
		{
			get { return entityData.SaCommMemberCollection; }
			set { entityData.SaCommMemberCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SaPromotionCond objects
		///	which are related to this object through the relation FK_SA_PROMOTION_COND_SA_CODE_SC_DEG
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SaPromotionCond> SaPromotionCondCollection
		{
			get { return entityData.SaPromotionCondCollection; }
			set { entityData.SaPromotionCondCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SaServTermin objects
		///	which are related to this object through the relation FK_SA_SERV_TERMIN_SA_CODE_SC_DEG1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SaServTermin> SaServTerminCollectionGetBySaCodeScDegOldId
		{
			get { return entityData.SaServTerminCollectionGetBySaCodeScDegOldId; }
			set { entityData.SaServTerminCollectionGetBySaCodeScDegOldId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SaEmpHierarchy objects
		///	which are related to this object through the relation FK_AUTO_0392
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SaEmpHierarchy> SaEmpHierarchyCollection
		{
			get { return entityData.SaEmpHierarchyCollection; }
			set { entityData.SaEmpHierarchyCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of PgStfRoleDeg objects
		///	which are related to this object through the relation FK_PG_STF_ROLE_DEG_SA_CODE_SC_DEG
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgStfRoleDeg> PgStfRoleDegCollection
		{
			get { return entityData.PgStfRoleDegCollection; }
			set { entityData.PgStfRoleDegCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SaSupervisingJobs objects
		///	which are related to this object through the relation FK_AUTO_036f
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SaSupervisingJobs> SaSupervisingJobsCollection
		{
			get { return entityData.SaSupervisingJobsCollection; }
			set { entityData.SaSupervisingJobsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CoExaminerCorector objects
		///	which are related to this object through the relation FK_AUTO_0185
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoExaminerCorector> CoExaminerCorectorCollection
		{
			get { return entityData.CoExaminerCorectorCollection; }
			set { entityData.CoExaminerCorectorCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CoContRoomMember objects
		///	which are related to this object through the relation FK_CO_CONT_ROOM_MEMBER_SA_CODE_SC_DEG
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoContRoomMember> CoContRoomMemberCollection
		{
			get { return entityData.CoContRoomMemberCollection; }
			set { entityData.CoContRoomMemberCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SaPromotion objects
		///	which are related to this object through the relation FK_SA_PROMOTION_SA_CODE_SC_DEG
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SaPromotion> SaPromotionCollection
		{
			get { return entityData.SaPromotionCollection; }
			set { entityData.SaPromotionCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SaServTermin objects
		///	which are related to this object through the relation FK_SA_SERV_TERMIN_SA_CODE_SC_DEG
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SaServTermin> SaServTerminCollectionGetBySaCodeScDegId
		{
			get { return entityData.SaServTerminCollectionGetBySaCodeScDegId; }
			set { entityData.SaServTerminCollectionGetBySaCodeScDegId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SaStfMember objects
		///	which are related to this object through the relation FK_SA_STF_MEMBER_SA_CODE_SC_DEG
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SaStfMember> SaStfMemberCollection
		{
			get { return entityData.SaStfMemberCollection; }
			set { entityData.SaStfMemberCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SaPromotionRequest objects
		///	which are related to this object through the relation FK_AUTO_048a
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SaPromotionRequest> SaPromotionRequestCollection
		{
			get { return entityData.SaPromotionRequestCollection; }
			set { entityData.SaPromotionRequestCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SaCdeAcadLoad objects
		///	which are related to this object through the relation FK_SA_CDE_ACAD_LOAD_SA_CODE_SC_DEG
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SaCdeAcadLoad> SaCdeAcadLoadCollection
		{
			get { return entityData.SaCdeAcadLoadCollection; }
			set { entityData.SaCdeAcadLoadCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ScDegCode", "Sc Deg Code", 5));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ScDegDescrAr", "Sc Deg Descr Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ScDegDescrAr", "Sc Deg Descr Ar", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ScDegDescrEn", "Sc Deg Descr En", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SA_CODE_SC_DEG"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SA_CODE_SC_DEG_ID", "SC_DEG_CODE", "SC_DEG_DESCR_AR", "SC_DEG_DESCR_EN", "START_SAL", "END_SAL", "DEG_PERIOD", "STAFF_FLAG", "DEG_ORDER", "DEG_PERIOD_Month", "Constant"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SaCodeScDegEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SaCodeScDeg) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SaCodeScDeg>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SaCodeScDeg);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SaCodeScDeg Entity 
		///</summary>
		protected virtual SaCodeScDeg Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SaCodeScDeg copy = new SaCodeScDeg();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SaCodeScDegId = this.SaCodeScDegId;
					copy.OriginalSaCodeScDegId = this.OriginalSaCodeScDegId;
				copy.ScDegCode = this.ScDegCode;
				copy.ScDegDescrAr = this.ScDegDescrAr;
				copy.ScDegDescrEn = this.ScDegDescrEn;
				copy.StartSal = this.StartSal;
				copy.EndSal = this.EndSal;
				copy.DegPeriod = this.DegPeriod;
				copy.StaffFlag = this.StaffFlag;
				copy.DegOrder = this.DegOrder;
				copy.DegPeriodMonth = this.DegPeriodMonth;
				copy.Constant = this.Constant;
			
		
			//deep copy nested objects
			copy.SaEmploymentCollection = (TList<SaEmployment>) MakeCopyOf(this.SaEmploymentCollection, existingCopies); 
			copy.PgExtMemberCollection = (TList<PgExtMember>) MakeCopyOf(this.PgExtMemberCollection, existingCopies); 
			copy.SaResearchTeamCollection = (TList<SaResearchTeam>) MakeCopyOf(this.SaResearchTeamCollection, existingCopies); 
			copy.CoControlMemberCollection = (TList<CoControlMember>) MakeCopyOf(this.CoControlMemberCollection, existingCopies); 
			copy.SaCommMemberCollection = (TList<SaCommMember>) MakeCopyOf(this.SaCommMemberCollection, existingCopies); 
			copy.SaPromotionCondCollection = (TList<SaPromotionCond>) MakeCopyOf(this.SaPromotionCondCollection, existingCopies); 
			copy.SaServTerminCollectionGetBySaCodeScDegOldId = (TList<SaServTermin>) MakeCopyOf(this.SaServTerminCollectionGetBySaCodeScDegOldId, existingCopies); 
			copy.SaEmpHierarchyCollection = (TList<SaEmpHierarchy>) MakeCopyOf(this.SaEmpHierarchyCollection, existingCopies); 
			copy.PgStfRoleDegCollection = (TList<PgStfRoleDeg>) MakeCopyOf(this.PgStfRoleDegCollection, existingCopies); 
			copy.SaSupervisingJobsCollection = (TList<SaSupervisingJobs>) MakeCopyOf(this.SaSupervisingJobsCollection, existingCopies); 
			copy.CoExaminerCorectorCollection = (TList<CoExaminerCorector>) MakeCopyOf(this.CoExaminerCorectorCollection, existingCopies); 
			copy.CoContRoomMemberCollection = (TList<CoContRoomMember>) MakeCopyOf(this.CoContRoomMemberCollection, existingCopies); 
			copy.SaPromotionCollection = (TList<SaPromotion>) MakeCopyOf(this.SaPromotionCollection, existingCopies); 
			copy.SaServTerminCollectionGetBySaCodeScDegId = (TList<SaServTermin>) MakeCopyOf(this.SaServTerminCollectionGetBySaCodeScDegId, existingCopies); 
			copy.SaStfMemberCollection = (TList<SaStfMember>) MakeCopyOf(this.SaStfMemberCollection, existingCopies); 
			copy.SaPromotionRequestCollection = (TList<SaPromotionRequest>) MakeCopyOf(this.SaPromotionRequestCollection, existingCopies); 
			copy.SaCdeAcadLoadCollection = (TList<SaCdeAcadLoad>) MakeCopyOf(this.SaCdeAcadLoadCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SaCodeScDeg Entity 
		///</summary>
		public virtual SaCodeScDeg Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SaCodeScDeg Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SaCodeScDeg DeepCopy()
		{
			return EntityHelper.Clone<SaCodeScDeg>(this as SaCodeScDeg);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SaCodeScDegEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SaCodeScDegEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SaCodeScDegEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SaCodeScDegColumn column)
		{
			switch(column)
			{
					case SaCodeScDegColumn.SaCodeScDegId:
					return entityData.SaCodeScDegId != _originalData.SaCodeScDegId;
					case SaCodeScDegColumn.ScDegCode:
					return entityData.ScDegCode != _originalData.ScDegCode;
					case SaCodeScDegColumn.ScDegDescrAr:
					return entityData.ScDegDescrAr != _originalData.ScDegDescrAr;
					case SaCodeScDegColumn.ScDegDescrEn:
					return entityData.ScDegDescrEn != _originalData.ScDegDescrEn;
					case SaCodeScDegColumn.StartSal:
					return entityData.StartSal != _originalData.StartSal;
					case SaCodeScDegColumn.EndSal:
					return entityData.EndSal != _originalData.EndSal;
					case SaCodeScDegColumn.DegPeriod:
					return entityData.DegPeriod != _originalData.DegPeriod;
					case SaCodeScDegColumn.StaffFlag:
					return entityData.StaffFlag != _originalData.StaffFlag;
					case SaCodeScDegColumn.DegOrder:
					return entityData.DegOrder != _originalData.DegOrder;
					case SaCodeScDegColumn.DegPeriodMonth:
					return entityData.DegPeriodMonth != _originalData.DegPeriodMonth;
					case SaCodeScDegColumn.Constant:
					return entityData.Constant != _originalData.Constant;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SaCodeScDegColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SaCodeScDegId != _originalData.SaCodeScDegId;
			result = result || entityData.ScDegCode != _originalData.ScDegCode;
			result = result || entityData.ScDegDescrAr != _originalData.ScDegDescrAr;
			result = result || entityData.ScDegDescrEn != _originalData.ScDegDescrEn;
			result = result || entityData.StartSal != _originalData.StartSal;
			result = result || entityData.EndSal != _originalData.EndSal;
			result = result || entityData.DegPeriod != _originalData.DegPeriod;
			result = result || entityData.StaffFlag != _originalData.StaffFlag;
			result = result || entityData.DegOrder != _originalData.DegOrder;
			result = result || entityData.DegPeriodMonth != _originalData.DegPeriodMonth;
			result = result || entityData.Constant != _originalData.Constant;
			return result;
		}	
		
		///<summary>
		///  Returns a SaCodeScDeg Entity with the original data.
		///</summary>
		public SaCodeScDeg GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSaCodeScDeg(
				_originalData.SaCodeScDegId,
				_originalData.ScDegCode,
				_originalData.ScDegDescrAr,
				_originalData.ScDegDescrEn,
				_originalData.StartSal,
				_originalData.EndSal,
				_originalData.DegPeriod,
				_originalData.StaffFlag,
				_originalData.DegOrder,
				_originalData.DegPeriodMonth,
				_originalData.Constant
				);
				
			return (SaCodeScDeg)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SaCodeScDegBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SaCodeScDegBase)
				return ValueEquals(this, (SaCodeScDegBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SaCodeScDegBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SaCodeScDegId.GetHashCode() ^ 
					((this.ScDegCode == null) ? string.Empty : this.ScDegCode.ToString()).GetHashCode() ^ 
					this.ScDegDescrAr.GetHashCode() ^ 
					((this.ScDegDescrEn == null) ? string.Empty : this.ScDegDescrEn.ToString()).GetHashCode() ^ 
					((this.StartSal == null) ? string.Empty : this.StartSal.ToString()).GetHashCode() ^ 
					((this.EndSal == null) ? string.Empty : this.EndSal.ToString()).GetHashCode() ^ 
					this.DegPeriod.GetHashCode() ^ 
					((this.StaffFlag == null) ? string.Empty : this.StaffFlag.ToString()).GetHashCode() ^ 
					this.DegOrder.GetHashCode() ^ 
					this.DegPeriodMonth.GetHashCode() ^ 
					((this.Constant == null) ? string.Empty : this.Constant.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SaCodeScDegBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SaCodeScDegBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SaCodeScDegBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SaCodeScDegBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SaCodeScDegBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SaCodeScDegBase Object1, SaCodeScDegBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SaCodeScDegId != Object2.SaCodeScDegId)
				equal = false;
			if ( Object1.ScDegCode != null && Object2.ScDegCode != null )
			{
				if (Object1.ScDegCode != Object2.ScDegCode)
					equal = false;
			}
			else if (Object1.ScDegCode == null ^ Object2.ScDegCode == null )
			{
				equal = false;
			}
			if (Object1.ScDegDescrAr != Object2.ScDegDescrAr)
				equal = false;
			if ( Object1.ScDegDescrEn != null && Object2.ScDegDescrEn != null )
			{
				if (Object1.ScDegDescrEn != Object2.ScDegDescrEn)
					equal = false;
			}
			else if (Object1.ScDegDescrEn == null ^ Object2.ScDegDescrEn == null )
			{
				equal = false;
			}
			if ( Object1.StartSal != null && Object2.StartSal != null )
			{
				if (Object1.StartSal != Object2.StartSal)
					equal = false;
			}
			else if (Object1.StartSal == null ^ Object2.StartSal == null )
			{
				equal = false;
			}
			if ( Object1.EndSal != null && Object2.EndSal != null )
			{
				if (Object1.EndSal != Object2.EndSal)
					equal = false;
			}
			else if (Object1.EndSal == null ^ Object2.EndSal == null )
			{
				equal = false;
			}
			if (Object1.DegPeriod != Object2.DegPeriod)
				equal = false;
			if ( Object1.StaffFlag != null && Object2.StaffFlag != null )
			{
				if (Object1.StaffFlag != Object2.StaffFlag)
					equal = false;
			}
			else if (Object1.StaffFlag == null ^ Object2.StaffFlag == null )
			{
				equal = false;
			}
			if (Object1.DegOrder != Object2.DegOrder)
				equal = false;
			if (Object1.DegPeriodMonth != Object2.DegPeriodMonth)
				equal = false;
			if ( Object1.Constant != null && Object2.Constant != null )
			{
				if (Object1.Constant != Object2.Constant)
					equal = false;
			}
			else if (Object1.Constant == null ^ Object2.Constant == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SaCodeScDegBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SaCodeScDegComparer GetComparer()
        {
            return new SaCodeScDegComparer();
        }
        */

        // Comparer delegates back to SaCodeScDeg
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SaCodeScDeg rhs, SaCodeScDegColumn which)
        {
            switch (which)
            {
            	
            	
            	case SaCodeScDegColumn.SaCodeScDegId:
            		return this.SaCodeScDegId.CompareTo(rhs.SaCodeScDegId);
            		
            		                 
            	
            	
            	case SaCodeScDegColumn.ScDegCode:
            		return this.ScDegCode.CompareTo(rhs.ScDegCode);
            		
            		                 
            	
            	
            	case SaCodeScDegColumn.ScDegDescrAr:
            		return this.ScDegDescrAr.CompareTo(rhs.ScDegDescrAr);
            		
            		                 
            	
            	
            	case SaCodeScDegColumn.ScDegDescrEn:
            		return this.ScDegDescrEn.CompareTo(rhs.ScDegDescrEn);
            		
            		                 
            	
            	
            	case SaCodeScDegColumn.StartSal:
            		return this.StartSal.Value.CompareTo(rhs.StartSal.Value);
            		
            		                 
            	
            	
            	case SaCodeScDegColumn.EndSal:
            		return this.EndSal.Value.CompareTo(rhs.EndSal.Value);
            		
            		                 
            	
            	
            	case SaCodeScDegColumn.DegPeriod:
            		return this.DegPeriod.CompareTo(rhs.DegPeriod);
            		
            		                 
            	
            	
            	case SaCodeScDegColumn.StaffFlag:
            		return this.StaffFlag.Value.CompareTo(rhs.StaffFlag.Value);
            		
            		                 
            	
            	
            	case SaCodeScDegColumn.DegOrder:
            		return this.DegOrder.CompareTo(rhs.DegOrder);
            		
            		                 
            	
            	
            	case SaCodeScDegColumn.DegPeriodMonth:
            		return this.DegPeriodMonth.CompareTo(rhs.DegPeriodMonth);
            		
            		                 
            	
            	
            	case SaCodeScDegColumn.Constant:
            		return this.Constant.Value.CompareTo(rhs.Constant.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SaCodeScDegKey> Members
		
		// member variable for the EntityId property
		private SaCodeScDegKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SaCodeScDegKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SaCodeScDegKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SaCodeScDeg")
					.Append("|").Append( this.SaCodeScDegId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- SaCodeScDegId: {0}{11}- ScDegCode: {1}{11}- ScDegDescrAr: {2}{11}- ScDegDescrEn: {3}{11}- StartSal: {4}{11}- EndSal: {5}{11}- DegPeriod: {6}{11}- StaffFlag: {7}{11}- DegOrder: {8}{11}- DegPeriodMonth: {9}{11}- Constant: {10}{11}{13}", 
				this.SaCodeScDegId,
				(this.ScDegCode == null) ? string.Empty : this.ScDegCode.ToString(),
				this.ScDegDescrAr,
				(this.ScDegDescrEn == null) ? string.Empty : this.ScDegDescrEn.ToString(),
				(this.StartSal == null) ? string.Empty : this.StartSal.ToString(),
				(this.EndSal == null) ? string.Empty : this.EndSal.ToString(),
				this.DegPeriod,
				(this.StaffFlag == null) ? string.Empty : this.StaffFlag.ToString(),
				this.DegOrder,
				this.DegPeriodMonth,
				(this.Constant == null) ? string.Empty : this.Constant.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SA_CODE_SC_DEG' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SaCodeScDegEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SA_CODE_SC_DEG_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SA_CODE_SC_DEG"</remarks>
		public System.Decimal SaCodeScDegId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSaCodeScDegId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SC_DEG_CODE : 
		/// </summary>
		public System.String		  ScDegCode = null;
		
		/// <summary>
		/// SC_DEG_DESCR_AR : 
		/// </summary>
		public System.String		  ScDegDescrAr = string.Empty;
		
		/// <summary>
		/// SC_DEG_DESCR_EN : 
		/// </summary>
		public System.String		  ScDegDescrEn = null;
		
		/// <summary>
		/// START_SAL : 
		/// </summary>
		public System.Decimal?		  StartSal = null;
		
		/// <summary>
		/// END_SAL : 
		/// </summary>
		public System.Decimal?		  EndSal = null;
		
		/// <summary>
		/// DEG_PERIOD : 
		/// </summary>
		public System.Decimal		  DegPeriod = 0.0m;
		
		/// <summary>
		/// STAFF_FLAG : 
		/// </summary>
		public System.Decimal?		  StaffFlag = null;
		
		/// <summary>
		/// DEG_ORDER : 
		/// </summary>
		public System.Decimal		  DegOrder = 0.0m;
		
		/// <summary>
		/// DEG_PERIOD_Month : 
		/// </summary>
		public System.Decimal		  DegPeriodMonth = 0.0m;
		
		/// <summary>
		/// Constant : 
		/// </summary>
		public System.Decimal?		  Constant = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region SaEmploymentCollection
		
		private TList<SaEmployment> _saEmploymentSaCodeScDegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _saEmploymentSaCodeScDegId
		/// </summary>
		
		public TList<SaEmployment> SaEmploymentCollection
		{
			get
			{
				if (_saEmploymentSaCodeScDegId == null)
				{
				_saEmploymentSaCodeScDegId = new TList<SaEmployment>();
				}
	
				return _saEmploymentSaCodeScDegId;
			}
			set { _saEmploymentSaCodeScDegId = value; }
		}
		
		#endregion

		#region PgExtMemberCollection
		
		private TList<PgExtMember> _pgExtMemberSaCodeScDegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgExtMemberSaCodeScDegId
		/// </summary>
		
		public TList<PgExtMember> PgExtMemberCollection
		{
			get
			{
				if (_pgExtMemberSaCodeScDegId == null)
				{
				_pgExtMemberSaCodeScDegId = new TList<PgExtMember>();
				}
	
				return _pgExtMemberSaCodeScDegId;
			}
			set { _pgExtMemberSaCodeScDegId = value; }
		}
		
		#endregion

		#region SaResearchTeamCollection
		
		private TList<SaResearchTeam> _saResearchTeamSaCodeScDegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _saResearchTeamSaCodeScDegId
		/// </summary>
		
		public TList<SaResearchTeam> SaResearchTeamCollection
		{
			get
			{
				if (_saResearchTeamSaCodeScDegId == null)
				{
				_saResearchTeamSaCodeScDegId = new TList<SaResearchTeam>();
				}
	
				return _saResearchTeamSaCodeScDegId;
			}
			set { _saResearchTeamSaCodeScDegId = value; }
		}
		
		#endregion

		#region CoControlMemberCollection
		
		private TList<CoControlMember> _coControlMemberSaCodeScDegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coControlMemberSaCodeScDegId
		/// </summary>
		
		public TList<CoControlMember> CoControlMemberCollection
		{
			get
			{
				if (_coControlMemberSaCodeScDegId == null)
				{
				_coControlMemberSaCodeScDegId = new TList<CoControlMember>();
				}
	
				return _coControlMemberSaCodeScDegId;
			}
			set { _coControlMemberSaCodeScDegId = value; }
		}
		
		#endregion

		#region SaCommMemberCollection
		
		private TList<SaCommMember> _saCommMemberSaCodeScDegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _saCommMemberSaCodeScDegId
		/// </summary>
		
		public TList<SaCommMember> SaCommMemberCollection
		{
			get
			{
				if (_saCommMemberSaCodeScDegId == null)
				{
				_saCommMemberSaCodeScDegId = new TList<SaCommMember>();
				}
	
				return _saCommMemberSaCodeScDegId;
			}
			set { _saCommMemberSaCodeScDegId = value; }
		}
		
		#endregion

		#region SaPromotionCondCollection
		
		private TList<SaPromotionCond> _saPromotionCondSaCodeScDegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _saPromotionCondSaCodeScDegId
		/// </summary>
		
		public TList<SaPromotionCond> SaPromotionCondCollection
		{
			get
			{
				if (_saPromotionCondSaCodeScDegId == null)
				{
				_saPromotionCondSaCodeScDegId = new TList<SaPromotionCond>();
				}
	
				return _saPromotionCondSaCodeScDegId;
			}
			set { _saPromotionCondSaCodeScDegId = value; }
		}
		
		#endregion

		#region SaServTerminCollectionGetBySaCodeScDegOldId
		
		private TList<SaServTermin> _saServTerminSaCodeScDegOldIdGetBySaCodeScDegOldId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _saServTerminSaCodeScDegOldIdGetBySaCodeScDegOldId
		/// </summary>
		
		public TList<SaServTermin> SaServTerminCollectionGetBySaCodeScDegOldId
		{
			get
			{
				if (_saServTerminSaCodeScDegOldIdGetBySaCodeScDegOldId == null)
				{
				_saServTerminSaCodeScDegOldIdGetBySaCodeScDegOldId = new TList<SaServTermin>();
				}
	
				return _saServTerminSaCodeScDegOldIdGetBySaCodeScDegOldId;
			}
			set { _saServTerminSaCodeScDegOldIdGetBySaCodeScDegOldId = value; }
		}
		
		#endregion

		#region SaEmpHierarchyCollection
		
		private TList<SaEmpHierarchy> _saEmpHierarchySaCodeScDegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _saEmpHierarchySaCodeScDegId
		/// </summary>
		
		public TList<SaEmpHierarchy> SaEmpHierarchyCollection
		{
			get
			{
				if (_saEmpHierarchySaCodeScDegId == null)
				{
				_saEmpHierarchySaCodeScDegId = new TList<SaEmpHierarchy>();
				}
	
				return _saEmpHierarchySaCodeScDegId;
			}
			set { _saEmpHierarchySaCodeScDegId = value; }
		}
		
		#endregion

		#region PgStfRoleDegCollection
		
		private TList<PgStfRoleDeg> _pgStfRoleDegSaCodeScDegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgStfRoleDegSaCodeScDegId
		/// </summary>
		
		public TList<PgStfRoleDeg> PgStfRoleDegCollection
		{
			get
			{
				if (_pgStfRoleDegSaCodeScDegId == null)
				{
				_pgStfRoleDegSaCodeScDegId = new TList<PgStfRoleDeg>();
				}
	
				return _pgStfRoleDegSaCodeScDegId;
			}
			set { _pgStfRoleDegSaCodeScDegId = value; }
		}
		
		#endregion

		#region SaSupervisingJobsCollection
		
		private TList<SaSupervisingJobs> _saSupervisingJobsSaCodeScDegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _saSupervisingJobsSaCodeScDegId
		/// </summary>
		
		public TList<SaSupervisingJobs> SaSupervisingJobsCollection
		{
			get
			{
				if (_saSupervisingJobsSaCodeScDegId == null)
				{
				_saSupervisingJobsSaCodeScDegId = new TList<SaSupervisingJobs>();
				}
	
				return _saSupervisingJobsSaCodeScDegId;
			}
			set { _saSupervisingJobsSaCodeScDegId = value; }
		}
		
		#endregion

		#region CoExaminerCorectorCollection
		
		private TList<CoExaminerCorector> _coExaminerCorectorSaCodeScDegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coExaminerCorectorSaCodeScDegId
		/// </summary>
		
		public TList<CoExaminerCorector> CoExaminerCorectorCollection
		{
			get
			{
				if (_coExaminerCorectorSaCodeScDegId == null)
				{
				_coExaminerCorectorSaCodeScDegId = new TList<CoExaminerCorector>();
				}
	
				return _coExaminerCorectorSaCodeScDegId;
			}
			set { _coExaminerCorectorSaCodeScDegId = value; }
		}
		
		#endregion

		#region CoContRoomMemberCollection
		
		private TList<CoContRoomMember> _coContRoomMemberSaCodeScDegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coContRoomMemberSaCodeScDegId
		/// </summary>
		
		public TList<CoContRoomMember> CoContRoomMemberCollection
		{
			get
			{
				if (_coContRoomMemberSaCodeScDegId == null)
				{
				_coContRoomMemberSaCodeScDegId = new TList<CoContRoomMember>();
				}
	
				return _coContRoomMemberSaCodeScDegId;
			}
			set { _coContRoomMemberSaCodeScDegId = value; }
		}
		
		#endregion

		#region SaPromotionCollection
		
		private TList<SaPromotion> _saPromotionSaCodeScDegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _saPromotionSaCodeScDegId
		/// </summary>
		
		public TList<SaPromotion> SaPromotionCollection
		{
			get
			{
				if (_saPromotionSaCodeScDegId == null)
				{
				_saPromotionSaCodeScDegId = new TList<SaPromotion>();
				}
	
				return _saPromotionSaCodeScDegId;
			}
			set { _saPromotionSaCodeScDegId = value; }
		}
		
		#endregion

		#region SaServTerminCollectionGetBySaCodeScDegId
		
		private TList<SaServTermin> _saServTerminSaCodeScDegOldIdGetBySaCodeScDegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _saServTerminSaCodeScDegOldIdGetBySaCodeScDegId
		/// </summary>
		
		public TList<SaServTermin> SaServTerminCollectionGetBySaCodeScDegId
		{
			get
			{
				if (_saServTerminSaCodeScDegOldIdGetBySaCodeScDegId == null)
				{
				_saServTerminSaCodeScDegOldIdGetBySaCodeScDegId = new TList<SaServTermin>();
				}
	
				return _saServTerminSaCodeScDegOldIdGetBySaCodeScDegId;
			}
			set { _saServTerminSaCodeScDegOldIdGetBySaCodeScDegId = value; }
		}
		
		#endregion

		#region SaStfMemberCollection
		
		private TList<SaStfMember> _saStfMemberSaCodeScDegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _saStfMemberSaCodeScDegId
		/// </summary>
		
		public TList<SaStfMember> SaStfMemberCollection
		{
			get
			{
				if (_saStfMemberSaCodeScDegId == null)
				{
				_saStfMemberSaCodeScDegId = new TList<SaStfMember>();
				}
	
				return _saStfMemberSaCodeScDegId;
			}
			set { _saStfMemberSaCodeScDegId = value; }
		}
		
		#endregion

		#region SaPromotionRequestCollection
		
		private TList<SaPromotionRequest> _saPromotionRequestSaCodeScDegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _saPromotionRequestSaCodeScDegId
		/// </summary>
		
		public TList<SaPromotionRequest> SaPromotionRequestCollection
		{
			get
			{
				if (_saPromotionRequestSaCodeScDegId == null)
				{
				_saPromotionRequestSaCodeScDegId = new TList<SaPromotionRequest>();
				}
	
				return _saPromotionRequestSaCodeScDegId;
			}
			set { _saPromotionRequestSaCodeScDegId = value; }
		}
		
		#endregion

		#region SaCdeAcadLoadCollection
		
		private TList<SaCdeAcadLoad> _saCdeAcadLoadSaCodeScDegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _saCdeAcadLoadSaCodeScDegId
		/// </summary>
		
		public TList<SaCdeAcadLoad> SaCdeAcadLoadCollection
		{
			get
			{
				if (_saCdeAcadLoadSaCodeScDegId == null)
				{
				_saCdeAcadLoadSaCodeScDegId = new TList<SaCdeAcadLoad>();
				}
	
				return _saCdeAcadLoadSaCodeScDegId;
			}
			set { _saCdeAcadLoadSaCodeScDegId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SaCodeScDegEntityData _tmp = new SaCodeScDegEntityData();
						
			_tmp.SaCodeScDegId = this.SaCodeScDegId;
			_tmp.OriginalSaCodeScDegId = this.OriginalSaCodeScDegId;
			
			_tmp.ScDegCode = this.ScDegCode;
			_tmp.ScDegDescrAr = this.ScDegDescrAr;
			_tmp.ScDegDescrEn = this.ScDegDescrEn;
			_tmp.StartSal = this.StartSal;
			_tmp.EndSal = this.EndSal;
			_tmp.DegPeriod = this.DegPeriod;
			_tmp.StaffFlag = this.StaffFlag;
			_tmp.DegOrder = this.DegOrder;
			_tmp.DegPeriodMonth = this.DegPeriodMonth;
			_tmp.Constant = this.Constant;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._saEmploymentSaCodeScDegId != null)
				_tmp.SaEmploymentCollection = (TList<SaEmployment>) MakeCopyOf(this.SaEmploymentCollection); 
			if (this._pgExtMemberSaCodeScDegId != null)
				_tmp.PgExtMemberCollection = (TList<PgExtMember>) MakeCopyOf(this.PgExtMemberCollection); 
			if (this._saResearchTeamSaCodeScDegId != null)
				_tmp.SaResearchTeamCollection = (TList<SaResearchTeam>) MakeCopyOf(this.SaResearchTeamCollection); 
			if (this._coControlMemberSaCodeScDegId != null)
				_tmp.CoControlMemberCollection = (TList<CoControlMember>) MakeCopyOf(this.CoControlMemberCollection); 
			if (this._saCommMemberSaCodeScDegId != null)
				_tmp.SaCommMemberCollection = (TList<SaCommMember>) MakeCopyOf(this.SaCommMemberCollection); 
			if (this._saPromotionCondSaCodeScDegId != null)
				_tmp.SaPromotionCondCollection = (TList<SaPromotionCond>) MakeCopyOf(this.SaPromotionCondCollection); 
			if (this._saServTerminSaCodeScDegOldIdGetBySaCodeScDegOldId != null)
				_tmp.SaServTerminCollectionGetBySaCodeScDegOldId = (TList<SaServTermin>) MakeCopyOf(this.SaServTerminCollectionGetBySaCodeScDegOldId); 
			if (this._saEmpHierarchySaCodeScDegId != null)
				_tmp.SaEmpHierarchyCollection = (TList<SaEmpHierarchy>) MakeCopyOf(this.SaEmpHierarchyCollection); 
			if (this._pgStfRoleDegSaCodeScDegId != null)
				_tmp.PgStfRoleDegCollection = (TList<PgStfRoleDeg>) MakeCopyOf(this.PgStfRoleDegCollection); 
			if (this._saSupervisingJobsSaCodeScDegId != null)
				_tmp.SaSupervisingJobsCollection = (TList<SaSupervisingJobs>) MakeCopyOf(this.SaSupervisingJobsCollection); 
			if (this._coExaminerCorectorSaCodeScDegId != null)
				_tmp.CoExaminerCorectorCollection = (TList<CoExaminerCorector>) MakeCopyOf(this.CoExaminerCorectorCollection); 
			if (this._coContRoomMemberSaCodeScDegId != null)
				_tmp.CoContRoomMemberCollection = (TList<CoContRoomMember>) MakeCopyOf(this.CoContRoomMemberCollection); 
			if (this._saPromotionSaCodeScDegId != null)
				_tmp.SaPromotionCollection = (TList<SaPromotion>) MakeCopyOf(this.SaPromotionCollection); 
			if (this._saServTerminSaCodeScDegOldIdGetBySaCodeScDegId != null)
				_tmp.SaServTerminCollectionGetBySaCodeScDegId = (TList<SaServTermin>) MakeCopyOf(this.SaServTerminCollectionGetBySaCodeScDegId); 
			if (this._saStfMemberSaCodeScDegId != null)
				_tmp.SaStfMemberCollection = (TList<SaStfMember>) MakeCopyOf(this.SaStfMemberCollection); 
			if (this._saPromotionRequestSaCodeScDegId != null)
				_tmp.SaPromotionRequestCollection = (TList<SaPromotionRequest>) MakeCopyOf(this.SaPromotionRequestCollection); 
			if (this._saCdeAcadLoadSaCodeScDegId != null)
				_tmp.SaCdeAcadLoadCollection = (TList<SaCdeAcadLoad>) MakeCopyOf(this.SaCdeAcadLoadCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SaCodeScDegEntityData _tmp = new SaCodeScDegEntityData();
						
			_tmp.SaCodeScDegId = this.SaCodeScDegId;
			_tmp.OriginalSaCodeScDegId = this.OriginalSaCodeScDegId;
			
			_tmp.ScDegCode = this.ScDegCode;
			_tmp.ScDegDescrAr = this.ScDegDescrAr;
			_tmp.ScDegDescrEn = this.ScDegDescrEn;
			_tmp.StartSal = this.StartSal;
			_tmp.EndSal = this.EndSal;
			_tmp.DegPeriod = this.DegPeriod;
			_tmp.StaffFlag = this.StaffFlag;
			_tmp.DegOrder = this.DegOrder;
			_tmp.DegPeriodMonth = this.DegPeriodMonth;
			_tmp.Constant = this.Constant;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.SaEmploymentCollection = (TList<SaEmployment>) MakeCopyOf(this.SaEmploymentCollection, existingCopies); 
			_tmp.PgExtMemberCollection = (TList<PgExtMember>) MakeCopyOf(this.PgExtMemberCollection, existingCopies); 
			_tmp.SaResearchTeamCollection = (TList<SaResearchTeam>) MakeCopyOf(this.SaResearchTeamCollection, existingCopies); 
			_tmp.CoControlMemberCollection = (TList<CoControlMember>) MakeCopyOf(this.CoControlMemberCollection, existingCopies); 
			_tmp.SaCommMemberCollection = (TList<SaCommMember>) MakeCopyOf(this.SaCommMemberCollection, existingCopies); 
			_tmp.SaPromotionCondCollection = (TList<SaPromotionCond>) MakeCopyOf(this.SaPromotionCondCollection, existingCopies); 
			_tmp.SaServTerminCollectionGetBySaCodeScDegOldId = (TList<SaServTermin>) MakeCopyOf(this.SaServTerminCollectionGetBySaCodeScDegOldId, existingCopies); 
			_tmp.SaEmpHierarchyCollection = (TList<SaEmpHierarchy>) MakeCopyOf(this.SaEmpHierarchyCollection, existingCopies); 
			_tmp.PgStfRoleDegCollection = (TList<PgStfRoleDeg>) MakeCopyOf(this.PgStfRoleDegCollection, existingCopies); 
			_tmp.SaSupervisingJobsCollection = (TList<SaSupervisingJobs>) MakeCopyOf(this.SaSupervisingJobsCollection, existingCopies); 
			_tmp.CoExaminerCorectorCollection = (TList<CoExaminerCorector>) MakeCopyOf(this.CoExaminerCorectorCollection, existingCopies); 
			_tmp.CoContRoomMemberCollection = (TList<CoContRoomMember>) MakeCopyOf(this.CoContRoomMemberCollection, existingCopies); 
			_tmp.SaPromotionCollection = (TList<SaPromotion>) MakeCopyOf(this.SaPromotionCollection, existingCopies); 
			_tmp.SaServTerminCollectionGetBySaCodeScDegId = (TList<SaServTermin>) MakeCopyOf(this.SaServTerminCollectionGetBySaCodeScDegId, existingCopies); 
			_tmp.SaStfMemberCollection = (TList<SaStfMember>) MakeCopyOf(this.SaStfMemberCollection, existingCopies); 
			_tmp.SaPromotionRequestCollection = (TList<SaPromotionRequest>) MakeCopyOf(this.SaPromotionRequestCollection, existingCopies); 
			_tmp.SaCdeAcadLoadCollection = (TList<SaCdeAcadLoad>) MakeCopyOf(this.SaCdeAcadLoadCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaCodeScDegColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SaCodeScDegColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaCodeScDegColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SaCodeScDegColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaCodeScDegColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SaCodeScDegColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SaCodeScDegEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SaCodeScDegEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaCodeScDegColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SaCodeScDegColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SaCodeScDegEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SaCodeScDegEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SaCodeScDegEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SaCodeScDeg"/> object.
	/// </remarks>
	public class SaCodeScDegEventArgs : System.EventArgs
	{
		private SaCodeScDegColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SaCodeScDegEventArgs class.
		///</summary>
		public SaCodeScDegEventArgs(SaCodeScDegColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SaCodeScDegEventArgs class.
		///</summary>
		public SaCodeScDegEventArgs(SaCodeScDegColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SaCodeScDegColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SaCodeScDegColumn" />
		public SaCodeScDegColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SaCodeScDeg related events.
	///</summary>
	public delegate void SaCodeScDegEventHandler(object sender, SaCodeScDegEventArgs e);
	
	#region SaCodeScDegComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SaCodeScDegComparer : System.Collections.Generic.IComparer<SaCodeScDeg>
	{
		SaCodeScDegColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SaCodeScDegComparer"/> class.
        /// </summary>
		public SaCodeScDegComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SaCodeScDegComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SaCodeScDegComparer(SaCodeScDegColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SaCodeScDeg"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SaCodeScDeg"/> to compare.</param>
        /// <param name="b">The second <c>SaCodeScDeg</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SaCodeScDeg a, SaCodeScDeg b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SaCodeScDeg entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SaCodeScDeg a, SaCodeScDeg b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SaCodeScDegColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SaCodeScDegKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SaCodeScDeg"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SaCodeScDegKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SaCodeScDegKey class.
		/// </summary>
		public SaCodeScDegKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SaCodeScDegKey class.
		/// </summary>
		public SaCodeScDegKey(SaCodeScDegBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SaCodeScDegId = entity.SaCodeScDegId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SaCodeScDegKey class.
		/// </summary>
		public SaCodeScDegKey(System.Decimal _saCodeScDegId)
		{
			#region Init Properties

			this.SaCodeScDegId = _saCodeScDegId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SaCodeScDegBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SaCodeScDegBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SaCodeScDegId property
		private System.Decimal _saCodeScDegId;
		
		/// <summary>
		/// Gets or sets the SaCodeScDegId property.
		/// </summary>
		public System.Decimal SaCodeScDegId
		{
			get { return _saCodeScDegId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SaCodeScDegId = value;
				
				_saCodeScDegId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SaCodeScDegId = ( values["SaCodeScDegId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SaCodeScDegId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SaCodeScDegId", SaCodeScDegId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SaCodeScDegId: {0}{1}",
								SaCodeScDegId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SaCodeScDegColumn Enum
	
	/// <summary>
	/// Enumerate the SaCodeScDeg columns.
	/// </summary>
	[Serializable]
	public enum SaCodeScDegColumn : int
	{
		/// <summary>
		/// SaCodeScDegId : 
		/// </summary>
		[EnumTextValue("SA_CODE_SC_DEG_ID")]
		[ColumnEnum("SA_CODE_SC_DEG_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SaCodeScDegId = 1,
		/// <summary>
		/// ScDegCode : 
		/// </summary>
		[EnumTextValue("SC_DEG_CODE")]
		[ColumnEnum("SC_DEG_CODE", typeof(System.String), System.Data.DbType.String, false, false, true, 5)]
		ScDegCode = 2,
		/// <summary>
		/// ScDegDescrAr : 
		/// </summary>
		[EnumTextValue("SC_DEG_DESCR_AR")]
		[ColumnEnum("SC_DEG_DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		ScDegDescrAr = 3,
		/// <summary>
		/// ScDegDescrEn : 
		/// </summary>
		[EnumTextValue("SC_DEG_DESCR_EN")]
		[ColumnEnum("SC_DEG_DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		ScDegDescrEn = 4,
		/// <summary>
		/// StartSal : 
		/// </summary>
		[EnumTextValue("START_SAL")]
		[ColumnEnum("START_SAL", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		StartSal = 5,
		/// <summary>
		/// EndSal : 
		/// </summary>
		[EnumTextValue("END_SAL")]
		[ColumnEnum("END_SAL", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EndSal = 6,
		/// <summary>
		/// DegPeriod : 
		/// </summary>
		[EnumTextValue("DEG_PERIOD")]
		[ColumnEnum("DEG_PERIOD", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		DegPeriod = 7,
		/// <summary>
		/// StaffFlag : 
		/// </summary>
		[EnumTextValue("STAFF_FLAG")]
		[ColumnEnum("STAFF_FLAG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		StaffFlag = 8,
		/// <summary>
		/// DegOrder : 
		/// </summary>
		[EnumTextValue("DEG_ORDER")]
		[ColumnEnum("DEG_ORDER", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		DegOrder = 9,
		/// <summary>
		/// DegPeriodMonth : 
		/// </summary>
		[EnumTextValue("DEG_PERIOD_Month")]
		[ColumnEnum("DEG_PERIOD_Month", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		DegPeriodMonth = 10,
		/// <summary>
		/// Constant : 
		/// </summary>
		[EnumTextValue("Constant")]
		[ColumnEnum("Constant", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Constant = 11
	}//End enum

	#endregion SaCodeScDegColumn Enum

} // end namespace
