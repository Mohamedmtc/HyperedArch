
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SvUserTask.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SV_USER_TASK' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SvUserTaskBase : EntityBase, ISvUserTask, IEntityId<SvUserTaskKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SvUserTaskEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SvUserTaskEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SvUserTaskEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SvUserTask> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SvUserTaskEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SvUserTaskEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SvUserTaskBase"/> instance.
		///</summary>
		public SvUserTaskBase()
		{
			this.entityData = new SvUserTaskEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SvUserTaskBase"/> instance.
		///</summary>
		///<param name="_svUserTaskId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId">مسلسل الفصل الدراسي</param>
		///<param name="_fromDate"></param>
		///<param name="_toDate"></param>
		///<param name="_seCodeUserTypeId"></param>
		///<param name="_taskTitle"></param>
		///<param name="_taskDtl"></param>
		///<param name="_notes"></param>
		///<param name="_svCdeTaskStatusId"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public SvUserTaskBase(System.Decimal _svUserTaskId, System.Decimal _edAcadYearId, 
			System.Decimal _edCodeSemesterId, System.DateTime? _fromDate, System.DateTime? _toDate, 
			System.Decimal _seCodeUserTypeId, System.String _taskTitle, System.String _taskDtl, System.String _notes, 
			System.Int32 _svCdeTaskStatusId, System.Decimal _seUserId, System.DateTime? _lastDate)
		{
			this.entityData = new SvUserTaskEntityData();
			this.backupData = null;

			this.SvUserTaskId = _svUserTaskId;
			this.EdAcadYearId = _edAcadYearId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.FromDate = _fromDate;
			this.ToDate = _toDate;
			this.SeCodeUserTypeId = _seCodeUserTypeId;
			this.TaskTitle = _taskTitle;
			this.TaskDtl = _taskDtl;
			this.Notes = _notes;
			this.SvCdeTaskStatusId = _svCdeTaskStatusId;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SvUserTask"/> instance.
		///</summary>
		///<param name="_svUserTaskId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId">مسلسل الفصل الدراسي</param>
		///<param name="_fromDate"></param>
		///<param name="_toDate"></param>
		///<param name="_seCodeUserTypeId"></param>
		///<param name="_taskTitle"></param>
		///<param name="_taskDtl"></param>
		///<param name="_notes"></param>
		///<param name="_svCdeTaskStatusId"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static SvUserTask CreateSvUserTask(System.Decimal _svUserTaskId, System.Decimal _edAcadYearId, 
			System.Decimal _edCodeSemesterId, System.DateTime? _fromDate, System.DateTime? _toDate, 
			System.Decimal _seCodeUserTypeId, System.String _taskTitle, System.String _taskDtl, System.String _notes, 
			System.Int32 _svCdeTaskStatusId, System.Decimal _seUserId, System.DateTime? _lastDate)
		{
			SvUserTask newSvUserTask = new SvUserTask();
			newSvUserTask.SvUserTaskId = _svUserTaskId;
			newSvUserTask.EdAcadYearId = _edAcadYearId;
			newSvUserTask.EdCodeSemesterId = _edCodeSemesterId;
			newSvUserTask.FromDate = _fromDate;
			newSvUserTask.ToDate = _toDate;
			newSvUserTask.SeCodeUserTypeId = _seCodeUserTypeId;
			newSvUserTask.TaskTitle = _taskTitle;
			newSvUserTask.TaskDtl = _taskDtl;
			newSvUserTask.Notes = _notes;
			newSvUserTask.SvCdeTaskStatusId = _svCdeTaskStatusId;
			newSvUserTask.SeUserId = _seUserId;
			newSvUserTask.LastDate = _lastDate;
			return newSvUserTask;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SvUserTaskId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SvUserTaskId
		{
			get
			{
				return this.entityData.SvUserTaskId; 
			}
			
			set
			{
				if (this.entityData.SvUserTaskId == value)
					return;
					
				OnColumnChanging(SvUserTaskColumn.SvUserTaskId, this.entityData.SvUserTaskId);
				this.entityData.SvUserTaskId = value;
				this.EntityId.SvUserTaskId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvUserTaskColumn.SvUserTaskId, this.entityData.SvUserTaskId);
				OnPropertyChanged("SvUserTaskId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SV_USER_TASK_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SV_USER_TASK_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSvUserTaskId
		{
			get { return this.entityData.OriginalSvUserTaskId; }
			set { this.entityData.OriginalSvUserTaskId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(SvUserTaskColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvUserTaskColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		مسلسل الفصل الدراسي
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"مسلسل الفصل الدراسي"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(SvUserTaskColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvUserTaskColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FromDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsFromDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? FromDate
		{
			get
			{
				return this.entityData.FromDate; 
			}
			
			set
			{
				if (this.entityData.FromDate == value)
					return;
					
				OnColumnChanging(SvUserTaskColumn.FromDate, this.entityData.FromDate);
				this.entityData.FromDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvUserTaskColumn.FromDate, this.entityData.FromDate);
				OnPropertyChanged("FromDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ToDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsToDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ToDate
		{
			get
			{
				return this.entityData.ToDate; 
			}
			
			set
			{
				if (this.entityData.ToDate == value)
					return;
					
				OnColumnChanging(SvUserTaskColumn.ToDate, this.entityData.ToDate);
				this.entityData.ToDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvUserTaskColumn.ToDate, this.entityData.ToDate);
				OnPropertyChanged("ToDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeCodeUserTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SeCodeUserTypeId
		{
			get
			{
				return this.entityData.SeCodeUserTypeId; 
			}
			
			set
			{
				if (this.entityData.SeCodeUserTypeId == value)
					return;
					
				OnColumnChanging(SvUserTaskColumn.SeCodeUserTypeId, this.entityData.SeCodeUserTypeId);
				this.entityData.SeCodeUserTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvUserTaskColumn.SeCodeUserTypeId, this.entityData.SeCodeUserTypeId);
				OnPropertyChanged("SeCodeUserTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TaskTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String TaskTitle
		{
			get
			{
				return this.entityData.TaskTitle; 
			}
			
			set
			{
				if (this.entityData.TaskTitle == value)
					return;
					
				OnColumnChanging(SvUserTaskColumn.TaskTitle, this.entityData.TaskTitle);
				this.entityData.TaskTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvUserTaskColumn.TaskTitle, this.entityData.TaskTitle);
				OnPropertyChanged("TaskTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TaskDtl property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String TaskDtl
		{
			get
			{
				return this.entityData.TaskDtl; 
			}
			
			set
			{
				if (this.entityData.TaskDtl == value)
					return;
					
				OnColumnChanging(SvUserTaskColumn.TaskDtl, this.entityData.TaskDtl);
				this.entityData.TaskDtl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvUserTaskColumn.TaskDtl, this.entityData.TaskDtl);
				OnPropertyChanged("TaskDtl");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(SvUserTaskColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvUserTaskColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SvCdeTaskStatusId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 SvCdeTaskStatusId
		{
			get
			{
				return this.entityData.SvCdeTaskStatusId; 
			}
			
			set
			{
				if (this.entityData.SvCdeTaskStatusId == value)
					return;
					
				OnColumnChanging(SvUserTaskColumn.SvCdeTaskStatusId, this.entityData.SvCdeTaskStatusId);
				this.entityData.SvCdeTaskStatusId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvUserTaskColumn.SvCdeTaskStatusId, this.entityData.SvCdeTaskStatusId);
				OnPropertyChanged("SvCdeTaskStatusId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(SvUserTaskColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvUserTaskColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(SvUserTaskColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvUserTaskColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeCodeUserType"/>.
		/// </summary>
		/// <value>The source SeCodeUserType for SeCodeUserTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeCodeUserType SeCodeUserTypeIdSource
      	{
            get { return entityData.SeCodeUserTypeIdSource; }
            set { entityData.SeCodeUserTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeUser SeUserIdSource
      	{
            get { return entityData.SeUserIdSource; }
            set { entityData.SeUserIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SvCdeTaskStatus"/>.
		/// </summary>
		/// <value>The source SvCdeTaskStatus for SvCdeTaskStatusId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SvCdeTaskStatus SvCdeTaskStatusIdSource
      	{
            get { return entityData.SvCdeTaskStatusIdSource; }
            set { entityData.SvCdeTaskStatusIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TaskTitle", "Task Title", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TaskDtl", "Task Dtl", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 250));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SV_USER_TASK"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SV_USER_TASK_ID", "ED_ACAD_YEAR_ID", "ED_CODE_SEMESTER_ID", "FROM_DATE", "TO_DATE", "SE_CODE_USER_TYPE_ID", "TASK_TITLE", "TASK_DTL", "NOTES", "SV_CDE_TASK_STATUS_ID", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SvUserTaskEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SvUserTask) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SvUserTask>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SvUserTask);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SvUserTask Entity 
		///</summary>
		protected virtual SvUserTask Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SvUserTask copy = new SvUserTask();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SvUserTaskId = this.SvUserTaskId;
					copy.OriginalSvUserTaskId = this.OriginalSvUserTaskId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.FromDate = this.FromDate;
				copy.ToDate = this.ToDate;
				copy.SeCodeUserTypeId = this.SeCodeUserTypeId;
				copy.TaskTitle = this.TaskTitle;
				copy.TaskDtl = this.TaskDtl;
				copy.Notes = this.Notes;
				copy.SvCdeTaskStatusId = this.SvCdeTaskStatusId;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.SeCodeUserTypeIdSource != null && existingCopies.Contains(this.SeCodeUserTypeIdSource))
				copy.SeCodeUserTypeIdSource = existingCopies[this.SeCodeUserTypeIdSource] as SeCodeUserType;
			else
				copy.SeCodeUserTypeIdSource = MakeCopyOf(this.SeCodeUserTypeIdSource, existingCopies) as SeCodeUserType;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				copy.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				copy.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			if (this.SvCdeTaskStatusIdSource != null && existingCopies.Contains(this.SvCdeTaskStatusIdSource))
				copy.SvCdeTaskStatusIdSource = existingCopies[this.SvCdeTaskStatusIdSource] as SvCdeTaskStatus;
			else
				copy.SvCdeTaskStatusIdSource = MakeCopyOf(this.SvCdeTaskStatusIdSource, existingCopies) as SvCdeTaskStatus;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SvUserTask Entity 
		///</summary>
		public virtual SvUserTask Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SvUserTask Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SvUserTask DeepCopy()
		{
			return EntityHelper.Clone<SvUserTask>(this as SvUserTask);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SvUserTaskEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SvUserTaskEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SvUserTaskEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SvUserTaskColumn column)
		{
			switch(column)
			{
					case SvUserTaskColumn.SvUserTaskId:
					return entityData.SvUserTaskId != _originalData.SvUserTaskId;
					case SvUserTaskColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case SvUserTaskColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case SvUserTaskColumn.FromDate:
					return entityData.FromDate != _originalData.FromDate;
					case SvUserTaskColumn.ToDate:
					return entityData.ToDate != _originalData.ToDate;
					case SvUserTaskColumn.SeCodeUserTypeId:
					return entityData.SeCodeUserTypeId != _originalData.SeCodeUserTypeId;
					case SvUserTaskColumn.TaskTitle:
					return entityData.TaskTitle != _originalData.TaskTitle;
					case SvUserTaskColumn.TaskDtl:
					return entityData.TaskDtl != _originalData.TaskDtl;
					case SvUserTaskColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case SvUserTaskColumn.SvCdeTaskStatusId:
					return entityData.SvCdeTaskStatusId != _originalData.SvCdeTaskStatusId;
					case SvUserTaskColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case SvUserTaskColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SvUserTaskColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SvUserTaskId != _originalData.SvUserTaskId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.FromDate != _originalData.FromDate;
			result = result || entityData.ToDate != _originalData.ToDate;
			result = result || entityData.SeCodeUserTypeId != _originalData.SeCodeUserTypeId;
			result = result || entityData.TaskTitle != _originalData.TaskTitle;
			result = result || entityData.TaskDtl != _originalData.TaskDtl;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.SvCdeTaskStatusId != _originalData.SvCdeTaskStatusId;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a SvUserTask Entity with the original data.
		///</summary>
		public SvUserTask GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSvUserTask(
				_originalData.SvUserTaskId,
				_originalData.EdAcadYearId,
				_originalData.EdCodeSemesterId,
				_originalData.FromDate,
				_originalData.ToDate,
				_originalData.SeCodeUserTypeId,
				_originalData.TaskTitle,
				_originalData.TaskDtl,
				_originalData.Notes,
				_originalData.SvCdeTaskStatusId,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (SvUserTask)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SvUserTaskBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SvUserTaskBase)
				return ValueEquals(this, (SvUserTaskBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SvUserTaskBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SvUserTaskId.GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					this.EdCodeSemesterId.GetHashCode() ^ 
					((this.FromDate == null) ? string.Empty : this.FromDate.ToString()).GetHashCode() ^ 
					((this.ToDate == null) ? string.Empty : this.ToDate.ToString()).GetHashCode() ^ 
					this.SeCodeUserTypeId.GetHashCode() ^ 
					((this.TaskTitle == null) ? string.Empty : this.TaskTitle.ToString()).GetHashCode() ^ 
					((this.TaskDtl == null) ? string.Empty : this.TaskDtl.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					this.SvCdeTaskStatusId.GetHashCode() ^ 
					this.SeUserId.GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SvUserTaskBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SvUserTaskBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SvUserTaskBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SvUserTaskBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SvUserTaskBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SvUserTaskBase Object1, SvUserTaskBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SvUserTaskId != Object2.SvUserTaskId)
				equal = false;
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
				equal = false;
			if ( Object1.FromDate != null && Object2.FromDate != null )
			{
				if (Object1.FromDate != Object2.FromDate)
					equal = false;
			}
			else if (Object1.FromDate == null ^ Object2.FromDate == null )
			{
				equal = false;
			}
			if ( Object1.ToDate != null && Object2.ToDate != null )
			{
				if (Object1.ToDate != Object2.ToDate)
					equal = false;
			}
			else if (Object1.ToDate == null ^ Object2.ToDate == null )
			{
				equal = false;
			}
			if (Object1.SeCodeUserTypeId != Object2.SeCodeUserTypeId)
				equal = false;
			if ( Object1.TaskTitle != null && Object2.TaskTitle != null )
			{
				if (Object1.TaskTitle != Object2.TaskTitle)
					equal = false;
			}
			else if (Object1.TaskTitle == null ^ Object2.TaskTitle == null )
			{
				equal = false;
			}
			if ( Object1.TaskDtl != null && Object2.TaskDtl != null )
			{
				if (Object1.TaskDtl != Object2.TaskDtl)
					equal = false;
			}
			else if (Object1.TaskDtl == null ^ Object2.TaskDtl == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if (Object1.SvCdeTaskStatusId != Object2.SvCdeTaskStatusId)
				equal = false;
			if (Object1.SeUserId != Object2.SeUserId)
				equal = false;
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SvUserTaskBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SvUserTaskComparer GetComparer()
        {
            return new SvUserTaskComparer();
        }
        */

        // Comparer delegates back to SvUserTask
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SvUserTask rhs, SvUserTaskColumn which)
        {
            switch (which)
            {
            	
            	
            	case SvUserTaskColumn.SvUserTaskId:
            		return this.SvUserTaskId.CompareTo(rhs.SvUserTaskId);
            		
            		                 
            	
            	
            	case SvUserTaskColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case SvUserTaskColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.CompareTo(rhs.EdCodeSemesterId);
            		
            		                 
            	
            	
            	case SvUserTaskColumn.FromDate:
            		return this.FromDate.Value.CompareTo(rhs.FromDate.Value);
            		
            		                 
            	
            	
            	case SvUserTaskColumn.ToDate:
            		return this.ToDate.Value.CompareTo(rhs.ToDate.Value);
            		
            		                 
            	
            	
            	case SvUserTaskColumn.SeCodeUserTypeId:
            		return this.SeCodeUserTypeId.CompareTo(rhs.SeCodeUserTypeId);
            		
            		                 
            	
            	
            	case SvUserTaskColumn.TaskTitle:
            		return this.TaskTitle.CompareTo(rhs.TaskTitle);
            		
            		                 
            	
            	
            	case SvUserTaskColumn.TaskDtl:
            		return this.TaskDtl.CompareTo(rhs.TaskDtl);
            		
            		                 
            	
            	
            	case SvUserTaskColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case SvUserTaskColumn.SvCdeTaskStatusId:
            		return this.SvCdeTaskStatusId.CompareTo(rhs.SvCdeTaskStatusId);
            		
            		                 
            	
            	
            	case SvUserTaskColumn.SeUserId:
            		return this.SeUserId.CompareTo(rhs.SeUserId);
            		
            		                 
            	
            	
            	case SvUserTaskColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SvUserTaskKey> Members
		
		// member variable for the EntityId property
		private SvUserTaskKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SvUserTaskKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SvUserTaskKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SvUserTask")
					.Append("|").Append( this.SvUserTaskId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- SvUserTaskId: {0}{12}- EdAcadYearId: {1}{12}- EdCodeSemesterId: {2}{12}- FromDate: {3}{12}- ToDate: {4}{12}- SeCodeUserTypeId: {5}{12}- TaskTitle: {6}{12}- TaskDtl: {7}{12}- Notes: {8}{12}- SvCdeTaskStatusId: {9}{12}- SeUserId: {10}{12}- LastDate: {11}{12}{14}", 
				this.SvUserTaskId,
				this.EdAcadYearId,
				this.EdCodeSemesterId,
				(this.FromDate == null) ? string.Empty : this.FromDate.ToString(),
				(this.ToDate == null) ? string.Empty : this.ToDate.ToString(),
				this.SeCodeUserTypeId,
				(this.TaskTitle == null) ? string.Empty : this.TaskTitle.ToString(),
				(this.TaskDtl == null) ? string.Empty : this.TaskDtl.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				this.SvCdeTaskStatusId,
				this.SeUserId,
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SV_USER_TASK' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SvUserTaskEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SV_USER_TASK_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SV_USER_TASK"</remarks>
		public System.Decimal SvUserTaskId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSvUserTaskId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : مسلسل الفصل الدراسي
		/// </summary>
		public System.Decimal		  EdCodeSemesterId = 0.0m;
		
		/// <summary>
		/// FROM_DATE : 
		/// </summary>
		public System.DateTime?		  FromDate = null;
		
		/// <summary>
		/// TO_DATE : 
		/// </summary>
		public System.DateTime?		  ToDate = null;
		
		/// <summary>
		/// SE_CODE_USER_TYPE_ID : 
		/// </summary>
		public System.Decimal		  SeCodeUserTypeId = 0.0m;
		
		/// <summary>
		/// TASK_TITLE : 
		/// </summary>
		public System.String		  TaskTitle = null;
		
		/// <summary>
		/// TASK_DTL : 
		/// </summary>
		public System.String		  TaskDtl = null;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// SV_CDE_TASK_STATUS_ID : 
		/// </summary>
		public System.Int32		  SvCdeTaskStatusId = (int)0;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal		  SeUserId = 0.0m;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private SeCodeUserType _seCodeUserTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeCodeUserType"/>.
		/// </summary>
		/// <value>The source SeCodeUserType for SeCodeUserTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeCodeUserType SeCodeUserTypeIdSource
      	{
            get { return this._seCodeUserTypeIdSource; }
            set { this._seCodeUserTypeIdSource = value; }
      	}
		private SeUser _seUserIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeUser SeUserIdSource
      	{
            get { return this._seUserIdSource; }
            set { this._seUserIdSource = value; }
      	}
		private SvCdeTaskStatus _svCdeTaskStatusIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SvCdeTaskStatus"/>.
		/// </summary>
		/// <value>The source SvCdeTaskStatus for SvCdeTaskStatusId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SvCdeTaskStatus SvCdeTaskStatusIdSource
      	{
            get { return this._svCdeTaskStatusIdSource; }
            set { this._svCdeTaskStatusIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SvUserTaskEntityData _tmp = new SvUserTaskEntityData();
						
			_tmp.SvUserTaskId = this.SvUserTaskId;
			_tmp.OriginalSvUserTaskId = this.OriginalSvUserTaskId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.FromDate = this.FromDate;
			_tmp.ToDate = this.ToDate;
			_tmp.SeCodeUserTypeId = this.SeCodeUserTypeId;
			_tmp.TaskTitle = this.TaskTitle;
			_tmp.TaskDtl = this.TaskDtl;
			_tmp.Notes = this.Notes;
			_tmp.SvCdeTaskStatusId = this.SvCdeTaskStatusId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.SeCodeUserTypeIdSource != null)
				_tmp.SeCodeUserTypeIdSource = MakeCopyOf(this.SeCodeUserTypeIdSource) as SeCodeUserType;
			if (this.SeUserIdSource != null)
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource) as SeUser;
			if (this.SvCdeTaskStatusIdSource != null)
				_tmp.SvCdeTaskStatusIdSource = MakeCopyOf(this.SvCdeTaskStatusIdSource) as SvCdeTaskStatus;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SvUserTaskEntityData _tmp = new SvUserTaskEntityData();
						
			_tmp.SvUserTaskId = this.SvUserTaskId;
			_tmp.OriginalSvUserTaskId = this.OriginalSvUserTaskId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.FromDate = this.FromDate;
			_tmp.ToDate = this.ToDate;
			_tmp.SeCodeUserTypeId = this.SeCodeUserTypeId;
			_tmp.TaskTitle = this.TaskTitle;
			_tmp.TaskDtl = this.TaskDtl;
			_tmp.Notes = this.Notes;
			_tmp.SvCdeTaskStatusId = this.SvCdeTaskStatusId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.SeCodeUserTypeIdSource != null && existingCopies.Contains(this.SeCodeUserTypeIdSource))
				_tmp.SeCodeUserTypeIdSource = existingCopies[this.SeCodeUserTypeIdSource] as SeCodeUserType;
			else
				_tmp.SeCodeUserTypeIdSource = MakeCopyOf(this.SeCodeUserTypeIdSource, existingCopies) as SeCodeUserType;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				_tmp.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			if (this.SvCdeTaskStatusIdSource != null && existingCopies.Contains(this.SvCdeTaskStatusIdSource))
				_tmp.SvCdeTaskStatusIdSource = existingCopies[this.SvCdeTaskStatusIdSource] as SvCdeTaskStatus;
			else
				_tmp.SvCdeTaskStatusIdSource = MakeCopyOf(this.SvCdeTaskStatusIdSource, existingCopies) as SvCdeTaskStatus;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvUserTaskColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SvUserTaskColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvUserTaskColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SvUserTaskColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvUserTaskColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SvUserTaskColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SvUserTaskEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SvUserTaskEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvUserTaskColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SvUserTaskColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SvUserTaskEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SvUserTaskEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SvUserTaskEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SvUserTask"/> object.
	/// </remarks>
	public class SvUserTaskEventArgs : System.EventArgs
	{
		private SvUserTaskColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SvUserTaskEventArgs class.
		///</summary>
		public SvUserTaskEventArgs(SvUserTaskColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SvUserTaskEventArgs class.
		///</summary>
		public SvUserTaskEventArgs(SvUserTaskColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SvUserTaskColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SvUserTaskColumn" />
		public SvUserTaskColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SvUserTask related events.
	///</summary>
	public delegate void SvUserTaskEventHandler(object sender, SvUserTaskEventArgs e);
	
	#region SvUserTaskComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SvUserTaskComparer : System.Collections.Generic.IComparer<SvUserTask>
	{
		SvUserTaskColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SvUserTaskComparer"/> class.
        /// </summary>
		public SvUserTaskComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SvUserTaskComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SvUserTaskComparer(SvUserTaskColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SvUserTask"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SvUserTask"/> to compare.</param>
        /// <param name="b">The second <c>SvUserTask</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SvUserTask a, SvUserTask b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SvUserTask entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SvUserTask a, SvUserTask b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SvUserTaskColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SvUserTaskKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SvUserTask"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SvUserTaskKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SvUserTaskKey class.
		/// </summary>
		public SvUserTaskKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SvUserTaskKey class.
		/// </summary>
		public SvUserTaskKey(SvUserTaskBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SvUserTaskId = entity.SvUserTaskId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SvUserTaskKey class.
		/// </summary>
		public SvUserTaskKey(System.Decimal _svUserTaskId)
		{
			#region Init Properties

			this.SvUserTaskId = _svUserTaskId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SvUserTaskBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SvUserTaskBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SvUserTaskId property
		private System.Decimal _svUserTaskId;
		
		/// <summary>
		/// Gets or sets the SvUserTaskId property.
		/// </summary>
		public System.Decimal SvUserTaskId
		{
			get { return _svUserTaskId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SvUserTaskId = value;
				
				_svUserTaskId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SvUserTaskId = ( values["SvUserTaskId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SvUserTaskId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SvUserTaskId", SvUserTaskId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SvUserTaskId: {0}{1}",
								SvUserTaskId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SvUserTaskColumn Enum
	
	/// <summary>
	/// Enumerate the SvUserTask columns.
	/// </summary>
	[Serializable]
	public enum SvUserTaskColumn : int
	{
		/// <summary>
		/// SvUserTaskId : 
		/// </summary>
		[EnumTextValue("SV_USER_TASK_ID")]
		[ColumnEnum("SV_USER_TASK_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SvUserTaskId = 1,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 2,
		/// <summary>
		/// EdCodeSemesterId : مسلسل الفصل الدراسي
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeSemesterId = 3,
		/// <summary>
		/// FromDate : 
		/// </summary>
		[EnumTextValue("FROM_DATE")]
		[ColumnEnum("FROM_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		FromDate = 4,
		/// <summary>
		/// ToDate : 
		/// </summary>
		[EnumTextValue("TO_DATE")]
		[ColumnEnum("TO_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		ToDate = 5,
		/// <summary>
		/// SeCodeUserTypeId : 
		/// </summary>
		[EnumTextValue("SE_CODE_USER_TYPE_ID")]
		[ColumnEnum("SE_CODE_USER_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SeCodeUserTypeId = 6,
		/// <summary>
		/// TaskTitle : 
		/// </summary>
		[EnumTextValue("TASK_TITLE")]
		[ColumnEnum("TASK_TITLE", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		TaskTitle = 7,
		/// <summary>
		/// TaskDtl : 
		/// </summary>
		[EnumTextValue("TASK_DTL")]
		[ColumnEnum("TASK_DTL", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		TaskDtl = 8,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		Notes = 9,
		/// <summary>
		/// SvCdeTaskStatusId : 
		/// </summary>
		[EnumTextValue("SV_CDE_TASK_STATUS_ID")]
		[ColumnEnum("SV_CDE_TASK_STATUS_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SvCdeTaskStatusId = 10,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SeUserId = 11,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 12
	}//End enum

	#endregion SvUserTaskColumn Enum

} // end namespace
