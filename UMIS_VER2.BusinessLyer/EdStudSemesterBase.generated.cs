
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdStudSemester.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_STUD_SEMESTER' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdStudSemesterBase : EntityBase, IEdStudSemester, IEntityId<EdStudSemesterKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdStudSemesterEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdStudSemesterEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdStudSemesterEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdStudSemester> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudSemesterEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudSemesterEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdStudSemesterBase"/> instance.
		///</summary>
		public EdStudSemesterBase()
		{
			this.entityData = new EdStudSemesterEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdStudSemesterBase"/> instance.
		///</summary>
		///<param name="_edStudSemesterId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_edStudId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_edCodeLevelId"></param>
		///<param name="_isLast"></param>
		///<param name="_edCodeLoadTypeId"></param>
		///<param name="_edCodeEnrollTypeId"></param>
		///<param name="_accumCh">earned hours> الساعات المجتازة المكتسبة </param>
		///<param name="_accumGpa"></param>
		///<param name="_isCourseApproved"> اعتماد تسجيل طالب  </param>
		///<param name="_courseApproveDate"> اعتماد تسجيل طالب</param>
		///<param name="_accumPoint"></param>
		///<param name="_semCh">earned hours> الساعات المجتازة المكتسبة </param>
		///<param name="_semGpa"></param>
		///<param name="_semPoint"></param>
		///<param name="_isClosed"></param>
		///<param name="_majorCgpa"></param>
		///<param name="_majorGpa"></param>
		///<param name="_acdPlnLoadFlg"></param>
		///<param name="_onlineFlg"></param>
		///<param name="_expForGrad"></param>
		///<param name="_holdForGrad"></param>
		///<param name="_orientFlg"></param>
		///<param name="_nationalitySimilarityFlg"></param>
		///<param name="_feeFacultyRuleId"></param>
		///<param name="_studCardStkrFlg"></param>
		///<param name="_studCardStkrDate"></param>
		///<param name="_feeTotAmnt"></param>
		///<param name="_feePayAmnt"></param>
		///<param name="_feeRefundAmnt"></param>
		///<param name="_payFlg"></param>
		///<param name="_freezeFlg"></param>
		///<param name="_asCodeDegreeId"></param>
		///<param name="_edCdeAcadWarnTypeId"></param>
		///<param name="_notes"></param>
		///<param name="_semCount"></param>
		///<param name="_lstSemInYrFlg"></param>
		///<param name="_edCdeExamTypeId">نوع الامتحان: تكميلى- اعادة</param>
		///<param name="_bhvrMark"></param>
		///<param name="_attndcMark"></param>
		///<param name="_accumChTot"></param>
		///<param name="_accumPointTot"></param>
		///<param name="_resultApproveFlg">اعتماد نتيجة الدور الاول</param>
		///<param name="_calcGpaDate"></param>
		///<param name="_seUserCrsApproveId"> اعتماد تسجيل طالب</param>
		///<param name="_migGpaFlg"></param>
		///<param name="_majorSemCh">مقررات داخل  خطة الطالب او مقرر مكافيئ لمقرر  فى الخطة</param>
		///<param name="_majorAccumCh">مقررات داخل  خطة الطالب او مقرر مكافيئ لمقرر  فى الخطة</param>
		///<param name="_resultApproveMuFlg">اعتماد نتيجة الدور التانى للفصل</param>
		///<param name="_gsCdeHonorId">KTCH مرتبو الشرف الفصلية</param>
		///<param name="_precentCoursesLvl">precentage of all courses  which check to pass foundation level /النسبة الكليه التى حصل عليها الطالب فى المقررات لمقارنتها بنسبة معينة للالتحاق بعام تمهيدى جديد / CAT univ</param>
		///<param name="_seFormId"></param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		///<param name="_transferFlg"></param>
		///<param name="_edCdeStudTypeId">burimi</param>
		///<param name="_ugpa"></param>
		///<param name="_ucgpa"></param>
		public EdStudSemesterBase(System.Decimal _edStudSemesterId, System.Decimal _edCodeSemesterId, 
			System.Decimal _edStudId, System.Decimal _edAcadYearId, System.Decimal? _asFacultyInfoId, 
			System.Decimal? _edCodeLevelId, System.Decimal _isLast, System.Decimal? _edCodeLoadTypeId, 
			System.Decimal? _edCodeEnrollTypeId, System.Decimal? _accumCh, System.Decimal? _accumGpa, 
			System.Decimal _isCourseApproved, System.DateTime? _courseApproveDate, System.Decimal? _accumPoint, 
			System.Decimal? _semCh, System.Decimal? _semGpa, System.Decimal? _semPoint, 
			System.Decimal _isClosed, System.Decimal? _majorCgpa, System.Decimal? _majorGpa, 
			System.Decimal? _acdPlnLoadFlg, System.Decimal? _onlineFlg, System.Decimal? _expForGrad, 
			System.Decimal? _holdForGrad, System.Decimal? _orientFlg, System.Decimal? _nationalitySimilarityFlg, 
			System.Decimal? _feeFacultyRuleId, System.Decimal? _studCardStkrFlg, System.DateTime? _studCardStkrDate, 
			System.Decimal? _feeTotAmnt, System.Decimal? _feePayAmnt, System.Decimal? _feeRefundAmnt, 
			System.Decimal _payFlg, System.Decimal _freezeFlg, System.Decimal? _asCodeDegreeId, 
			System.Decimal? _edCdeAcadWarnTypeId, System.String _notes, System.Decimal? _semCount, 
			System.Decimal? _lstSemInYrFlg, System.Decimal? _edCdeExamTypeId, System.Decimal? _bhvrMark, 
			System.Decimal? _attndcMark, System.Decimal? _accumChTot, System.Decimal? _accumPointTot, 
			System.Int32? _resultApproveFlg, System.DateTime? _calcGpaDate, System.Decimal? _seUserCrsApproveId, 
			System.Boolean? _migGpaFlg, System.Decimal? _majorSemCh, System.Decimal? _majorAccumCh, 
			System.Int32? _resultApproveMuFlg, System.Decimal? _gsCdeHonorId, System.Decimal? _precentCoursesLvl, 
			System.Decimal? _seFormId, System.DateTime? _lastDate, System.Decimal? _seUserId, 
			System.Boolean? _transferFlg, System.Int32? _edCdeStudTypeId, System.Decimal? _ugpa, 
			System.Decimal? _ucgpa)
		{
			this.entityData = new EdStudSemesterEntityData();
			this.backupData = null;

			this.EdStudSemesterId = _edStudSemesterId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.EdStudId = _edStudId;
			this.EdAcadYearId = _edAcadYearId;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.EdCodeLevelId = _edCodeLevelId;
			this.IsLast = _isLast;
			this.EdCodeLoadTypeId = _edCodeLoadTypeId;
			this.EdCodeEnrollTypeId = _edCodeEnrollTypeId;
			this.AccumCh = _accumCh;
			this.AccumGpa = _accumGpa;
			this.IsCourseApproved = _isCourseApproved;
			this.CourseApproveDate = _courseApproveDate;
			this.AccumPoint = _accumPoint;
			this.SemCh = _semCh;
			this.SemGpa = _semGpa;
			this.SemPoint = _semPoint;
			this.IsClosed = _isClosed;
			this.MajorCgpa = _majorCgpa;
			this.MajorGpa = _majorGpa;
			this.AcdPlnLoadFlg = _acdPlnLoadFlg;
			this.OnlineFlg = _onlineFlg;
			this.ExpForGrad = _expForGrad;
			this.HoldForGrad = _holdForGrad;
			this.OrientFlg = _orientFlg;
			this.NationalitySimilarityFlg = _nationalitySimilarityFlg;
			this.FeeFacultyRuleId = _feeFacultyRuleId;
			this.StudCardStkrFlg = _studCardStkrFlg;
			this.StudCardStkrDate = _studCardStkrDate;
			this.FeeTotAmnt = _feeTotAmnt;
			this.FeePayAmnt = _feePayAmnt;
			this.FeeRefundAmnt = _feeRefundAmnt;
			this.PayFlg = _payFlg;
			this.FreezeFlg = _freezeFlg;
			this.AsCodeDegreeId = _asCodeDegreeId;
			this.EdCdeAcadWarnTypeId = _edCdeAcadWarnTypeId;
			this.Notes = _notes;
			this.SemCount = _semCount;
			this.LstSemInYrFlg = _lstSemInYrFlg;
			this.EdCdeExamTypeId = _edCdeExamTypeId;
			this.BhvrMark = _bhvrMark;
			this.AttndcMark = _attndcMark;
			this.AccumChTot = _accumChTot;
			this.AccumPointTot = _accumPointTot;
			this.ResultApproveFlg = _resultApproveFlg;
			this.CalcGpaDate = _calcGpaDate;
			this.SeUserCrsApproveId = _seUserCrsApproveId;
			this.MigGpaFlg = _migGpaFlg;
			this.MajorSemCh = _majorSemCh;
			this.MajorAccumCh = _majorAccumCh;
			this.ResultApproveMuFlg = _resultApproveMuFlg;
			this.GsCdeHonorId = _gsCdeHonorId;
			this.PrecentCoursesLvl = _precentCoursesLvl;
			this.SeFormId = _seFormId;
			this.LastDate = _lastDate;
			this.SeUserId = _seUserId;
			this.TransferFlg = _transferFlg;
			this.EdCdeStudTypeId = _edCdeStudTypeId;
			this.Ugpa = _ugpa;
			this.Ucgpa = _ucgpa;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdStudSemester"/> instance.
		///</summary>
		///<param name="_edStudSemesterId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_edStudId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_edCodeLevelId"></param>
		///<param name="_isLast"></param>
		///<param name="_edCodeLoadTypeId"></param>
		///<param name="_edCodeEnrollTypeId"></param>
		///<param name="_accumCh">earned hours> الساعات المجتازة المكتسبة </param>
		///<param name="_accumGpa"></param>
		///<param name="_isCourseApproved"> اعتماد تسجيل طالب  </param>
		///<param name="_courseApproveDate"> اعتماد تسجيل طالب</param>
		///<param name="_accumPoint"></param>
		///<param name="_semCh">earned hours> الساعات المجتازة المكتسبة </param>
		///<param name="_semGpa"></param>
		///<param name="_semPoint"></param>
		///<param name="_isClosed"></param>
		///<param name="_majorCgpa"></param>
		///<param name="_majorGpa"></param>
		///<param name="_acdPlnLoadFlg"></param>
		///<param name="_onlineFlg"></param>
		///<param name="_expForGrad"></param>
		///<param name="_holdForGrad"></param>
		///<param name="_orientFlg"></param>
		///<param name="_nationalitySimilarityFlg"></param>
		///<param name="_feeFacultyRuleId"></param>
		///<param name="_studCardStkrFlg"></param>
		///<param name="_studCardStkrDate"></param>
		///<param name="_feeTotAmnt"></param>
		///<param name="_feePayAmnt"></param>
		///<param name="_feeRefundAmnt"></param>
		///<param name="_payFlg"></param>
		///<param name="_freezeFlg"></param>
		///<param name="_asCodeDegreeId"></param>
		///<param name="_edCdeAcadWarnTypeId"></param>
		///<param name="_notes"></param>
		///<param name="_semCount"></param>
		///<param name="_lstSemInYrFlg"></param>
		///<param name="_edCdeExamTypeId">نوع الامتحان: تكميلى- اعادة</param>
		///<param name="_bhvrMark"></param>
		///<param name="_attndcMark"></param>
		///<param name="_accumChTot"></param>
		///<param name="_accumPointTot"></param>
		///<param name="_resultApproveFlg">اعتماد نتيجة الدور الاول</param>
		///<param name="_calcGpaDate"></param>
		///<param name="_seUserCrsApproveId"> اعتماد تسجيل طالب</param>
		///<param name="_migGpaFlg"></param>
		///<param name="_majorSemCh">مقررات داخل  خطة الطالب او مقرر مكافيئ لمقرر  فى الخطة</param>
		///<param name="_majorAccumCh">مقررات داخل  خطة الطالب او مقرر مكافيئ لمقرر  فى الخطة</param>
		///<param name="_resultApproveMuFlg">اعتماد نتيجة الدور التانى للفصل</param>
		///<param name="_gsCdeHonorId">KTCH مرتبو الشرف الفصلية</param>
		///<param name="_precentCoursesLvl">precentage of all courses  which check to pass foundation level /النسبة الكليه التى حصل عليها الطالب فى المقررات لمقارنتها بنسبة معينة للالتحاق بعام تمهيدى جديد / CAT univ</param>
		///<param name="_seFormId"></param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		///<param name="_transferFlg"></param>
		///<param name="_edCdeStudTypeId">burimi</param>
		///<param name="_ugpa"></param>
		///<param name="_ucgpa"></param>
		public static EdStudSemester CreateEdStudSemester(System.Decimal _edStudSemesterId, System.Decimal _edCodeSemesterId, 
			System.Decimal _edStudId, System.Decimal _edAcadYearId, System.Decimal? _asFacultyInfoId, 
			System.Decimal? _edCodeLevelId, System.Decimal _isLast, System.Decimal? _edCodeLoadTypeId, 
			System.Decimal? _edCodeEnrollTypeId, System.Decimal? _accumCh, System.Decimal? _accumGpa, 
			System.Decimal _isCourseApproved, System.DateTime? _courseApproveDate, System.Decimal? _accumPoint, 
			System.Decimal? _semCh, System.Decimal? _semGpa, System.Decimal? _semPoint, 
			System.Decimal _isClosed, System.Decimal? _majorCgpa, System.Decimal? _majorGpa, 
			System.Decimal? _acdPlnLoadFlg, System.Decimal? _onlineFlg, System.Decimal? _expForGrad, 
			System.Decimal? _holdForGrad, System.Decimal? _orientFlg, System.Decimal? _nationalitySimilarityFlg, 
			System.Decimal? _feeFacultyRuleId, System.Decimal? _studCardStkrFlg, System.DateTime? _studCardStkrDate, 
			System.Decimal? _feeTotAmnt, System.Decimal? _feePayAmnt, System.Decimal? _feeRefundAmnt, 
			System.Decimal _payFlg, System.Decimal _freezeFlg, System.Decimal? _asCodeDegreeId, 
			System.Decimal? _edCdeAcadWarnTypeId, System.String _notes, System.Decimal? _semCount, 
			System.Decimal? _lstSemInYrFlg, System.Decimal? _edCdeExamTypeId, System.Decimal? _bhvrMark, 
			System.Decimal? _attndcMark, System.Decimal? _accumChTot, System.Decimal? _accumPointTot, 
			System.Int32? _resultApproveFlg, System.DateTime? _calcGpaDate, System.Decimal? _seUserCrsApproveId, 
			System.Boolean? _migGpaFlg, System.Decimal? _majorSemCh, System.Decimal? _majorAccumCh, 
			System.Int32? _resultApproveMuFlg, System.Decimal? _gsCdeHonorId, System.Decimal? _precentCoursesLvl, 
			System.Decimal? _seFormId, System.DateTime? _lastDate, System.Decimal? _seUserId, 
			System.Boolean? _transferFlg, System.Int32? _edCdeStudTypeId, System.Decimal? _ugpa, 
			System.Decimal? _ucgpa)
		{
			EdStudSemester newEdStudSemester = new EdStudSemester();
			newEdStudSemester.EdStudSemesterId = _edStudSemesterId;
			newEdStudSemester.EdCodeSemesterId = _edCodeSemesterId;
			newEdStudSemester.EdStudId = _edStudId;
			newEdStudSemester.EdAcadYearId = _edAcadYearId;
			newEdStudSemester.AsFacultyInfoId = _asFacultyInfoId;
			newEdStudSemester.EdCodeLevelId = _edCodeLevelId;
			newEdStudSemester.IsLast = _isLast;
			newEdStudSemester.EdCodeLoadTypeId = _edCodeLoadTypeId;
			newEdStudSemester.EdCodeEnrollTypeId = _edCodeEnrollTypeId;
			newEdStudSemester.AccumCh = _accumCh;
			newEdStudSemester.AccumGpa = _accumGpa;
			newEdStudSemester.IsCourseApproved = _isCourseApproved;
			newEdStudSemester.CourseApproveDate = _courseApproveDate;
			newEdStudSemester.AccumPoint = _accumPoint;
			newEdStudSemester.SemCh = _semCh;
			newEdStudSemester.SemGpa = _semGpa;
			newEdStudSemester.SemPoint = _semPoint;
			newEdStudSemester.IsClosed = _isClosed;
			newEdStudSemester.MajorCgpa = _majorCgpa;
			newEdStudSemester.MajorGpa = _majorGpa;
			newEdStudSemester.AcdPlnLoadFlg = _acdPlnLoadFlg;
			newEdStudSemester.OnlineFlg = _onlineFlg;
			newEdStudSemester.ExpForGrad = _expForGrad;
			newEdStudSemester.HoldForGrad = _holdForGrad;
			newEdStudSemester.OrientFlg = _orientFlg;
			newEdStudSemester.NationalitySimilarityFlg = _nationalitySimilarityFlg;
			newEdStudSemester.FeeFacultyRuleId = _feeFacultyRuleId;
			newEdStudSemester.StudCardStkrFlg = _studCardStkrFlg;
			newEdStudSemester.StudCardStkrDate = _studCardStkrDate;
			newEdStudSemester.FeeTotAmnt = _feeTotAmnt;
			newEdStudSemester.FeePayAmnt = _feePayAmnt;
			newEdStudSemester.FeeRefundAmnt = _feeRefundAmnt;
			newEdStudSemester.PayFlg = _payFlg;
			newEdStudSemester.FreezeFlg = _freezeFlg;
			newEdStudSemester.AsCodeDegreeId = _asCodeDegreeId;
			newEdStudSemester.EdCdeAcadWarnTypeId = _edCdeAcadWarnTypeId;
			newEdStudSemester.Notes = _notes;
			newEdStudSemester.SemCount = _semCount;
			newEdStudSemester.LstSemInYrFlg = _lstSemInYrFlg;
			newEdStudSemester.EdCdeExamTypeId = _edCdeExamTypeId;
			newEdStudSemester.BhvrMark = _bhvrMark;
			newEdStudSemester.AttndcMark = _attndcMark;
			newEdStudSemester.AccumChTot = _accumChTot;
			newEdStudSemester.AccumPointTot = _accumPointTot;
			newEdStudSemester.ResultApproveFlg = _resultApproveFlg;
			newEdStudSemester.CalcGpaDate = _calcGpaDate;
			newEdStudSemester.SeUserCrsApproveId = _seUserCrsApproveId;
			newEdStudSemester.MigGpaFlg = _migGpaFlg;
			newEdStudSemester.MajorSemCh = _majorSemCh;
			newEdStudSemester.MajorAccumCh = _majorAccumCh;
			newEdStudSemester.ResultApproveMuFlg = _resultApproveMuFlg;
			newEdStudSemester.GsCdeHonorId = _gsCdeHonorId;
			newEdStudSemester.PrecentCoursesLvl = _precentCoursesLvl;
			newEdStudSemester.SeFormId = _seFormId;
			newEdStudSemester.LastDate = _lastDate;
			newEdStudSemester.SeUserId = _seUserId;
			newEdStudSemester.TransferFlg = _transferFlg;
			newEdStudSemester.EdCdeStudTypeId = _edCdeStudTypeId;
			newEdStudSemester.Ugpa = _ugpa;
			newEdStudSemester.Ucgpa = _ucgpa;
			return newEdStudSemester;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdStudSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdStudSemesterId
		{
			get
			{
				return this.entityData.EdStudSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdStudSemesterId == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.EdStudSemesterId, this.entityData.EdStudSemesterId);
				this.entityData.EdStudSemesterId = value;
				this.EntityId.EdStudSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.EdStudSemesterId, this.entityData.EdStudSemesterId);
				OnPropertyChanged("EdStudSemesterId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_STUD_SEMESTER_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ED_STUD_SEMESTER_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdStudSemesterId
		{
			get { return this.entityData.OriginalEdStudSemesterId; }
			set { this.entityData.OriginalEdStudSemesterId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeLevelId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeLevelIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeLevelId
		{
			get
			{
				return this.entityData.EdCodeLevelId; 
			}
			
			set
			{
				if (this.entityData.EdCodeLevelId == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.EdCodeLevelId, this.entityData.EdCodeLevelId);
				this.entityData.EdCodeLevelId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.EdCodeLevelId, this.entityData.EdCodeLevelId);
				OnPropertyChanged("EdCodeLevelId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsLast property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsLast
		{
			get
			{
				return this.entityData.IsLast; 
			}
			
			set
			{
				if (this.entityData.IsLast == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.IsLast, this.entityData.IsLast);
				this.entityData.IsLast = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.IsLast, this.entityData.IsLast);
				OnPropertyChanged("IsLast");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeLoadTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeLoadTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeLoadTypeId
		{
			get
			{
				return this.entityData.EdCodeLoadTypeId; 
			}
			
			set
			{
				if (this.entityData.EdCodeLoadTypeId == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.EdCodeLoadTypeId, this.entityData.EdCodeLoadTypeId);
				this.entityData.EdCodeLoadTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.EdCodeLoadTypeId, this.entityData.EdCodeLoadTypeId);
				OnPropertyChanged("EdCodeLoadTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeEnrollTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeEnrollTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeEnrollTypeId
		{
			get
			{
				return this.entityData.EdCodeEnrollTypeId; 
			}
			
			set
			{
				if (this.entityData.EdCodeEnrollTypeId == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.EdCodeEnrollTypeId, this.entityData.EdCodeEnrollTypeId);
				this.entityData.EdCodeEnrollTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.EdCodeEnrollTypeId, this.entityData.EdCodeEnrollTypeId);
				OnPropertyChanged("EdCodeEnrollTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccumCh property. 
		///		earned hours> الساعات المجتازة المكتسبة 
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAccumChNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"earned hours> الساعات المجتازة المكتسبة "), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AccumCh
		{
			get
			{
				return this.entityData.AccumCh; 
			}
			
			set
			{
				if (this.entityData.AccumCh == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.AccumCh, this.entityData.AccumCh);
				this.entityData.AccumCh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.AccumCh, this.entityData.AccumCh);
				OnPropertyChanged("AccumCh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccumGpa property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAccumGpaNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AccumGpa
		{
			get
			{
				return this.entityData.AccumGpa; 
			}
			
			set
			{
				if (this.entityData.AccumGpa == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.AccumGpa, this.entityData.AccumGpa);
				this.entityData.AccumGpa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.AccumGpa, this.entityData.AccumGpa);
				OnPropertyChanged("AccumGpa");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsCourseApproved property. 
		///		 اعتماد تسجيل طالب  
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@" اعتماد تسجيل طالب  "), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsCourseApproved
		{
			get
			{
				return this.entityData.IsCourseApproved; 
			}
			
			set
			{
				if (this.entityData.IsCourseApproved == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.IsCourseApproved, this.entityData.IsCourseApproved);
				this.entityData.IsCourseApproved = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.IsCourseApproved, this.entityData.IsCourseApproved);
				OnPropertyChanged("IsCourseApproved");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CourseApproveDate property. 
		///		 اعتماد تسجيل طالب
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCourseApproveDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@" اعتماد تسجيل طالب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CourseApproveDate
		{
			get
			{
				return this.entityData.CourseApproveDate; 
			}
			
			set
			{
				if (this.entityData.CourseApproveDate == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.CourseApproveDate, this.entityData.CourseApproveDate);
				this.entityData.CourseApproveDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.CourseApproveDate, this.entityData.CourseApproveDate);
				OnPropertyChanged("CourseApproveDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccumPoint property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAccumPointNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AccumPoint
		{
			get
			{
				return this.entityData.AccumPoint; 
			}
			
			set
			{
				if (this.entityData.AccumPoint == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.AccumPoint, this.entityData.AccumPoint);
				this.entityData.AccumPoint = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.AccumPoint, this.entityData.AccumPoint);
				OnPropertyChanged("AccumPoint");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SemCh property. 
		///		earned hours> الساعات المجتازة المكتسبة 
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSemChNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"earned hours> الساعات المجتازة المكتسبة "), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SemCh
		{
			get
			{
				return this.entityData.SemCh; 
			}
			
			set
			{
				if (this.entityData.SemCh == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.SemCh, this.entityData.SemCh);
				this.entityData.SemCh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.SemCh, this.entityData.SemCh);
				OnPropertyChanged("SemCh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SemGpa property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSemGpaNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SemGpa
		{
			get
			{
				return this.entityData.SemGpa; 
			}
			
			set
			{
				if (this.entityData.SemGpa == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.SemGpa, this.entityData.SemGpa);
				this.entityData.SemGpa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.SemGpa, this.entityData.SemGpa);
				OnPropertyChanged("SemGpa");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SemPoint property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSemPointNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SemPoint
		{
			get
			{
				return this.entityData.SemPoint; 
			}
			
			set
			{
				if (this.entityData.SemPoint == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.SemPoint, this.entityData.SemPoint);
				this.entityData.SemPoint = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.SemPoint, this.entityData.SemPoint);
				OnPropertyChanged("SemPoint");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsClosed property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsClosed
		{
			get
			{
				return this.entityData.IsClosed; 
			}
			
			set
			{
				if (this.entityData.IsClosed == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.IsClosed, this.entityData.IsClosed);
				this.entityData.IsClosed = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.IsClosed, this.entityData.IsClosed);
				OnPropertyChanged("IsClosed");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MajorCgpa property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMajorCgpaNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MajorCgpa
		{
			get
			{
				return this.entityData.MajorCgpa; 
			}
			
			set
			{
				if (this.entityData.MajorCgpa == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.MajorCgpa, this.entityData.MajorCgpa);
				this.entityData.MajorCgpa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.MajorCgpa, this.entityData.MajorCgpa);
				OnPropertyChanged("MajorCgpa");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MajorGpa property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMajorGpaNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MajorGpa
		{
			get
			{
				return this.entityData.MajorGpa; 
			}
			
			set
			{
				if (this.entityData.MajorGpa == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.MajorGpa, this.entityData.MajorGpa);
				this.entityData.MajorGpa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.MajorGpa, this.entityData.MajorGpa);
				OnPropertyChanged("MajorGpa");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AcdPlnLoadFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAcdPlnLoadFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AcdPlnLoadFlg
		{
			get
			{
				return this.entityData.AcdPlnLoadFlg; 
			}
			
			set
			{
				if (this.entityData.AcdPlnLoadFlg == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.AcdPlnLoadFlg, this.entityData.AcdPlnLoadFlg);
				this.entityData.AcdPlnLoadFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.AcdPlnLoadFlg, this.entityData.AcdPlnLoadFlg);
				OnPropertyChanged("AcdPlnLoadFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OnlineFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsOnlineFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? OnlineFlg
		{
			get
			{
				return this.entityData.OnlineFlg; 
			}
			
			set
			{
				if (this.entityData.OnlineFlg == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.OnlineFlg, this.entityData.OnlineFlg);
				this.entityData.OnlineFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.OnlineFlg, this.entityData.OnlineFlg);
				OnPropertyChanged("OnlineFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExpForGrad property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsExpForGradNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ExpForGrad
		{
			get
			{
				return this.entityData.ExpForGrad; 
			}
			
			set
			{
				if (this.entityData.ExpForGrad == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.ExpForGrad, this.entityData.ExpForGrad);
				this.entityData.ExpForGrad = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.ExpForGrad, this.entityData.ExpForGrad);
				OnPropertyChanged("ExpForGrad");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HoldForGrad property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsHoldForGradNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HoldForGrad
		{
			get
			{
				return this.entityData.HoldForGrad; 
			}
			
			set
			{
				if (this.entityData.HoldForGrad == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.HoldForGrad, this.entityData.HoldForGrad);
				this.entityData.HoldForGrad = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.HoldForGrad, this.entityData.HoldForGrad);
				OnPropertyChanged("HoldForGrad");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrientFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsOrientFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? OrientFlg
		{
			get
			{
				return this.entityData.OrientFlg; 
			}
			
			set
			{
				if (this.entityData.OrientFlg == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.OrientFlg, this.entityData.OrientFlg);
				this.entityData.OrientFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.OrientFlg, this.entityData.OrientFlg);
				OnPropertyChanged("OrientFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NationalitySimilarityFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsNationalitySimilarityFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? NationalitySimilarityFlg
		{
			get
			{
				return this.entityData.NationalitySimilarityFlg; 
			}
			
			set
			{
				if (this.entityData.NationalitySimilarityFlg == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.NationalitySimilarityFlg, this.entityData.NationalitySimilarityFlg);
				this.entityData.NationalitySimilarityFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.NationalitySimilarityFlg, this.entityData.NationalitySimilarityFlg);
				OnPropertyChanged("NationalitySimilarityFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeFacultyRuleId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeFacultyRuleIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeeFacultyRuleId
		{
			get
			{
				return this.entityData.FeeFacultyRuleId; 
			}
			
			set
			{
				if (this.entityData.FeeFacultyRuleId == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.FeeFacultyRuleId, this.entityData.FeeFacultyRuleId);
				this.entityData.FeeFacultyRuleId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.FeeFacultyRuleId, this.entityData.FeeFacultyRuleId);
				OnPropertyChanged("FeeFacultyRuleId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StudCardStkrFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsStudCardStkrFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? StudCardStkrFlg
		{
			get
			{
				return this.entityData.StudCardStkrFlg; 
			}
			
			set
			{
				if (this.entityData.StudCardStkrFlg == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.StudCardStkrFlg, this.entityData.StudCardStkrFlg);
				this.entityData.StudCardStkrFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.StudCardStkrFlg, this.entityData.StudCardStkrFlg);
				OnPropertyChanged("StudCardStkrFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StudCardStkrDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsStudCardStkrDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? StudCardStkrDate
		{
			get
			{
				return this.entityData.StudCardStkrDate; 
			}
			
			set
			{
				if (this.entityData.StudCardStkrDate == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.StudCardStkrDate, this.entityData.StudCardStkrDate);
				this.entityData.StudCardStkrDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.StudCardStkrDate, this.entityData.StudCardStkrDate);
				OnPropertyChanged("StudCardStkrDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeTotAmnt property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeTotAmntNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeeTotAmnt
		{
			get
			{
				return this.entityData.FeeTotAmnt; 
			}
			
			set
			{
				if (this.entityData.FeeTotAmnt == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.FeeTotAmnt, this.entityData.FeeTotAmnt);
				this.entityData.FeeTotAmnt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.FeeTotAmnt, this.entityData.FeeTotAmnt);
				OnPropertyChanged("FeeTotAmnt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeePayAmnt property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeePayAmntNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeePayAmnt
		{
			get
			{
				return this.entityData.FeePayAmnt; 
			}
			
			set
			{
				if (this.entityData.FeePayAmnt == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.FeePayAmnt, this.entityData.FeePayAmnt);
				this.entityData.FeePayAmnt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.FeePayAmnt, this.entityData.FeePayAmnt);
				OnPropertyChanged("FeePayAmnt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeRefundAmnt property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeRefundAmntNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeeRefundAmnt
		{
			get
			{
				return this.entityData.FeeRefundAmnt; 
			}
			
			set
			{
				if (this.entityData.FeeRefundAmnt == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.FeeRefundAmnt, this.entityData.FeeRefundAmnt);
				this.entityData.FeeRefundAmnt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.FeeRefundAmnt, this.entityData.FeeRefundAmnt);
				OnPropertyChanged("FeeRefundAmnt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PayFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal PayFlg
		{
			get
			{
				return this.entityData.PayFlg; 
			}
			
			set
			{
				if (this.entityData.PayFlg == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.PayFlg, this.entityData.PayFlg);
				this.entityData.PayFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.PayFlg, this.entityData.PayFlg);
				OnPropertyChanged("PayFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FreezeFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal FreezeFlg
		{
			get
			{
				return this.entityData.FreezeFlg; 
			}
			
			set
			{
				if (this.entityData.FreezeFlg == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.FreezeFlg, this.entityData.FreezeFlg);
				this.entityData.FreezeFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.FreezeFlg, this.entityData.FreezeFlg);
				OnPropertyChanged("FreezeFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeId
		{
			get
			{
				return this.entityData.AsCodeDegreeId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeId == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				this.entityData.AsCodeDegreeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				OnPropertyChanged("AsCodeDegreeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCdeAcadWarnTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCdeAcadWarnTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCdeAcadWarnTypeId
		{
			get
			{
				return this.entityData.EdCdeAcadWarnTypeId; 
			}
			
			set
			{
				if (this.entityData.EdCdeAcadWarnTypeId == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.EdCdeAcadWarnTypeId, this.entityData.EdCdeAcadWarnTypeId);
				this.entityData.EdCdeAcadWarnTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.EdCdeAcadWarnTypeId, this.entityData.EdCdeAcadWarnTypeId);
				OnPropertyChanged("EdCdeAcadWarnTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 300)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SemCount property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSemCountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SemCount
		{
			get
			{
				return this.entityData.SemCount; 
			}
			
			set
			{
				if (this.entityData.SemCount == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.SemCount, this.entityData.SemCount);
				this.entityData.SemCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.SemCount, this.entityData.SemCount);
				OnPropertyChanged("SemCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LstSemInYrFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsLstSemInYrFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? LstSemInYrFlg
		{
			get
			{
				return this.entityData.LstSemInYrFlg; 
			}
			
			set
			{
				if (this.entityData.LstSemInYrFlg == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.LstSemInYrFlg, this.entityData.LstSemInYrFlg);
				this.entityData.LstSemInYrFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.LstSemInYrFlg, this.entityData.LstSemInYrFlg);
				OnPropertyChanged("LstSemInYrFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCdeExamTypeId property. 
		///		نوع الامتحان: تكميلى- اعادة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCdeExamTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"نوع الامتحان: تكميلى- اعادة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCdeExamTypeId
		{
			get
			{
				return this.entityData.EdCdeExamTypeId; 
			}
			
			set
			{
				if (this.entityData.EdCdeExamTypeId == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.EdCdeExamTypeId, this.entityData.EdCdeExamTypeId);
				this.entityData.EdCdeExamTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.EdCdeExamTypeId, this.entityData.EdCdeExamTypeId);
				OnPropertyChanged("EdCdeExamTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BhvrMark property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsBhvrMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? BhvrMark
		{
			get
			{
				return this.entityData.BhvrMark; 
			}
			
			set
			{
				if (this.entityData.BhvrMark == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.BhvrMark, this.entityData.BhvrMark);
				this.entityData.BhvrMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.BhvrMark, this.entityData.BhvrMark);
				OnPropertyChanged("BhvrMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AttndcMark property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAttndcMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AttndcMark
		{
			get
			{
				return this.entityData.AttndcMark; 
			}
			
			set
			{
				if (this.entityData.AttndcMark == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.AttndcMark, this.entityData.AttndcMark);
				this.entityData.AttndcMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.AttndcMark, this.entityData.AttndcMark);
				OnPropertyChanged("AttndcMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccumChTot property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAccumChTotNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AccumChTot
		{
			get
			{
				return this.entityData.AccumChTot; 
			}
			
			set
			{
				if (this.entityData.AccumChTot == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.AccumChTot, this.entityData.AccumChTot);
				this.entityData.AccumChTot = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.AccumChTot, this.entityData.AccumChTot);
				OnPropertyChanged("AccumChTot");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccumPointTot property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAccumPointTotNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AccumPointTot
		{
			get
			{
				return this.entityData.AccumPointTot; 
			}
			
			set
			{
				if (this.entityData.AccumPointTot == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.AccumPointTot, this.entityData.AccumPointTot);
				this.entityData.AccumPointTot = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.AccumPointTot, this.entityData.AccumPointTot);
				OnPropertyChanged("AccumPointTot");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResultApproveFlg property. 
		///		اعتماد نتيجة الدور الاول
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsResultApproveFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"اعتماد نتيجة الدور الاول"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ResultApproveFlg
		{
			get
			{
				return this.entityData.ResultApproveFlg; 
			}
			
			set
			{
				if (this.entityData.ResultApproveFlg == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.ResultApproveFlg, this.entityData.ResultApproveFlg);
				this.entityData.ResultApproveFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.ResultApproveFlg, this.entityData.ResultApproveFlg);
				OnPropertyChanged("ResultApproveFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CalcGpaDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCalcGpaDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CalcGpaDate
		{
			get
			{
				return this.entityData.CalcGpaDate; 
			}
			
			set
			{
				if (this.entityData.CalcGpaDate == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.CalcGpaDate, this.entityData.CalcGpaDate);
				this.entityData.CalcGpaDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.CalcGpaDate, this.entityData.CalcGpaDate);
				OnPropertyChanged("CalcGpaDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserCrsApproveId property. 
		///		 اعتماد تسجيل طالب
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserCrsApproveIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@" اعتماد تسجيل طالب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserCrsApproveId
		{
			get
			{
				return this.entityData.SeUserCrsApproveId; 
			}
			
			set
			{
				if (this.entityData.SeUserCrsApproveId == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.SeUserCrsApproveId, this.entityData.SeUserCrsApproveId);
				this.entityData.SeUserCrsApproveId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.SeUserCrsApproveId, this.entityData.SeUserCrsApproveId);
				OnPropertyChanged("SeUserCrsApproveId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MigGpaFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsMigGpaFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? MigGpaFlg
		{
			get
			{
				return this.entityData.MigGpaFlg; 
			}
			
			set
			{
				if (this.entityData.MigGpaFlg == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.MigGpaFlg, this.entityData.MigGpaFlg);
				this.entityData.MigGpaFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.MigGpaFlg, this.entityData.MigGpaFlg);
				OnPropertyChanged("MigGpaFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MajorSemCh property. 
		///		مقررات داخل  خطة الطالب او مقرر مكافيئ لمقرر  فى الخطة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMajorSemChNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مقررات داخل  خطة الطالب او مقرر مكافيئ لمقرر  فى الخطة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MajorSemCh
		{
			get
			{
				return this.entityData.MajorSemCh; 
			}
			
			set
			{
				if (this.entityData.MajorSemCh == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.MajorSemCh, this.entityData.MajorSemCh);
				this.entityData.MajorSemCh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.MajorSemCh, this.entityData.MajorSemCh);
				OnPropertyChanged("MajorSemCh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MajorAccumCh property. 
		///		مقررات داخل  خطة الطالب او مقرر مكافيئ لمقرر  فى الخطة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMajorAccumChNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مقررات داخل  خطة الطالب او مقرر مكافيئ لمقرر  فى الخطة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MajorAccumCh
		{
			get
			{
				return this.entityData.MajorAccumCh; 
			}
			
			set
			{
				if (this.entityData.MajorAccumCh == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.MajorAccumCh, this.entityData.MajorAccumCh);
				this.entityData.MajorAccumCh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.MajorAccumCh, this.entityData.MajorAccumCh);
				OnPropertyChanged("MajorAccumCh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResultApproveMuFlg property. 
		///		اعتماد نتيجة الدور التانى للفصل
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsResultApproveMuFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"اعتماد نتيجة الدور التانى للفصل"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ResultApproveMuFlg
		{
			get
			{
				return this.entityData.ResultApproveMuFlg; 
			}
			
			set
			{
				if (this.entityData.ResultApproveMuFlg == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.ResultApproveMuFlg, this.entityData.ResultApproveMuFlg);
				this.entityData.ResultApproveMuFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.ResultApproveMuFlg, this.entityData.ResultApproveMuFlg);
				OnPropertyChanged("ResultApproveMuFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCdeHonorId property. 
		///		KTCH مرتبو الشرف الفصلية
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCdeHonorIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"KTCH مرتبو الشرف الفصلية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCdeHonorId
		{
			get
			{
				return this.entityData.GsCdeHonorId; 
			}
			
			set
			{
				if (this.entityData.GsCdeHonorId == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.GsCdeHonorId, this.entityData.GsCdeHonorId);
				this.entityData.GsCdeHonorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.GsCdeHonorId, this.entityData.GsCdeHonorId);
				OnPropertyChanged("GsCdeHonorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrecentCoursesLvl property. 
		///		precentage of all courses  which check to pass foundation level /النسبة الكليه التى حصل عليها الطالب فى المقررات لمقارنتها بنسبة معينة للالتحاق بعام تمهيدى جديد / CAT univ
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPrecentCoursesLvlNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"precentage of all courses  which check to pass foundation level /النسبة الكليه التى حصل عليها الطالب فى المقررات لمقارنتها بنسبة معينة للالتحاق بعام تمهيدى جديد / CAT univ"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PrecentCoursesLvl
		{
			get
			{
				return this.entityData.PrecentCoursesLvl; 
			}
			
			set
			{
				if (this.entityData.PrecentCoursesLvl == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.PrecentCoursesLvl, this.entityData.PrecentCoursesLvl);
				this.entityData.PrecentCoursesLvl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.PrecentCoursesLvl, this.entityData.PrecentCoursesLvl);
				OnPropertyChanged("PrecentCoursesLvl");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeFormId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeFormIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeFormId
		{
			get
			{
				return this.entityData.SeFormId; 
			}
			
			set
			{
				if (this.entityData.SeFormId == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.SeFormId, this.entityData.SeFormId);
				this.entityData.SeFormId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.SeFormId, this.entityData.SeFormId);
				OnPropertyChanged("SeFormId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransferFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsTransferFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? TransferFlg
		{
			get
			{
				return this.entityData.TransferFlg; 
			}
			
			set
			{
				if (this.entityData.TransferFlg == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.TransferFlg, this.entityData.TransferFlg);
				this.entityData.TransferFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.TransferFlg, this.entityData.TransferFlg);
				OnPropertyChanged("TransferFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCdeStudTypeId property. 
		///		burimi
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsEdCdeStudTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"burimi"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? EdCdeStudTypeId
		{
			get
			{
				return this.entityData.EdCdeStudTypeId; 
			}
			
			set
			{
				if (this.entityData.EdCdeStudTypeId == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.EdCdeStudTypeId, this.entityData.EdCdeStudTypeId);
				this.entityData.EdCdeStudTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.EdCdeStudTypeId, this.entityData.EdCdeStudTypeId);
				OnPropertyChanged("EdCdeStudTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Ugpa property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsUgpaNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Ugpa
		{
			get
			{
				return this.entityData.Ugpa; 
			}
			
			set
			{
				if (this.entityData.Ugpa == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.Ugpa, this.entityData.Ugpa);
				this.entityData.Ugpa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.Ugpa, this.entityData.Ugpa);
				OnPropertyChanged("Ugpa");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Ucgpa property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsUcgpaNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Ucgpa
		{
			get
			{
				return this.entityData.Ucgpa; 
			}
			
			set
			{
				if (this.entityData.Ucgpa == value)
					return;
					
				OnColumnChanging(EdStudSemesterColumn.Ucgpa, this.entityData.Ucgpa);
				this.entityData.Ucgpa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudSemesterColumn.Ucgpa, this.entityData.Ucgpa);
				OnPropertyChanged("Ucgpa");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return entityData.AsCodeDegreeIdSource; }
            set { entityData.AsCodeDegreeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeAcadWarnType"/>.
		/// </summary>
		/// <value>The source EdCdeAcadWarnType for EdCdeAcadWarnTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCdeAcadWarnType EdCdeAcadWarnTypeIdSource
      	{
            get { return entityData.EdCdeAcadWarnTypeIdSource; }
            set { entityData.EdCdeAcadWarnTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeExamType"/>.
		/// </summary>
		/// <value>The source EdCdeExamType for EdCdeExamTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCdeExamType EdCdeExamTypeIdSource
      	{
            get { return entityData.EdCdeExamTypeIdSource; }
            set { entityData.EdCdeExamTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeStudType"/>.
		/// </summary>
		/// <value>The source EdCdeStudType for EdCdeStudTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCdeStudType EdCdeStudTypeIdSource
      	{
            get { return entityData.EdCdeStudTypeIdSource; }
            set { entityData.EdCdeStudTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeEnrollType"/>.
		/// </summary>
		/// <value>The source EdCodeEnrollType for EdCodeEnrollTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeEnrollType EdCodeEnrollTypeIdSource
      	{
            get { return entityData.EdCodeEnrollTypeIdSource; }
            set { entityData.EdCodeEnrollTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeLevel EdCodeLevelIdSource
      	{
            get { return entityData.EdCodeLevelIdSource; }
            set { entityData.EdCodeLevelIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLoadType"/>.
		/// </summary>
		/// <value>The source EdCodeLoadType for EdCodeLoadTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeLoadType EdCodeLoadTypeIdSource
      	{
            get { return entityData.EdCodeLoadTypeIdSource; }
            set { entityData.EdCodeLoadTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeFacultyRule"/>.
		/// </summary>
		/// <value>The source FeeFacultyRule for FeeFacultyRuleId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeFacultyRule FeeFacultyRuleIdSource
      	{
            get { return entityData.FeeFacultyRuleIdSource; }
            set { entityData.FeeFacultyRuleIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCdeHonor"/>.
		/// </summary>
		/// <value>The source GsCdeHonor for GsCdeHonorId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCdeHonor GsCdeHonorIdSource
      	{
            get { return entityData.GsCdeHonorIdSource; }
            set { entityData.GsCdeHonorIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EdStudCheat objects
		///	which are related to this object through the relation FK_ED_STUD_CHEAT_ED_STUD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCheat> EdStudCheatCollection
		{
			get { return entityData.EdStudCheatCollection; }
			set { entityData.EdStudCheatCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudIntTransPref objects
		///	which are related to this object through the relation FK_ED_STUD_IntTrans_PREF_ED_STUD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudIntTransPref> EdStudIntTransPrefCollection
		{
			get { return entityData.EdStudIntTransPrefCollection; }
			set { entityData.EdStudIntTransPrefCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudActvtyReg objects
		///	which are related to this object through the relation FK_ED_STUD_ACTVTY_REG_ED_STUD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudActvtyReg> EdStudActvtyRegCollection
		{
			get { return entityData.EdStudActvtyRegCollection; }
			set { entityData.EdStudActvtyRegCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudBranchPref objects
		///	which are related to this object through the relation FK_ED_STUD_BRANCH_PREF_ED_STUD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudBranchPref> EdStudBranchPrefCollection
		{
			get { return entityData.EdStudBranchPrefCollection; }
			set { entityData.EdStudBranchPrefCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdExamStudAbsence objects
		///	which are related to this object through the relation FK_ED_EXAM_STUD_ABSENCE_ED_STUD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdExamStudAbsence> EdExamStudAbsenceCollection
		{
			get { return entityData.EdExamStudAbsenceCollection; }
			set { entityData.EdExamStudAbsenceCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudEnrollChange objects
		///	which are related to this object through the relation FK_ED_STUD_ENROLL_CHANGE_ED_STUD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudEnrollChange> EdStudEnrollChangeCollection
		{
			get { return entityData.EdStudEnrollChangeCollection; }
			set { entityData.EdStudEnrollChangeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudSemesterExt objects
		///	which are related to this object through the relation FK_ED_STUD_SEMESTER_EXT_ED_STUD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudSemesterExt> EdStudSemesterExtCollection
		{
			get { return entityData.EdStudSemesterExtCollection; }
			set { entityData.EdStudSemesterExtCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudCourseReg objects
		///	which are related to this object through the relation FK_ED_STUD_COURSE_REG_ED_STUD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCourseReg> EdStudCourseRegCollection
		{
			get { return entityData.EdStudCourseRegCollection; }
			set { entityData.EdStudCourseRegCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudCourseRplc objects
		///	which are related to this object through the relation FK_ED_STUD_COURSE_RPLC_ED_STUD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCourseRplc> EdStudCourseRplcCollection
		{
			get { return entityData.EdStudCourseRplcCollection; }
			set { entityData.EdStudCourseRplcCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CoStudSecretNum objects
		///	which are related to this object through the relation FK_CO_STUD_SECRET_NUM_ED_STUD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoStudSecretNum> CoStudSecretNumCollection
		{
			get { return entityData.CoStudSecretNumCollection; }
			set { entityData.CoStudSecretNumCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStdExamSemester objects
		///	which are related to this object through the relation FK_ED_STD_EXAM_SEMESTER_ED_STUD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStdExamSemester> EdStdExamSemesterCollection
		{
			get { return entityData.EdStdExamSemesterCollection; }
			set { entityData.EdStdExamSemesterCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of MltStudBhvrAttndc objects
		///	which are related to this object through the relation FK_MLT_STUD_BHVR_ATTNDC_ED_STUD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<MltStudBhvrAttndc> MltStudBhvrAttndcCollection
		{
			get { return entityData.MltStudBhvrAttndcCollection; }
			set { entityData.MltStudBhvrAttndcCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudState objects
		///	which are related to this object through the relation FK_ED_STUD_STATE_ED_STUD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudState> EdStudStateCollection
		{
			get { return entityData.EdStudStateCollection; }
			set { entityData.EdStudStateCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CoStudCheat objects
		///	which are related to this object through the relation FK_CO_STUD_CHEAT_ED_STUD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoStudCheat> CoStudCheatCollection
		{
			get { return entityData.CoStudCheatCollection; }
			set { entityData.CoStudCheatCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudExcuse objects
		///	which are related to this object through the relation FK_ED_STUD_EXCUSE_ED_STUD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudExcuse> EdStudExcuseCollection
		{
			get { return entityData.EdStudExcuseCollection; }
			set { entityData.EdStudExcuseCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudClrncReq objects
		///	which are related to this object through the relation FK_ED_STUD_CLRNC_REQ_ED_STUD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudClrncReq> EdStudClrncReqCollection
		{
			get { return entityData.EdStudClrncReqCollection; }
			set { entityData.EdStudClrncReqCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudStateTemp objects
		///	which are related to this object through the relation FK_ED_STUD_STATE_TEMP_ED_STUD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudStateTemp> EdStudStateTempCollection
		{
			get { return entityData.EdStudStateTempCollection; }
			set { entityData.EdStudStateTempCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdResidencyStud objects
		///	which are related to this object through the relation FK_ED_RESIDENCY_STUD_ED_STUD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdResidencyStud> EdResidencyStudCollection
		{
			get { return entityData.EdResidencyStudCollection; }
			set { entityData.EdResidencyStudCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudGroup objects
		///	which are related to this object through the relation FK_ED_STUD_GROUP_ED_STUD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudGroup> EdStudGroupCollection
		{
			get { return entityData.EdStudGroupCollection; }
			set { entityData.EdStudGroupCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CoExamPlaceStud objects
		///	which are related to this object through the relation FK_CO_EXAM_COMM_STUD_ED_STUD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoExamPlaceStud> CoExamPlaceStudCollection
		{
			get { return entityData.CoExamPlaceStudCollection; }
			set { entityData.CoExamPlaceStudCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudCourseRegTemp objects
		///	which are related to this object through the relation FK_ED_STUD_COURSE_REG_TEMP_ED_STUD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCourseRegTemp> EdStudCourseRegTempCollection
		{
			get { return entityData.EdStudCourseRegTempCollection; }
			set { entityData.EdStudCourseRegTempCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudCourseWait objects
		///	which are related to this object through the relation FK_ED_STUD_COURSE_WAIT_ED_STUD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCourseWait> EdStudCourseWaitCollection
		{
			get { return entityData.EdStudCourseWaitCollection; }
			set { entityData.EdStudCourseWaitCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudCourseChng objects
		///	which are related to this object through the relation FK_ED_STUD_COURSE_CHNG_ED_STUD_SEMESTER
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCourseChng> EdStudCourseChngCollection
		{
			get { return entityData.EdStudCourseChngCollection; }
			set { entityData.EdStudCourseChngCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 300));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_STUD_SEMESTER"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_STUD_SEMESTER_ID", "ED_CODE_SEMESTER_ID", "ED_STUD_ID", "ED_ACAD_YEAR_ID", "AS_FACULTY_INFO_ID", "ED_CODE_LEVEL_ID", "IS_LAST", "ED_CODE_LOAD_TYPE_ID", "ED_CODE_ENROLL_TYPE_ID", "ACCUM_CH", "ACCUM_GPA", "IS_COURSE_APPROVED", "COURSE_APPROVE_DATE", "ACCUM_POINT", "SEM_CH", "SEM_GPA", "SEM_POINT", "IS_CLOSED", "MAJOR_CGPA", "MAJOR_GPA", "ACD_PLN_LOAD_FLG", "ONLINE_FLG", "EXP_FOR_GRAD", "HOLD_FOR_GRAD", "ORIENT_FLG", "NATIONALITY_SIMILARITY_FLG", "FEE_FACULTY_RULE_ID", "STUD_CARD_STKR_FLG", "STUD_CARD_STKR_DATE", "FEE_TOT_AMNT", "FEE_PAY_AMNT", "FEE_REFUND_AMNT", "PAY_FLG", "FREEZE_FLG", "AS_CODE_DEGREE_ID", "ED_CDE_ACAD_WARN_TYPE_ID", "NOTES", "SEM_COUNT", "LST_SEM_IN_YR_FLG", "ED_CDE_EXAM_TYPE_ID", "BHVR_MARK", "ATTNDC_MARK", "ACCUM_CH_TOT", "ACCUM_POINT_TOT", "RESULT_APPROVE_FLG", "CALC_GPA_DATE", "SE_USER_CRS_APPROVE_ID", "MIG_GPA_FLG", "MAJOR_SEM_CH", "MAJOR_ACCUM_CH", "RESULT_APPROVE_MU_FLG", "GS_CDE_HONOR_ID", "PRECENT_COURSES_LVL", "SE_FORM_ID", "LAST_DATE", "SE_USER_ID", "Transfer_Flg", "ED_CDE_STUD_TYPE_ID", "UGPA", "UCGPA"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdStudSemesterEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdStudSemester) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdStudSemester>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdStudSemester);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdStudSemester Entity 
		///</summary>
		protected virtual EdStudSemester Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdStudSemester copy = new EdStudSemester();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdStudSemesterId = this.EdStudSemesterId;
					copy.OriginalEdStudSemesterId = this.OriginalEdStudSemesterId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.EdStudId = this.EdStudId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.EdCodeLevelId = this.EdCodeLevelId;
				copy.IsLast = this.IsLast;
				copy.EdCodeLoadTypeId = this.EdCodeLoadTypeId;
				copy.EdCodeEnrollTypeId = this.EdCodeEnrollTypeId;
				copy.AccumCh = this.AccumCh;
				copy.AccumGpa = this.AccumGpa;
				copy.IsCourseApproved = this.IsCourseApproved;
				copy.CourseApproveDate = this.CourseApproveDate;
				copy.AccumPoint = this.AccumPoint;
				copy.SemCh = this.SemCh;
				copy.SemGpa = this.SemGpa;
				copy.SemPoint = this.SemPoint;
				copy.IsClosed = this.IsClosed;
				copy.MajorCgpa = this.MajorCgpa;
				copy.MajorGpa = this.MajorGpa;
				copy.AcdPlnLoadFlg = this.AcdPlnLoadFlg;
				copy.OnlineFlg = this.OnlineFlg;
				copy.ExpForGrad = this.ExpForGrad;
				copy.HoldForGrad = this.HoldForGrad;
				copy.OrientFlg = this.OrientFlg;
				copy.NationalitySimilarityFlg = this.NationalitySimilarityFlg;
				copy.FeeFacultyRuleId = this.FeeFacultyRuleId;
				copy.StudCardStkrFlg = this.StudCardStkrFlg;
				copy.StudCardStkrDate = this.StudCardStkrDate;
				copy.FeeTotAmnt = this.FeeTotAmnt;
				copy.FeePayAmnt = this.FeePayAmnt;
				copy.FeeRefundAmnt = this.FeeRefundAmnt;
				copy.PayFlg = this.PayFlg;
				copy.FreezeFlg = this.FreezeFlg;
				copy.AsCodeDegreeId = this.AsCodeDegreeId;
				copy.EdCdeAcadWarnTypeId = this.EdCdeAcadWarnTypeId;
				copy.Notes = this.Notes;
				copy.SemCount = this.SemCount;
				copy.LstSemInYrFlg = this.LstSemInYrFlg;
				copy.EdCdeExamTypeId = this.EdCdeExamTypeId;
				copy.BhvrMark = this.BhvrMark;
				copy.AttndcMark = this.AttndcMark;
				copy.AccumChTot = this.AccumChTot;
				copy.AccumPointTot = this.AccumPointTot;
				copy.ResultApproveFlg = this.ResultApproveFlg;
				copy.CalcGpaDate = this.CalcGpaDate;
				copy.SeUserCrsApproveId = this.SeUserCrsApproveId;
				copy.MigGpaFlg = this.MigGpaFlg;
				copy.MajorSemCh = this.MajorSemCh;
				copy.MajorAccumCh = this.MajorAccumCh;
				copy.ResultApproveMuFlg = this.ResultApproveMuFlg;
				copy.GsCdeHonorId = this.GsCdeHonorId;
				copy.PrecentCoursesLvl = this.PrecentCoursesLvl;
				copy.SeFormId = this.SeFormId;
				copy.LastDate = this.LastDate;
				copy.SeUserId = this.SeUserId;
				copy.TransferFlg = this.TransferFlg;
				copy.EdCdeStudTypeId = this.EdCdeStudTypeId;
				copy.Ugpa = this.Ugpa;
				copy.Ucgpa = this.Ucgpa;
			
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				copy.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				copy.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCdeAcadWarnTypeIdSource != null && existingCopies.Contains(this.EdCdeAcadWarnTypeIdSource))
				copy.EdCdeAcadWarnTypeIdSource = existingCopies[this.EdCdeAcadWarnTypeIdSource] as EdCdeAcadWarnType;
			else
				copy.EdCdeAcadWarnTypeIdSource = MakeCopyOf(this.EdCdeAcadWarnTypeIdSource, existingCopies) as EdCdeAcadWarnType;
			if (this.EdCdeExamTypeIdSource != null && existingCopies.Contains(this.EdCdeExamTypeIdSource))
				copy.EdCdeExamTypeIdSource = existingCopies[this.EdCdeExamTypeIdSource] as EdCdeExamType;
			else
				copy.EdCdeExamTypeIdSource = MakeCopyOf(this.EdCdeExamTypeIdSource, existingCopies) as EdCdeExamType;
			if (this.EdCdeStudTypeIdSource != null && existingCopies.Contains(this.EdCdeStudTypeIdSource))
				copy.EdCdeStudTypeIdSource = existingCopies[this.EdCdeStudTypeIdSource] as EdCdeStudType;
			else
				copy.EdCdeStudTypeIdSource = MakeCopyOf(this.EdCdeStudTypeIdSource, existingCopies) as EdCdeStudType;
			if (this.EdCodeEnrollTypeIdSource != null && existingCopies.Contains(this.EdCodeEnrollTypeIdSource))
				copy.EdCodeEnrollTypeIdSource = existingCopies[this.EdCodeEnrollTypeIdSource] as EdCodeEnrollType;
			else
				copy.EdCodeEnrollTypeIdSource = MakeCopyOf(this.EdCodeEnrollTypeIdSource, existingCopies) as EdCodeEnrollType;
			if (this.EdCodeLevelIdSource != null && existingCopies.Contains(this.EdCodeLevelIdSource))
				copy.EdCodeLevelIdSource = existingCopies[this.EdCodeLevelIdSource] as EdCodeLevel;
			else
				copy.EdCodeLevelIdSource = MakeCopyOf(this.EdCodeLevelIdSource, existingCopies) as EdCodeLevel;
			if (this.EdCodeLoadTypeIdSource != null && existingCopies.Contains(this.EdCodeLoadTypeIdSource))
				copy.EdCodeLoadTypeIdSource = existingCopies[this.EdCodeLoadTypeIdSource] as EdCodeLoadType;
			else
				copy.EdCodeLoadTypeIdSource = MakeCopyOf(this.EdCodeLoadTypeIdSource, existingCopies) as EdCodeLoadType;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.FeeFacultyRuleIdSource != null && existingCopies.Contains(this.FeeFacultyRuleIdSource))
				copy.FeeFacultyRuleIdSource = existingCopies[this.FeeFacultyRuleIdSource] as FeeFacultyRule;
			else
				copy.FeeFacultyRuleIdSource = MakeCopyOf(this.FeeFacultyRuleIdSource, existingCopies) as FeeFacultyRule;
			if (this.GsCdeHonorIdSource != null && existingCopies.Contains(this.GsCdeHonorIdSource))
				copy.GsCdeHonorIdSource = existingCopies[this.GsCdeHonorIdSource] as GsCdeHonor;
			else
				copy.GsCdeHonorIdSource = MakeCopyOf(this.GsCdeHonorIdSource, existingCopies) as GsCdeHonor;
		
			//deep copy nested objects
			copy.EdStudCheatCollection = (TList<EdStudCheat>) MakeCopyOf(this.EdStudCheatCollection, existingCopies); 
			copy.EdStudIntTransPrefCollection = (TList<EdStudIntTransPref>) MakeCopyOf(this.EdStudIntTransPrefCollection, existingCopies); 
			copy.EdStudActvtyRegCollection = (TList<EdStudActvtyReg>) MakeCopyOf(this.EdStudActvtyRegCollection, existingCopies); 
			copy.EdStudBranchPrefCollection = (TList<EdStudBranchPref>) MakeCopyOf(this.EdStudBranchPrefCollection, existingCopies); 
			copy.EdExamStudAbsenceCollection = (TList<EdExamStudAbsence>) MakeCopyOf(this.EdExamStudAbsenceCollection, existingCopies); 
			copy.EdStudEnrollChangeCollection = (TList<EdStudEnrollChange>) MakeCopyOf(this.EdStudEnrollChangeCollection, existingCopies); 
			copy.EdStudSemesterExtCollection = (TList<EdStudSemesterExt>) MakeCopyOf(this.EdStudSemesterExtCollection, existingCopies); 
			copy.EdStudCourseRegCollection = (TList<EdStudCourseReg>) MakeCopyOf(this.EdStudCourseRegCollection, existingCopies); 
			copy.EdStudCourseRplcCollection = (TList<EdStudCourseRplc>) MakeCopyOf(this.EdStudCourseRplcCollection, existingCopies); 
			copy.CoStudSecretNumCollection = (TList<CoStudSecretNum>) MakeCopyOf(this.CoStudSecretNumCollection, existingCopies); 
			copy.EdStdExamSemesterCollection = (TList<EdStdExamSemester>) MakeCopyOf(this.EdStdExamSemesterCollection, existingCopies); 
			copy.MltStudBhvrAttndcCollection = (TList<MltStudBhvrAttndc>) MakeCopyOf(this.MltStudBhvrAttndcCollection, existingCopies); 
			copy.EdStudStateCollection = (TList<EdStudState>) MakeCopyOf(this.EdStudStateCollection, existingCopies); 
			copy.CoStudCheatCollection = (TList<CoStudCheat>) MakeCopyOf(this.CoStudCheatCollection, existingCopies); 
			copy.EdStudExcuseCollection = (TList<EdStudExcuse>) MakeCopyOf(this.EdStudExcuseCollection, existingCopies); 
			copy.EdStudClrncReqCollection = (TList<EdStudClrncReq>) MakeCopyOf(this.EdStudClrncReqCollection, existingCopies); 
			copy.EdStudStateTempCollection = (TList<EdStudStateTemp>) MakeCopyOf(this.EdStudStateTempCollection, existingCopies); 
			copy.EdResidencyStudCollection = (TList<EdResidencyStud>) MakeCopyOf(this.EdResidencyStudCollection, existingCopies); 
			copy.EdStudGroupCollection = (TList<EdStudGroup>) MakeCopyOf(this.EdStudGroupCollection, existingCopies); 
			copy.CoExamPlaceStudCollection = (TList<CoExamPlaceStud>) MakeCopyOf(this.CoExamPlaceStudCollection, existingCopies); 
			copy.EdStudCourseRegTempCollection = (TList<EdStudCourseRegTemp>) MakeCopyOf(this.EdStudCourseRegTempCollection, existingCopies); 
			copy.EdStudCourseWaitCollection = (TList<EdStudCourseWait>) MakeCopyOf(this.EdStudCourseWaitCollection, existingCopies); 
			copy.EdStudCourseChngCollection = (TList<EdStudCourseChng>) MakeCopyOf(this.EdStudCourseChngCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdStudSemester Entity 
		///</summary>
		public virtual EdStudSemester Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdStudSemester Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdStudSemester DeepCopy()
		{
			return EntityHelper.Clone<EdStudSemester>(this as EdStudSemester);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdStudSemesterEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdStudSemesterEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdStudSemesterEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdStudSemesterColumn column)
		{
			switch(column)
			{
					case EdStudSemesterColumn.EdStudSemesterId:
					return entityData.EdStudSemesterId != _originalData.EdStudSemesterId;
					case EdStudSemesterColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case EdStudSemesterColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case EdStudSemesterColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case EdStudSemesterColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case EdStudSemesterColumn.EdCodeLevelId:
					return entityData.EdCodeLevelId != _originalData.EdCodeLevelId;
					case EdStudSemesterColumn.IsLast:
					return entityData.IsLast != _originalData.IsLast;
					case EdStudSemesterColumn.EdCodeLoadTypeId:
					return entityData.EdCodeLoadTypeId != _originalData.EdCodeLoadTypeId;
					case EdStudSemesterColumn.EdCodeEnrollTypeId:
					return entityData.EdCodeEnrollTypeId != _originalData.EdCodeEnrollTypeId;
					case EdStudSemesterColumn.AccumCh:
					return entityData.AccumCh != _originalData.AccumCh;
					case EdStudSemesterColumn.AccumGpa:
					return entityData.AccumGpa != _originalData.AccumGpa;
					case EdStudSemesterColumn.IsCourseApproved:
					return entityData.IsCourseApproved != _originalData.IsCourseApproved;
					case EdStudSemesterColumn.CourseApproveDate:
					return entityData.CourseApproveDate != _originalData.CourseApproveDate;
					case EdStudSemesterColumn.AccumPoint:
					return entityData.AccumPoint != _originalData.AccumPoint;
					case EdStudSemesterColumn.SemCh:
					return entityData.SemCh != _originalData.SemCh;
					case EdStudSemesterColumn.SemGpa:
					return entityData.SemGpa != _originalData.SemGpa;
					case EdStudSemesterColumn.SemPoint:
					return entityData.SemPoint != _originalData.SemPoint;
					case EdStudSemesterColumn.IsClosed:
					return entityData.IsClosed != _originalData.IsClosed;
					case EdStudSemesterColumn.MajorCgpa:
					return entityData.MajorCgpa != _originalData.MajorCgpa;
					case EdStudSemesterColumn.MajorGpa:
					return entityData.MajorGpa != _originalData.MajorGpa;
					case EdStudSemesterColumn.AcdPlnLoadFlg:
					return entityData.AcdPlnLoadFlg != _originalData.AcdPlnLoadFlg;
					case EdStudSemesterColumn.OnlineFlg:
					return entityData.OnlineFlg != _originalData.OnlineFlg;
					case EdStudSemesterColumn.ExpForGrad:
					return entityData.ExpForGrad != _originalData.ExpForGrad;
					case EdStudSemesterColumn.HoldForGrad:
					return entityData.HoldForGrad != _originalData.HoldForGrad;
					case EdStudSemesterColumn.OrientFlg:
					return entityData.OrientFlg != _originalData.OrientFlg;
					case EdStudSemesterColumn.NationalitySimilarityFlg:
					return entityData.NationalitySimilarityFlg != _originalData.NationalitySimilarityFlg;
					case EdStudSemesterColumn.FeeFacultyRuleId:
					return entityData.FeeFacultyRuleId != _originalData.FeeFacultyRuleId;
					case EdStudSemesterColumn.StudCardStkrFlg:
					return entityData.StudCardStkrFlg != _originalData.StudCardStkrFlg;
					case EdStudSemesterColumn.StudCardStkrDate:
					return entityData.StudCardStkrDate != _originalData.StudCardStkrDate;
					case EdStudSemesterColumn.FeeTotAmnt:
					return entityData.FeeTotAmnt != _originalData.FeeTotAmnt;
					case EdStudSemesterColumn.FeePayAmnt:
					return entityData.FeePayAmnt != _originalData.FeePayAmnt;
					case EdStudSemesterColumn.FeeRefundAmnt:
					return entityData.FeeRefundAmnt != _originalData.FeeRefundAmnt;
					case EdStudSemesterColumn.PayFlg:
					return entityData.PayFlg != _originalData.PayFlg;
					case EdStudSemesterColumn.FreezeFlg:
					return entityData.FreezeFlg != _originalData.FreezeFlg;
					case EdStudSemesterColumn.AsCodeDegreeId:
					return entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
					case EdStudSemesterColumn.EdCdeAcadWarnTypeId:
					return entityData.EdCdeAcadWarnTypeId != _originalData.EdCdeAcadWarnTypeId;
					case EdStudSemesterColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case EdStudSemesterColumn.SemCount:
					return entityData.SemCount != _originalData.SemCount;
					case EdStudSemesterColumn.LstSemInYrFlg:
					return entityData.LstSemInYrFlg != _originalData.LstSemInYrFlg;
					case EdStudSemesterColumn.EdCdeExamTypeId:
					return entityData.EdCdeExamTypeId != _originalData.EdCdeExamTypeId;
					case EdStudSemesterColumn.BhvrMark:
					return entityData.BhvrMark != _originalData.BhvrMark;
					case EdStudSemesterColumn.AttndcMark:
					return entityData.AttndcMark != _originalData.AttndcMark;
					case EdStudSemesterColumn.AccumChTot:
					return entityData.AccumChTot != _originalData.AccumChTot;
					case EdStudSemesterColumn.AccumPointTot:
					return entityData.AccumPointTot != _originalData.AccumPointTot;
					case EdStudSemesterColumn.ResultApproveFlg:
					return entityData.ResultApproveFlg != _originalData.ResultApproveFlg;
					case EdStudSemesterColumn.CalcGpaDate:
					return entityData.CalcGpaDate != _originalData.CalcGpaDate;
					case EdStudSemesterColumn.SeUserCrsApproveId:
					return entityData.SeUserCrsApproveId != _originalData.SeUserCrsApproveId;
					case EdStudSemesterColumn.MigGpaFlg:
					return entityData.MigGpaFlg != _originalData.MigGpaFlg;
					case EdStudSemesterColumn.MajorSemCh:
					return entityData.MajorSemCh != _originalData.MajorSemCh;
					case EdStudSemesterColumn.MajorAccumCh:
					return entityData.MajorAccumCh != _originalData.MajorAccumCh;
					case EdStudSemesterColumn.ResultApproveMuFlg:
					return entityData.ResultApproveMuFlg != _originalData.ResultApproveMuFlg;
					case EdStudSemesterColumn.GsCdeHonorId:
					return entityData.GsCdeHonorId != _originalData.GsCdeHonorId;
					case EdStudSemesterColumn.PrecentCoursesLvl:
					return entityData.PrecentCoursesLvl != _originalData.PrecentCoursesLvl;
					case EdStudSemesterColumn.SeFormId:
					return entityData.SeFormId != _originalData.SeFormId;
					case EdStudSemesterColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case EdStudSemesterColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case EdStudSemesterColumn.TransferFlg:
					return entityData.TransferFlg != _originalData.TransferFlg;
					case EdStudSemesterColumn.EdCdeStudTypeId:
					return entityData.EdCdeStudTypeId != _originalData.EdCdeStudTypeId;
					case EdStudSemesterColumn.Ugpa:
					return entityData.Ugpa != _originalData.Ugpa;
					case EdStudSemesterColumn.Ucgpa:
					return entityData.Ucgpa != _originalData.Ucgpa;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdStudSemesterColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdStudSemesterId != _originalData.EdStudSemesterId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.EdCodeLevelId != _originalData.EdCodeLevelId;
			result = result || entityData.IsLast != _originalData.IsLast;
			result = result || entityData.EdCodeLoadTypeId != _originalData.EdCodeLoadTypeId;
			result = result || entityData.EdCodeEnrollTypeId != _originalData.EdCodeEnrollTypeId;
			result = result || entityData.AccumCh != _originalData.AccumCh;
			result = result || entityData.AccumGpa != _originalData.AccumGpa;
			result = result || entityData.IsCourseApproved != _originalData.IsCourseApproved;
			result = result || entityData.CourseApproveDate != _originalData.CourseApproveDate;
			result = result || entityData.AccumPoint != _originalData.AccumPoint;
			result = result || entityData.SemCh != _originalData.SemCh;
			result = result || entityData.SemGpa != _originalData.SemGpa;
			result = result || entityData.SemPoint != _originalData.SemPoint;
			result = result || entityData.IsClosed != _originalData.IsClosed;
			result = result || entityData.MajorCgpa != _originalData.MajorCgpa;
			result = result || entityData.MajorGpa != _originalData.MajorGpa;
			result = result || entityData.AcdPlnLoadFlg != _originalData.AcdPlnLoadFlg;
			result = result || entityData.OnlineFlg != _originalData.OnlineFlg;
			result = result || entityData.ExpForGrad != _originalData.ExpForGrad;
			result = result || entityData.HoldForGrad != _originalData.HoldForGrad;
			result = result || entityData.OrientFlg != _originalData.OrientFlg;
			result = result || entityData.NationalitySimilarityFlg != _originalData.NationalitySimilarityFlg;
			result = result || entityData.FeeFacultyRuleId != _originalData.FeeFacultyRuleId;
			result = result || entityData.StudCardStkrFlg != _originalData.StudCardStkrFlg;
			result = result || entityData.StudCardStkrDate != _originalData.StudCardStkrDate;
			result = result || entityData.FeeTotAmnt != _originalData.FeeTotAmnt;
			result = result || entityData.FeePayAmnt != _originalData.FeePayAmnt;
			result = result || entityData.FeeRefundAmnt != _originalData.FeeRefundAmnt;
			result = result || entityData.PayFlg != _originalData.PayFlg;
			result = result || entityData.FreezeFlg != _originalData.FreezeFlg;
			result = result || entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
			result = result || entityData.EdCdeAcadWarnTypeId != _originalData.EdCdeAcadWarnTypeId;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.SemCount != _originalData.SemCount;
			result = result || entityData.LstSemInYrFlg != _originalData.LstSemInYrFlg;
			result = result || entityData.EdCdeExamTypeId != _originalData.EdCdeExamTypeId;
			result = result || entityData.BhvrMark != _originalData.BhvrMark;
			result = result || entityData.AttndcMark != _originalData.AttndcMark;
			result = result || entityData.AccumChTot != _originalData.AccumChTot;
			result = result || entityData.AccumPointTot != _originalData.AccumPointTot;
			result = result || entityData.ResultApproveFlg != _originalData.ResultApproveFlg;
			result = result || entityData.CalcGpaDate != _originalData.CalcGpaDate;
			result = result || entityData.SeUserCrsApproveId != _originalData.SeUserCrsApproveId;
			result = result || entityData.MigGpaFlg != _originalData.MigGpaFlg;
			result = result || entityData.MajorSemCh != _originalData.MajorSemCh;
			result = result || entityData.MajorAccumCh != _originalData.MajorAccumCh;
			result = result || entityData.ResultApproveMuFlg != _originalData.ResultApproveMuFlg;
			result = result || entityData.GsCdeHonorId != _originalData.GsCdeHonorId;
			result = result || entityData.PrecentCoursesLvl != _originalData.PrecentCoursesLvl;
			result = result || entityData.SeFormId != _originalData.SeFormId;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.TransferFlg != _originalData.TransferFlg;
			result = result || entityData.EdCdeStudTypeId != _originalData.EdCdeStudTypeId;
			result = result || entityData.Ugpa != _originalData.Ugpa;
			result = result || entityData.Ucgpa != _originalData.Ucgpa;
			return result;
		}	
		
		///<summary>
		///  Returns a EdStudSemester Entity with the original data.
		///</summary>
		public EdStudSemester GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdStudSemester(
				_originalData.EdStudSemesterId,
				_originalData.EdCodeSemesterId,
				_originalData.EdStudId,
				_originalData.EdAcadYearId,
				_originalData.AsFacultyInfoId,
				_originalData.EdCodeLevelId,
				_originalData.IsLast,
				_originalData.EdCodeLoadTypeId,
				_originalData.EdCodeEnrollTypeId,
				_originalData.AccumCh,
				_originalData.AccumGpa,
				_originalData.IsCourseApproved,
				_originalData.CourseApproveDate,
				_originalData.AccumPoint,
				_originalData.SemCh,
				_originalData.SemGpa,
				_originalData.SemPoint,
				_originalData.IsClosed,
				_originalData.MajorCgpa,
				_originalData.MajorGpa,
				_originalData.AcdPlnLoadFlg,
				_originalData.OnlineFlg,
				_originalData.ExpForGrad,
				_originalData.HoldForGrad,
				_originalData.OrientFlg,
				_originalData.NationalitySimilarityFlg,
				_originalData.FeeFacultyRuleId,
				_originalData.StudCardStkrFlg,
				_originalData.StudCardStkrDate,
				_originalData.FeeTotAmnt,
				_originalData.FeePayAmnt,
				_originalData.FeeRefundAmnt,
				_originalData.PayFlg,
				_originalData.FreezeFlg,
				_originalData.AsCodeDegreeId,
				_originalData.EdCdeAcadWarnTypeId,
				_originalData.Notes,
				_originalData.SemCount,
				_originalData.LstSemInYrFlg,
				_originalData.EdCdeExamTypeId,
				_originalData.BhvrMark,
				_originalData.AttndcMark,
				_originalData.AccumChTot,
				_originalData.AccumPointTot,
				_originalData.ResultApproveFlg,
				_originalData.CalcGpaDate,
				_originalData.SeUserCrsApproveId,
				_originalData.MigGpaFlg,
				_originalData.MajorSemCh,
				_originalData.MajorAccumCh,
				_originalData.ResultApproveMuFlg,
				_originalData.GsCdeHonorId,
				_originalData.PrecentCoursesLvl,
				_originalData.SeFormId,
				_originalData.LastDate,
				_originalData.SeUserId,
				_originalData.TransferFlg,
				_originalData.EdCdeStudTypeId,
				_originalData.Ugpa,
				_originalData.Ucgpa
				);
				
			return (EdStudSemester)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdStudSemesterBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdStudSemesterBase)
				return ValueEquals(this, (EdStudSemesterBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdStudSemesterBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdStudSemesterId.GetHashCode() ^ 
					this.EdCodeSemesterId.GetHashCode() ^ 
					this.EdStudId.GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					((this.EdCodeLevelId == null) ? string.Empty : this.EdCodeLevelId.ToString()).GetHashCode() ^ 
					this.IsLast.GetHashCode() ^ 
					((this.EdCodeLoadTypeId == null) ? string.Empty : this.EdCodeLoadTypeId.ToString()).GetHashCode() ^ 
					((this.EdCodeEnrollTypeId == null) ? string.Empty : this.EdCodeEnrollTypeId.ToString()).GetHashCode() ^ 
					((this.AccumCh == null) ? string.Empty : this.AccumCh.ToString()).GetHashCode() ^ 
					((this.AccumGpa == null) ? string.Empty : this.AccumGpa.ToString()).GetHashCode() ^ 
					this.IsCourseApproved.GetHashCode() ^ 
					((this.CourseApproveDate == null) ? string.Empty : this.CourseApproveDate.ToString()).GetHashCode() ^ 
					((this.AccumPoint == null) ? string.Empty : this.AccumPoint.ToString()).GetHashCode() ^ 
					((this.SemCh == null) ? string.Empty : this.SemCh.ToString()).GetHashCode() ^ 
					((this.SemGpa == null) ? string.Empty : this.SemGpa.ToString()).GetHashCode() ^ 
					((this.SemPoint == null) ? string.Empty : this.SemPoint.ToString()).GetHashCode() ^ 
					this.IsClosed.GetHashCode() ^ 
					((this.MajorCgpa == null) ? string.Empty : this.MajorCgpa.ToString()).GetHashCode() ^ 
					((this.MajorGpa == null) ? string.Empty : this.MajorGpa.ToString()).GetHashCode() ^ 
					((this.AcdPlnLoadFlg == null) ? string.Empty : this.AcdPlnLoadFlg.ToString()).GetHashCode() ^ 
					((this.OnlineFlg == null) ? string.Empty : this.OnlineFlg.ToString()).GetHashCode() ^ 
					((this.ExpForGrad == null) ? string.Empty : this.ExpForGrad.ToString()).GetHashCode() ^ 
					((this.HoldForGrad == null) ? string.Empty : this.HoldForGrad.ToString()).GetHashCode() ^ 
					((this.OrientFlg == null) ? string.Empty : this.OrientFlg.ToString()).GetHashCode() ^ 
					((this.NationalitySimilarityFlg == null) ? string.Empty : this.NationalitySimilarityFlg.ToString()).GetHashCode() ^ 
					((this.FeeFacultyRuleId == null) ? string.Empty : this.FeeFacultyRuleId.ToString()).GetHashCode() ^ 
					((this.StudCardStkrFlg == null) ? string.Empty : this.StudCardStkrFlg.ToString()).GetHashCode() ^ 
					((this.StudCardStkrDate == null) ? string.Empty : this.StudCardStkrDate.ToString()).GetHashCode() ^ 
					((this.FeeTotAmnt == null) ? string.Empty : this.FeeTotAmnt.ToString()).GetHashCode() ^ 
					((this.FeePayAmnt == null) ? string.Empty : this.FeePayAmnt.ToString()).GetHashCode() ^ 
					((this.FeeRefundAmnt == null) ? string.Empty : this.FeeRefundAmnt.ToString()).GetHashCode() ^ 
					this.PayFlg.GetHashCode() ^ 
					this.FreezeFlg.GetHashCode() ^ 
					((this.AsCodeDegreeId == null) ? string.Empty : this.AsCodeDegreeId.ToString()).GetHashCode() ^ 
					((this.EdCdeAcadWarnTypeId == null) ? string.Empty : this.EdCdeAcadWarnTypeId.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.SemCount == null) ? string.Empty : this.SemCount.ToString()).GetHashCode() ^ 
					((this.LstSemInYrFlg == null) ? string.Empty : this.LstSemInYrFlg.ToString()).GetHashCode() ^ 
					((this.EdCdeExamTypeId == null) ? string.Empty : this.EdCdeExamTypeId.ToString()).GetHashCode() ^ 
					((this.BhvrMark == null) ? string.Empty : this.BhvrMark.ToString()).GetHashCode() ^ 
					((this.AttndcMark == null) ? string.Empty : this.AttndcMark.ToString()).GetHashCode() ^ 
					((this.AccumChTot == null) ? string.Empty : this.AccumChTot.ToString()).GetHashCode() ^ 
					((this.AccumPointTot == null) ? string.Empty : this.AccumPointTot.ToString()).GetHashCode() ^ 
					((this.ResultApproveFlg == null) ? string.Empty : this.ResultApproveFlg.ToString()).GetHashCode() ^ 
					((this.CalcGpaDate == null) ? string.Empty : this.CalcGpaDate.ToString()).GetHashCode() ^ 
					((this.SeUserCrsApproveId == null) ? string.Empty : this.SeUserCrsApproveId.ToString()).GetHashCode() ^ 
					((this.MigGpaFlg == null) ? string.Empty : this.MigGpaFlg.ToString()).GetHashCode() ^ 
					((this.MajorSemCh == null) ? string.Empty : this.MajorSemCh.ToString()).GetHashCode() ^ 
					((this.MajorAccumCh == null) ? string.Empty : this.MajorAccumCh.ToString()).GetHashCode() ^ 
					((this.ResultApproveMuFlg == null) ? string.Empty : this.ResultApproveMuFlg.ToString()).GetHashCode() ^ 
					((this.GsCdeHonorId == null) ? string.Empty : this.GsCdeHonorId.ToString()).GetHashCode() ^ 
					((this.PrecentCoursesLvl == null) ? string.Empty : this.PrecentCoursesLvl.ToString()).GetHashCode() ^ 
					((this.SeFormId == null) ? string.Empty : this.SeFormId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.TransferFlg == null) ? string.Empty : this.TransferFlg.ToString()).GetHashCode() ^ 
					((this.EdCdeStudTypeId == null) ? string.Empty : this.EdCdeStudTypeId.ToString()).GetHashCode() ^ 
					((this.Ugpa == null) ? string.Empty : this.Ugpa.ToString()).GetHashCode() ^ 
					((this.Ucgpa == null) ? string.Empty : this.Ucgpa.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdStudSemesterBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdStudSemesterBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdStudSemesterBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdStudSemesterBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdStudSemesterBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdStudSemesterBase Object1, EdStudSemesterBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdStudSemesterId != Object2.EdStudSemesterId)
				equal = false;
			if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
				equal = false;
			if (Object1.EdStudId != Object2.EdStudId)
				equal = false;
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeLevelId != null && Object2.EdCodeLevelId != null )
			{
				if (Object1.EdCodeLevelId != Object2.EdCodeLevelId)
					equal = false;
			}
			else if (Object1.EdCodeLevelId == null ^ Object2.EdCodeLevelId == null )
			{
				equal = false;
			}
			if (Object1.IsLast != Object2.IsLast)
				equal = false;
			if ( Object1.EdCodeLoadTypeId != null && Object2.EdCodeLoadTypeId != null )
			{
				if (Object1.EdCodeLoadTypeId != Object2.EdCodeLoadTypeId)
					equal = false;
			}
			else if (Object1.EdCodeLoadTypeId == null ^ Object2.EdCodeLoadTypeId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeEnrollTypeId != null && Object2.EdCodeEnrollTypeId != null )
			{
				if (Object1.EdCodeEnrollTypeId != Object2.EdCodeEnrollTypeId)
					equal = false;
			}
			else if (Object1.EdCodeEnrollTypeId == null ^ Object2.EdCodeEnrollTypeId == null )
			{
				equal = false;
			}
			if ( Object1.AccumCh != null && Object2.AccumCh != null )
			{
				if (Object1.AccumCh != Object2.AccumCh)
					equal = false;
			}
			else if (Object1.AccumCh == null ^ Object2.AccumCh == null )
			{
				equal = false;
			}
			if ( Object1.AccumGpa != null && Object2.AccumGpa != null )
			{
				if (Object1.AccumGpa != Object2.AccumGpa)
					equal = false;
			}
			else if (Object1.AccumGpa == null ^ Object2.AccumGpa == null )
			{
				equal = false;
			}
			if (Object1.IsCourseApproved != Object2.IsCourseApproved)
				equal = false;
			if ( Object1.CourseApproveDate != null && Object2.CourseApproveDate != null )
			{
				if (Object1.CourseApproveDate != Object2.CourseApproveDate)
					equal = false;
			}
			else if (Object1.CourseApproveDate == null ^ Object2.CourseApproveDate == null )
			{
				equal = false;
			}
			if ( Object1.AccumPoint != null && Object2.AccumPoint != null )
			{
				if (Object1.AccumPoint != Object2.AccumPoint)
					equal = false;
			}
			else if (Object1.AccumPoint == null ^ Object2.AccumPoint == null )
			{
				equal = false;
			}
			if ( Object1.SemCh != null && Object2.SemCh != null )
			{
				if (Object1.SemCh != Object2.SemCh)
					equal = false;
			}
			else if (Object1.SemCh == null ^ Object2.SemCh == null )
			{
				equal = false;
			}
			if ( Object1.SemGpa != null && Object2.SemGpa != null )
			{
				if (Object1.SemGpa != Object2.SemGpa)
					equal = false;
			}
			else if (Object1.SemGpa == null ^ Object2.SemGpa == null )
			{
				equal = false;
			}
			if ( Object1.SemPoint != null && Object2.SemPoint != null )
			{
				if (Object1.SemPoint != Object2.SemPoint)
					equal = false;
			}
			else if (Object1.SemPoint == null ^ Object2.SemPoint == null )
			{
				equal = false;
			}
			if (Object1.IsClosed != Object2.IsClosed)
				equal = false;
			if ( Object1.MajorCgpa != null && Object2.MajorCgpa != null )
			{
				if (Object1.MajorCgpa != Object2.MajorCgpa)
					equal = false;
			}
			else if (Object1.MajorCgpa == null ^ Object2.MajorCgpa == null )
			{
				equal = false;
			}
			if ( Object1.MajorGpa != null && Object2.MajorGpa != null )
			{
				if (Object1.MajorGpa != Object2.MajorGpa)
					equal = false;
			}
			else if (Object1.MajorGpa == null ^ Object2.MajorGpa == null )
			{
				equal = false;
			}
			if ( Object1.AcdPlnLoadFlg != null && Object2.AcdPlnLoadFlg != null )
			{
				if (Object1.AcdPlnLoadFlg != Object2.AcdPlnLoadFlg)
					equal = false;
			}
			else if (Object1.AcdPlnLoadFlg == null ^ Object2.AcdPlnLoadFlg == null )
			{
				equal = false;
			}
			if ( Object1.OnlineFlg != null && Object2.OnlineFlg != null )
			{
				if (Object1.OnlineFlg != Object2.OnlineFlg)
					equal = false;
			}
			else if (Object1.OnlineFlg == null ^ Object2.OnlineFlg == null )
			{
				equal = false;
			}
			if ( Object1.ExpForGrad != null && Object2.ExpForGrad != null )
			{
				if (Object1.ExpForGrad != Object2.ExpForGrad)
					equal = false;
			}
			else if (Object1.ExpForGrad == null ^ Object2.ExpForGrad == null )
			{
				equal = false;
			}
			if ( Object1.HoldForGrad != null && Object2.HoldForGrad != null )
			{
				if (Object1.HoldForGrad != Object2.HoldForGrad)
					equal = false;
			}
			else if (Object1.HoldForGrad == null ^ Object2.HoldForGrad == null )
			{
				equal = false;
			}
			if ( Object1.OrientFlg != null && Object2.OrientFlg != null )
			{
				if (Object1.OrientFlg != Object2.OrientFlg)
					equal = false;
			}
			else if (Object1.OrientFlg == null ^ Object2.OrientFlg == null )
			{
				equal = false;
			}
			if ( Object1.NationalitySimilarityFlg != null && Object2.NationalitySimilarityFlg != null )
			{
				if (Object1.NationalitySimilarityFlg != Object2.NationalitySimilarityFlg)
					equal = false;
			}
			else if (Object1.NationalitySimilarityFlg == null ^ Object2.NationalitySimilarityFlg == null )
			{
				equal = false;
			}
			if ( Object1.FeeFacultyRuleId != null && Object2.FeeFacultyRuleId != null )
			{
				if (Object1.FeeFacultyRuleId != Object2.FeeFacultyRuleId)
					equal = false;
			}
			else if (Object1.FeeFacultyRuleId == null ^ Object2.FeeFacultyRuleId == null )
			{
				equal = false;
			}
			if ( Object1.StudCardStkrFlg != null && Object2.StudCardStkrFlg != null )
			{
				if (Object1.StudCardStkrFlg != Object2.StudCardStkrFlg)
					equal = false;
			}
			else if (Object1.StudCardStkrFlg == null ^ Object2.StudCardStkrFlg == null )
			{
				equal = false;
			}
			if ( Object1.StudCardStkrDate != null && Object2.StudCardStkrDate != null )
			{
				if (Object1.StudCardStkrDate != Object2.StudCardStkrDate)
					equal = false;
			}
			else if (Object1.StudCardStkrDate == null ^ Object2.StudCardStkrDate == null )
			{
				equal = false;
			}
			if ( Object1.FeeTotAmnt != null && Object2.FeeTotAmnt != null )
			{
				if (Object1.FeeTotAmnt != Object2.FeeTotAmnt)
					equal = false;
			}
			else if (Object1.FeeTotAmnt == null ^ Object2.FeeTotAmnt == null )
			{
				equal = false;
			}
			if ( Object1.FeePayAmnt != null && Object2.FeePayAmnt != null )
			{
				if (Object1.FeePayAmnt != Object2.FeePayAmnt)
					equal = false;
			}
			else if (Object1.FeePayAmnt == null ^ Object2.FeePayAmnt == null )
			{
				equal = false;
			}
			if ( Object1.FeeRefundAmnt != null && Object2.FeeRefundAmnt != null )
			{
				if (Object1.FeeRefundAmnt != Object2.FeeRefundAmnt)
					equal = false;
			}
			else if (Object1.FeeRefundAmnt == null ^ Object2.FeeRefundAmnt == null )
			{
				equal = false;
			}
			if (Object1.PayFlg != Object2.PayFlg)
				equal = false;
			if (Object1.FreezeFlg != Object2.FreezeFlg)
				equal = false;
			if ( Object1.AsCodeDegreeId != null && Object2.AsCodeDegreeId != null )
			{
				if (Object1.AsCodeDegreeId != Object2.AsCodeDegreeId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeId == null ^ Object2.AsCodeDegreeId == null )
			{
				equal = false;
			}
			if ( Object1.EdCdeAcadWarnTypeId != null && Object2.EdCdeAcadWarnTypeId != null )
			{
				if (Object1.EdCdeAcadWarnTypeId != Object2.EdCdeAcadWarnTypeId)
					equal = false;
			}
			else if (Object1.EdCdeAcadWarnTypeId == null ^ Object2.EdCdeAcadWarnTypeId == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.SemCount != null && Object2.SemCount != null )
			{
				if (Object1.SemCount != Object2.SemCount)
					equal = false;
			}
			else if (Object1.SemCount == null ^ Object2.SemCount == null )
			{
				equal = false;
			}
			if ( Object1.LstSemInYrFlg != null && Object2.LstSemInYrFlg != null )
			{
				if (Object1.LstSemInYrFlg != Object2.LstSemInYrFlg)
					equal = false;
			}
			else if (Object1.LstSemInYrFlg == null ^ Object2.LstSemInYrFlg == null )
			{
				equal = false;
			}
			if ( Object1.EdCdeExamTypeId != null && Object2.EdCdeExamTypeId != null )
			{
				if (Object1.EdCdeExamTypeId != Object2.EdCdeExamTypeId)
					equal = false;
			}
			else if (Object1.EdCdeExamTypeId == null ^ Object2.EdCdeExamTypeId == null )
			{
				equal = false;
			}
			if ( Object1.BhvrMark != null && Object2.BhvrMark != null )
			{
				if (Object1.BhvrMark != Object2.BhvrMark)
					equal = false;
			}
			else if (Object1.BhvrMark == null ^ Object2.BhvrMark == null )
			{
				equal = false;
			}
			if ( Object1.AttndcMark != null && Object2.AttndcMark != null )
			{
				if (Object1.AttndcMark != Object2.AttndcMark)
					equal = false;
			}
			else if (Object1.AttndcMark == null ^ Object2.AttndcMark == null )
			{
				equal = false;
			}
			if ( Object1.AccumChTot != null && Object2.AccumChTot != null )
			{
				if (Object1.AccumChTot != Object2.AccumChTot)
					equal = false;
			}
			else if (Object1.AccumChTot == null ^ Object2.AccumChTot == null )
			{
				equal = false;
			}
			if ( Object1.AccumPointTot != null && Object2.AccumPointTot != null )
			{
				if (Object1.AccumPointTot != Object2.AccumPointTot)
					equal = false;
			}
			else if (Object1.AccumPointTot == null ^ Object2.AccumPointTot == null )
			{
				equal = false;
			}
			if ( Object1.ResultApproveFlg != null && Object2.ResultApproveFlg != null )
			{
				if (Object1.ResultApproveFlg != Object2.ResultApproveFlg)
					equal = false;
			}
			else if (Object1.ResultApproveFlg == null ^ Object2.ResultApproveFlg == null )
			{
				equal = false;
			}
			if ( Object1.CalcGpaDate != null && Object2.CalcGpaDate != null )
			{
				if (Object1.CalcGpaDate != Object2.CalcGpaDate)
					equal = false;
			}
			else if (Object1.CalcGpaDate == null ^ Object2.CalcGpaDate == null )
			{
				equal = false;
			}
			if ( Object1.SeUserCrsApproveId != null && Object2.SeUserCrsApproveId != null )
			{
				if (Object1.SeUserCrsApproveId != Object2.SeUserCrsApproveId)
					equal = false;
			}
			else if (Object1.SeUserCrsApproveId == null ^ Object2.SeUserCrsApproveId == null )
			{
				equal = false;
			}
			if ( Object1.MigGpaFlg != null && Object2.MigGpaFlg != null )
			{
				if (Object1.MigGpaFlg != Object2.MigGpaFlg)
					equal = false;
			}
			else if (Object1.MigGpaFlg == null ^ Object2.MigGpaFlg == null )
			{
				equal = false;
			}
			if ( Object1.MajorSemCh != null && Object2.MajorSemCh != null )
			{
				if (Object1.MajorSemCh != Object2.MajorSemCh)
					equal = false;
			}
			else if (Object1.MajorSemCh == null ^ Object2.MajorSemCh == null )
			{
				equal = false;
			}
			if ( Object1.MajorAccumCh != null && Object2.MajorAccumCh != null )
			{
				if (Object1.MajorAccumCh != Object2.MajorAccumCh)
					equal = false;
			}
			else if (Object1.MajorAccumCh == null ^ Object2.MajorAccumCh == null )
			{
				equal = false;
			}
			if ( Object1.ResultApproveMuFlg != null && Object2.ResultApproveMuFlg != null )
			{
				if (Object1.ResultApproveMuFlg != Object2.ResultApproveMuFlg)
					equal = false;
			}
			else if (Object1.ResultApproveMuFlg == null ^ Object2.ResultApproveMuFlg == null )
			{
				equal = false;
			}
			if ( Object1.GsCdeHonorId != null && Object2.GsCdeHonorId != null )
			{
				if (Object1.GsCdeHonorId != Object2.GsCdeHonorId)
					equal = false;
			}
			else if (Object1.GsCdeHonorId == null ^ Object2.GsCdeHonorId == null )
			{
				equal = false;
			}
			if ( Object1.PrecentCoursesLvl != null && Object2.PrecentCoursesLvl != null )
			{
				if (Object1.PrecentCoursesLvl != Object2.PrecentCoursesLvl)
					equal = false;
			}
			else if (Object1.PrecentCoursesLvl == null ^ Object2.PrecentCoursesLvl == null )
			{
				equal = false;
			}
			if ( Object1.SeFormId != null && Object2.SeFormId != null )
			{
				if (Object1.SeFormId != Object2.SeFormId)
					equal = false;
			}
			else if (Object1.SeFormId == null ^ Object2.SeFormId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.TransferFlg != null && Object2.TransferFlg != null )
			{
				if (Object1.TransferFlg != Object2.TransferFlg)
					equal = false;
			}
			else if (Object1.TransferFlg == null ^ Object2.TransferFlg == null )
			{
				equal = false;
			}
			if ( Object1.EdCdeStudTypeId != null && Object2.EdCdeStudTypeId != null )
			{
				if (Object1.EdCdeStudTypeId != Object2.EdCdeStudTypeId)
					equal = false;
			}
			else if (Object1.EdCdeStudTypeId == null ^ Object2.EdCdeStudTypeId == null )
			{
				equal = false;
			}
			if ( Object1.Ugpa != null && Object2.Ugpa != null )
			{
				if (Object1.Ugpa != Object2.Ugpa)
					equal = false;
			}
			else if (Object1.Ugpa == null ^ Object2.Ugpa == null )
			{
				equal = false;
			}
			if ( Object1.Ucgpa != null && Object2.Ucgpa != null )
			{
				if (Object1.Ucgpa != Object2.Ucgpa)
					equal = false;
			}
			else if (Object1.Ucgpa == null ^ Object2.Ucgpa == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdStudSemesterBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdStudSemesterComparer GetComparer()
        {
            return new EdStudSemesterComparer();
        }
        */

        // Comparer delegates back to EdStudSemester
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdStudSemester rhs, EdStudSemesterColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdStudSemesterColumn.EdStudSemesterId:
            		return this.EdStudSemesterId.CompareTo(rhs.EdStudSemesterId);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.CompareTo(rhs.EdCodeSemesterId);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.EdStudId:
            		return this.EdStudId.CompareTo(rhs.EdStudId);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.EdCodeLevelId:
            		return this.EdCodeLevelId.Value.CompareTo(rhs.EdCodeLevelId.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.IsLast:
            		return this.IsLast.CompareTo(rhs.IsLast);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.EdCodeLoadTypeId:
            		return this.EdCodeLoadTypeId.Value.CompareTo(rhs.EdCodeLoadTypeId.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.EdCodeEnrollTypeId:
            		return this.EdCodeEnrollTypeId.Value.CompareTo(rhs.EdCodeEnrollTypeId.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.AccumCh:
            		return this.AccumCh.Value.CompareTo(rhs.AccumCh.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.AccumGpa:
            		return this.AccumGpa.Value.CompareTo(rhs.AccumGpa.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.IsCourseApproved:
            		return this.IsCourseApproved.CompareTo(rhs.IsCourseApproved);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.CourseApproveDate:
            		return this.CourseApproveDate.Value.CompareTo(rhs.CourseApproveDate.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.AccumPoint:
            		return this.AccumPoint.Value.CompareTo(rhs.AccumPoint.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.SemCh:
            		return this.SemCh.Value.CompareTo(rhs.SemCh.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.SemGpa:
            		return this.SemGpa.Value.CompareTo(rhs.SemGpa.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.SemPoint:
            		return this.SemPoint.Value.CompareTo(rhs.SemPoint.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.IsClosed:
            		return this.IsClosed.CompareTo(rhs.IsClosed);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.MajorCgpa:
            		return this.MajorCgpa.Value.CompareTo(rhs.MajorCgpa.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.MajorGpa:
            		return this.MajorGpa.Value.CompareTo(rhs.MajorGpa.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.AcdPlnLoadFlg:
            		return this.AcdPlnLoadFlg.Value.CompareTo(rhs.AcdPlnLoadFlg.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.OnlineFlg:
            		return this.OnlineFlg.Value.CompareTo(rhs.OnlineFlg.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.ExpForGrad:
            		return this.ExpForGrad.Value.CompareTo(rhs.ExpForGrad.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.HoldForGrad:
            		return this.HoldForGrad.Value.CompareTo(rhs.HoldForGrad.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.OrientFlg:
            		return this.OrientFlg.Value.CompareTo(rhs.OrientFlg.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.NationalitySimilarityFlg:
            		return this.NationalitySimilarityFlg.Value.CompareTo(rhs.NationalitySimilarityFlg.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.FeeFacultyRuleId:
            		return this.FeeFacultyRuleId.Value.CompareTo(rhs.FeeFacultyRuleId.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.StudCardStkrFlg:
            		return this.StudCardStkrFlg.Value.CompareTo(rhs.StudCardStkrFlg.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.StudCardStkrDate:
            		return this.StudCardStkrDate.Value.CompareTo(rhs.StudCardStkrDate.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.FeeTotAmnt:
            		return this.FeeTotAmnt.Value.CompareTo(rhs.FeeTotAmnt.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.FeePayAmnt:
            		return this.FeePayAmnt.Value.CompareTo(rhs.FeePayAmnt.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.FeeRefundAmnt:
            		return this.FeeRefundAmnt.Value.CompareTo(rhs.FeeRefundAmnt.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.PayFlg:
            		return this.PayFlg.CompareTo(rhs.PayFlg);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.FreezeFlg:
            		return this.FreezeFlg.CompareTo(rhs.FreezeFlg);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.AsCodeDegreeId:
            		return this.AsCodeDegreeId.Value.CompareTo(rhs.AsCodeDegreeId.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.EdCdeAcadWarnTypeId:
            		return this.EdCdeAcadWarnTypeId.Value.CompareTo(rhs.EdCdeAcadWarnTypeId.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.SemCount:
            		return this.SemCount.Value.CompareTo(rhs.SemCount.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.LstSemInYrFlg:
            		return this.LstSemInYrFlg.Value.CompareTo(rhs.LstSemInYrFlg.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.EdCdeExamTypeId:
            		return this.EdCdeExamTypeId.Value.CompareTo(rhs.EdCdeExamTypeId.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.BhvrMark:
            		return this.BhvrMark.Value.CompareTo(rhs.BhvrMark.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.AttndcMark:
            		return this.AttndcMark.Value.CompareTo(rhs.AttndcMark.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.AccumChTot:
            		return this.AccumChTot.Value.CompareTo(rhs.AccumChTot.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.AccumPointTot:
            		return this.AccumPointTot.Value.CompareTo(rhs.AccumPointTot.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.ResultApproveFlg:
            		return this.ResultApproveFlg.Value.CompareTo(rhs.ResultApproveFlg.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.CalcGpaDate:
            		return this.CalcGpaDate.Value.CompareTo(rhs.CalcGpaDate.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.SeUserCrsApproveId:
            		return this.SeUserCrsApproveId.Value.CompareTo(rhs.SeUserCrsApproveId.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.MigGpaFlg:
            		return this.MigGpaFlg.Value.CompareTo(rhs.MigGpaFlg.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.MajorSemCh:
            		return this.MajorSemCh.Value.CompareTo(rhs.MajorSemCh.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.MajorAccumCh:
            		return this.MajorAccumCh.Value.CompareTo(rhs.MajorAccumCh.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.ResultApproveMuFlg:
            		return this.ResultApproveMuFlg.Value.CompareTo(rhs.ResultApproveMuFlg.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.GsCdeHonorId:
            		return this.GsCdeHonorId.Value.CompareTo(rhs.GsCdeHonorId.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.PrecentCoursesLvl:
            		return this.PrecentCoursesLvl.Value.CompareTo(rhs.PrecentCoursesLvl.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.SeFormId:
            		return this.SeFormId.Value.CompareTo(rhs.SeFormId.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.TransferFlg:
            		return this.TransferFlg.Value.CompareTo(rhs.TransferFlg.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.EdCdeStudTypeId:
            		return this.EdCdeStudTypeId.Value.CompareTo(rhs.EdCdeStudTypeId.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.Ugpa:
            		return this.Ugpa.Value.CompareTo(rhs.Ugpa.Value);
            		
            		                 
            	
            	
            	case EdStudSemesterColumn.Ucgpa:
            		return this.Ucgpa.Value.CompareTo(rhs.Ucgpa.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdStudSemesterKey> Members
		
		// member variable for the EntityId property
		private EdStudSemesterKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdStudSemesterKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdStudSemesterKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdStudSemester")
					.Append("|").Append( this.EdStudSemesterId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{61}{60}- EdStudSemesterId: {0}{60}- EdCodeSemesterId: {1}{60}- EdStudId: {2}{60}- EdAcadYearId: {3}{60}- AsFacultyInfoId: {4}{60}- EdCodeLevelId: {5}{60}- IsLast: {6}{60}- EdCodeLoadTypeId: {7}{60}- EdCodeEnrollTypeId: {8}{60}- AccumCh: {9}{60}- AccumGpa: {10}{60}- IsCourseApproved: {11}{60}- CourseApproveDate: {12}{60}- AccumPoint: {13}{60}- SemCh: {14}{60}- SemGpa: {15}{60}- SemPoint: {16}{60}- IsClosed: {17}{60}- MajorCgpa: {18}{60}- MajorGpa: {19}{60}- AcdPlnLoadFlg: {20}{60}- OnlineFlg: {21}{60}- ExpForGrad: {22}{60}- HoldForGrad: {23}{60}- OrientFlg: {24}{60}- NationalitySimilarityFlg: {25}{60}- FeeFacultyRuleId: {26}{60}- StudCardStkrFlg: {27}{60}- StudCardStkrDate: {28}{60}- FeeTotAmnt: {29}{60}- FeePayAmnt: {30}{60}- FeeRefundAmnt: {31}{60}- PayFlg: {32}{60}- FreezeFlg: {33}{60}- AsCodeDegreeId: {34}{60}- EdCdeAcadWarnTypeId: {35}{60}- Notes: {36}{60}- SemCount: {37}{60}- LstSemInYrFlg: {38}{60}- EdCdeExamTypeId: {39}{60}- BhvrMark: {40}{60}- AttndcMark: {41}{60}- AccumChTot: {42}{60}- AccumPointTot: {43}{60}- ResultApproveFlg: {44}{60}- CalcGpaDate: {45}{60}- SeUserCrsApproveId: {46}{60}- MigGpaFlg: {47}{60}- MajorSemCh: {48}{60}- MajorAccumCh: {49}{60}- ResultApproveMuFlg: {50}{60}- GsCdeHonorId: {51}{60}- PrecentCoursesLvl: {52}{60}- SeFormId: {53}{60}- LastDate: {54}{60}- SeUserId: {55}{60}- TransferFlg: {56}{60}- EdCdeStudTypeId: {57}{60}- Ugpa: {58}{60}- Ucgpa: {59}{60}{62}", 
				this.EdStudSemesterId,
				this.EdCodeSemesterId,
				this.EdStudId,
				this.EdAcadYearId,
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				(this.EdCodeLevelId == null) ? string.Empty : this.EdCodeLevelId.ToString(),
				this.IsLast,
				(this.EdCodeLoadTypeId == null) ? string.Empty : this.EdCodeLoadTypeId.ToString(),
				(this.EdCodeEnrollTypeId == null) ? string.Empty : this.EdCodeEnrollTypeId.ToString(),
				(this.AccumCh == null) ? string.Empty : this.AccumCh.ToString(),
				(this.AccumGpa == null) ? string.Empty : this.AccumGpa.ToString(),
				this.IsCourseApproved,
				(this.CourseApproveDate == null) ? string.Empty : this.CourseApproveDate.ToString(),
				(this.AccumPoint == null) ? string.Empty : this.AccumPoint.ToString(),
				(this.SemCh == null) ? string.Empty : this.SemCh.ToString(),
				(this.SemGpa == null) ? string.Empty : this.SemGpa.ToString(),
				(this.SemPoint == null) ? string.Empty : this.SemPoint.ToString(),
				this.IsClosed,
				(this.MajorCgpa == null) ? string.Empty : this.MajorCgpa.ToString(),
				(this.MajorGpa == null) ? string.Empty : this.MajorGpa.ToString(),
				(this.AcdPlnLoadFlg == null) ? string.Empty : this.AcdPlnLoadFlg.ToString(),
				(this.OnlineFlg == null) ? string.Empty : this.OnlineFlg.ToString(),
				(this.ExpForGrad == null) ? string.Empty : this.ExpForGrad.ToString(),
				(this.HoldForGrad == null) ? string.Empty : this.HoldForGrad.ToString(),
				(this.OrientFlg == null) ? string.Empty : this.OrientFlg.ToString(),
				(this.NationalitySimilarityFlg == null) ? string.Empty : this.NationalitySimilarityFlg.ToString(),
				(this.FeeFacultyRuleId == null) ? string.Empty : this.FeeFacultyRuleId.ToString(),
				(this.StudCardStkrFlg == null) ? string.Empty : this.StudCardStkrFlg.ToString(),
				(this.StudCardStkrDate == null) ? string.Empty : this.StudCardStkrDate.ToString(),
				(this.FeeTotAmnt == null) ? string.Empty : this.FeeTotAmnt.ToString(),
				(this.FeePayAmnt == null) ? string.Empty : this.FeePayAmnt.ToString(),
				(this.FeeRefundAmnt == null) ? string.Empty : this.FeeRefundAmnt.ToString(),
				this.PayFlg,
				this.FreezeFlg,
				(this.AsCodeDegreeId == null) ? string.Empty : this.AsCodeDegreeId.ToString(),
				(this.EdCdeAcadWarnTypeId == null) ? string.Empty : this.EdCdeAcadWarnTypeId.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.SemCount == null) ? string.Empty : this.SemCount.ToString(),
				(this.LstSemInYrFlg == null) ? string.Empty : this.LstSemInYrFlg.ToString(),
				(this.EdCdeExamTypeId == null) ? string.Empty : this.EdCdeExamTypeId.ToString(),
				(this.BhvrMark == null) ? string.Empty : this.BhvrMark.ToString(),
				(this.AttndcMark == null) ? string.Empty : this.AttndcMark.ToString(),
				(this.AccumChTot == null) ? string.Empty : this.AccumChTot.ToString(),
				(this.AccumPointTot == null) ? string.Empty : this.AccumPointTot.ToString(),
				(this.ResultApproveFlg == null) ? string.Empty : this.ResultApproveFlg.ToString(),
				(this.CalcGpaDate == null) ? string.Empty : this.CalcGpaDate.ToString(),
				(this.SeUserCrsApproveId == null) ? string.Empty : this.SeUserCrsApproveId.ToString(),
				(this.MigGpaFlg == null) ? string.Empty : this.MigGpaFlg.ToString(),
				(this.MajorSemCh == null) ? string.Empty : this.MajorSemCh.ToString(),
				(this.MajorAccumCh == null) ? string.Empty : this.MajorAccumCh.ToString(),
				(this.ResultApproveMuFlg == null) ? string.Empty : this.ResultApproveMuFlg.ToString(),
				(this.GsCdeHonorId == null) ? string.Empty : this.GsCdeHonorId.ToString(),
				(this.PrecentCoursesLvl == null) ? string.Empty : this.PrecentCoursesLvl.ToString(),
				(this.SeFormId == null) ? string.Empty : this.SeFormId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.TransferFlg == null) ? string.Empty : this.TransferFlg.ToString(),
				(this.EdCdeStudTypeId == null) ? string.Empty : this.EdCdeStudTypeId.ToString(),
				(this.Ugpa == null) ? string.Empty : this.Ugpa.ToString(),
				(this.Ucgpa == null) ? string.Empty : this.Ucgpa.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_STUD_SEMESTER' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdStudSemesterEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_STUD_SEMESTER_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_STUD_SEMESTER"</remarks>
		public System.Decimal EdStudSemesterId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdStudSemesterId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : 
		/// </summary>
		public System.Decimal		  EdCodeSemesterId = 0.0m;
		
		/// <summary>
		/// ED_STUD_ID : 
		/// </summary>
		public System.Decimal		  EdStudId = 0.0m;
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// ED_CODE_LEVEL_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeLevelId = null;
		
		/// <summary>
		/// IS_LAST : 
		/// </summary>
		public System.Decimal		  IsLast = 0.0m;
		
		/// <summary>
		/// ED_CODE_LOAD_TYPE_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeLoadTypeId = null;
		
		/// <summary>
		/// ED_CODE_ENROLL_TYPE_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeEnrollTypeId = null;
		
		/// <summary>
		/// ACCUM_CH : earned hours> الساعات المجتازة المكتسبة 
		/// </summary>
		public System.Decimal?		  AccumCh = null;
		
		/// <summary>
		/// ACCUM_GPA : 
		/// </summary>
		public System.Decimal?		  AccumGpa = null;
		
		/// <summary>
		/// IS_COURSE_APPROVED :  اعتماد تسجيل طالب  
		/// </summary>
		public System.Decimal		  IsCourseApproved = 0.0m;
		
		/// <summary>
		/// COURSE_APPROVE_DATE :  اعتماد تسجيل طالب
		/// </summary>
		public System.DateTime?		  CourseApproveDate = null;
		
		/// <summary>
		/// ACCUM_POINT : 
		/// </summary>
		public System.Decimal?		  AccumPoint = null;
		
		/// <summary>
		/// SEM_CH : earned hours> الساعات المجتازة المكتسبة 
		/// </summary>
		public System.Decimal?		  SemCh = null;
		
		/// <summary>
		/// SEM_GPA : 
		/// </summary>
		public System.Decimal?		  SemGpa = null;
		
		/// <summary>
		/// SEM_POINT : 
		/// </summary>
		public System.Decimal?		  SemPoint = null;
		
		/// <summary>
		/// IS_CLOSED : 
		/// </summary>
		public System.Decimal		  IsClosed = 0.0m;
		
		/// <summary>
		/// MAJOR_CGPA : 
		/// </summary>
		public System.Decimal?		  MajorCgpa = null;
		
		/// <summary>
		/// MAJOR_GPA : 
		/// </summary>
		public System.Decimal?		  MajorGpa = null;
		
		/// <summary>
		/// ACD_PLN_LOAD_FLG : 
		/// </summary>
		public System.Decimal?		  AcdPlnLoadFlg = null;
		
		/// <summary>
		/// ONLINE_FLG : 
		/// </summary>
		public System.Decimal?		  OnlineFlg = null;
		
		/// <summary>
		/// EXP_FOR_GRAD : 
		/// </summary>
		public System.Decimal?		  ExpForGrad = null;
		
		/// <summary>
		/// HOLD_FOR_GRAD : 
		/// </summary>
		public System.Decimal?		  HoldForGrad = null;
		
		/// <summary>
		/// ORIENT_FLG : 
		/// </summary>
		public System.Decimal?		  OrientFlg = null;
		
		/// <summary>
		/// NATIONALITY_SIMILARITY_FLG : 
		/// </summary>
		public System.Decimal?		  NationalitySimilarityFlg = null;
		
		/// <summary>
		/// FEE_FACULTY_RULE_ID : 
		/// </summary>
		public System.Decimal?		  FeeFacultyRuleId = null;
		
		/// <summary>
		/// STUD_CARD_STKR_FLG : 
		/// </summary>
		public System.Decimal?		  StudCardStkrFlg = null;
		
		/// <summary>
		/// STUD_CARD_STKR_DATE : 
		/// </summary>
		public System.DateTime?		  StudCardStkrDate = null;
		
		/// <summary>
		/// FEE_TOT_AMNT : 
		/// </summary>
		public System.Decimal?		  FeeTotAmnt = null;
		
		/// <summary>
		/// FEE_PAY_AMNT : 
		/// </summary>
		public System.Decimal?		  FeePayAmnt = null;
		
		/// <summary>
		/// FEE_REFUND_AMNT : 
		/// </summary>
		public System.Decimal?		  FeeRefundAmnt = null;
		
		/// <summary>
		/// PAY_FLG : 
		/// </summary>
		public System.Decimal		  PayFlg = 0.0m;
		
		/// <summary>
		/// FREEZE_FLG : 
		/// </summary>
		public System.Decimal		  FreezeFlg = 0.0m;
		
		/// <summary>
		/// AS_CODE_DEGREE_ID : 
		/// </summary>
		public System.Decimal?		  AsCodeDegreeId = null;
		
		/// <summary>
		/// ED_CDE_ACAD_WARN_TYPE_ID : 
		/// </summary>
		public System.Decimal?		  EdCdeAcadWarnTypeId = null;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// SEM_COUNT : 
		/// </summary>
		public System.Decimal?		  SemCount = null;
		
		/// <summary>
		/// LST_SEM_IN_YR_FLG : 
		/// </summary>
		public System.Decimal?		  LstSemInYrFlg = null;
		
		/// <summary>
		/// ED_CDE_EXAM_TYPE_ID : نوع الامتحان: تكميلى- اعادة
		/// </summary>
		public System.Decimal?		  EdCdeExamTypeId = null;
		
		/// <summary>
		/// BHVR_MARK : 
		/// </summary>
		public System.Decimal?		  BhvrMark = null;
		
		/// <summary>
		/// ATTNDC_MARK : 
		/// </summary>
		public System.Decimal?		  AttndcMark = null;
		
		/// <summary>
		/// ACCUM_CH_TOT : 
		/// </summary>
		public System.Decimal?		  AccumChTot = null;
		
		/// <summary>
		/// ACCUM_POINT_TOT : 
		/// </summary>
		public System.Decimal?		  AccumPointTot = null;
		
		/// <summary>
		/// RESULT_APPROVE_FLG : اعتماد نتيجة الدور الاول
		/// </summary>
		public System.Int32?		  ResultApproveFlg = null;
		
		/// <summary>
		/// CALC_GPA_DATE : 
		/// </summary>
		public System.DateTime?		  CalcGpaDate = null;
		
		/// <summary>
		/// SE_USER_CRS_APPROVE_ID :  اعتماد تسجيل طالب
		/// </summary>
		public System.Decimal?		  SeUserCrsApproveId = null;
		
		/// <summary>
		/// MIG_GPA_FLG : 
		/// </summary>
		public System.Boolean?		  MigGpaFlg = null;
		
		/// <summary>
		/// MAJOR_SEM_CH : مقررات داخل  خطة الطالب او مقرر مكافيئ لمقرر  فى الخطة
		/// </summary>
		public System.Decimal?		  MajorSemCh = null;
		
		/// <summary>
		/// MAJOR_ACCUM_CH : مقررات داخل  خطة الطالب او مقرر مكافيئ لمقرر  فى الخطة
		/// </summary>
		public System.Decimal?		  MajorAccumCh = null;
		
		/// <summary>
		/// RESULT_APPROVE_MU_FLG : اعتماد نتيجة الدور التانى للفصل
		/// </summary>
		public System.Int32?		  ResultApproveMuFlg = null;
		
		/// <summary>
		/// GS_CDE_HONOR_ID : KTCH مرتبو الشرف الفصلية
		/// </summary>
		public System.Decimal?		  GsCdeHonorId = null;
		
		/// <summary>
		/// PRECENT_COURSES_LVL : precentage of all courses  which check to pass foundation level /النسبة الكليه التى حصل عليها الطالب فى المقررات لمقارنتها بنسبة معينة للالتحاق بعام تمهيدى جديد / CAT univ
		/// </summary>
		public System.Decimal?		  PrecentCoursesLvl = null;
		
		/// <summary>
		/// SE_FORM_ID : 
		/// </summary>
		public System.Decimal?		  SeFormId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// Transfer_Flg : 
		/// </summary>
		public System.Boolean?		  TransferFlg = null;
		
		/// <summary>
		/// ED_CDE_STUD_TYPE_ID : burimi
		/// </summary>
		public System.Int32?		  EdCdeStudTypeId = null;
		
		/// <summary>
		/// UGPA : 
		/// </summary>
		public System.Decimal?		  Ugpa = null;
		
		/// <summary>
		/// UCGPA : 
		/// </summary>
		public System.Decimal?		  Ucgpa = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsCodeDegree _asCodeDegreeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return this._asCodeDegreeIdSource; }
            set { this._asCodeDegreeIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCdeAcadWarnType _edCdeAcadWarnTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeAcadWarnType"/>.
		/// </summary>
		/// <value>The source EdCdeAcadWarnType for EdCdeAcadWarnTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCdeAcadWarnType EdCdeAcadWarnTypeIdSource
      	{
            get { return this._edCdeAcadWarnTypeIdSource; }
            set { this._edCdeAcadWarnTypeIdSource = value; }
      	}
		private EdCdeExamType _edCdeExamTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeExamType"/>.
		/// </summary>
		/// <value>The source EdCdeExamType for EdCdeExamTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCdeExamType EdCdeExamTypeIdSource
      	{
            get { return this._edCdeExamTypeIdSource; }
            set { this._edCdeExamTypeIdSource = value; }
      	}
		private EdCdeStudType _edCdeStudTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeStudType"/>.
		/// </summary>
		/// <value>The source EdCdeStudType for EdCdeStudTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCdeStudType EdCdeStudTypeIdSource
      	{
            get { return this._edCdeStudTypeIdSource; }
            set { this._edCdeStudTypeIdSource = value; }
      	}
		private EdCodeEnrollType _edCodeEnrollTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeEnrollType"/>.
		/// </summary>
		/// <value>The source EdCodeEnrollType for EdCodeEnrollTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeEnrollType EdCodeEnrollTypeIdSource
      	{
            get { return this._edCodeEnrollTypeIdSource; }
            set { this._edCodeEnrollTypeIdSource = value; }
      	}
		private EdCodeLevel _edCodeLevelIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeLevel EdCodeLevelIdSource
      	{
            get { return this._edCodeLevelIdSource; }
            set { this._edCodeLevelIdSource = value; }
      	}
		private EdCodeLoadType _edCodeLoadTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLoadType"/>.
		/// </summary>
		/// <value>The source EdCodeLoadType for EdCodeLoadTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeLoadType EdCodeLoadTypeIdSource
      	{
            get { return this._edCodeLoadTypeIdSource; }
            set { this._edCodeLoadTypeIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		private FeeFacultyRule _feeFacultyRuleIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeFacultyRule"/>.
		/// </summary>
		/// <value>The source FeeFacultyRule for FeeFacultyRuleId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeFacultyRule FeeFacultyRuleIdSource
      	{
            get { return this._feeFacultyRuleIdSource; }
            set { this._feeFacultyRuleIdSource = value; }
      	}
		private GsCdeHonor _gsCdeHonorIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCdeHonor"/>.
		/// </summary>
		/// <value>The source GsCdeHonor for GsCdeHonorId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCdeHonor GsCdeHonorIdSource
      	{
            get { return this._gsCdeHonorIdSource; }
            set { this._gsCdeHonorIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EdStudCheatCollection
		
		private TList<EdStudCheat> _edStudCheatEdStudSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCheatEdStudSemesterId
		/// </summary>
		
		public TList<EdStudCheat> EdStudCheatCollection
		{
			get
			{
				if (_edStudCheatEdStudSemesterId == null)
				{
				_edStudCheatEdStudSemesterId = new TList<EdStudCheat>();
				}
	
				return _edStudCheatEdStudSemesterId;
			}
			set { _edStudCheatEdStudSemesterId = value; }
		}
		
		#endregion

		#region EdStudIntTransPrefCollection
		
		private TList<EdStudIntTransPref> _edStudIntTransPrefEdStudSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudIntTransPrefEdStudSemesterId
		/// </summary>
		
		public TList<EdStudIntTransPref> EdStudIntTransPrefCollection
		{
			get
			{
				if (_edStudIntTransPrefEdStudSemesterId == null)
				{
				_edStudIntTransPrefEdStudSemesterId = new TList<EdStudIntTransPref>();
				}
	
				return _edStudIntTransPrefEdStudSemesterId;
			}
			set { _edStudIntTransPrefEdStudSemesterId = value; }
		}
		
		#endregion

		#region EdStudActvtyRegCollection
		
		private TList<EdStudActvtyReg> _edStudActvtyRegEdStudSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudActvtyRegEdStudSemesterId
		/// </summary>
		
		public TList<EdStudActvtyReg> EdStudActvtyRegCollection
		{
			get
			{
				if (_edStudActvtyRegEdStudSemesterId == null)
				{
				_edStudActvtyRegEdStudSemesterId = new TList<EdStudActvtyReg>();
				}
	
				return _edStudActvtyRegEdStudSemesterId;
			}
			set { _edStudActvtyRegEdStudSemesterId = value; }
		}
		
		#endregion

		#region EdStudBranchPrefCollection
		
		private TList<EdStudBranchPref> _edStudBranchPrefEdStudSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudBranchPrefEdStudSemesterId
		/// </summary>
		
		public TList<EdStudBranchPref> EdStudBranchPrefCollection
		{
			get
			{
				if (_edStudBranchPrefEdStudSemesterId == null)
				{
				_edStudBranchPrefEdStudSemesterId = new TList<EdStudBranchPref>();
				}
	
				return _edStudBranchPrefEdStudSemesterId;
			}
			set { _edStudBranchPrefEdStudSemesterId = value; }
		}
		
		#endregion

		#region EdExamStudAbsenceCollection
		
		private TList<EdExamStudAbsence> _edExamStudAbsenceEdStudSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edExamStudAbsenceEdStudSemesterId
		/// </summary>
		
		public TList<EdExamStudAbsence> EdExamStudAbsenceCollection
		{
			get
			{
				if (_edExamStudAbsenceEdStudSemesterId == null)
				{
				_edExamStudAbsenceEdStudSemesterId = new TList<EdExamStudAbsence>();
				}
	
				return _edExamStudAbsenceEdStudSemesterId;
			}
			set { _edExamStudAbsenceEdStudSemesterId = value; }
		}
		
		#endregion

		#region EdStudEnrollChangeCollection
		
		private TList<EdStudEnrollChange> _edStudEnrollChangeEdStudSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudEnrollChangeEdStudSemesterId
		/// </summary>
		
		public TList<EdStudEnrollChange> EdStudEnrollChangeCollection
		{
			get
			{
				if (_edStudEnrollChangeEdStudSemesterId == null)
				{
				_edStudEnrollChangeEdStudSemesterId = new TList<EdStudEnrollChange>();
				}
	
				return _edStudEnrollChangeEdStudSemesterId;
			}
			set { _edStudEnrollChangeEdStudSemesterId = value; }
		}
		
		#endregion

		#region EdStudSemesterExtCollection
		
		private TList<EdStudSemesterExt> _edStudSemesterExtEdStudSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudSemesterExtEdStudSemesterId
		/// </summary>
		
		public TList<EdStudSemesterExt> EdStudSemesterExtCollection
		{
			get
			{
				if (_edStudSemesterExtEdStudSemesterId == null)
				{
				_edStudSemesterExtEdStudSemesterId = new TList<EdStudSemesterExt>();
				}
	
				return _edStudSemesterExtEdStudSemesterId;
			}
			set { _edStudSemesterExtEdStudSemesterId = value; }
		}
		
		#endregion

		#region EdStudCourseRegCollection
		
		private TList<EdStudCourseReg> _edStudCourseRegEdStudSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCourseRegEdStudSemesterId
		/// </summary>
		
		public TList<EdStudCourseReg> EdStudCourseRegCollection
		{
			get
			{
				if (_edStudCourseRegEdStudSemesterId == null)
				{
				_edStudCourseRegEdStudSemesterId = new TList<EdStudCourseReg>();
				}
	
				return _edStudCourseRegEdStudSemesterId;
			}
			set { _edStudCourseRegEdStudSemesterId = value; }
		}
		
		#endregion

		#region EdStudCourseRplcCollection
		
		private TList<EdStudCourseRplc> _edStudCourseRplcEdStudSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCourseRplcEdStudSemesterId
		/// </summary>
		
		public TList<EdStudCourseRplc> EdStudCourseRplcCollection
		{
			get
			{
				if (_edStudCourseRplcEdStudSemesterId == null)
				{
				_edStudCourseRplcEdStudSemesterId = new TList<EdStudCourseRplc>();
				}
	
				return _edStudCourseRplcEdStudSemesterId;
			}
			set { _edStudCourseRplcEdStudSemesterId = value; }
		}
		
		#endregion

		#region CoStudSecretNumCollection
		
		private TList<CoStudSecretNum> _coStudSecretNumEdStudSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coStudSecretNumEdStudSemesterId
		/// </summary>
		
		public TList<CoStudSecretNum> CoStudSecretNumCollection
		{
			get
			{
				if (_coStudSecretNumEdStudSemesterId == null)
				{
				_coStudSecretNumEdStudSemesterId = new TList<CoStudSecretNum>();
				}
	
				return _coStudSecretNumEdStudSemesterId;
			}
			set { _coStudSecretNumEdStudSemesterId = value; }
		}
		
		#endregion

		#region EdStdExamSemesterCollection
		
		private TList<EdStdExamSemester> _edStdExamSemesterEdStudSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStdExamSemesterEdStudSemesterId
		/// </summary>
		
		public TList<EdStdExamSemester> EdStdExamSemesterCollection
		{
			get
			{
				if (_edStdExamSemesterEdStudSemesterId == null)
				{
				_edStdExamSemesterEdStudSemesterId = new TList<EdStdExamSemester>();
				}
	
				return _edStdExamSemesterEdStudSemesterId;
			}
			set { _edStdExamSemesterEdStudSemesterId = value; }
		}
		
		#endregion

		#region MltStudBhvrAttndcCollection
		
		private TList<MltStudBhvrAttndc> _mltStudBhvrAttndcEdStudSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _mltStudBhvrAttndcEdStudSemesterId
		/// </summary>
		
		public TList<MltStudBhvrAttndc> MltStudBhvrAttndcCollection
		{
			get
			{
				if (_mltStudBhvrAttndcEdStudSemesterId == null)
				{
				_mltStudBhvrAttndcEdStudSemesterId = new TList<MltStudBhvrAttndc>();
				}
	
				return _mltStudBhvrAttndcEdStudSemesterId;
			}
			set { _mltStudBhvrAttndcEdStudSemesterId = value; }
		}
		
		#endregion

		#region EdStudStateCollection
		
		private TList<EdStudState> _edStudStateEdStudSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudStateEdStudSemesterId
		/// </summary>
		
		public TList<EdStudState> EdStudStateCollection
		{
			get
			{
				if (_edStudStateEdStudSemesterId == null)
				{
				_edStudStateEdStudSemesterId = new TList<EdStudState>();
				}
	
				return _edStudStateEdStudSemesterId;
			}
			set { _edStudStateEdStudSemesterId = value; }
		}
		
		#endregion

		#region CoStudCheatCollection
		
		private TList<CoStudCheat> _coStudCheatEdStudSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coStudCheatEdStudSemesterId
		/// </summary>
		
		public TList<CoStudCheat> CoStudCheatCollection
		{
			get
			{
				if (_coStudCheatEdStudSemesterId == null)
				{
				_coStudCheatEdStudSemesterId = new TList<CoStudCheat>();
				}
	
				return _coStudCheatEdStudSemesterId;
			}
			set { _coStudCheatEdStudSemesterId = value; }
		}
		
		#endregion

		#region EdStudExcuseCollection
		
		private TList<EdStudExcuse> _edStudExcuseEdStudSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudExcuseEdStudSemesterId
		/// </summary>
		
		public TList<EdStudExcuse> EdStudExcuseCollection
		{
			get
			{
				if (_edStudExcuseEdStudSemesterId == null)
				{
				_edStudExcuseEdStudSemesterId = new TList<EdStudExcuse>();
				}
	
				return _edStudExcuseEdStudSemesterId;
			}
			set { _edStudExcuseEdStudSemesterId = value; }
		}
		
		#endregion

		#region EdStudClrncReqCollection
		
		private TList<EdStudClrncReq> _edStudClrncReqEdStudSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudClrncReqEdStudSemesterId
		/// </summary>
		
		public TList<EdStudClrncReq> EdStudClrncReqCollection
		{
			get
			{
				if (_edStudClrncReqEdStudSemesterId == null)
				{
				_edStudClrncReqEdStudSemesterId = new TList<EdStudClrncReq>();
				}
	
				return _edStudClrncReqEdStudSemesterId;
			}
			set { _edStudClrncReqEdStudSemesterId = value; }
		}
		
		#endregion

		#region EdStudStateTempCollection
		
		private TList<EdStudStateTemp> _edStudStateTempEdStudSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudStateTempEdStudSemesterId
		/// </summary>
		
		public TList<EdStudStateTemp> EdStudStateTempCollection
		{
			get
			{
				if (_edStudStateTempEdStudSemesterId == null)
				{
				_edStudStateTempEdStudSemesterId = new TList<EdStudStateTemp>();
				}
	
				return _edStudStateTempEdStudSemesterId;
			}
			set { _edStudStateTempEdStudSemesterId = value; }
		}
		
		#endregion

		#region EdResidencyStudCollection
		
		private TList<EdResidencyStud> _edResidencyStudEdStudSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edResidencyStudEdStudSemesterId
		/// </summary>
		
		public TList<EdResidencyStud> EdResidencyStudCollection
		{
			get
			{
				if (_edResidencyStudEdStudSemesterId == null)
				{
				_edResidencyStudEdStudSemesterId = new TList<EdResidencyStud>();
				}
	
				return _edResidencyStudEdStudSemesterId;
			}
			set { _edResidencyStudEdStudSemesterId = value; }
		}
		
		#endregion

		#region EdStudGroupCollection
		
		private TList<EdStudGroup> _edStudGroupEdStudSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudGroupEdStudSemesterId
		/// </summary>
		
		public TList<EdStudGroup> EdStudGroupCollection
		{
			get
			{
				if (_edStudGroupEdStudSemesterId == null)
				{
				_edStudGroupEdStudSemesterId = new TList<EdStudGroup>();
				}
	
				return _edStudGroupEdStudSemesterId;
			}
			set { _edStudGroupEdStudSemesterId = value; }
		}
		
		#endregion

		#region CoExamPlaceStudCollection
		
		private TList<CoExamPlaceStud> _coExamPlaceStudEdStudSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coExamPlaceStudEdStudSemesterId
		/// </summary>
		
		public TList<CoExamPlaceStud> CoExamPlaceStudCollection
		{
			get
			{
				if (_coExamPlaceStudEdStudSemesterId == null)
				{
				_coExamPlaceStudEdStudSemesterId = new TList<CoExamPlaceStud>();
				}
	
				return _coExamPlaceStudEdStudSemesterId;
			}
			set { _coExamPlaceStudEdStudSemesterId = value; }
		}
		
		#endregion

		#region EdStudCourseRegTempCollection
		
		private TList<EdStudCourseRegTemp> _edStudCourseRegTempEdStudSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCourseRegTempEdStudSemesterId
		/// </summary>
		
		public TList<EdStudCourseRegTemp> EdStudCourseRegTempCollection
		{
			get
			{
				if (_edStudCourseRegTempEdStudSemesterId == null)
				{
				_edStudCourseRegTempEdStudSemesterId = new TList<EdStudCourseRegTemp>();
				}
	
				return _edStudCourseRegTempEdStudSemesterId;
			}
			set { _edStudCourseRegTempEdStudSemesterId = value; }
		}
		
		#endregion

		#region EdStudCourseWaitCollection
		
		private TList<EdStudCourseWait> _edStudCourseWaitEdStudSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCourseWaitEdStudSemesterId
		/// </summary>
		
		public TList<EdStudCourseWait> EdStudCourseWaitCollection
		{
			get
			{
				if (_edStudCourseWaitEdStudSemesterId == null)
				{
				_edStudCourseWaitEdStudSemesterId = new TList<EdStudCourseWait>();
				}
	
				return _edStudCourseWaitEdStudSemesterId;
			}
			set { _edStudCourseWaitEdStudSemesterId = value; }
		}
		
		#endregion

		#region EdStudCourseChngCollection
		
		private TList<EdStudCourseChng> _edStudCourseChngEdStudSemesterId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCourseChngEdStudSemesterId
		/// </summary>
		
		public TList<EdStudCourseChng> EdStudCourseChngCollection
		{
			get
			{
				if (_edStudCourseChngEdStudSemesterId == null)
				{
				_edStudCourseChngEdStudSemesterId = new TList<EdStudCourseChng>();
				}
	
				return _edStudCourseChngEdStudSemesterId;
			}
			set { _edStudCourseChngEdStudSemesterId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdStudSemesterEntityData _tmp = new EdStudSemesterEntityData();
						
			_tmp.EdStudSemesterId = this.EdStudSemesterId;
			_tmp.OriginalEdStudSemesterId = this.OriginalEdStudSemesterId;
			
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdCodeLevelId = this.EdCodeLevelId;
			_tmp.IsLast = this.IsLast;
			_tmp.EdCodeLoadTypeId = this.EdCodeLoadTypeId;
			_tmp.EdCodeEnrollTypeId = this.EdCodeEnrollTypeId;
			_tmp.AccumCh = this.AccumCh;
			_tmp.AccumGpa = this.AccumGpa;
			_tmp.IsCourseApproved = this.IsCourseApproved;
			_tmp.CourseApproveDate = this.CourseApproveDate;
			_tmp.AccumPoint = this.AccumPoint;
			_tmp.SemCh = this.SemCh;
			_tmp.SemGpa = this.SemGpa;
			_tmp.SemPoint = this.SemPoint;
			_tmp.IsClosed = this.IsClosed;
			_tmp.MajorCgpa = this.MajorCgpa;
			_tmp.MajorGpa = this.MajorGpa;
			_tmp.AcdPlnLoadFlg = this.AcdPlnLoadFlg;
			_tmp.OnlineFlg = this.OnlineFlg;
			_tmp.ExpForGrad = this.ExpForGrad;
			_tmp.HoldForGrad = this.HoldForGrad;
			_tmp.OrientFlg = this.OrientFlg;
			_tmp.NationalitySimilarityFlg = this.NationalitySimilarityFlg;
			_tmp.FeeFacultyRuleId = this.FeeFacultyRuleId;
			_tmp.StudCardStkrFlg = this.StudCardStkrFlg;
			_tmp.StudCardStkrDate = this.StudCardStkrDate;
			_tmp.FeeTotAmnt = this.FeeTotAmnt;
			_tmp.FeePayAmnt = this.FeePayAmnt;
			_tmp.FeeRefundAmnt = this.FeeRefundAmnt;
			_tmp.PayFlg = this.PayFlg;
			_tmp.FreezeFlg = this.FreezeFlg;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.EdCdeAcadWarnTypeId = this.EdCdeAcadWarnTypeId;
			_tmp.Notes = this.Notes;
			_tmp.SemCount = this.SemCount;
			_tmp.LstSemInYrFlg = this.LstSemInYrFlg;
			_tmp.EdCdeExamTypeId = this.EdCdeExamTypeId;
			_tmp.BhvrMark = this.BhvrMark;
			_tmp.AttndcMark = this.AttndcMark;
			_tmp.AccumChTot = this.AccumChTot;
			_tmp.AccumPointTot = this.AccumPointTot;
			_tmp.ResultApproveFlg = this.ResultApproveFlg;
			_tmp.CalcGpaDate = this.CalcGpaDate;
			_tmp.SeUserCrsApproveId = this.SeUserCrsApproveId;
			_tmp.MigGpaFlg = this.MigGpaFlg;
			_tmp.MajorSemCh = this.MajorSemCh;
			_tmp.MajorAccumCh = this.MajorAccumCh;
			_tmp.ResultApproveMuFlg = this.ResultApproveMuFlg;
			_tmp.GsCdeHonorId = this.GsCdeHonorId;
			_tmp.PrecentCoursesLvl = this.PrecentCoursesLvl;
			_tmp.SeFormId = this.SeFormId;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			_tmp.TransferFlg = this.TransferFlg;
			_tmp.EdCdeStudTypeId = this.EdCdeStudTypeId;
			_tmp.Ugpa = this.Ugpa;
			_tmp.Ucgpa = this.Ucgpa;
			
			#region Source Parent Composite Entities
			if (this.AsCodeDegreeIdSource != null)
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource) as AsCodeDegree;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCdeAcadWarnTypeIdSource != null)
				_tmp.EdCdeAcadWarnTypeIdSource = MakeCopyOf(this.EdCdeAcadWarnTypeIdSource) as EdCdeAcadWarnType;
			if (this.EdCdeExamTypeIdSource != null)
				_tmp.EdCdeExamTypeIdSource = MakeCopyOf(this.EdCdeExamTypeIdSource) as EdCdeExamType;
			if (this.EdCdeStudTypeIdSource != null)
				_tmp.EdCdeStudTypeIdSource = MakeCopyOf(this.EdCdeStudTypeIdSource) as EdCdeStudType;
			if (this.EdCodeEnrollTypeIdSource != null)
				_tmp.EdCodeEnrollTypeIdSource = MakeCopyOf(this.EdCodeEnrollTypeIdSource) as EdCodeEnrollType;
			if (this.EdCodeLevelIdSource != null)
				_tmp.EdCodeLevelIdSource = MakeCopyOf(this.EdCodeLevelIdSource) as EdCodeLevel;
			if (this.EdCodeLoadTypeIdSource != null)
				_tmp.EdCodeLoadTypeIdSource = MakeCopyOf(this.EdCodeLoadTypeIdSource) as EdCodeLoadType;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			if (this.FeeFacultyRuleIdSource != null)
				_tmp.FeeFacultyRuleIdSource = MakeCopyOf(this.FeeFacultyRuleIdSource) as FeeFacultyRule;
			if (this.GsCdeHonorIdSource != null)
				_tmp.GsCdeHonorIdSource = MakeCopyOf(this.GsCdeHonorIdSource) as GsCdeHonor;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._edStudCheatEdStudSemesterId != null)
				_tmp.EdStudCheatCollection = (TList<EdStudCheat>) MakeCopyOf(this.EdStudCheatCollection); 
			if (this._edStudIntTransPrefEdStudSemesterId != null)
				_tmp.EdStudIntTransPrefCollection = (TList<EdStudIntTransPref>) MakeCopyOf(this.EdStudIntTransPrefCollection); 
			if (this._edStudActvtyRegEdStudSemesterId != null)
				_tmp.EdStudActvtyRegCollection = (TList<EdStudActvtyReg>) MakeCopyOf(this.EdStudActvtyRegCollection); 
			if (this._edStudBranchPrefEdStudSemesterId != null)
				_tmp.EdStudBranchPrefCollection = (TList<EdStudBranchPref>) MakeCopyOf(this.EdStudBranchPrefCollection); 
			if (this._edExamStudAbsenceEdStudSemesterId != null)
				_tmp.EdExamStudAbsenceCollection = (TList<EdExamStudAbsence>) MakeCopyOf(this.EdExamStudAbsenceCollection); 
			if (this._edStudEnrollChangeEdStudSemesterId != null)
				_tmp.EdStudEnrollChangeCollection = (TList<EdStudEnrollChange>) MakeCopyOf(this.EdStudEnrollChangeCollection); 
			if (this._edStudSemesterExtEdStudSemesterId != null)
				_tmp.EdStudSemesterExtCollection = (TList<EdStudSemesterExt>) MakeCopyOf(this.EdStudSemesterExtCollection); 
			if (this._edStudCourseRegEdStudSemesterId != null)
				_tmp.EdStudCourseRegCollection = (TList<EdStudCourseReg>) MakeCopyOf(this.EdStudCourseRegCollection); 
			if (this._edStudCourseRplcEdStudSemesterId != null)
				_tmp.EdStudCourseRplcCollection = (TList<EdStudCourseRplc>) MakeCopyOf(this.EdStudCourseRplcCollection); 
			if (this._coStudSecretNumEdStudSemesterId != null)
				_tmp.CoStudSecretNumCollection = (TList<CoStudSecretNum>) MakeCopyOf(this.CoStudSecretNumCollection); 
			if (this._edStdExamSemesterEdStudSemesterId != null)
				_tmp.EdStdExamSemesterCollection = (TList<EdStdExamSemester>) MakeCopyOf(this.EdStdExamSemesterCollection); 
			if (this._mltStudBhvrAttndcEdStudSemesterId != null)
				_tmp.MltStudBhvrAttndcCollection = (TList<MltStudBhvrAttndc>) MakeCopyOf(this.MltStudBhvrAttndcCollection); 
			if (this._edStudStateEdStudSemesterId != null)
				_tmp.EdStudStateCollection = (TList<EdStudState>) MakeCopyOf(this.EdStudStateCollection); 
			if (this._coStudCheatEdStudSemesterId != null)
				_tmp.CoStudCheatCollection = (TList<CoStudCheat>) MakeCopyOf(this.CoStudCheatCollection); 
			if (this._edStudExcuseEdStudSemesterId != null)
				_tmp.EdStudExcuseCollection = (TList<EdStudExcuse>) MakeCopyOf(this.EdStudExcuseCollection); 
			if (this._edStudClrncReqEdStudSemesterId != null)
				_tmp.EdStudClrncReqCollection = (TList<EdStudClrncReq>) MakeCopyOf(this.EdStudClrncReqCollection); 
			if (this._edStudStateTempEdStudSemesterId != null)
				_tmp.EdStudStateTempCollection = (TList<EdStudStateTemp>) MakeCopyOf(this.EdStudStateTempCollection); 
			if (this._edResidencyStudEdStudSemesterId != null)
				_tmp.EdResidencyStudCollection = (TList<EdResidencyStud>) MakeCopyOf(this.EdResidencyStudCollection); 
			if (this._edStudGroupEdStudSemesterId != null)
				_tmp.EdStudGroupCollection = (TList<EdStudGroup>) MakeCopyOf(this.EdStudGroupCollection); 
			if (this._coExamPlaceStudEdStudSemesterId != null)
				_tmp.CoExamPlaceStudCollection = (TList<CoExamPlaceStud>) MakeCopyOf(this.CoExamPlaceStudCollection); 
			if (this._edStudCourseRegTempEdStudSemesterId != null)
				_tmp.EdStudCourseRegTempCollection = (TList<EdStudCourseRegTemp>) MakeCopyOf(this.EdStudCourseRegTempCollection); 
			if (this._edStudCourseWaitEdStudSemesterId != null)
				_tmp.EdStudCourseWaitCollection = (TList<EdStudCourseWait>) MakeCopyOf(this.EdStudCourseWaitCollection); 
			if (this._edStudCourseChngEdStudSemesterId != null)
				_tmp.EdStudCourseChngCollection = (TList<EdStudCourseChng>) MakeCopyOf(this.EdStudCourseChngCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdStudSemesterEntityData _tmp = new EdStudSemesterEntityData();
						
			_tmp.EdStudSemesterId = this.EdStudSemesterId;
			_tmp.OriginalEdStudSemesterId = this.OriginalEdStudSemesterId;
			
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdCodeLevelId = this.EdCodeLevelId;
			_tmp.IsLast = this.IsLast;
			_tmp.EdCodeLoadTypeId = this.EdCodeLoadTypeId;
			_tmp.EdCodeEnrollTypeId = this.EdCodeEnrollTypeId;
			_tmp.AccumCh = this.AccumCh;
			_tmp.AccumGpa = this.AccumGpa;
			_tmp.IsCourseApproved = this.IsCourseApproved;
			_tmp.CourseApproveDate = this.CourseApproveDate;
			_tmp.AccumPoint = this.AccumPoint;
			_tmp.SemCh = this.SemCh;
			_tmp.SemGpa = this.SemGpa;
			_tmp.SemPoint = this.SemPoint;
			_tmp.IsClosed = this.IsClosed;
			_tmp.MajorCgpa = this.MajorCgpa;
			_tmp.MajorGpa = this.MajorGpa;
			_tmp.AcdPlnLoadFlg = this.AcdPlnLoadFlg;
			_tmp.OnlineFlg = this.OnlineFlg;
			_tmp.ExpForGrad = this.ExpForGrad;
			_tmp.HoldForGrad = this.HoldForGrad;
			_tmp.OrientFlg = this.OrientFlg;
			_tmp.NationalitySimilarityFlg = this.NationalitySimilarityFlg;
			_tmp.FeeFacultyRuleId = this.FeeFacultyRuleId;
			_tmp.StudCardStkrFlg = this.StudCardStkrFlg;
			_tmp.StudCardStkrDate = this.StudCardStkrDate;
			_tmp.FeeTotAmnt = this.FeeTotAmnt;
			_tmp.FeePayAmnt = this.FeePayAmnt;
			_tmp.FeeRefundAmnt = this.FeeRefundAmnt;
			_tmp.PayFlg = this.PayFlg;
			_tmp.FreezeFlg = this.FreezeFlg;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.EdCdeAcadWarnTypeId = this.EdCdeAcadWarnTypeId;
			_tmp.Notes = this.Notes;
			_tmp.SemCount = this.SemCount;
			_tmp.LstSemInYrFlg = this.LstSemInYrFlg;
			_tmp.EdCdeExamTypeId = this.EdCdeExamTypeId;
			_tmp.BhvrMark = this.BhvrMark;
			_tmp.AttndcMark = this.AttndcMark;
			_tmp.AccumChTot = this.AccumChTot;
			_tmp.AccumPointTot = this.AccumPointTot;
			_tmp.ResultApproveFlg = this.ResultApproveFlg;
			_tmp.CalcGpaDate = this.CalcGpaDate;
			_tmp.SeUserCrsApproveId = this.SeUserCrsApproveId;
			_tmp.MigGpaFlg = this.MigGpaFlg;
			_tmp.MajorSemCh = this.MajorSemCh;
			_tmp.MajorAccumCh = this.MajorAccumCh;
			_tmp.ResultApproveMuFlg = this.ResultApproveMuFlg;
			_tmp.GsCdeHonorId = this.GsCdeHonorId;
			_tmp.PrecentCoursesLvl = this.PrecentCoursesLvl;
			_tmp.SeFormId = this.SeFormId;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			_tmp.TransferFlg = this.TransferFlg;
			_tmp.EdCdeStudTypeId = this.EdCdeStudTypeId;
			_tmp.Ugpa = this.Ugpa;
			_tmp.Ucgpa = this.Ucgpa;
			
			#region Source Parent Composite Entities
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				_tmp.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCdeAcadWarnTypeIdSource != null && existingCopies.Contains(this.EdCdeAcadWarnTypeIdSource))
				_tmp.EdCdeAcadWarnTypeIdSource = existingCopies[this.EdCdeAcadWarnTypeIdSource] as EdCdeAcadWarnType;
			else
				_tmp.EdCdeAcadWarnTypeIdSource = MakeCopyOf(this.EdCdeAcadWarnTypeIdSource, existingCopies) as EdCdeAcadWarnType;
			if (this.EdCdeExamTypeIdSource != null && existingCopies.Contains(this.EdCdeExamTypeIdSource))
				_tmp.EdCdeExamTypeIdSource = existingCopies[this.EdCdeExamTypeIdSource] as EdCdeExamType;
			else
				_tmp.EdCdeExamTypeIdSource = MakeCopyOf(this.EdCdeExamTypeIdSource, existingCopies) as EdCdeExamType;
			if (this.EdCdeStudTypeIdSource != null && existingCopies.Contains(this.EdCdeStudTypeIdSource))
				_tmp.EdCdeStudTypeIdSource = existingCopies[this.EdCdeStudTypeIdSource] as EdCdeStudType;
			else
				_tmp.EdCdeStudTypeIdSource = MakeCopyOf(this.EdCdeStudTypeIdSource, existingCopies) as EdCdeStudType;
			if (this.EdCodeEnrollTypeIdSource != null && existingCopies.Contains(this.EdCodeEnrollTypeIdSource))
				_tmp.EdCodeEnrollTypeIdSource = existingCopies[this.EdCodeEnrollTypeIdSource] as EdCodeEnrollType;
			else
				_tmp.EdCodeEnrollTypeIdSource = MakeCopyOf(this.EdCodeEnrollTypeIdSource, existingCopies) as EdCodeEnrollType;
			if (this.EdCodeLevelIdSource != null && existingCopies.Contains(this.EdCodeLevelIdSource))
				_tmp.EdCodeLevelIdSource = existingCopies[this.EdCodeLevelIdSource] as EdCodeLevel;
			else
				_tmp.EdCodeLevelIdSource = MakeCopyOf(this.EdCodeLevelIdSource, existingCopies) as EdCodeLevel;
			if (this.EdCodeLoadTypeIdSource != null && existingCopies.Contains(this.EdCodeLoadTypeIdSource))
				_tmp.EdCodeLoadTypeIdSource = existingCopies[this.EdCodeLoadTypeIdSource] as EdCodeLoadType;
			else
				_tmp.EdCodeLoadTypeIdSource = MakeCopyOf(this.EdCodeLoadTypeIdSource, existingCopies) as EdCodeLoadType;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.FeeFacultyRuleIdSource != null && existingCopies.Contains(this.FeeFacultyRuleIdSource))
				_tmp.FeeFacultyRuleIdSource = existingCopies[this.FeeFacultyRuleIdSource] as FeeFacultyRule;
			else
				_tmp.FeeFacultyRuleIdSource = MakeCopyOf(this.FeeFacultyRuleIdSource, existingCopies) as FeeFacultyRule;
			if (this.GsCdeHonorIdSource != null && existingCopies.Contains(this.GsCdeHonorIdSource))
				_tmp.GsCdeHonorIdSource = existingCopies[this.GsCdeHonorIdSource] as GsCdeHonor;
			else
				_tmp.GsCdeHonorIdSource = MakeCopyOf(this.GsCdeHonorIdSource, existingCopies) as GsCdeHonor;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EdStudCheatCollection = (TList<EdStudCheat>) MakeCopyOf(this.EdStudCheatCollection, existingCopies); 
			_tmp.EdStudIntTransPrefCollection = (TList<EdStudIntTransPref>) MakeCopyOf(this.EdStudIntTransPrefCollection, existingCopies); 
			_tmp.EdStudActvtyRegCollection = (TList<EdStudActvtyReg>) MakeCopyOf(this.EdStudActvtyRegCollection, existingCopies); 
			_tmp.EdStudBranchPrefCollection = (TList<EdStudBranchPref>) MakeCopyOf(this.EdStudBranchPrefCollection, existingCopies); 
			_tmp.EdExamStudAbsenceCollection = (TList<EdExamStudAbsence>) MakeCopyOf(this.EdExamStudAbsenceCollection, existingCopies); 
			_tmp.EdStudEnrollChangeCollection = (TList<EdStudEnrollChange>) MakeCopyOf(this.EdStudEnrollChangeCollection, existingCopies); 
			_tmp.EdStudSemesterExtCollection = (TList<EdStudSemesterExt>) MakeCopyOf(this.EdStudSemesterExtCollection, existingCopies); 
			_tmp.EdStudCourseRegCollection = (TList<EdStudCourseReg>) MakeCopyOf(this.EdStudCourseRegCollection, existingCopies); 
			_tmp.EdStudCourseRplcCollection = (TList<EdStudCourseRplc>) MakeCopyOf(this.EdStudCourseRplcCollection, existingCopies); 
			_tmp.CoStudSecretNumCollection = (TList<CoStudSecretNum>) MakeCopyOf(this.CoStudSecretNumCollection, existingCopies); 
			_tmp.EdStdExamSemesterCollection = (TList<EdStdExamSemester>) MakeCopyOf(this.EdStdExamSemesterCollection, existingCopies); 
			_tmp.MltStudBhvrAttndcCollection = (TList<MltStudBhvrAttndc>) MakeCopyOf(this.MltStudBhvrAttndcCollection, existingCopies); 
			_tmp.EdStudStateCollection = (TList<EdStudState>) MakeCopyOf(this.EdStudStateCollection, existingCopies); 
			_tmp.CoStudCheatCollection = (TList<CoStudCheat>) MakeCopyOf(this.CoStudCheatCollection, existingCopies); 
			_tmp.EdStudExcuseCollection = (TList<EdStudExcuse>) MakeCopyOf(this.EdStudExcuseCollection, existingCopies); 
			_tmp.EdStudClrncReqCollection = (TList<EdStudClrncReq>) MakeCopyOf(this.EdStudClrncReqCollection, existingCopies); 
			_tmp.EdStudStateTempCollection = (TList<EdStudStateTemp>) MakeCopyOf(this.EdStudStateTempCollection, existingCopies); 
			_tmp.EdResidencyStudCollection = (TList<EdResidencyStud>) MakeCopyOf(this.EdResidencyStudCollection, existingCopies); 
			_tmp.EdStudGroupCollection = (TList<EdStudGroup>) MakeCopyOf(this.EdStudGroupCollection, existingCopies); 
			_tmp.CoExamPlaceStudCollection = (TList<CoExamPlaceStud>) MakeCopyOf(this.CoExamPlaceStudCollection, existingCopies); 
			_tmp.EdStudCourseRegTempCollection = (TList<EdStudCourseRegTemp>) MakeCopyOf(this.EdStudCourseRegTempCollection, existingCopies); 
			_tmp.EdStudCourseWaitCollection = (TList<EdStudCourseWait>) MakeCopyOf(this.EdStudCourseWaitCollection, existingCopies); 
			_tmp.EdStudCourseChngCollection = (TList<EdStudCourseChng>) MakeCopyOf(this.EdStudCourseChngCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudSemesterColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdStudSemesterColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudSemesterColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdStudSemesterColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudSemesterColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdStudSemesterColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdStudSemesterEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdStudSemesterEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudSemesterColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdStudSemesterColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdStudSemesterEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdStudSemesterEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdStudSemesterEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdStudSemester"/> object.
	/// </remarks>
	public class EdStudSemesterEventArgs : System.EventArgs
	{
		private EdStudSemesterColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdStudSemesterEventArgs class.
		///</summary>
		public EdStudSemesterEventArgs(EdStudSemesterColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdStudSemesterEventArgs class.
		///</summary>
		public EdStudSemesterEventArgs(EdStudSemesterColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdStudSemesterColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdStudSemesterColumn" />
		public EdStudSemesterColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdStudSemester related events.
	///</summary>
	public delegate void EdStudSemesterEventHandler(object sender, EdStudSemesterEventArgs e);
	
	#region EdStudSemesterComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdStudSemesterComparer : System.Collections.Generic.IComparer<EdStudSemester>
	{
		EdStudSemesterColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudSemesterComparer"/> class.
        /// </summary>
		public EdStudSemesterComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudSemesterComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdStudSemesterComparer(EdStudSemesterColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdStudSemester"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdStudSemester"/> to compare.</param>
        /// <param name="b">The second <c>EdStudSemester</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdStudSemester a, EdStudSemester b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdStudSemester entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdStudSemester a, EdStudSemester b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdStudSemesterColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdStudSemesterKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdStudSemester"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdStudSemesterKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdStudSemesterKey class.
		/// </summary>
		public EdStudSemesterKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudSemesterKey class.
		/// </summary>
		public EdStudSemesterKey(EdStudSemesterBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdStudSemesterId = entity.EdStudSemesterId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudSemesterKey class.
		/// </summary>
		public EdStudSemesterKey(System.Decimal _edStudSemesterId)
		{
			#region Init Properties

			this.EdStudSemesterId = _edStudSemesterId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdStudSemesterBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdStudSemesterBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdStudSemesterId property
		private System.Decimal _edStudSemesterId;
		
		/// <summary>
		/// Gets or sets the EdStudSemesterId property.
		/// </summary>
		public System.Decimal EdStudSemesterId
		{
			get { return _edStudSemesterId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdStudSemesterId = value;
				
				_edStudSemesterId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdStudSemesterId = ( values["EdStudSemesterId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdStudSemesterId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdStudSemesterId", EdStudSemesterId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdStudSemesterId: {0}{1}",
								EdStudSemesterId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdStudSemesterColumn Enum
	
	/// <summary>
	/// Enumerate the EdStudSemester columns.
	/// </summary>
	[Serializable]
	public enum EdStudSemesterColumn : int
	{
		/// <summary>
		/// EdStudSemesterId : 
		/// </summary>
		[EnumTextValue("ED_STUD_SEMESTER_ID")]
		[ColumnEnum("ED_STUD_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdStudSemesterId = 1,
		/// <summary>
		/// EdCodeSemesterId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeSemesterId = 2,
		/// <summary>
		/// EdStudId : 
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudId = 3,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 4,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 5,
		/// <summary>
		/// EdCodeLevelId : 
		/// </summary>
		[EnumTextValue("ED_CODE_LEVEL_ID")]
		[ColumnEnum("ED_CODE_LEVEL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeLevelId = 6,
		/// <summary>
		/// IsLast : 
		/// </summary>
		[EnumTextValue("IS_LAST")]
		[ColumnEnum("IS_LAST", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsLast = 7,
		/// <summary>
		/// EdCodeLoadTypeId : 
		/// </summary>
		[EnumTextValue("ED_CODE_LOAD_TYPE_ID")]
		[ColumnEnum("ED_CODE_LOAD_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeLoadTypeId = 8,
		/// <summary>
		/// EdCodeEnrollTypeId : 
		/// </summary>
		[EnumTextValue("ED_CODE_ENROLL_TYPE_ID")]
		[ColumnEnum("ED_CODE_ENROLL_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeEnrollTypeId = 9,
		/// <summary>
		/// AccumCh : earned hours> الساعات المجتازة المكتسبة 
		/// </summary>
		[EnumTextValue("ACCUM_CH")]
		[ColumnEnum("ACCUM_CH", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AccumCh = 10,
		/// <summary>
		/// AccumGpa : 
		/// </summary>
		[EnumTextValue("ACCUM_GPA")]
		[ColumnEnum("ACCUM_GPA", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AccumGpa = 11,
		/// <summary>
		/// IsCourseApproved :  اعتماد تسجيل طالب  
		/// </summary>
		[EnumTextValue("IS_COURSE_APPROVED")]
		[ColumnEnum("IS_COURSE_APPROVED", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsCourseApproved = 12,
		/// <summary>
		/// CourseApproveDate :  اعتماد تسجيل طالب
		/// </summary>
		[EnumTextValue("COURSE_APPROVE_DATE")]
		[ColumnEnum("COURSE_APPROVE_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CourseApproveDate = 13,
		/// <summary>
		/// AccumPoint : 
		/// </summary>
		[EnumTextValue("ACCUM_POINT")]
		[ColumnEnum("ACCUM_POINT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AccumPoint = 14,
		/// <summary>
		/// SemCh : earned hours> الساعات المجتازة المكتسبة 
		/// </summary>
		[EnumTextValue("SEM_CH")]
		[ColumnEnum("SEM_CH", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SemCh = 15,
		/// <summary>
		/// SemGpa : 
		/// </summary>
		[EnumTextValue("SEM_GPA")]
		[ColumnEnum("SEM_GPA", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SemGpa = 16,
		/// <summary>
		/// SemPoint : 
		/// </summary>
		[EnumTextValue("SEM_POINT")]
		[ColumnEnum("SEM_POINT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SemPoint = 17,
		/// <summary>
		/// IsClosed : 
		/// </summary>
		[EnumTextValue("IS_CLOSED")]
		[ColumnEnum("IS_CLOSED", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsClosed = 18,
		/// <summary>
		/// MajorCgpa : 
		/// </summary>
		[EnumTextValue("MAJOR_CGPA")]
		[ColumnEnum("MAJOR_CGPA", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MajorCgpa = 19,
		/// <summary>
		/// MajorGpa : 
		/// </summary>
		[EnumTextValue("MAJOR_GPA")]
		[ColumnEnum("MAJOR_GPA", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MajorGpa = 20,
		/// <summary>
		/// AcdPlnLoadFlg : 
		/// </summary>
		[EnumTextValue("ACD_PLN_LOAD_FLG")]
		[ColumnEnum("ACD_PLN_LOAD_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AcdPlnLoadFlg = 21,
		/// <summary>
		/// OnlineFlg : 
		/// </summary>
		[EnumTextValue("ONLINE_FLG")]
		[ColumnEnum("ONLINE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		OnlineFlg = 22,
		/// <summary>
		/// ExpForGrad : 
		/// </summary>
		[EnumTextValue("EXP_FOR_GRAD")]
		[ColumnEnum("EXP_FOR_GRAD", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ExpForGrad = 23,
		/// <summary>
		/// HoldForGrad : 
		/// </summary>
		[EnumTextValue("HOLD_FOR_GRAD")]
		[ColumnEnum("HOLD_FOR_GRAD", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HoldForGrad = 24,
		/// <summary>
		/// OrientFlg : 
		/// </summary>
		[EnumTextValue("ORIENT_FLG")]
		[ColumnEnum("ORIENT_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		OrientFlg = 25,
		/// <summary>
		/// NationalitySimilarityFlg : 
		/// </summary>
		[EnumTextValue("NATIONALITY_SIMILARITY_FLG")]
		[ColumnEnum("NATIONALITY_SIMILARITY_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		NationalitySimilarityFlg = 26,
		/// <summary>
		/// FeeFacultyRuleId : 
		/// </summary>
		[EnumTextValue("FEE_FACULTY_RULE_ID")]
		[ColumnEnum("FEE_FACULTY_RULE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeeFacultyRuleId = 27,
		/// <summary>
		/// StudCardStkrFlg : 
		/// </summary>
		[EnumTextValue("STUD_CARD_STKR_FLG")]
		[ColumnEnum("STUD_CARD_STKR_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		StudCardStkrFlg = 28,
		/// <summary>
		/// StudCardStkrDate : 
		/// </summary>
		[EnumTextValue("STUD_CARD_STKR_DATE")]
		[ColumnEnum("STUD_CARD_STKR_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		StudCardStkrDate = 29,
		/// <summary>
		/// FeeTotAmnt : 
		/// </summary>
		[EnumTextValue("FEE_TOT_AMNT")]
		[ColumnEnum("FEE_TOT_AMNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeeTotAmnt = 30,
		/// <summary>
		/// FeePayAmnt : 
		/// </summary>
		[EnumTextValue("FEE_PAY_AMNT")]
		[ColumnEnum("FEE_PAY_AMNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeePayAmnt = 31,
		/// <summary>
		/// FeeRefundAmnt : 
		/// </summary>
		[EnumTextValue("FEE_REFUND_AMNT")]
		[ColumnEnum("FEE_REFUND_AMNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeeRefundAmnt = 32,
		/// <summary>
		/// PayFlg : 
		/// </summary>
		[EnumTextValue("PAY_FLG")]
		[ColumnEnum("PAY_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		PayFlg = 33,
		/// <summary>
		/// FreezeFlg : 
		/// </summary>
		[EnumTextValue("FREEZE_FLG")]
		[ColumnEnum("FREEZE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		FreezeFlg = 34,
		/// <summary>
		/// AsCodeDegreeId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_ID")]
		[ColumnEnum("AS_CODE_DEGREE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeId = 35,
		/// <summary>
		/// EdCdeAcadWarnTypeId : 
		/// </summary>
		[EnumTextValue("ED_CDE_ACAD_WARN_TYPE_ID")]
		[ColumnEnum("ED_CDE_ACAD_WARN_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCdeAcadWarnTypeId = 36,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 300)]
		Notes = 37,
		/// <summary>
		/// SemCount : 
		/// </summary>
		[EnumTextValue("SEM_COUNT")]
		[ColumnEnum("SEM_COUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SemCount = 38,
		/// <summary>
		/// LstSemInYrFlg : 
		/// </summary>
		[EnumTextValue("LST_SEM_IN_YR_FLG")]
		[ColumnEnum("LST_SEM_IN_YR_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		LstSemInYrFlg = 39,
		/// <summary>
		/// EdCdeExamTypeId : نوع الامتحان: تكميلى- اعادة
		/// </summary>
		[EnumTextValue("ED_CDE_EXAM_TYPE_ID")]
		[ColumnEnum("ED_CDE_EXAM_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCdeExamTypeId = 40,
		/// <summary>
		/// BhvrMark : 
		/// </summary>
		[EnumTextValue("BHVR_MARK")]
		[ColumnEnum("BHVR_MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		BhvrMark = 41,
		/// <summary>
		/// AttndcMark : 
		/// </summary>
		[EnumTextValue("ATTNDC_MARK")]
		[ColumnEnum("ATTNDC_MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AttndcMark = 42,
		/// <summary>
		/// AccumChTot : 
		/// </summary>
		[EnumTextValue("ACCUM_CH_TOT")]
		[ColumnEnum("ACCUM_CH_TOT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AccumChTot = 43,
		/// <summary>
		/// AccumPointTot : 
		/// </summary>
		[EnumTextValue("ACCUM_POINT_TOT")]
		[ColumnEnum("ACCUM_POINT_TOT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AccumPointTot = 44,
		/// <summary>
		/// ResultApproveFlg : اعتماد نتيجة الدور الاول
		/// </summary>
		[EnumTextValue("RESULT_APPROVE_FLG")]
		[ColumnEnum("RESULT_APPROVE_FLG", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ResultApproveFlg = 45,
		/// <summary>
		/// CalcGpaDate : 
		/// </summary>
		[EnumTextValue("CALC_GPA_DATE")]
		[ColumnEnum("CALC_GPA_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CalcGpaDate = 46,
		/// <summary>
		/// SeUserCrsApproveId :  اعتماد تسجيل طالب
		/// </summary>
		[EnumTextValue("SE_USER_CRS_APPROVE_ID")]
		[ColumnEnum("SE_USER_CRS_APPROVE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserCrsApproveId = 47,
		/// <summary>
		/// MigGpaFlg : 
		/// </summary>
		[EnumTextValue("MIG_GPA_FLG")]
		[ColumnEnum("MIG_GPA_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		MigGpaFlg = 48,
		/// <summary>
		/// MajorSemCh : مقررات داخل  خطة الطالب او مقرر مكافيئ لمقرر  فى الخطة
		/// </summary>
		[EnumTextValue("MAJOR_SEM_CH")]
		[ColumnEnum("MAJOR_SEM_CH", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MajorSemCh = 49,
		/// <summary>
		/// MajorAccumCh : مقررات داخل  خطة الطالب او مقرر مكافيئ لمقرر  فى الخطة
		/// </summary>
		[EnumTextValue("MAJOR_ACCUM_CH")]
		[ColumnEnum("MAJOR_ACCUM_CH", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MajorAccumCh = 50,
		/// <summary>
		/// ResultApproveMuFlg : اعتماد نتيجة الدور التانى للفصل
		/// </summary>
		[EnumTextValue("RESULT_APPROVE_MU_FLG")]
		[ColumnEnum("RESULT_APPROVE_MU_FLG", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ResultApproveMuFlg = 51,
		/// <summary>
		/// GsCdeHonorId : KTCH مرتبو الشرف الفصلية
		/// </summary>
		[EnumTextValue("GS_CDE_HONOR_ID")]
		[ColumnEnum("GS_CDE_HONOR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCdeHonorId = 52,
		/// <summary>
		/// PrecentCoursesLvl : precentage of all courses  which check to pass foundation level /النسبة الكليه التى حصل عليها الطالب فى المقررات لمقارنتها بنسبة معينة للالتحاق بعام تمهيدى جديد / CAT univ
		/// </summary>
		[EnumTextValue("PRECENT_COURSES_LVL")]
		[ColumnEnum("PRECENT_COURSES_LVL", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PrecentCoursesLvl = 53,
		/// <summary>
		/// SeFormId : 
		/// </summary>
		[EnumTextValue("SE_FORM_ID")]
		[ColumnEnum("SE_FORM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeFormId = 54,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 55,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 56,
		/// <summary>
		/// TransferFlg : 
		/// </summary>
		[EnumTextValue("Transfer_Flg")]
		[ColumnEnum("Transfer_Flg", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		TransferFlg = 57,
		/// <summary>
		/// EdCdeStudTypeId : burimi
		/// </summary>
		[EnumTextValue("ED_CDE_STUD_TYPE_ID")]
		[ColumnEnum("ED_CDE_STUD_TYPE_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		EdCdeStudTypeId = 58,
		/// <summary>
		/// Ugpa : 
		/// </summary>
		[EnumTextValue("UGPA")]
		[ColumnEnum("UGPA", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Ugpa = 59,
		/// <summary>
		/// Ucgpa : 
		/// </summary>
		[EnumTextValue("UCGPA")]
		[ColumnEnum("UCGPA", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Ucgpa = 60
	}//End enum

	#endregion EdStudSemesterColumn Enum

} // end namespace
