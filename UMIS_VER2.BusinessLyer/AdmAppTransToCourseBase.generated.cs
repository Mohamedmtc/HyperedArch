
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AdmAppTransToCourse.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ADM_APP_TRANS_TO_COURSE' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AdmAppTransToCourseBase : EntityBase, IAdmAppTransToCourse, IEntityId<AdmAppTransToCourseKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AdmAppTransToCourseEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AdmAppTransToCourseEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AdmAppTransToCourseEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AdmAppTransToCourse> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmAppTransToCourseEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmAppTransToCourseEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AdmAppTransToCourseBase"/> instance.
		///</summary>
		public AdmAppTransToCourseBase()
		{
			this.entityData = new AdmAppTransToCourseEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AdmAppTransToCourseBase"/> instance.
		///</summary>
		///<param name="_admAppTransToCourseId"></param>
		///<param name="_admAppTransReqId"></param>
		///<param name="_entCoursePkgHdrId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_edCodeTransCourseTypeId"></param>
		///<param name="_edCodeGradingId"></param>
		///<param name="_coursePoint"></param>
		///<param name="_addGpaFlg">=0 not calculated --- =1 calculate course in gpa&CH ---2 Calculated in CH only</param>
		///<param name="_addMjrgpaFlg"></param>
		///<param name="_gsCodePassFailId"></param>
		///<param name="_entPolicyGradingHdrId"></param>
		public AdmAppTransToCourseBase(System.Decimal _admAppTransToCourseId, System.Decimal _admAppTransReqId, 
			System.Decimal? _entCoursePkgHdrId, System.Decimal _edCourseId, System.Decimal _edCodeTransCourseTypeId, 
			System.Decimal? _edCodeGradingId, System.Decimal? _coursePoint, System.Decimal _addGpaFlg, 
			System.Decimal _addMjrgpaFlg, System.Decimal? _gsCodePassFailId, System.Decimal? _entPolicyGradingHdrId)
		{
			this.entityData = new AdmAppTransToCourseEntityData();
			this.backupData = null;

			this.AdmAppTransToCourseId = _admAppTransToCourseId;
			this.AdmAppTransReqId = _admAppTransReqId;
			this.EntCoursePkgHdrId = _entCoursePkgHdrId;
			this.EdCourseId = _edCourseId;
			this.EdCodeTransCourseTypeId = _edCodeTransCourseTypeId;
			this.EdCodeGradingId = _edCodeGradingId;
			this.CoursePoint = _coursePoint;
			this.AddGpaFlg = _addGpaFlg;
			this.AddMjrgpaFlg = _addMjrgpaFlg;
			this.GsCodePassFailId = _gsCodePassFailId;
			this.EntPolicyGradingHdrId = _entPolicyGradingHdrId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AdmAppTransToCourse"/> instance.
		///</summary>
		///<param name="_admAppTransToCourseId"></param>
		///<param name="_admAppTransReqId"></param>
		///<param name="_entCoursePkgHdrId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_edCodeTransCourseTypeId"></param>
		///<param name="_edCodeGradingId"></param>
		///<param name="_coursePoint"></param>
		///<param name="_addGpaFlg">=0 not calculated --- =1 calculate course in gpa&CH ---2 Calculated in CH only</param>
		///<param name="_addMjrgpaFlg"></param>
		///<param name="_gsCodePassFailId"></param>
		///<param name="_entPolicyGradingHdrId"></param>
		public static AdmAppTransToCourse CreateAdmAppTransToCourse(System.Decimal _admAppTransToCourseId, System.Decimal _admAppTransReqId, 
			System.Decimal? _entCoursePkgHdrId, System.Decimal _edCourseId, System.Decimal _edCodeTransCourseTypeId, 
			System.Decimal? _edCodeGradingId, System.Decimal? _coursePoint, System.Decimal _addGpaFlg, 
			System.Decimal _addMjrgpaFlg, System.Decimal? _gsCodePassFailId, System.Decimal? _entPolicyGradingHdrId)
		{
			AdmAppTransToCourse newAdmAppTransToCourse = new AdmAppTransToCourse();
			newAdmAppTransToCourse.AdmAppTransToCourseId = _admAppTransToCourseId;
			newAdmAppTransToCourse.AdmAppTransReqId = _admAppTransReqId;
			newAdmAppTransToCourse.EntCoursePkgHdrId = _entCoursePkgHdrId;
			newAdmAppTransToCourse.EdCourseId = _edCourseId;
			newAdmAppTransToCourse.EdCodeTransCourseTypeId = _edCodeTransCourseTypeId;
			newAdmAppTransToCourse.EdCodeGradingId = _edCodeGradingId;
			newAdmAppTransToCourse.CoursePoint = _coursePoint;
			newAdmAppTransToCourse.AddGpaFlg = _addGpaFlg;
			newAdmAppTransToCourse.AddMjrgpaFlg = _addMjrgpaFlg;
			newAdmAppTransToCourse.GsCodePassFailId = _gsCodePassFailId;
			newAdmAppTransToCourse.EntPolicyGradingHdrId = _entPolicyGradingHdrId;
			return newAdmAppTransToCourse;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AdmAppTransToCourseId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal AdmAppTransToCourseId
		{
			get
			{
				return this.entityData.AdmAppTransToCourseId; 
			}
			
			set
			{
				if (this.entityData.AdmAppTransToCourseId == value)
					return;
					
				OnColumnChanging(AdmAppTransToCourseColumn.AdmAppTransToCourseId, this.entityData.AdmAppTransToCourseId);
				this.entityData.AdmAppTransToCourseId = value;
				this.EntityId.AdmAppTransToCourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransToCourseColumn.AdmAppTransToCourseId, this.entityData.AdmAppTransToCourseId);
				OnPropertyChanged("AdmAppTransToCourseId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ADM_APP_TRANS_TO_COURSE_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ADM_APP_TRANS_TO_COURSE_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalAdmAppTransToCourseId
		{
			get { return this.entityData.OriginalAdmAppTransToCourseId; }
			set { this.entityData.OriginalAdmAppTransToCourseId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the AdmAppTransReqId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AdmAppTransReqId
		{
			get
			{
				return this.entityData.AdmAppTransReqId; 
			}
			
			set
			{
				if (this.entityData.AdmAppTransReqId == value)
					return;
					
				OnColumnChanging(AdmAppTransToCourseColumn.AdmAppTransReqId, this.entityData.AdmAppTransReqId);
				this.entityData.AdmAppTransReqId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransToCourseColumn.AdmAppTransReqId, this.entityData.AdmAppTransReqId);
				OnPropertyChanged("AdmAppTransReqId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntCoursePkgHdrId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntCoursePkgHdrIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntCoursePkgHdrId
		{
			get
			{
				return this.entityData.EntCoursePkgHdrId; 
			}
			
			set
			{
				if (this.entityData.EntCoursePkgHdrId == value)
					return;
					
				OnColumnChanging(AdmAppTransToCourseColumn.EntCoursePkgHdrId, this.entityData.EntCoursePkgHdrId);
				this.entityData.EntCoursePkgHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransToCourseColumn.EntCoursePkgHdrId, this.entityData.EntCoursePkgHdrId);
				OnPropertyChanged("EntCoursePkgHdrId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCourseId
		{
			get
			{
				return this.entityData.EdCourseId; 
			}
			
			set
			{
				if (this.entityData.EdCourseId == value)
					return;
					
				OnColumnChanging(AdmAppTransToCourseColumn.EdCourseId, this.entityData.EdCourseId);
				this.entityData.EdCourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransToCourseColumn.EdCourseId, this.entityData.EdCourseId);
				OnPropertyChanged("EdCourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeTransCourseTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeTransCourseTypeId
		{
			get
			{
				return this.entityData.EdCodeTransCourseTypeId; 
			}
			
			set
			{
				if (this.entityData.EdCodeTransCourseTypeId == value)
					return;
					
				OnColumnChanging(AdmAppTransToCourseColumn.EdCodeTransCourseTypeId, this.entityData.EdCodeTransCourseTypeId);
				this.entityData.EdCodeTransCourseTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransToCourseColumn.EdCodeTransCourseTypeId, this.entityData.EdCodeTransCourseTypeId);
				OnPropertyChanged("EdCodeTransCourseTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeGradingId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeGradingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeGradingId
		{
			get
			{
				return this.entityData.EdCodeGradingId; 
			}
			
			set
			{
				if (this.entityData.EdCodeGradingId == value)
					return;
					
				OnColumnChanging(AdmAppTransToCourseColumn.EdCodeGradingId, this.entityData.EdCodeGradingId);
				this.entityData.EdCodeGradingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransToCourseColumn.EdCodeGradingId, this.entityData.EdCodeGradingId);
				OnPropertyChanged("EdCodeGradingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CoursePoint property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCoursePointNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CoursePoint
		{
			get
			{
				return this.entityData.CoursePoint; 
			}
			
			set
			{
				if (this.entityData.CoursePoint == value)
					return;
					
				OnColumnChanging(AdmAppTransToCourseColumn.CoursePoint, this.entityData.CoursePoint);
				this.entityData.CoursePoint = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransToCourseColumn.CoursePoint, this.entityData.CoursePoint);
				OnPropertyChanged("CoursePoint");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AddGpaFlg property. 
		///		=0 not calculated --- =1 calculate course in gpa&CH ---2 Calculated in CH only
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"=0 not calculated --- =1 calculate course in gpa&CH ---2 Calculated in CH only"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AddGpaFlg
		{
			get
			{
				return this.entityData.AddGpaFlg; 
			}
			
			set
			{
				if (this.entityData.AddGpaFlg == value)
					return;
					
				OnColumnChanging(AdmAppTransToCourseColumn.AddGpaFlg, this.entityData.AddGpaFlg);
				this.entityData.AddGpaFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransToCourseColumn.AddGpaFlg, this.entityData.AddGpaFlg);
				OnPropertyChanged("AddGpaFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AddMjrgpaFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AddMjrgpaFlg
		{
			get
			{
				return this.entityData.AddMjrgpaFlg; 
			}
			
			set
			{
				if (this.entityData.AddMjrgpaFlg == value)
					return;
					
				OnColumnChanging(AdmAppTransToCourseColumn.AddMjrgpaFlg, this.entityData.AddMjrgpaFlg);
				this.entityData.AddMjrgpaFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransToCourseColumn.AddMjrgpaFlg, this.entityData.AddMjrgpaFlg);
				OnPropertyChanged("AddMjrgpaFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodePassFailId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCodePassFailIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCodePassFailId
		{
			get
			{
				return this.entityData.GsCodePassFailId; 
			}
			
			set
			{
				if (this.entityData.GsCodePassFailId == value)
					return;
					
				OnColumnChanging(AdmAppTransToCourseColumn.GsCodePassFailId, this.entityData.GsCodePassFailId);
				this.entityData.GsCodePassFailId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransToCourseColumn.GsCodePassFailId, this.entityData.GsCodePassFailId);
				OnPropertyChanged("GsCodePassFailId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntPolicyGradingHdrId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntPolicyGradingHdrIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntPolicyGradingHdrId
		{
			get
			{
				return this.entityData.EntPolicyGradingHdrId; 
			}
			
			set
			{
				if (this.entityData.EntPolicyGradingHdrId == value)
					return;
					
				OnColumnChanging(AdmAppTransToCourseColumn.EntPolicyGradingHdrId, this.entityData.EntPolicyGradingHdrId);
				this.entityData.EntPolicyGradingHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppTransToCourseColumn.EntPolicyGradingHdrId, this.entityData.EntPolicyGradingHdrId);
				OnPropertyChanged("EntPolicyGradingHdrId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdmAppTransReq"/>.
		/// </summary>
		/// <value>The source AdmAppTransReq for AdmAppTransReqId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmAppTransReq AdmAppTransReqIdSource
      	{
            get { return entityData.AdmAppTransReqIdSource; }
            set { entityData.AdmAppTransReqIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeGradingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeGrading EdCodeGradingIdSource
      	{
            get { return entityData.EdCodeGradingIdSource; }
            set { entityData.EdCodeGradingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeTransCourseType"/>.
		/// </summary>
		/// <value>The source EdCodeTransCourseType for EdCodeTransCourseTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeTransCourseType EdCodeTransCourseTypeIdSource
      	{
            get { return entityData.EdCodeTransCourseTypeIdSource; }
            set { entityData.EdCodeTransCourseTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return entityData.EdCourseIdSource; }
            set { entityData.EdCourseIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntCoursePkgHdr"/>.
		/// </summary>
		/// <value>The source EntCoursePkgHdr for EntCoursePkgHdrId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntCoursePkgHdr EntCoursePkgHdrIdSource
      	{
            get { return entityData.EntCoursePkgHdrIdSource; }
            set { entityData.EntCoursePkgHdrIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntPolicyGradingHdr"/>.
		/// </summary>
		/// <value>The source EntPolicyGradingHdr for EntPolicyGradingHdrId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntPolicyGradingHdr EntPolicyGradingHdrIdSource
      	{
            get { return entityData.EntPolicyGradingHdrIdSource; }
            set { entityData.EntPolicyGradingHdrIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodePassFail"/>.
		/// </summary>
		/// <value>The source GsCodePassFail for GsCodePassFailId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodePassFail GsCodePassFailIdSource
      	{
            get { return entityData.GsCodePassFailIdSource; }
            set { entityData.GsCodePassFailIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of AdmAppTransBalance objects
		///	which are related to this object through the relation FK_ADM_APP_TRANS_BALANCEE_ADM_APP_TRANS_BALANCE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppTransBalance> AdmAppTransBalanceCollection
		{
			get { return entityData.AdmAppTransBalanceCollection; }
			set { entityData.AdmAppTransBalanceCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ADM_APP_TRANS_TO_COURSE"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ADM_APP_TRANS_TO_COURSE_ID", "ADM_APP_TRANS_REQ_ID", "ENT_COURSE_PKG_HDR_ID", "ED_COURSE_ID", "ED_CODE_TRANS_COURSE_TYPE_ID", "ED_CODE_GRADING_ID", "COURSE_POINT", "ADD_GPA_FLG", "ADD_MJRGPA_FLG", "GS_CODE_PASS_FAIL_ID", "ENT_POLICY_GRADING_HDR_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AdmAppTransToCourseEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AdmAppTransToCourse) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AdmAppTransToCourse>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AdmAppTransToCourse);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AdmAppTransToCourse Entity 
		///</summary>
		protected virtual AdmAppTransToCourse Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AdmAppTransToCourse copy = new AdmAppTransToCourse();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AdmAppTransToCourseId = this.AdmAppTransToCourseId;
					copy.OriginalAdmAppTransToCourseId = this.OriginalAdmAppTransToCourseId;
				copy.AdmAppTransReqId = this.AdmAppTransReqId;
				copy.EntCoursePkgHdrId = this.EntCoursePkgHdrId;
				copy.EdCourseId = this.EdCourseId;
				copy.EdCodeTransCourseTypeId = this.EdCodeTransCourseTypeId;
				copy.EdCodeGradingId = this.EdCodeGradingId;
				copy.CoursePoint = this.CoursePoint;
				copy.AddGpaFlg = this.AddGpaFlg;
				copy.AddMjrgpaFlg = this.AddMjrgpaFlg;
				copy.GsCodePassFailId = this.GsCodePassFailId;
				copy.EntPolicyGradingHdrId = this.EntPolicyGradingHdrId;
			
			if (this.AdmAppTransReqIdSource != null && existingCopies.Contains(this.AdmAppTransReqIdSource))
				copy.AdmAppTransReqIdSource = existingCopies[this.AdmAppTransReqIdSource] as AdmAppTransReq;
			else
				copy.AdmAppTransReqIdSource = MakeCopyOf(this.AdmAppTransReqIdSource, existingCopies) as AdmAppTransReq;
			if (this.EdCodeGradingIdSource != null && existingCopies.Contains(this.EdCodeGradingIdSource))
				copy.EdCodeGradingIdSource = existingCopies[this.EdCodeGradingIdSource] as EdCodeGrading;
			else
				copy.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource, existingCopies) as EdCodeGrading;
			if (this.EdCodeTransCourseTypeIdSource != null && existingCopies.Contains(this.EdCodeTransCourseTypeIdSource))
				copy.EdCodeTransCourseTypeIdSource = existingCopies[this.EdCodeTransCourseTypeIdSource] as EdCodeTransCourseType;
			else
				copy.EdCodeTransCourseTypeIdSource = MakeCopyOf(this.EdCodeTransCourseTypeIdSource, existingCopies) as EdCodeTransCourseType;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				copy.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				copy.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EntCoursePkgHdrIdSource != null && existingCopies.Contains(this.EntCoursePkgHdrIdSource))
				copy.EntCoursePkgHdrIdSource = existingCopies[this.EntCoursePkgHdrIdSource] as EntCoursePkgHdr;
			else
				copy.EntCoursePkgHdrIdSource = MakeCopyOf(this.EntCoursePkgHdrIdSource, existingCopies) as EntCoursePkgHdr;
			if (this.EntPolicyGradingHdrIdSource != null && existingCopies.Contains(this.EntPolicyGradingHdrIdSource))
				copy.EntPolicyGradingHdrIdSource = existingCopies[this.EntPolicyGradingHdrIdSource] as EntPolicyGradingHdr;
			else
				copy.EntPolicyGradingHdrIdSource = MakeCopyOf(this.EntPolicyGradingHdrIdSource, existingCopies) as EntPolicyGradingHdr;
			if (this.GsCodePassFailIdSource != null && existingCopies.Contains(this.GsCodePassFailIdSource))
				copy.GsCodePassFailIdSource = existingCopies[this.GsCodePassFailIdSource] as GsCodePassFail;
			else
				copy.GsCodePassFailIdSource = MakeCopyOf(this.GsCodePassFailIdSource, existingCopies) as GsCodePassFail;
		
			//deep copy nested objects
			copy.AdmAppTransBalanceCollection = (TList<AdmAppTransBalance>) MakeCopyOf(this.AdmAppTransBalanceCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AdmAppTransToCourse Entity 
		///</summary>
		public virtual AdmAppTransToCourse Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AdmAppTransToCourse Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AdmAppTransToCourse DeepCopy()
		{
			return EntityHelper.Clone<AdmAppTransToCourse>(this as AdmAppTransToCourse);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AdmAppTransToCourseEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AdmAppTransToCourseEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AdmAppTransToCourseEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AdmAppTransToCourseColumn column)
		{
			switch(column)
			{
					case AdmAppTransToCourseColumn.AdmAppTransToCourseId:
					return entityData.AdmAppTransToCourseId != _originalData.AdmAppTransToCourseId;
					case AdmAppTransToCourseColumn.AdmAppTransReqId:
					return entityData.AdmAppTransReqId != _originalData.AdmAppTransReqId;
					case AdmAppTransToCourseColumn.EntCoursePkgHdrId:
					return entityData.EntCoursePkgHdrId != _originalData.EntCoursePkgHdrId;
					case AdmAppTransToCourseColumn.EdCourseId:
					return entityData.EdCourseId != _originalData.EdCourseId;
					case AdmAppTransToCourseColumn.EdCodeTransCourseTypeId:
					return entityData.EdCodeTransCourseTypeId != _originalData.EdCodeTransCourseTypeId;
					case AdmAppTransToCourseColumn.EdCodeGradingId:
					return entityData.EdCodeGradingId != _originalData.EdCodeGradingId;
					case AdmAppTransToCourseColumn.CoursePoint:
					return entityData.CoursePoint != _originalData.CoursePoint;
					case AdmAppTransToCourseColumn.AddGpaFlg:
					return entityData.AddGpaFlg != _originalData.AddGpaFlg;
					case AdmAppTransToCourseColumn.AddMjrgpaFlg:
					return entityData.AddMjrgpaFlg != _originalData.AddMjrgpaFlg;
					case AdmAppTransToCourseColumn.GsCodePassFailId:
					return entityData.GsCodePassFailId != _originalData.GsCodePassFailId;
					case AdmAppTransToCourseColumn.EntPolicyGradingHdrId:
					return entityData.EntPolicyGradingHdrId != _originalData.EntPolicyGradingHdrId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AdmAppTransToCourseColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AdmAppTransToCourseId != _originalData.AdmAppTransToCourseId;
			result = result || entityData.AdmAppTransReqId != _originalData.AdmAppTransReqId;
			result = result || entityData.EntCoursePkgHdrId != _originalData.EntCoursePkgHdrId;
			result = result || entityData.EdCourseId != _originalData.EdCourseId;
			result = result || entityData.EdCodeTransCourseTypeId != _originalData.EdCodeTransCourseTypeId;
			result = result || entityData.EdCodeGradingId != _originalData.EdCodeGradingId;
			result = result || entityData.CoursePoint != _originalData.CoursePoint;
			result = result || entityData.AddGpaFlg != _originalData.AddGpaFlg;
			result = result || entityData.AddMjrgpaFlg != _originalData.AddMjrgpaFlg;
			result = result || entityData.GsCodePassFailId != _originalData.GsCodePassFailId;
			result = result || entityData.EntPolicyGradingHdrId != _originalData.EntPolicyGradingHdrId;
			return result;
		}	
		
		///<summary>
		///  Returns a AdmAppTransToCourse Entity with the original data.
		///</summary>
		public AdmAppTransToCourse GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAdmAppTransToCourse(
				_originalData.AdmAppTransToCourseId,
				_originalData.AdmAppTransReqId,
				_originalData.EntCoursePkgHdrId,
				_originalData.EdCourseId,
				_originalData.EdCodeTransCourseTypeId,
				_originalData.EdCodeGradingId,
				_originalData.CoursePoint,
				_originalData.AddGpaFlg,
				_originalData.AddMjrgpaFlg,
				_originalData.GsCodePassFailId,
				_originalData.EntPolicyGradingHdrId
				);
				
			return (AdmAppTransToCourse)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AdmAppTransToCourseBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AdmAppTransToCourseBase)
				return ValueEquals(this, (AdmAppTransToCourseBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AdmAppTransToCourseBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AdmAppTransToCourseId.GetHashCode() ^ 
					this.AdmAppTransReqId.GetHashCode() ^ 
					((this.EntCoursePkgHdrId == null) ? string.Empty : this.EntCoursePkgHdrId.ToString()).GetHashCode() ^ 
					this.EdCourseId.GetHashCode() ^ 
					this.EdCodeTransCourseTypeId.GetHashCode() ^ 
					((this.EdCodeGradingId == null) ? string.Empty : this.EdCodeGradingId.ToString()).GetHashCode() ^ 
					((this.CoursePoint == null) ? string.Empty : this.CoursePoint.ToString()).GetHashCode() ^ 
					this.AddGpaFlg.GetHashCode() ^ 
					this.AddMjrgpaFlg.GetHashCode() ^ 
					((this.GsCodePassFailId == null) ? string.Empty : this.GsCodePassFailId.ToString()).GetHashCode() ^ 
					((this.EntPolicyGradingHdrId == null) ? string.Empty : this.EntPolicyGradingHdrId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AdmAppTransToCourseBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AdmAppTransToCourseBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AdmAppTransToCourseBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AdmAppTransToCourseBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AdmAppTransToCourseBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AdmAppTransToCourseBase Object1, AdmAppTransToCourseBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AdmAppTransToCourseId != Object2.AdmAppTransToCourseId)
				equal = false;
			if (Object1.AdmAppTransReqId != Object2.AdmAppTransReqId)
				equal = false;
			if ( Object1.EntCoursePkgHdrId != null && Object2.EntCoursePkgHdrId != null )
			{
				if (Object1.EntCoursePkgHdrId != Object2.EntCoursePkgHdrId)
					equal = false;
			}
			else if (Object1.EntCoursePkgHdrId == null ^ Object2.EntCoursePkgHdrId == null )
			{
				equal = false;
			}
			if (Object1.EdCourseId != Object2.EdCourseId)
				equal = false;
			if (Object1.EdCodeTransCourseTypeId != Object2.EdCodeTransCourseTypeId)
				equal = false;
			if ( Object1.EdCodeGradingId != null && Object2.EdCodeGradingId != null )
			{
				if (Object1.EdCodeGradingId != Object2.EdCodeGradingId)
					equal = false;
			}
			else if (Object1.EdCodeGradingId == null ^ Object2.EdCodeGradingId == null )
			{
				equal = false;
			}
			if ( Object1.CoursePoint != null && Object2.CoursePoint != null )
			{
				if (Object1.CoursePoint != Object2.CoursePoint)
					equal = false;
			}
			else if (Object1.CoursePoint == null ^ Object2.CoursePoint == null )
			{
				equal = false;
			}
			if (Object1.AddGpaFlg != Object2.AddGpaFlg)
				equal = false;
			if (Object1.AddMjrgpaFlg != Object2.AddMjrgpaFlg)
				equal = false;
			if ( Object1.GsCodePassFailId != null && Object2.GsCodePassFailId != null )
			{
				if (Object1.GsCodePassFailId != Object2.GsCodePassFailId)
					equal = false;
			}
			else if (Object1.GsCodePassFailId == null ^ Object2.GsCodePassFailId == null )
			{
				equal = false;
			}
			if ( Object1.EntPolicyGradingHdrId != null && Object2.EntPolicyGradingHdrId != null )
			{
				if (Object1.EntPolicyGradingHdrId != Object2.EntPolicyGradingHdrId)
					equal = false;
			}
			else if (Object1.EntPolicyGradingHdrId == null ^ Object2.EntPolicyGradingHdrId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AdmAppTransToCourseBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AdmAppTransToCourseComparer GetComparer()
        {
            return new AdmAppTransToCourseComparer();
        }
        */

        // Comparer delegates back to AdmAppTransToCourse
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AdmAppTransToCourse rhs, AdmAppTransToCourseColumn which)
        {
            switch (which)
            {
            	
            	
            	case AdmAppTransToCourseColumn.AdmAppTransToCourseId:
            		return this.AdmAppTransToCourseId.CompareTo(rhs.AdmAppTransToCourseId);
            		
            		                 
            	
            	
            	case AdmAppTransToCourseColumn.AdmAppTransReqId:
            		return this.AdmAppTransReqId.CompareTo(rhs.AdmAppTransReqId);
            		
            		                 
            	
            	
            	case AdmAppTransToCourseColumn.EntCoursePkgHdrId:
            		return this.EntCoursePkgHdrId.Value.CompareTo(rhs.EntCoursePkgHdrId.Value);
            		
            		                 
            	
            	
            	case AdmAppTransToCourseColumn.EdCourseId:
            		return this.EdCourseId.CompareTo(rhs.EdCourseId);
            		
            		                 
            	
            	
            	case AdmAppTransToCourseColumn.EdCodeTransCourseTypeId:
            		return this.EdCodeTransCourseTypeId.CompareTo(rhs.EdCodeTransCourseTypeId);
            		
            		                 
            	
            	
            	case AdmAppTransToCourseColumn.EdCodeGradingId:
            		return this.EdCodeGradingId.Value.CompareTo(rhs.EdCodeGradingId.Value);
            		
            		                 
            	
            	
            	case AdmAppTransToCourseColumn.CoursePoint:
            		return this.CoursePoint.Value.CompareTo(rhs.CoursePoint.Value);
            		
            		                 
            	
            	
            	case AdmAppTransToCourseColumn.AddGpaFlg:
            		return this.AddGpaFlg.CompareTo(rhs.AddGpaFlg);
            		
            		                 
            	
            	
            	case AdmAppTransToCourseColumn.AddMjrgpaFlg:
            		return this.AddMjrgpaFlg.CompareTo(rhs.AddMjrgpaFlg);
            		
            		                 
            	
            	
            	case AdmAppTransToCourseColumn.GsCodePassFailId:
            		return this.GsCodePassFailId.Value.CompareTo(rhs.GsCodePassFailId.Value);
            		
            		                 
            	
            	
            	case AdmAppTransToCourseColumn.EntPolicyGradingHdrId:
            		return this.EntPolicyGradingHdrId.Value.CompareTo(rhs.EntPolicyGradingHdrId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AdmAppTransToCourseKey> Members
		
		// member variable for the EntityId property
		private AdmAppTransToCourseKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AdmAppTransToCourseKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AdmAppTransToCourseKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AdmAppTransToCourse")
					.Append("|").Append( this.AdmAppTransToCourseId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- AdmAppTransToCourseId: {0}{11}- AdmAppTransReqId: {1}{11}- EntCoursePkgHdrId: {2}{11}- EdCourseId: {3}{11}- EdCodeTransCourseTypeId: {4}{11}- EdCodeGradingId: {5}{11}- CoursePoint: {6}{11}- AddGpaFlg: {7}{11}- AddMjrgpaFlg: {8}{11}- GsCodePassFailId: {9}{11}- EntPolicyGradingHdrId: {10}{11}{13}", 
				this.AdmAppTransToCourseId,
				this.AdmAppTransReqId,
				(this.EntCoursePkgHdrId == null) ? string.Empty : this.EntCoursePkgHdrId.ToString(),
				this.EdCourseId,
				this.EdCodeTransCourseTypeId,
				(this.EdCodeGradingId == null) ? string.Empty : this.EdCodeGradingId.ToString(),
				(this.CoursePoint == null) ? string.Empty : this.CoursePoint.ToString(),
				this.AddGpaFlg,
				this.AddMjrgpaFlg,
				(this.GsCodePassFailId == null) ? string.Empty : this.GsCodePassFailId.ToString(),
				(this.EntPolicyGradingHdrId == null) ? string.Empty : this.EntPolicyGradingHdrId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ADM_APP_TRANS_TO_COURSE' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AdmAppTransToCourseEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ADM_APP_TRANS_TO_COURSE_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ADM_APP_TRANS_TO_COURSE"</remarks>
		public System.Decimal AdmAppTransToCourseId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalAdmAppTransToCourseId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ADM_APP_TRANS_REQ_ID : 
		/// </summary>
		public System.Decimal		  AdmAppTransReqId = 0.0m;
		
		/// <summary>
		/// ENT_COURSE_PKG_HDR_ID : 
		/// </summary>
		public System.Decimal?		  EntCoursePkgHdrId = null;
		
		/// <summary>
		/// ED_COURSE_ID : 
		/// </summary>
		public System.Decimal		  EdCourseId = 0.0m;
		
		/// <summary>
		/// ED_CODE_TRANS_COURSE_TYPE_ID : 
		/// </summary>
		public System.Decimal		  EdCodeTransCourseTypeId = 0.0m;
		
		/// <summary>
		/// ED_CODE_GRADING_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeGradingId = null;
		
		/// <summary>
		/// COURSE_POINT : 
		/// </summary>
		public System.Decimal?		  CoursePoint = null;
		
		/// <summary>
		/// ADD_GPA_FLG : =0 not calculated --- =1 calculate course in gpa&CH ---2 Calculated in CH only
		/// </summary>
		public System.Decimal		  AddGpaFlg = 0.0m;
		
		/// <summary>
		/// ADD_MJRGPA_FLG : 
		/// </summary>
		public System.Decimal		  AddMjrgpaFlg = 0.0m;
		
		/// <summary>
		/// GS_CODE_PASS_FAIL_ID : 
		/// </summary>
		public System.Decimal?		  GsCodePassFailId = null;
		
		/// <summary>
		/// ENT_POLICY_GRADING_HDR_ID : 
		/// </summary>
		public System.Decimal?		  EntPolicyGradingHdrId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdmAppTransReq _admAppTransReqIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmAppTransReq"/>.
		/// </summary>
		/// <value>The source AdmAppTransReq for AdmAppTransReqId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmAppTransReq AdmAppTransReqIdSource
      	{
            get { return this._admAppTransReqIdSource; }
            set { this._admAppTransReqIdSource = value; }
      	}
		private EdCodeGrading _edCodeGradingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeGradingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeGrading EdCodeGradingIdSource
      	{
            get { return this._edCodeGradingIdSource; }
            set { this._edCodeGradingIdSource = value; }
      	}
		private EdCodeTransCourseType _edCodeTransCourseTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeTransCourseType"/>.
		/// </summary>
		/// <value>The source EdCodeTransCourseType for EdCodeTransCourseTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeTransCourseType EdCodeTransCourseTypeIdSource
      	{
            get { return this._edCodeTransCourseTypeIdSource; }
            set { this._edCodeTransCourseTypeIdSource = value; }
      	}
		private EdCourse _edCourseIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return this._edCourseIdSource; }
            set { this._edCourseIdSource = value; }
      	}
		private EntCoursePkgHdr _entCoursePkgHdrIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntCoursePkgHdr"/>.
		/// </summary>
		/// <value>The source EntCoursePkgHdr for EntCoursePkgHdrId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntCoursePkgHdr EntCoursePkgHdrIdSource
      	{
            get { return this._entCoursePkgHdrIdSource; }
            set { this._entCoursePkgHdrIdSource = value; }
      	}
		private EntPolicyGradingHdr _entPolicyGradingHdrIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntPolicyGradingHdr"/>.
		/// </summary>
		/// <value>The source EntPolicyGradingHdr for EntPolicyGradingHdrId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntPolicyGradingHdr EntPolicyGradingHdrIdSource
      	{
            get { return this._entPolicyGradingHdrIdSource; }
            set { this._entPolicyGradingHdrIdSource = value; }
      	}
		private GsCodePassFail _gsCodePassFailIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodePassFail"/>.
		/// </summary>
		/// <value>The source GsCodePassFail for GsCodePassFailId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodePassFail GsCodePassFailIdSource
      	{
            get { return this._gsCodePassFailIdSource; }
            set { this._gsCodePassFailIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region AdmAppTransBalanceCollection
		
		private TList<AdmAppTransBalance> _admAppTransBalanceAdmAppTransToCourseId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppTransBalanceAdmAppTransToCourseId
		/// </summary>
		
		public TList<AdmAppTransBalance> AdmAppTransBalanceCollection
		{
			get
			{
				if (_admAppTransBalanceAdmAppTransToCourseId == null)
				{
				_admAppTransBalanceAdmAppTransToCourseId = new TList<AdmAppTransBalance>();
				}
	
				return _admAppTransBalanceAdmAppTransToCourseId;
			}
			set { _admAppTransBalanceAdmAppTransToCourseId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AdmAppTransToCourseEntityData _tmp = new AdmAppTransToCourseEntityData();
						
			_tmp.AdmAppTransToCourseId = this.AdmAppTransToCourseId;
			_tmp.OriginalAdmAppTransToCourseId = this.OriginalAdmAppTransToCourseId;
			
			_tmp.AdmAppTransReqId = this.AdmAppTransReqId;
			_tmp.EntCoursePkgHdrId = this.EntCoursePkgHdrId;
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.EdCodeTransCourseTypeId = this.EdCodeTransCourseTypeId;
			_tmp.EdCodeGradingId = this.EdCodeGradingId;
			_tmp.CoursePoint = this.CoursePoint;
			_tmp.AddGpaFlg = this.AddGpaFlg;
			_tmp.AddMjrgpaFlg = this.AddMjrgpaFlg;
			_tmp.GsCodePassFailId = this.GsCodePassFailId;
			_tmp.EntPolicyGradingHdrId = this.EntPolicyGradingHdrId;
			
			#region Source Parent Composite Entities
			if (this.AdmAppTransReqIdSource != null)
				_tmp.AdmAppTransReqIdSource = MakeCopyOf(this.AdmAppTransReqIdSource) as AdmAppTransReq;
			if (this.EdCodeGradingIdSource != null)
				_tmp.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource) as EdCodeGrading;
			if (this.EdCodeTransCourseTypeIdSource != null)
				_tmp.EdCodeTransCourseTypeIdSource = MakeCopyOf(this.EdCodeTransCourseTypeIdSource) as EdCodeTransCourseType;
			if (this.EdCourseIdSource != null)
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource) as EdCourse;
			if (this.EntCoursePkgHdrIdSource != null)
				_tmp.EntCoursePkgHdrIdSource = MakeCopyOf(this.EntCoursePkgHdrIdSource) as EntCoursePkgHdr;
			if (this.EntPolicyGradingHdrIdSource != null)
				_tmp.EntPolicyGradingHdrIdSource = MakeCopyOf(this.EntPolicyGradingHdrIdSource) as EntPolicyGradingHdr;
			if (this.GsCodePassFailIdSource != null)
				_tmp.GsCodePassFailIdSource = MakeCopyOf(this.GsCodePassFailIdSource) as GsCodePassFail;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._admAppTransBalanceAdmAppTransToCourseId != null)
				_tmp.AdmAppTransBalanceCollection = (TList<AdmAppTransBalance>) MakeCopyOf(this.AdmAppTransBalanceCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AdmAppTransToCourseEntityData _tmp = new AdmAppTransToCourseEntityData();
						
			_tmp.AdmAppTransToCourseId = this.AdmAppTransToCourseId;
			_tmp.OriginalAdmAppTransToCourseId = this.OriginalAdmAppTransToCourseId;
			
			_tmp.AdmAppTransReqId = this.AdmAppTransReqId;
			_tmp.EntCoursePkgHdrId = this.EntCoursePkgHdrId;
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.EdCodeTransCourseTypeId = this.EdCodeTransCourseTypeId;
			_tmp.EdCodeGradingId = this.EdCodeGradingId;
			_tmp.CoursePoint = this.CoursePoint;
			_tmp.AddGpaFlg = this.AddGpaFlg;
			_tmp.AddMjrgpaFlg = this.AddMjrgpaFlg;
			_tmp.GsCodePassFailId = this.GsCodePassFailId;
			_tmp.EntPolicyGradingHdrId = this.EntPolicyGradingHdrId;
			
			#region Source Parent Composite Entities
			if (this.AdmAppTransReqIdSource != null && existingCopies.Contains(this.AdmAppTransReqIdSource))
				_tmp.AdmAppTransReqIdSource = existingCopies[this.AdmAppTransReqIdSource] as AdmAppTransReq;
			else
				_tmp.AdmAppTransReqIdSource = MakeCopyOf(this.AdmAppTransReqIdSource, existingCopies) as AdmAppTransReq;
			if (this.EdCodeGradingIdSource != null && existingCopies.Contains(this.EdCodeGradingIdSource))
				_tmp.EdCodeGradingIdSource = existingCopies[this.EdCodeGradingIdSource] as EdCodeGrading;
			else
				_tmp.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource, existingCopies) as EdCodeGrading;
			if (this.EdCodeTransCourseTypeIdSource != null && existingCopies.Contains(this.EdCodeTransCourseTypeIdSource))
				_tmp.EdCodeTransCourseTypeIdSource = existingCopies[this.EdCodeTransCourseTypeIdSource] as EdCodeTransCourseType;
			else
				_tmp.EdCodeTransCourseTypeIdSource = MakeCopyOf(this.EdCodeTransCourseTypeIdSource, existingCopies) as EdCodeTransCourseType;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				_tmp.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EntCoursePkgHdrIdSource != null && existingCopies.Contains(this.EntCoursePkgHdrIdSource))
				_tmp.EntCoursePkgHdrIdSource = existingCopies[this.EntCoursePkgHdrIdSource] as EntCoursePkgHdr;
			else
				_tmp.EntCoursePkgHdrIdSource = MakeCopyOf(this.EntCoursePkgHdrIdSource, existingCopies) as EntCoursePkgHdr;
			if (this.EntPolicyGradingHdrIdSource != null && existingCopies.Contains(this.EntPolicyGradingHdrIdSource))
				_tmp.EntPolicyGradingHdrIdSource = existingCopies[this.EntPolicyGradingHdrIdSource] as EntPolicyGradingHdr;
			else
				_tmp.EntPolicyGradingHdrIdSource = MakeCopyOf(this.EntPolicyGradingHdrIdSource, existingCopies) as EntPolicyGradingHdr;
			if (this.GsCodePassFailIdSource != null && existingCopies.Contains(this.GsCodePassFailIdSource))
				_tmp.GsCodePassFailIdSource = existingCopies[this.GsCodePassFailIdSource] as GsCodePassFail;
			else
				_tmp.GsCodePassFailIdSource = MakeCopyOf(this.GsCodePassFailIdSource, existingCopies) as GsCodePassFail;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.AdmAppTransBalanceCollection = (TList<AdmAppTransBalance>) MakeCopyOf(this.AdmAppTransBalanceCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmAppTransToCourseColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AdmAppTransToCourseColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmAppTransToCourseColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AdmAppTransToCourseColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmAppTransToCourseColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AdmAppTransToCourseColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AdmAppTransToCourseEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AdmAppTransToCourseEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmAppTransToCourseColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AdmAppTransToCourseColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AdmAppTransToCourseEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AdmAppTransToCourseEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AdmAppTransToCourseEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AdmAppTransToCourse"/> object.
	/// </remarks>
	public class AdmAppTransToCourseEventArgs : System.EventArgs
	{
		private AdmAppTransToCourseColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AdmAppTransToCourseEventArgs class.
		///</summary>
		public AdmAppTransToCourseEventArgs(AdmAppTransToCourseColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AdmAppTransToCourseEventArgs class.
		///</summary>
		public AdmAppTransToCourseEventArgs(AdmAppTransToCourseColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AdmAppTransToCourseColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AdmAppTransToCourseColumn" />
		public AdmAppTransToCourseColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AdmAppTransToCourse related events.
	///</summary>
	public delegate void AdmAppTransToCourseEventHandler(object sender, AdmAppTransToCourseEventArgs e);
	
	#region AdmAppTransToCourseComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AdmAppTransToCourseComparer : System.Collections.Generic.IComparer<AdmAppTransToCourse>
	{
		AdmAppTransToCourseColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AdmAppTransToCourseComparer"/> class.
        /// </summary>
		public AdmAppTransToCourseComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AdmAppTransToCourseComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AdmAppTransToCourseComparer(AdmAppTransToCourseColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AdmAppTransToCourse"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AdmAppTransToCourse"/> to compare.</param>
        /// <param name="b">The second <c>AdmAppTransToCourse</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AdmAppTransToCourse a, AdmAppTransToCourse b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AdmAppTransToCourse entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AdmAppTransToCourse a, AdmAppTransToCourse b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AdmAppTransToCourseColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AdmAppTransToCourseKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AdmAppTransToCourse"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AdmAppTransToCourseKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AdmAppTransToCourseKey class.
		/// </summary>
		public AdmAppTransToCourseKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmAppTransToCourseKey class.
		/// </summary>
		public AdmAppTransToCourseKey(AdmAppTransToCourseBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AdmAppTransToCourseId = entity.AdmAppTransToCourseId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmAppTransToCourseKey class.
		/// </summary>
		public AdmAppTransToCourseKey(System.Decimal _admAppTransToCourseId)
		{
			#region Init Properties

			this.AdmAppTransToCourseId = _admAppTransToCourseId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AdmAppTransToCourseBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AdmAppTransToCourseBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AdmAppTransToCourseId property
		private System.Decimal _admAppTransToCourseId;
		
		/// <summary>
		/// Gets or sets the AdmAppTransToCourseId property.
		/// </summary>
		public System.Decimal AdmAppTransToCourseId
		{
			get { return _admAppTransToCourseId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AdmAppTransToCourseId = value;
				
				_admAppTransToCourseId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AdmAppTransToCourseId = ( values["AdmAppTransToCourseId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["AdmAppTransToCourseId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AdmAppTransToCourseId", AdmAppTransToCourseId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AdmAppTransToCourseId: {0}{1}",
								AdmAppTransToCourseId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AdmAppTransToCourseColumn Enum
	
	/// <summary>
	/// Enumerate the AdmAppTransToCourse columns.
	/// </summary>
	[Serializable]
	public enum AdmAppTransToCourseColumn : int
	{
		/// <summary>
		/// AdmAppTransToCourseId : 
		/// </summary>
		[EnumTextValue("ADM_APP_TRANS_TO_COURSE_ID")]
		[ColumnEnum("ADM_APP_TRANS_TO_COURSE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		AdmAppTransToCourseId = 1,
		/// <summary>
		/// AdmAppTransReqId : 
		/// </summary>
		[EnumTextValue("ADM_APP_TRANS_REQ_ID")]
		[ColumnEnum("ADM_APP_TRANS_REQ_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AdmAppTransReqId = 2,
		/// <summary>
		/// EntCoursePkgHdrId : 
		/// </summary>
		[EnumTextValue("ENT_COURSE_PKG_HDR_ID")]
		[ColumnEnum("ENT_COURSE_PKG_HDR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntCoursePkgHdrId = 3,
		/// <summary>
		/// EdCourseId : 
		/// </summary>
		[EnumTextValue("ED_COURSE_ID")]
		[ColumnEnum("ED_COURSE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCourseId = 4,
		/// <summary>
		/// EdCodeTransCourseTypeId : 
		/// </summary>
		[EnumTextValue("ED_CODE_TRANS_COURSE_TYPE_ID")]
		[ColumnEnum("ED_CODE_TRANS_COURSE_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeTransCourseTypeId = 5,
		/// <summary>
		/// EdCodeGradingId : 
		/// </summary>
		[EnumTextValue("ED_CODE_GRADING_ID")]
		[ColumnEnum("ED_CODE_GRADING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeGradingId = 6,
		/// <summary>
		/// CoursePoint : 
		/// </summary>
		[EnumTextValue("COURSE_POINT")]
		[ColumnEnum("COURSE_POINT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CoursePoint = 7,
		/// <summary>
		/// AddGpaFlg : =0 not calculated --- =1 calculate course in gpa&CH ---2 Calculated in CH only
		/// </summary>
		[EnumTextValue("ADD_GPA_FLG")]
		[ColumnEnum("ADD_GPA_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AddGpaFlg = 8,
		/// <summary>
		/// AddMjrgpaFlg : 
		/// </summary>
		[EnumTextValue("ADD_MJRGPA_FLG")]
		[ColumnEnum("ADD_MJRGPA_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AddMjrgpaFlg = 9,
		/// <summary>
		/// GsCodePassFailId : 
		/// </summary>
		[EnumTextValue("GS_CODE_PASS_FAIL_ID")]
		[ColumnEnum("GS_CODE_PASS_FAIL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCodePassFailId = 10,
		/// <summary>
		/// EntPolicyGradingHdrId : 
		/// </summary>
		[EnumTextValue("ENT_POLICY_GRADING_HDR_ID")]
		[ColumnEnum("ENT_POLICY_GRADING_HDR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntPolicyGradingHdrId = 11
	}//End enum

	#endregion AdmAppTransToCourseColumn Enum

} // end namespace
