
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SeForm.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SE_FORM' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SeFormBase : EntityBase, ISeForm, IEntityId<SeFormKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SeFormEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SeFormEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SeFormEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SeForm> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SeFormEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SeFormEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SeFormBase"/> instance.
		///</summary>
		public SeFormBase()
		{
			this.entityData = new SeFormEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SeFormBase"/> instance.
		///</summary>
		///<param name="_seFormId"></param>
		///<param name="_seModuleId"></param>
		///<param name="_formCodeName"></param>
		///<param name="_descAr"></param>
		///<param name="_menuPage"></param>
		///<param name="_facultyFlag"></param>
		///<param name="_trandFlag"></param>
		///<param name="_descEn"></param>
		///<param name="_orderFlg"></param>
		///<param name="_edCodeStudyMethodId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_signatureFlg">to show signature contol in reports</param>
		public SeFormBase(System.Decimal _seFormId, System.Decimal _seModuleId, System.String _formCodeName, 
			System.String _descAr, System.Decimal _menuPage, System.Decimal _facultyFlag, System.Decimal _trandFlag, 
			System.String _descEn, System.Decimal? _orderFlg, System.Decimal? _edCodeStudyMethodId, System.Decimal? _asFacultyInfoId, 
			System.Decimal? _asCodeDegreeClassId, System.Boolean? _signatureFlg)
		{
			this.entityData = new SeFormEntityData();
			this.backupData = null;

			this.SeFormId = _seFormId;
			this.SeModuleId = _seModuleId;
			this.FormCodeName = _formCodeName;
			this.DescAr = _descAr;
			this.MenuPage = _menuPage;
			this.FacultyFlag = _facultyFlag;
			this.TrandFlag = _trandFlag;
			this.DescEn = _descEn;
			this.OrderFlg = _orderFlg;
			this.EdCodeStudyMethodId = _edCodeStudyMethodId;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.AsCodeDegreeClassId = _asCodeDegreeClassId;
			this.SignatureFlg = _signatureFlg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SeForm"/> instance.
		///</summary>
		///<param name="_seFormId"></param>
		///<param name="_seModuleId"></param>
		///<param name="_formCodeName"></param>
		///<param name="_descAr"></param>
		///<param name="_menuPage"></param>
		///<param name="_facultyFlag"></param>
		///<param name="_trandFlag"></param>
		///<param name="_descEn"></param>
		///<param name="_orderFlg"></param>
		///<param name="_edCodeStudyMethodId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_signatureFlg">to show signature contol in reports</param>
		public static SeForm CreateSeForm(System.Decimal _seFormId, System.Decimal _seModuleId, System.String _formCodeName, 
			System.String _descAr, System.Decimal _menuPage, System.Decimal _facultyFlag, System.Decimal _trandFlag, 
			System.String _descEn, System.Decimal? _orderFlg, System.Decimal? _edCodeStudyMethodId, System.Decimal? _asFacultyInfoId, 
			System.Decimal? _asCodeDegreeClassId, System.Boolean? _signatureFlg)
		{
			SeForm newSeForm = new SeForm();
			newSeForm.SeFormId = _seFormId;
			newSeForm.SeModuleId = _seModuleId;
			newSeForm.FormCodeName = _formCodeName;
			newSeForm.DescAr = _descAr;
			newSeForm.MenuPage = _menuPage;
			newSeForm.FacultyFlag = _facultyFlag;
			newSeForm.TrandFlag = _trandFlag;
			newSeForm.DescEn = _descEn;
			newSeForm.OrderFlg = _orderFlg;
			newSeForm.EdCodeStudyMethodId = _edCodeStudyMethodId;
			newSeForm.AsFacultyInfoId = _asFacultyInfoId;
			newSeForm.AsCodeDegreeClassId = _asCodeDegreeClassId;
			newSeForm.SignatureFlg = _signatureFlg;
			return newSeForm;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SeFormId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SeFormId
		{
			get
			{
				return this.entityData.SeFormId; 
			}
			
			set
			{
				if (this.entityData.SeFormId == value)
					return;
					
				OnColumnChanging(SeFormColumn.SeFormId, this.entityData.SeFormId);
				this.entityData.SeFormId = value;
				this.EntityId.SeFormId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeFormColumn.SeFormId, this.entityData.SeFormId);
				OnPropertyChanged("SeFormId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SE_FORM_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SE_FORM_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSeFormId
		{
			get { return this.entityData.OriginalSeFormId; }
			set { this.entityData.OriginalSeFormId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the SeModuleId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SeModuleId
		{
			get
			{
				return this.entityData.SeModuleId; 
			}
			
			set
			{
				if (this.entityData.SeModuleId == value)
					return;
					
				OnColumnChanging(SeFormColumn.SeModuleId, this.entityData.SeModuleId);
				this.entityData.SeModuleId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeFormColumn.SeModuleId, this.entityData.SeModuleId);
				OnPropertyChanged("SeModuleId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FormCodeName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String FormCodeName
		{
			get
			{
				return this.entityData.FormCodeName; 
			}
			
			set
			{
				if (this.entityData.FormCodeName == value)
					return;
					
				OnColumnChanging(SeFormColumn.FormCodeName, this.entityData.FormCodeName);
				this.entityData.FormCodeName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeFormColumn.FormCodeName, this.entityData.FormCodeName);
				OnPropertyChanged("FormCodeName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String DescAr
		{
			get
			{
				return this.entityData.DescAr; 
			}
			
			set
			{
				if (this.entityData.DescAr == value)
					return;
					
				OnColumnChanging(SeFormColumn.DescAr, this.entityData.DescAr);
				this.entityData.DescAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeFormColumn.DescAr, this.entityData.DescAr);
				OnPropertyChanged("DescAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MenuPage property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal MenuPage
		{
			get
			{
				return this.entityData.MenuPage; 
			}
			
			set
			{
				if (this.entityData.MenuPage == value)
					return;
					
				OnColumnChanging(SeFormColumn.MenuPage, this.entityData.MenuPage);
				this.entityData.MenuPage = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeFormColumn.MenuPage, this.entityData.MenuPage);
				OnPropertyChanged("MenuPage");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FacultyFlag property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal FacultyFlag
		{
			get
			{
				return this.entityData.FacultyFlag; 
			}
			
			set
			{
				if (this.entityData.FacultyFlag == value)
					return;
					
				OnColumnChanging(SeFormColumn.FacultyFlag, this.entityData.FacultyFlag);
				this.entityData.FacultyFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeFormColumn.FacultyFlag, this.entityData.FacultyFlag);
				OnPropertyChanged("FacultyFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrandFlag property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal TrandFlag
		{
			get
			{
				return this.entityData.TrandFlag; 
			}
			
			set
			{
				if (this.entityData.TrandFlag == value)
					return;
					
				OnColumnChanging(SeFormColumn.TrandFlag, this.entityData.TrandFlag);
				this.entityData.TrandFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeFormColumn.TrandFlag, this.entityData.TrandFlag);
				OnPropertyChanged("TrandFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String DescEn
		{
			get
			{
				return this.entityData.DescEn; 
			}
			
			set
			{
				if (this.entityData.DescEn == value)
					return;
					
				OnColumnChanging(SeFormColumn.DescEn, this.entityData.DescEn);
				this.entityData.DescEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeFormColumn.DescEn, this.entityData.DescEn);
				OnPropertyChanged("DescEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrderFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsOrderFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? OrderFlg
		{
			get
			{
				return this.entityData.OrderFlg; 
			}
			
			set
			{
				if (this.entityData.OrderFlg == value)
					return;
					
				OnColumnChanging(SeFormColumn.OrderFlg, this.entityData.OrderFlg);
				this.entityData.OrderFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeFormColumn.OrderFlg, this.entityData.OrderFlg);
				OnPropertyChanged("OrderFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeStudyMethodId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeStudyMethodIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeStudyMethodId
		{
			get
			{
				return this.entityData.EdCodeStudyMethodId; 
			}
			
			set
			{
				if (this.entityData.EdCodeStudyMethodId == value)
					return;
					
				OnColumnChanging(SeFormColumn.EdCodeStudyMethodId, this.entityData.EdCodeStudyMethodId);
				this.entityData.EdCodeStudyMethodId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeFormColumn.EdCodeStudyMethodId, this.entityData.EdCodeStudyMethodId);
				OnPropertyChanged("EdCodeStudyMethodId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(SeFormColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeFormColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeClassId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeClassIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeClassId
		{
			get
			{
				return this.entityData.AsCodeDegreeClassId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeClassId == value)
					return;
					
				OnColumnChanging(SeFormColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				this.entityData.AsCodeDegreeClassId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeFormColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				OnPropertyChanged("AsCodeDegreeClassId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SignatureFlg property. 
		///		to show signature contol in reports
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsSignatureFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"to show signature contol in reports"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? SignatureFlg
		{
			get
			{
				return this.entityData.SignatureFlg; 
			}
			
			set
			{
				if (this.entityData.SignatureFlg == value)
					return;
					
				OnColumnChanging(SeFormColumn.SignatureFlg, this.entityData.SignatureFlg);
				this.entityData.SignatureFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeFormColumn.SignatureFlg, this.entityData.SignatureFlg);
				OnPropertyChanged("SignatureFlg");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return entityData.AsCodeDegreeClassIdSource; }
            set { entityData.AsCodeDegreeClassIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeStudyMethod"/>.
		/// </summary>
		/// <value>The source EdCodeStudyMethod for EdCodeStudyMethodId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeStudyMethod EdCodeStudyMethodIdSource
      	{
            get { return entityData.EdCodeStudyMethodIdSource; }
            set { entityData.EdCodeStudyMethodIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeModule"/>.
		/// </summary>
		/// <value>The source SeModule for SeModuleId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeModule SeModuleIdSource
      	{
            get { return entityData.SeModuleIdSource; }
            set { entityData.SeModuleIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EdStudAcadWarn objects
		///	which are related to this object through the relation FK_ED_STUD_ACAD_WARN_SE_FORM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudAcadWarn> EdStudAcadWarnCollection
		{
			get { return entityData.EdStudAcadWarnCollection; }
			set { entityData.EdStudAcadWarnCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CtrStudExp objects
		///	which are related to this object through the relation FK_CTR_STUD_EXP_SE_FORM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CtrStudExp> CtrStudExpCollection
		{
			get { return entityData.CtrStudExpCollection; }
			set { entityData.CtrStudExpCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudAbsFw objects
		///	which are related to this object through the relation FK_ED_STUD_ABS_FW_SE_FORM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudAbsFw> EdStudAbsFwCollection
		{
			get { return entityData.EdStudAbsFwCollection; }
			set { entityData.EdStudAbsFwCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudExcuse objects
		///	which are related to this object through the relation FK_ED_STUD_EXCUSE_SE_FORM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudExcuse> EdStudExcuseCollection
		{
			get { return entityData.EdStudExcuseCollection; }
			set { entityData.EdStudExcuseCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudEnrollChange objects
		///	which are related to this object through the relation FK_ED_STUD_ENROLL_CHANGE_SE_FORM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudEnrollChange> EdStudEnrollChangeCollection
		{
			get { return entityData.EdStudEnrollChangeCollection; }
			set { entityData.EdStudEnrollChangeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SeAccntFormDiff objects
		///	which are related to this object through the relation FK_SE_ACCNT_FORM_DIFF_SE_FORM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SeAccntFormDiff> SeAccntFormDiffCollection
		{
			get { return entityData.SeAccntFormDiffCollection; }
			set { entityData.SeAccntFormDiffCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudCourseRegAssess objects
		///	which are related to this object through the relation FK_ED_STUD_COURSE_REG_ASSESS_SE_FORM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCourseRegAssess> EdStudCourseRegAssessCollection
		{
			get { return entityData.EdStudCourseRegAssessCollection; }
			set { entityData.EdStudCourseRegAssessCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SeUserAccntFormDiff objects
		///	which are related to this object through the relation FK_AUTO_0527
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SeUserAccntFormDiff> SeUserAccntFormDiffCollection
		{
			get { return entityData.SeUserAccntFormDiffCollection; }
			set { entityData.SeUserAccntFormDiffCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SeFormControl objects
		///	which are related to this object through the relation FK_AUTO_037b
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SeFormControl> SeFormControlCollection
		{
			get { return entityData.SeFormControlCollection; }
			set { entityData.SeFormControlCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudCourseReg objects
		///	which are related to this object through the relation FK_ED_STUD_COURSE_REG_SE_FORM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCourseReg> EdStudCourseRegCollection
		{
			get { return entityData.EdStudCourseRegCollection; }
			set { entityData.EdStudCourseRegCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdSemAgendaForm objects
		///	which are related to this object through the relation FK_ED_SEM_AGENDA_FORM_SE_FORM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdSemAgendaForm> EdSemAgendaFormCollection
		{
			get { return entityData.EdSemAgendaFormCollection; }
			set { entityData.EdSemAgendaFormCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdOfferingCourse objects
		///	which are related to this object through the relation FK_ED_OFFERING_COURSE_SE_FORM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdOfferingCourse> EdOfferingCourseCollection
		{
			get { return entityData.EdOfferingCourseCollection; }
			set { entityData.EdOfferingCourseCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeStudFeeItem objects
		///	which are related to this object through the relation FK_FEE_STUD_FEE_ITEM_SE_FORM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeStudFeeItem> FeeStudFeeItemCollection
		{
			get { return entityData.FeeStudFeeItemCollection; }
			set { entityData.FeeStudFeeItemCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudCourseGrdChng objects
		///	which are related to this object through the relation FK_ED_STUD_COURSE_GRD_CHNG_SE_FORM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCourseGrdChng> EdStudCourseGrdChngCollection
		{
			get { return entityData.EdStudCourseGrdChngCollection; }
			set { entityData.EdStudCourseGrdChngCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CtrStudOut objects
		///	which are related to this object through the relation FK_CTR_STUD_OUT_SE_FORM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CtrStudOut> CtrStudOutCollection
		{
			get { return entityData.CtrStudOutCollection; }
			set { entityData.CtrStudOutCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of UsrTopLink objects
		///	which are related to this object through the relation FK_USR_TOP_LINK_SE_FORM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<UsrTopLink> UsrTopLinkCollection
		{
			get { return entityData.UsrTopLinkCollection; }
			set { entityData.UsrTopLinkCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SeApplicationLog objects
		///	which are related to this object through the relation FK_AUTO_06c2
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SeApplicationLog> SeApplicationLogCollection
		{
			get { return entityData.SeApplicationLogCollection; }
			set { entityData.SeApplicationLogCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudCourseChng objects
		///	which are related to this object through the relation FK_ED_STUD_COURSE_CHNG_SE_FORM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCourseChng> EdStudCourseChngCollection
		{
			get { return entityData.EdStudCourseChngCollection; }
			set { entityData.EdStudCourseChngCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("FormCodeName", "Form Code Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FormCodeName", "Form Code Name", 150));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DescAr", "Desc Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescAr", "Desc Ar", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescEn", "Desc En", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SE_FORM"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SE_FORM_ID", "SE_MODULE_ID", "FORM_CODE_NAME", "DESC_AR", "Menu_Page", "Faculty_Flag", "Trand_Flag", "DESC_EN", "ORDER_FLG", "ED_CODE_STUDY_METHOD_ID", "AS_FACULTY_INFO_ID", "AS_CODE_DEGREE_CLASS_ID", "SIGNATURE_FLG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SeFormEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SeForm) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SeForm>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SeForm);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SeForm Entity 
		///</summary>
		protected virtual SeForm Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SeForm copy = new SeForm();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SeFormId = this.SeFormId;
					copy.OriginalSeFormId = this.OriginalSeFormId;
				copy.SeModuleId = this.SeModuleId;
				copy.FormCodeName = this.FormCodeName;
				copy.DescAr = this.DescAr;
				copy.MenuPage = this.MenuPage;
				copy.FacultyFlag = this.FacultyFlag;
				copy.TrandFlag = this.TrandFlag;
				copy.DescEn = this.DescEn;
				copy.OrderFlg = this.OrderFlg;
				copy.EdCodeStudyMethodId = this.EdCodeStudyMethodId;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
				copy.SignatureFlg = this.SignatureFlg;
			
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				copy.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				copy.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdCodeStudyMethodIdSource != null && existingCopies.Contains(this.EdCodeStudyMethodIdSource))
				copy.EdCodeStudyMethodIdSource = existingCopies[this.EdCodeStudyMethodIdSource] as EdCodeStudyMethod;
			else
				copy.EdCodeStudyMethodIdSource = MakeCopyOf(this.EdCodeStudyMethodIdSource, existingCopies) as EdCodeStudyMethod;
			if (this.SeModuleIdSource != null && existingCopies.Contains(this.SeModuleIdSource))
				copy.SeModuleIdSource = existingCopies[this.SeModuleIdSource] as SeModule;
			else
				copy.SeModuleIdSource = MakeCopyOf(this.SeModuleIdSource, existingCopies) as SeModule;
		
			//deep copy nested objects
			copy.EdStudAcadWarnCollection = (TList<EdStudAcadWarn>) MakeCopyOf(this.EdStudAcadWarnCollection, existingCopies); 
			copy.CtrStudExpCollection = (TList<CtrStudExp>) MakeCopyOf(this.CtrStudExpCollection, existingCopies); 
			copy.EdStudAbsFwCollection = (TList<EdStudAbsFw>) MakeCopyOf(this.EdStudAbsFwCollection, existingCopies); 
			copy.EdStudExcuseCollection = (TList<EdStudExcuse>) MakeCopyOf(this.EdStudExcuseCollection, existingCopies); 
			copy.EdStudEnrollChangeCollection = (TList<EdStudEnrollChange>) MakeCopyOf(this.EdStudEnrollChangeCollection, existingCopies); 
			copy.SeAccntFormDiffCollection = (TList<SeAccntFormDiff>) MakeCopyOf(this.SeAccntFormDiffCollection, existingCopies); 
			copy.EdStudCourseRegAssessCollection = (TList<EdStudCourseRegAssess>) MakeCopyOf(this.EdStudCourseRegAssessCollection, existingCopies); 
			copy.SeUserAccntFormDiffCollection = (TList<SeUserAccntFormDiff>) MakeCopyOf(this.SeUserAccntFormDiffCollection, existingCopies); 
			copy.SeFormControlCollection = (TList<SeFormControl>) MakeCopyOf(this.SeFormControlCollection, existingCopies); 
			copy.EdStudCourseRegCollection = (TList<EdStudCourseReg>) MakeCopyOf(this.EdStudCourseRegCollection, existingCopies); 
			copy.EdSemAgendaFormCollection = (TList<EdSemAgendaForm>) MakeCopyOf(this.EdSemAgendaFormCollection, existingCopies); 
			copy.EdOfferingCourseCollection = (TList<EdOfferingCourse>) MakeCopyOf(this.EdOfferingCourseCollection, existingCopies); 
			copy.FeeStudFeeItemCollection = (TList<FeeStudFeeItem>) MakeCopyOf(this.FeeStudFeeItemCollection, existingCopies); 
			copy.EdStudCourseGrdChngCollection = (TList<EdStudCourseGrdChng>) MakeCopyOf(this.EdStudCourseGrdChngCollection, existingCopies); 
			copy.CtrStudOutCollection = (TList<CtrStudOut>) MakeCopyOf(this.CtrStudOutCollection, existingCopies); 
			copy.UsrTopLinkCollection = (TList<UsrTopLink>) MakeCopyOf(this.UsrTopLinkCollection, existingCopies); 
			copy.SeApplicationLogCollection = (TList<SeApplicationLog>) MakeCopyOf(this.SeApplicationLogCollection, existingCopies); 
			copy.EdStudCourseChngCollection = (TList<EdStudCourseChng>) MakeCopyOf(this.EdStudCourseChngCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SeForm Entity 
		///</summary>
		public virtual SeForm Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SeForm Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SeForm DeepCopy()
		{
			return EntityHelper.Clone<SeForm>(this as SeForm);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SeFormEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SeFormEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SeFormEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SeFormColumn column)
		{
			switch(column)
			{
					case SeFormColumn.SeFormId:
					return entityData.SeFormId != _originalData.SeFormId;
					case SeFormColumn.SeModuleId:
					return entityData.SeModuleId != _originalData.SeModuleId;
					case SeFormColumn.FormCodeName:
					return entityData.FormCodeName != _originalData.FormCodeName;
					case SeFormColumn.DescAr:
					return entityData.DescAr != _originalData.DescAr;
					case SeFormColumn.MenuPage:
					return entityData.MenuPage != _originalData.MenuPage;
					case SeFormColumn.FacultyFlag:
					return entityData.FacultyFlag != _originalData.FacultyFlag;
					case SeFormColumn.TrandFlag:
					return entityData.TrandFlag != _originalData.TrandFlag;
					case SeFormColumn.DescEn:
					return entityData.DescEn != _originalData.DescEn;
					case SeFormColumn.OrderFlg:
					return entityData.OrderFlg != _originalData.OrderFlg;
					case SeFormColumn.EdCodeStudyMethodId:
					return entityData.EdCodeStudyMethodId != _originalData.EdCodeStudyMethodId;
					case SeFormColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case SeFormColumn.AsCodeDegreeClassId:
					return entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
					case SeFormColumn.SignatureFlg:
					return entityData.SignatureFlg != _originalData.SignatureFlg;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SeFormColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SeFormId != _originalData.SeFormId;
			result = result || entityData.SeModuleId != _originalData.SeModuleId;
			result = result || entityData.FormCodeName != _originalData.FormCodeName;
			result = result || entityData.DescAr != _originalData.DescAr;
			result = result || entityData.MenuPage != _originalData.MenuPage;
			result = result || entityData.FacultyFlag != _originalData.FacultyFlag;
			result = result || entityData.TrandFlag != _originalData.TrandFlag;
			result = result || entityData.DescEn != _originalData.DescEn;
			result = result || entityData.OrderFlg != _originalData.OrderFlg;
			result = result || entityData.EdCodeStudyMethodId != _originalData.EdCodeStudyMethodId;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
			result = result || entityData.SignatureFlg != _originalData.SignatureFlg;
			return result;
		}	
		
		///<summary>
		///  Returns a SeForm Entity with the original data.
		///</summary>
		public SeForm GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSeForm(
				_originalData.SeFormId,
				_originalData.SeModuleId,
				_originalData.FormCodeName,
				_originalData.DescAr,
				_originalData.MenuPage,
				_originalData.FacultyFlag,
				_originalData.TrandFlag,
				_originalData.DescEn,
				_originalData.OrderFlg,
				_originalData.EdCodeStudyMethodId,
				_originalData.AsFacultyInfoId,
				_originalData.AsCodeDegreeClassId,
				_originalData.SignatureFlg
				);
				
			return (SeForm)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SeFormBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SeFormBase)
				return ValueEquals(this, (SeFormBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SeFormBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SeFormId.GetHashCode() ^ 
					this.SeModuleId.GetHashCode() ^ 
					this.FormCodeName.GetHashCode() ^ 
					this.DescAr.GetHashCode() ^ 
					this.MenuPage.GetHashCode() ^ 
					this.FacultyFlag.GetHashCode() ^ 
					this.TrandFlag.GetHashCode() ^ 
					((this.DescEn == null) ? string.Empty : this.DescEn.ToString()).GetHashCode() ^ 
					((this.OrderFlg == null) ? string.Empty : this.OrderFlg.ToString()).GetHashCode() ^ 
					((this.EdCodeStudyMethodId == null) ? string.Empty : this.EdCodeStudyMethodId.ToString()).GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					((this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString()).GetHashCode() ^ 
					((this.SignatureFlg == null) ? string.Empty : this.SignatureFlg.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SeFormBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SeFormBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SeFormBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SeFormBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SeFormBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SeFormBase Object1, SeFormBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SeFormId != Object2.SeFormId)
				equal = false;
			if (Object1.SeModuleId != Object2.SeModuleId)
				equal = false;
			if (Object1.FormCodeName != Object2.FormCodeName)
				equal = false;
			if (Object1.DescAr != Object2.DescAr)
				equal = false;
			if (Object1.MenuPage != Object2.MenuPage)
				equal = false;
			if (Object1.FacultyFlag != Object2.FacultyFlag)
				equal = false;
			if (Object1.TrandFlag != Object2.TrandFlag)
				equal = false;
			if ( Object1.DescEn != null && Object2.DescEn != null )
			{
				if (Object1.DescEn != Object2.DescEn)
					equal = false;
			}
			else if (Object1.DescEn == null ^ Object2.DescEn == null )
			{
				equal = false;
			}
			if ( Object1.OrderFlg != null && Object2.OrderFlg != null )
			{
				if (Object1.OrderFlg != Object2.OrderFlg)
					equal = false;
			}
			else if (Object1.OrderFlg == null ^ Object2.OrderFlg == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeStudyMethodId != null && Object2.EdCodeStudyMethodId != null )
			{
				if (Object1.EdCodeStudyMethodId != Object2.EdCodeStudyMethodId)
					equal = false;
			}
			else if (Object1.EdCodeStudyMethodId == null ^ Object2.EdCodeStudyMethodId == null )
			{
				equal = false;
			}
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if ( Object1.AsCodeDegreeClassId != null && Object2.AsCodeDegreeClassId != null )
			{
				if (Object1.AsCodeDegreeClassId != Object2.AsCodeDegreeClassId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeClassId == null ^ Object2.AsCodeDegreeClassId == null )
			{
				equal = false;
			}
			if ( Object1.SignatureFlg != null && Object2.SignatureFlg != null )
			{
				if (Object1.SignatureFlg != Object2.SignatureFlg)
					equal = false;
			}
			else if (Object1.SignatureFlg == null ^ Object2.SignatureFlg == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SeFormBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SeFormComparer GetComparer()
        {
            return new SeFormComparer();
        }
        */

        // Comparer delegates back to SeForm
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SeForm rhs, SeFormColumn which)
        {
            switch (which)
            {
            	
            	
            	case SeFormColumn.SeFormId:
            		return this.SeFormId.CompareTo(rhs.SeFormId);
            		
            		                 
            	
            	
            	case SeFormColumn.SeModuleId:
            		return this.SeModuleId.CompareTo(rhs.SeModuleId);
            		
            		                 
            	
            	
            	case SeFormColumn.FormCodeName:
            		return this.FormCodeName.CompareTo(rhs.FormCodeName);
            		
            		                 
            	
            	
            	case SeFormColumn.DescAr:
            		return this.DescAr.CompareTo(rhs.DescAr);
            		
            		                 
            	
            	
            	case SeFormColumn.MenuPage:
            		return this.MenuPage.CompareTo(rhs.MenuPage);
            		
            		                 
            	
            	
            	case SeFormColumn.FacultyFlag:
            		return this.FacultyFlag.CompareTo(rhs.FacultyFlag);
            		
            		                 
            	
            	
            	case SeFormColumn.TrandFlag:
            		return this.TrandFlag.CompareTo(rhs.TrandFlag);
            		
            		                 
            	
            	
            	case SeFormColumn.DescEn:
            		return this.DescEn.CompareTo(rhs.DescEn);
            		
            		                 
            	
            	
            	case SeFormColumn.OrderFlg:
            		return this.OrderFlg.Value.CompareTo(rhs.OrderFlg.Value);
            		
            		                 
            	
            	
            	case SeFormColumn.EdCodeStudyMethodId:
            		return this.EdCodeStudyMethodId.Value.CompareTo(rhs.EdCodeStudyMethodId.Value);
            		
            		                 
            	
            	
            	case SeFormColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case SeFormColumn.AsCodeDegreeClassId:
            		return this.AsCodeDegreeClassId.Value.CompareTo(rhs.AsCodeDegreeClassId.Value);
            		
            		                 
            	
            	
            	case SeFormColumn.SignatureFlg:
            		return this.SignatureFlg.Value.CompareTo(rhs.SignatureFlg.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SeFormKey> Members
		
		// member variable for the EntityId property
		private SeFormKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SeFormKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SeFormKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SeForm")
					.Append("|").Append( this.SeFormId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{14}{13}- SeFormId: {0}{13}- SeModuleId: {1}{13}- FormCodeName: {2}{13}- DescAr: {3}{13}- MenuPage: {4}{13}- FacultyFlag: {5}{13}- TrandFlag: {6}{13}- DescEn: {7}{13}- OrderFlg: {8}{13}- EdCodeStudyMethodId: {9}{13}- AsFacultyInfoId: {10}{13}- AsCodeDegreeClassId: {11}{13}- SignatureFlg: {12}{13}{15}", 
				this.SeFormId,
				this.SeModuleId,
				this.FormCodeName,
				this.DescAr,
				this.MenuPage,
				this.FacultyFlag,
				this.TrandFlag,
				(this.DescEn == null) ? string.Empty : this.DescEn.ToString(),
				(this.OrderFlg == null) ? string.Empty : this.OrderFlg.ToString(),
				(this.EdCodeStudyMethodId == null) ? string.Empty : this.EdCodeStudyMethodId.ToString(),
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				(this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString(),
				(this.SignatureFlg == null) ? string.Empty : this.SignatureFlg.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SE_FORM' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SeFormEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SE_FORM_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SE_FORM"</remarks>
		public System.Decimal SeFormId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSeFormId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SE_MODULE_ID : 
		/// </summary>
		public System.Decimal		  SeModuleId = 0.0m;
		
		/// <summary>
		/// FORM_CODE_NAME : 
		/// </summary>
		public System.String		  FormCodeName = string.Empty;
		
		/// <summary>
		/// DESC_AR : 
		/// </summary>
		public System.String		  DescAr = string.Empty;
		
		/// <summary>
		/// Menu_Page : 
		/// </summary>
		public System.Decimal		  MenuPage = 0.0m;
		
		/// <summary>
		/// Faculty_Flag : 
		/// </summary>
		public System.Decimal		  FacultyFlag = 0.0m;
		
		/// <summary>
		/// Trand_Flag : 
		/// </summary>
		public System.Decimal		  TrandFlag = 0.0m;
		
		/// <summary>
		/// DESC_EN : 
		/// </summary>
		public System.String		  DescEn = null;
		
		/// <summary>
		/// ORDER_FLG : 
		/// </summary>
		public System.Decimal?		  OrderFlg = null;
		
		/// <summary>
		/// ED_CODE_STUDY_METHOD_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeStudyMethodId = null;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_CLASS_ID : 
		/// </summary>
		public System.Decimal?		  AsCodeDegreeClassId = null;
		
		/// <summary>
		/// SIGNATURE_FLG : to show signature contol in reports
		/// </summary>
		public System.Boolean?		  SignatureFlg = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsCodeDegreeClass _asCodeDegreeClassIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return this._asCodeDegreeClassIdSource; }
            set { this._asCodeDegreeClassIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdCodeStudyMethod _edCodeStudyMethodIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeStudyMethod"/>.
		/// </summary>
		/// <value>The source EdCodeStudyMethod for EdCodeStudyMethodId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeStudyMethod EdCodeStudyMethodIdSource
      	{
            get { return this._edCodeStudyMethodIdSource; }
            set { this._edCodeStudyMethodIdSource = value; }
      	}
		private SeModule _seModuleIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeModule"/>.
		/// </summary>
		/// <value>The source SeModule for SeModuleId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeModule SeModuleIdSource
      	{
            get { return this._seModuleIdSource; }
            set { this._seModuleIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EdStudAcadWarnCollection
		
		private TList<EdStudAcadWarn> _edStudAcadWarnSeFormId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudAcadWarnSeFormId
		/// </summary>
		
		public TList<EdStudAcadWarn> EdStudAcadWarnCollection
		{
			get
			{
				if (_edStudAcadWarnSeFormId == null)
				{
				_edStudAcadWarnSeFormId = new TList<EdStudAcadWarn>();
				}
	
				return _edStudAcadWarnSeFormId;
			}
			set { _edStudAcadWarnSeFormId = value; }
		}
		
		#endregion

		#region CtrStudExpCollection
		
		private TList<CtrStudExp> _ctrStudExpSeFormId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _ctrStudExpSeFormId
		/// </summary>
		
		public TList<CtrStudExp> CtrStudExpCollection
		{
			get
			{
				if (_ctrStudExpSeFormId == null)
				{
				_ctrStudExpSeFormId = new TList<CtrStudExp>();
				}
	
				return _ctrStudExpSeFormId;
			}
			set { _ctrStudExpSeFormId = value; }
		}
		
		#endregion

		#region EdStudAbsFwCollection
		
		private TList<EdStudAbsFw> _edStudAbsFwSeFormId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudAbsFwSeFormId
		/// </summary>
		
		public TList<EdStudAbsFw> EdStudAbsFwCollection
		{
			get
			{
				if (_edStudAbsFwSeFormId == null)
				{
				_edStudAbsFwSeFormId = new TList<EdStudAbsFw>();
				}
	
				return _edStudAbsFwSeFormId;
			}
			set { _edStudAbsFwSeFormId = value; }
		}
		
		#endregion

		#region EdStudExcuseCollection
		
		private TList<EdStudExcuse> _edStudExcuseSeFormId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudExcuseSeFormId
		/// </summary>
		
		public TList<EdStudExcuse> EdStudExcuseCollection
		{
			get
			{
				if (_edStudExcuseSeFormId == null)
				{
				_edStudExcuseSeFormId = new TList<EdStudExcuse>();
				}
	
				return _edStudExcuseSeFormId;
			}
			set { _edStudExcuseSeFormId = value; }
		}
		
		#endregion

		#region EdStudEnrollChangeCollection
		
		private TList<EdStudEnrollChange> _edStudEnrollChangeSeFormId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudEnrollChangeSeFormId
		/// </summary>
		
		public TList<EdStudEnrollChange> EdStudEnrollChangeCollection
		{
			get
			{
				if (_edStudEnrollChangeSeFormId == null)
				{
				_edStudEnrollChangeSeFormId = new TList<EdStudEnrollChange>();
				}
	
				return _edStudEnrollChangeSeFormId;
			}
			set { _edStudEnrollChangeSeFormId = value; }
		}
		
		#endregion

		#region SeAccntFormDiffCollection
		
		private TList<SeAccntFormDiff> _seAccntFormDiffSeFormId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _seAccntFormDiffSeFormId
		/// </summary>
		
		public TList<SeAccntFormDiff> SeAccntFormDiffCollection
		{
			get
			{
				if (_seAccntFormDiffSeFormId == null)
				{
				_seAccntFormDiffSeFormId = new TList<SeAccntFormDiff>();
				}
	
				return _seAccntFormDiffSeFormId;
			}
			set { _seAccntFormDiffSeFormId = value; }
		}
		
		#endregion

		#region EdStudCourseRegAssessCollection
		
		private TList<EdStudCourseRegAssess> _edStudCourseRegAssessSeFormId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCourseRegAssessSeFormId
		/// </summary>
		
		public TList<EdStudCourseRegAssess> EdStudCourseRegAssessCollection
		{
			get
			{
				if (_edStudCourseRegAssessSeFormId == null)
				{
				_edStudCourseRegAssessSeFormId = new TList<EdStudCourseRegAssess>();
				}
	
				return _edStudCourseRegAssessSeFormId;
			}
			set { _edStudCourseRegAssessSeFormId = value; }
		}
		
		#endregion

		#region SeUserAccntFormDiffCollection
		
		private TList<SeUserAccntFormDiff> _seUserAccntFormDiffSeFormId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _seUserAccntFormDiffSeFormId
		/// </summary>
		
		public TList<SeUserAccntFormDiff> SeUserAccntFormDiffCollection
		{
			get
			{
				if (_seUserAccntFormDiffSeFormId == null)
				{
				_seUserAccntFormDiffSeFormId = new TList<SeUserAccntFormDiff>();
				}
	
				return _seUserAccntFormDiffSeFormId;
			}
			set { _seUserAccntFormDiffSeFormId = value; }
		}
		
		#endregion

		#region SeFormControlCollection
		
		private TList<SeFormControl> _seFormControlSeFormId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _seFormControlSeFormId
		/// </summary>
		
		public TList<SeFormControl> SeFormControlCollection
		{
			get
			{
				if (_seFormControlSeFormId == null)
				{
				_seFormControlSeFormId = new TList<SeFormControl>();
				}
	
				return _seFormControlSeFormId;
			}
			set { _seFormControlSeFormId = value; }
		}
		
		#endregion

		#region EdStudCourseRegCollection
		
		private TList<EdStudCourseReg> _edStudCourseRegSeFormId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCourseRegSeFormId
		/// </summary>
		
		public TList<EdStudCourseReg> EdStudCourseRegCollection
		{
			get
			{
				if (_edStudCourseRegSeFormId == null)
				{
				_edStudCourseRegSeFormId = new TList<EdStudCourseReg>();
				}
	
				return _edStudCourseRegSeFormId;
			}
			set { _edStudCourseRegSeFormId = value; }
		}
		
		#endregion

		#region EdSemAgendaFormCollection
		
		private TList<EdSemAgendaForm> _edSemAgendaFormSeFormId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edSemAgendaFormSeFormId
		/// </summary>
		
		public TList<EdSemAgendaForm> EdSemAgendaFormCollection
		{
			get
			{
				if (_edSemAgendaFormSeFormId == null)
				{
				_edSemAgendaFormSeFormId = new TList<EdSemAgendaForm>();
				}
	
				return _edSemAgendaFormSeFormId;
			}
			set { _edSemAgendaFormSeFormId = value; }
		}
		
		#endregion

		#region EdOfferingCourseCollection
		
		private TList<EdOfferingCourse> _edOfferingCourseSeFormId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edOfferingCourseSeFormId
		/// </summary>
		
		public TList<EdOfferingCourse> EdOfferingCourseCollection
		{
			get
			{
				if (_edOfferingCourseSeFormId == null)
				{
				_edOfferingCourseSeFormId = new TList<EdOfferingCourse>();
				}
	
				return _edOfferingCourseSeFormId;
			}
			set { _edOfferingCourseSeFormId = value; }
		}
		
		#endregion

		#region FeeStudFeeItemCollection
		
		private TList<FeeStudFeeItem> _feeStudFeeItemSeFormId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeStudFeeItemSeFormId
		/// </summary>
		
		public TList<FeeStudFeeItem> FeeStudFeeItemCollection
		{
			get
			{
				if (_feeStudFeeItemSeFormId == null)
				{
				_feeStudFeeItemSeFormId = new TList<FeeStudFeeItem>();
				}
	
				return _feeStudFeeItemSeFormId;
			}
			set { _feeStudFeeItemSeFormId = value; }
		}
		
		#endregion

		#region EdStudCourseGrdChngCollection
		
		private TList<EdStudCourseGrdChng> _edStudCourseGrdChngSeFormId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCourseGrdChngSeFormId
		/// </summary>
		
		public TList<EdStudCourseGrdChng> EdStudCourseGrdChngCollection
		{
			get
			{
				if (_edStudCourseGrdChngSeFormId == null)
				{
				_edStudCourseGrdChngSeFormId = new TList<EdStudCourseGrdChng>();
				}
	
				return _edStudCourseGrdChngSeFormId;
			}
			set { _edStudCourseGrdChngSeFormId = value; }
		}
		
		#endregion

		#region CtrStudOutCollection
		
		private TList<CtrStudOut> _ctrStudOutSeFormId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _ctrStudOutSeFormId
		/// </summary>
		
		public TList<CtrStudOut> CtrStudOutCollection
		{
			get
			{
				if (_ctrStudOutSeFormId == null)
				{
				_ctrStudOutSeFormId = new TList<CtrStudOut>();
				}
	
				return _ctrStudOutSeFormId;
			}
			set { _ctrStudOutSeFormId = value; }
		}
		
		#endregion

		#region UsrTopLinkCollection
		
		private TList<UsrTopLink> _usrTopLinkSeFormId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _usrTopLinkSeFormId
		/// </summary>
		
		public TList<UsrTopLink> UsrTopLinkCollection
		{
			get
			{
				if (_usrTopLinkSeFormId == null)
				{
				_usrTopLinkSeFormId = new TList<UsrTopLink>();
				}
	
				return _usrTopLinkSeFormId;
			}
			set { _usrTopLinkSeFormId = value; }
		}
		
		#endregion

		#region SeApplicationLogCollection
		
		private TList<SeApplicationLog> _seApplicationLogSeFormId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _seApplicationLogSeFormId
		/// </summary>
		
		public TList<SeApplicationLog> SeApplicationLogCollection
		{
			get
			{
				if (_seApplicationLogSeFormId == null)
				{
				_seApplicationLogSeFormId = new TList<SeApplicationLog>();
				}
	
				return _seApplicationLogSeFormId;
			}
			set { _seApplicationLogSeFormId = value; }
		}
		
		#endregion

		#region EdStudCourseChngCollection
		
		private TList<EdStudCourseChng> _edStudCourseChngSeFormId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCourseChngSeFormId
		/// </summary>
		
		public TList<EdStudCourseChng> EdStudCourseChngCollection
		{
			get
			{
				if (_edStudCourseChngSeFormId == null)
				{
				_edStudCourseChngSeFormId = new TList<EdStudCourseChng>();
				}
	
				return _edStudCourseChngSeFormId;
			}
			set { _edStudCourseChngSeFormId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SeFormEntityData _tmp = new SeFormEntityData();
						
			_tmp.SeFormId = this.SeFormId;
			_tmp.OriginalSeFormId = this.OriginalSeFormId;
			
			_tmp.SeModuleId = this.SeModuleId;
			_tmp.FormCodeName = this.FormCodeName;
			_tmp.DescAr = this.DescAr;
			_tmp.MenuPage = this.MenuPage;
			_tmp.FacultyFlag = this.FacultyFlag;
			_tmp.TrandFlag = this.TrandFlag;
			_tmp.DescEn = this.DescEn;
			_tmp.OrderFlg = this.OrderFlg;
			_tmp.EdCodeStudyMethodId = this.EdCodeStudyMethodId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.SignatureFlg = this.SignatureFlg;
			
			#region Source Parent Composite Entities
			if (this.AsCodeDegreeClassIdSource != null)
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdCodeStudyMethodIdSource != null)
				_tmp.EdCodeStudyMethodIdSource = MakeCopyOf(this.EdCodeStudyMethodIdSource) as EdCodeStudyMethod;
			if (this.SeModuleIdSource != null)
				_tmp.SeModuleIdSource = MakeCopyOf(this.SeModuleIdSource) as SeModule;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._edStudAcadWarnSeFormId != null)
				_tmp.EdStudAcadWarnCollection = (TList<EdStudAcadWarn>) MakeCopyOf(this.EdStudAcadWarnCollection); 
			if (this._ctrStudExpSeFormId != null)
				_tmp.CtrStudExpCollection = (TList<CtrStudExp>) MakeCopyOf(this.CtrStudExpCollection); 
			if (this._edStudAbsFwSeFormId != null)
				_tmp.EdStudAbsFwCollection = (TList<EdStudAbsFw>) MakeCopyOf(this.EdStudAbsFwCollection); 
			if (this._edStudExcuseSeFormId != null)
				_tmp.EdStudExcuseCollection = (TList<EdStudExcuse>) MakeCopyOf(this.EdStudExcuseCollection); 
			if (this._edStudEnrollChangeSeFormId != null)
				_tmp.EdStudEnrollChangeCollection = (TList<EdStudEnrollChange>) MakeCopyOf(this.EdStudEnrollChangeCollection); 
			if (this._seAccntFormDiffSeFormId != null)
				_tmp.SeAccntFormDiffCollection = (TList<SeAccntFormDiff>) MakeCopyOf(this.SeAccntFormDiffCollection); 
			if (this._edStudCourseRegAssessSeFormId != null)
				_tmp.EdStudCourseRegAssessCollection = (TList<EdStudCourseRegAssess>) MakeCopyOf(this.EdStudCourseRegAssessCollection); 
			if (this._seUserAccntFormDiffSeFormId != null)
				_tmp.SeUserAccntFormDiffCollection = (TList<SeUserAccntFormDiff>) MakeCopyOf(this.SeUserAccntFormDiffCollection); 
			if (this._seFormControlSeFormId != null)
				_tmp.SeFormControlCollection = (TList<SeFormControl>) MakeCopyOf(this.SeFormControlCollection); 
			if (this._edStudCourseRegSeFormId != null)
				_tmp.EdStudCourseRegCollection = (TList<EdStudCourseReg>) MakeCopyOf(this.EdStudCourseRegCollection); 
			if (this._edSemAgendaFormSeFormId != null)
				_tmp.EdSemAgendaFormCollection = (TList<EdSemAgendaForm>) MakeCopyOf(this.EdSemAgendaFormCollection); 
			if (this._edOfferingCourseSeFormId != null)
				_tmp.EdOfferingCourseCollection = (TList<EdOfferingCourse>) MakeCopyOf(this.EdOfferingCourseCollection); 
			if (this._feeStudFeeItemSeFormId != null)
				_tmp.FeeStudFeeItemCollection = (TList<FeeStudFeeItem>) MakeCopyOf(this.FeeStudFeeItemCollection); 
			if (this._edStudCourseGrdChngSeFormId != null)
				_tmp.EdStudCourseGrdChngCollection = (TList<EdStudCourseGrdChng>) MakeCopyOf(this.EdStudCourseGrdChngCollection); 
			if (this._ctrStudOutSeFormId != null)
				_tmp.CtrStudOutCollection = (TList<CtrStudOut>) MakeCopyOf(this.CtrStudOutCollection); 
			if (this._usrTopLinkSeFormId != null)
				_tmp.UsrTopLinkCollection = (TList<UsrTopLink>) MakeCopyOf(this.UsrTopLinkCollection); 
			if (this._seApplicationLogSeFormId != null)
				_tmp.SeApplicationLogCollection = (TList<SeApplicationLog>) MakeCopyOf(this.SeApplicationLogCollection); 
			if (this._edStudCourseChngSeFormId != null)
				_tmp.EdStudCourseChngCollection = (TList<EdStudCourseChng>) MakeCopyOf(this.EdStudCourseChngCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SeFormEntityData _tmp = new SeFormEntityData();
						
			_tmp.SeFormId = this.SeFormId;
			_tmp.OriginalSeFormId = this.OriginalSeFormId;
			
			_tmp.SeModuleId = this.SeModuleId;
			_tmp.FormCodeName = this.FormCodeName;
			_tmp.DescAr = this.DescAr;
			_tmp.MenuPage = this.MenuPage;
			_tmp.FacultyFlag = this.FacultyFlag;
			_tmp.TrandFlag = this.TrandFlag;
			_tmp.DescEn = this.DescEn;
			_tmp.OrderFlg = this.OrderFlg;
			_tmp.EdCodeStudyMethodId = this.EdCodeStudyMethodId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.SignatureFlg = this.SignatureFlg;
			
			#region Source Parent Composite Entities
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				_tmp.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdCodeStudyMethodIdSource != null && existingCopies.Contains(this.EdCodeStudyMethodIdSource))
				_tmp.EdCodeStudyMethodIdSource = existingCopies[this.EdCodeStudyMethodIdSource] as EdCodeStudyMethod;
			else
				_tmp.EdCodeStudyMethodIdSource = MakeCopyOf(this.EdCodeStudyMethodIdSource, existingCopies) as EdCodeStudyMethod;
			if (this.SeModuleIdSource != null && existingCopies.Contains(this.SeModuleIdSource))
				_tmp.SeModuleIdSource = existingCopies[this.SeModuleIdSource] as SeModule;
			else
				_tmp.SeModuleIdSource = MakeCopyOf(this.SeModuleIdSource, existingCopies) as SeModule;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EdStudAcadWarnCollection = (TList<EdStudAcadWarn>) MakeCopyOf(this.EdStudAcadWarnCollection, existingCopies); 
			_tmp.CtrStudExpCollection = (TList<CtrStudExp>) MakeCopyOf(this.CtrStudExpCollection, existingCopies); 
			_tmp.EdStudAbsFwCollection = (TList<EdStudAbsFw>) MakeCopyOf(this.EdStudAbsFwCollection, existingCopies); 
			_tmp.EdStudExcuseCollection = (TList<EdStudExcuse>) MakeCopyOf(this.EdStudExcuseCollection, existingCopies); 
			_tmp.EdStudEnrollChangeCollection = (TList<EdStudEnrollChange>) MakeCopyOf(this.EdStudEnrollChangeCollection, existingCopies); 
			_tmp.SeAccntFormDiffCollection = (TList<SeAccntFormDiff>) MakeCopyOf(this.SeAccntFormDiffCollection, existingCopies); 
			_tmp.EdStudCourseRegAssessCollection = (TList<EdStudCourseRegAssess>) MakeCopyOf(this.EdStudCourseRegAssessCollection, existingCopies); 
			_tmp.SeUserAccntFormDiffCollection = (TList<SeUserAccntFormDiff>) MakeCopyOf(this.SeUserAccntFormDiffCollection, existingCopies); 
			_tmp.SeFormControlCollection = (TList<SeFormControl>) MakeCopyOf(this.SeFormControlCollection, existingCopies); 
			_tmp.EdStudCourseRegCollection = (TList<EdStudCourseReg>) MakeCopyOf(this.EdStudCourseRegCollection, existingCopies); 
			_tmp.EdSemAgendaFormCollection = (TList<EdSemAgendaForm>) MakeCopyOf(this.EdSemAgendaFormCollection, existingCopies); 
			_tmp.EdOfferingCourseCollection = (TList<EdOfferingCourse>) MakeCopyOf(this.EdOfferingCourseCollection, existingCopies); 
			_tmp.FeeStudFeeItemCollection = (TList<FeeStudFeeItem>) MakeCopyOf(this.FeeStudFeeItemCollection, existingCopies); 
			_tmp.EdStudCourseGrdChngCollection = (TList<EdStudCourseGrdChng>) MakeCopyOf(this.EdStudCourseGrdChngCollection, existingCopies); 
			_tmp.CtrStudOutCollection = (TList<CtrStudOut>) MakeCopyOf(this.CtrStudOutCollection, existingCopies); 
			_tmp.UsrTopLinkCollection = (TList<UsrTopLink>) MakeCopyOf(this.UsrTopLinkCollection, existingCopies); 
			_tmp.SeApplicationLogCollection = (TList<SeApplicationLog>) MakeCopyOf(this.SeApplicationLogCollection, existingCopies); 
			_tmp.EdStudCourseChngCollection = (TList<EdStudCourseChng>) MakeCopyOf(this.EdStudCourseChngCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SeFormColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SeFormColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SeFormColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SeFormColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SeFormColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SeFormColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SeFormEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SeFormEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SeFormColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SeFormColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SeFormEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SeFormEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SeFormEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SeForm"/> object.
	/// </remarks>
	public class SeFormEventArgs : System.EventArgs
	{
		private SeFormColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SeFormEventArgs class.
		///</summary>
		public SeFormEventArgs(SeFormColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SeFormEventArgs class.
		///</summary>
		public SeFormEventArgs(SeFormColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SeFormColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SeFormColumn" />
		public SeFormColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SeForm related events.
	///</summary>
	public delegate void SeFormEventHandler(object sender, SeFormEventArgs e);
	
	#region SeFormComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SeFormComparer : System.Collections.Generic.IComparer<SeForm>
	{
		SeFormColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SeFormComparer"/> class.
        /// </summary>
		public SeFormComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SeFormComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SeFormComparer(SeFormColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SeForm"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SeForm"/> to compare.</param>
        /// <param name="b">The second <c>SeForm</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SeForm a, SeForm b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SeForm entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SeForm a, SeForm b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SeFormColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SeFormKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SeForm"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SeFormKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SeFormKey class.
		/// </summary>
		public SeFormKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SeFormKey class.
		/// </summary>
		public SeFormKey(SeFormBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SeFormId = entity.SeFormId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SeFormKey class.
		/// </summary>
		public SeFormKey(System.Decimal _seFormId)
		{
			#region Init Properties

			this.SeFormId = _seFormId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SeFormBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SeFormBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SeFormId property
		private System.Decimal _seFormId;
		
		/// <summary>
		/// Gets or sets the SeFormId property.
		/// </summary>
		public System.Decimal SeFormId
		{
			get { return _seFormId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SeFormId = value;
				
				_seFormId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SeFormId = ( values["SeFormId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SeFormId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SeFormId", SeFormId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SeFormId: {0}{1}",
								SeFormId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SeFormColumn Enum
	
	/// <summary>
	/// Enumerate the SeForm columns.
	/// </summary>
	[Serializable]
	public enum SeFormColumn : int
	{
		/// <summary>
		/// SeFormId : 
		/// </summary>
		[EnumTextValue("SE_FORM_ID")]
		[ColumnEnum("SE_FORM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SeFormId = 1,
		/// <summary>
		/// SeModuleId : 
		/// </summary>
		[EnumTextValue("SE_MODULE_ID")]
		[ColumnEnum("SE_MODULE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SeModuleId = 2,
		/// <summary>
		/// FormCodeName : 
		/// </summary>
		[EnumTextValue("FORM_CODE_NAME")]
		[ColumnEnum("FORM_CODE_NAME", typeof(System.String), System.Data.DbType.String, false, false, false, 150)]
		FormCodeName = 3,
		/// <summary>
		/// DescAr : 
		/// </summary>
		[EnumTextValue("DESC_AR")]
		[ColumnEnum("DESC_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 150)]
		DescAr = 4,
		/// <summary>
		/// MenuPage : 
		/// </summary>
		[EnumTextValue("Menu_Page")]
		[ColumnEnum("Menu_Page", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		MenuPage = 5,
		/// <summary>
		/// FacultyFlag : 
		/// </summary>
		[EnumTextValue("Faculty_Flag")]
		[ColumnEnum("Faculty_Flag", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		FacultyFlag = 6,
		/// <summary>
		/// TrandFlag : 
		/// </summary>
		[EnumTextValue("Trand_Flag")]
		[ColumnEnum("Trand_Flag", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		TrandFlag = 7,
		/// <summary>
		/// DescEn : 
		/// </summary>
		[EnumTextValue("DESC_EN")]
		[ColumnEnum("DESC_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		DescEn = 8,
		/// <summary>
		/// OrderFlg : 
		/// </summary>
		[EnumTextValue("ORDER_FLG")]
		[ColumnEnum("ORDER_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		OrderFlg = 9,
		/// <summary>
		/// EdCodeStudyMethodId : 
		/// </summary>
		[EnumTextValue("ED_CODE_STUDY_METHOD_ID")]
		[ColumnEnum("ED_CODE_STUDY_METHOD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeStudyMethodId = 10,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 11,
		/// <summary>
		/// AsCodeDegreeClassId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_CLASS_ID")]
		[ColumnEnum("AS_CODE_DEGREE_CLASS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeClassId = 12,
		/// <summary>
		/// SignatureFlg : to show signature contol in reports
		/// </summary>
		[EnumTextValue("SIGNATURE_FLG")]
		[ColumnEnum("SIGNATURE_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		SignatureFlg = 13
	}//End enum

	#endregion SeFormColumn Enum

} // end namespace
