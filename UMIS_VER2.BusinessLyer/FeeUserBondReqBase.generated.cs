
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file FeeUserBondReq.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'FEE_USER_BOND_REQ' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class FeeUserBondReqBase : EntityBase, IFeeUserBondReq, IEntityId<FeeUserBondReqKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private FeeUserBondReqEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private FeeUserBondReqEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private FeeUserBondReqEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<FeeUserBondReq> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeUserBondReqEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeUserBondReqEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="FeeUserBondReqBase"/> instance.
		///</summary>
		public FeeUserBondReqBase()
		{
			this.entityData = new FeeUserBondReqEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="FeeUserBondReqBase"/> instance.
		///</summary>
		///<param name="_feeUserBondReqId">تسجيل سندات الصرف</param>
		///<param name="_edAcadYearId"></param>
		///<param name="_reqNum">رقم السند Automatic every year</param>
		///<param name="_reqDate"></param>
		///<param name="_userName">اسم المستفيد</param>
		///<param name="_feeCdeBondItemId">بند السند</param>
		///<param name="_amount"></param>
		///<param name="_gsCodeCurrencyId"></param>
		///<param name="_voucherNumber"></param>
		///<param name="_notes">البيان</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public FeeUserBondReqBase(System.Decimal _feeUserBondReqId, System.Decimal _edAcadYearId, 
			System.Decimal _reqNum, System.DateTime _reqDate, System.String _userName, 
			System.Int32 _feeCdeBondItemId, System.Decimal _amount, System.Decimal _gsCodeCurrencyId, 
			System.String _voucherNumber, System.String _notes, System.Decimal? _seUserId, 
			System.DateTime? _lastDate)
		{
			this.entityData = new FeeUserBondReqEntityData();
			this.backupData = null;

			this.FeeUserBondReqId = _feeUserBondReqId;
			this.EdAcadYearId = _edAcadYearId;
			this.ReqNum = _reqNum;
			this.ReqDate = _reqDate;
			this.UserName = _userName;
			this.FeeCdeBondItemId = _feeCdeBondItemId;
			this.Amount = _amount;
			this.GsCodeCurrencyId = _gsCodeCurrencyId;
			this.VoucherNumber = _voucherNumber;
			this.Notes = _notes;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="FeeUserBondReq"/> instance.
		///</summary>
		///<param name="_feeUserBondReqId">تسجيل سندات الصرف</param>
		///<param name="_edAcadYearId"></param>
		///<param name="_reqNum">رقم السند Automatic every year</param>
		///<param name="_reqDate"></param>
		///<param name="_userName">اسم المستفيد</param>
		///<param name="_feeCdeBondItemId">بند السند</param>
		///<param name="_amount"></param>
		///<param name="_gsCodeCurrencyId"></param>
		///<param name="_voucherNumber"></param>
		///<param name="_notes">البيان</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static FeeUserBondReq CreateFeeUserBondReq(System.Decimal _feeUserBondReqId, System.Decimal _edAcadYearId, 
			System.Decimal _reqNum, System.DateTime _reqDate, System.String _userName, 
			System.Int32 _feeCdeBondItemId, System.Decimal _amount, System.Decimal _gsCodeCurrencyId, 
			System.String _voucherNumber, System.String _notes, System.Decimal? _seUserId, 
			System.DateTime? _lastDate)
		{
			FeeUserBondReq newFeeUserBondReq = new FeeUserBondReq();
			newFeeUserBondReq.FeeUserBondReqId = _feeUserBondReqId;
			newFeeUserBondReq.EdAcadYearId = _edAcadYearId;
			newFeeUserBondReq.ReqNum = _reqNum;
			newFeeUserBondReq.ReqDate = _reqDate;
			newFeeUserBondReq.UserName = _userName;
			newFeeUserBondReq.FeeCdeBondItemId = _feeCdeBondItemId;
			newFeeUserBondReq.Amount = _amount;
			newFeeUserBondReq.GsCodeCurrencyId = _gsCodeCurrencyId;
			newFeeUserBondReq.VoucherNumber = _voucherNumber;
			newFeeUserBondReq.Notes = _notes;
			newFeeUserBondReq.SeUserId = _seUserId;
			newFeeUserBondReq.LastDate = _lastDate;
			return newFeeUserBondReq;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the FeeUserBondReqId property. 
		///		تسجيل سندات الصرف
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"تسجيل سندات الصرف"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal FeeUserBondReqId
		{
			get
			{
				return this.entityData.FeeUserBondReqId; 
			}
			
			set
			{
				if (this.entityData.FeeUserBondReqId == value)
					return;
					
				OnColumnChanging(FeeUserBondReqColumn.FeeUserBondReqId, this.entityData.FeeUserBondReqId);
				this.entityData.FeeUserBondReqId = value;
				this.EntityId.FeeUserBondReqId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserBondReqColumn.FeeUserBondReqId, this.entityData.FeeUserBondReqId);
				OnPropertyChanged("FeeUserBondReqId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the FEE_USER_BOND_REQ_ID property.
		///		تسجيل سندات الصرف
		/// </summary>
		/// <remarks>This is the original value of the FEE_USER_BOND_REQ_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalFeeUserBondReqId
		{
			get { return this.entityData.OriginalFeeUserBondReqId; }
			set { this.entityData.OriginalFeeUserBondReqId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(FeeUserBondReqColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserBondReqColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReqNum property. 
		///		رقم السند Automatic every year
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"رقم السند Automatic every year"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ReqNum
		{
			get
			{
				return this.entityData.ReqNum; 
			}
			
			set
			{
				if (this.entityData.ReqNum == value)
					return;
					
				OnColumnChanging(FeeUserBondReqColumn.ReqNum, this.entityData.ReqNum);
				this.entityData.ReqNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserBondReqColumn.ReqNum, this.entityData.ReqNum);
				OnPropertyChanged("ReqNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReqDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ReqDate
		{
			get
			{
				return this.entityData.ReqDate; 
			}
			
			set
			{
				if (this.entityData.ReqDate == value)
					return;
					
				OnColumnChanging(FeeUserBondReqColumn.ReqDate, this.entityData.ReqDate);
				this.entityData.ReqDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserBondReqColumn.ReqDate, this.entityData.ReqDate);
				OnPropertyChanged("ReqDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserName property. 
		///		اسم المستفيد
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"اسم المستفيد"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String UserName
		{
			get
			{
				return this.entityData.UserName; 
			}
			
			set
			{
				if (this.entityData.UserName == value)
					return;
					
				OnColumnChanging(FeeUserBondReqColumn.UserName, this.entityData.UserName);
				this.entityData.UserName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserBondReqColumn.UserName, this.entityData.UserName);
				OnPropertyChanged("UserName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeCdeBondItemId property. 
		///		بند السند
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"بند السند"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 FeeCdeBondItemId
		{
			get
			{
				return this.entityData.FeeCdeBondItemId; 
			}
			
			set
			{
				if (this.entityData.FeeCdeBondItemId == value)
					return;
					
				OnColumnChanging(FeeUserBondReqColumn.FeeCdeBondItemId, this.entityData.FeeCdeBondItemId);
				this.entityData.FeeCdeBondItemId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserBondReqColumn.FeeCdeBondItemId, this.entityData.FeeCdeBondItemId);
				OnPropertyChanged("FeeCdeBondItemId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Amount property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal Amount
		{
			get
			{
				return this.entityData.Amount; 
			}
			
			set
			{
				if (this.entityData.Amount == value)
					return;
					
				OnColumnChanging(FeeUserBondReqColumn.Amount, this.entityData.Amount);
				this.entityData.Amount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserBondReqColumn.Amount, this.entityData.Amount);
				OnPropertyChanged("Amount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeCurrencyId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsCodeCurrencyId
		{
			get
			{
				return this.entityData.GsCodeCurrencyId; 
			}
			
			set
			{
				if (this.entityData.GsCodeCurrencyId == value)
					return;
					
				OnColumnChanging(FeeUserBondReqColumn.GsCodeCurrencyId, this.entityData.GsCodeCurrencyId);
				this.entityData.GsCodeCurrencyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserBondReqColumn.GsCodeCurrencyId, this.entityData.GsCodeCurrencyId);
				OnPropertyChanged("GsCodeCurrencyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the VoucherNumber property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String VoucherNumber
		{
			get
			{
				return this.entityData.VoucherNumber; 
			}
			
			set
			{
				if (this.entityData.VoucherNumber == value)
					return;
					
				OnColumnChanging(FeeUserBondReqColumn.VoucherNumber, this.entityData.VoucherNumber);
				this.entityData.VoucherNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserBondReqColumn.VoucherNumber, this.entityData.VoucherNumber);
				OnPropertyChanged("VoucherNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		البيان
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"البيان"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(FeeUserBondReqColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserBondReqColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(FeeUserBondReqColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserBondReqColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(FeeUserBondReqColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserBondReqColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeCdeBondItem"/>.
		/// </summary>
		/// <value>The source FeeCdeBondItem for FeeCdeBondItemId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeCdeBondItem FeeCdeBondItemIdSource
      	{
            get { return entityData.FeeCdeBondItemIdSource; }
            set { entityData.FeeCdeBondItemIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCurrency"/>.
		/// </summary>
		/// <value>The source GsCodeCurrency for GsCodeCurrencyId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeCurrency GsCodeCurrencyIdSource
      	{
            get { return entityData.GsCodeCurrencyIdSource; }
            set { entityData.GsCodeCurrencyIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("UserName", "User Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UserName", "User Name", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("VoucherNumber", "Voucher Number", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 250));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "FEE_USER_BOND_REQ"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"FEE_USER_BOND_REQ_ID", "ED_ACAD_YEAR_ID", "REQ_NUM", "REQ_DATE", "USER_NAME", "FEE_CDE_BOND_ITEM_ID", "AMOUNT", "GS_CODE_CURRENCY_ID", "VOUCHER_NUMBER", "NOTES", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as FeeUserBondReqEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (FeeUserBondReq) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<FeeUserBondReq>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as FeeUserBondReq);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed FeeUserBondReq Entity 
		///</summary>
		protected virtual FeeUserBondReq Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			FeeUserBondReq copy = new FeeUserBondReq();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.FeeUserBondReqId = this.FeeUserBondReqId;
					copy.OriginalFeeUserBondReqId = this.OriginalFeeUserBondReqId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.ReqNum = this.ReqNum;
				copy.ReqDate = this.ReqDate;
				copy.UserName = this.UserName;
				copy.FeeCdeBondItemId = this.FeeCdeBondItemId;
				copy.Amount = this.Amount;
				copy.GsCodeCurrencyId = this.GsCodeCurrencyId;
				copy.VoucherNumber = this.VoucherNumber;
				copy.Notes = this.Notes;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.FeeCdeBondItemIdSource != null && existingCopies.Contains(this.FeeCdeBondItemIdSource))
				copy.FeeCdeBondItemIdSource = existingCopies[this.FeeCdeBondItemIdSource] as FeeCdeBondItem;
			else
				copy.FeeCdeBondItemIdSource = MakeCopyOf(this.FeeCdeBondItemIdSource, existingCopies) as FeeCdeBondItem;
			if (this.GsCodeCurrencyIdSource != null && existingCopies.Contains(this.GsCodeCurrencyIdSource))
				copy.GsCodeCurrencyIdSource = existingCopies[this.GsCodeCurrencyIdSource] as GsCodeCurrency;
			else
				copy.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource, existingCopies) as GsCodeCurrency;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed FeeUserBondReq Entity 
		///</summary>
		public virtual FeeUserBondReq Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed FeeUserBondReq Entity which is a deep copy of the current entity.
		///</summary>
		public virtual FeeUserBondReq DeepCopy()
		{
			return EntityHelper.Clone<FeeUserBondReq>(this as FeeUserBondReq);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as FeeUserBondReqEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new FeeUserBondReqEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as FeeUserBondReqEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(FeeUserBondReqColumn column)
		{
			switch(column)
			{
					case FeeUserBondReqColumn.FeeUserBondReqId:
					return entityData.FeeUserBondReqId != _originalData.FeeUserBondReqId;
					case FeeUserBondReqColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case FeeUserBondReqColumn.ReqNum:
					return entityData.ReqNum != _originalData.ReqNum;
					case FeeUserBondReqColumn.ReqDate:
					return entityData.ReqDate != _originalData.ReqDate;
					case FeeUserBondReqColumn.UserName:
					return entityData.UserName != _originalData.UserName;
					case FeeUserBondReqColumn.FeeCdeBondItemId:
					return entityData.FeeCdeBondItemId != _originalData.FeeCdeBondItemId;
					case FeeUserBondReqColumn.Amount:
					return entityData.Amount != _originalData.Amount;
					case FeeUserBondReqColumn.GsCodeCurrencyId:
					return entityData.GsCodeCurrencyId != _originalData.GsCodeCurrencyId;
					case FeeUserBondReqColumn.VoucherNumber:
					return entityData.VoucherNumber != _originalData.VoucherNumber;
					case FeeUserBondReqColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case FeeUserBondReqColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case FeeUserBondReqColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< FeeUserBondReqColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.FeeUserBondReqId != _originalData.FeeUserBondReqId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.ReqNum != _originalData.ReqNum;
			result = result || entityData.ReqDate != _originalData.ReqDate;
			result = result || entityData.UserName != _originalData.UserName;
			result = result || entityData.FeeCdeBondItemId != _originalData.FeeCdeBondItemId;
			result = result || entityData.Amount != _originalData.Amount;
			result = result || entityData.GsCodeCurrencyId != _originalData.GsCodeCurrencyId;
			result = result || entityData.VoucherNumber != _originalData.VoucherNumber;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a FeeUserBondReq Entity with the original data.
		///</summary>
		public FeeUserBondReq GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateFeeUserBondReq(
				_originalData.FeeUserBondReqId,
				_originalData.EdAcadYearId,
				_originalData.ReqNum,
				_originalData.ReqDate,
				_originalData.UserName,
				_originalData.FeeCdeBondItemId,
				_originalData.Amount,
				_originalData.GsCodeCurrencyId,
				_originalData.VoucherNumber,
				_originalData.Notes,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (FeeUserBondReq)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="FeeUserBondReqBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is FeeUserBondReqBase)
				return ValueEquals(this, (FeeUserBondReqBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="FeeUserBondReqBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.FeeUserBondReqId.GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					this.ReqNum.GetHashCode() ^ 
					this.ReqDate.GetHashCode() ^ 
					this.UserName.GetHashCode() ^ 
					this.FeeCdeBondItemId.GetHashCode() ^ 
					this.Amount.GetHashCode() ^ 
					this.GsCodeCurrencyId.GetHashCode() ^ 
					((this.VoucherNumber == null) ? string.Empty : this.VoucherNumber.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="FeeUserBondReqBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(FeeUserBondReqBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="FeeUserBondReqBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="FeeUserBondReqBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="FeeUserBondReqBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(FeeUserBondReqBase Object1, FeeUserBondReqBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.FeeUserBondReqId != Object2.FeeUserBondReqId)
				equal = false;
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if (Object1.ReqNum != Object2.ReqNum)
				equal = false;
			if (Object1.ReqDate != Object2.ReqDate)
				equal = false;
			if (Object1.UserName != Object2.UserName)
				equal = false;
			if (Object1.FeeCdeBondItemId != Object2.FeeCdeBondItemId)
				equal = false;
			if (Object1.Amount != Object2.Amount)
				equal = false;
			if (Object1.GsCodeCurrencyId != Object2.GsCodeCurrencyId)
				equal = false;
			if ( Object1.VoucherNumber != null && Object2.VoucherNumber != null )
			{
				if (Object1.VoucherNumber != Object2.VoucherNumber)
					equal = false;
			}
			else if (Object1.VoucherNumber == null ^ Object2.VoucherNumber == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((FeeUserBondReqBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static FeeUserBondReqComparer GetComparer()
        {
            return new FeeUserBondReqComparer();
        }
        */

        // Comparer delegates back to FeeUserBondReq
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(FeeUserBondReq rhs, FeeUserBondReqColumn which)
        {
            switch (which)
            {
            	
            	
            	case FeeUserBondReqColumn.FeeUserBondReqId:
            		return this.FeeUserBondReqId.CompareTo(rhs.FeeUserBondReqId);
            		
            		                 
            	
            	
            	case FeeUserBondReqColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case FeeUserBondReqColumn.ReqNum:
            		return this.ReqNum.CompareTo(rhs.ReqNum);
            		
            		                 
            	
            	
            	case FeeUserBondReqColumn.ReqDate:
            		return this.ReqDate.CompareTo(rhs.ReqDate);
            		
            		                 
            	
            	
            	case FeeUserBondReqColumn.UserName:
            		return this.UserName.CompareTo(rhs.UserName);
            		
            		                 
            	
            	
            	case FeeUserBondReqColumn.FeeCdeBondItemId:
            		return this.FeeCdeBondItemId.CompareTo(rhs.FeeCdeBondItemId);
            		
            		                 
            	
            	
            	case FeeUserBondReqColumn.Amount:
            		return this.Amount.CompareTo(rhs.Amount);
            		
            		                 
            	
            	
            	case FeeUserBondReqColumn.GsCodeCurrencyId:
            		return this.GsCodeCurrencyId.CompareTo(rhs.GsCodeCurrencyId);
            		
            		                 
            	
            	
            	case FeeUserBondReqColumn.VoucherNumber:
            		return this.VoucherNumber.CompareTo(rhs.VoucherNumber);
            		
            		                 
            	
            	
            	case FeeUserBondReqColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case FeeUserBondReqColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case FeeUserBondReqColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<FeeUserBondReqKey> Members
		
		// member variable for the EntityId property
		private FeeUserBondReqKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual FeeUserBondReqKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new FeeUserBondReqKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("FeeUserBondReq")
					.Append("|").Append( this.FeeUserBondReqId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- FeeUserBondReqId: {0}{12}- EdAcadYearId: {1}{12}- ReqNum: {2}{12}- ReqDate: {3}{12}- UserName: {4}{12}- FeeCdeBondItemId: {5}{12}- Amount: {6}{12}- GsCodeCurrencyId: {7}{12}- VoucherNumber: {8}{12}- Notes: {9}{12}- SeUserId: {10}{12}- LastDate: {11}{12}{14}", 
				this.FeeUserBondReqId,
				this.EdAcadYearId,
				this.ReqNum,
				this.ReqDate,
				this.UserName,
				this.FeeCdeBondItemId,
				this.Amount,
				this.GsCodeCurrencyId,
				(this.VoucherNumber == null) ? string.Empty : this.VoucherNumber.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'FEE_USER_BOND_REQ' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class FeeUserBondReqEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// FEE_USER_BOND_REQ_ID : تسجيل سندات الصرف
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "FEE_USER_BOND_REQ"</remarks>
		public System.Decimal FeeUserBondReqId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalFeeUserBondReqId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// REQ_NUM : رقم السند Automatic every year
		/// </summary>
		public System.Decimal		  ReqNum = 0.0m;
		
		/// <summary>
		/// REQ_DATE : 
		/// </summary>
		public System.DateTime		  ReqDate = DateTime.MinValue;
		
		/// <summary>
		/// USER_NAME : اسم المستفيد
		/// </summary>
		public System.String		  UserName = string.Empty;
		
		/// <summary>
		/// FEE_CDE_BOND_ITEM_ID : بند السند
		/// </summary>
		public System.Int32		  FeeCdeBondItemId = (int)0;
		
		/// <summary>
		/// AMOUNT : 
		/// </summary>
		public System.Decimal		  Amount = 0.0m;
		
		/// <summary>
		/// GS_CODE_CURRENCY_ID : 
		/// </summary>
		public System.Decimal		  GsCodeCurrencyId = 0.0m;
		
		/// <summary>
		/// VOUCHER_NUMBER : 
		/// </summary>
		public System.String		  VoucherNumber = null;
		
		/// <summary>
		/// NOTES : البيان
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private FeeCdeBondItem _feeCdeBondItemIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeCdeBondItem"/>.
		/// </summary>
		/// <value>The source FeeCdeBondItem for FeeCdeBondItemId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeCdeBondItem FeeCdeBondItemIdSource
      	{
            get { return this._feeCdeBondItemIdSource; }
            set { this._feeCdeBondItemIdSource = value; }
      	}
		private GsCodeCurrency _gsCodeCurrencyIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCurrency"/>.
		/// </summary>
		/// <value>The source GsCodeCurrency for GsCodeCurrencyId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeCurrency GsCodeCurrencyIdSource
      	{
            get { return this._gsCodeCurrencyIdSource; }
            set { this._gsCodeCurrencyIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			FeeUserBondReqEntityData _tmp = new FeeUserBondReqEntityData();
						
			_tmp.FeeUserBondReqId = this.FeeUserBondReqId;
			_tmp.OriginalFeeUserBondReqId = this.OriginalFeeUserBondReqId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.ReqNum = this.ReqNum;
			_tmp.ReqDate = this.ReqDate;
			_tmp.UserName = this.UserName;
			_tmp.FeeCdeBondItemId = this.FeeCdeBondItemId;
			_tmp.Amount = this.Amount;
			_tmp.GsCodeCurrencyId = this.GsCodeCurrencyId;
			_tmp.VoucherNumber = this.VoucherNumber;
			_tmp.Notes = this.Notes;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.FeeCdeBondItemIdSource != null)
				_tmp.FeeCdeBondItemIdSource = MakeCopyOf(this.FeeCdeBondItemIdSource) as FeeCdeBondItem;
			if (this.GsCodeCurrencyIdSource != null)
				_tmp.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource) as GsCodeCurrency;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			FeeUserBondReqEntityData _tmp = new FeeUserBondReqEntityData();
						
			_tmp.FeeUserBondReqId = this.FeeUserBondReqId;
			_tmp.OriginalFeeUserBondReqId = this.OriginalFeeUserBondReqId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.ReqNum = this.ReqNum;
			_tmp.ReqDate = this.ReqDate;
			_tmp.UserName = this.UserName;
			_tmp.FeeCdeBondItemId = this.FeeCdeBondItemId;
			_tmp.Amount = this.Amount;
			_tmp.GsCodeCurrencyId = this.GsCodeCurrencyId;
			_tmp.VoucherNumber = this.VoucherNumber;
			_tmp.Notes = this.Notes;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.FeeCdeBondItemIdSource != null && existingCopies.Contains(this.FeeCdeBondItemIdSource))
				_tmp.FeeCdeBondItemIdSource = existingCopies[this.FeeCdeBondItemIdSource] as FeeCdeBondItem;
			else
				_tmp.FeeCdeBondItemIdSource = MakeCopyOf(this.FeeCdeBondItemIdSource, existingCopies) as FeeCdeBondItem;
			if (this.GsCodeCurrencyIdSource != null && existingCopies.Contains(this.GsCodeCurrencyIdSource))
				_tmp.GsCodeCurrencyIdSource = existingCopies[this.GsCodeCurrencyIdSource] as GsCodeCurrency;
			else
				_tmp.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource, existingCopies) as GsCodeCurrency;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeUserBondReqColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(FeeUserBondReqColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeUserBondReqColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(FeeUserBondReqColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeUserBondReqColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(FeeUserBondReqColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				FeeUserBondReqEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new FeeUserBondReqEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeUserBondReqColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(FeeUserBondReqColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				FeeUserBondReqEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new FeeUserBondReqEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region FeeUserBondReqEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="FeeUserBondReq"/> object.
	/// </remarks>
	public class FeeUserBondReqEventArgs : System.EventArgs
	{
		private FeeUserBondReqColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the FeeUserBondReqEventArgs class.
		///</summary>
		public FeeUserBondReqEventArgs(FeeUserBondReqColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the FeeUserBondReqEventArgs class.
		///</summary>
		public FeeUserBondReqEventArgs(FeeUserBondReqColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The FeeUserBondReqColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="FeeUserBondReqColumn" />
		public FeeUserBondReqColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all FeeUserBondReq related events.
	///</summary>
	public delegate void FeeUserBondReqEventHandler(object sender, FeeUserBondReqEventArgs e);
	
	#region FeeUserBondReqComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class FeeUserBondReqComparer : System.Collections.Generic.IComparer<FeeUserBondReq>
	{
		FeeUserBondReqColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:FeeUserBondReqComparer"/> class.
        /// </summary>
		public FeeUserBondReqComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:FeeUserBondReqComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public FeeUserBondReqComparer(FeeUserBondReqColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="FeeUserBondReq"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="FeeUserBondReq"/> to compare.</param>
        /// <param name="b">The second <c>FeeUserBondReq</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(FeeUserBondReq a, FeeUserBondReq b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(FeeUserBondReq entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(FeeUserBondReq a, FeeUserBondReq b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public FeeUserBondReqColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region FeeUserBondReqKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="FeeUserBondReq"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class FeeUserBondReqKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the FeeUserBondReqKey class.
		/// </summary>
		public FeeUserBondReqKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeUserBondReqKey class.
		/// </summary>
		public FeeUserBondReqKey(FeeUserBondReqBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.FeeUserBondReqId = entity.FeeUserBondReqId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeUserBondReqKey class.
		/// </summary>
		public FeeUserBondReqKey(System.Decimal _feeUserBondReqId)
		{
			#region Init Properties

			this.FeeUserBondReqId = _feeUserBondReqId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private FeeUserBondReqBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public FeeUserBondReqBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the FeeUserBondReqId property
		private System.Decimal _feeUserBondReqId;
		
		/// <summary>
		/// Gets or sets the FeeUserBondReqId property.
		/// </summary>
		public System.Decimal FeeUserBondReqId
		{
			get { return _feeUserBondReqId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.FeeUserBondReqId = value;
				
				_feeUserBondReqId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				FeeUserBondReqId = ( values["FeeUserBondReqId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["FeeUserBondReqId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("FeeUserBondReqId", FeeUserBondReqId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("FeeUserBondReqId: {0}{1}",
								FeeUserBondReqId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region FeeUserBondReqColumn Enum
	
	/// <summary>
	/// Enumerate the FeeUserBondReq columns.
	/// </summary>
	[Serializable]
	public enum FeeUserBondReqColumn : int
	{
		/// <summary>
		/// FeeUserBondReqId : تسجيل سندات الصرف
		/// </summary>
		[EnumTextValue("FEE_USER_BOND_REQ_ID")]
		[ColumnEnum("FEE_USER_BOND_REQ_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		FeeUserBondReqId = 1,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 2,
		/// <summary>
		/// ReqNum : رقم السند Automatic every year
		/// </summary>
		[EnumTextValue("REQ_NUM")]
		[ColumnEnum("REQ_NUM", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ReqNum = 3,
		/// <summary>
		/// ReqDate : 
		/// </summary>
		[EnumTextValue("REQ_DATE")]
		[ColumnEnum("REQ_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, false)]
		ReqDate = 4,
		/// <summary>
		/// UserName : اسم المستفيد
		/// </summary>
		[EnumTextValue("USER_NAME")]
		[ColumnEnum("USER_NAME", typeof(System.String), System.Data.DbType.String, false, false, false, 150)]
		UserName = 5,
		/// <summary>
		/// FeeCdeBondItemId : بند السند
		/// </summary>
		[EnumTextValue("FEE_CDE_BOND_ITEM_ID")]
		[ColumnEnum("FEE_CDE_BOND_ITEM_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		FeeCdeBondItemId = 6,
		/// <summary>
		/// Amount : 
		/// </summary>
		[EnumTextValue("AMOUNT")]
		[ColumnEnum("AMOUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		Amount = 7,
		/// <summary>
		/// GsCodeCurrencyId : 
		/// </summary>
		[EnumTextValue("GS_CODE_CURRENCY_ID")]
		[ColumnEnum("GS_CODE_CURRENCY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsCodeCurrencyId = 8,
		/// <summary>
		/// VoucherNumber : 
		/// </summary>
		[EnumTextValue("VOUCHER_NUMBER")]
		[ColumnEnum("VOUCHER_NUMBER", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		VoucherNumber = 9,
		/// <summary>
		/// Notes : البيان
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		Notes = 10,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 11,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 12
	}//End enum

	#endregion FeeUserBondReqColumn Enum

} // end namespace
