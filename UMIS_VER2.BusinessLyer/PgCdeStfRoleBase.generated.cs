
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file PgCdeStfRole.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'PG_CDE_STF_ROLE' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class PgCdeStfRoleBase : EntityBase, IPgCdeStfRole, IEntityId<PgCdeStfRoleKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private PgCdeStfRoleEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private PgCdeStfRoleEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private PgCdeStfRoleEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<PgCdeStfRole> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event PgCdeStfRoleEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event PgCdeStfRoleEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="PgCdeStfRoleBase"/> instance.
		///</summary>
		public PgCdeStfRoleBase()
		{
			this.entityData = new PgCdeStfRoleEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="PgCdeStfRoleBase"/> instance.
		///</summary>
		///<param name="_pgCdeStfRoleId">دور العضو فى لجنه الاشراف على الرسالة</param>
		///<param name="_stfRoleAr"></param>
		///<param name="_stfRoleEn"></param>
		///<param name="_maxStudCount">عدد الطلاب المسجلين مع المشرف الرئيسى حيث ان العدد الاقصى الذي يحمل به هو 10 طلاب</param>
		///<param name="_externalFlg">يسمح ان يكون خارجى</param>
		///<param name="_roleTypeFlg">1:اشراف
		/// 		/// 2:تحكيم</param>
		public PgCdeStfRoleBase(System.Int32 _pgCdeStfRoleId, System.String _stfRoleAr, 
			System.String _stfRoleEn, System.Int32? _maxStudCount, System.Boolean? _externalFlg, 
			System.Int16? _roleTypeFlg)
		{
			this.entityData = new PgCdeStfRoleEntityData();
			this.backupData = null;

			this.PgCdeStfRoleId = _pgCdeStfRoleId;
			this.StfRoleAr = _stfRoleAr;
			this.StfRoleEn = _stfRoleEn;
			this.MaxStudCount = _maxStudCount;
			this.ExternalFlg = _externalFlg;
			this.RoleTypeFlg = _roleTypeFlg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="PgCdeStfRole"/> instance.
		///</summary>
		///<param name="_pgCdeStfRoleId">دور العضو فى لجنه الاشراف على الرسالة</param>
		///<param name="_stfRoleAr"></param>
		///<param name="_stfRoleEn"></param>
		///<param name="_maxStudCount">عدد الطلاب المسجلين مع المشرف الرئيسى حيث ان العدد الاقصى الذي يحمل به هو 10 طلاب</param>
		///<param name="_externalFlg">يسمح ان يكون خارجى</param>
		///<param name="_roleTypeFlg">1:اشراف
		/// 		/// 2:تحكيم</param>
		public static PgCdeStfRole CreatePgCdeStfRole(System.Int32 _pgCdeStfRoleId, System.String _stfRoleAr, 
			System.String _stfRoleEn, System.Int32? _maxStudCount, System.Boolean? _externalFlg, 
			System.Int16? _roleTypeFlg)
		{
			PgCdeStfRole newPgCdeStfRole = new PgCdeStfRole();
			newPgCdeStfRole.PgCdeStfRoleId = _pgCdeStfRoleId;
			newPgCdeStfRole.StfRoleAr = _stfRoleAr;
			newPgCdeStfRole.StfRoleEn = _stfRoleEn;
			newPgCdeStfRole.MaxStudCount = _maxStudCount;
			newPgCdeStfRole.ExternalFlg = _externalFlg;
			newPgCdeStfRole.RoleTypeFlg = _roleTypeFlg;
			return newPgCdeStfRole;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the PgCdeStfRoleId property. 
		///		دور العضو فى لجنه الاشراف على الرسالة
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"دور العضو فى لجنه الاشراف على الرسالة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 PgCdeStfRoleId
		{
			get
			{
				return this.entityData.PgCdeStfRoleId; 
			}
			
			set
			{
				if (this.entityData.PgCdeStfRoleId == value)
					return;
					
				OnColumnChanging(PgCdeStfRoleColumn.PgCdeStfRoleId, this.entityData.PgCdeStfRoleId);
				this.entityData.PgCdeStfRoleId = value;
				this.EntityId.PgCdeStfRoleId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgCdeStfRoleColumn.PgCdeStfRoleId, this.entityData.PgCdeStfRoleId);
				OnPropertyChanged("PgCdeStfRoleId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the PG_CDE_STF_ROLE_ID property.
		///		دور العضو فى لجنه الاشراف على الرسالة
		/// </summary>
		/// <remarks>This is the original value of the PG_CDE_STF_ROLE_ID property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalPgCdeStfRoleId
		{
			get { return this.entityData.OriginalPgCdeStfRoleId; }
			set { this.entityData.OriginalPgCdeStfRoleId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the StfRoleAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String StfRoleAr
		{
			get
			{
				return this.entityData.StfRoleAr; 
			}
			
			set
			{
				if (this.entityData.StfRoleAr == value)
					return;
					
				OnColumnChanging(PgCdeStfRoleColumn.StfRoleAr, this.entityData.StfRoleAr);
				this.entityData.StfRoleAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgCdeStfRoleColumn.StfRoleAr, this.entityData.StfRoleAr);
				OnPropertyChanged("StfRoleAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StfRoleEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String StfRoleEn
		{
			get
			{
				return this.entityData.StfRoleEn; 
			}
			
			set
			{
				if (this.entityData.StfRoleEn == value)
					return;
					
				OnColumnChanging(PgCdeStfRoleColumn.StfRoleEn, this.entityData.StfRoleEn);
				this.entityData.StfRoleEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgCdeStfRoleColumn.StfRoleEn, this.entityData.StfRoleEn);
				OnPropertyChanged("StfRoleEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaxStudCount property. 
		///		عدد الطلاب المسجلين مع المشرف الرئيسى حيث ان العدد الاقصى الذي يحمل به هو 10 طلاب
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMaxStudCountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"عدد الطلاب المسجلين مع المشرف الرئيسى حيث ان العدد الاقصى الذي يحمل به هو 10 طلاب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MaxStudCount
		{
			get
			{
				return this.entityData.MaxStudCount; 
			}
			
			set
			{
				if (this.entityData.MaxStudCount == value)
					return;
					
				OnColumnChanging(PgCdeStfRoleColumn.MaxStudCount, this.entityData.MaxStudCount);
				this.entityData.MaxStudCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgCdeStfRoleColumn.MaxStudCount, this.entityData.MaxStudCount);
				OnPropertyChanged("MaxStudCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExternalFlg property. 
		///		يسمح ان يكون خارجى
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsExternalFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"يسمح ان يكون خارجى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ExternalFlg
		{
			get
			{
				return this.entityData.ExternalFlg; 
			}
			
			set
			{
				if (this.entityData.ExternalFlg == value)
					return;
					
				OnColumnChanging(PgCdeStfRoleColumn.ExternalFlg, this.entityData.ExternalFlg);
				this.entityData.ExternalFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgCdeStfRoleColumn.ExternalFlg, this.entityData.ExternalFlg);
				OnPropertyChanged("ExternalFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RoleTypeFlg property. 
		///		1:اشراف
		/// 		/// 2:تحكيم
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsRoleTypeFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"1:اشراف 2:تحكيم"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? RoleTypeFlg
		{
			get
			{
				return this.entityData.RoleTypeFlg; 
			}
			
			set
			{
				if (this.entityData.RoleTypeFlg == value)
					return;
					
				OnColumnChanging(PgCdeStfRoleColumn.RoleTypeFlg, this.entityData.RoleTypeFlg);
				this.entityData.RoleTypeFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgCdeStfRoleColumn.RoleTypeFlg, this.entityData.RoleTypeFlg);
				OnPropertyChanged("RoleTypeFlg");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of PgStfRoleDeg objects
		///	which are related to this object through the relation FK_PG_STF_ROLE_DEG_PG_CDE_STF_ROLE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgStfRoleDeg> PgStfRoleDegCollection
		{
			get { return entityData.PgStfRoleDegCollection; }
			set { entityData.PgStfRoleDegCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of PgThesisStaff objects
		///	which are related to this object through the relation FK_PG_THESIS_STAFF_PG_CDE_STF_ROLE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgThesisStaff> PgThesisStaffCollection
		{
			get { return entityData.PgThesisStaffCollection; }
			set { entityData.PgThesisStaffCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of PgThesisCommMember objects
		///	which are related to this object through the relation FK_PG_THESIS_COMM_MEMBER_PG_CDE_STF_ROLE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgThesisCommMember> PgThesisCommMemberCollection
		{
			get { return entityData.PgThesisCommMemberCollection; }
			set { entityData.PgThesisCommMemberCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("StfRoleAr", "Stf Role Ar", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("StfRoleEn", "Stf Role En", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "PG_CDE_STF_ROLE"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"PG_CDE_STF_ROLE_ID", "STF_ROLE_AR", "STF_ROLE_EN", "MAX_STUD_COUNT", "EXTERNAL_FLG", "ROLE_TYPE_FLG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as PgCdeStfRoleEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (PgCdeStfRole) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<PgCdeStfRole>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as PgCdeStfRole);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed PgCdeStfRole Entity 
		///</summary>
		protected virtual PgCdeStfRole Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			PgCdeStfRole copy = new PgCdeStfRole();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.PgCdeStfRoleId = this.PgCdeStfRoleId;
					copy.OriginalPgCdeStfRoleId = this.OriginalPgCdeStfRoleId;
				copy.StfRoleAr = this.StfRoleAr;
				copy.StfRoleEn = this.StfRoleEn;
				copy.MaxStudCount = this.MaxStudCount;
				copy.ExternalFlg = this.ExternalFlg;
				copy.RoleTypeFlg = this.RoleTypeFlg;
			
		
			//deep copy nested objects
			copy.PgStfRoleDegCollection = (TList<PgStfRoleDeg>) MakeCopyOf(this.PgStfRoleDegCollection, existingCopies); 
			copy.PgThesisStaffCollection = (TList<PgThesisStaff>) MakeCopyOf(this.PgThesisStaffCollection, existingCopies); 
			copy.PgThesisCommMemberCollection = (TList<PgThesisCommMember>) MakeCopyOf(this.PgThesisCommMemberCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed PgCdeStfRole Entity 
		///</summary>
		public virtual PgCdeStfRole Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed PgCdeStfRole Entity which is a deep copy of the current entity.
		///</summary>
		public virtual PgCdeStfRole DeepCopy()
		{
			return EntityHelper.Clone<PgCdeStfRole>(this as PgCdeStfRole);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as PgCdeStfRoleEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new PgCdeStfRoleEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as PgCdeStfRoleEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(PgCdeStfRoleColumn column)
		{
			switch(column)
			{
					case PgCdeStfRoleColumn.PgCdeStfRoleId:
					return entityData.PgCdeStfRoleId != _originalData.PgCdeStfRoleId;
					case PgCdeStfRoleColumn.StfRoleAr:
					return entityData.StfRoleAr != _originalData.StfRoleAr;
					case PgCdeStfRoleColumn.StfRoleEn:
					return entityData.StfRoleEn != _originalData.StfRoleEn;
					case PgCdeStfRoleColumn.MaxStudCount:
					return entityData.MaxStudCount != _originalData.MaxStudCount;
					case PgCdeStfRoleColumn.ExternalFlg:
					return entityData.ExternalFlg != _originalData.ExternalFlg;
					case PgCdeStfRoleColumn.RoleTypeFlg:
					return entityData.RoleTypeFlg != _originalData.RoleTypeFlg;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< PgCdeStfRoleColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.PgCdeStfRoleId != _originalData.PgCdeStfRoleId;
			result = result || entityData.StfRoleAr != _originalData.StfRoleAr;
			result = result || entityData.StfRoleEn != _originalData.StfRoleEn;
			result = result || entityData.MaxStudCount != _originalData.MaxStudCount;
			result = result || entityData.ExternalFlg != _originalData.ExternalFlg;
			result = result || entityData.RoleTypeFlg != _originalData.RoleTypeFlg;
			return result;
		}	
		
		///<summary>
		///  Returns a PgCdeStfRole Entity with the original data.
		///</summary>
		public PgCdeStfRole GetOriginalEntity()
		{
			if (_originalData != null)
				return CreatePgCdeStfRole(
				_originalData.PgCdeStfRoleId,
				_originalData.StfRoleAr,
				_originalData.StfRoleEn,
				_originalData.MaxStudCount,
				_originalData.ExternalFlg,
				_originalData.RoleTypeFlg
				);
				
			return (PgCdeStfRole)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="PgCdeStfRoleBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is PgCdeStfRoleBase)
				return ValueEquals(this, (PgCdeStfRoleBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="PgCdeStfRoleBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.PgCdeStfRoleId.GetHashCode() ^ 
					((this.StfRoleAr == null) ? string.Empty : this.StfRoleAr.ToString()).GetHashCode() ^ 
					((this.StfRoleEn == null) ? string.Empty : this.StfRoleEn.ToString()).GetHashCode() ^ 
					((this.MaxStudCount == null) ? string.Empty : this.MaxStudCount.ToString()).GetHashCode() ^ 
					((this.ExternalFlg == null) ? string.Empty : this.ExternalFlg.ToString()).GetHashCode() ^ 
					((this.RoleTypeFlg == null) ? string.Empty : this.RoleTypeFlg.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="PgCdeStfRoleBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(PgCdeStfRoleBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="PgCdeStfRoleBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="PgCdeStfRoleBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="PgCdeStfRoleBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(PgCdeStfRoleBase Object1, PgCdeStfRoleBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.PgCdeStfRoleId != Object2.PgCdeStfRoleId)
				equal = false;
			if ( Object1.StfRoleAr != null && Object2.StfRoleAr != null )
			{
				if (Object1.StfRoleAr != Object2.StfRoleAr)
					equal = false;
			}
			else if (Object1.StfRoleAr == null ^ Object2.StfRoleAr == null )
			{
				equal = false;
			}
			if ( Object1.StfRoleEn != null && Object2.StfRoleEn != null )
			{
				if (Object1.StfRoleEn != Object2.StfRoleEn)
					equal = false;
			}
			else if (Object1.StfRoleEn == null ^ Object2.StfRoleEn == null )
			{
				equal = false;
			}
			if ( Object1.MaxStudCount != null && Object2.MaxStudCount != null )
			{
				if (Object1.MaxStudCount != Object2.MaxStudCount)
					equal = false;
			}
			else if (Object1.MaxStudCount == null ^ Object2.MaxStudCount == null )
			{
				equal = false;
			}
			if ( Object1.ExternalFlg != null && Object2.ExternalFlg != null )
			{
				if (Object1.ExternalFlg != Object2.ExternalFlg)
					equal = false;
			}
			else if (Object1.ExternalFlg == null ^ Object2.ExternalFlg == null )
			{
				equal = false;
			}
			if ( Object1.RoleTypeFlg != null && Object2.RoleTypeFlg != null )
			{
				if (Object1.RoleTypeFlg != Object2.RoleTypeFlg)
					equal = false;
			}
			else if (Object1.RoleTypeFlg == null ^ Object2.RoleTypeFlg == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((PgCdeStfRoleBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static PgCdeStfRoleComparer GetComparer()
        {
            return new PgCdeStfRoleComparer();
        }
        */

        // Comparer delegates back to PgCdeStfRole
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(PgCdeStfRole rhs, PgCdeStfRoleColumn which)
        {
            switch (which)
            {
            	
            	
            	case PgCdeStfRoleColumn.PgCdeStfRoleId:
            		return this.PgCdeStfRoleId.CompareTo(rhs.PgCdeStfRoleId);
            		
            		                 
            	
            	
            	case PgCdeStfRoleColumn.StfRoleAr:
            		return this.StfRoleAr.CompareTo(rhs.StfRoleAr);
            		
            		                 
            	
            	
            	case PgCdeStfRoleColumn.StfRoleEn:
            		return this.StfRoleEn.CompareTo(rhs.StfRoleEn);
            		
            		                 
            	
            	
            	case PgCdeStfRoleColumn.MaxStudCount:
            		return this.MaxStudCount.Value.CompareTo(rhs.MaxStudCount.Value);
            		
            		                 
            	
            	
            	case PgCdeStfRoleColumn.ExternalFlg:
            		return this.ExternalFlg.Value.CompareTo(rhs.ExternalFlg.Value);
            		
            		                 
            	
            	
            	case PgCdeStfRoleColumn.RoleTypeFlg:
            		return this.RoleTypeFlg.Value.CompareTo(rhs.RoleTypeFlg.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<PgCdeStfRoleKey> Members
		
		// member variable for the EntityId property
		private PgCdeStfRoleKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual PgCdeStfRoleKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new PgCdeStfRoleKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("PgCdeStfRole")
					.Append("|").Append( this.PgCdeStfRoleId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{7}{6}- PgCdeStfRoleId: {0}{6}- StfRoleAr: {1}{6}- StfRoleEn: {2}{6}- MaxStudCount: {3}{6}- ExternalFlg: {4}{6}- RoleTypeFlg: {5}{6}{8}", 
				this.PgCdeStfRoleId,
				(this.StfRoleAr == null) ? string.Empty : this.StfRoleAr.ToString(),
				(this.StfRoleEn == null) ? string.Empty : this.StfRoleEn.ToString(),
				(this.MaxStudCount == null) ? string.Empty : this.MaxStudCount.ToString(),
				(this.ExternalFlg == null) ? string.Empty : this.ExternalFlg.ToString(),
				(this.RoleTypeFlg == null) ? string.Empty : this.RoleTypeFlg.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'PG_CDE_STF_ROLE' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class PgCdeStfRoleEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// PG_CDE_STF_ROLE_ID : دور العضو فى لجنه الاشراف على الرسالة
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "PG_CDE_STF_ROLE"</remarks>
		public System.Int32 PgCdeStfRoleId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Int32 OriginalPgCdeStfRoleId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// STF_ROLE_AR : 
		/// </summary>
		public System.String		  StfRoleAr = null;
		
		/// <summary>
		/// STF_ROLE_EN : 
		/// </summary>
		public System.String		  StfRoleEn = null;
		
		/// <summary>
		/// MAX_STUD_COUNT : عدد الطلاب المسجلين مع المشرف الرئيسى حيث ان العدد الاقصى الذي يحمل به هو 10 طلاب
		/// </summary>
		public System.Int32?		  MaxStudCount = null;
		
		/// <summary>
		/// EXTERNAL_FLG : يسمح ان يكون خارجى
		/// </summary>
		public System.Boolean?		  ExternalFlg = null;
		
		/// <summary>
		/// ROLE_TYPE_FLG : 1:اشراف
		/// 		/// 2:تحكيم
		/// </summary>
		public System.Int16?		  RoleTypeFlg = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region PgStfRoleDegCollection
		
		private TList<PgStfRoleDeg> _pgStfRoleDegPgCdeStfRoleId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgStfRoleDegPgCdeStfRoleId
		/// </summary>
		
		public TList<PgStfRoleDeg> PgStfRoleDegCollection
		{
			get
			{
				if (_pgStfRoleDegPgCdeStfRoleId == null)
				{
				_pgStfRoleDegPgCdeStfRoleId = new TList<PgStfRoleDeg>();
				}
	
				return _pgStfRoleDegPgCdeStfRoleId;
			}
			set { _pgStfRoleDegPgCdeStfRoleId = value; }
		}
		
		#endregion

		#region PgThesisStaffCollection
		
		private TList<PgThesisStaff> _pgThesisStaffPgCdeStfRoleId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgThesisStaffPgCdeStfRoleId
		/// </summary>
		
		public TList<PgThesisStaff> PgThesisStaffCollection
		{
			get
			{
				if (_pgThesisStaffPgCdeStfRoleId == null)
				{
				_pgThesisStaffPgCdeStfRoleId = new TList<PgThesisStaff>();
				}
	
				return _pgThesisStaffPgCdeStfRoleId;
			}
			set { _pgThesisStaffPgCdeStfRoleId = value; }
		}
		
		#endregion

		#region PgThesisCommMemberCollection
		
		private TList<PgThesisCommMember> _pgThesisCommMemberPgCdeStfRoleId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgThesisCommMemberPgCdeStfRoleId
		/// </summary>
		
		public TList<PgThesisCommMember> PgThesisCommMemberCollection
		{
			get
			{
				if (_pgThesisCommMemberPgCdeStfRoleId == null)
				{
				_pgThesisCommMemberPgCdeStfRoleId = new TList<PgThesisCommMember>();
				}
	
				return _pgThesisCommMemberPgCdeStfRoleId;
			}
			set { _pgThesisCommMemberPgCdeStfRoleId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			PgCdeStfRoleEntityData _tmp = new PgCdeStfRoleEntityData();
						
			_tmp.PgCdeStfRoleId = this.PgCdeStfRoleId;
			_tmp.OriginalPgCdeStfRoleId = this.OriginalPgCdeStfRoleId;
			
			_tmp.StfRoleAr = this.StfRoleAr;
			_tmp.StfRoleEn = this.StfRoleEn;
			_tmp.MaxStudCount = this.MaxStudCount;
			_tmp.ExternalFlg = this.ExternalFlg;
			_tmp.RoleTypeFlg = this.RoleTypeFlg;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._pgStfRoleDegPgCdeStfRoleId != null)
				_tmp.PgStfRoleDegCollection = (TList<PgStfRoleDeg>) MakeCopyOf(this.PgStfRoleDegCollection); 
			if (this._pgThesisStaffPgCdeStfRoleId != null)
				_tmp.PgThesisStaffCollection = (TList<PgThesisStaff>) MakeCopyOf(this.PgThesisStaffCollection); 
			if (this._pgThesisCommMemberPgCdeStfRoleId != null)
				_tmp.PgThesisCommMemberCollection = (TList<PgThesisCommMember>) MakeCopyOf(this.PgThesisCommMemberCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			PgCdeStfRoleEntityData _tmp = new PgCdeStfRoleEntityData();
						
			_tmp.PgCdeStfRoleId = this.PgCdeStfRoleId;
			_tmp.OriginalPgCdeStfRoleId = this.OriginalPgCdeStfRoleId;
			
			_tmp.StfRoleAr = this.StfRoleAr;
			_tmp.StfRoleEn = this.StfRoleEn;
			_tmp.MaxStudCount = this.MaxStudCount;
			_tmp.ExternalFlg = this.ExternalFlg;
			_tmp.RoleTypeFlg = this.RoleTypeFlg;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.PgStfRoleDegCollection = (TList<PgStfRoleDeg>) MakeCopyOf(this.PgStfRoleDegCollection, existingCopies); 
			_tmp.PgThesisStaffCollection = (TList<PgThesisStaff>) MakeCopyOf(this.PgThesisStaffCollection, existingCopies); 
			_tmp.PgThesisCommMemberCollection = (TList<PgThesisCommMember>) MakeCopyOf(this.PgThesisCommMemberCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgCdeStfRoleColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(PgCdeStfRoleColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgCdeStfRoleColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(PgCdeStfRoleColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgCdeStfRoleColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(PgCdeStfRoleColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				PgCdeStfRoleEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new PgCdeStfRoleEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgCdeStfRoleColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(PgCdeStfRoleColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				PgCdeStfRoleEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new PgCdeStfRoleEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region PgCdeStfRoleEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="PgCdeStfRole"/> object.
	/// </remarks>
	public class PgCdeStfRoleEventArgs : System.EventArgs
	{
		private PgCdeStfRoleColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the PgCdeStfRoleEventArgs class.
		///</summary>
		public PgCdeStfRoleEventArgs(PgCdeStfRoleColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the PgCdeStfRoleEventArgs class.
		///</summary>
		public PgCdeStfRoleEventArgs(PgCdeStfRoleColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The PgCdeStfRoleColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="PgCdeStfRoleColumn" />
		public PgCdeStfRoleColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all PgCdeStfRole related events.
	///</summary>
	public delegate void PgCdeStfRoleEventHandler(object sender, PgCdeStfRoleEventArgs e);
	
	#region PgCdeStfRoleComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class PgCdeStfRoleComparer : System.Collections.Generic.IComparer<PgCdeStfRole>
	{
		PgCdeStfRoleColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:PgCdeStfRoleComparer"/> class.
        /// </summary>
		public PgCdeStfRoleComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:PgCdeStfRoleComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public PgCdeStfRoleComparer(PgCdeStfRoleColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="PgCdeStfRole"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="PgCdeStfRole"/> to compare.</param>
        /// <param name="b">The second <c>PgCdeStfRole</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(PgCdeStfRole a, PgCdeStfRole b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(PgCdeStfRole entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(PgCdeStfRole a, PgCdeStfRole b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public PgCdeStfRoleColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region PgCdeStfRoleKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="PgCdeStfRole"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class PgCdeStfRoleKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the PgCdeStfRoleKey class.
		/// </summary>
		public PgCdeStfRoleKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the PgCdeStfRoleKey class.
		/// </summary>
		public PgCdeStfRoleKey(PgCdeStfRoleBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.PgCdeStfRoleId = entity.PgCdeStfRoleId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the PgCdeStfRoleKey class.
		/// </summary>
		public PgCdeStfRoleKey(System.Int32 _pgCdeStfRoleId)
		{
			#region Init Properties

			this.PgCdeStfRoleId = _pgCdeStfRoleId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private PgCdeStfRoleBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public PgCdeStfRoleBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the PgCdeStfRoleId property
		private System.Int32 _pgCdeStfRoleId;
		
		/// <summary>
		/// Gets or sets the PgCdeStfRoleId property.
		/// </summary>
		public System.Int32 PgCdeStfRoleId
		{
			get { return _pgCdeStfRoleId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.PgCdeStfRoleId = value;
				
				_pgCdeStfRoleId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				PgCdeStfRoleId = ( values["PgCdeStfRoleId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["PgCdeStfRoleId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("PgCdeStfRoleId", PgCdeStfRoleId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("PgCdeStfRoleId: {0}{1}",
								PgCdeStfRoleId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region PgCdeStfRoleColumn Enum
	
	/// <summary>
	/// Enumerate the PgCdeStfRole columns.
	/// </summary>
	[Serializable]
	public enum PgCdeStfRoleColumn : int
	{
		/// <summary>
		/// PgCdeStfRoleId : دور العضو فى لجنه الاشراف على الرسالة
		/// </summary>
		[EnumTextValue("PG_CDE_STF_ROLE_ID")]
		[ColumnEnum("PG_CDE_STF_ROLE_ID", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		PgCdeStfRoleId = 1,
		/// <summary>
		/// StfRoleAr : 
		/// </summary>
		[EnumTextValue("STF_ROLE_AR")]
		[ColumnEnum("STF_ROLE_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		StfRoleAr = 2,
		/// <summary>
		/// StfRoleEn : 
		/// </summary>
		[EnumTextValue("STF_ROLE_EN")]
		[ColumnEnum("STF_ROLE_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		StfRoleEn = 3,
		/// <summary>
		/// MaxStudCount : عدد الطلاب المسجلين مع المشرف الرئيسى حيث ان العدد الاقصى الذي يحمل به هو 10 طلاب
		/// </summary>
		[EnumTextValue("MAX_STUD_COUNT")]
		[ColumnEnum("MAX_STUD_COUNT", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MaxStudCount = 4,
		/// <summary>
		/// ExternalFlg : يسمح ان يكون خارجى
		/// </summary>
		[EnumTextValue("EXTERNAL_FLG")]
		[ColumnEnum("EXTERNAL_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ExternalFlg = 5,
		/// <summary>
		/// RoleTypeFlg : 1:اشراف
		/// 		/// 2:تحكيم
		/// </summary>
		[EnumTextValue("ROLE_TYPE_FLG")]
		[ColumnEnum("ROLE_TYPE_FLG", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		RoleTypeFlg = 6
	}//End enum

	#endregion PgCdeStfRoleColumn Enum

} // end namespace
