
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AppTypeRegSteps.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'APP_TYPE_REG_STEPS' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AppTypeRegStepsBase : EntityBase, IAppTypeRegSteps, IEntityId<AppTypeRegStepsKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AppTypeRegStepsEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AppTypeRegStepsEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AppTypeRegStepsEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AppTypeRegSteps> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AppTypeRegStepsEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AppTypeRegStepsEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AppTypeRegStepsBase"/> instance.
		///</summary>
		public AppTypeRegStepsBase()
		{
			this.entityData = new AppTypeRegStepsEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AppTypeRegStepsBase"/> instance.
		///</summary>
		///<param name="_appTypeRegStepsId"></param>
		///<param name="_admRegStepsId"></param>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_mandatoryFlg"></param>
		///<param name="_transFlg">تاب المقاصة XXX replace with ADM_CDE_APP_TYPE_ID</param>
		///<param name="_payFlg">يجب دفع مصروف القبول قبل التاب</param>
		///<param name="_applicantFlg">تختلف التاب بين المتقدم والاوفيسر عرض فقط او عرض وادخال وتعديل</param>
		///<param name="_officerFlg">تختلف التاب بين المتقدم والاوفيسر عرض فقط او عرض وادخال وتعديل</param>
		///<param name="_reviewFlg">ظهور  زرار مراجعة</param>
		///<param name="_reviewDescrEn"></param>
		///<param name="_admCdeAppTypeId">XXX</param>
		///<param name="_payOnlineFlg">XXX</param>
		///<param name="_quickFlg"></param>
		public AppTypeRegStepsBase(System.Decimal _appTypeRegStepsId, System.Decimal? _admRegStepsId, 
			System.Decimal _asCodeDegreeClassId, System.Boolean? _mandatoryFlg, System.Boolean? _transFlg, 
			System.Boolean? _payFlg, System.Boolean? _applicantFlg, System.Boolean? _officerFlg, 
			System.Boolean? _reviewFlg, System.String _reviewDescrEn, System.Decimal? _admCdeAppTypeId, 
			System.Boolean? _payOnlineFlg, System.Boolean? _quickFlg)
		{
			this.entityData = new AppTypeRegStepsEntityData();
			this.backupData = null;

			this.AppTypeRegStepsId = _appTypeRegStepsId;
			this.AdmRegStepsId = _admRegStepsId;
			this.AsCodeDegreeClassId = _asCodeDegreeClassId;
			this.MandatoryFlg = _mandatoryFlg;
			this.TransFlg = _transFlg;
			this.PayFlg = _payFlg;
			this.ApplicantFlg = _applicantFlg;
			this.OfficerFlg = _officerFlg;
			this.ReviewFlg = _reviewFlg;
			this.ReviewDescrEn = _reviewDescrEn;
			this.AdmCdeAppTypeId = _admCdeAppTypeId;
			this.PayOnlineFlg = _payOnlineFlg;
			this.QuickFlg = _quickFlg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AppTypeRegSteps"/> instance.
		///</summary>
		///<param name="_appTypeRegStepsId"></param>
		///<param name="_admRegStepsId"></param>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_mandatoryFlg"></param>
		///<param name="_transFlg">تاب المقاصة XXX replace with ADM_CDE_APP_TYPE_ID</param>
		///<param name="_payFlg">يجب دفع مصروف القبول قبل التاب</param>
		///<param name="_applicantFlg">تختلف التاب بين المتقدم والاوفيسر عرض فقط او عرض وادخال وتعديل</param>
		///<param name="_officerFlg">تختلف التاب بين المتقدم والاوفيسر عرض فقط او عرض وادخال وتعديل</param>
		///<param name="_reviewFlg">ظهور  زرار مراجعة</param>
		///<param name="_reviewDescrEn"></param>
		///<param name="_admCdeAppTypeId">XXX</param>
		///<param name="_payOnlineFlg">XXX</param>
		///<param name="_quickFlg"></param>
		public static AppTypeRegSteps CreateAppTypeRegSteps(System.Decimal _appTypeRegStepsId, System.Decimal? _admRegStepsId, 
			System.Decimal _asCodeDegreeClassId, System.Boolean? _mandatoryFlg, System.Boolean? _transFlg, 
			System.Boolean? _payFlg, System.Boolean? _applicantFlg, System.Boolean? _officerFlg, 
			System.Boolean? _reviewFlg, System.String _reviewDescrEn, System.Decimal? _admCdeAppTypeId, 
			System.Boolean? _payOnlineFlg, System.Boolean? _quickFlg)
		{
			AppTypeRegSteps newAppTypeRegSteps = new AppTypeRegSteps();
			newAppTypeRegSteps.AppTypeRegStepsId = _appTypeRegStepsId;
			newAppTypeRegSteps.AdmRegStepsId = _admRegStepsId;
			newAppTypeRegSteps.AsCodeDegreeClassId = _asCodeDegreeClassId;
			newAppTypeRegSteps.MandatoryFlg = _mandatoryFlg;
			newAppTypeRegSteps.TransFlg = _transFlg;
			newAppTypeRegSteps.PayFlg = _payFlg;
			newAppTypeRegSteps.ApplicantFlg = _applicantFlg;
			newAppTypeRegSteps.OfficerFlg = _officerFlg;
			newAppTypeRegSteps.ReviewFlg = _reviewFlg;
			newAppTypeRegSteps.ReviewDescrEn = _reviewDescrEn;
			newAppTypeRegSteps.AdmCdeAppTypeId = _admCdeAppTypeId;
			newAppTypeRegSteps.PayOnlineFlg = _payOnlineFlg;
			newAppTypeRegSteps.QuickFlg = _quickFlg;
			return newAppTypeRegSteps;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AppTypeRegStepsId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal AppTypeRegStepsId
		{
			get
			{
				return this.entityData.AppTypeRegStepsId; 
			}
			
			set
			{
				if (this.entityData.AppTypeRegStepsId == value)
					return;
					
				OnColumnChanging(AppTypeRegStepsColumn.AppTypeRegStepsId, this.entityData.AppTypeRegStepsId);
				this.entityData.AppTypeRegStepsId = value;
				this.EntityId.AppTypeRegStepsId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppTypeRegStepsColumn.AppTypeRegStepsId, this.entityData.AppTypeRegStepsId);
				OnPropertyChanged("AppTypeRegStepsId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the APP_TYPE_REG_STEPS_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the APP_TYPE_REG_STEPS_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalAppTypeRegStepsId
		{
			get { return this.entityData.OriginalAppTypeRegStepsId; }
			set { this.entityData.OriginalAppTypeRegStepsId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the AdmRegStepsId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmRegStepsIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmRegStepsId
		{
			get
			{
				return this.entityData.AdmRegStepsId; 
			}
			
			set
			{
				if (this.entityData.AdmRegStepsId == value)
					return;
					
				OnColumnChanging(AppTypeRegStepsColumn.AdmRegStepsId, this.entityData.AdmRegStepsId);
				this.entityData.AdmRegStepsId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppTypeRegStepsColumn.AdmRegStepsId, this.entityData.AdmRegStepsId);
				OnPropertyChanged("AdmRegStepsId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeClassId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsCodeDegreeClassId
		{
			get
			{
				return this.entityData.AsCodeDegreeClassId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeClassId == value)
					return;
					
				OnColumnChanging(AppTypeRegStepsColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				this.entityData.AsCodeDegreeClassId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppTypeRegStepsColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				OnPropertyChanged("AsCodeDegreeClassId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MandatoryFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsMandatoryFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? MandatoryFlg
		{
			get
			{
				return this.entityData.MandatoryFlg; 
			}
			
			set
			{
				if (this.entityData.MandatoryFlg == value)
					return;
					
				OnColumnChanging(AppTypeRegStepsColumn.MandatoryFlg, this.entityData.MandatoryFlg);
				this.entityData.MandatoryFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppTypeRegStepsColumn.MandatoryFlg, this.entityData.MandatoryFlg);
				OnPropertyChanged("MandatoryFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransFlg property. 
		///		تاب المقاصة XXX replace with ADM_CDE_APP_TYPE_ID
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsTransFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاب المقاصة XXX replace with ADM_CDE_APP_TYPE_ID"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? TransFlg
		{
			get
			{
				return this.entityData.TransFlg; 
			}
			
			set
			{
				if (this.entityData.TransFlg == value)
					return;
					
				OnColumnChanging(AppTypeRegStepsColumn.TransFlg, this.entityData.TransFlg);
				this.entityData.TransFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppTypeRegStepsColumn.TransFlg, this.entityData.TransFlg);
				OnPropertyChanged("TransFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PayFlg property. 
		///		يجب دفع مصروف القبول قبل التاب
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsPayFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"يجب دفع مصروف القبول قبل التاب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? PayFlg
		{
			get
			{
				return this.entityData.PayFlg; 
			}
			
			set
			{
				if (this.entityData.PayFlg == value)
					return;
					
				OnColumnChanging(AppTypeRegStepsColumn.PayFlg, this.entityData.PayFlg);
				this.entityData.PayFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppTypeRegStepsColumn.PayFlg, this.entityData.PayFlg);
				OnPropertyChanged("PayFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApplicantFlg property. 
		///		تختلف التاب بين المتقدم والاوفيسر عرض فقط او عرض وادخال وتعديل
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsApplicantFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تختلف التاب بين المتقدم والاوفيسر عرض فقط او عرض وادخال وتعديل"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ApplicantFlg
		{
			get
			{
				return this.entityData.ApplicantFlg; 
			}
			
			set
			{
				if (this.entityData.ApplicantFlg == value)
					return;
					
				OnColumnChanging(AppTypeRegStepsColumn.ApplicantFlg, this.entityData.ApplicantFlg);
				this.entityData.ApplicantFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppTypeRegStepsColumn.ApplicantFlg, this.entityData.ApplicantFlg);
				OnPropertyChanged("ApplicantFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OfficerFlg property. 
		///		تختلف التاب بين المتقدم والاوفيسر عرض فقط او عرض وادخال وتعديل
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsOfficerFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تختلف التاب بين المتقدم والاوفيسر عرض فقط او عرض وادخال وتعديل"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? OfficerFlg
		{
			get
			{
				return this.entityData.OfficerFlg; 
			}
			
			set
			{
				if (this.entityData.OfficerFlg == value)
					return;
					
				OnColumnChanging(AppTypeRegStepsColumn.OfficerFlg, this.entityData.OfficerFlg);
				this.entityData.OfficerFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppTypeRegStepsColumn.OfficerFlg, this.entityData.OfficerFlg);
				OnPropertyChanged("OfficerFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReviewFlg property. 
		///		ظهور  زرار مراجعة
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsReviewFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"ظهور  زرار مراجعة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ReviewFlg
		{
			get
			{
				return this.entityData.ReviewFlg; 
			}
			
			set
			{
				if (this.entityData.ReviewFlg == value)
					return;
					
				OnColumnChanging(AppTypeRegStepsColumn.ReviewFlg, this.entityData.ReviewFlg);
				this.entityData.ReviewFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppTypeRegStepsColumn.ReviewFlg, this.entityData.ReviewFlg);
				OnPropertyChanged("ReviewFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReviewDescrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String ReviewDescrEn
		{
			get
			{
				return this.entityData.ReviewDescrEn; 
			}
			
			set
			{
				if (this.entityData.ReviewDescrEn == value)
					return;
					
				OnColumnChanging(AppTypeRegStepsColumn.ReviewDescrEn, this.entityData.ReviewDescrEn);
				this.entityData.ReviewDescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppTypeRegStepsColumn.ReviewDescrEn, this.entityData.ReviewDescrEn);
				OnPropertyChanged("ReviewDescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmCdeAppTypeId property. 
		///		XXX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmCdeAppTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XXX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmCdeAppTypeId
		{
			get
			{
				return this.entityData.AdmCdeAppTypeId; 
			}
			
			set
			{
				if (this.entityData.AdmCdeAppTypeId == value)
					return;
					
				OnColumnChanging(AppTypeRegStepsColumn.AdmCdeAppTypeId, this.entityData.AdmCdeAppTypeId);
				this.entityData.AdmCdeAppTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppTypeRegStepsColumn.AdmCdeAppTypeId, this.entityData.AdmCdeAppTypeId);
				OnPropertyChanged("AdmCdeAppTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PayOnlineFlg property. 
		///		XXX
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsPayOnlineFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XXX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? PayOnlineFlg
		{
			get
			{
				return this.entityData.PayOnlineFlg; 
			}
			
			set
			{
				if (this.entityData.PayOnlineFlg == value)
					return;
					
				OnColumnChanging(AppTypeRegStepsColumn.PayOnlineFlg, this.entityData.PayOnlineFlg);
				this.entityData.PayOnlineFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppTypeRegStepsColumn.PayOnlineFlg, this.entityData.PayOnlineFlg);
				OnPropertyChanged("PayOnlineFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QuickFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsQuickFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? QuickFlg
		{
			get
			{
				return this.entityData.QuickFlg; 
			}
			
			set
			{
				if (this.entityData.QuickFlg == value)
					return;
					
				OnColumnChanging(AppTypeRegStepsColumn.QuickFlg, this.entityData.QuickFlg);
				this.entityData.QuickFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AppTypeRegStepsColumn.QuickFlg, this.entityData.QuickFlg);
				OnPropertyChanged("QuickFlg");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdeAppType"/>.
		/// </summary>
		/// <value>The source AdmCdeAppType for AdmCdeAppTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmCdeAppType AdmCdeAppTypeIdSource
      	{
            get { return entityData.AdmCdeAppTypeIdSource; }
            set { entityData.AdmCdeAppTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdmRegSteps"/>.
		/// </summary>
		/// <value>The source AdmRegSteps for AdmRegStepsId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmRegSteps AdmRegStepsIdSource
      	{
            get { return entityData.AdmRegStepsIdSource; }
            set { entityData.AdmRegStepsIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return entityData.AsCodeDegreeClassIdSource; }
            set { entityData.AsCodeDegreeClassIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of AdmAppProcSteps objects
		///	which are related to this object through the relation FK_ADM_APP_PROC_STEPS_APP_TYPE_REG_STEPS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppProcSteps> AdmAppProcStepsCollection
		{
			get { return entityData.AdmAppProcStepsCollection; }
			set { entityData.AdmAppProcStepsCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ReviewDescrEn", "Review Descr En", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "APP_TYPE_REG_STEPS"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"APP_TYPE_REG_STEPS_ID", "ADM_REG_STEPS_ID", "AS_CODE_DEGREE_CLASS_ID", "MANDATORY_FLG", "TRANS_FLG", "PAY_FLG", "APPLICANT_FLG", "OFFICER_FLG", "REVIEW_FLG", "REVIEW_DESCR_EN", "ADM_CDE_APP_TYPE_ID", "PAY_ONLINE_FLG", "QUICK_FLG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AppTypeRegStepsEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AppTypeRegSteps) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AppTypeRegSteps>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AppTypeRegSteps);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AppTypeRegSteps Entity 
		///</summary>
		protected virtual AppTypeRegSteps Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AppTypeRegSteps copy = new AppTypeRegSteps();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AppTypeRegStepsId = this.AppTypeRegStepsId;
					copy.OriginalAppTypeRegStepsId = this.OriginalAppTypeRegStepsId;
				copy.AdmRegStepsId = this.AdmRegStepsId;
				copy.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
				copy.MandatoryFlg = this.MandatoryFlg;
				copy.TransFlg = this.TransFlg;
				copy.PayFlg = this.PayFlg;
				copy.ApplicantFlg = this.ApplicantFlg;
				copy.OfficerFlg = this.OfficerFlg;
				copy.ReviewFlg = this.ReviewFlg;
				copy.ReviewDescrEn = this.ReviewDescrEn;
				copy.AdmCdeAppTypeId = this.AdmCdeAppTypeId;
				copy.PayOnlineFlg = this.PayOnlineFlg;
				copy.QuickFlg = this.QuickFlg;
			
			if (this.AdmCdeAppTypeIdSource != null && existingCopies.Contains(this.AdmCdeAppTypeIdSource))
				copy.AdmCdeAppTypeIdSource = existingCopies[this.AdmCdeAppTypeIdSource] as AdmCdeAppType;
			else
				copy.AdmCdeAppTypeIdSource = MakeCopyOf(this.AdmCdeAppTypeIdSource, existingCopies) as AdmCdeAppType;
			if (this.AdmRegStepsIdSource != null && existingCopies.Contains(this.AdmRegStepsIdSource))
				copy.AdmRegStepsIdSource = existingCopies[this.AdmRegStepsIdSource] as AdmRegSteps;
			else
				copy.AdmRegStepsIdSource = MakeCopyOf(this.AdmRegStepsIdSource, existingCopies) as AdmRegSteps;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				copy.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				copy.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
		
			//deep copy nested objects
			copy.AdmAppProcStepsCollection = (TList<AdmAppProcSteps>) MakeCopyOf(this.AdmAppProcStepsCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AppTypeRegSteps Entity 
		///</summary>
		public virtual AppTypeRegSteps Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AppTypeRegSteps Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AppTypeRegSteps DeepCopy()
		{
			return EntityHelper.Clone<AppTypeRegSteps>(this as AppTypeRegSteps);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AppTypeRegStepsEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AppTypeRegStepsEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AppTypeRegStepsEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AppTypeRegStepsColumn column)
		{
			switch(column)
			{
					case AppTypeRegStepsColumn.AppTypeRegStepsId:
					return entityData.AppTypeRegStepsId != _originalData.AppTypeRegStepsId;
					case AppTypeRegStepsColumn.AdmRegStepsId:
					return entityData.AdmRegStepsId != _originalData.AdmRegStepsId;
					case AppTypeRegStepsColumn.AsCodeDegreeClassId:
					return entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
					case AppTypeRegStepsColumn.MandatoryFlg:
					return entityData.MandatoryFlg != _originalData.MandatoryFlg;
					case AppTypeRegStepsColumn.TransFlg:
					return entityData.TransFlg != _originalData.TransFlg;
					case AppTypeRegStepsColumn.PayFlg:
					return entityData.PayFlg != _originalData.PayFlg;
					case AppTypeRegStepsColumn.ApplicantFlg:
					return entityData.ApplicantFlg != _originalData.ApplicantFlg;
					case AppTypeRegStepsColumn.OfficerFlg:
					return entityData.OfficerFlg != _originalData.OfficerFlg;
					case AppTypeRegStepsColumn.ReviewFlg:
					return entityData.ReviewFlg != _originalData.ReviewFlg;
					case AppTypeRegStepsColumn.ReviewDescrEn:
					return entityData.ReviewDescrEn != _originalData.ReviewDescrEn;
					case AppTypeRegStepsColumn.AdmCdeAppTypeId:
					return entityData.AdmCdeAppTypeId != _originalData.AdmCdeAppTypeId;
					case AppTypeRegStepsColumn.PayOnlineFlg:
					return entityData.PayOnlineFlg != _originalData.PayOnlineFlg;
					case AppTypeRegStepsColumn.QuickFlg:
					return entityData.QuickFlg != _originalData.QuickFlg;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AppTypeRegStepsColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AppTypeRegStepsId != _originalData.AppTypeRegStepsId;
			result = result || entityData.AdmRegStepsId != _originalData.AdmRegStepsId;
			result = result || entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
			result = result || entityData.MandatoryFlg != _originalData.MandatoryFlg;
			result = result || entityData.TransFlg != _originalData.TransFlg;
			result = result || entityData.PayFlg != _originalData.PayFlg;
			result = result || entityData.ApplicantFlg != _originalData.ApplicantFlg;
			result = result || entityData.OfficerFlg != _originalData.OfficerFlg;
			result = result || entityData.ReviewFlg != _originalData.ReviewFlg;
			result = result || entityData.ReviewDescrEn != _originalData.ReviewDescrEn;
			result = result || entityData.AdmCdeAppTypeId != _originalData.AdmCdeAppTypeId;
			result = result || entityData.PayOnlineFlg != _originalData.PayOnlineFlg;
			result = result || entityData.QuickFlg != _originalData.QuickFlg;
			return result;
		}	
		
		///<summary>
		///  Returns a AppTypeRegSteps Entity with the original data.
		///</summary>
		public AppTypeRegSteps GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAppTypeRegSteps(
				_originalData.AppTypeRegStepsId,
				_originalData.AdmRegStepsId,
				_originalData.AsCodeDegreeClassId,
				_originalData.MandatoryFlg,
				_originalData.TransFlg,
				_originalData.PayFlg,
				_originalData.ApplicantFlg,
				_originalData.OfficerFlg,
				_originalData.ReviewFlg,
				_originalData.ReviewDescrEn,
				_originalData.AdmCdeAppTypeId,
				_originalData.PayOnlineFlg,
				_originalData.QuickFlg
				);
				
			return (AppTypeRegSteps)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AppTypeRegStepsBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AppTypeRegStepsBase)
				return ValueEquals(this, (AppTypeRegStepsBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AppTypeRegStepsBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AppTypeRegStepsId.GetHashCode() ^ 
					((this.AdmRegStepsId == null) ? string.Empty : this.AdmRegStepsId.ToString()).GetHashCode() ^ 
					this.AsCodeDegreeClassId.GetHashCode() ^ 
					((this.MandatoryFlg == null) ? string.Empty : this.MandatoryFlg.ToString()).GetHashCode() ^ 
					((this.TransFlg == null) ? string.Empty : this.TransFlg.ToString()).GetHashCode() ^ 
					((this.PayFlg == null) ? string.Empty : this.PayFlg.ToString()).GetHashCode() ^ 
					((this.ApplicantFlg == null) ? string.Empty : this.ApplicantFlg.ToString()).GetHashCode() ^ 
					((this.OfficerFlg == null) ? string.Empty : this.OfficerFlg.ToString()).GetHashCode() ^ 
					((this.ReviewFlg == null) ? string.Empty : this.ReviewFlg.ToString()).GetHashCode() ^ 
					((this.ReviewDescrEn == null) ? string.Empty : this.ReviewDescrEn.ToString()).GetHashCode() ^ 
					((this.AdmCdeAppTypeId == null) ? string.Empty : this.AdmCdeAppTypeId.ToString()).GetHashCode() ^ 
					((this.PayOnlineFlg == null) ? string.Empty : this.PayOnlineFlg.ToString()).GetHashCode() ^ 
					((this.QuickFlg == null) ? string.Empty : this.QuickFlg.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AppTypeRegStepsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AppTypeRegStepsBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AppTypeRegStepsBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AppTypeRegStepsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AppTypeRegStepsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AppTypeRegStepsBase Object1, AppTypeRegStepsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AppTypeRegStepsId != Object2.AppTypeRegStepsId)
				equal = false;
			if ( Object1.AdmRegStepsId != null && Object2.AdmRegStepsId != null )
			{
				if (Object1.AdmRegStepsId != Object2.AdmRegStepsId)
					equal = false;
			}
			else if (Object1.AdmRegStepsId == null ^ Object2.AdmRegStepsId == null )
			{
				equal = false;
			}
			if (Object1.AsCodeDegreeClassId != Object2.AsCodeDegreeClassId)
				equal = false;
			if ( Object1.MandatoryFlg != null && Object2.MandatoryFlg != null )
			{
				if (Object1.MandatoryFlg != Object2.MandatoryFlg)
					equal = false;
			}
			else if (Object1.MandatoryFlg == null ^ Object2.MandatoryFlg == null )
			{
				equal = false;
			}
			if ( Object1.TransFlg != null && Object2.TransFlg != null )
			{
				if (Object1.TransFlg != Object2.TransFlg)
					equal = false;
			}
			else if (Object1.TransFlg == null ^ Object2.TransFlg == null )
			{
				equal = false;
			}
			if ( Object1.PayFlg != null && Object2.PayFlg != null )
			{
				if (Object1.PayFlg != Object2.PayFlg)
					equal = false;
			}
			else if (Object1.PayFlg == null ^ Object2.PayFlg == null )
			{
				equal = false;
			}
			if ( Object1.ApplicantFlg != null && Object2.ApplicantFlg != null )
			{
				if (Object1.ApplicantFlg != Object2.ApplicantFlg)
					equal = false;
			}
			else if (Object1.ApplicantFlg == null ^ Object2.ApplicantFlg == null )
			{
				equal = false;
			}
			if ( Object1.OfficerFlg != null && Object2.OfficerFlg != null )
			{
				if (Object1.OfficerFlg != Object2.OfficerFlg)
					equal = false;
			}
			else if (Object1.OfficerFlg == null ^ Object2.OfficerFlg == null )
			{
				equal = false;
			}
			if ( Object1.ReviewFlg != null && Object2.ReviewFlg != null )
			{
				if (Object1.ReviewFlg != Object2.ReviewFlg)
					equal = false;
			}
			else if (Object1.ReviewFlg == null ^ Object2.ReviewFlg == null )
			{
				equal = false;
			}
			if ( Object1.ReviewDescrEn != null && Object2.ReviewDescrEn != null )
			{
				if (Object1.ReviewDescrEn != Object2.ReviewDescrEn)
					equal = false;
			}
			else if (Object1.ReviewDescrEn == null ^ Object2.ReviewDescrEn == null )
			{
				equal = false;
			}
			if ( Object1.AdmCdeAppTypeId != null && Object2.AdmCdeAppTypeId != null )
			{
				if (Object1.AdmCdeAppTypeId != Object2.AdmCdeAppTypeId)
					equal = false;
			}
			else if (Object1.AdmCdeAppTypeId == null ^ Object2.AdmCdeAppTypeId == null )
			{
				equal = false;
			}
			if ( Object1.PayOnlineFlg != null && Object2.PayOnlineFlg != null )
			{
				if (Object1.PayOnlineFlg != Object2.PayOnlineFlg)
					equal = false;
			}
			else if (Object1.PayOnlineFlg == null ^ Object2.PayOnlineFlg == null )
			{
				equal = false;
			}
			if ( Object1.QuickFlg != null && Object2.QuickFlg != null )
			{
				if (Object1.QuickFlg != Object2.QuickFlg)
					equal = false;
			}
			else if (Object1.QuickFlg == null ^ Object2.QuickFlg == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AppTypeRegStepsBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AppTypeRegStepsComparer GetComparer()
        {
            return new AppTypeRegStepsComparer();
        }
        */

        // Comparer delegates back to AppTypeRegSteps
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AppTypeRegSteps rhs, AppTypeRegStepsColumn which)
        {
            switch (which)
            {
            	
            	
            	case AppTypeRegStepsColumn.AppTypeRegStepsId:
            		return this.AppTypeRegStepsId.CompareTo(rhs.AppTypeRegStepsId);
            		
            		                 
            	
            	
            	case AppTypeRegStepsColumn.AdmRegStepsId:
            		return this.AdmRegStepsId.Value.CompareTo(rhs.AdmRegStepsId.Value);
            		
            		                 
            	
            	
            	case AppTypeRegStepsColumn.AsCodeDegreeClassId:
            		return this.AsCodeDegreeClassId.CompareTo(rhs.AsCodeDegreeClassId);
            		
            		                 
            	
            	
            	case AppTypeRegStepsColumn.MandatoryFlg:
            		return this.MandatoryFlg.Value.CompareTo(rhs.MandatoryFlg.Value);
            		
            		                 
            	
            	
            	case AppTypeRegStepsColumn.TransFlg:
            		return this.TransFlg.Value.CompareTo(rhs.TransFlg.Value);
            		
            		                 
            	
            	
            	case AppTypeRegStepsColumn.PayFlg:
            		return this.PayFlg.Value.CompareTo(rhs.PayFlg.Value);
            		
            		                 
            	
            	
            	case AppTypeRegStepsColumn.ApplicantFlg:
            		return this.ApplicantFlg.Value.CompareTo(rhs.ApplicantFlg.Value);
            		
            		                 
            	
            	
            	case AppTypeRegStepsColumn.OfficerFlg:
            		return this.OfficerFlg.Value.CompareTo(rhs.OfficerFlg.Value);
            		
            		                 
            	
            	
            	case AppTypeRegStepsColumn.ReviewFlg:
            		return this.ReviewFlg.Value.CompareTo(rhs.ReviewFlg.Value);
            		
            		                 
            	
            	
            	case AppTypeRegStepsColumn.ReviewDescrEn:
            		return this.ReviewDescrEn.CompareTo(rhs.ReviewDescrEn);
            		
            		                 
            	
            	
            	case AppTypeRegStepsColumn.AdmCdeAppTypeId:
            		return this.AdmCdeAppTypeId.Value.CompareTo(rhs.AdmCdeAppTypeId.Value);
            		
            		                 
            	
            	
            	case AppTypeRegStepsColumn.PayOnlineFlg:
            		return this.PayOnlineFlg.Value.CompareTo(rhs.PayOnlineFlg.Value);
            		
            		                 
            	
            	
            	case AppTypeRegStepsColumn.QuickFlg:
            		return this.QuickFlg.Value.CompareTo(rhs.QuickFlg.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AppTypeRegStepsKey> Members
		
		// member variable for the EntityId property
		private AppTypeRegStepsKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AppTypeRegStepsKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AppTypeRegStepsKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AppTypeRegSteps")
					.Append("|").Append( this.AppTypeRegStepsId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{14}{13}- AppTypeRegStepsId: {0}{13}- AdmRegStepsId: {1}{13}- AsCodeDegreeClassId: {2}{13}- MandatoryFlg: {3}{13}- TransFlg: {4}{13}- PayFlg: {5}{13}- ApplicantFlg: {6}{13}- OfficerFlg: {7}{13}- ReviewFlg: {8}{13}- ReviewDescrEn: {9}{13}- AdmCdeAppTypeId: {10}{13}- PayOnlineFlg: {11}{13}- QuickFlg: {12}{13}{15}", 
				this.AppTypeRegStepsId,
				(this.AdmRegStepsId == null) ? string.Empty : this.AdmRegStepsId.ToString(),
				this.AsCodeDegreeClassId,
				(this.MandatoryFlg == null) ? string.Empty : this.MandatoryFlg.ToString(),
				(this.TransFlg == null) ? string.Empty : this.TransFlg.ToString(),
				(this.PayFlg == null) ? string.Empty : this.PayFlg.ToString(),
				(this.ApplicantFlg == null) ? string.Empty : this.ApplicantFlg.ToString(),
				(this.OfficerFlg == null) ? string.Empty : this.OfficerFlg.ToString(),
				(this.ReviewFlg == null) ? string.Empty : this.ReviewFlg.ToString(),
				(this.ReviewDescrEn == null) ? string.Empty : this.ReviewDescrEn.ToString(),
				(this.AdmCdeAppTypeId == null) ? string.Empty : this.AdmCdeAppTypeId.ToString(),
				(this.PayOnlineFlg == null) ? string.Empty : this.PayOnlineFlg.ToString(),
				(this.QuickFlg == null) ? string.Empty : this.QuickFlg.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'APP_TYPE_REG_STEPS' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AppTypeRegStepsEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// APP_TYPE_REG_STEPS_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "APP_TYPE_REG_STEPS"</remarks>
		public System.Decimal AppTypeRegStepsId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalAppTypeRegStepsId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ADM_REG_STEPS_ID : 
		/// </summary>
		public System.Decimal?		  AdmRegStepsId = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_CLASS_ID : 
		/// </summary>
		public System.Decimal		  AsCodeDegreeClassId = 0.0m;
		
		/// <summary>
		/// MANDATORY_FLG : 
		/// </summary>
		public System.Boolean?		  MandatoryFlg = null;
		
		/// <summary>
		/// TRANS_FLG : تاب المقاصة XXX replace with ADM_CDE_APP_TYPE_ID
		/// </summary>
		public System.Boolean?		  TransFlg = null;
		
		/// <summary>
		/// PAY_FLG : يجب دفع مصروف القبول قبل التاب
		/// </summary>
		public System.Boolean?		  PayFlg = null;
		
		/// <summary>
		/// APPLICANT_FLG : تختلف التاب بين المتقدم والاوفيسر عرض فقط او عرض وادخال وتعديل
		/// </summary>
		public System.Boolean?		  ApplicantFlg = null;
		
		/// <summary>
		/// OFFICER_FLG : تختلف التاب بين المتقدم والاوفيسر عرض فقط او عرض وادخال وتعديل
		/// </summary>
		public System.Boolean?		  OfficerFlg = null;
		
		/// <summary>
		/// REVIEW_FLG : ظهور  زرار مراجعة
		/// </summary>
		public System.Boolean?		  ReviewFlg = null;
		
		/// <summary>
		/// REVIEW_DESCR_EN : 
		/// </summary>
		public System.String		  ReviewDescrEn = null;
		
		/// <summary>
		/// ADM_CDE_APP_TYPE_ID : XXX
		/// </summary>
		public System.Decimal?		  AdmCdeAppTypeId = null;
		
		/// <summary>
		/// PAY_ONLINE_FLG : XXX
		/// </summary>
		public System.Boolean?		  PayOnlineFlg = null;
		
		/// <summary>
		/// QUICK_FLG : 
		/// </summary>
		public System.Boolean?		  QuickFlg = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdmCdeAppType _admCdeAppTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdeAppType"/>.
		/// </summary>
		/// <value>The source AdmCdeAppType for AdmCdeAppTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmCdeAppType AdmCdeAppTypeIdSource
      	{
            get { return this._admCdeAppTypeIdSource; }
            set { this._admCdeAppTypeIdSource = value; }
      	}
		private AdmRegSteps _admRegStepsIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmRegSteps"/>.
		/// </summary>
		/// <value>The source AdmRegSteps for AdmRegStepsId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmRegSteps AdmRegStepsIdSource
      	{
            get { return this._admRegStepsIdSource; }
            set { this._admRegStepsIdSource = value; }
      	}
		private AsCodeDegreeClass _asCodeDegreeClassIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return this._asCodeDegreeClassIdSource; }
            set { this._asCodeDegreeClassIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region AdmAppProcStepsCollection
		
		private TList<AdmAppProcSteps> _admAppProcStepsAppTypeRegStepsId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppProcStepsAppTypeRegStepsId
		/// </summary>
		
		public TList<AdmAppProcSteps> AdmAppProcStepsCollection
		{
			get
			{
				if (_admAppProcStepsAppTypeRegStepsId == null)
				{
				_admAppProcStepsAppTypeRegStepsId = new TList<AdmAppProcSteps>();
				}
	
				return _admAppProcStepsAppTypeRegStepsId;
			}
			set { _admAppProcStepsAppTypeRegStepsId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AppTypeRegStepsEntityData _tmp = new AppTypeRegStepsEntityData();
						
			_tmp.AppTypeRegStepsId = this.AppTypeRegStepsId;
			_tmp.OriginalAppTypeRegStepsId = this.OriginalAppTypeRegStepsId;
			
			_tmp.AdmRegStepsId = this.AdmRegStepsId;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.MandatoryFlg = this.MandatoryFlg;
			_tmp.TransFlg = this.TransFlg;
			_tmp.PayFlg = this.PayFlg;
			_tmp.ApplicantFlg = this.ApplicantFlg;
			_tmp.OfficerFlg = this.OfficerFlg;
			_tmp.ReviewFlg = this.ReviewFlg;
			_tmp.ReviewDescrEn = this.ReviewDescrEn;
			_tmp.AdmCdeAppTypeId = this.AdmCdeAppTypeId;
			_tmp.PayOnlineFlg = this.PayOnlineFlg;
			_tmp.QuickFlg = this.QuickFlg;
			
			#region Source Parent Composite Entities
			if (this.AdmCdeAppTypeIdSource != null)
				_tmp.AdmCdeAppTypeIdSource = MakeCopyOf(this.AdmCdeAppTypeIdSource) as AdmCdeAppType;
			if (this.AdmRegStepsIdSource != null)
				_tmp.AdmRegStepsIdSource = MakeCopyOf(this.AdmRegStepsIdSource) as AdmRegSteps;
			if (this.AsCodeDegreeClassIdSource != null)
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource) as AsCodeDegreeClass;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._admAppProcStepsAppTypeRegStepsId != null)
				_tmp.AdmAppProcStepsCollection = (TList<AdmAppProcSteps>) MakeCopyOf(this.AdmAppProcStepsCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AppTypeRegStepsEntityData _tmp = new AppTypeRegStepsEntityData();
						
			_tmp.AppTypeRegStepsId = this.AppTypeRegStepsId;
			_tmp.OriginalAppTypeRegStepsId = this.OriginalAppTypeRegStepsId;
			
			_tmp.AdmRegStepsId = this.AdmRegStepsId;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.MandatoryFlg = this.MandatoryFlg;
			_tmp.TransFlg = this.TransFlg;
			_tmp.PayFlg = this.PayFlg;
			_tmp.ApplicantFlg = this.ApplicantFlg;
			_tmp.OfficerFlg = this.OfficerFlg;
			_tmp.ReviewFlg = this.ReviewFlg;
			_tmp.ReviewDescrEn = this.ReviewDescrEn;
			_tmp.AdmCdeAppTypeId = this.AdmCdeAppTypeId;
			_tmp.PayOnlineFlg = this.PayOnlineFlg;
			_tmp.QuickFlg = this.QuickFlg;
			
			#region Source Parent Composite Entities
			if (this.AdmCdeAppTypeIdSource != null && existingCopies.Contains(this.AdmCdeAppTypeIdSource))
				_tmp.AdmCdeAppTypeIdSource = existingCopies[this.AdmCdeAppTypeIdSource] as AdmCdeAppType;
			else
				_tmp.AdmCdeAppTypeIdSource = MakeCopyOf(this.AdmCdeAppTypeIdSource, existingCopies) as AdmCdeAppType;
			if (this.AdmRegStepsIdSource != null && existingCopies.Contains(this.AdmRegStepsIdSource))
				_tmp.AdmRegStepsIdSource = existingCopies[this.AdmRegStepsIdSource] as AdmRegSteps;
			else
				_tmp.AdmRegStepsIdSource = MakeCopyOf(this.AdmRegStepsIdSource, existingCopies) as AdmRegSteps;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				_tmp.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.AdmAppProcStepsCollection = (TList<AdmAppProcSteps>) MakeCopyOf(this.AdmAppProcStepsCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AppTypeRegStepsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AppTypeRegStepsColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AppTypeRegStepsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AppTypeRegStepsColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AppTypeRegStepsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AppTypeRegStepsColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AppTypeRegStepsEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AppTypeRegStepsEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AppTypeRegStepsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AppTypeRegStepsColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AppTypeRegStepsEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AppTypeRegStepsEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AppTypeRegStepsEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AppTypeRegSteps"/> object.
	/// </remarks>
	public class AppTypeRegStepsEventArgs : System.EventArgs
	{
		private AppTypeRegStepsColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AppTypeRegStepsEventArgs class.
		///</summary>
		public AppTypeRegStepsEventArgs(AppTypeRegStepsColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AppTypeRegStepsEventArgs class.
		///</summary>
		public AppTypeRegStepsEventArgs(AppTypeRegStepsColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AppTypeRegStepsColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AppTypeRegStepsColumn" />
		public AppTypeRegStepsColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AppTypeRegSteps related events.
	///</summary>
	public delegate void AppTypeRegStepsEventHandler(object sender, AppTypeRegStepsEventArgs e);
	
	#region AppTypeRegStepsComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AppTypeRegStepsComparer : System.Collections.Generic.IComparer<AppTypeRegSteps>
	{
		AppTypeRegStepsColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AppTypeRegStepsComparer"/> class.
        /// </summary>
		public AppTypeRegStepsComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AppTypeRegStepsComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AppTypeRegStepsComparer(AppTypeRegStepsColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AppTypeRegSteps"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AppTypeRegSteps"/> to compare.</param>
        /// <param name="b">The second <c>AppTypeRegSteps</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AppTypeRegSteps a, AppTypeRegSteps b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AppTypeRegSteps entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AppTypeRegSteps a, AppTypeRegSteps b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AppTypeRegStepsColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AppTypeRegStepsKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AppTypeRegSteps"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AppTypeRegStepsKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AppTypeRegStepsKey class.
		/// </summary>
		public AppTypeRegStepsKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AppTypeRegStepsKey class.
		/// </summary>
		public AppTypeRegStepsKey(AppTypeRegStepsBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AppTypeRegStepsId = entity.AppTypeRegStepsId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AppTypeRegStepsKey class.
		/// </summary>
		public AppTypeRegStepsKey(System.Decimal _appTypeRegStepsId)
		{
			#region Init Properties

			this.AppTypeRegStepsId = _appTypeRegStepsId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AppTypeRegStepsBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AppTypeRegStepsBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AppTypeRegStepsId property
		private System.Decimal _appTypeRegStepsId;
		
		/// <summary>
		/// Gets or sets the AppTypeRegStepsId property.
		/// </summary>
		public System.Decimal AppTypeRegStepsId
		{
			get { return _appTypeRegStepsId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AppTypeRegStepsId = value;
				
				_appTypeRegStepsId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AppTypeRegStepsId = ( values["AppTypeRegStepsId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["AppTypeRegStepsId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AppTypeRegStepsId", AppTypeRegStepsId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AppTypeRegStepsId: {0}{1}",
								AppTypeRegStepsId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AppTypeRegStepsColumn Enum
	
	/// <summary>
	/// Enumerate the AppTypeRegSteps columns.
	/// </summary>
	[Serializable]
	public enum AppTypeRegStepsColumn : int
	{
		/// <summary>
		/// AppTypeRegStepsId : 
		/// </summary>
		[EnumTextValue("APP_TYPE_REG_STEPS_ID")]
		[ColumnEnum("APP_TYPE_REG_STEPS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		AppTypeRegStepsId = 1,
		/// <summary>
		/// AdmRegStepsId : 
		/// </summary>
		[EnumTextValue("ADM_REG_STEPS_ID")]
		[ColumnEnum("ADM_REG_STEPS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmRegStepsId = 2,
		/// <summary>
		/// AsCodeDegreeClassId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_CLASS_ID")]
		[ColumnEnum("AS_CODE_DEGREE_CLASS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsCodeDegreeClassId = 3,
		/// <summary>
		/// MandatoryFlg : 
		/// </summary>
		[EnumTextValue("MANDATORY_FLG")]
		[ColumnEnum("MANDATORY_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		MandatoryFlg = 4,
		/// <summary>
		/// TransFlg : تاب المقاصة XXX replace with ADM_CDE_APP_TYPE_ID
		/// </summary>
		[EnumTextValue("TRANS_FLG")]
		[ColumnEnum("TRANS_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		TransFlg = 5,
		/// <summary>
		/// PayFlg : يجب دفع مصروف القبول قبل التاب
		/// </summary>
		[EnumTextValue("PAY_FLG")]
		[ColumnEnum("PAY_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		PayFlg = 6,
		/// <summary>
		/// ApplicantFlg : تختلف التاب بين المتقدم والاوفيسر عرض فقط او عرض وادخال وتعديل
		/// </summary>
		[EnumTextValue("APPLICANT_FLG")]
		[ColumnEnum("APPLICANT_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ApplicantFlg = 7,
		/// <summary>
		/// OfficerFlg : تختلف التاب بين المتقدم والاوفيسر عرض فقط او عرض وادخال وتعديل
		/// </summary>
		[EnumTextValue("OFFICER_FLG")]
		[ColumnEnum("OFFICER_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		OfficerFlg = 8,
		/// <summary>
		/// ReviewFlg : ظهور  زرار مراجعة
		/// </summary>
		[EnumTextValue("REVIEW_FLG")]
		[ColumnEnum("REVIEW_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ReviewFlg = 9,
		/// <summary>
		/// ReviewDescrEn : 
		/// </summary>
		[EnumTextValue("REVIEW_DESCR_EN")]
		[ColumnEnum("REVIEW_DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		ReviewDescrEn = 10,
		/// <summary>
		/// AdmCdeAppTypeId : XXX
		/// </summary>
		[EnumTextValue("ADM_CDE_APP_TYPE_ID")]
		[ColumnEnum("ADM_CDE_APP_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmCdeAppTypeId = 11,
		/// <summary>
		/// PayOnlineFlg : XXX
		/// </summary>
		[EnumTextValue("PAY_ONLINE_FLG")]
		[ColumnEnum("PAY_ONLINE_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		PayOnlineFlg = 12,
		/// <summary>
		/// QuickFlg : 
		/// </summary>
		[EnumTextValue("QUICK_FLG")]
		[ColumnEnum("QUICK_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		QuickFlg = 13
	}//End enum

	#endregion AppTypeRegStepsColumn Enum

} // end namespace
