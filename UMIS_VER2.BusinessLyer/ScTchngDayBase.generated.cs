
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ScTchngDay.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SC_TCHNG_DAY' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ScTchngDayBase : EntityBase, IScTchngDay, IEntityId<ScTchngDayKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ScTchngDayEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ScTchngDayEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ScTchngDayEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ScTchngDay> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ScTchngDayEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ScTchngDayEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ScTchngDayBase"/> instance.
		///</summary>
		public ScTchngDayBase()
		{
			this.entityData = new ScTchngDayEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ScTchngDayBase"/> instance.
		///</summary>
		///<param name="_scTchngDayId"></param>
		///<param name="_gsCodeWeekDayId"></param>
		///<param name="_dayAr"></param>
		///<param name="_dayEn"></param>
		///<param name="_daySrl"></param>
		///<param name="_scSchdlPeriodId"></param>
		public ScTchngDayBase(System.Decimal _scTchngDayId, System.Decimal _gsCodeWeekDayId, 
			System.String _dayAr, System.String _dayEn, System.Decimal? _daySrl, System.Decimal? _scSchdlPeriodId)
		{
			this.entityData = new ScTchngDayEntityData();
			this.backupData = null;

			this.ScTchngDayId = _scTchngDayId;
			this.GsCodeWeekDayId = _gsCodeWeekDayId;
			this.DayAr = _dayAr;
			this.DayEn = _dayEn;
			this.DaySrl = _daySrl;
			this.ScSchdlPeriodId = _scSchdlPeriodId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ScTchngDay"/> instance.
		///</summary>
		///<param name="_scTchngDayId"></param>
		///<param name="_gsCodeWeekDayId"></param>
		///<param name="_dayAr"></param>
		///<param name="_dayEn"></param>
		///<param name="_daySrl"></param>
		///<param name="_scSchdlPeriodId"></param>
		public static ScTchngDay CreateScTchngDay(System.Decimal _scTchngDayId, System.Decimal _gsCodeWeekDayId, 
			System.String _dayAr, System.String _dayEn, System.Decimal? _daySrl, System.Decimal? _scSchdlPeriodId)
		{
			ScTchngDay newScTchngDay = new ScTchngDay();
			newScTchngDay.ScTchngDayId = _scTchngDayId;
			newScTchngDay.GsCodeWeekDayId = _gsCodeWeekDayId;
			newScTchngDay.DayAr = _dayAr;
			newScTchngDay.DayEn = _dayEn;
			newScTchngDay.DaySrl = _daySrl;
			newScTchngDay.ScSchdlPeriodId = _scSchdlPeriodId;
			return newScTchngDay;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the ScTchngDayId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal ScTchngDayId
		{
			get
			{
				return this.entityData.ScTchngDayId; 
			}
			
			set
			{
				if (this.entityData.ScTchngDayId == value)
					return;
					
				OnColumnChanging(ScTchngDayColumn.ScTchngDayId, this.entityData.ScTchngDayId);
				this.entityData.ScTchngDayId = value;
				this.EntityId.ScTchngDayId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScTchngDayColumn.ScTchngDayId, this.entityData.ScTchngDayId);
				OnPropertyChanged("ScTchngDayId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SC_TCHNG_DAY_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SC_TCHNG_DAY_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalScTchngDayId
		{
			get { return this.entityData.OriginalScTchngDayId; }
			set { this.entityData.OriginalScTchngDayId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeWeekDayId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsCodeWeekDayId
		{
			get
			{
				return this.entityData.GsCodeWeekDayId; 
			}
			
			set
			{
				if (this.entityData.GsCodeWeekDayId == value)
					return;
					
				OnColumnChanging(ScTchngDayColumn.GsCodeWeekDayId, this.entityData.GsCodeWeekDayId);
				this.entityData.GsCodeWeekDayId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScTchngDayColumn.GsCodeWeekDayId, this.entityData.GsCodeWeekDayId);
				OnPropertyChanged("GsCodeWeekDayId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DayAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 30)]
		public virtual System.String DayAr
		{
			get
			{
				return this.entityData.DayAr; 
			}
			
			set
			{
				if (this.entityData.DayAr == value)
					return;
					
				OnColumnChanging(ScTchngDayColumn.DayAr, this.entityData.DayAr);
				this.entityData.DayAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScTchngDayColumn.DayAr, this.entityData.DayAr);
				OnPropertyChanged("DayAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DayEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 30)]
		public virtual System.String DayEn
		{
			get
			{
				return this.entityData.DayEn; 
			}
			
			set
			{
				if (this.entityData.DayEn == value)
					return;
					
				OnColumnChanging(ScTchngDayColumn.DayEn, this.entityData.DayEn);
				this.entityData.DayEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScTchngDayColumn.DayEn, this.entityData.DayEn);
				OnPropertyChanged("DayEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DaySrl property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDaySrlNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DaySrl
		{
			get
			{
				return this.entityData.DaySrl; 
			}
			
			set
			{
				if (this.entityData.DaySrl == value)
					return;
					
				OnColumnChanging(ScTchngDayColumn.DaySrl, this.entityData.DaySrl);
				this.entityData.DaySrl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScTchngDayColumn.DaySrl, this.entityData.DaySrl);
				OnPropertyChanged("DaySrl");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScSchdlPeriodId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScSchdlPeriodIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScSchdlPeriodId
		{
			get
			{
				return this.entityData.ScSchdlPeriodId; 
			}
			
			set
			{
				if (this.entityData.ScSchdlPeriodId == value)
					return;
					
				OnColumnChanging(ScTchngDayColumn.ScSchdlPeriodId, this.entityData.ScSchdlPeriodId);
				this.entityData.ScSchdlPeriodId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScTchngDayColumn.ScSchdlPeriodId, this.entityData.ScSchdlPeriodId);
				OnPropertyChanged("ScSchdlPeriodId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeWeekDay"/>.
		/// </summary>
		/// <value>The source GsCodeWeekDay for GsCodeWeekDayId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeWeekDay GsCodeWeekDayIdSource
      	{
            get { return entityData.GsCodeWeekDayIdSource; }
            set { entityData.GsCodeWeekDayIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScSchdlPeriod"/>.
		/// </summary>
		/// <value>The source ScSchdlPeriod for ScSchdlPeriodId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScSchdlPeriod ScSchdlPeriodIdSource
      	{
            get { return entityData.ScSchdlPeriodIdSource; }
            set { entityData.ScSchdlPeriodIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of ScGroupDay objects
		///	which are related to this object through the relation FK_SC_GROUP_DAY_SC_TCHNG_DAY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScGroupDay> ScGroupDayCollection
		{
			get { return entityData.ScGroupDayCollection; }
			set { entityData.ScGroupDayCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CtrMenuAct objects
		///	which are related to this object through the relation FK_CTR_MENU_ACT_SC_TCHNG_DAY
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CtrMenuAct> CtrMenuActCollection
		{
			get { return entityData.CtrMenuActCollection; }
			set { entityData.CtrMenuActCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DayAr", "Day Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DayAr", "Day Ar", 30));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DayEn", "Day En"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DayEn", "Day En", 30));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SC_TCHNG_DAY"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SC_TCHNG_DAY_ID", "GS_CODE_WEEK_DAY_ID", "DAY_AR", "DAY_EN", "DAY_SRL", "SC_SCHDL_PERIOD_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ScTchngDayEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ScTchngDay) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ScTchngDay>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ScTchngDay);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ScTchngDay Entity 
		///</summary>
		protected virtual ScTchngDay Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ScTchngDay copy = new ScTchngDay();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.ScTchngDayId = this.ScTchngDayId;
					copy.OriginalScTchngDayId = this.OriginalScTchngDayId;
				copy.GsCodeWeekDayId = this.GsCodeWeekDayId;
				copy.DayAr = this.DayAr;
				copy.DayEn = this.DayEn;
				copy.DaySrl = this.DaySrl;
				copy.ScSchdlPeriodId = this.ScSchdlPeriodId;
			
			if (this.GsCodeWeekDayIdSource != null && existingCopies.Contains(this.GsCodeWeekDayIdSource))
				copy.GsCodeWeekDayIdSource = existingCopies[this.GsCodeWeekDayIdSource] as GsCodeWeekDay;
			else
				copy.GsCodeWeekDayIdSource = MakeCopyOf(this.GsCodeWeekDayIdSource, existingCopies) as GsCodeWeekDay;
			if (this.ScSchdlPeriodIdSource != null && existingCopies.Contains(this.ScSchdlPeriodIdSource))
				copy.ScSchdlPeriodIdSource = existingCopies[this.ScSchdlPeriodIdSource] as ScSchdlPeriod;
			else
				copy.ScSchdlPeriodIdSource = MakeCopyOf(this.ScSchdlPeriodIdSource, existingCopies) as ScSchdlPeriod;
		
			//deep copy nested objects
			copy.ScGroupDayCollection = (TList<ScGroupDay>) MakeCopyOf(this.ScGroupDayCollection, existingCopies); 
			copy.CtrMenuActCollection = (TList<CtrMenuAct>) MakeCopyOf(this.CtrMenuActCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ScTchngDay Entity 
		///</summary>
		public virtual ScTchngDay Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ScTchngDay Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ScTchngDay DeepCopy()
		{
			return EntityHelper.Clone<ScTchngDay>(this as ScTchngDay);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ScTchngDayEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ScTchngDayEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ScTchngDayEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ScTchngDayColumn column)
		{
			switch(column)
			{
					case ScTchngDayColumn.ScTchngDayId:
					return entityData.ScTchngDayId != _originalData.ScTchngDayId;
					case ScTchngDayColumn.GsCodeWeekDayId:
					return entityData.GsCodeWeekDayId != _originalData.GsCodeWeekDayId;
					case ScTchngDayColumn.DayAr:
					return entityData.DayAr != _originalData.DayAr;
					case ScTchngDayColumn.DayEn:
					return entityData.DayEn != _originalData.DayEn;
					case ScTchngDayColumn.DaySrl:
					return entityData.DaySrl != _originalData.DaySrl;
					case ScTchngDayColumn.ScSchdlPeriodId:
					return entityData.ScSchdlPeriodId != _originalData.ScSchdlPeriodId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ScTchngDayColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.ScTchngDayId != _originalData.ScTchngDayId;
			result = result || entityData.GsCodeWeekDayId != _originalData.GsCodeWeekDayId;
			result = result || entityData.DayAr != _originalData.DayAr;
			result = result || entityData.DayEn != _originalData.DayEn;
			result = result || entityData.DaySrl != _originalData.DaySrl;
			result = result || entityData.ScSchdlPeriodId != _originalData.ScSchdlPeriodId;
			return result;
		}	
		
		///<summary>
		///  Returns a ScTchngDay Entity with the original data.
		///</summary>
		public ScTchngDay GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateScTchngDay(
				_originalData.ScTchngDayId,
				_originalData.GsCodeWeekDayId,
				_originalData.DayAr,
				_originalData.DayEn,
				_originalData.DaySrl,
				_originalData.ScSchdlPeriodId
				);
				
			return (ScTchngDay)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ScTchngDayBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ScTchngDayBase)
				return ValueEquals(this, (ScTchngDayBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ScTchngDayBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.ScTchngDayId.GetHashCode() ^ 
					this.GsCodeWeekDayId.GetHashCode() ^ 
					this.DayAr.GetHashCode() ^ 
					this.DayEn.GetHashCode() ^ 
					((this.DaySrl == null) ? string.Empty : this.DaySrl.ToString()).GetHashCode() ^ 
					((this.ScSchdlPeriodId == null) ? string.Empty : this.ScSchdlPeriodId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ScTchngDayBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ScTchngDayBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ScTchngDayBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ScTchngDayBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ScTchngDayBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ScTchngDayBase Object1, ScTchngDayBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ScTchngDayId != Object2.ScTchngDayId)
				equal = false;
			if (Object1.GsCodeWeekDayId != Object2.GsCodeWeekDayId)
				equal = false;
			if (Object1.DayAr != Object2.DayAr)
				equal = false;
			if (Object1.DayEn != Object2.DayEn)
				equal = false;
			if ( Object1.DaySrl != null && Object2.DaySrl != null )
			{
				if (Object1.DaySrl != Object2.DaySrl)
					equal = false;
			}
			else if (Object1.DaySrl == null ^ Object2.DaySrl == null )
			{
				equal = false;
			}
			if ( Object1.ScSchdlPeriodId != null && Object2.ScSchdlPeriodId != null )
			{
				if (Object1.ScSchdlPeriodId != Object2.ScSchdlPeriodId)
					equal = false;
			}
			else if (Object1.ScSchdlPeriodId == null ^ Object2.ScSchdlPeriodId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ScTchngDayBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ScTchngDayComparer GetComparer()
        {
            return new ScTchngDayComparer();
        }
        */

        // Comparer delegates back to ScTchngDay
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ScTchngDay rhs, ScTchngDayColumn which)
        {
            switch (which)
            {
            	
            	
            	case ScTchngDayColumn.ScTchngDayId:
            		return this.ScTchngDayId.CompareTo(rhs.ScTchngDayId);
            		
            		                 
            	
            	
            	case ScTchngDayColumn.GsCodeWeekDayId:
            		return this.GsCodeWeekDayId.CompareTo(rhs.GsCodeWeekDayId);
            		
            		                 
            	
            	
            	case ScTchngDayColumn.DayAr:
            		return this.DayAr.CompareTo(rhs.DayAr);
            		
            		                 
            	
            	
            	case ScTchngDayColumn.DayEn:
            		return this.DayEn.CompareTo(rhs.DayEn);
            		
            		                 
            	
            	
            	case ScTchngDayColumn.DaySrl:
            		return this.DaySrl.Value.CompareTo(rhs.DaySrl.Value);
            		
            		                 
            	
            	
            	case ScTchngDayColumn.ScSchdlPeriodId:
            		return this.ScSchdlPeriodId.Value.CompareTo(rhs.ScSchdlPeriodId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ScTchngDayKey> Members
		
		// member variable for the EntityId property
		private ScTchngDayKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ScTchngDayKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ScTchngDayKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ScTchngDay")
					.Append("|").Append( this.ScTchngDayId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{7}{6}- ScTchngDayId: {0}{6}- GsCodeWeekDayId: {1}{6}- DayAr: {2}{6}- DayEn: {3}{6}- DaySrl: {4}{6}- ScSchdlPeriodId: {5}{6}{8}", 
				this.ScTchngDayId,
				this.GsCodeWeekDayId,
				this.DayAr,
				this.DayEn,
				(this.DaySrl == null) ? string.Empty : this.DaySrl.ToString(),
				(this.ScSchdlPeriodId == null) ? string.Empty : this.ScSchdlPeriodId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SC_TCHNG_DAY' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ScTchngDayEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SC_TCHNG_DAY_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SC_TCHNG_DAY"</remarks>
		public System.Decimal ScTchngDayId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalScTchngDayId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// GS_CODE_WEEK_DAY_ID : 
		/// </summary>
		public System.Decimal		  GsCodeWeekDayId = 0.0m;
		
		/// <summary>
		/// DAY_AR : 
		/// </summary>
		public System.String		  DayAr = string.Empty;
		
		/// <summary>
		/// DAY_EN : 
		/// </summary>
		public System.String		  DayEn = string.Empty;
		
		/// <summary>
		/// DAY_SRL : 
		/// </summary>
		public System.Decimal?		  DaySrl = null;
		
		/// <summary>
		/// SC_SCHDL_PERIOD_ID : 
		/// </summary>
		public System.Decimal?		  ScSchdlPeriodId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private GsCodeWeekDay _gsCodeWeekDayIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeWeekDay"/>.
		/// </summary>
		/// <value>The source GsCodeWeekDay for GsCodeWeekDayId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeWeekDay GsCodeWeekDayIdSource
      	{
            get { return this._gsCodeWeekDayIdSource; }
            set { this._gsCodeWeekDayIdSource = value; }
      	}
		private ScSchdlPeriod _scSchdlPeriodIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScSchdlPeriod"/>.
		/// </summary>
		/// <value>The source ScSchdlPeriod for ScSchdlPeriodId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScSchdlPeriod ScSchdlPeriodIdSource
      	{
            get { return this._scSchdlPeriodIdSource; }
            set { this._scSchdlPeriodIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region ScGroupDayCollection
		
		private TList<ScGroupDay> _scGroupDayScTchngDayId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scGroupDayScTchngDayId
		/// </summary>
		
		public TList<ScGroupDay> ScGroupDayCollection
		{
			get
			{
				if (_scGroupDayScTchngDayId == null)
				{
				_scGroupDayScTchngDayId = new TList<ScGroupDay>();
				}
	
				return _scGroupDayScTchngDayId;
			}
			set { _scGroupDayScTchngDayId = value; }
		}
		
		#endregion

		#region CtrMenuActCollection
		
		private TList<CtrMenuAct> _ctrMenuActScTchngDayId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _ctrMenuActScTchngDayId
		/// </summary>
		
		public TList<CtrMenuAct> CtrMenuActCollection
		{
			get
			{
				if (_ctrMenuActScTchngDayId == null)
				{
				_ctrMenuActScTchngDayId = new TList<CtrMenuAct>();
				}
	
				return _ctrMenuActScTchngDayId;
			}
			set { _ctrMenuActScTchngDayId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ScTchngDayEntityData _tmp = new ScTchngDayEntityData();
						
			_tmp.ScTchngDayId = this.ScTchngDayId;
			_tmp.OriginalScTchngDayId = this.OriginalScTchngDayId;
			
			_tmp.GsCodeWeekDayId = this.GsCodeWeekDayId;
			_tmp.DayAr = this.DayAr;
			_tmp.DayEn = this.DayEn;
			_tmp.DaySrl = this.DaySrl;
			_tmp.ScSchdlPeriodId = this.ScSchdlPeriodId;
			
			#region Source Parent Composite Entities
			if (this.GsCodeWeekDayIdSource != null)
				_tmp.GsCodeWeekDayIdSource = MakeCopyOf(this.GsCodeWeekDayIdSource) as GsCodeWeekDay;
			if (this.ScSchdlPeriodIdSource != null)
				_tmp.ScSchdlPeriodIdSource = MakeCopyOf(this.ScSchdlPeriodIdSource) as ScSchdlPeriod;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._scGroupDayScTchngDayId != null)
				_tmp.ScGroupDayCollection = (TList<ScGroupDay>) MakeCopyOf(this.ScGroupDayCollection); 
			if (this._ctrMenuActScTchngDayId != null)
				_tmp.CtrMenuActCollection = (TList<CtrMenuAct>) MakeCopyOf(this.CtrMenuActCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ScTchngDayEntityData _tmp = new ScTchngDayEntityData();
						
			_tmp.ScTchngDayId = this.ScTchngDayId;
			_tmp.OriginalScTchngDayId = this.OriginalScTchngDayId;
			
			_tmp.GsCodeWeekDayId = this.GsCodeWeekDayId;
			_tmp.DayAr = this.DayAr;
			_tmp.DayEn = this.DayEn;
			_tmp.DaySrl = this.DaySrl;
			_tmp.ScSchdlPeriodId = this.ScSchdlPeriodId;
			
			#region Source Parent Composite Entities
			if (this.GsCodeWeekDayIdSource != null && existingCopies.Contains(this.GsCodeWeekDayIdSource))
				_tmp.GsCodeWeekDayIdSource = existingCopies[this.GsCodeWeekDayIdSource] as GsCodeWeekDay;
			else
				_tmp.GsCodeWeekDayIdSource = MakeCopyOf(this.GsCodeWeekDayIdSource, existingCopies) as GsCodeWeekDay;
			if (this.ScSchdlPeriodIdSource != null && existingCopies.Contains(this.ScSchdlPeriodIdSource))
				_tmp.ScSchdlPeriodIdSource = existingCopies[this.ScSchdlPeriodIdSource] as ScSchdlPeriod;
			else
				_tmp.ScSchdlPeriodIdSource = MakeCopyOf(this.ScSchdlPeriodIdSource, existingCopies) as ScSchdlPeriod;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.ScGroupDayCollection = (TList<ScGroupDay>) MakeCopyOf(this.ScGroupDayCollection, existingCopies); 
			_tmp.CtrMenuActCollection = (TList<CtrMenuAct>) MakeCopyOf(this.CtrMenuActCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScTchngDayColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ScTchngDayColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScTchngDayColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ScTchngDayColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScTchngDayColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ScTchngDayColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ScTchngDayEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ScTchngDayEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScTchngDayColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ScTchngDayColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ScTchngDayEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ScTchngDayEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ScTchngDayEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ScTchngDay"/> object.
	/// </remarks>
	public class ScTchngDayEventArgs : System.EventArgs
	{
		private ScTchngDayColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ScTchngDayEventArgs class.
		///</summary>
		public ScTchngDayEventArgs(ScTchngDayColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ScTchngDayEventArgs class.
		///</summary>
		public ScTchngDayEventArgs(ScTchngDayColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ScTchngDayColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ScTchngDayColumn" />
		public ScTchngDayColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ScTchngDay related events.
	///</summary>
	public delegate void ScTchngDayEventHandler(object sender, ScTchngDayEventArgs e);
	
	#region ScTchngDayComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ScTchngDayComparer : System.Collections.Generic.IComparer<ScTchngDay>
	{
		ScTchngDayColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ScTchngDayComparer"/> class.
        /// </summary>
		public ScTchngDayComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ScTchngDayComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ScTchngDayComparer(ScTchngDayColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="ScTchngDay"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="ScTchngDay"/> to compare.</param>
        /// <param name="b">The second <c>ScTchngDay</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ScTchngDay a, ScTchngDay b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ScTchngDay entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ScTchngDay a, ScTchngDay b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ScTchngDayColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ScTchngDayKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ScTchngDay"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ScTchngDayKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ScTchngDayKey class.
		/// </summary>
		public ScTchngDayKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ScTchngDayKey class.
		/// </summary>
		public ScTchngDayKey(ScTchngDayBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.ScTchngDayId = entity.ScTchngDayId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ScTchngDayKey class.
		/// </summary>
		public ScTchngDayKey(System.Decimal _scTchngDayId)
		{
			#region Init Properties

			this.ScTchngDayId = _scTchngDayId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ScTchngDayBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ScTchngDayBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ScTchngDayId property
		private System.Decimal _scTchngDayId;
		
		/// <summary>
		/// Gets or sets the ScTchngDayId property.
		/// </summary>
		public System.Decimal ScTchngDayId
		{
			get { return _scTchngDayId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ScTchngDayId = value;
				
				_scTchngDayId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ScTchngDayId = ( values["ScTchngDayId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["ScTchngDayId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ScTchngDayId", ScTchngDayId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ScTchngDayId: {0}{1}",
								ScTchngDayId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ScTchngDayColumn Enum
	
	/// <summary>
	/// Enumerate the ScTchngDay columns.
	/// </summary>
	[Serializable]
	public enum ScTchngDayColumn : int
	{
		/// <summary>
		/// ScTchngDayId : 
		/// </summary>
		[EnumTextValue("SC_TCHNG_DAY_ID")]
		[ColumnEnum("SC_TCHNG_DAY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		ScTchngDayId = 1,
		/// <summary>
		/// GsCodeWeekDayId : 
		/// </summary>
		[EnumTextValue("GS_CODE_WEEK_DAY_ID")]
		[ColumnEnum("GS_CODE_WEEK_DAY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsCodeWeekDayId = 2,
		/// <summary>
		/// DayAr : 
		/// </summary>
		[EnumTextValue("DAY_AR")]
		[ColumnEnum("DAY_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 30)]
		DayAr = 3,
		/// <summary>
		/// DayEn : 
		/// </summary>
		[EnumTextValue("DAY_EN")]
		[ColumnEnum("DAY_EN", typeof(System.String), System.Data.DbType.String, false, false, false, 30)]
		DayEn = 4,
		/// <summary>
		/// DaySrl : 
		/// </summary>
		[EnumTextValue("DAY_SRL")]
		[ColumnEnum("DAY_SRL", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DaySrl = 5,
		/// <summary>
		/// ScSchdlPeriodId : 
		/// </summary>
		[EnumTextValue("SC_SCHDL_PERIOD_ID")]
		[ColumnEnum("SC_SCHDL_PERIOD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScSchdlPeriodId = 6
	}//End enum

	#endregion ScTchngDayColumn Enum

} // end namespace
