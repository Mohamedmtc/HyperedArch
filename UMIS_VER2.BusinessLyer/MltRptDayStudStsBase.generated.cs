
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file MltRptDayStudSts.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'MLT_RPT_DAY_STUD_STS' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class MltRptDayStudStsBase : EntityBase, IMltRptDayStudSts, IEntityId<MltRptDayStudStsKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private MltRptDayStudStsEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private MltRptDayStudStsEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private MltRptDayStudStsEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<MltRptDayStudSts> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MltRptDayStudStsEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MltRptDayStudStsEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="MltRptDayStudStsBase"/> instance.
		///</summary>
		public MltRptDayStudStsBase()
		{
			this.entityData = new MltRptDayStudStsEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="MltRptDayStudStsBase"/> instance.
		///</summary>
		///<param name="_mltRptDayStudStsId">تقرير تمام الكلية عن يوم</param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId">مسلسل الفصل الدراسي</param>
		///<param name="_dayDate">تاريخ اليوم</param>
		///<param name="_edAcadYearJoinId">الدفعة</param>
		///<param name="_mltOrgTreeId">الكتيبة</param>
		///<param name="_totCount">القوة</param>
		///<param name="_existCount">الموجود</param>
		///<param name="_outCount">الخارج</param>
		///<param name="_underObservCount">تحت الملاحظة</param>
		///<param name="_inPrisonCount">فى السجن</param>
		public MltRptDayStudStsBase(System.Decimal _mltRptDayStudStsId, System.Decimal _edAcadYearId, 
			System.Decimal _edCodeSemesterId, System.DateTime _dayDate, System.Decimal _edAcadYearJoinId, 
			System.Decimal _mltOrgTreeId, System.Decimal? _totCount, System.Decimal? _existCount, 
			System.Decimal? _outCount, System.Decimal? _underObservCount, System.Decimal? _inPrisonCount)
		{
			this.entityData = new MltRptDayStudStsEntityData();
			this.backupData = null;

			this.MltRptDayStudStsId = _mltRptDayStudStsId;
			this.EdAcadYearId = _edAcadYearId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.DayDate = _dayDate;
			this.EdAcadYearJoinId = _edAcadYearJoinId;
			this.MltOrgTreeId = _mltOrgTreeId;
			this.TotCount = _totCount;
			this.ExistCount = _existCount;
			this.OutCount = _outCount;
			this.UnderObservCount = _underObservCount;
			this.InPrisonCount = _inPrisonCount;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="MltRptDayStudSts"/> instance.
		///</summary>
		///<param name="_mltRptDayStudStsId">تقرير تمام الكلية عن يوم</param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId">مسلسل الفصل الدراسي</param>
		///<param name="_dayDate">تاريخ اليوم</param>
		///<param name="_edAcadYearJoinId">الدفعة</param>
		///<param name="_mltOrgTreeId">الكتيبة</param>
		///<param name="_totCount">القوة</param>
		///<param name="_existCount">الموجود</param>
		///<param name="_outCount">الخارج</param>
		///<param name="_underObservCount">تحت الملاحظة</param>
		///<param name="_inPrisonCount">فى السجن</param>
		public static MltRptDayStudSts CreateMltRptDayStudSts(System.Decimal _mltRptDayStudStsId, System.Decimal _edAcadYearId, 
			System.Decimal _edCodeSemesterId, System.DateTime _dayDate, System.Decimal _edAcadYearJoinId, 
			System.Decimal _mltOrgTreeId, System.Decimal? _totCount, System.Decimal? _existCount, 
			System.Decimal? _outCount, System.Decimal? _underObservCount, System.Decimal? _inPrisonCount)
		{
			MltRptDayStudSts newMltRptDayStudSts = new MltRptDayStudSts();
			newMltRptDayStudSts.MltRptDayStudStsId = _mltRptDayStudStsId;
			newMltRptDayStudSts.EdAcadYearId = _edAcadYearId;
			newMltRptDayStudSts.EdCodeSemesterId = _edCodeSemesterId;
			newMltRptDayStudSts.DayDate = _dayDate;
			newMltRptDayStudSts.EdAcadYearJoinId = _edAcadYearJoinId;
			newMltRptDayStudSts.MltOrgTreeId = _mltOrgTreeId;
			newMltRptDayStudSts.TotCount = _totCount;
			newMltRptDayStudSts.ExistCount = _existCount;
			newMltRptDayStudSts.OutCount = _outCount;
			newMltRptDayStudSts.UnderObservCount = _underObservCount;
			newMltRptDayStudSts.InPrisonCount = _inPrisonCount;
			return newMltRptDayStudSts;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MltRptDayStudStsId property. 
		///		تقرير تمام الكلية عن يوم
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"تقرير تمام الكلية عن يوم"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal MltRptDayStudStsId
		{
			get
			{
				return this.entityData.MltRptDayStudStsId; 
			}
			
			set
			{
				if (this.entityData.MltRptDayStudStsId == value)
					return;
					
				OnColumnChanging(MltRptDayStudStsColumn.MltRptDayStudStsId, this.entityData.MltRptDayStudStsId);
				this.entityData.MltRptDayStudStsId = value;
				this.EntityId.MltRptDayStudStsId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MltRptDayStudStsColumn.MltRptDayStudStsId, this.entityData.MltRptDayStudStsId);
				OnPropertyChanged("MltRptDayStudStsId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the MLT_RPT_DAY_STUD_STS_ID property.
		///		تقرير تمام الكلية عن يوم
		/// </summary>
		/// <remarks>This is the original value of the MLT_RPT_DAY_STUD_STS_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalMltRptDayStudStsId
		{
			get { return this.entityData.OriginalMltRptDayStudStsId; }
			set { this.entityData.OriginalMltRptDayStudStsId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(MltRptDayStudStsColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MltRptDayStudStsColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		مسلسل الفصل الدراسي
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"مسلسل الفصل الدراسي"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(MltRptDayStudStsColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MltRptDayStudStsColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DayDate property. 
		///		تاريخ اليوم
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"تاريخ اليوم"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime DayDate
		{
			get
			{
				return this.entityData.DayDate; 
			}
			
			set
			{
				if (this.entityData.DayDate == value)
					return;
					
				OnColumnChanging(MltRptDayStudStsColumn.DayDate, this.entityData.DayDate);
				this.entityData.DayDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MltRptDayStudStsColumn.DayDate, this.entityData.DayDate);
				OnPropertyChanged("DayDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearJoinId property. 
		///		الدفعة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"الدفعة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearJoinId
		{
			get
			{
				return this.entityData.EdAcadYearJoinId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearJoinId == value)
					return;
					
				OnColumnChanging(MltRptDayStudStsColumn.EdAcadYearJoinId, this.entityData.EdAcadYearJoinId);
				this.entityData.EdAcadYearJoinId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MltRptDayStudStsColumn.EdAcadYearJoinId, this.entityData.EdAcadYearJoinId);
				OnPropertyChanged("EdAcadYearJoinId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MltOrgTreeId property. 
		///		الكتيبة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"الكتيبة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal MltOrgTreeId
		{
			get
			{
				return this.entityData.MltOrgTreeId; 
			}
			
			set
			{
				if (this.entityData.MltOrgTreeId == value)
					return;
					
				OnColumnChanging(MltRptDayStudStsColumn.MltOrgTreeId, this.entityData.MltOrgTreeId);
				this.entityData.MltOrgTreeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MltRptDayStudStsColumn.MltOrgTreeId, this.entityData.MltOrgTreeId);
				OnPropertyChanged("MltOrgTreeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotCount property. 
		///		القوة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotCountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"القوة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotCount
		{
			get
			{
				return this.entityData.TotCount; 
			}
			
			set
			{
				if (this.entityData.TotCount == value)
					return;
					
				OnColumnChanging(MltRptDayStudStsColumn.TotCount, this.entityData.TotCount);
				this.entityData.TotCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MltRptDayStudStsColumn.TotCount, this.entityData.TotCount);
				OnPropertyChanged("TotCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExistCount property. 
		///		الموجود
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsExistCountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"الموجود"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ExistCount
		{
			get
			{
				return this.entityData.ExistCount; 
			}
			
			set
			{
				if (this.entityData.ExistCount == value)
					return;
					
				OnColumnChanging(MltRptDayStudStsColumn.ExistCount, this.entityData.ExistCount);
				this.entityData.ExistCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MltRptDayStudStsColumn.ExistCount, this.entityData.ExistCount);
				OnPropertyChanged("ExistCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OutCount property. 
		///		الخارج
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsOutCountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"الخارج"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? OutCount
		{
			get
			{
				return this.entityData.OutCount; 
			}
			
			set
			{
				if (this.entityData.OutCount == value)
					return;
					
				OnColumnChanging(MltRptDayStudStsColumn.OutCount, this.entityData.OutCount);
				this.entityData.OutCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MltRptDayStudStsColumn.OutCount, this.entityData.OutCount);
				OnPropertyChanged("OutCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UnderObservCount property. 
		///		تحت الملاحظة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsUnderObservCountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تحت الملاحظة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? UnderObservCount
		{
			get
			{
				return this.entityData.UnderObservCount; 
			}
			
			set
			{
				if (this.entityData.UnderObservCount == value)
					return;
					
				OnColumnChanging(MltRptDayStudStsColumn.UnderObservCount, this.entityData.UnderObservCount);
				this.entityData.UnderObservCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MltRptDayStudStsColumn.UnderObservCount, this.entityData.UnderObservCount);
				OnPropertyChanged("UnderObservCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InPrisonCount property. 
		///		فى السجن
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsInPrisonCountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"فى السجن"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? InPrisonCount
		{
			get
			{
				return this.entityData.InPrisonCount; 
			}
			
			set
			{
				if (this.entityData.InPrisonCount == value)
					return;
					
				OnColumnChanging(MltRptDayStudStsColumn.InPrisonCount, this.entityData.InPrisonCount);
				this.entityData.InPrisonCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MltRptDayStudStsColumn.InPrisonCount, this.entityData.InPrisonCount);
				OnPropertyChanged("InPrisonCount");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearJoinId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearJoinIdSource
      	{
            get { return entityData.EdAcadYearJoinIdSource; }
            set { entityData.EdAcadYearJoinIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="MltOrgTree"/>.
		/// </summary>
		/// <value>The source MltOrgTree for MltOrgTreeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual MltOrgTree MltOrgTreeIdSource
      	{
            get { return entityData.MltOrgTreeIdSource; }
            set { entityData.MltOrgTreeIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of MltRptDayMission objects
		///	which are related to this object through the relation FK_MLT_RPT_DAY_MISSION_MLT_RPT_DAY_STUD_STS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<MltRptDayMission> MltRptDayMissionCollection
		{
			get { return entityData.MltRptDayMissionCollection; }
			set { entityData.MltRptDayMissionCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of MltRptDayOut objects
		///	which are related to this object through the relation FK_MLT_RPT_DAY_OUT_MLT_RPT_DAY_STUD_STS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<MltRptDayOut> MltRptDayOutCollection
		{
			get { return entityData.MltRptDayOutCollection; }
			set { entityData.MltRptDayOutCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "MLT_RPT_DAY_STUD_STS"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MLT_RPT_DAY_STUD_STS_ID", "ED_ACAD_YEAR_ID", "ED_CODE_SEMESTER_ID", "DAY_DATE", "ED_ACAD_YEAR_JOIN_ID", "MLT_ORG_TREE_ID", "TOT_COUNT", "EXIST_COUNT", "OUT_COUNT", "UNDER_OBSERV_COUNT", "IN_PRISON_COUNT"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as MltRptDayStudStsEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (MltRptDayStudSts) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<MltRptDayStudSts>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as MltRptDayStudSts);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed MltRptDayStudSts Entity 
		///</summary>
		protected virtual MltRptDayStudSts Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			MltRptDayStudSts copy = new MltRptDayStudSts();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MltRptDayStudStsId = this.MltRptDayStudStsId;
					copy.OriginalMltRptDayStudStsId = this.OriginalMltRptDayStudStsId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.DayDate = this.DayDate;
				copy.EdAcadYearJoinId = this.EdAcadYearJoinId;
				copy.MltOrgTreeId = this.MltOrgTreeId;
				copy.TotCount = this.TotCount;
				copy.ExistCount = this.ExistCount;
				copy.OutCount = this.OutCount;
				copy.UnderObservCount = this.UnderObservCount;
				copy.InPrisonCount = this.InPrisonCount;
			
			if (this.EdAcadYearJoinIdSource != null && existingCopies.Contains(this.EdAcadYearJoinIdSource))
				copy.EdAcadYearJoinIdSource = existingCopies[this.EdAcadYearJoinIdSource] as EdAcadYear;
			else
				copy.EdAcadYearJoinIdSource = MakeCopyOf(this.EdAcadYearJoinIdSource, existingCopies) as EdAcadYear;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.MltOrgTreeIdSource != null && existingCopies.Contains(this.MltOrgTreeIdSource))
				copy.MltOrgTreeIdSource = existingCopies[this.MltOrgTreeIdSource] as MltOrgTree;
			else
				copy.MltOrgTreeIdSource = MakeCopyOf(this.MltOrgTreeIdSource, existingCopies) as MltOrgTree;
		
			//deep copy nested objects
			copy.MltRptDayMissionCollection = (TList<MltRptDayMission>) MakeCopyOf(this.MltRptDayMissionCollection, existingCopies); 
			copy.MltRptDayOutCollection = (TList<MltRptDayOut>) MakeCopyOf(this.MltRptDayOutCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed MltRptDayStudSts Entity 
		///</summary>
		public virtual MltRptDayStudSts Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed MltRptDayStudSts Entity which is a deep copy of the current entity.
		///</summary>
		public virtual MltRptDayStudSts DeepCopy()
		{
			return EntityHelper.Clone<MltRptDayStudSts>(this as MltRptDayStudSts);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as MltRptDayStudStsEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new MltRptDayStudStsEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as MltRptDayStudStsEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(MltRptDayStudStsColumn column)
		{
			switch(column)
			{
					case MltRptDayStudStsColumn.MltRptDayStudStsId:
					return entityData.MltRptDayStudStsId != _originalData.MltRptDayStudStsId;
					case MltRptDayStudStsColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case MltRptDayStudStsColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case MltRptDayStudStsColumn.DayDate:
					return entityData.DayDate != _originalData.DayDate;
					case MltRptDayStudStsColumn.EdAcadYearJoinId:
					return entityData.EdAcadYearJoinId != _originalData.EdAcadYearJoinId;
					case MltRptDayStudStsColumn.MltOrgTreeId:
					return entityData.MltOrgTreeId != _originalData.MltOrgTreeId;
					case MltRptDayStudStsColumn.TotCount:
					return entityData.TotCount != _originalData.TotCount;
					case MltRptDayStudStsColumn.ExistCount:
					return entityData.ExistCount != _originalData.ExistCount;
					case MltRptDayStudStsColumn.OutCount:
					return entityData.OutCount != _originalData.OutCount;
					case MltRptDayStudStsColumn.UnderObservCount:
					return entityData.UnderObservCount != _originalData.UnderObservCount;
					case MltRptDayStudStsColumn.InPrisonCount:
					return entityData.InPrisonCount != _originalData.InPrisonCount;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< MltRptDayStudStsColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MltRptDayStudStsId != _originalData.MltRptDayStudStsId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.DayDate != _originalData.DayDate;
			result = result || entityData.EdAcadYearJoinId != _originalData.EdAcadYearJoinId;
			result = result || entityData.MltOrgTreeId != _originalData.MltOrgTreeId;
			result = result || entityData.TotCount != _originalData.TotCount;
			result = result || entityData.ExistCount != _originalData.ExistCount;
			result = result || entityData.OutCount != _originalData.OutCount;
			result = result || entityData.UnderObservCount != _originalData.UnderObservCount;
			result = result || entityData.InPrisonCount != _originalData.InPrisonCount;
			return result;
		}	
		
		///<summary>
		///  Returns a MltRptDayStudSts Entity with the original data.
		///</summary>
		public MltRptDayStudSts GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateMltRptDayStudSts(
				_originalData.MltRptDayStudStsId,
				_originalData.EdAcadYearId,
				_originalData.EdCodeSemesterId,
				_originalData.DayDate,
				_originalData.EdAcadYearJoinId,
				_originalData.MltOrgTreeId,
				_originalData.TotCount,
				_originalData.ExistCount,
				_originalData.OutCount,
				_originalData.UnderObservCount,
				_originalData.InPrisonCount
				);
				
			return (MltRptDayStudSts)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="MltRptDayStudStsBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is MltRptDayStudStsBase)
				return ValueEquals(this, (MltRptDayStudStsBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="MltRptDayStudStsBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MltRptDayStudStsId.GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					this.EdCodeSemesterId.GetHashCode() ^ 
					this.DayDate.GetHashCode() ^ 
					this.EdAcadYearJoinId.GetHashCode() ^ 
					this.MltOrgTreeId.GetHashCode() ^ 
					((this.TotCount == null) ? string.Empty : this.TotCount.ToString()).GetHashCode() ^ 
					((this.ExistCount == null) ? string.Empty : this.ExistCount.ToString()).GetHashCode() ^ 
					((this.OutCount == null) ? string.Empty : this.OutCount.ToString()).GetHashCode() ^ 
					((this.UnderObservCount == null) ? string.Empty : this.UnderObservCount.ToString()).GetHashCode() ^ 
					((this.InPrisonCount == null) ? string.Empty : this.InPrisonCount.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="MltRptDayStudStsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(MltRptDayStudStsBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="MltRptDayStudStsBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="MltRptDayStudStsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="MltRptDayStudStsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(MltRptDayStudStsBase Object1, MltRptDayStudStsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MltRptDayStudStsId != Object2.MltRptDayStudStsId)
				equal = false;
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
				equal = false;
			if (Object1.DayDate != Object2.DayDate)
				equal = false;
			if (Object1.EdAcadYearJoinId != Object2.EdAcadYearJoinId)
				equal = false;
			if (Object1.MltOrgTreeId != Object2.MltOrgTreeId)
				equal = false;
			if ( Object1.TotCount != null && Object2.TotCount != null )
			{
				if (Object1.TotCount != Object2.TotCount)
					equal = false;
			}
			else if (Object1.TotCount == null ^ Object2.TotCount == null )
			{
				equal = false;
			}
			if ( Object1.ExistCount != null && Object2.ExistCount != null )
			{
				if (Object1.ExistCount != Object2.ExistCount)
					equal = false;
			}
			else if (Object1.ExistCount == null ^ Object2.ExistCount == null )
			{
				equal = false;
			}
			if ( Object1.OutCount != null && Object2.OutCount != null )
			{
				if (Object1.OutCount != Object2.OutCount)
					equal = false;
			}
			else if (Object1.OutCount == null ^ Object2.OutCount == null )
			{
				equal = false;
			}
			if ( Object1.UnderObservCount != null && Object2.UnderObservCount != null )
			{
				if (Object1.UnderObservCount != Object2.UnderObservCount)
					equal = false;
			}
			else if (Object1.UnderObservCount == null ^ Object2.UnderObservCount == null )
			{
				equal = false;
			}
			if ( Object1.InPrisonCount != null && Object2.InPrisonCount != null )
			{
				if (Object1.InPrisonCount != Object2.InPrisonCount)
					equal = false;
			}
			else if (Object1.InPrisonCount == null ^ Object2.InPrisonCount == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((MltRptDayStudStsBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static MltRptDayStudStsComparer GetComparer()
        {
            return new MltRptDayStudStsComparer();
        }
        */

        // Comparer delegates back to MltRptDayStudSts
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(MltRptDayStudSts rhs, MltRptDayStudStsColumn which)
        {
            switch (which)
            {
            	
            	
            	case MltRptDayStudStsColumn.MltRptDayStudStsId:
            		return this.MltRptDayStudStsId.CompareTo(rhs.MltRptDayStudStsId);
            		
            		                 
            	
            	
            	case MltRptDayStudStsColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case MltRptDayStudStsColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.CompareTo(rhs.EdCodeSemesterId);
            		
            		                 
            	
            	
            	case MltRptDayStudStsColumn.DayDate:
            		return this.DayDate.CompareTo(rhs.DayDate);
            		
            		                 
            	
            	
            	case MltRptDayStudStsColumn.EdAcadYearJoinId:
            		return this.EdAcadYearJoinId.CompareTo(rhs.EdAcadYearJoinId);
            		
            		                 
            	
            	
            	case MltRptDayStudStsColumn.MltOrgTreeId:
            		return this.MltOrgTreeId.CompareTo(rhs.MltOrgTreeId);
            		
            		                 
            	
            	
            	case MltRptDayStudStsColumn.TotCount:
            		return this.TotCount.Value.CompareTo(rhs.TotCount.Value);
            		
            		                 
            	
            	
            	case MltRptDayStudStsColumn.ExistCount:
            		return this.ExistCount.Value.CompareTo(rhs.ExistCount.Value);
            		
            		                 
            	
            	
            	case MltRptDayStudStsColumn.OutCount:
            		return this.OutCount.Value.CompareTo(rhs.OutCount.Value);
            		
            		                 
            	
            	
            	case MltRptDayStudStsColumn.UnderObservCount:
            		return this.UnderObservCount.Value.CompareTo(rhs.UnderObservCount.Value);
            		
            		                 
            	
            	
            	case MltRptDayStudStsColumn.InPrisonCount:
            		return this.InPrisonCount.Value.CompareTo(rhs.InPrisonCount.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<MltRptDayStudStsKey> Members
		
		// member variable for the EntityId property
		private MltRptDayStudStsKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual MltRptDayStudStsKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new MltRptDayStudStsKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("MltRptDayStudSts")
					.Append("|").Append( this.MltRptDayStudStsId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- MltRptDayStudStsId: {0}{11}- EdAcadYearId: {1}{11}- EdCodeSemesterId: {2}{11}- DayDate: {3}{11}- EdAcadYearJoinId: {4}{11}- MltOrgTreeId: {5}{11}- TotCount: {6}{11}- ExistCount: {7}{11}- OutCount: {8}{11}- UnderObservCount: {9}{11}- InPrisonCount: {10}{11}{13}", 
				this.MltRptDayStudStsId,
				this.EdAcadYearId,
				this.EdCodeSemesterId,
				this.DayDate,
				this.EdAcadYearJoinId,
				this.MltOrgTreeId,
				(this.TotCount == null) ? string.Empty : this.TotCount.ToString(),
				(this.ExistCount == null) ? string.Empty : this.ExistCount.ToString(),
				(this.OutCount == null) ? string.Empty : this.OutCount.ToString(),
				(this.UnderObservCount == null) ? string.Empty : this.UnderObservCount.ToString(),
				(this.InPrisonCount == null) ? string.Empty : this.InPrisonCount.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'MLT_RPT_DAY_STUD_STS' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class MltRptDayStudStsEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MLT_RPT_DAY_STUD_STS_ID : تقرير تمام الكلية عن يوم
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "MLT_RPT_DAY_STUD_STS"</remarks>
		public System.Decimal MltRptDayStudStsId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalMltRptDayStudStsId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : مسلسل الفصل الدراسي
		/// </summary>
		public System.Decimal		  EdCodeSemesterId = 0.0m;
		
		/// <summary>
		/// DAY_DATE : تاريخ اليوم
		/// </summary>
		public System.DateTime		  DayDate = DateTime.MinValue;
		
		/// <summary>
		/// ED_ACAD_YEAR_JOIN_ID : الدفعة
		/// </summary>
		public System.Decimal		  EdAcadYearJoinId = 0.0m;
		
		/// <summary>
		/// MLT_ORG_TREE_ID : الكتيبة
		/// </summary>
		public System.Decimal		  MltOrgTreeId = 0.0m;
		
		/// <summary>
		/// TOT_COUNT : القوة
		/// </summary>
		public System.Decimal?		  TotCount = null;
		
		/// <summary>
		/// EXIST_COUNT : الموجود
		/// </summary>
		public System.Decimal?		  ExistCount = null;
		
		/// <summary>
		/// OUT_COUNT : الخارج
		/// </summary>
		public System.Decimal?		  OutCount = null;
		
		/// <summary>
		/// UNDER_OBSERV_COUNT : تحت الملاحظة
		/// </summary>
		public System.Decimal?		  UnderObservCount = null;
		
		/// <summary>
		/// IN_PRISON_COUNT : فى السجن
		/// </summary>
		public System.Decimal?		  InPrisonCount = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdAcadYear _edAcadYearJoinIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearJoinId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearJoinIdSource
      	{
            get { return this._edAcadYearJoinIdSource; }
            set { this._edAcadYearJoinIdSource = value; }
      	}
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private MltOrgTree _mltOrgTreeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="MltOrgTree"/>.
		/// </summary>
		/// <value>The source MltOrgTree for MltOrgTreeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual MltOrgTree MltOrgTreeIdSource
      	{
            get { return this._mltOrgTreeIdSource; }
            set { this._mltOrgTreeIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region MltRptDayMissionCollection
		
		private TList<MltRptDayMission> _mltRptDayMissionMltRptDayStudStsId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _mltRptDayMissionMltRptDayStudStsId
		/// </summary>
		
		public TList<MltRptDayMission> MltRptDayMissionCollection
		{
			get
			{
				if (_mltRptDayMissionMltRptDayStudStsId == null)
				{
				_mltRptDayMissionMltRptDayStudStsId = new TList<MltRptDayMission>();
				}
	
				return _mltRptDayMissionMltRptDayStudStsId;
			}
			set { _mltRptDayMissionMltRptDayStudStsId = value; }
		}
		
		#endregion

		#region MltRptDayOutCollection
		
		private TList<MltRptDayOut> _mltRptDayOutMltRptDayStudStsId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _mltRptDayOutMltRptDayStudStsId
		/// </summary>
		
		public TList<MltRptDayOut> MltRptDayOutCollection
		{
			get
			{
				if (_mltRptDayOutMltRptDayStudStsId == null)
				{
				_mltRptDayOutMltRptDayStudStsId = new TList<MltRptDayOut>();
				}
	
				return _mltRptDayOutMltRptDayStudStsId;
			}
			set { _mltRptDayOutMltRptDayStudStsId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			MltRptDayStudStsEntityData _tmp = new MltRptDayStudStsEntityData();
						
			_tmp.MltRptDayStudStsId = this.MltRptDayStudStsId;
			_tmp.OriginalMltRptDayStudStsId = this.OriginalMltRptDayStudStsId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.DayDate = this.DayDate;
			_tmp.EdAcadYearJoinId = this.EdAcadYearJoinId;
			_tmp.MltOrgTreeId = this.MltOrgTreeId;
			_tmp.TotCount = this.TotCount;
			_tmp.ExistCount = this.ExistCount;
			_tmp.OutCount = this.OutCount;
			_tmp.UnderObservCount = this.UnderObservCount;
			_tmp.InPrisonCount = this.InPrisonCount;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearJoinIdSource != null)
				_tmp.EdAcadYearJoinIdSource = MakeCopyOf(this.EdAcadYearJoinIdSource) as EdAcadYear;
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.MltOrgTreeIdSource != null)
				_tmp.MltOrgTreeIdSource = MakeCopyOf(this.MltOrgTreeIdSource) as MltOrgTree;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._mltRptDayMissionMltRptDayStudStsId != null)
				_tmp.MltRptDayMissionCollection = (TList<MltRptDayMission>) MakeCopyOf(this.MltRptDayMissionCollection); 
			if (this._mltRptDayOutMltRptDayStudStsId != null)
				_tmp.MltRptDayOutCollection = (TList<MltRptDayOut>) MakeCopyOf(this.MltRptDayOutCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			MltRptDayStudStsEntityData _tmp = new MltRptDayStudStsEntityData();
						
			_tmp.MltRptDayStudStsId = this.MltRptDayStudStsId;
			_tmp.OriginalMltRptDayStudStsId = this.OriginalMltRptDayStudStsId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.DayDate = this.DayDate;
			_tmp.EdAcadYearJoinId = this.EdAcadYearJoinId;
			_tmp.MltOrgTreeId = this.MltOrgTreeId;
			_tmp.TotCount = this.TotCount;
			_tmp.ExistCount = this.ExistCount;
			_tmp.OutCount = this.OutCount;
			_tmp.UnderObservCount = this.UnderObservCount;
			_tmp.InPrisonCount = this.InPrisonCount;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearJoinIdSource != null && existingCopies.Contains(this.EdAcadYearJoinIdSource))
				_tmp.EdAcadYearJoinIdSource = existingCopies[this.EdAcadYearJoinIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearJoinIdSource = MakeCopyOf(this.EdAcadYearJoinIdSource, existingCopies) as EdAcadYear;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.MltOrgTreeIdSource != null && existingCopies.Contains(this.MltOrgTreeIdSource))
				_tmp.MltOrgTreeIdSource = existingCopies[this.MltOrgTreeIdSource] as MltOrgTree;
			else
				_tmp.MltOrgTreeIdSource = MakeCopyOf(this.MltOrgTreeIdSource, existingCopies) as MltOrgTree;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.MltRptDayMissionCollection = (TList<MltRptDayMission>) MakeCopyOf(this.MltRptDayMissionCollection, existingCopies); 
			_tmp.MltRptDayOutCollection = (TList<MltRptDayOut>) MakeCopyOf(this.MltRptDayOutCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MltRptDayStudStsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(MltRptDayStudStsColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MltRptDayStudStsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(MltRptDayStudStsColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MltRptDayStudStsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(MltRptDayStudStsColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				MltRptDayStudStsEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new MltRptDayStudStsEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MltRptDayStudStsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(MltRptDayStudStsColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				MltRptDayStudStsEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new MltRptDayStudStsEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region MltRptDayStudStsEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="MltRptDayStudSts"/> object.
	/// </remarks>
	public class MltRptDayStudStsEventArgs : System.EventArgs
	{
		private MltRptDayStudStsColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the MltRptDayStudStsEventArgs class.
		///</summary>
		public MltRptDayStudStsEventArgs(MltRptDayStudStsColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the MltRptDayStudStsEventArgs class.
		///</summary>
		public MltRptDayStudStsEventArgs(MltRptDayStudStsColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The MltRptDayStudStsColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="MltRptDayStudStsColumn" />
		public MltRptDayStudStsColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all MltRptDayStudSts related events.
	///</summary>
	public delegate void MltRptDayStudStsEventHandler(object sender, MltRptDayStudStsEventArgs e);
	
	#region MltRptDayStudStsComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class MltRptDayStudStsComparer : System.Collections.Generic.IComparer<MltRptDayStudSts>
	{
		MltRptDayStudStsColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:MltRptDayStudStsComparer"/> class.
        /// </summary>
		public MltRptDayStudStsComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:MltRptDayStudStsComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public MltRptDayStudStsComparer(MltRptDayStudStsColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="MltRptDayStudSts"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="MltRptDayStudSts"/> to compare.</param>
        /// <param name="b">The second <c>MltRptDayStudSts</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(MltRptDayStudSts a, MltRptDayStudSts b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(MltRptDayStudSts entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(MltRptDayStudSts a, MltRptDayStudSts b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public MltRptDayStudStsColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region MltRptDayStudStsKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="MltRptDayStudSts"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class MltRptDayStudStsKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the MltRptDayStudStsKey class.
		/// </summary>
		public MltRptDayStudStsKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the MltRptDayStudStsKey class.
		/// </summary>
		public MltRptDayStudStsKey(MltRptDayStudStsBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MltRptDayStudStsId = entity.MltRptDayStudStsId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the MltRptDayStudStsKey class.
		/// </summary>
		public MltRptDayStudStsKey(System.Decimal _mltRptDayStudStsId)
		{
			#region Init Properties

			this.MltRptDayStudStsId = _mltRptDayStudStsId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private MltRptDayStudStsBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public MltRptDayStudStsBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MltRptDayStudStsId property
		private System.Decimal _mltRptDayStudStsId;
		
		/// <summary>
		/// Gets or sets the MltRptDayStudStsId property.
		/// </summary>
		public System.Decimal MltRptDayStudStsId
		{
			get { return _mltRptDayStudStsId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MltRptDayStudStsId = value;
				
				_mltRptDayStudStsId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MltRptDayStudStsId = ( values["MltRptDayStudStsId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["MltRptDayStudStsId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MltRptDayStudStsId", MltRptDayStudStsId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MltRptDayStudStsId: {0}{1}",
								MltRptDayStudStsId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region MltRptDayStudStsColumn Enum
	
	/// <summary>
	/// Enumerate the MltRptDayStudSts columns.
	/// </summary>
	[Serializable]
	public enum MltRptDayStudStsColumn : int
	{
		/// <summary>
		/// MltRptDayStudStsId : تقرير تمام الكلية عن يوم
		/// </summary>
		[EnumTextValue("MLT_RPT_DAY_STUD_STS_ID")]
		[ColumnEnum("MLT_RPT_DAY_STUD_STS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		MltRptDayStudStsId = 1,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 2,
		/// <summary>
		/// EdCodeSemesterId : مسلسل الفصل الدراسي
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeSemesterId = 3,
		/// <summary>
		/// DayDate : تاريخ اليوم
		/// </summary>
		[EnumTextValue("DAY_DATE")]
		[ColumnEnum("DAY_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		DayDate = 4,
		/// <summary>
		/// EdAcadYearJoinId : الدفعة
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_JOIN_ID")]
		[ColumnEnum("ED_ACAD_YEAR_JOIN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearJoinId = 5,
		/// <summary>
		/// MltOrgTreeId : الكتيبة
		/// </summary>
		[EnumTextValue("MLT_ORG_TREE_ID")]
		[ColumnEnum("MLT_ORG_TREE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		MltOrgTreeId = 6,
		/// <summary>
		/// TotCount : القوة
		/// </summary>
		[EnumTextValue("TOT_COUNT")]
		[ColumnEnum("TOT_COUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotCount = 7,
		/// <summary>
		/// ExistCount : الموجود
		/// </summary>
		[EnumTextValue("EXIST_COUNT")]
		[ColumnEnum("EXIST_COUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ExistCount = 8,
		/// <summary>
		/// OutCount : الخارج
		/// </summary>
		[EnumTextValue("OUT_COUNT")]
		[ColumnEnum("OUT_COUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		OutCount = 9,
		/// <summary>
		/// UnderObservCount : تحت الملاحظة
		/// </summary>
		[EnumTextValue("UNDER_OBSERV_COUNT")]
		[ColumnEnum("UNDER_OBSERV_COUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		UnderObservCount = 10,
		/// <summary>
		/// InPrisonCount : فى السجن
		/// </summary>
		[EnumTextValue("IN_PRISON_COUNT")]
		[ColumnEnum("IN_PRISON_COUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		InPrisonCount = 11
	}//End enum

	#endregion MltRptDayStudStsColumn Enum

} // end namespace
