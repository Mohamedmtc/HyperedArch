
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdCourseTopic.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_COURSE_TOPIC' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdCourseTopicBase : EntityBase, IEdCourseTopic, IEntityId<EdCourseTopicKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdCourseTopicEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdCourseTopicEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdCourseTopicEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdCourseTopic> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdCourseTopicEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdCourseTopicEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdCourseTopicBase"/> instance.
		///</summary>
		public EdCourseTopicBase()
		{
			this.entityData = new EdCourseTopicEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdCourseTopicBase"/> instance.
		///</summary>
		///<param name="_edCourseTopicId">مواضيع المقرر الراسي</param>
		///<param name="_edCourseId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_entMainId">القسم</param>
		///<param name="_topicAr"></param>
		///<param name="_topicEn"></param>
		///<param name="_topicOrder">ترتيب دراسةالموضوع</param>
		///<param name="_optionalFlg"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_topicContentAr"></param>
		///<param name="_topicContentEn"></param>
		public EdCourseTopicBase(System.Decimal _edCourseTopicId, System.Decimal _edCourseId, 
			System.Decimal? _asFacultyInfoId, System.Decimal? _entMainId, System.String _topicAr, 
			System.String _topicEn, System.Int32? _topicOrder, System.Boolean _optionalFlg, 
			System.Decimal? _seUserId, System.DateTime? _lastDate, System.String _topicContentAr, 
			System.String _topicContentEn)
		{
			this.entityData = new EdCourseTopicEntityData();
			this.backupData = null;

			this.EdCourseTopicId = _edCourseTopicId;
			this.EdCourseId = _edCourseId;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.EntMainId = _entMainId;
			this.TopicAr = _topicAr;
			this.TopicEn = _topicEn;
			this.TopicOrder = _topicOrder;
			this.OptionalFlg = _optionalFlg;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
			this.TopicContentAr = _topicContentAr;
			this.TopicContentEn = _topicContentEn;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdCourseTopic"/> instance.
		///</summary>
		///<param name="_edCourseTopicId">مواضيع المقرر الراسي</param>
		///<param name="_edCourseId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_entMainId">القسم</param>
		///<param name="_topicAr"></param>
		///<param name="_topicEn"></param>
		///<param name="_topicOrder">ترتيب دراسةالموضوع</param>
		///<param name="_optionalFlg"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_topicContentAr"></param>
		///<param name="_topicContentEn"></param>
		public static EdCourseTopic CreateEdCourseTopic(System.Decimal _edCourseTopicId, System.Decimal _edCourseId, 
			System.Decimal? _asFacultyInfoId, System.Decimal? _entMainId, System.String _topicAr, 
			System.String _topicEn, System.Int32? _topicOrder, System.Boolean _optionalFlg, 
			System.Decimal? _seUserId, System.DateTime? _lastDate, System.String _topicContentAr, 
			System.String _topicContentEn)
		{
			EdCourseTopic newEdCourseTopic = new EdCourseTopic();
			newEdCourseTopic.EdCourseTopicId = _edCourseTopicId;
			newEdCourseTopic.EdCourseId = _edCourseId;
			newEdCourseTopic.AsFacultyInfoId = _asFacultyInfoId;
			newEdCourseTopic.EntMainId = _entMainId;
			newEdCourseTopic.TopicAr = _topicAr;
			newEdCourseTopic.TopicEn = _topicEn;
			newEdCourseTopic.TopicOrder = _topicOrder;
			newEdCourseTopic.OptionalFlg = _optionalFlg;
			newEdCourseTopic.SeUserId = _seUserId;
			newEdCourseTopic.LastDate = _lastDate;
			newEdCourseTopic.TopicContentAr = _topicContentAr;
			newEdCourseTopic.TopicContentEn = _topicContentEn;
			return newEdCourseTopic;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdCourseTopicId property. 
		///		مواضيع المقرر الراسي
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"مواضيع المقرر الراسي"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdCourseTopicId
		{
			get
			{
				return this.entityData.EdCourseTopicId; 
			}
			
			set
			{
				if (this.entityData.EdCourseTopicId == value)
					return;
					
				OnColumnChanging(EdCourseTopicColumn.EdCourseTopicId, this.entityData.EdCourseTopicId);
				this.entityData.EdCourseTopicId = value;
				this.EntityId.EdCourseTopicId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseTopicColumn.EdCourseTopicId, this.entityData.EdCourseTopicId);
				OnPropertyChanged("EdCourseTopicId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_COURSE_TOPIC_ID property.
		///		مواضيع المقرر الراسي
		/// </summary>
		/// <remarks>This is the original value of the ED_COURSE_TOPIC_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdCourseTopicId
		{
			get { return this.entityData.OriginalEdCourseTopicId; }
			set { this.entityData.OriginalEdCourseTopicId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCourseId
		{
			get
			{
				return this.entityData.EdCourseId; 
			}
			
			set
			{
				if (this.entityData.EdCourseId == value)
					return;
					
				OnColumnChanging(EdCourseTopicColumn.EdCourseId, this.entityData.EdCourseId);
				this.entityData.EdCourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseTopicColumn.EdCourseId, this.entityData.EdCourseId);
				OnPropertyChanged("EdCourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(EdCourseTopicColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseTopicColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntMainId property. 
		///		القسم
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntMainIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"القسم"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntMainId
		{
			get
			{
				return this.entityData.EntMainId; 
			}
			
			set
			{
				if (this.entityData.EntMainId == value)
					return;
					
				OnColumnChanging(EdCourseTopicColumn.EntMainId, this.entityData.EntMainId);
				this.entityData.EntMainId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseTopicColumn.EntMainId, this.entityData.EntMainId);
				OnPropertyChanged("EntMainId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TopicAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String TopicAr
		{
			get
			{
				return this.entityData.TopicAr; 
			}
			
			set
			{
				if (this.entityData.TopicAr == value)
					return;
					
				OnColumnChanging(EdCourseTopicColumn.TopicAr, this.entityData.TopicAr);
				this.entityData.TopicAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseTopicColumn.TopicAr, this.entityData.TopicAr);
				OnPropertyChanged("TopicAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TopicEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String TopicEn
		{
			get
			{
				return this.entityData.TopicEn; 
			}
			
			set
			{
				if (this.entityData.TopicEn == value)
					return;
					
				OnColumnChanging(EdCourseTopicColumn.TopicEn, this.entityData.TopicEn);
				this.entityData.TopicEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseTopicColumn.TopicEn, this.entityData.TopicEn);
				OnPropertyChanged("TopicEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TopicOrder property. 
		///		ترتيب دراسةالموضوع
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTopicOrderNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"ترتيب دراسةالموضوع"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TopicOrder
		{
			get
			{
				return this.entityData.TopicOrder; 
			}
			
			set
			{
				if (this.entityData.TopicOrder == value)
					return;
					
				OnColumnChanging(EdCourseTopicColumn.TopicOrder, this.entityData.TopicOrder);
				this.entityData.TopicOrder = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseTopicColumn.TopicOrder, this.entityData.TopicOrder);
				OnPropertyChanged("TopicOrder");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OptionalFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean OptionalFlg
		{
			get
			{
				return this.entityData.OptionalFlg; 
			}
			
			set
			{
				if (this.entityData.OptionalFlg == value)
					return;
					
				OnColumnChanging(EdCourseTopicColumn.OptionalFlg, this.entityData.OptionalFlg);
				this.entityData.OptionalFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseTopicColumn.OptionalFlg, this.entityData.OptionalFlg);
				OnPropertyChanged("OptionalFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(EdCourseTopicColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseTopicColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(EdCourseTopicColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseTopicColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TopicContentAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String TopicContentAr
		{
			get
			{
				return this.entityData.TopicContentAr; 
			}
			
			set
			{
				if (this.entityData.TopicContentAr == value)
					return;
					
				OnColumnChanging(EdCourseTopicColumn.TopicContentAr, this.entityData.TopicContentAr);
				this.entityData.TopicContentAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseTopicColumn.TopicContentAr, this.entityData.TopicContentAr);
				OnPropertyChanged("TopicContentAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TopicContentEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String TopicContentEn
		{
			get
			{
				return this.entityData.TopicContentEn; 
			}
			
			set
			{
				if (this.entityData.TopicContentEn == value)
					return;
					
				OnColumnChanging(EdCourseTopicColumn.TopicContentEn, this.entityData.TopicContentEn);
				this.entityData.TopicContentEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseTopicColumn.TopicContentEn, this.entityData.TopicContentEn);
				OnPropertyChanged("TopicContentEn");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return entityData.EdCourseIdSource; }
            set { entityData.EdCourseIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return entityData.EntMainIdSource; }
            set { entityData.EntMainIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of ScSchdlSlot objects
		///	which are related to this object through the relation FK_SC_SCHDL_SLOT_ED_COURSE_TOPIC
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScSchdlSlot> ScSchdlSlotCollection
		{
			get { return entityData.ScSchdlSlotCollection; }
			set { entityData.ScSchdlSlotCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdTopicTchng objects
		///	which are related to this object through the relation FK_ED_TOPIC_TCHNG_ED_COURSE_TOPIC
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdTopicTchng> EdTopicTchngCollection
		{
			get { return entityData.EdTopicTchngCollection; }
			set { entityData.EdTopicTchngCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("TopicAr", "Topic Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TopicAr", "Topic Ar", 150));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("TopicEn", "Topic En"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TopicEn", "Topic En", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_COURSE_TOPIC"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_COURSE_TOPIC_ID", "ED_COURSE_ID", "AS_FACULTY_INFO_ID", "ENT_MAIN_ID", "TOPIC_AR", "TOPIC_EN", "TOPIC_ORDER", "OPTIONAL_FLG", "SE_USER_ID", "LAST_DATE", "TOPIC_CONTENT_AR", "TOPIC_CONTENT_EN"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdCourseTopicEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdCourseTopic) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdCourseTopic>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdCourseTopic);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdCourseTopic Entity 
		///</summary>
		protected virtual EdCourseTopic Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdCourseTopic copy = new EdCourseTopic();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdCourseTopicId = this.EdCourseTopicId;
					copy.OriginalEdCourseTopicId = this.OriginalEdCourseTopicId;
				copy.EdCourseId = this.EdCourseId;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.EntMainId = this.EntMainId;
				copy.TopicAr = this.TopicAr;
				copy.TopicEn = this.TopicEn;
				copy.TopicOrder = this.TopicOrder;
				copy.OptionalFlg = this.OptionalFlg;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
				copy.TopicContentAr = this.TopicContentAr;
				copy.TopicContentEn = this.TopicContentEn;
			
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				copy.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				copy.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				copy.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				copy.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
		
			//deep copy nested objects
			copy.ScSchdlSlotCollection = (TList<ScSchdlSlot>) MakeCopyOf(this.ScSchdlSlotCollection, existingCopies); 
			copy.EdTopicTchngCollection = (TList<EdTopicTchng>) MakeCopyOf(this.EdTopicTchngCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdCourseTopic Entity 
		///</summary>
		public virtual EdCourseTopic Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdCourseTopic Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdCourseTopic DeepCopy()
		{
			return EntityHelper.Clone<EdCourseTopic>(this as EdCourseTopic);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdCourseTopicEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdCourseTopicEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdCourseTopicEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdCourseTopicColumn column)
		{
			switch(column)
			{
					case EdCourseTopicColumn.EdCourseTopicId:
					return entityData.EdCourseTopicId != _originalData.EdCourseTopicId;
					case EdCourseTopicColumn.EdCourseId:
					return entityData.EdCourseId != _originalData.EdCourseId;
					case EdCourseTopicColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case EdCourseTopicColumn.EntMainId:
					return entityData.EntMainId != _originalData.EntMainId;
					case EdCourseTopicColumn.TopicAr:
					return entityData.TopicAr != _originalData.TopicAr;
					case EdCourseTopicColumn.TopicEn:
					return entityData.TopicEn != _originalData.TopicEn;
					case EdCourseTopicColumn.TopicOrder:
					return entityData.TopicOrder != _originalData.TopicOrder;
					case EdCourseTopicColumn.OptionalFlg:
					return entityData.OptionalFlg != _originalData.OptionalFlg;
					case EdCourseTopicColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case EdCourseTopicColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case EdCourseTopicColumn.TopicContentAr:
					return entityData.TopicContentAr != _originalData.TopicContentAr;
					case EdCourseTopicColumn.TopicContentEn:
					return entityData.TopicContentEn != _originalData.TopicContentEn;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdCourseTopicColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdCourseTopicId != _originalData.EdCourseTopicId;
			result = result || entityData.EdCourseId != _originalData.EdCourseId;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.EntMainId != _originalData.EntMainId;
			result = result || entityData.TopicAr != _originalData.TopicAr;
			result = result || entityData.TopicEn != _originalData.TopicEn;
			result = result || entityData.TopicOrder != _originalData.TopicOrder;
			result = result || entityData.OptionalFlg != _originalData.OptionalFlg;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.TopicContentAr != _originalData.TopicContentAr;
			result = result || entityData.TopicContentEn != _originalData.TopicContentEn;
			return result;
		}	
		
		///<summary>
		///  Returns a EdCourseTopic Entity with the original data.
		///</summary>
		public EdCourseTopic GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdCourseTopic(
				_originalData.EdCourseTopicId,
				_originalData.EdCourseId,
				_originalData.AsFacultyInfoId,
				_originalData.EntMainId,
				_originalData.TopicAr,
				_originalData.TopicEn,
				_originalData.TopicOrder,
				_originalData.OptionalFlg,
				_originalData.SeUserId,
				_originalData.LastDate,
				_originalData.TopicContentAr,
				_originalData.TopicContentEn
				);
				
			return (EdCourseTopic)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdCourseTopicBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdCourseTopicBase)
				return ValueEquals(this, (EdCourseTopicBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdCourseTopicBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdCourseTopicId.GetHashCode() ^ 
					this.EdCourseId.GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					((this.EntMainId == null) ? string.Empty : this.EntMainId.ToString()).GetHashCode() ^ 
					this.TopicAr.GetHashCode() ^ 
					this.TopicEn.GetHashCode() ^ 
					((this.TopicOrder == null) ? string.Empty : this.TopicOrder.ToString()).GetHashCode() ^ 
					this.OptionalFlg.GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.TopicContentAr == null) ? string.Empty : this.TopicContentAr.ToString()).GetHashCode() ^ 
					((this.TopicContentEn == null) ? string.Empty : this.TopicContentEn.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdCourseTopicBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdCourseTopicBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdCourseTopicBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdCourseTopicBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdCourseTopicBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdCourseTopicBase Object1, EdCourseTopicBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdCourseTopicId != Object2.EdCourseTopicId)
				equal = false;
			if (Object1.EdCourseId != Object2.EdCourseId)
				equal = false;
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if ( Object1.EntMainId != null && Object2.EntMainId != null )
			{
				if (Object1.EntMainId != Object2.EntMainId)
					equal = false;
			}
			else if (Object1.EntMainId == null ^ Object2.EntMainId == null )
			{
				equal = false;
			}
			if (Object1.TopicAr != Object2.TopicAr)
				equal = false;
			if (Object1.TopicEn != Object2.TopicEn)
				equal = false;
			if ( Object1.TopicOrder != null && Object2.TopicOrder != null )
			{
				if (Object1.TopicOrder != Object2.TopicOrder)
					equal = false;
			}
			else if (Object1.TopicOrder == null ^ Object2.TopicOrder == null )
			{
				equal = false;
			}
			if (Object1.OptionalFlg != Object2.OptionalFlg)
				equal = false;
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.TopicContentAr != null && Object2.TopicContentAr != null )
			{
				if (Object1.TopicContentAr != Object2.TopicContentAr)
					equal = false;
			}
			else if (Object1.TopicContentAr == null ^ Object2.TopicContentAr == null )
			{
				equal = false;
			}
			if ( Object1.TopicContentEn != null && Object2.TopicContentEn != null )
			{
				if (Object1.TopicContentEn != Object2.TopicContentEn)
					equal = false;
			}
			else if (Object1.TopicContentEn == null ^ Object2.TopicContentEn == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdCourseTopicBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdCourseTopicComparer GetComparer()
        {
            return new EdCourseTopicComparer();
        }
        */

        // Comparer delegates back to EdCourseTopic
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdCourseTopic rhs, EdCourseTopicColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdCourseTopicColumn.EdCourseTopicId:
            		return this.EdCourseTopicId.CompareTo(rhs.EdCourseTopicId);
            		
            		                 
            	
            	
            	case EdCourseTopicColumn.EdCourseId:
            		return this.EdCourseId.CompareTo(rhs.EdCourseId);
            		
            		                 
            	
            	
            	case EdCourseTopicColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case EdCourseTopicColumn.EntMainId:
            		return this.EntMainId.Value.CompareTo(rhs.EntMainId.Value);
            		
            		                 
            	
            	
            	case EdCourseTopicColumn.TopicAr:
            		return this.TopicAr.CompareTo(rhs.TopicAr);
            		
            		                 
            	
            	
            	case EdCourseTopicColumn.TopicEn:
            		return this.TopicEn.CompareTo(rhs.TopicEn);
            		
            		                 
            	
            	
            	case EdCourseTopicColumn.TopicOrder:
            		return this.TopicOrder.Value.CompareTo(rhs.TopicOrder.Value);
            		
            		                 
            	
            	
            	case EdCourseTopicColumn.OptionalFlg:
            		return this.OptionalFlg.CompareTo(rhs.OptionalFlg);
            		
            		                 
            	
            	
            	case EdCourseTopicColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case EdCourseTopicColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case EdCourseTopicColumn.TopicContentAr:
            		return this.TopicContentAr.CompareTo(rhs.TopicContentAr);
            		
            		                 
            	
            	
            	case EdCourseTopicColumn.TopicContentEn:
            		return this.TopicContentEn.CompareTo(rhs.TopicContentEn);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdCourseTopicKey> Members
		
		// member variable for the EntityId property
		private EdCourseTopicKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdCourseTopicKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdCourseTopicKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdCourseTopic")
					.Append("|").Append( this.EdCourseTopicId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- EdCourseTopicId: {0}{12}- EdCourseId: {1}{12}- AsFacultyInfoId: {2}{12}- EntMainId: {3}{12}- TopicAr: {4}{12}- TopicEn: {5}{12}- TopicOrder: {6}{12}- OptionalFlg: {7}{12}- SeUserId: {8}{12}- LastDate: {9}{12}- TopicContentAr: {10}{12}- TopicContentEn: {11}{12}{14}", 
				this.EdCourseTopicId,
				this.EdCourseId,
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				(this.EntMainId == null) ? string.Empty : this.EntMainId.ToString(),
				this.TopicAr,
				this.TopicEn,
				(this.TopicOrder == null) ? string.Empty : this.TopicOrder.ToString(),
				this.OptionalFlg,
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.TopicContentAr == null) ? string.Empty : this.TopicContentAr.ToString(),
				(this.TopicContentEn == null) ? string.Empty : this.TopicContentEn.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_COURSE_TOPIC' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdCourseTopicEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_COURSE_TOPIC_ID : مواضيع المقرر الراسي
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_COURSE_TOPIC"</remarks>
		public System.Decimal EdCourseTopicId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdCourseTopicId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_COURSE_ID : 
		/// </summary>
		public System.Decimal		  EdCourseId = 0.0m;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// ENT_MAIN_ID : القسم
		/// </summary>
		public System.Decimal?		  EntMainId = null;
		
		/// <summary>
		/// TOPIC_AR : 
		/// </summary>
		public System.String		  TopicAr = string.Empty;
		
		/// <summary>
		/// TOPIC_EN : 
		/// </summary>
		public System.String		  TopicEn = string.Empty;
		
		/// <summary>
		/// TOPIC_ORDER : ترتيب دراسةالموضوع
		/// </summary>
		public System.Int32?		  TopicOrder = null;
		
		/// <summary>
		/// OPTIONAL_FLG : 
		/// </summary>
		public System.Boolean		  OptionalFlg = false;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// TOPIC_CONTENT_AR : 
		/// </summary>
		public System.String		  TopicContentAr = null;
		
		/// <summary>
		/// TOPIC_CONTENT_EN : 
		/// </summary>
		public System.String		  TopicContentEn = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdCourse _edCourseIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return this._edCourseIdSource; }
            set { this._edCourseIdSource = value; }
      	}
		private EntityMain _entMainIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return this._entMainIdSource; }
            set { this._entMainIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region ScSchdlSlotCollection
		
		private TList<ScSchdlSlot> _scSchdlSlotEdCourseTopicId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scSchdlSlotEdCourseTopicId
		/// </summary>
		
		public TList<ScSchdlSlot> ScSchdlSlotCollection
		{
			get
			{
				if (_scSchdlSlotEdCourseTopicId == null)
				{
				_scSchdlSlotEdCourseTopicId = new TList<ScSchdlSlot>();
				}
	
				return _scSchdlSlotEdCourseTopicId;
			}
			set { _scSchdlSlotEdCourseTopicId = value; }
		}
		
		#endregion

		#region EdTopicTchngCollection
		
		private TList<EdTopicTchng> _edTopicTchngEdCourseTopicId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edTopicTchngEdCourseTopicId
		/// </summary>
		
		public TList<EdTopicTchng> EdTopicTchngCollection
		{
			get
			{
				if (_edTopicTchngEdCourseTopicId == null)
				{
				_edTopicTchngEdCourseTopicId = new TList<EdTopicTchng>();
				}
	
				return _edTopicTchngEdCourseTopicId;
			}
			set { _edTopicTchngEdCourseTopicId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdCourseTopicEntityData _tmp = new EdCourseTopicEntityData();
						
			_tmp.EdCourseTopicId = this.EdCourseTopicId;
			_tmp.OriginalEdCourseTopicId = this.OriginalEdCourseTopicId;
			
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EntMainId = this.EntMainId;
			_tmp.TopicAr = this.TopicAr;
			_tmp.TopicEn = this.TopicEn;
			_tmp.TopicOrder = this.TopicOrder;
			_tmp.OptionalFlg = this.OptionalFlg;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.TopicContentAr = this.TopicContentAr;
			_tmp.TopicContentEn = this.TopicContentEn;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdCourseIdSource != null)
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource) as EdCourse;
			if (this.EntMainIdSource != null)
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource) as EntityMain;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._scSchdlSlotEdCourseTopicId != null)
				_tmp.ScSchdlSlotCollection = (TList<ScSchdlSlot>) MakeCopyOf(this.ScSchdlSlotCollection); 
			if (this._edTopicTchngEdCourseTopicId != null)
				_tmp.EdTopicTchngCollection = (TList<EdTopicTchng>) MakeCopyOf(this.EdTopicTchngCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdCourseTopicEntityData _tmp = new EdCourseTopicEntityData();
						
			_tmp.EdCourseTopicId = this.EdCourseTopicId;
			_tmp.OriginalEdCourseTopicId = this.OriginalEdCourseTopicId;
			
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EntMainId = this.EntMainId;
			_tmp.TopicAr = this.TopicAr;
			_tmp.TopicEn = this.TopicEn;
			_tmp.TopicOrder = this.TopicOrder;
			_tmp.OptionalFlg = this.OptionalFlg;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.TopicContentAr = this.TopicContentAr;
			_tmp.TopicContentEn = this.TopicContentEn;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				_tmp.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				_tmp.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.ScSchdlSlotCollection = (TList<ScSchdlSlot>) MakeCopyOf(this.ScSchdlSlotCollection, existingCopies); 
			_tmp.EdTopicTchngCollection = (TList<EdTopicTchng>) MakeCopyOf(this.EdTopicTchngCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCourseTopicColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdCourseTopicColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCourseTopicColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdCourseTopicColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCourseTopicColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdCourseTopicColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdCourseTopicEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdCourseTopicEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCourseTopicColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdCourseTopicColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdCourseTopicEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdCourseTopicEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdCourseTopicEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdCourseTopic"/> object.
	/// </remarks>
	public class EdCourseTopicEventArgs : System.EventArgs
	{
		private EdCourseTopicColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdCourseTopicEventArgs class.
		///</summary>
		public EdCourseTopicEventArgs(EdCourseTopicColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdCourseTopicEventArgs class.
		///</summary>
		public EdCourseTopicEventArgs(EdCourseTopicColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdCourseTopicColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdCourseTopicColumn" />
		public EdCourseTopicColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdCourseTopic related events.
	///</summary>
	public delegate void EdCourseTopicEventHandler(object sender, EdCourseTopicEventArgs e);
	
	#region EdCourseTopicComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdCourseTopicComparer : System.Collections.Generic.IComparer<EdCourseTopic>
	{
		EdCourseTopicColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdCourseTopicComparer"/> class.
        /// </summary>
		public EdCourseTopicComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdCourseTopicComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdCourseTopicComparer(EdCourseTopicColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdCourseTopic"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdCourseTopic"/> to compare.</param>
        /// <param name="b">The second <c>EdCourseTopic</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdCourseTopic a, EdCourseTopic b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdCourseTopic entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdCourseTopic a, EdCourseTopic b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdCourseTopicColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdCourseTopicKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdCourseTopic"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdCourseTopicKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdCourseTopicKey class.
		/// </summary>
		public EdCourseTopicKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdCourseTopicKey class.
		/// </summary>
		public EdCourseTopicKey(EdCourseTopicBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdCourseTopicId = entity.EdCourseTopicId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdCourseTopicKey class.
		/// </summary>
		public EdCourseTopicKey(System.Decimal _edCourseTopicId)
		{
			#region Init Properties

			this.EdCourseTopicId = _edCourseTopicId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdCourseTopicBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdCourseTopicBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdCourseTopicId property
		private System.Decimal _edCourseTopicId;
		
		/// <summary>
		/// Gets or sets the EdCourseTopicId property.
		/// </summary>
		public System.Decimal EdCourseTopicId
		{
			get { return _edCourseTopicId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdCourseTopicId = value;
				
				_edCourseTopicId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdCourseTopicId = ( values["EdCourseTopicId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdCourseTopicId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdCourseTopicId", EdCourseTopicId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdCourseTopicId: {0}{1}",
								EdCourseTopicId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdCourseTopicColumn Enum
	
	/// <summary>
	/// Enumerate the EdCourseTopic columns.
	/// </summary>
	[Serializable]
	public enum EdCourseTopicColumn : int
	{
		/// <summary>
		/// EdCourseTopicId : مواضيع المقرر الراسي
		/// </summary>
		[EnumTextValue("ED_COURSE_TOPIC_ID")]
		[ColumnEnum("ED_COURSE_TOPIC_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdCourseTopicId = 1,
		/// <summary>
		/// EdCourseId : 
		/// </summary>
		[EnumTextValue("ED_COURSE_ID")]
		[ColumnEnum("ED_COURSE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCourseId = 2,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 3,
		/// <summary>
		/// EntMainId : القسم
		/// </summary>
		[EnumTextValue("ENT_MAIN_ID")]
		[ColumnEnum("ENT_MAIN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntMainId = 4,
		/// <summary>
		/// TopicAr : 
		/// </summary>
		[EnumTextValue("TOPIC_AR")]
		[ColumnEnum("TOPIC_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 150)]
		TopicAr = 5,
		/// <summary>
		/// TopicEn : 
		/// </summary>
		[EnumTextValue("TOPIC_EN")]
		[ColumnEnum("TOPIC_EN", typeof(System.String), System.Data.DbType.String, false, false, false, 150)]
		TopicEn = 6,
		/// <summary>
		/// TopicOrder : ترتيب دراسةالموضوع
		/// </summary>
		[EnumTextValue("TOPIC_ORDER")]
		[ColumnEnum("TOPIC_ORDER", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TopicOrder = 7,
		/// <summary>
		/// OptionalFlg : 
		/// </summary>
		[EnumTextValue("OPTIONAL_FLG")]
		[ColumnEnum("OPTIONAL_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		OptionalFlg = 8,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 9,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 10,
		/// <summary>
		/// TopicContentAr : 
		/// </summary>
		[EnumTextValue("TOPIC_CONTENT_AR")]
		[ColumnEnum("TOPIC_CONTENT_AR", typeof(System.String), System.Data.DbType.String, false, false, true)]
		TopicContentAr = 11,
		/// <summary>
		/// TopicContentEn : 
		/// </summary>
		[EnumTextValue("TOPIC_CONTENT_EN")]
		[ColumnEnum("TOPIC_CONTENT_EN", typeof(System.String), System.Data.DbType.String, false, false, true)]
		TopicContentEn = 12
	}//End enum

	#endregion EdCourseTopicColumn Enum

} // end namespace
