
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SaExtDel.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SA_EXT_DEL' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SaExtDelBase : EntityBase, ISaExtDel, IEntityId<SaExtDelKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SaExtDelEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SaExtDelEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SaExtDelEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SaExtDel> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaExtDelEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaExtDelEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SaExtDelBase"/> instance.
		///</summary>
		public SaExtDelBase()
		{
			this.entityData = new SaExtDelEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SaExtDelBase"/> instance.
		///</summary>
		///<param name="_saExtDelId">او المنتدب اليها الجهة المعار منها</param>
		///<param name="_delFlg">مؤشر اعارة- انتداب</param>
		///<param name="_saStfMemberId">مسلسل عضو هيئة التدريس</param>
		///<param name="_startDate">من فترة</param>
		///<param name="_endDate">الى فترة</param>
		///<param name="_saCodeOrgId">الجهة المعار منها او المنتدب  اليها</param>
		///<param name="_orgNameAr"></param>
		///<param name="_orgNameEn"></param>
		///<param name="_isOrgUni"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_asNodeId"></param>
		///<param name="_isDelTermin"></param>
		public SaExtDelBase(System.Decimal _saExtDelId, System.Decimal _delFlg, System.Decimal _saStfMemberId, 
			System.DateTime _startDate, System.DateTime? _endDate, System.Decimal? _saCodeOrgId, System.String _orgNameAr, 
			System.String _orgNameEn, System.Decimal _isOrgUni, System.Decimal? _asFacultyInfoId, System.Decimal? _asNodeId, 
			System.Decimal _isDelTermin)
		{
			this.entityData = new SaExtDelEntityData();
			this.backupData = null;

			this.SaExtDelId = _saExtDelId;
			this.DelFlg = _delFlg;
			this.SaStfMemberId = _saStfMemberId;
			this.StartDate = _startDate;
			this.EndDate = _endDate;
			this.SaCodeOrgId = _saCodeOrgId;
			this.OrgNameAr = _orgNameAr;
			this.OrgNameEn = _orgNameEn;
			this.IsOrgUni = _isOrgUni;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.AsNodeId = _asNodeId;
			this.IsDelTermin = _isDelTermin;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SaExtDel"/> instance.
		///</summary>
		///<param name="_saExtDelId">او المنتدب اليها الجهة المعار منها</param>
		///<param name="_delFlg">مؤشر اعارة- انتداب</param>
		///<param name="_saStfMemberId">مسلسل عضو هيئة التدريس</param>
		///<param name="_startDate">من فترة</param>
		///<param name="_endDate">الى فترة</param>
		///<param name="_saCodeOrgId">الجهة المعار منها او المنتدب  اليها</param>
		///<param name="_orgNameAr"></param>
		///<param name="_orgNameEn"></param>
		///<param name="_isOrgUni"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_asNodeId"></param>
		///<param name="_isDelTermin"></param>
		public static SaExtDel CreateSaExtDel(System.Decimal _saExtDelId, System.Decimal _delFlg, System.Decimal _saStfMemberId, 
			System.DateTime _startDate, System.DateTime? _endDate, System.Decimal? _saCodeOrgId, System.String _orgNameAr, 
			System.String _orgNameEn, System.Decimal _isOrgUni, System.Decimal? _asFacultyInfoId, System.Decimal? _asNodeId, 
			System.Decimal _isDelTermin)
		{
			SaExtDel newSaExtDel = new SaExtDel();
			newSaExtDel.SaExtDelId = _saExtDelId;
			newSaExtDel.DelFlg = _delFlg;
			newSaExtDel.SaStfMemberId = _saStfMemberId;
			newSaExtDel.StartDate = _startDate;
			newSaExtDel.EndDate = _endDate;
			newSaExtDel.SaCodeOrgId = _saCodeOrgId;
			newSaExtDel.OrgNameAr = _orgNameAr;
			newSaExtDel.OrgNameEn = _orgNameEn;
			newSaExtDel.IsOrgUni = _isOrgUni;
			newSaExtDel.AsFacultyInfoId = _asFacultyInfoId;
			newSaExtDel.AsNodeId = _asNodeId;
			newSaExtDel.IsDelTermin = _isDelTermin;
			return newSaExtDel;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SaExtDelId property. 
		///		او المنتدب اليها الجهة المعار منها
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"او المنتدب اليها الجهة المعار منها"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SaExtDelId
		{
			get
			{
				return this.entityData.SaExtDelId; 
			}
			
			set
			{
				if (this.entityData.SaExtDelId == value)
					return;
					
				OnColumnChanging(SaExtDelColumn.SaExtDelId, this.entityData.SaExtDelId);
				this.entityData.SaExtDelId = value;
				this.EntityId.SaExtDelId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaExtDelColumn.SaExtDelId, this.entityData.SaExtDelId);
				OnPropertyChanged("SaExtDelId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SA_EXT_DEL_ID property.
		///		او المنتدب اليها الجهة المعار منها
		/// </summary>
		/// <remarks>This is the original value of the SA_EXT_DEL_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSaExtDelId
		{
			get { return this.entityData.OriginalSaExtDelId; }
			set { this.entityData.OriginalSaExtDelId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the DelFlg property. 
		///		مؤشر اعارة- انتداب
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"مؤشر اعارة- انتداب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal DelFlg
		{
			get
			{
				return this.entityData.DelFlg; 
			}
			
			set
			{
				if (this.entityData.DelFlg == value)
					return;
					
				OnColumnChanging(SaExtDelColumn.DelFlg, this.entityData.DelFlg);
				this.entityData.DelFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaExtDelColumn.DelFlg, this.entityData.DelFlg);
				OnPropertyChanged("DelFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaStfMemberId property. 
		///		مسلسل عضو هيئة التدريس
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"مسلسل عضو هيئة التدريس"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaStfMemberId
		{
			get
			{
				return this.entityData.SaStfMemberId; 
			}
			
			set
			{
				if (this.entityData.SaStfMemberId == value)
					return;
					
				OnColumnChanging(SaExtDelColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				this.entityData.SaStfMemberId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaExtDelColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				OnPropertyChanged("SaStfMemberId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StartDate property. 
		///		من فترة
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"من فترة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime StartDate
		{
			get
			{
				return this.entityData.StartDate; 
			}
			
			set
			{
				if (this.entityData.StartDate == value)
					return;
					
				OnColumnChanging(SaExtDelColumn.StartDate, this.entityData.StartDate);
				this.entityData.StartDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaExtDelColumn.StartDate, this.entityData.StartDate);
				OnPropertyChanged("StartDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EndDate property. 
		///		الى فترة
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsEndDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"الى فترة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? EndDate
		{
			get
			{
				return this.entityData.EndDate; 
			}
			
			set
			{
				if (this.entityData.EndDate == value)
					return;
					
				OnColumnChanging(SaExtDelColumn.EndDate, this.entityData.EndDate);
				this.entityData.EndDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaExtDelColumn.EndDate, this.entityData.EndDate);
				OnPropertyChanged("EndDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaCodeOrgId property. 
		///		الجهة المعار منها او المنتدب  اليها
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSaCodeOrgIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"الجهة المعار منها او المنتدب  اليها"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SaCodeOrgId
		{
			get
			{
				return this.entityData.SaCodeOrgId; 
			}
			
			set
			{
				if (this.entityData.SaCodeOrgId == value)
					return;
					
				OnColumnChanging(SaExtDelColumn.SaCodeOrgId, this.entityData.SaCodeOrgId);
				this.entityData.SaCodeOrgId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaExtDelColumn.SaCodeOrgId, this.entityData.SaCodeOrgId);
				OnPropertyChanged("SaCodeOrgId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrgNameAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String OrgNameAr
		{
			get
			{
				return this.entityData.OrgNameAr; 
			}
			
			set
			{
				if (this.entityData.OrgNameAr == value)
					return;
					
				OnColumnChanging(SaExtDelColumn.OrgNameAr, this.entityData.OrgNameAr);
				this.entityData.OrgNameAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaExtDelColumn.OrgNameAr, this.entityData.OrgNameAr);
				OnPropertyChanged("OrgNameAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrgNameEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String OrgNameEn
		{
			get
			{
				return this.entityData.OrgNameEn; 
			}
			
			set
			{
				if (this.entityData.OrgNameEn == value)
					return;
					
				OnColumnChanging(SaExtDelColumn.OrgNameEn, this.entityData.OrgNameEn);
				this.entityData.OrgNameEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaExtDelColumn.OrgNameEn, this.entityData.OrgNameEn);
				OnPropertyChanged("OrgNameEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsOrgUni property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsOrgUni
		{
			get
			{
				return this.entityData.IsOrgUni; 
			}
			
			set
			{
				if (this.entityData.IsOrgUni == value)
					return;
					
				OnColumnChanging(SaExtDelColumn.IsOrgUni, this.entityData.IsOrgUni);
				this.entityData.IsOrgUni = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaExtDelColumn.IsOrgUni, this.entityData.IsOrgUni);
				OnPropertyChanged("IsOrgUni");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(SaExtDelColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaExtDelColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsNodeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsNodeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsNodeId
		{
			get
			{
				return this.entityData.AsNodeId; 
			}
			
			set
			{
				if (this.entityData.AsNodeId == value)
					return;
					
				OnColumnChanging(SaExtDelColumn.AsNodeId, this.entityData.AsNodeId);
				this.entityData.AsNodeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaExtDelColumn.AsNodeId, this.entityData.AsNodeId);
				OnPropertyChanged("AsNodeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsDelTermin property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsDelTermin
		{
			get
			{
				return this.entityData.IsDelTermin; 
			}
			
			set
			{
				if (this.entityData.IsDelTermin == value)
					return;
					
				OnColumnChanging(SaExtDelColumn.IsDelTermin, this.entityData.IsDelTermin);
				this.entityData.IsDelTermin = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaExtDelColumn.IsDelTermin, this.entityData.IsDelTermin);
				OnPropertyChanged("IsDelTermin");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeOrg"/>.
		/// </summary>
		/// <value>The source SaCodeOrg for SaCodeOrgId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaCodeOrg SaCodeOrgIdSource
      	{
            get { return entityData.SaCodeOrgIdSource; }
            set { entityData.SaCodeOrgIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for AsNodeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain AsNodeIdSource
      	{
            get { return entityData.AsNodeIdSource; }
            set { entityData.AsNodeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return entityData.SaStfMemberIdSource; }
            set { entityData.SaStfMemberIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("OrgNameAr", "Org Name Ar", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("OrgNameEn", "Org Name En", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SA_EXT_DEL"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SA_EXT_DEL_ID", "DEL_FLG", "SA_STF_MEMBER_ID", "START_DATE", "END_DATE", "SA_CODE_ORG_ID", "ORG_NAME_AR", "ORG_NAME_EN", "IS_ORG_UNI", "AS_FACULTY_INFO_ID", "AS_NODE_ID", "IS_DEL_TERMIN"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SaExtDelEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SaExtDel) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SaExtDel>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SaExtDel);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SaExtDel Entity 
		///</summary>
		protected virtual SaExtDel Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SaExtDel copy = new SaExtDel();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SaExtDelId = this.SaExtDelId;
					copy.OriginalSaExtDelId = this.OriginalSaExtDelId;
				copy.DelFlg = this.DelFlg;
				copy.SaStfMemberId = this.SaStfMemberId;
				copy.StartDate = this.StartDate;
				copy.EndDate = this.EndDate;
				copy.SaCodeOrgId = this.SaCodeOrgId;
				copy.OrgNameAr = this.OrgNameAr;
				copy.OrgNameEn = this.OrgNameEn;
				copy.IsOrgUni = this.IsOrgUni;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.AsNodeId = this.AsNodeId;
				copy.IsDelTermin = this.IsDelTermin;
			
			if (this.SaCodeOrgIdSource != null && existingCopies.Contains(this.SaCodeOrgIdSource))
				copy.SaCodeOrgIdSource = existingCopies[this.SaCodeOrgIdSource] as SaCodeOrg;
			else
				copy.SaCodeOrgIdSource = MakeCopyOf(this.SaCodeOrgIdSource, existingCopies) as SaCodeOrg;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.AsNodeIdSource != null && existingCopies.Contains(this.AsNodeIdSource))
				copy.AsNodeIdSource = existingCopies[this.AsNodeIdSource] as EntityMain;
			else
				copy.AsNodeIdSource = MakeCopyOf(this.AsNodeIdSource, existingCopies) as EntityMain;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				copy.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				copy.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SaExtDel Entity 
		///</summary>
		public virtual SaExtDel Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SaExtDel Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SaExtDel DeepCopy()
		{
			return EntityHelper.Clone<SaExtDel>(this as SaExtDel);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SaExtDelEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SaExtDelEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SaExtDelEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SaExtDelColumn column)
		{
			switch(column)
			{
					case SaExtDelColumn.SaExtDelId:
					return entityData.SaExtDelId != _originalData.SaExtDelId;
					case SaExtDelColumn.DelFlg:
					return entityData.DelFlg != _originalData.DelFlg;
					case SaExtDelColumn.SaStfMemberId:
					return entityData.SaStfMemberId != _originalData.SaStfMemberId;
					case SaExtDelColumn.StartDate:
					return entityData.StartDate != _originalData.StartDate;
					case SaExtDelColumn.EndDate:
					return entityData.EndDate != _originalData.EndDate;
					case SaExtDelColumn.SaCodeOrgId:
					return entityData.SaCodeOrgId != _originalData.SaCodeOrgId;
					case SaExtDelColumn.OrgNameAr:
					return entityData.OrgNameAr != _originalData.OrgNameAr;
					case SaExtDelColumn.OrgNameEn:
					return entityData.OrgNameEn != _originalData.OrgNameEn;
					case SaExtDelColumn.IsOrgUni:
					return entityData.IsOrgUni != _originalData.IsOrgUni;
					case SaExtDelColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case SaExtDelColumn.AsNodeId:
					return entityData.AsNodeId != _originalData.AsNodeId;
					case SaExtDelColumn.IsDelTermin:
					return entityData.IsDelTermin != _originalData.IsDelTermin;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SaExtDelColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SaExtDelId != _originalData.SaExtDelId;
			result = result || entityData.DelFlg != _originalData.DelFlg;
			result = result || entityData.SaStfMemberId != _originalData.SaStfMemberId;
			result = result || entityData.StartDate != _originalData.StartDate;
			result = result || entityData.EndDate != _originalData.EndDate;
			result = result || entityData.SaCodeOrgId != _originalData.SaCodeOrgId;
			result = result || entityData.OrgNameAr != _originalData.OrgNameAr;
			result = result || entityData.OrgNameEn != _originalData.OrgNameEn;
			result = result || entityData.IsOrgUni != _originalData.IsOrgUni;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.AsNodeId != _originalData.AsNodeId;
			result = result || entityData.IsDelTermin != _originalData.IsDelTermin;
			return result;
		}	
		
		///<summary>
		///  Returns a SaExtDel Entity with the original data.
		///</summary>
		public SaExtDel GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSaExtDel(
				_originalData.SaExtDelId,
				_originalData.DelFlg,
				_originalData.SaStfMemberId,
				_originalData.StartDate,
				_originalData.EndDate,
				_originalData.SaCodeOrgId,
				_originalData.OrgNameAr,
				_originalData.OrgNameEn,
				_originalData.IsOrgUni,
				_originalData.AsFacultyInfoId,
				_originalData.AsNodeId,
				_originalData.IsDelTermin
				);
				
			return (SaExtDel)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SaExtDelBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SaExtDelBase)
				return ValueEquals(this, (SaExtDelBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SaExtDelBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SaExtDelId.GetHashCode() ^ 
					this.DelFlg.GetHashCode() ^ 
					this.SaStfMemberId.GetHashCode() ^ 
					this.StartDate.GetHashCode() ^ 
					((this.EndDate == null) ? string.Empty : this.EndDate.ToString()).GetHashCode() ^ 
					((this.SaCodeOrgId == null) ? string.Empty : this.SaCodeOrgId.ToString()).GetHashCode() ^ 
					((this.OrgNameAr == null) ? string.Empty : this.OrgNameAr.ToString()).GetHashCode() ^ 
					((this.OrgNameEn == null) ? string.Empty : this.OrgNameEn.ToString()).GetHashCode() ^ 
					this.IsOrgUni.GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					((this.AsNodeId == null) ? string.Empty : this.AsNodeId.ToString()).GetHashCode() ^ 
					this.IsDelTermin.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SaExtDelBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SaExtDelBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SaExtDelBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SaExtDelBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SaExtDelBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SaExtDelBase Object1, SaExtDelBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SaExtDelId != Object2.SaExtDelId)
				equal = false;
			if (Object1.DelFlg != Object2.DelFlg)
				equal = false;
			if (Object1.SaStfMemberId != Object2.SaStfMemberId)
				equal = false;
			if (Object1.StartDate != Object2.StartDate)
				equal = false;
			if ( Object1.EndDate != null && Object2.EndDate != null )
			{
				if (Object1.EndDate != Object2.EndDate)
					equal = false;
			}
			else if (Object1.EndDate == null ^ Object2.EndDate == null )
			{
				equal = false;
			}
			if ( Object1.SaCodeOrgId != null && Object2.SaCodeOrgId != null )
			{
				if (Object1.SaCodeOrgId != Object2.SaCodeOrgId)
					equal = false;
			}
			else if (Object1.SaCodeOrgId == null ^ Object2.SaCodeOrgId == null )
			{
				equal = false;
			}
			if ( Object1.OrgNameAr != null && Object2.OrgNameAr != null )
			{
				if (Object1.OrgNameAr != Object2.OrgNameAr)
					equal = false;
			}
			else if (Object1.OrgNameAr == null ^ Object2.OrgNameAr == null )
			{
				equal = false;
			}
			if ( Object1.OrgNameEn != null && Object2.OrgNameEn != null )
			{
				if (Object1.OrgNameEn != Object2.OrgNameEn)
					equal = false;
			}
			else if (Object1.OrgNameEn == null ^ Object2.OrgNameEn == null )
			{
				equal = false;
			}
			if (Object1.IsOrgUni != Object2.IsOrgUni)
				equal = false;
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if ( Object1.AsNodeId != null && Object2.AsNodeId != null )
			{
				if (Object1.AsNodeId != Object2.AsNodeId)
					equal = false;
			}
			else if (Object1.AsNodeId == null ^ Object2.AsNodeId == null )
			{
				equal = false;
			}
			if (Object1.IsDelTermin != Object2.IsDelTermin)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SaExtDelBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SaExtDelComparer GetComparer()
        {
            return new SaExtDelComparer();
        }
        */

        // Comparer delegates back to SaExtDel
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SaExtDel rhs, SaExtDelColumn which)
        {
            switch (which)
            {
            	
            	
            	case SaExtDelColumn.SaExtDelId:
            		return this.SaExtDelId.CompareTo(rhs.SaExtDelId);
            		
            		                 
            	
            	
            	case SaExtDelColumn.DelFlg:
            		return this.DelFlg.CompareTo(rhs.DelFlg);
            		
            		                 
            	
            	
            	case SaExtDelColumn.SaStfMemberId:
            		return this.SaStfMemberId.CompareTo(rhs.SaStfMemberId);
            		
            		                 
            	
            	
            	case SaExtDelColumn.StartDate:
            		return this.StartDate.CompareTo(rhs.StartDate);
            		
            		                 
            	
            	
            	case SaExtDelColumn.EndDate:
            		return this.EndDate.Value.CompareTo(rhs.EndDate.Value);
            		
            		                 
            	
            	
            	case SaExtDelColumn.SaCodeOrgId:
            		return this.SaCodeOrgId.Value.CompareTo(rhs.SaCodeOrgId.Value);
            		
            		                 
            	
            	
            	case SaExtDelColumn.OrgNameAr:
            		return this.OrgNameAr.CompareTo(rhs.OrgNameAr);
            		
            		                 
            	
            	
            	case SaExtDelColumn.OrgNameEn:
            		return this.OrgNameEn.CompareTo(rhs.OrgNameEn);
            		
            		                 
            	
            	
            	case SaExtDelColumn.IsOrgUni:
            		return this.IsOrgUni.CompareTo(rhs.IsOrgUni);
            		
            		                 
            	
            	
            	case SaExtDelColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case SaExtDelColumn.AsNodeId:
            		return this.AsNodeId.Value.CompareTo(rhs.AsNodeId.Value);
            		
            		                 
            	
            	
            	case SaExtDelColumn.IsDelTermin:
            		return this.IsDelTermin.CompareTo(rhs.IsDelTermin);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SaExtDelKey> Members
		
		// member variable for the EntityId property
		private SaExtDelKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SaExtDelKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SaExtDelKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SaExtDel")
					.Append("|").Append( this.SaExtDelId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- SaExtDelId: {0}{12}- DelFlg: {1}{12}- SaStfMemberId: {2}{12}- StartDate: {3}{12}- EndDate: {4}{12}- SaCodeOrgId: {5}{12}- OrgNameAr: {6}{12}- OrgNameEn: {7}{12}- IsOrgUni: {8}{12}- AsFacultyInfoId: {9}{12}- AsNodeId: {10}{12}- IsDelTermin: {11}{12}{14}", 
				this.SaExtDelId,
				this.DelFlg,
				this.SaStfMemberId,
				this.StartDate,
				(this.EndDate == null) ? string.Empty : this.EndDate.ToString(),
				(this.SaCodeOrgId == null) ? string.Empty : this.SaCodeOrgId.ToString(),
				(this.OrgNameAr == null) ? string.Empty : this.OrgNameAr.ToString(),
				(this.OrgNameEn == null) ? string.Empty : this.OrgNameEn.ToString(),
				this.IsOrgUni,
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				(this.AsNodeId == null) ? string.Empty : this.AsNodeId.ToString(),
				this.IsDelTermin,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SA_EXT_DEL' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SaExtDelEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SA_EXT_DEL_ID : او المنتدب اليها الجهة المعار منها
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SA_EXT_DEL"</remarks>
		public System.Decimal SaExtDelId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSaExtDelId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// DEL_FLG : مؤشر اعارة- انتداب
		/// </summary>
		public System.Decimal		  DelFlg = 0.0m;
		
		/// <summary>
		/// SA_STF_MEMBER_ID : مسلسل عضو هيئة التدريس
		/// </summary>
		public System.Decimal		  SaStfMemberId = 0.0m;
		
		/// <summary>
		/// START_DATE : من فترة
		/// </summary>
		public System.DateTime		  StartDate = DateTime.MinValue;
		
		/// <summary>
		/// END_DATE : الى فترة
		/// </summary>
		public System.DateTime?		  EndDate = null;
		
		/// <summary>
		/// SA_CODE_ORG_ID : الجهة المعار منها او المنتدب  اليها
		/// </summary>
		public System.Decimal?		  SaCodeOrgId = null;
		
		/// <summary>
		/// ORG_NAME_AR : 
		/// </summary>
		public System.String		  OrgNameAr = null;
		
		/// <summary>
		/// ORG_NAME_EN : 
		/// </summary>
		public System.String		  OrgNameEn = null;
		
		/// <summary>
		/// IS_ORG_UNI : 
		/// </summary>
		public System.Decimal		  IsOrgUni = 0.0m;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// AS_NODE_ID : 
		/// </summary>
		public System.Decimal?		  AsNodeId = null;
		
		/// <summary>
		/// IS_DEL_TERMIN : 
		/// </summary>
		public System.Decimal		  IsDelTermin = 0.0m;
		#endregion
			
		#region Source Foreign Key Property
				
		private SaCodeOrg _saCodeOrgIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeOrg"/>.
		/// </summary>
		/// <value>The source SaCodeOrg for SaCodeOrgId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaCodeOrg SaCodeOrgIdSource
      	{
            get { return this._saCodeOrgIdSource; }
            set { this._saCodeOrgIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EntityMain _asNodeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for AsNodeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain AsNodeIdSource
      	{
            get { return this._asNodeIdSource; }
            set { this._asNodeIdSource = value; }
      	}
		private SaStfMember _saStfMemberIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return this._saStfMemberIdSource; }
            set { this._saStfMemberIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SaExtDelEntityData _tmp = new SaExtDelEntityData();
						
			_tmp.SaExtDelId = this.SaExtDelId;
			_tmp.OriginalSaExtDelId = this.OriginalSaExtDelId;
			
			_tmp.DelFlg = this.DelFlg;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.StartDate = this.StartDate;
			_tmp.EndDate = this.EndDate;
			_tmp.SaCodeOrgId = this.SaCodeOrgId;
			_tmp.OrgNameAr = this.OrgNameAr;
			_tmp.OrgNameEn = this.OrgNameEn;
			_tmp.IsOrgUni = this.IsOrgUni;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.AsNodeId = this.AsNodeId;
			_tmp.IsDelTermin = this.IsDelTermin;
			
			#region Source Parent Composite Entities
			if (this.SaCodeOrgIdSource != null)
				_tmp.SaCodeOrgIdSource = MakeCopyOf(this.SaCodeOrgIdSource) as SaCodeOrg;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.AsNodeIdSource != null)
				_tmp.AsNodeIdSource = MakeCopyOf(this.AsNodeIdSource) as EntityMain;
			if (this.SaStfMemberIdSource != null)
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource) as SaStfMember;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SaExtDelEntityData _tmp = new SaExtDelEntityData();
						
			_tmp.SaExtDelId = this.SaExtDelId;
			_tmp.OriginalSaExtDelId = this.OriginalSaExtDelId;
			
			_tmp.DelFlg = this.DelFlg;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.StartDate = this.StartDate;
			_tmp.EndDate = this.EndDate;
			_tmp.SaCodeOrgId = this.SaCodeOrgId;
			_tmp.OrgNameAr = this.OrgNameAr;
			_tmp.OrgNameEn = this.OrgNameEn;
			_tmp.IsOrgUni = this.IsOrgUni;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.AsNodeId = this.AsNodeId;
			_tmp.IsDelTermin = this.IsDelTermin;
			
			#region Source Parent Composite Entities
			if (this.SaCodeOrgIdSource != null && existingCopies.Contains(this.SaCodeOrgIdSource))
				_tmp.SaCodeOrgIdSource = existingCopies[this.SaCodeOrgIdSource] as SaCodeOrg;
			else
				_tmp.SaCodeOrgIdSource = MakeCopyOf(this.SaCodeOrgIdSource, existingCopies) as SaCodeOrg;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.AsNodeIdSource != null && existingCopies.Contains(this.AsNodeIdSource))
				_tmp.AsNodeIdSource = existingCopies[this.AsNodeIdSource] as EntityMain;
			else
				_tmp.AsNodeIdSource = MakeCopyOf(this.AsNodeIdSource, existingCopies) as EntityMain;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				_tmp.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaExtDelColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SaExtDelColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaExtDelColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SaExtDelColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaExtDelColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SaExtDelColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SaExtDelEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SaExtDelEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaExtDelColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SaExtDelColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SaExtDelEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SaExtDelEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SaExtDelEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SaExtDel"/> object.
	/// </remarks>
	public class SaExtDelEventArgs : System.EventArgs
	{
		private SaExtDelColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SaExtDelEventArgs class.
		///</summary>
		public SaExtDelEventArgs(SaExtDelColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SaExtDelEventArgs class.
		///</summary>
		public SaExtDelEventArgs(SaExtDelColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SaExtDelColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SaExtDelColumn" />
		public SaExtDelColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SaExtDel related events.
	///</summary>
	public delegate void SaExtDelEventHandler(object sender, SaExtDelEventArgs e);
	
	#region SaExtDelComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SaExtDelComparer : System.Collections.Generic.IComparer<SaExtDel>
	{
		SaExtDelColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SaExtDelComparer"/> class.
        /// </summary>
		public SaExtDelComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SaExtDelComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SaExtDelComparer(SaExtDelColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SaExtDel"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SaExtDel"/> to compare.</param>
        /// <param name="b">The second <c>SaExtDel</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SaExtDel a, SaExtDel b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SaExtDel entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SaExtDel a, SaExtDel b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SaExtDelColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SaExtDelKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SaExtDel"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SaExtDelKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SaExtDelKey class.
		/// </summary>
		public SaExtDelKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SaExtDelKey class.
		/// </summary>
		public SaExtDelKey(SaExtDelBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SaExtDelId = entity.SaExtDelId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SaExtDelKey class.
		/// </summary>
		public SaExtDelKey(System.Decimal _saExtDelId)
		{
			#region Init Properties

			this.SaExtDelId = _saExtDelId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SaExtDelBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SaExtDelBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SaExtDelId property
		private System.Decimal _saExtDelId;
		
		/// <summary>
		/// Gets or sets the SaExtDelId property.
		/// </summary>
		public System.Decimal SaExtDelId
		{
			get { return _saExtDelId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SaExtDelId = value;
				
				_saExtDelId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SaExtDelId = ( values["SaExtDelId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SaExtDelId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SaExtDelId", SaExtDelId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SaExtDelId: {0}{1}",
								SaExtDelId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SaExtDelColumn Enum
	
	/// <summary>
	/// Enumerate the SaExtDel columns.
	/// </summary>
	[Serializable]
	public enum SaExtDelColumn : int
	{
		/// <summary>
		/// SaExtDelId : او المنتدب اليها الجهة المعار منها
		/// </summary>
		[EnumTextValue("SA_EXT_DEL_ID")]
		[ColumnEnum("SA_EXT_DEL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SaExtDelId = 1,
		/// <summary>
		/// DelFlg : مؤشر اعارة- انتداب
		/// </summary>
		[EnumTextValue("DEL_FLG")]
		[ColumnEnum("DEL_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		DelFlg = 2,
		/// <summary>
		/// SaStfMemberId : مسلسل عضو هيئة التدريس
		/// </summary>
		[EnumTextValue("SA_STF_MEMBER_ID")]
		[ColumnEnum("SA_STF_MEMBER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaStfMemberId = 3,
		/// <summary>
		/// StartDate : من فترة
		/// </summary>
		[EnumTextValue("START_DATE")]
		[ColumnEnum("START_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		StartDate = 4,
		/// <summary>
		/// EndDate : الى فترة
		/// </summary>
		[EnumTextValue("END_DATE")]
		[ColumnEnum("END_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		EndDate = 5,
		/// <summary>
		/// SaCodeOrgId : الجهة المعار منها او المنتدب  اليها
		/// </summary>
		[EnumTextValue("SA_CODE_ORG_ID")]
		[ColumnEnum("SA_CODE_ORG_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SaCodeOrgId = 6,
		/// <summary>
		/// OrgNameAr : 
		/// </summary>
		[EnumTextValue("ORG_NAME_AR")]
		[ColumnEnum("ORG_NAME_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		OrgNameAr = 7,
		/// <summary>
		/// OrgNameEn : 
		/// </summary>
		[EnumTextValue("ORG_NAME_EN")]
		[ColumnEnum("ORG_NAME_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		OrgNameEn = 8,
		/// <summary>
		/// IsOrgUni : 
		/// </summary>
		[EnumTextValue("IS_ORG_UNI")]
		[ColumnEnum("IS_ORG_UNI", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsOrgUni = 9,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 10,
		/// <summary>
		/// AsNodeId : 
		/// </summary>
		[EnumTextValue("AS_NODE_ID")]
		[ColumnEnum("AS_NODE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsNodeId = 11,
		/// <summary>
		/// IsDelTermin : 
		/// </summary>
		[EnumTextValue("IS_DEL_TERMIN")]
		[ColumnEnum("IS_DEL_TERMIN", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsDelTermin = 12
	}//End enum

	#endregion SaExtDelColumn Enum

} // end namespace
