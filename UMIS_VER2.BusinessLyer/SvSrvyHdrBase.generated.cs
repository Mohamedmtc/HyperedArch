
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SvSrvyHdr.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SV_SRVY_HDR' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SvSrvyHdrBase : EntityBase, ISvSrvyHdr, IEntityId<SvSrvyHdrKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SvSrvyHdrEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SvSrvyHdrEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SvSrvyHdrEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SvSrvyHdr> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SvSrvyHdrEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SvSrvyHdrEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SvSrvyHdrBase"/> instance.
		///</summary>
		public SvSrvyHdrBase()
		{
			this.entityData = new SvSrvyHdrEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SvSrvyHdrBase"/> instance.
		///</summary>
		///<param name="_svSrvyHdrId">Dynamic question Template</param>
		///<param name="_srvyTitleAr"></param>
		///<param name="_srvyTitleEn"></param>
		///<param name="_srvyDate"></param>
		///<param name="_srvyBodyAr"></param>
		///<param name="_srvyBodyEn"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_svCdeSrvyTypeId">1 Exam - 2 Survey</param>
		///<param name="_templtFlg">0 - 1</param>
		///<param name="_totMark">only for Exam=100</param>
		///<param name="_edAcadYearId">For Exam</param>
		///<param name="_edCodeSemesterId">For Exam الفصل الدراسي</param>
		///<param name="_saveAllFlg">save once or after each question</param>
		///<param name="_rstrctdTimeFlg"></param>
		///<param name="_rsltGrdngTypeFlg">1 mark-2 %</param>
		///<param name="_answrBulletFlg">number,alphabit,symbol * -</param>
		///<param name="_timeFrom"></param>
		///<param name="_timeTo"></param>
		///<param name="_approveFlg"></param>
		public SvSrvyHdrBase(System.Int32 _svSrvyHdrId, System.String _srvyTitleAr, System.String _srvyTitleEn, 
			System.DateTime _srvyDate, System.String _srvyBodyAr, System.String _srvyBodyEn, System.Decimal _seUserId, 
			System.DateTime? _lastDate, System.Int32 _svCdeSrvyTypeId, System.Boolean? _templtFlg, System.Int32? _totMark, 
			System.Decimal? _edAcadYearId, System.Decimal? _edCodeSemesterId, System.Int32? _saveAllFlg, 
			System.Boolean? _rstrctdTimeFlg, System.Int32? _rsltGrdngTypeFlg, System.Int32? _answrBulletFlg, 
			System.TimeSpan? _timeFrom, System.TimeSpan? _timeTo, System.Int32? _approveFlg)
		{
			this.entityData = new SvSrvyHdrEntityData();
			this.backupData = null;

			this.SvSrvyHdrId = _svSrvyHdrId;
			this.SrvyTitleAr = _srvyTitleAr;
			this.SrvyTitleEn = _srvyTitleEn;
			this.SrvyDate = _srvyDate;
			this.SrvyBodyAr = _srvyBodyAr;
			this.SrvyBodyEn = _srvyBodyEn;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
			this.SvCdeSrvyTypeId = _svCdeSrvyTypeId;
			this.TempltFlg = _templtFlg;
			this.TotMark = _totMark;
			this.EdAcadYearId = _edAcadYearId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.SaveAllFlg = _saveAllFlg;
			this.RstrctdTimeFlg = _rstrctdTimeFlg;
			this.RsltGrdngTypeFlg = _rsltGrdngTypeFlg;
			this.AnswrBulletFlg = _answrBulletFlg;
			this.TimeFrom = _timeFrom;
			this.TimeTo = _timeTo;
			this.ApproveFlg = _approveFlg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SvSrvyHdr"/> instance.
		///</summary>
		///<param name="_svSrvyHdrId">Dynamic question Template</param>
		///<param name="_srvyTitleAr"></param>
		///<param name="_srvyTitleEn"></param>
		///<param name="_srvyDate"></param>
		///<param name="_srvyBodyAr"></param>
		///<param name="_srvyBodyEn"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_svCdeSrvyTypeId">1 Exam - 2 Survey</param>
		///<param name="_templtFlg">0 - 1</param>
		///<param name="_totMark">only for Exam=100</param>
		///<param name="_edAcadYearId">For Exam</param>
		///<param name="_edCodeSemesterId">For Exam الفصل الدراسي</param>
		///<param name="_saveAllFlg">save once or after each question</param>
		///<param name="_rstrctdTimeFlg"></param>
		///<param name="_rsltGrdngTypeFlg">1 mark-2 %</param>
		///<param name="_answrBulletFlg">number,alphabit,symbol * -</param>
		///<param name="_timeFrom"></param>
		///<param name="_timeTo"></param>
		///<param name="_approveFlg"></param>
		public static SvSrvyHdr CreateSvSrvyHdr(System.Int32 _svSrvyHdrId, System.String _srvyTitleAr, System.String _srvyTitleEn, 
			System.DateTime _srvyDate, System.String _srvyBodyAr, System.String _srvyBodyEn, System.Decimal _seUserId, 
			System.DateTime? _lastDate, System.Int32 _svCdeSrvyTypeId, System.Boolean? _templtFlg, System.Int32? _totMark, 
			System.Decimal? _edAcadYearId, System.Decimal? _edCodeSemesterId, System.Int32? _saveAllFlg, 
			System.Boolean? _rstrctdTimeFlg, System.Int32? _rsltGrdngTypeFlg, System.Int32? _answrBulletFlg, 
			System.TimeSpan? _timeFrom, System.TimeSpan? _timeTo, System.Int32? _approveFlg)
		{
			SvSrvyHdr newSvSrvyHdr = new SvSrvyHdr();
			newSvSrvyHdr.SvSrvyHdrId = _svSrvyHdrId;
			newSvSrvyHdr.SrvyTitleAr = _srvyTitleAr;
			newSvSrvyHdr.SrvyTitleEn = _srvyTitleEn;
			newSvSrvyHdr.SrvyDate = _srvyDate;
			newSvSrvyHdr.SrvyBodyAr = _srvyBodyAr;
			newSvSrvyHdr.SrvyBodyEn = _srvyBodyEn;
			newSvSrvyHdr.SeUserId = _seUserId;
			newSvSrvyHdr.LastDate = _lastDate;
			newSvSrvyHdr.SvCdeSrvyTypeId = _svCdeSrvyTypeId;
			newSvSrvyHdr.TempltFlg = _templtFlg;
			newSvSrvyHdr.TotMark = _totMark;
			newSvSrvyHdr.EdAcadYearId = _edAcadYearId;
			newSvSrvyHdr.EdCodeSemesterId = _edCodeSemesterId;
			newSvSrvyHdr.SaveAllFlg = _saveAllFlg;
			newSvSrvyHdr.RstrctdTimeFlg = _rstrctdTimeFlg;
			newSvSrvyHdr.RsltGrdngTypeFlg = _rsltGrdngTypeFlg;
			newSvSrvyHdr.AnswrBulletFlg = _answrBulletFlg;
			newSvSrvyHdr.TimeFrom = _timeFrom;
			newSvSrvyHdr.TimeTo = _timeTo;
			newSvSrvyHdr.ApproveFlg = _approveFlg;
			return newSvSrvyHdr;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SvSrvyHdrId property. 
		///		Dynamic question Template
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Dynamic question Template"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 SvSrvyHdrId
		{
			get
			{
				return this.entityData.SvSrvyHdrId; 
			}
			
			set
			{
				if (this.entityData.SvSrvyHdrId == value)
					return;
					
				OnColumnChanging(SvSrvyHdrColumn.SvSrvyHdrId, this.entityData.SvSrvyHdrId);
				this.entityData.SvSrvyHdrId = value;
				this.EntityId.SvSrvyHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyHdrColumn.SvSrvyHdrId, this.entityData.SvSrvyHdrId);
				OnPropertyChanged("SvSrvyHdrId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SV_SRVY_HDR_ID property.
		///		Dynamic question Template
		/// </summary>
		/// <remarks>This is the original value of the SV_SRVY_HDR_ID property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalSvSrvyHdrId
		{
			get { return this.entityData.OriginalSvSrvyHdrId; }
			set { this.entityData.OriginalSvSrvyHdrId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the SrvyTitleAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String SrvyTitleAr
		{
			get
			{
				return this.entityData.SrvyTitleAr; 
			}
			
			set
			{
				if (this.entityData.SrvyTitleAr == value)
					return;
					
				OnColumnChanging(SvSrvyHdrColumn.SrvyTitleAr, this.entityData.SrvyTitleAr);
				this.entityData.SrvyTitleAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyHdrColumn.SrvyTitleAr, this.entityData.SrvyTitleAr);
				OnPropertyChanged("SrvyTitleAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SrvyTitleEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String SrvyTitleEn
		{
			get
			{
				return this.entityData.SrvyTitleEn; 
			}
			
			set
			{
				if (this.entityData.SrvyTitleEn == value)
					return;
					
				OnColumnChanging(SvSrvyHdrColumn.SrvyTitleEn, this.entityData.SrvyTitleEn);
				this.entityData.SrvyTitleEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyHdrColumn.SrvyTitleEn, this.entityData.SrvyTitleEn);
				OnPropertyChanged("SrvyTitleEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SrvyDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime SrvyDate
		{
			get
			{
				return this.entityData.SrvyDate; 
			}
			
			set
			{
				if (this.entityData.SrvyDate == value)
					return;
					
				OnColumnChanging(SvSrvyHdrColumn.SrvyDate, this.entityData.SrvyDate);
				this.entityData.SrvyDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyHdrColumn.SrvyDate, this.entityData.SrvyDate);
				OnPropertyChanged("SrvyDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SrvyBodyAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 350)]
		public virtual System.String SrvyBodyAr
		{
			get
			{
				return this.entityData.SrvyBodyAr; 
			}
			
			set
			{
				if (this.entityData.SrvyBodyAr == value)
					return;
					
				OnColumnChanging(SvSrvyHdrColumn.SrvyBodyAr, this.entityData.SrvyBodyAr);
				this.entityData.SrvyBodyAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyHdrColumn.SrvyBodyAr, this.entityData.SrvyBodyAr);
				OnPropertyChanged("SrvyBodyAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SrvyBodyEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 350)]
		public virtual System.String SrvyBodyEn
		{
			get
			{
				return this.entityData.SrvyBodyEn; 
			}
			
			set
			{
				if (this.entityData.SrvyBodyEn == value)
					return;
					
				OnColumnChanging(SvSrvyHdrColumn.SrvyBodyEn, this.entityData.SrvyBodyEn);
				this.entityData.SrvyBodyEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyHdrColumn.SrvyBodyEn, this.entityData.SrvyBodyEn);
				OnPropertyChanged("SrvyBodyEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(SvSrvyHdrColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyHdrColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(SvSrvyHdrColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyHdrColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SvCdeSrvyTypeId property. 
		///		1 Exam - 2 Survey
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"1 Exam - 2 Survey"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 SvCdeSrvyTypeId
		{
			get
			{
				return this.entityData.SvCdeSrvyTypeId; 
			}
			
			set
			{
				if (this.entityData.SvCdeSrvyTypeId == value)
					return;
					
				OnColumnChanging(SvSrvyHdrColumn.SvCdeSrvyTypeId, this.entityData.SvCdeSrvyTypeId);
				this.entityData.SvCdeSrvyTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyHdrColumn.SvCdeSrvyTypeId, this.entityData.SvCdeSrvyTypeId);
				OnPropertyChanged("SvCdeSrvyTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TempltFlg property. 
		///		0 - 1
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsTempltFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"0 - 1"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? TempltFlg
		{
			get
			{
				return this.entityData.TempltFlg; 
			}
			
			set
			{
				if (this.entityData.TempltFlg == value)
					return;
					
				OnColumnChanging(SvSrvyHdrColumn.TempltFlg, this.entityData.TempltFlg);
				this.entityData.TempltFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyHdrColumn.TempltFlg, this.entityData.TempltFlg);
				OnPropertyChanged("TempltFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotMark property. 
		///		only for Exam=100
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTotMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"only for Exam=100"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TotMark
		{
			get
			{
				return this.entityData.TotMark; 
			}
			
			set
			{
				if (this.entityData.TotMark == value)
					return;
					
				OnColumnChanging(SvSrvyHdrColumn.TotMark, this.entityData.TotMark);
				this.entityData.TotMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyHdrColumn.TotMark, this.entityData.TotMark);
				OnPropertyChanged("TotMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		For Exam
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdAcadYearIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"For Exam"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(SvSrvyHdrColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyHdrColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		For Exam الفصل الدراسي
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeSemesterIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"For Exam الفصل الدراسي"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(SvSrvyHdrColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyHdrColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaveAllFlg property. 
		///		save once or after each question
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSaveAllFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"save once or after each question"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SaveAllFlg
		{
			get
			{
				return this.entityData.SaveAllFlg; 
			}
			
			set
			{
				if (this.entityData.SaveAllFlg == value)
					return;
					
				OnColumnChanging(SvSrvyHdrColumn.SaveAllFlg, this.entityData.SaveAllFlg);
				this.entityData.SaveAllFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyHdrColumn.SaveAllFlg, this.entityData.SaveAllFlg);
				OnPropertyChanged("SaveAllFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RstrctdTimeFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsRstrctdTimeFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? RstrctdTimeFlg
		{
			get
			{
				return this.entityData.RstrctdTimeFlg; 
			}
			
			set
			{
				if (this.entityData.RstrctdTimeFlg == value)
					return;
					
				OnColumnChanging(SvSrvyHdrColumn.RstrctdTimeFlg, this.entityData.RstrctdTimeFlg);
				this.entityData.RstrctdTimeFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyHdrColumn.RstrctdTimeFlg, this.entityData.RstrctdTimeFlg);
				OnPropertyChanged("RstrctdTimeFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RsltGrdngTypeFlg property. 
		///		1 mark-2 %
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsRsltGrdngTypeFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"1 mark-2 %"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? RsltGrdngTypeFlg
		{
			get
			{
				return this.entityData.RsltGrdngTypeFlg; 
			}
			
			set
			{
				if (this.entityData.RsltGrdngTypeFlg == value)
					return;
					
				OnColumnChanging(SvSrvyHdrColumn.RsltGrdngTypeFlg, this.entityData.RsltGrdngTypeFlg);
				this.entityData.RsltGrdngTypeFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyHdrColumn.RsltGrdngTypeFlg, this.entityData.RsltGrdngTypeFlg);
				OnPropertyChanged("RsltGrdngTypeFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AnswrBulletFlg property. 
		///		number,alphabit,symbol * -
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsAnswrBulletFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"number,alphabit,symbol * -"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? AnswrBulletFlg
		{
			get
			{
				return this.entityData.AnswrBulletFlg; 
			}
			
			set
			{
				if (this.entityData.AnswrBulletFlg == value)
					return;
					
				OnColumnChanging(SvSrvyHdrColumn.AnswrBulletFlg, this.entityData.AnswrBulletFlg);
				this.entityData.AnswrBulletFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyHdrColumn.AnswrBulletFlg, this.entityData.AnswrBulletFlg);
				OnPropertyChanged("AnswrBulletFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TimeFrom property. 
		///		
		/// </summary>
		/// <value>This type is time.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return new DateTime(1900,1,1,0,0,0,0). It is up to the developer
		/// to check the value of IsTimeFromNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.TimeSpan? TimeFrom
		{
			get
			{
				return this.entityData.TimeFrom; 
			}
			
			set
			{
				if (this.entityData.TimeFrom == value)
					return;
					
				OnColumnChanging(SvSrvyHdrColumn.TimeFrom, this.entityData.TimeFrom);
				this.entityData.TimeFrom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyHdrColumn.TimeFrom, this.entityData.TimeFrom);
				OnPropertyChanged("TimeFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TimeTo property. 
		///		
		/// </summary>
		/// <value>This type is time.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return new DateTime(1900,1,1,0,0,0,0). It is up to the developer
		/// to check the value of IsTimeToNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.TimeSpan? TimeTo
		{
			get
			{
				return this.entityData.TimeTo; 
			}
			
			set
			{
				if (this.entityData.TimeTo == value)
					return;
					
				OnColumnChanging(SvSrvyHdrColumn.TimeTo, this.entityData.TimeTo);
				this.entityData.TimeTo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyHdrColumn.TimeTo, this.entityData.TimeTo);
				OnPropertyChanged("TimeTo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApproveFlg property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsApproveFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ApproveFlg
		{
			get
			{
				return this.entityData.ApproveFlg; 
			}
			
			set
			{
				if (this.entityData.ApproveFlg == value)
					return;
					
				OnColumnChanging(SvSrvyHdrColumn.ApproveFlg, this.entityData.ApproveFlg);
				this.entityData.ApproveFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvSrvyHdrColumn.ApproveFlg, this.entityData.ApproveFlg);
				OnPropertyChanged("ApproveFlg");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeUser SeUserIdSource
      	{
            get { return entityData.SeUserIdSource; }
            set { entityData.SeUserIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SvCdeSrvyType"/>.
		/// </summary>
		/// <value>The source SvCdeSrvyType for SvCdeSrvyTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SvCdeSrvyType SvCdeSrvyTypeIdSource
      	{
            get { return entityData.SvCdeSrvyTypeIdSource; }
            set { entityData.SvCdeSrvyTypeIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of SvSrvyQstn objects
		///	which are related to this object through the relation FK_SV_SRVY_QSTN_SV_SRVY_HDR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SvSrvyQstn> SvSrvyQstnCollection
		{
			get { return entityData.SvSrvyQstnCollection; }
			set { entityData.SvSrvyQstnCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmPlaceExamDatetime objects
		///	which are related to this object through the relation FK_ADM_PLACE_EXAM_DATETIME_SV_SRVY_HDR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmPlaceExamDatetime> AdmPlaceExamDatetimeCollection
		{
			get { return entityData.AdmPlaceExamDatetimeCollection; }
			set { entityData.AdmPlaceExamDatetimeCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("SrvyTitleAr", "Srvy Title Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SrvyTitleAr", "Srvy Title Ar", 150));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("SrvyTitleEn", "Srvy Title En"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SrvyTitleEn", "Srvy Title En", 150));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("SrvyBodyAr", "Srvy Body Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SrvyBodyAr", "Srvy Body Ar", 350));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("SrvyBodyEn", "Srvy Body En"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SrvyBodyEn", "Srvy Body En", 350));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SV_SRVY_HDR"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SV_SRVY_HDR_ID", "SRVY_TITLE_AR", "SRVY_TITLE_EN", "SRVY_DATE", "SRVY_BODY_AR", "SRVY_BODY_EN", "SE_USER_ID", "LAST_DATE", "SV_CDE_SRVY_TYPE_ID", "TEMPLT_FLG", "TOT_MARK", "ED_ACAD_YEAR_ID", "ED_CODE_SEMESTER_ID", "SAVE_ALL_FLG", "RSTRCTD_TIME_FLG", "RSLT_GRDNG_TYPE_FLG", "ANSWR_BULLET_FLG", "TIME_FROM", "TIME_TO", "APPROVE_FLG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SvSrvyHdrEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SvSrvyHdr) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SvSrvyHdr>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SvSrvyHdr);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SvSrvyHdr Entity 
		///</summary>
		protected virtual SvSrvyHdr Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SvSrvyHdr copy = new SvSrvyHdr();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SvSrvyHdrId = this.SvSrvyHdrId;
					copy.OriginalSvSrvyHdrId = this.OriginalSvSrvyHdrId;
				copy.SrvyTitleAr = this.SrvyTitleAr;
				copy.SrvyTitleEn = this.SrvyTitleEn;
				copy.SrvyDate = this.SrvyDate;
				copy.SrvyBodyAr = this.SrvyBodyAr;
				copy.SrvyBodyEn = this.SrvyBodyEn;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
				copy.SvCdeSrvyTypeId = this.SvCdeSrvyTypeId;
				copy.TempltFlg = this.TempltFlg;
				copy.TotMark = this.TotMark;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.SaveAllFlg = this.SaveAllFlg;
				copy.RstrctdTimeFlg = this.RstrctdTimeFlg;
				copy.RsltGrdngTypeFlg = this.RsltGrdngTypeFlg;
				copy.AnswrBulletFlg = this.AnswrBulletFlg;
				copy.TimeFrom = this.TimeFrom;
				copy.TimeTo = this.TimeTo;
				copy.ApproveFlg = this.ApproveFlg;
			
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				copy.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				copy.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			if (this.SvCdeSrvyTypeIdSource != null && existingCopies.Contains(this.SvCdeSrvyTypeIdSource))
				copy.SvCdeSrvyTypeIdSource = existingCopies[this.SvCdeSrvyTypeIdSource] as SvCdeSrvyType;
			else
				copy.SvCdeSrvyTypeIdSource = MakeCopyOf(this.SvCdeSrvyTypeIdSource, existingCopies) as SvCdeSrvyType;
		
			//deep copy nested objects
			copy.SvSrvyQstnCollection = (TList<SvSrvyQstn>) MakeCopyOf(this.SvSrvyQstnCollection, existingCopies); 
			copy.AdmPlaceExamDatetimeCollection = (TList<AdmPlaceExamDatetime>) MakeCopyOf(this.AdmPlaceExamDatetimeCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SvSrvyHdr Entity 
		///</summary>
		public virtual SvSrvyHdr Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SvSrvyHdr Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SvSrvyHdr DeepCopy()
		{
			return EntityHelper.Clone<SvSrvyHdr>(this as SvSrvyHdr);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SvSrvyHdrEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SvSrvyHdrEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SvSrvyHdrEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SvSrvyHdrColumn column)
		{
			switch(column)
			{
					case SvSrvyHdrColumn.SvSrvyHdrId:
					return entityData.SvSrvyHdrId != _originalData.SvSrvyHdrId;
					case SvSrvyHdrColumn.SrvyTitleAr:
					return entityData.SrvyTitleAr != _originalData.SrvyTitleAr;
					case SvSrvyHdrColumn.SrvyTitleEn:
					return entityData.SrvyTitleEn != _originalData.SrvyTitleEn;
					case SvSrvyHdrColumn.SrvyDate:
					return entityData.SrvyDate != _originalData.SrvyDate;
					case SvSrvyHdrColumn.SrvyBodyAr:
					return entityData.SrvyBodyAr != _originalData.SrvyBodyAr;
					case SvSrvyHdrColumn.SrvyBodyEn:
					return entityData.SrvyBodyEn != _originalData.SrvyBodyEn;
					case SvSrvyHdrColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case SvSrvyHdrColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case SvSrvyHdrColumn.SvCdeSrvyTypeId:
					return entityData.SvCdeSrvyTypeId != _originalData.SvCdeSrvyTypeId;
					case SvSrvyHdrColumn.TempltFlg:
					return entityData.TempltFlg != _originalData.TempltFlg;
					case SvSrvyHdrColumn.TotMark:
					return entityData.TotMark != _originalData.TotMark;
					case SvSrvyHdrColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case SvSrvyHdrColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case SvSrvyHdrColumn.SaveAllFlg:
					return entityData.SaveAllFlg != _originalData.SaveAllFlg;
					case SvSrvyHdrColumn.RstrctdTimeFlg:
					return entityData.RstrctdTimeFlg != _originalData.RstrctdTimeFlg;
					case SvSrvyHdrColumn.RsltGrdngTypeFlg:
					return entityData.RsltGrdngTypeFlg != _originalData.RsltGrdngTypeFlg;
					case SvSrvyHdrColumn.AnswrBulletFlg:
					return entityData.AnswrBulletFlg != _originalData.AnswrBulletFlg;
					case SvSrvyHdrColumn.TimeFrom:
					return entityData.TimeFrom != _originalData.TimeFrom;
					case SvSrvyHdrColumn.TimeTo:
					return entityData.TimeTo != _originalData.TimeTo;
					case SvSrvyHdrColumn.ApproveFlg:
					return entityData.ApproveFlg != _originalData.ApproveFlg;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SvSrvyHdrColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SvSrvyHdrId != _originalData.SvSrvyHdrId;
			result = result || entityData.SrvyTitleAr != _originalData.SrvyTitleAr;
			result = result || entityData.SrvyTitleEn != _originalData.SrvyTitleEn;
			result = result || entityData.SrvyDate != _originalData.SrvyDate;
			result = result || entityData.SrvyBodyAr != _originalData.SrvyBodyAr;
			result = result || entityData.SrvyBodyEn != _originalData.SrvyBodyEn;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.SvCdeSrvyTypeId != _originalData.SvCdeSrvyTypeId;
			result = result || entityData.TempltFlg != _originalData.TempltFlg;
			result = result || entityData.TotMark != _originalData.TotMark;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.SaveAllFlg != _originalData.SaveAllFlg;
			result = result || entityData.RstrctdTimeFlg != _originalData.RstrctdTimeFlg;
			result = result || entityData.RsltGrdngTypeFlg != _originalData.RsltGrdngTypeFlg;
			result = result || entityData.AnswrBulletFlg != _originalData.AnswrBulletFlg;
			result = result || entityData.TimeFrom != _originalData.TimeFrom;
			result = result || entityData.TimeTo != _originalData.TimeTo;
			result = result || entityData.ApproveFlg != _originalData.ApproveFlg;
			return result;
		}	
		
		///<summary>
		///  Returns a SvSrvyHdr Entity with the original data.
		///</summary>
		public SvSrvyHdr GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSvSrvyHdr(
				_originalData.SvSrvyHdrId,
				_originalData.SrvyTitleAr,
				_originalData.SrvyTitleEn,
				_originalData.SrvyDate,
				_originalData.SrvyBodyAr,
				_originalData.SrvyBodyEn,
				_originalData.SeUserId,
				_originalData.LastDate,
				_originalData.SvCdeSrvyTypeId,
				_originalData.TempltFlg,
				_originalData.TotMark,
				_originalData.EdAcadYearId,
				_originalData.EdCodeSemesterId,
				_originalData.SaveAllFlg,
				_originalData.RstrctdTimeFlg,
				_originalData.RsltGrdngTypeFlg,
				_originalData.AnswrBulletFlg,
				_originalData.TimeFrom,
				_originalData.TimeTo,
				_originalData.ApproveFlg
				);
				
			return (SvSrvyHdr)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SvSrvyHdrBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SvSrvyHdrBase)
				return ValueEquals(this, (SvSrvyHdrBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SvSrvyHdrBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SvSrvyHdrId.GetHashCode() ^ 
					this.SrvyTitleAr.GetHashCode() ^ 
					this.SrvyTitleEn.GetHashCode() ^ 
					this.SrvyDate.GetHashCode() ^ 
					this.SrvyBodyAr.GetHashCode() ^ 
					this.SrvyBodyEn.GetHashCode() ^ 
					this.SeUserId.GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					this.SvCdeSrvyTypeId.GetHashCode() ^ 
					((this.TempltFlg == null) ? string.Empty : this.TempltFlg.ToString()).GetHashCode() ^ 
					((this.TotMark == null) ? string.Empty : this.TotMark.ToString()).GetHashCode() ^ 
					((this.EdAcadYearId == null) ? string.Empty : this.EdAcadYearId.ToString()).GetHashCode() ^ 
					((this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString()).GetHashCode() ^ 
					((this.SaveAllFlg == null) ? string.Empty : this.SaveAllFlg.ToString()).GetHashCode() ^ 
					((this.RstrctdTimeFlg == null) ? string.Empty : this.RstrctdTimeFlg.ToString()).GetHashCode() ^ 
					((this.RsltGrdngTypeFlg == null) ? string.Empty : this.RsltGrdngTypeFlg.ToString()).GetHashCode() ^ 
					((this.AnswrBulletFlg == null) ? string.Empty : this.AnswrBulletFlg.ToString()).GetHashCode() ^ 
					((this.TimeFrom == null) ? string.Empty : this.TimeFrom.ToString()).GetHashCode() ^ 
					((this.TimeTo == null) ? string.Empty : this.TimeTo.ToString()).GetHashCode() ^ 
					((this.ApproveFlg == null) ? string.Empty : this.ApproveFlg.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SvSrvyHdrBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SvSrvyHdrBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SvSrvyHdrBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SvSrvyHdrBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SvSrvyHdrBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SvSrvyHdrBase Object1, SvSrvyHdrBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SvSrvyHdrId != Object2.SvSrvyHdrId)
				equal = false;
			if (Object1.SrvyTitleAr != Object2.SrvyTitleAr)
				equal = false;
			if (Object1.SrvyTitleEn != Object2.SrvyTitleEn)
				equal = false;
			if (Object1.SrvyDate != Object2.SrvyDate)
				equal = false;
			if (Object1.SrvyBodyAr != Object2.SrvyBodyAr)
				equal = false;
			if (Object1.SrvyBodyEn != Object2.SrvyBodyEn)
				equal = false;
			if (Object1.SeUserId != Object2.SeUserId)
				equal = false;
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if (Object1.SvCdeSrvyTypeId != Object2.SvCdeSrvyTypeId)
				equal = false;
			if ( Object1.TempltFlg != null && Object2.TempltFlg != null )
			{
				if (Object1.TempltFlg != Object2.TempltFlg)
					equal = false;
			}
			else if (Object1.TempltFlg == null ^ Object2.TempltFlg == null )
			{
				equal = false;
			}
			if ( Object1.TotMark != null && Object2.TotMark != null )
			{
				if (Object1.TotMark != Object2.TotMark)
					equal = false;
			}
			else if (Object1.TotMark == null ^ Object2.TotMark == null )
			{
				equal = false;
			}
			if ( Object1.EdAcadYearId != null && Object2.EdAcadYearId != null )
			{
				if (Object1.EdAcadYearId != Object2.EdAcadYearId)
					equal = false;
			}
			else if (Object1.EdAcadYearId == null ^ Object2.EdAcadYearId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeSemesterId != null && Object2.EdCodeSemesterId != null )
			{
				if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
					equal = false;
			}
			else if (Object1.EdCodeSemesterId == null ^ Object2.EdCodeSemesterId == null )
			{
				equal = false;
			}
			if ( Object1.SaveAllFlg != null && Object2.SaveAllFlg != null )
			{
				if (Object1.SaveAllFlg != Object2.SaveAllFlg)
					equal = false;
			}
			else if (Object1.SaveAllFlg == null ^ Object2.SaveAllFlg == null )
			{
				equal = false;
			}
			if ( Object1.RstrctdTimeFlg != null && Object2.RstrctdTimeFlg != null )
			{
				if (Object1.RstrctdTimeFlg != Object2.RstrctdTimeFlg)
					equal = false;
			}
			else if (Object1.RstrctdTimeFlg == null ^ Object2.RstrctdTimeFlg == null )
			{
				equal = false;
			}
			if ( Object1.RsltGrdngTypeFlg != null && Object2.RsltGrdngTypeFlg != null )
			{
				if (Object1.RsltGrdngTypeFlg != Object2.RsltGrdngTypeFlg)
					equal = false;
			}
			else if (Object1.RsltGrdngTypeFlg == null ^ Object2.RsltGrdngTypeFlg == null )
			{
				equal = false;
			}
			if ( Object1.AnswrBulletFlg != null && Object2.AnswrBulletFlg != null )
			{
				if (Object1.AnswrBulletFlg != Object2.AnswrBulletFlg)
					equal = false;
			}
			else if (Object1.AnswrBulletFlg == null ^ Object2.AnswrBulletFlg == null )
			{
				equal = false;
			}
			if ( Object1.TimeFrom != null && Object2.TimeFrom != null )
			{
				if (Object1.TimeFrom != Object2.TimeFrom)
					equal = false;
			}
			else if (Object1.TimeFrom == null ^ Object2.TimeFrom == null )
			{
				equal = false;
			}
			if ( Object1.TimeTo != null && Object2.TimeTo != null )
			{
				if (Object1.TimeTo != Object2.TimeTo)
					equal = false;
			}
			else if (Object1.TimeTo == null ^ Object2.TimeTo == null )
			{
				equal = false;
			}
			if ( Object1.ApproveFlg != null && Object2.ApproveFlg != null )
			{
				if (Object1.ApproveFlg != Object2.ApproveFlg)
					equal = false;
			}
			else if (Object1.ApproveFlg == null ^ Object2.ApproveFlg == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SvSrvyHdrBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SvSrvyHdrComparer GetComparer()
        {
            return new SvSrvyHdrComparer();
        }
        */

        // Comparer delegates back to SvSrvyHdr
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SvSrvyHdr rhs, SvSrvyHdrColumn which)
        {
            switch (which)
            {
            	
            	
            	case SvSrvyHdrColumn.SvSrvyHdrId:
            		return this.SvSrvyHdrId.CompareTo(rhs.SvSrvyHdrId);
            		
            		                 
            	
            	
            	case SvSrvyHdrColumn.SrvyTitleAr:
            		return this.SrvyTitleAr.CompareTo(rhs.SrvyTitleAr);
            		
            		                 
            	
            	
            	case SvSrvyHdrColumn.SrvyTitleEn:
            		return this.SrvyTitleEn.CompareTo(rhs.SrvyTitleEn);
            		
            		                 
            	
            	
            	case SvSrvyHdrColumn.SrvyDate:
            		return this.SrvyDate.CompareTo(rhs.SrvyDate);
            		
            		                 
            	
            	
            	case SvSrvyHdrColumn.SrvyBodyAr:
            		return this.SrvyBodyAr.CompareTo(rhs.SrvyBodyAr);
            		
            		                 
            	
            	
            	case SvSrvyHdrColumn.SrvyBodyEn:
            		return this.SrvyBodyEn.CompareTo(rhs.SrvyBodyEn);
            		
            		                 
            	
            	
            	case SvSrvyHdrColumn.SeUserId:
            		return this.SeUserId.CompareTo(rhs.SeUserId);
            		
            		                 
            	
            	
            	case SvSrvyHdrColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case SvSrvyHdrColumn.SvCdeSrvyTypeId:
            		return this.SvCdeSrvyTypeId.CompareTo(rhs.SvCdeSrvyTypeId);
            		
            		                 
            	
            	
            	case SvSrvyHdrColumn.TempltFlg:
            		return this.TempltFlg.Value.CompareTo(rhs.TempltFlg.Value);
            		
            		                 
            	
            	
            	case SvSrvyHdrColumn.TotMark:
            		return this.TotMark.Value.CompareTo(rhs.TotMark.Value);
            		
            		                 
            	
            	
            	case SvSrvyHdrColumn.EdAcadYearId:
            		return this.EdAcadYearId.Value.CompareTo(rhs.EdAcadYearId.Value);
            		
            		                 
            	
            	
            	case SvSrvyHdrColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.Value.CompareTo(rhs.EdCodeSemesterId.Value);
            		
            		                 
            	
            	
            	case SvSrvyHdrColumn.SaveAllFlg:
            		return this.SaveAllFlg.Value.CompareTo(rhs.SaveAllFlg.Value);
            		
            		                 
            	
            	
            	case SvSrvyHdrColumn.RstrctdTimeFlg:
            		return this.RstrctdTimeFlg.Value.CompareTo(rhs.RstrctdTimeFlg.Value);
            		
            		                 
            	
            	
            	case SvSrvyHdrColumn.RsltGrdngTypeFlg:
            		return this.RsltGrdngTypeFlg.Value.CompareTo(rhs.RsltGrdngTypeFlg.Value);
            		
            		                 
            	
            	
            	case SvSrvyHdrColumn.AnswrBulletFlg:
            		return this.AnswrBulletFlg.Value.CompareTo(rhs.AnswrBulletFlg.Value);
            		
            		                 
            	
            	
            	case SvSrvyHdrColumn.TimeFrom:
            		return this.TimeFrom.Value.CompareTo(rhs.TimeFrom.Value);
            		
            		                 
            	
            	
            	case SvSrvyHdrColumn.TimeTo:
            		return this.TimeTo.Value.CompareTo(rhs.TimeTo.Value);
            		
            		                 
            	
            	
            	case SvSrvyHdrColumn.ApproveFlg:
            		return this.ApproveFlg.Value.CompareTo(rhs.ApproveFlg.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SvSrvyHdrKey> Members
		
		// member variable for the EntityId property
		private SvSrvyHdrKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SvSrvyHdrKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SvSrvyHdrKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SvSrvyHdr")
					.Append("|").Append( this.SvSrvyHdrId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{21}{20}- SvSrvyHdrId: {0}{20}- SrvyTitleAr: {1}{20}- SrvyTitleEn: {2}{20}- SrvyDate: {3}{20}- SrvyBodyAr: {4}{20}- SrvyBodyEn: {5}{20}- SeUserId: {6}{20}- LastDate: {7}{20}- SvCdeSrvyTypeId: {8}{20}- TempltFlg: {9}{20}- TotMark: {10}{20}- EdAcadYearId: {11}{20}- EdCodeSemesterId: {12}{20}- SaveAllFlg: {13}{20}- RstrctdTimeFlg: {14}{20}- RsltGrdngTypeFlg: {15}{20}- AnswrBulletFlg: {16}{20}- TimeFrom: {17}{20}- TimeTo: {18}{20}- ApproveFlg: {19}{20}{22}", 
				this.SvSrvyHdrId,
				this.SrvyTitleAr,
				this.SrvyTitleEn,
				this.SrvyDate,
				this.SrvyBodyAr,
				this.SrvyBodyEn,
				this.SeUserId,
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				this.SvCdeSrvyTypeId,
				(this.TempltFlg == null) ? string.Empty : this.TempltFlg.ToString(),
				(this.TotMark == null) ? string.Empty : this.TotMark.ToString(),
				(this.EdAcadYearId == null) ? string.Empty : this.EdAcadYearId.ToString(),
				(this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString(),
				(this.SaveAllFlg == null) ? string.Empty : this.SaveAllFlg.ToString(),
				(this.RstrctdTimeFlg == null) ? string.Empty : this.RstrctdTimeFlg.ToString(),
				(this.RsltGrdngTypeFlg == null) ? string.Empty : this.RsltGrdngTypeFlg.ToString(),
				(this.AnswrBulletFlg == null) ? string.Empty : this.AnswrBulletFlg.ToString(),
				(this.TimeFrom == null) ? string.Empty : this.TimeFrom.ToString(),
				(this.TimeTo == null) ? string.Empty : this.TimeTo.ToString(),
				(this.ApproveFlg == null) ? string.Empty : this.ApproveFlg.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SV_SRVY_HDR' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SvSrvyHdrEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SV_SRVY_HDR_ID : Dynamic question Template
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SV_SRVY_HDR"</remarks>
		public System.Int32 SvSrvyHdrId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Int32 OriginalSvSrvyHdrId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SRVY_TITLE_AR : 
		/// </summary>
		public System.String		  SrvyTitleAr = string.Empty;
		
		/// <summary>
		/// SRVY_TITLE_EN : 
		/// </summary>
		public System.String		  SrvyTitleEn = string.Empty;
		
		/// <summary>
		/// SRVY_DATE : 
		/// </summary>
		public System.DateTime		  SrvyDate = DateTime.MinValue;
		
		/// <summary>
		/// SRVY_BODY_AR : 
		/// </summary>
		public System.String		  SrvyBodyAr = string.Empty;
		
		/// <summary>
		/// SRVY_BODY_EN : 
		/// </summary>
		public System.String		  SrvyBodyEn = string.Empty;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal		  SeUserId = 0.0m;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// SV_CDE_SRVY_TYPE_ID : 1 Exam - 2 Survey
		/// </summary>
		public System.Int32		  SvCdeSrvyTypeId = (int)0;
		
		/// <summary>
		/// TEMPLT_FLG : 0 - 1
		/// </summary>
		public System.Boolean?		  TempltFlg = null;
		
		/// <summary>
		/// TOT_MARK : only for Exam=100
		/// </summary>
		public System.Int32?		  TotMark = null;
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : For Exam
		/// </summary>
		public System.Decimal?		  EdAcadYearId = null;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : For Exam الفصل الدراسي
		/// </summary>
		public System.Decimal?		  EdCodeSemesterId = null;
		
		/// <summary>
		/// SAVE_ALL_FLG : save once or after each question
		/// </summary>
		public System.Int32?		  SaveAllFlg = null;
		
		/// <summary>
		/// RSTRCTD_TIME_FLG : 
		/// </summary>
		public System.Boolean?		  RstrctdTimeFlg = null;
		
		/// <summary>
		/// RSLT_GRDNG_TYPE_FLG : 1 mark-2 %
		/// </summary>
		public System.Int32?		  RsltGrdngTypeFlg = null;
		
		/// <summary>
		/// ANSWR_BULLET_FLG : number,alphabit,symbol * -
		/// </summary>
		public System.Int32?		  AnswrBulletFlg = null;
		
		/// <summary>
		/// TIME_FROM : 
		/// </summary>
		public System.TimeSpan?		  TimeFrom = null;
		
		/// <summary>
		/// TIME_TO : 
		/// </summary>
		public System.TimeSpan?		  TimeTo = null;
		
		/// <summary>
		/// APPROVE_FLG : 
		/// </summary>
		public System.Int32?		  ApproveFlg = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private SeUser _seUserIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeUser SeUserIdSource
      	{
            get { return this._seUserIdSource; }
            set { this._seUserIdSource = value; }
      	}
		private SvCdeSrvyType _svCdeSrvyTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SvCdeSrvyType"/>.
		/// </summary>
		/// <value>The source SvCdeSrvyType for SvCdeSrvyTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SvCdeSrvyType SvCdeSrvyTypeIdSource
      	{
            get { return this._svCdeSrvyTypeIdSource; }
            set { this._svCdeSrvyTypeIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region SvSrvyQstnCollection
		
		private TList<SvSrvyQstn> _svSrvyQstnSvSrvyHdrId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _svSrvyQstnSvSrvyHdrId
		/// </summary>
		
		public TList<SvSrvyQstn> SvSrvyQstnCollection
		{
			get
			{
				if (_svSrvyQstnSvSrvyHdrId == null)
				{
				_svSrvyQstnSvSrvyHdrId = new TList<SvSrvyQstn>();
				}
	
				return _svSrvyQstnSvSrvyHdrId;
			}
			set { _svSrvyQstnSvSrvyHdrId = value; }
		}
		
		#endregion

		#region AdmPlaceExamDatetimeCollection
		
		private TList<AdmPlaceExamDatetime> _admPlaceExamDatetimeSvSrvyHdrId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admPlaceExamDatetimeSvSrvyHdrId
		/// </summary>
		
		public TList<AdmPlaceExamDatetime> AdmPlaceExamDatetimeCollection
		{
			get
			{
				if (_admPlaceExamDatetimeSvSrvyHdrId == null)
				{
				_admPlaceExamDatetimeSvSrvyHdrId = new TList<AdmPlaceExamDatetime>();
				}
	
				return _admPlaceExamDatetimeSvSrvyHdrId;
			}
			set { _admPlaceExamDatetimeSvSrvyHdrId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SvSrvyHdrEntityData _tmp = new SvSrvyHdrEntityData();
						
			_tmp.SvSrvyHdrId = this.SvSrvyHdrId;
			_tmp.OriginalSvSrvyHdrId = this.OriginalSvSrvyHdrId;
			
			_tmp.SrvyTitleAr = this.SrvyTitleAr;
			_tmp.SrvyTitleEn = this.SrvyTitleEn;
			_tmp.SrvyDate = this.SrvyDate;
			_tmp.SrvyBodyAr = this.SrvyBodyAr;
			_tmp.SrvyBodyEn = this.SrvyBodyEn;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.SvCdeSrvyTypeId = this.SvCdeSrvyTypeId;
			_tmp.TempltFlg = this.TempltFlg;
			_tmp.TotMark = this.TotMark;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.SaveAllFlg = this.SaveAllFlg;
			_tmp.RstrctdTimeFlg = this.RstrctdTimeFlg;
			_tmp.RsltGrdngTypeFlg = this.RsltGrdngTypeFlg;
			_tmp.AnswrBulletFlg = this.AnswrBulletFlg;
			_tmp.TimeFrom = this.TimeFrom;
			_tmp.TimeTo = this.TimeTo;
			_tmp.ApproveFlg = this.ApproveFlg;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.SeUserIdSource != null)
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource) as SeUser;
			if (this.SvCdeSrvyTypeIdSource != null)
				_tmp.SvCdeSrvyTypeIdSource = MakeCopyOf(this.SvCdeSrvyTypeIdSource) as SvCdeSrvyType;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._svSrvyQstnSvSrvyHdrId != null)
				_tmp.SvSrvyQstnCollection = (TList<SvSrvyQstn>) MakeCopyOf(this.SvSrvyQstnCollection); 
			if (this._admPlaceExamDatetimeSvSrvyHdrId != null)
				_tmp.AdmPlaceExamDatetimeCollection = (TList<AdmPlaceExamDatetime>) MakeCopyOf(this.AdmPlaceExamDatetimeCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SvSrvyHdrEntityData _tmp = new SvSrvyHdrEntityData();
						
			_tmp.SvSrvyHdrId = this.SvSrvyHdrId;
			_tmp.OriginalSvSrvyHdrId = this.OriginalSvSrvyHdrId;
			
			_tmp.SrvyTitleAr = this.SrvyTitleAr;
			_tmp.SrvyTitleEn = this.SrvyTitleEn;
			_tmp.SrvyDate = this.SrvyDate;
			_tmp.SrvyBodyAr = this.SrvyBodyAr;
			_tmp.SrvyBodyEn = this.SrvyBodyEn;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.SvCdeSrvyTypeId = this.SvCdeSrvyTypeId;
			_tmp.TempltFlg = this.TempltFlg;
			_tmp.TotMark = this.TotMark;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.SaveAllFlg = this.SaveAllFlg;
			_tmp.RstrctdTimeFlg = this.RstrctdTimeFlg;
			_tmp.RsltGrdngTypeFlg = this.RsltGrdngTypeFlg;
			_tmp.AnswrBulletFlg = this.AnswrBulletFlg;
			_tmp.TimeFrom = this.TimeFrom;
			_tmp.TimeTo = this.TimeTo;
			_tmp.ApproveFlg = this.ApproveFlg;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				_tmp.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			if (this.SvCdeSrvyTypeIdSource != null && existingCopies.Contains(this.SvCdeSrvyTypeIdSource))
				_tmp.SvCdeSrvyTypeIdSource = existingCopies[this.SvCdeSrvyTypeIdSource] as SvCdeSrvyType;
			else
				_tmp.SvCdeSrvyTypeIdSource = MakeCopyOf(this.SvCdeSrvyTypeIdSource, existingCopies) as SvCdeSrvyType;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.SvSrvyQstnCollection = (TList<SvSrvyQstn>) MakeCopyOf(this.SvSrvyQstnCollection, existingCopies); 
			_tmp.AdmPlaceExamDatetimeCollection = (TList<AdmPlaceExamDatetime>) MakeCopyOf(this.AdmPlaceExamDatetimeCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvSrvyHdrColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SvSrvyHdrColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvSrvyHdrColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SvSrvyHdrColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvSrvyHdrColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SvSrvyHdrColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SvSrvyHdrEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SvSrvyHdrEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvSrvyHdrColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SvSrvyHdrColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SvSrvyHdrEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SvSrvyHdrEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SvSrvyHdrEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SvSrvyHdr"/> object.
	/// </remarks>
	public class SvSrvyHdrEventArgs : System.EventArgs
	{
		private SvSrvyHdrColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SvSrvyHdrEventArgs class.
		///</summary>
		public SvSrvyHdrEventArgs(SvSrvyHdrColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SvSrvyHdrEventArgs class.
		///</summary>
		public SvSrvyHdrEventArgs(SvSrvyHdrColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SvSrvyHdrColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SvSrvyHdrColumn" />
		public SvSrvyHdrColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SvSrvyHdr related events.
	///</summary>
	public delegate void SvSrvyHdrEventHandler(object sender, SvSrvyHdrEventArgs e);
	
	#region SvSrvyHdrComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SvSrvyHdrComparer : System.Collections.Generic.IComparer<SvSrvyHdr>
	{
		SvSrvyHdrColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SvSrvyHdrComparer"/> class.
        /// </summary>
		public SvSrvyHdrComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SvSrvyHdrComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SvSrvyHdrComparer(SvSrvyHdrColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SvSrvyHdr"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SvSrvyHdr"/> to compare.</param>
        /// <param name="b">The second <c>SvSrvyHdr</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SvSrvyHdr a, SvSrvyHdr b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SvSrvyHdr entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SvSrvyHdr a, SvSrvyHdr b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SvSrvyHdrColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SvSrvyHdrKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SvSrvyHdr"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SvSrvyHdrKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SvSrvyHdrKey class.
		/// </summary>
		public SvSrvyHdrKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SvSrvyHdrKey class.
		/// </summary>
		public SvSrvyHdrKey(SvSrvyHdrBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SvSrvyHdrId = entity.SvSrvyHdrId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SvSrvyHdrKey class.
		/// </summary>
		public SvSrvyHdrKey(System.Int32 _svSrvyHdrId)
		{
			#region Init Properties

			this.SvSrvyHdrId = _svSrvyHdrId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SvSrvyHdrBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SvSrvyHdrBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SvSrvyHdrId property
		private System.Int32 _svSrvyHdrId;
		
		/// <summary>
		/// Gets or sets the SvSrvyHdrId property.
		/// </summary>
		public System.Int32 SvSrvyHdrId
		{
			get { return _svSrvyHdrId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SvSrvyHdrId = value;
				
				_svSrvyHdrId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SvSrvyHdrId = ( values["SvSrvyHdrId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["SvSrvyHdrId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SvSrvyHdrId", SvSrvyHdrId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SvSrvyHdrId: {0}{1}",
								SvSrvyHdrId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SvSrvyHdrColumn Enum
	
	/// <summary>
	/// Enumerate the SvSrvyHdr columns.
	/// </summary>
	[Serializable]
	public enum SvSrvyHdrColumn : int
	{
		/// <summary>
		/// SvSrvyHdrId : Dynamic question Template
		/// </summary>
		[EnumTextValue("SV_SRVY_HDR_ID")]
		[ColumnEnum("SV_SRVY_HDR_ID", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		SvSrvyHdrId = 1,
		/// <summary>
		/// SrvyTitleAr : 
		/// </summary>
		[EnumTextValue("SRVY_TITLE_AR")]
		[ColumnEnum("SRVY_TITLE_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 150)]
		SrvyTitleAr = 2,
		/// <summary>
		/// SrvyTitleEn : 
		/// </summary>
		[EnumTextValue("SRVY_TITLE_EN")]
		[ColumnEnum("SRVY_TITLE_EN", typeof(System.String), System.Data.DbType.String, false, false, false, 150)]
		SrvyTitleEn = 3,
		/// <summary>
		/// SrvyDate : 
		/// </summary>
		[EnumTextValue("SRVY_DATE")]
		[ColumnEnum("SRVY_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, false)]
		SrvyDate = 4,
		/// <summary>
		/// SrvyBodyAr : 
		/// </summary>
		[EnumTextValue("SRVY_BODY_AR")]
		[ColumnEnum("SRVY_BODY_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 350)]
		SrvyBodyAr = 5,
		/// <summary>
		/// SrvyBodyEn : 
		/// </summary>
		[EnumTextValue("SRVY_BODY_EN")]
		[ColumnEnum("SRVY_BODY_EN", typeof(System.String), System.Data.DbType.String, false, false, false, 350)]
		SrvyBodyEn = 6,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SeUserId = 7,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 8,
		/// <summary>
		/// SvCdeSrvyTypeId : 1 Exam - 2 Survey
		/// </summary>
		[EnumTextValue("SV_CDE_SRVY_TYPE_ID")]
		[ColumnEnum("SV_CDE_SRVY_TYPE_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SvCdeSrvyTypeId = 9,
		/// <summary>
		/// TempltFlg : 0 - 1
		/// </summary>
		[EnumTextValue("TEMPLT_FLG")]
		[ColumnEnum("TEMPLT_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		TempltFlg = 10,
		/// <summary>
		/// TotMark : only for Exam=100
		/// </summary>
		[EnumTextValue("TOT_MARK")]
		[ColumnEnum("TOT_MARK", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TotMark = 11,
		/// <summary>
		/// EdAcadYearId : For Exam
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdAcadYearId = 12,
		/// <summary>
		/// EdCodeSemesterId : For Exam الفصل الدراسي
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeSemesterId = 13,
		/// <summary>
		/// SaveAllFlg : save once or after each question
		/// </summary>
		[EnumTextValue("SAVE_ALL_FLG")]
		[ColumnEnum("SAVE_ALL_FLG", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SaveAllFlg = 14,
		/// <summary>
		/// RstrctdTimeFlg : 
		/// </summary>
		[EnumTextValue("RSTRCTD_TIME_FLG")]
		[ColumnEnum("RSTRCTD_TIME_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		RstrctdTimeFlg = 15,
		/// <summary>
		/// RsltGrdngTypeFlg : 1 mark-2 %
		/// </summary>
		[EnumTextValue("RSLT_GRDNG_TYPE_FLG")]
		[ColumnEnum("RSLT_GRDNG_TYPE_FLG", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		RsltGrdngTypeFlg = 16,
		/// <summary>
		/// AnswrBulletFlg : number,alphabit,symbol * -
		/// </summary>
		[EnumTextValue("ANSWR_BULLET_FLG")]
		[ColumnEnum("ANSWR_BULLET_FLG", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		AnswrBulletFlg = 17,
		/// <summary>
		/// TimeFrom : 
		/// </summary>
		[EnumTextValue("TIME_FROM")]
		[ColumnEnum("TIME_FROM", typeof(System.TimeSpan), System.Data.DbType.Time, false, false, true)]
		TimeFrom = 18,
		/// <summary>
		/// TimeTo : 
		/// </summary>
		[EnumTextValue("TIME_TO")]
		[ColumnEnum("TIME_TO", typeof(System.TimeSpan), System.Data.DbType.Time, false, false, true)]
		TimeTo = 19,
		/// <summary>
		/// ApproveFlg : 
		/// </summary>
		[EnumTextValue("APPROVE_FLG")]
		[ColumnEnum("APPROVE_FLG", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ApproveFlg = 20
	}//End enum

	#endregion SvSrvyHdrColumn Enum

} // end namespace
