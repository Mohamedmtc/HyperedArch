
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file CoControl.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'CO_CONTROL' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class CoControlBase : EntityBase, ICoControl, IEntityId<CoControlKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CoControlEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CoControlEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CoControlEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<CoControl> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CoControlEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CoControlEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CoControlBase"/> instance.
		///</summary>
		public CoControlBase()
		{
			this.entityData = new CoControlEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CoControlBase"/> instance.
		///</summary>
		///<param name="_coControlId">فتح الكنترول</param>
		///<param name="_entMainId">الكلية- الجامعة</param>
		///<param name="_edAcadYearId">عام</param>
		///<param name="_edCodeSemesterId">فصل</param>
		///<param name="_edCdeExamTypeId">دور اول - دور تانى</param>
		///<param name="_controlName"></param>
		///<param name="_seUserId"></param>
		///<param name="_isClosed"></param>
		///<param name="_notes"></param>
		///<param name="_approxDecNumFlg"></param>
		///<param name="_creationDate"></param>
		///<param name="_scrtNumCount"></param>
		///<param name="_scrtNumAutoFlg"></param>
		///<param name="_scrtNumTypeFlg"></param>
		///<param name="_scrtNumApprvFlg"></param>
		///<param name="_asCodeDegreeClassId"></param>
		public CoControlBase(System.Decimal _coControlId, System.Decimal _entMainId, System.Decimal _edAcadYearId, 
			System.Decimal _edCodeSemesterId, System.Decimal? _edCdeExamTypeId, System.String _controlName, 
			System.Decimal _seUserId, System.Decimal _isClosed, System.String _notes, System.Decimal _approxDecNumFlg, 
			System.DateTime? _creationDate, System.Decimal? _scrtNumCount, System.Decimal _scrtNumAutoFlg, 
			System.Decimal _scrtNumTypeFlg, System.Decimal _scrtNumApprvFlg, System.Decimal? _asCodeDegreeClassId)
		{
			this.entityData = new CoControlEntityData();
			this.backupData = null;

			this.CoControlId = _coControlId;
			this.EntMainId = _entMainId;
			this.EdAcadYearId = _edAcadYearId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.EdCdeExamTypeId = _edCdeExamTypeId;
			this.ControlName = _controlName;
			this.SeUserId = _seUserId;
			this.IsClosed = _isClosed;
			this.Notes = _notes;
			this.ApproxDecNumFlg = _approxDecNumFlg;
			this.CreationDate = _creationDate;
			this.ScrtNumCount = _scrtNumCount;
			this.ScrtNumAutoFlg = _scrtNumAutoFlg;
			this.ScrtNumTypeFlg = _scrtNumTypeFlg;
			this.ScrtNumApprvFlg = _scrtNumApprvFlg;
			this.AsCodeDegreeClassId = _asCodeDegreeClassId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="CoControl"/> instance.
		///</summary>
		///<param name="_coControlId">فتح الكنترول</param>
		///<param name="_entMainId">الكلية- الجامعة</param>
		///<param name="_edAcadYearId">عام</param>
		///<param name="_edCodeSemesterId">فصل</param>
		///<param name="_edCdeExamTypeId">دور اول - دور تانى</param>
		///<param name="_controlName"></param>
		///<param name="_seUserId"></param>
		///<param name="_isClosed"></param>
		///<param name="_notes"></param>
		///<param name="_approxDecNumFlg"></param>
		///<param name="_creationDate"></param>
		///<param name="_scrtNumCount"></param>
		///<param name="_scrtNumAutoFlg"></param>
		///<param name="_scrtNumTypeFlg"></param>
		///<param name="_scrtNumApprvFlg"></param>
		///<param name="_asCodeDegreeClassId"></param>
		public static CoControl CreateCoControl(System.Decimal _coControlId, System.Decimal _entMainId, System.Decimal _edAcadYearId, 
			System.Decimal _edCodeSemesterId, System.Decimal? _edCdeExamTypeId, System.String _controlName, 
			System.Decimal _seUserId, System.Decimal _isClosed, System.String _notes, System.Decimal _approxDecNumFlg, 
			System.DateTime? _creationDate, System.Decimal? _scrtNumCount, System.Decimal _scrtNumAutoFlg, 
			System.Decimal _scrtNumTypeFlg, System.Decimal _scrtNumApprvFlg, System.Decimal? _asCodeDegreeClassId)
		{
			CoControl newCoControl = new CoControl();
			newCoControl.CoControlId = _coControlId;
			newCoControl.EntMainId = _entMainId;
			newCoControl.EdAcadYearId = _edAcadYearId;
			newCoControl.EdCodeSemesterId = _edCodeSemesterId;
			newCoControl.EdCdeExamTypeId = _edCdeExamTypeId;
			newCoControl.ControlName = _controlName;
			newCoControl.SeUserId = _seUserId;
			newCoControl.IsClosed = _isClosed;
			newCoControl.Notes = _notes;
			newCoControl.ApproxDecNumFlg = _approxDecNumFlg;
			newCoControl.CreationDate = _creationDate;
			newCoControl.ScrtNumCount = _scrtNumCount;
			newCoControl.ScrtNumAutoFlg = _scrtNumAutoFlg;
			newCoControl.ScrtNumTypeFlg = _scrtNumTypeFlg;
			newCoControl.ScrtNumApprvFlg = _scrtNumApprvFlg;
			newCoControl.AsCodeDegreeClassId = _asCodeDegreeClassId;
			return newCoControl;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the CoControlId property. 
		///		فتح الكنترول
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"فتح الكنترول"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal CoControlId
		{
			get
			{
				return this.entityData.CoControlId; 
			}
			
			set
			{
				if (this.entityData.CoControlId == value)
					return;
					
				OnColumnChanging(CoControlColumn.CoControlId, this.entityData.CoControlId);
				this.entityData.CoControlId = value;
				this.EntityId.CoControlId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlColumn.CoControlId, this.entityData.CoControlId);
				OnPropertyChanged("CoControlId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the CO_CONTROL_ID property.
		///		فتح الكنترول
		/// </summary>
		/// <remarks>This is the original value of the CO_CONTROL_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalCoControlId
		{
			get { return this.entityData.OriginalCoControlId; }
			set { this.entityData.OriginalCoControlId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EntMainId property. 
		///		الكلية- الجامعة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"الكلية- الجامعة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EntMainId
		{
			get
			{
				return this.entityData.EntMainId; 
			}
			
			set
			{
				if (this.entityData.EntMainId == value)
					return;
					
				OnColumnChanging(CoControlColumn.EntMainId, this.entityData.EntMainId);
				this.entityData.EntMainId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlColumn.EntMainId, this.entityData.EntMainId);
				OnPropertyChanged("EntMainId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		عام
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"عام"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(CoControlColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		فصل
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"فصل"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(CoControlColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCdeExamTypeId property. 
		///		دور اول - دور تانى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCdeExamTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"دور اول - دور تانى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCdeExamTypeId
		{
			get
			{
				return this.entityData.EdCdeExamTypeId; 
			}
			
			set
			{
				if (this.entityData.EdCdeExamTypeId == value)
					return;
					
				OnColumnChanging(CoControlColumn.EdCdeExamTypeId, this.entityData.EdCdeExamTypeId);
				this.entityData.EdCdeExamTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlColumn.EdCdeExamTypeId, this.entityData.EdCdeExamTypeId);
				OnPropertyChanged("EdCdeExamTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ControlName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String ControlName
		{
			get
			{
				return this.entityData.ControlName; 
			}
			
			set
			{
				if (this.entityData.ControlName == value)
					return;
					
				OnColumnChanging(CoControlColumn.ControlName, this.entityData.ControlName);
				this.entityData.ControlName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlColumn.ControlName, this.entityData.ControlName);
				OnPropertyChanged("ControlName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(CoControlColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsClosed property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsClosed
		{
			get
			{
				return this.entityData.IsClosed; 
			}
			
			set
			{
				if (this.entityData.IsClosed == value)
					return;
					
				OnColumnChanging(CoControlColumn.IsClosed, this.entityData.IsClosed);
				this.entityData.IsClosed = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlColumn.IsClosed, this.entityData.IsClosed);
				OnPropertyChanged("IsClosed");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(CoControlColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApproxDecNumFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ApproxDecNumFlg
		{
			get
			{
				return this.entityData.ApproxDecNumFlg; 
			}
			
			set
			{
				if (this.entityData.ApproxDecNumFlg == value)
					return;
					
				OnColumnChanging(CoControlColumn.ApproxDecNumFlg, this.entityData.ApproxDecNumFlg);
				this.entityData.ApproxDecNumFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlColumn.ApproxDecNumFlg, this.entityData.ApproxDecNumFlg);
				OnPropertyChanged("ApproxDecNumFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreationDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreationDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreationDate
		{
			get
			{
				return this.entityData.CreationDate; 
			}
			
			set
			{
				if (this.entityData.CreationDate == value)
					return;
					
				OnColumnChanging(CoControlColumn.CreationDate, this.entityData.CreationDate);
				this.entityData.CreationDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlColumn.CreationDate, this.entityData.CreationDate);
				OnPropertyChanged("CreationDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScrtNumCount property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScrtNumCountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScrtNumCount
		{
			get
			{
				return this.entityData.ScrtNumCount; 
			}
			
			set
			{
				if (this.entityData.ScrtNumCount == value)
					return;
					
				OnColumnChanging(CoControlColumn.ScrtNumCount, this.entityData.ScrtNumCount);
				this.entityData.ScrtNumCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlColumn.ScrtNumCount, this.entityData.ScrtNumCount);
				OnPropertyChanged("ScrtNumCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScrtNumAutoFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ScrtNumAutoFlg
		{
			get
			{
				return this.entityData.ScrtNumAutoFlg; 
			}
			
			set
			{
				if (this.entityData.ScrtNumAutoFlg == value)
					return;
					
				OnColumnChanging(CoControlColumn.ScrtNumAutoFlg, this.entityData.ScrtNumAutoFlg);
				this.entityData.ScrtNumAutoFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlColumn.ScrtNumAutoFlg, this.entityData.ScrtNumAutoFlg);
				OnPropertyChanged("ScrtNumAutoFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScrtNumTypeFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ScrtNumTypeFlg
		{
			get
			{
				return this.entityData.ScrtNumTypeFlg; 
			}
			
			set
			{
				if (this.entityData.ScrtNumTypeFlg == value)
					return;
					
				OnColumnChanging(CoControlColumn.ScrtNumTypeFlg, this.entityData.ScrtNumTypeFlg);
				this.entityData.ScrtNumTypeFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlColumn.ScrtNumTypeFlg, this.entityData.ScrtNumTypeFlg);
				OnPropertyChanged("ScrtNumTypeFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScrtNumApprvFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ScrtNumApprvFlg
		{
			get
			{
				return this.entityData.ScrtNumApprvFlg; 
			}
			
			set
			{
				if (this.entityData.ScrtNumApprvFlg == value)
					return;
					
				OnColumnChanging(CoControlColumn.ScrtNumApprvFlg, this.entityData.ScrtNumApprvFlg);
				this.entityData.ScrtNumApprvFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlColumn.ScrtNumApprvFlg, this.entityData.ScrtNumApprvFlg);
				OnPropertyChanged("ScrtNumApprvFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeClassId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeClassIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeClassId
		{
			get
			{
				return this.entityData.AsCodeDegreeClassId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeClassId == value)
					return;
					
				OnColumnChanging(CoControlColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				this.entityData.AsCodeDegreeClassId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoControlColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				OnPropertyChanged("AsCodeDegreeClassId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return entityData.AsCodeDegreeClassIdSource; }
            set { entityData.AsCodeDegreeClassIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeExamType"/>.
		/// </summary>
		/// <value>The source EdCdeExamType for EdCdeExamTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCdeExamType EdCdeExamTypeIdSource
      	{
            get { return entityData.EdCdeExamTypeIdSource; }
            set { entityData.EdCdeExamTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return entityData.EntMainIdSource; }
            set { entityData.EntMainIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeUser SeUserIdSource
      	{
            get { return entityData.SeUserIdSource; }
            set { entityData.SeUserIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of CoControlRoom objects
		///	which are related to this object through the relation FK_CO_CONTROL_PHASE_CO_CONTROL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoControlRoom> CoControlRoomCollection
		{
			get { return entityData.CoControlRoomCollection; }
			set { entityData.CoControlRoomCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CoExamCommittee objects
		///	which are related to this object through the relation FK_CO_EXAM_COMMITTEE_CO_CONTROL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoExamCommittee> CoExamCommitteeCollection
		{
			get { return entityData.CoExamCommitteeCollection; }
			set { entityData.CoExamCommitteeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CoExamCommSupervisorAlt objects
		///	which are related to this object through the relation FK_CO_EXAM_COMM_SUPERVISOR_ALT_CO_CONTROL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoExamCommSupervisorAlt> CoExamCommSupervisorAltCollection
		{
			get { return entityData.CoExamCommSupervisorAltCollection; }
			set { entityData.CoExamCommSupervisorAltCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CoStudCheat objects
		///	which are related to this object through the relation FK_CO_STUD_CHEAT_CO_CONTROL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoStudCheat> CoStudCheatCollection
		{
			get { return entityData.CoStudCheatCollection; }
			set { entityData.CoStudCheatCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CoControlMember objects
		///	which are related to this object through the relation FK_CO_CONTROL_MEMBER_CO_CONTROL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoControlMember> CoControlMemberCollection
		{
			get { return entityData.CoControlMemberCollection; }
			set { entityData.CoControlMemberCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CoSupervisorStudCount objects
		///	which are related to this object through the relation FK_CO_SUPERVISOR_STUD_COUNT_CO_CONTROL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoSupervisorStudCount> CoSupervisorStudCountCollection
		{
			get { return entityData.CoSupervisorStudCountCollection; }
			set { entityData.CoSupervisorStudCountCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CoStudSecretNum objects
		///	which are related to this object through the relation FK_CO_STUD_SECRET_NUM_CO_CONTROL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoStudSecretNum> CoStudSecretNumCollection
		{
			get { return entityData.CoStudSecretNumCollection; }
			set { entityData.CoStudSecretNumCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CoExamPaper objects
		///	which are related to this object through the relation FK_CO_EXAM_PAPER_CO_CONTROL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoExamPaper> CoExamPaperCollection
		{
			get { return entityData.CoExamPaperCollection; }
			set { entityData.CoExamPaperCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ControlName", "Control Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ControlName", "Control Name", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "CO_CONTROL"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"CO_CONTROL_ID", "ENT_MAIN_ID", "ED_ACAD_YEAR_ID", "ED_CODE_SEMESTER_ID", "ED_CDE_EXAM_TYPE_ID", "CONTROL_NAME", "SE_USER_ID", "IS_CLOSED", "NOTES", "APPROX_DEC_NUM_FLG", "CREATION_DATE", "SCRT_NUM_COUNT", "SCRT_NUM_AUTO_FLG", "SCRT_NUM_TYPE_FLG", "SCRT_NUM_APPRV_FLG", "AS_CODE_DEGREE_CLASS_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CoControlEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (CoControl) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<CoControl>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as CoControl);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed CoControl Entity 
		///</summary>
		protected virtual CoControl Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			CoControl copy = new CoControl();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.CoControlId = this.CoControlId;
					copy.OriginalCoControlId = this.OriginalCoControlId;
				copy.EntMainId = this.EntMainId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.EdCdeExamTypeId = this.EdCdeExamTypeId;
				copy.ControlName = this.ControlName;
				copy.SeUserId = this.SeUserId;
				copy.IsClosed = this.IsClosed;
				copy.Notes = this.Notes;
				copy.ApproxDecNumFlg = this.ApproxDecNumFlg;
				copy.CreationDate = this.CreationDate;
				copy.ScrtNumCount = this.ScrtNumCount;
				copy.ScrtNumAutoFlg = this.ScrtNumAutoFlg;
				copy.ScrtNumTypeFlg = this.ScrtNumTypeFlg;
				copy.ScrtNumApprvFlg = this.ScrtNumApprvFlg;
				copy.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				copy.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				copy.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCdeExamTypeIdSource != null && existingCopies.Contains(this.EdCdeExamTypeIdSource))
				copy.EdCdeExamTypeIdSource = existingCopies[this.EdCdeExamTypeIdSource] as EdCdeExamType;
			else
				copy.EdCdeExamTypeIdSource = MakeCopyOf(this.EdCdeExamTypeIdSource, existingCopies) as EdCdeExamType;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				copy.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				copy.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				copy.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				copy.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
		
			//deep copy nested objects
			copy.CoControlRoomCollection = (TList<CoControlRoom>) MakeCopyOf(this.CoControlRoomCollection, existingCopies); 
			copy.CoExamCommitteeCollection = (TList<CoExamCommittee>) MakeCopyOf(this.CoExamCommitteeCollection, existingCopies); 
			copy.CoExamCommSupervisorAltCollection = (TList<CoExamCommSupervisorAlt>) MakeCopyOf(this.CoExamCommSupervisorAltCollection, existingCopies); 
			copy.CoStudCheatCollection = (TList<CoStudCheat>) MakeCopyOf(this.CoStudCheatCollection, existingCopies); 
			copy.CoControlMemberCollection = (TList<CoControlMember>) MakeCopyOf(this.CoControlMemberCollection, existingCopies); 
			copy.CoSupervisorStudCountCollection = (TList<CoSupervisorStudCount>) MakeCopyOf(this.CoSupervisorStudCountCollection, existingCopies); 
			copy.CoStudSecretNumCollection = (TList<CoStudSecretNum>) MakeCopyOf(this.CoStudSecretNumCollection, existingCopies); 
			copy.CoExamPaperCollection = (TList<CoExamPaper>) MakeCopyOf(this.CoExamPaperCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed CoControl Entity 
		///</summary>
		public virtual CoControl Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed CoControl Entity which is a deep copy of the current entity.
		///</summary>
		public virtual CoControl DeepCopy()
		{
			return EntityHelper.Clone<CoControl>(this as CoControl);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CoControlEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new CoControlEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CoControlEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CoControlColumn column)
		{
			switch(column)
			{
					case CoControlColumn.CoControlId:
					return entityData.CoControlId != _originalData.CoControlId;
					case CoControlColumn.EntMainId:
					return entityData.EntMainId != _originalData.EntMainId;
					case CoControlColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case CoControlColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case CoControlColumn.EdCdeExamTypeId:
					return entityData.EdCdeExamTypeId != _originalData.EdCdeExamTypeId;
					case CoControlColumn.ControlName:
					return entityData.ControlName != _originalData.ControlName;
					case CoControlColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case CoControlColumn.IsClosed:
					return entityData.IsClosed != _originalData.IsClosed;
					case CoControlColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case CoControlColumn.ApproxDecNumFlg:
					return entityData.ApproxDecNumFlg != _originalData.ApproxDecNumFlg;
					case CoControlColumn.CreationDate:
					return entityData.CreationDate != _originalData.CreationDate;
					case CoControlColumn.ScrtNumCount:
					return entityData.ScrtNumCount != _originalData.ScrtNumCount;
					case CoControlColumn.ScrtNumAutoFlg:
					return entityData.ScrtNumAutoFlg != _originalData.ScrtNumAutoFlg;
					case CoControlColumn.ScrtNumTypeFlg:
					return entityData.ScrtNumTypeFlg != _originalData.ScrtNumTypeFlg;
					case CoControlColumn.ScrtNumApprvFlg:
					return entityData.ScrtNumApprvFlg != _originalData.ScrtNumApprvFlg;
					case CoControlColumn.AsCodeDegreeClassId:
					return entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< CoControlColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.CoControlId != _originalData.CoControlId;
			result = result || entityData.EntMainId != _originalData.EntMainId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.EdCdeExamTypeId != _originalData.EdCdeExamTypeId;
			result = result || entityData.ControlName != _originalData.ControlName;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.IsClosed != _originalData.IsClosed;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.ApproxDecNumFlg != _originalData.ApproxDecNumFlg;
			result = result || entityData.CreationDate != _originalData.CreationDate;
			result = result || entityData.ScrtNumCount != _originalData.ScrtNumCount;
			result = result || entityData.ScrtNumAutoFlg != _originalData.ScrtNumAutoFlg;
			result = result || entityData.ScrtNumTypeFlg != _originalData.ScrtNumTypeFlg;
			result = result || entityData.ScrtNumApprvFlg != _originalData.ScrtNumApprvFlg;
			result = result || entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
			return result;
		}	
		
		///<summary>
		///  Returns a CoControl Entity with the original data.
		///</summary>
		public CoControl GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateCoControl(
				_originalData.CoControlId,
				_originalData.EntMainId,
				_originalData.EdAcadYearId,
				_originalData.EdCodeSemesterId,
				_originalData.EdCdeExamTypeId,
				_originalData.ControlName,
				_originalData.SeUserId,
				_originalData.IsClosed,
				_originalData.Notes,
				_originalData.ApproxDecNumFlg,
				_originalData.CreationDate,
				_originalData.ScrtNumCount,
				_originalData.ScrtNumAutoFlg,
				_originalData.ScrtNumTypeFlg,
				_originalData.ScrtNumApprvFlg,
				_originalData.AsCodeDegreeClassId
				);
				
			return (CoControl)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CoControlBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is CoControlBase)
				return ValueEquals(this, (CoControlBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CoControlBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.CoControlId.GetHashCode() ^ 
					this.EntMainId.GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					this.EdCodeSemesterId.GetHashCode() ^ 
					((this.EdCdeExamTypeId == null) ? string.Empty : this.EdCdeExamTypeId.ToString()).GetHashCode() ^ 
					this.ControlName.GetHashCode() ^ 
					this.SeUserId.GetHashCode() ^ 
					this.IsClosed.GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					this.ApproxDecNumFlg.GetHashCode() ^ 
					((this.CreationDate == null) ? string.Empty : this.CreationDate.ToString()).GetHashCode() ^ 
					((this.ScrtNumCount == null) ? string.Empty : this.ScrtNumCount.ToString()).GetHashCode() ^ 
					this.ScrtNumAutoFlg.GetHashCode() ^ 
					this.ScrtNumTypeFlg.GetHashCode() ^ 
					this.ScrtNumApprvFlg.GetHashCode() ^ 
					((this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CoControlBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CoControlBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="CoControlBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="CoControlBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CoControlBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(CoControlBase Object1, CoControlBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.CoControlId != Object2.CoControlId)
				equal = false;
			if (Object1.EntMainId != Object2.EntMainId)
				equal = false;
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
				equal = false;
			if ( Object1.EdCdeExamTypeId != null && Object2.EdCdeExamTypeId != null )
			{
				if (Object1.EdCdeExamTypeId != Object2.EdCdeExamTypeId)
					equal = false;
			}
			else if (Object1.EdCdeExamTypeId == null ^ Object2.EdCdeExamTypeId == null )
			{
				equal = false;
			}
			if (Object1.ControlName != Object2.ControlName)
				equal = false;
			if (Object1.SeUserId != Object2.SeUserId)
				equal = false;
			if (Object1.IsClosed != Object2.IsClosed)
				equal = false;
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if (Object1.ApproxDecNumFlg != Object2.ApproxDecNumFlg)
				equal = false;
			if ( Object1.CreationDate != null && Object2.CreationDate != null )
			{
				if (Object1.CreationDate != Object2.CreationDate)
					equal = false;
			}
			else if (Object1.CreationDate == null ^ Object2.CreationDate == null )
			{
				equal = false;
			}
			if ( Object1.ScrtNumCount != null && Object2.ScrtNumCount != null )
			{
				if (Object1.ScrtNumCount != Object2.ScrtNumCount)
					equal = false;
			}
			else if (Object1.ScrtNumCount == null ^ Object2.ScrtNumCount == null )
			{
				equal = false;
			}
			if (Object1.ScrtNumAutoFlg != Object2.ScrtNumAutoFlg)
				equal = false;
			if (Object1.ScrtNumTypeFlg != Object2.ScrtNumTypeFlg)
				equal = false;
			if (Object1.ScrtNumApprvFlg != Object2.ScrtNumApprvFlg)
				equal = false;
			if ( Object1.AsCodeDegreeClassId != null && Object2.AsCodeDegreeClassId != null )
			{
				if (Object1.AsCodeDegreeClassId != Object2.AsCodeDegreeClassId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeClassId == null ^ Object2.AsCodeDegreeClassId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CoControlBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CoControlComparer GetComparer()
        {
            return new CoControlComparer();
        }
        */

        // Comparer delegates back to CoControl
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(CoControl rhs, CoControlColumn which)
        {
            switch (which)
            {
            	
            	
            	case CoControlColumn.CoControlId:
            		return this.CoControlId.CompareTo(rhs.CoControlId);
            		
            		                 
            	
            	
            	case CoControlColumn.EntMainId:
            		return this.EntMainId.CompareTo(rhs.EntMainId);
            		
            		                 
            	
            	
            	case CoControlColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case CoControlColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.CompareTo(rhs.EdCodeSemesterId);
            		
            		                 
            	
            	
            	case CoControlColumn.EdCdeExamTypeId:
            		return this.EdCdeExamTypeId.Value.CompareTo(rhs.EdCdeExamTypeId.Value);
            		
            		                 
            	
            	
            	case CoControlColumn.ControlName:
            		return this.ControlName.CompareTo(rhs.ControlName);
            		
            		                 
            	
            	
            	case CoControlColumn.SeUserId:
            		return this.SeUserId.CompareTo(rhs.SeUserId);
            		
            		                 
            	
            	
            	case CoControlColumn.IsClosed:
            		return this.IsClosed.CompareTo(rhs.IsClosed);
            		
            		                 
            	
            	
            	case CoControlColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case CoControlColumn.ApproxDecNumFlg:
            		return this.ApproxDecNumFlg.CompareTo(rhs.ApproxDecNumFlg);
            		
            		                 
            	
            	
            	case CoControlColumn.CreationDate:
            		return this.CreationDate.Value.CompareTo(rhs.CreationDate.Value);
            		
            		                 
            	
            	
            	case CoControlColumn.ScrtNumCount:
            		return this.ScrtNumCount.Value.CompareTo(rhs.ScrtNumCount.Value);
            		
            		                 
            	
            	
            	case CoControlColumn.ScrtNumAutoFlg:
            		return this.ScrtNumAutoFlg.CompareTo(rhs.ScrtNumAutoFlg);
            		
            		                 
            	
            	
            	case CoControlColumn.ScrtNumTypeFlg:
            		return this.ScrtNumTypeFlg.CompareTo(rhs.ScrtNumTypeFlg);
            		
            		                 
            	
            	
            	case CoControlColumn.ScrtNumApprvFlg:
            		return this.ScrtNumApprvFlg.CompareTo(rhs.ScrtNumApprvFlg);
            		
            		                 
            	
            	
            	case CoControlColumn.AsCodeDegreeClassId:
            		return this.AsCodeDegreeClassId.Value.CompareTo(rhs.AsCodeDegreeClassId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CoControlKey> Members
		
		// member variable for the EntityId property
		private CoControlKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual CoControlKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CoControlKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("CoControl")
					.Append("|").Append( this.CoControlId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{17}{16}- CoControlId: {0}{16}- EntMainId: {1}{16}- EdAcadYearId: {2}{16}- EdCodeSemesterId: {3}{16}- EdCdeExamTypeId: {4}{16}- ControlName: {5}{16}- SeUserId: {6}{16}- IsClosed: {7}{16}- Notes: {8}{16}- ApproxDecNumFlg: {9}{16}- CreationDate: {10}{16}- ScrtNumCount: {11}{16}- ScrtNumAutoFlg: {12}{16}- ScrtNumTypeFlg: {13}{16}- ScrtNumApprvFlg: {14}{16}- AsCodeDegreeClassId: {15}{16}{18}", 
				this.CoControlId,
				this.EntMainId,
				this.EdAcadYearId,
				this.EdCodeSemesterId,
				(this.EdCdeExamTypeId == null) ? string.Empty : this.EdCdeExamTypeId.ToString(),
				this.ControlName,
				this.SeUserId,
				this.IsClosed,
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				this.ApproxDecNumFlg,
				(this.CreationDate == null) ? string.Empty : this.CreationDate.ToString(),
				(this.ScrtNumCount == null) ? string.Empty : this.ScrtNumCount.ToString(),
				this.ScrtNumAutoFlg,
				this.ScrtNumTypeFlg,
				this.ScrtNumApprvFlg,
				(this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'CO_CONTROL' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CoControlEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// CO_CONTROL_ID : فتح الكنترول
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "CO_CONTROL"</remarks>
		public System.Decimal CoControlId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalCoControlId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ENT_MAIN_ID : الكلية- الجامعة
		/// </summary>
		public System.Decimal		  EntMainId = 0.0m;
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : عام
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : فصل
		/// </summary>
		public System.Decimal		  EdCodeSemesterId = 0.0m;
		
		/// <summary>
		/// ED_CDE_EXAM_TYPE_ID : دور اول - دور تانى
		/// </summary>
		public System.Decimal?		  EdCdeExamTypeId = null;
		
		/// <summary>
		/// CONTROL_NAME : 
		/// </summary>
		public System.String		  ControlName = string.Empty;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal		  SeUserId = 0.0m;
		
		/// <summary>
		/// IS_CLOSED : 
		/// </summary>
		public System.Decimal		  IsClosed = 0.0m;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// APPROX_DEC_NUM_FLG : 
		/// </summary>
		public System.Decimal		  ApproxDecNumFlg = 0.0m;
		
		/// <summary>
		/// CREATION_DATE : 
		/// </summary>
		public System.DateTime?		  CreationDate = null;
		
		/// <summary>
		/// SCRT_NUM_COUNT : 
		/// </summary>
		public System.Decimal?		  ScrtNumCount = null;
		
		/// <summary>
		/// SCRT_NUM_AUTO_FLG : 
		/// </summary>
		public System.Decimal		  ScrtNumAutoFlg = 0.0m;
		
		/// <summary>
		/// SCRT_NUM_TYPE_FLG : 
		/// </summary>
		public System.Decimal		  ScrtNumTypeFlg = 0.0m;
		
		/// <summary>
		/// SCRT_NUM_APPRV_FLG : 
		/// </summary>
		public System.Decimal		  ScrtNumApprvFlg = 0.0m;
		
		/// <summary>
		/// AS_CODE_DEGREE_CLASS_ID : 
		/// </summary>
		public System.Decimal?		  AsCodeDegreeClassId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsCodeDegreeClass _asCodeDegreeClassIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return this._asCodeDegreeClassIdSource; }
            set { this._asCodeDegreeClassIdSource = value; }
      	}
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCdeExamType _edCdeExamTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeExamType"/>.
		/// </summary>
		/// <value>The source EdCdeExamType for EdCdeExamTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCdeExamType EdCdeExamTypeIdSource
      	{
            get { return this._edCdeExamTypeIdSource; }
            set { this._edCdeExamTypeIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private EntityMain _entMainIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return this._entMainIdSource; }
            set { this._entMainIdSource = value; }
      	}
		private SeUser _seUserIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeUser SeUserIdSource
      	{
            get { return this._seUserIdSource; }
            set { this._seUserIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region CoControlRoomCollection
		
		private TList<CoControlRoom> _coControlRoomCoControlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coControlRoomCoControlId
		/// </summary>
		
		public TList<CoControlRoom> CoControlRoomCollection
		{
			get
			{
				if (_coControlRoomCoControlId == null)
				{
				_coControlRoomCoControlId = new TList<CoControlRoom>();
				}
	
				return _coControlRoomCoControlId;
			}
			set { _coControlRoomCoControlId = value; }
		}
		
		#endregion

		#region CoExamCommitteeCollection
		
		private TList<CoExamCommittee> _coExamCommitteeCoControlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coExamCommitteeCoControlId
		/// </summary>
		
		public TList<CoExamCommittee> CoExamCommitteeCollection
		{
			get
			{
				if (_coExamCommitteeCoControlId == null)
				{
				_coExamCommitteeCoControlId = new TList<CoExamCommittee>();
				}
	
				return _coExamCommitteeCoControlId;
			}
			set { _coExamCommitteeCoControlId = value; }
		}
		
		#endregion

		#region CoExamCommSupervisorAltCollection
		
		private TList<CoExamCommSupervisorAlt> _coExamCommSupervisorAltCoControlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coExamCommSupervisorAltCoControlId
		/// </summary>
		
		public TList<CoExamCommSupervisorAlt> CoExamCommSupervisorAltCollection
		{
			get
			{
				if (_coExamCommSupervisorAltCoControlId == null)
				{
				_coExamCommSupervisorAltCoControlId = new TList<CoExamCommSupervisorAlt>();
				}
	
				return _coExamCommSupervisorAltCoControlId;
			}
			set { _coExamCommSupervisorAltCoControlId = value; }
		}
		
		#endregion

		#region CoStudCheatCollection
		
		private TList<CoStudCheat> _coStudCheatCoControlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coStudCheatCoControlId
		/// </summary>
		
		public TList<CoStudCheat> CoStudCheatCollection
		{
			get
			{
				if (_coStudCheatCoControlId == null)
				{
				_coStudCheatCoControlId = new TList<CoStudCheat>();
				}
	
				return _coStudCheatCoControlId;
			}
			set { _coStudCheatCoControlId = value; }
		}
		
		#endregion

		#region CoControlMemberCollection
		
		private TList<CoControlMember> _coControlMemberCoControlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coControlMemberCoControlId
		/// </summary>
		
		public TList<CoControlMember> CoControlMemberCollection
		{
			get
			{
				if (_coControlMemberCoControlId == null)
				{
				_coControlMemberCoControlId = new TList<CoControlMember>();
				}
	
				return _coControlMemberCoControlId;
			}
			set { _coControlMemberCoControlId = value; }
		}
		
		#endregion

		#region CoSupervisorStudCountCollection
		
		private TList<CoSupervisorStudCount> _coSupervisorStudCountCoControlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coSupervisorStudCountCoControlId
		/// </summary>
		
		public TList<CoSupervisorStudCount> CoSupervisorStudCountCollection
		{
			get
			{
				if (_coSupervisorStudCountCoControlId == null)
				{
				_coSupervisorStudCountCoControlId = new TList<CoSupervisorStudCount>();
				}
	
				return _coSupervisorStudCountCoControlId;
			}
			set { _coSupervisorStudCountCoControlId = value; }
		}
		
		#endregion

		#region CoStudSecretNumCollection
		
		private TList<CoStudSecretNum> _coStudSecretNumCoControlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coStudSecretNumCoControlId
		/// </summary>
		
		public TList<CoStudSecretNum> CoStudSecretNumCollection
		{
			get
			{
				if (_coStudSecretNumCoControlId == null)
				{
				_coStudSecretNumCoControlId = new TList<CoStudSecretNum>();
				}
	
				return _coStudSecretNumCoControlId;
			}
			set { _coStudSecretNumCoControlId = value; }
		}
		
		#endregion

		#region CoExamPaperCollection
		
		private TList<CoExamPaper> _coExamPaperCoControlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coExamPaperCoControlId
		/// </summary>
		
		public TList<CoExamPaper> CoExamPaperCollection
		{
			get
			{
				if (_coExamPaperCoControlId == null)
				{
				_coExamPaperCoControlId = new TList<CoExamPaper>();
				}
	
				return _coExamPaperCoControlId;
			}
			set { _coExamPaperCoControlId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CoControlEntityData _tmp = new CoControlEntityData();
						
			_tmp.CoControlId = this.CoControlId;
			_tmp.OriginalCoControlId = this.OriginalCoControlId;
			
			_tmp.EntMainId = this.EntMainId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdCdeExamTypeId = this.EdCdeExamTypeId;
			_tmp.ControlName = this.ControlName;
			_tmp.SeUserId = this.SeUserId;
			_tmp.IsClosed = this.IsClosed;
			_tmp.Notes = this.Notes;
			_tmp.ApproxDecNumFlg = this.ApproxDecNumFlg;
			_tmp.CreationDate = this.CreationDate;
			_tmp.ScrtNumCount = this.ScrtNumCount;
			_tmp.ScrtNumAutoFlg = this.ScrtNumAutoFlg;
			_tmp.ScrtNumTypeFlg = this.ScrtNumTypeFlg;
			_tmp.ScrtNumApprvFlg = this.ScrtNumApprvFlg;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			
			#region Source Parent Composite Entities
			if (this.AsCodeDegreeClassIdSource != null)
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource) as AsCodeDegreeClass;
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCdeExamTypeIdSource != null)
				_tmp.EdCdeExamTypeIdSource = MakeCopyOf(this.EdCdeExamTypeIdSource) as EdCdeExamType;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.EntMainIdSource != null)
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource) as EntityMain;
			if (this.SeUserIdSource != null)
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource) as SeUser;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._coControlRoomCoControlId != null)
				_tmp.CoControlRoomCollection = (TList<CoControlRoom>) MakeCopyOf(this.CoControlRoomCollection); 
			if (this._coExamCommitteeCoControlId != null)
				_tmp.CoExamCommitteeCollection = (TList<CoExamCommittee>) MakeCopyOf(this.CoExamCommitteeCollection); 
			if (this._coExamCommSupervisorAltCoControlId != null)
				_tmp.CoExamCommSupervisorAltCollection = (TList<CoExamCommSupervisorAlt>) MakeCopyOf(this.CoExamCommSupervisorAltCollection); 
			if (this._coStudCheatCoControlId != null)
				_tmp.CoStudCheatCollection = (TList<CoStudCheat>) MakeCopyOf(this.CoStudCheatCollection); 
			if (this._coControlMemberCoControlId != null)
				_tmp.CoControlMemberCollection = (TList<CoControlMember>) MakeCopyOf(this.CoControlMemberCollection); 
			if (this._coSupervisorStudCountCoControlId != null)
				_tmp.CoSupervisorStudCountCollection = (TList<CoSupervisorStudCount>) MakeCopyOf(this.CoSupervisorStudCountCollection); 
			if (this._coStudSecretNumCoControlId != null)
				_tmp.CoStudSecretNumCollection = (TList<CoStudSecretNum>) MakeCopyOf(this.CoStudSecretNumCollection); 
			if (this._coExamPaperCoControlId != null)
				_tmp.CoExamPaperCollection = (TList<CoExamPaper>) MakeCopyOf(this.CoExamPaperCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			CoControlEntityData _tmp = new CoControlEntityData();
						
			_tmp.CoControlId = this.CoControlId;
			_tmp.OriginalCoControlId = this.OriginalCoControlId;
			
			_tmp.EntMainId = this.EntMainId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdCdeExamTypeId = this.EdCdeExamTypeId;
			_tmp.ControlName = this.ControlName;
			_tmp.SeUserId = this.SeUserId;
			_tmp.IsClosed = this.IsClosed;
			_tmp.Notes = this.Notes;
			_tmp.ApproxDecNumFlg = this.ApproxDecNumFlg;
			_tmp.CreationDate = this.CreationDate;
			_tmp.ScrtNumCount = this.ScrtNumCount;
			_tmp.ScrtNumAutoFlg = this.ScrtNumAutoFlg;
			_tmp.ScrtNumTypeFlg = this.ScrtNumTypeFlg;
			_tmp.ScrtNumApprvFlg = this.ScrtNumApprvFlg;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			
			#region Source Parent Composite Entities
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				_tmp.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCdeExamTypeIdSource != null && existingCopies.Contains(this.EdCdeExamTypeIdSource))
				_tmp.EdCdeExamTypeIdSource = existingCopies[this.EdCdeExamTypeIdSource] as EdCdeExamType;
			else
				_tmp.EdCdeExamTypeIdSource = MakeCopyOf(this.EdCdeExamTypeIdSource, existingCopies) as EdCdeExamType;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				_tmp.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				_tmp.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.CoControlRoomCollection = (TList<CoControlRoom>) MakeCopyOf(this.CoControlRoomCollection, existingCopies); 
			_tmp.CoExamCommitteeCollection = (TList<CoExamCommittee>) MakeCopyOf(this.CoExamCommitteeCollection, existingCopies); 
			_tmp.CoExamCommSupervisorAltCollection = (TList<CoExamCommSupervisorAlt>) MakeCopyOf(this.CoExamCommSupervisorAltCollection, existingCopies); 
			_tmp.CoStudCheatCollection = (TList<CoStudCheat>) MakeCopyOf(this.CoStudCheatCollection, existingCopies); 
			_tmp.CoControlMemberCollection = (TList<CoControlMember>) MakeCopyOf(this.CoControlMemberCollection, existingCopies); 
			_tmp.CoSupervisorStudCountCollection = (TList<CoSupervisorStudCount>) MakeCopyOf(this.CoSupervisorStudCountCollection, existingCopies); 
			_tmp.CoStudSecretNumCollection = (TList<CoStudSecretNum>) MakeCopyOf(this.CoStudSecretNumCollection, existingCopies); 
			_tmp.CoExamPaperCollection = (TList<CoExamPaper>) MakeCopyOf(this.CoExamPaperCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CoControlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(CoControlColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CoControlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(CoControlColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CoControlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(CoControlColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				CoControlEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CoControlEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CoControlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(CoControlColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CoControlEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CoControlEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CoControlEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="CoControl"/> object.
	/// </remarks>
	public class CoControlEventArgs : System.EventArgs
	{
		private CoControlColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CoControlEventArgs class.
		///</summary>
		public CoControlEventArgs(CoControlColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CoControlEventArgs class.
		///</summary>
		public CoControlEventArgs(CoControlColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CoControlColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CoControlColumn" />
		public CoControlColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all CoControl related events.
	///</summary>
	public delegate void CoControlEventHandler(object sender, CoControlEventArgs e);
	
	#region CoControlComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CoControlComparer : System.Collections.Generic.IComparer<CoControl>
	{
		CoControlColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CoControlComparer"/> class.
        /// </summary>
		public CoControlComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CoControlComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CoControlComparer(CoControlColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="CoControl"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="CoControl"/> to compare.</param>
        /// <param name="b">The second <c>CoControl</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(CoControl a, CoControl b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(CoControl entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(CoControl a, CoControl b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CoControlColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CoControlKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="CoControl"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CoControlKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CoControlKey class.
		/// </summary>
		public CoControlKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CoControlKey class.
		/// </summary>
		public CoControlKey(CoControlBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.CoControlId = entity.CoControlId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CoControlKey class.
		/// </summary>
		public CoControlKey(System.Decimal _coControlId)
		{
			#region Init Properties

			this.CoControlId = _coControlId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CoControlBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CoControlBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the CoControlId property
		private System.Decimal _coControlId;
		
		/// <summary>
		/// Gets or sets the CoControlId property.
		/// </summary>
		public System.Decimal CoControlId
		{
			get { return _coControlId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.CoControlId = value;
				
				_coControlId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				CoControlId = ( values["CoControlId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["CoControlId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("CoControlId", CoControlId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("CoControlId: {0}{1}",
								CoControlId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CoControlColumn Enum
	
	/// <summary>
	/// Enumerate the CoControl columns.
	/// </summary>
	[Serializable]
	public enum CoControlColumn : int
	{
		/// <summary>
		/// CoControlId : فتح الكنترول
		/// </summary>
		[EnumTextValue("CO_CONTROL_ID")]
		[ColumnEnum("CO_CONTROL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		CoControlId = 1,
		/// <summary>
		/// EntMainId : الكلية- الجامعة
		/// </summary>
		[EnumTextValue("ENT_MAIN_ID")]
		[ColumnEnum("ENT_MAIN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EntMainId = 2,
		/// <summary>
		/// EdAcadYearId : عام
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 3,
		/// <summary>
		/// EdCodeSemesterId : فصل
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeSemesterId = 4,
		/// <summary>
		/// EdCdeExamTypeId : دور اول - دور تانى
		/// </summary>
		[EnumTextValue("ED_CDE_EXAM_TYPE_ID")]
		[ColumnEnum("ED_CDE_EXAM_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCdeExamTypeId = 5,
		/// <summary>
		/// ControlName : 
		/// </summary>
		[EnumTextValue("CONTROL_NAME")]
		[ColumnEnum("CONTROL_NAME", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		ControlName = 6,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SeUserId = 7,
		/// <summary>
		/// IsClosed : 
		/// </summary>
		[EnumTextValue("IS_CLOSED")]
		[ColumnEnum("IS_CLOSED", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsClosed = 8,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		Notes = 9,
		/// <summary>
		/// ApproxDecNumFlg : 
		/// </summary>
		[EnumTextValue("APPROX_DEC_NUM_FLG")]
		[ColumnEnum("APPROX_DEC_NUM_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ApproxDecNumFlg = 10,
		/// <summary>
		/// CreationDate : 
		/// </summary>
		[EnumTextValue("CREATION_DATE")]
		[ColumnEnum("CREATION_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreationDate = 11,
		/// <summary>
		/// ScrtNumCount : 
		/// </summary>
		[EnumTextValue("SCRT_NUM_COUNT")]
		[ColumnEnum("SCRT_NUM_COUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScrtNumCount = 12,
		/// <summary>
		/// ScrtNumAutoFlg : 
		/// </summary>
		[EnumTextValue("SCRT_NUM_AUTO_FLG")]
		[ColumnEnum("SCRT_NUM_AUTO_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ScrtNumAutoFlg = 13,
		/// <summary>
		/// ScrtNumTypeFlg : 
		/// </summary>
		[EnumTextValue("SCRT_NUM_TYPE_FLG")]
		[ColumnEnum("SCRT_NUM_TYPE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ScrtNumTypeFlg = 14,
		/// <summary>
		/// ScrtNumApprvFlg : 
		/// </summary>
		[EnumTextValue("SCRT_NUM_APPRV_FLG")]
		[ColumnEnum("SCRT_NUM_APPRV_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ScrtNumApprvFlg = 15,
		/// <summary>
		/// AsCodeDegreeClassId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_CLASS_ID")]
		[ColumnEnum("AS_CODE_DEGREE_CLASS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeClassId = 16
	}//End enum

	#endregion CoControlColumn Enum

} // end namespace
