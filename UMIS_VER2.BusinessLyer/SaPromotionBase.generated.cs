
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SaPromotion.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SA_PROMOTION' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SaPromotionBase : EntityBase, ISaPromotion, IEntityId<SaPromotionKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SaPromotionEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SaPromotionEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SaPromotionEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SaPromotion> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaPromotionEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaPromotionEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SaPromotionBase"/> instance.
		///</summary>
		public SaPromotionBase()
		{
			this.entityData = new SaPromotionEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SaPromotionBase"/> instance.
		///</summary>
		///<param name="_saPromotionId"></param>
		///<param name="_decisionNum"></param>
		///<param name="_decisionDate"></param>
		///<param name="_strtWorkFrom"></param>
		///<param name="_comments"></param>
		///<param name="_historyDataFlag"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_saCodeScDegId"></param>
		///<param name="_gsApprovalHId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_saScCommDecisionId"></param>
		///<param name="_gsCountryNodeId"></param>
		///<param name="_asNodeId"></param>
		///<param name="_salary"></param>
		public SaPromotionBase(System.Decimal _saPromotionId, System.String _decisionNum, 
			System.DateTime _decisionDate, System.DateTime? _strtWorkFrom, System.String _comments, 
			System.Decimal _historyDataFlag, System.Decimal _saStfMemberId, System.Decimal _saCodeScDegId, 
			System.Decimal? _gsApprovalHId, System.Decimal _asFacultyInfoId, System.Decimal? _saScCommDecisionId, 
			System.Decimal? _gsCountryNodeId, System.Decimal? _asNodeId, System.Decimal? _salary)
		{
			this.entityData = new SaPromotionEntityData();
			this.backupData = null;

			this.SaPromotionId = _saPromotionId;
			this.DecisionNum = _decisionNum;
			this.DecisionDate = _decisionDate;
			this.StrtWorkFrom = _strtWorkFrom;
			this.Comments = _comments;
			this.HistoryDataFlag = _historyDataFlag;
			this.SaStfMemberId = _saStfMemberId;
			this.SaCodeScDegId = _saCodeScDegId;
			this.GsApprovalHId = _gsApprovalHId;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.SaScCommDecisionId = _saScCommDecisionId;
			this.GsCountryNodeId = _gsCountryNodeId;
			this.AsNodeId = _asNodeId;
			this.Salary = _salary;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SaPromotion"/> instance.
		///</summary>
		///<param name="_saPromotionId"></param>
		///<param name="_decisionNum"></param>
		///<param name="_decisionDate"></param>
		///<param name="_strtWorkFrom"></param>
		///<param name="_comments"></param>
		///<param name="_historyDataFlag"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_saCodeScDegId"></param>
		///<param name="_gsApprovalHId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_saScCommDecisionId"></param>
		///<param name="_gsCountryNodeId"></param>
		///<param name="_asNodeId"></param>
		///<param name="_salary"></param>
		public static SaPromotion CreateSaPromotion(System.Decimal _saPromotionId, System.String _decisionNum, 
			System.DateTime _decisionDate, System.DateTime? _strtWorkFrom, System.String _comments, 
			System.Decimal _historyDataFlag, System.Decimal _saStfMemberId, System.Decimal _saCodeScDegId, 
			System.Decimal? _gsApprovalHId, System.Decimal _asFacultyInfoId, System.Decimal? _saScCommDecisionId, 
			System.Decimal? _gsCountryNodeId, System.Decimal? _asNodeId, System.Decimal? _salary)
		{
			SaPromotion newSaPromotion = new SaPromotion();
			newSaPromotion.SaPromotionId = _saPromotionId;
			newSaPromotion.DecisionNum = _decisionNum;
			newSaPromotion.DecisionDate = _decisionDate;
			newSaPromotion.StrtWorkFrom = _strtWorkFrom;
			newSaPromotion.Comments = _comments;
			newSaPromotion.HistoryDataFlag = _historyDataFlag;
			newSaPromotion.SaStfMemberId = _saStfMemberId;
			newSaPromotion.SaCodeScDegId = _saCodeScDegId;
			newSaPromotion.GsApprovalHId = _gsApprovalHId;
			newSaPromotion.AsFacultyInfoId = _asFacultyInfoId;
			newSaPromotion.SaScCommDecisionId = _saScCommDecisionId;
			newSaPromotion.GsCountryNodeId = _gsCountryNodeId;
			newSaPromotion.AsNodeId = _asNodeId;
			newSaPromotion.Salary = _salary;
			return newSaPromotion;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SaPromotionId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SaPromotionId
		{
			get
			{
				return this.entityData.SaPromotionId; 
			}
			
			set
			{
				if (this.entityData.SaPromotionId == value)
					return;
					
				OnColumnChanging(SaPromotionColumn.SaPromotionId, this.entityData.SaPromotionId);
				this.entityData.SaPromotionId = value;
				this.EntityId.SaPromotionId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPromotionColumn.SaPromotionId, this.entityData.SaPromotionId);
				OnPropertyChanged("SaPromotionId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SA_PROMOTION_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SA_PROMOTION_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSaPromotionId
		{
			get { return this.entityData.OriginalSaPromotionId; }
			set { this.entityData.OriginalSaPromotionId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the DecisionNum property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String DecisionNum
		{
			get
			{
				return this.entityData.DecisionNum; 
			}
			
			set
			{
				if (this.entityData.DecisionNum == value)
					return;
					
				OnColumnChanging(SaPromotionColumn.DecisionNum, this.entityData.DecisionNum);
				this.entityData.DecisionNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPromotionColumn.DecisionNum, this.entityData.DecisionNum);
				OnPropertyChanged("DecisionNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DecisionDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime DecisionDate
		{
			get
			{
				return this.entityData.DecisionDate; 
			}
			
			set
			{
				if (this.entityData.DecisionDate == value)
					return;
					
				OnColumnChanging(SaPromotionColumn.DecisionDate, this.entityData.DecisionDate);
				this.entityData.DecisionDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPromotionColumn.DecisionDate, this.entityData.DecisionDate);
				OnPropertyChanged("DecisionDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StrtWorkFrom property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsStrtWorkFromNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? StrtWorkFrom
		{
			get
			{
				return this.entityData.StrtWorkFrom; 
			}
			
			set
			{
				if (this.entityData.StrtWorkFrom == value)
					return;
					
				OnColumnChanging(SaPromotionColumn.StrtWorkFrom, this.entityData.StrtWorkFrom);
				this.entityData.StrtWorkFrom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPromotionColumn.StrtWorkFrom, this.entityData.StrtWorkFrom);
				OnPropertyChanged("StrtWorkFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Comments property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String Comments
		{
			get
			{
				return this.entityData.Comments; 
			}
			
			set
			{
				if (this.entityData.Comments == value)
					return;
					
				OnColumnChanging(SaPromotionColumn.Comments, this.entityData.Comments);
				this.entityData.Comments = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPromotionColumn.Comments, this.entityData.Comments);
				OnPropertyChanged("Comments");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HistoryDataFlag property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal HistoryDataFlag
		{
			get
			{
				return this.entityData.HistoryDataFlag; 
			}
			
			set
			{
				if (this.entityData.HistoryDataFlag == value)
					return;
					
				OnColumnChanging(SaPromotionColumn.HistoryDataFlag, this.entityData.HistoryDataFlag);
				this.entityData.HistoryDataFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPromotionColumn.HistoryDataFlag, this.entityData.HistoryDataFlag);
				OnPropertyChanged("HistoryDataFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaStfMemberId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaStfMemberId
		{
			get
			{
				return this.entityData.SaStfMemberId; 
			}
			
			set
			{
				if (this.entityData.SaStfMemberId == value)
					return;
					
				OnColumnChanging(SaPromotionColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				this.entityData.SaStfMemberId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPromotionColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				OnPropertyChanged("SaStfMemberId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaCodeScDegId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaCodeScDegId
		{
			get
			{
				return this.entityData.SaCodeScDegId; 
			}
			
			set
			{
				if (this.entityData.SaCodeScDegId == value)
					return;
					
				OnColumnChanging(SaPromotionColumn.SaCodeScDegId, this.entityData.SaCodeScDegId);
				this.entityData.SaCodeScDegId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPromotionColumn.SaCodeScDegId, this.entityData.SaCodeScDegId);
				OnPropertyChanged("SaCodeScDegId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsApprovalHId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsApprovalHIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsApprovalHId
		{
			get
			{
				return this.entityData.GsApprovalHId; 
			}
			
			set
			{
				if (this.entityData.GsApprovalHId == value)
					return;
					
				OnColumnChanging(SaPromotionColumn.GsApprovalHId, this.entityData.GsApprovalHId);
				this.entityData.GsApprovalHId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPromotionColumn.GsApprovalHId, this.entityData.GsApprovalHId);
				OnPropertyChanged("GsApprovalHId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(SaPromotionColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPromotionColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaScCommDecisionId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSaScCommDecisionIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SaScCommDecisionId
		{
			get
			{
				return this.entityData.SaScCommDecisionId; 
			}
			
			set
			{
				if (this.entityData.SaScCommDecisionId == value)
					return;
					
				OnColumnChanging(SaPromotionColumn.SaScCommDecisionId, this.entityData.SaScCommDecisionId);
				this.entityData.SaScCommDecisionId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPromotionColumn.SaScCommDecisionId, this.entityData.SaScCommDecisionId);
				OnPropertyChanged("SaScCommDecisionId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCountryNodeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCountryNodeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCountryNodeId
		{
			get
			{
				return this.entityData.GsCountryNodeId; 
			}
			
			set
			{
				if (this.entityData.GsCountryNodeId == value)
					return;
					
				OnColumnChanging(SaPromotionColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				this.entityData.GsCountryNodeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPromotionColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				OnPropertyChanged("GsCountryNodeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsNodeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsNodeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsNodeId
		{
			get
			{
				return this.entityData.AsNodeId; 
			}
			
			set
			{
				if (this.entityData.AsNodeId == value)
					return;
					
				OnColumnChanging(SaPromotionColumn.AsNodeId, this.entityData.AsNodeId);
				this.entityData.AsNodeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPromotionColumn.AsNodeId, this.entityData.AsNodeId);
				OnPropertyChanged("AsNodeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Salary property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSalaryNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Salary
		{
			get
			{
				return this.entityData.Salary; 
			}
			
			set
			{
				if (this.entityData.Salary == value)
					return;
					
				OnColumnChanging(SaPromotionColumn.Salary, this.entityData.Salary);
				this.entityData.Salary = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaPromotionColumn.Salary, this.entityData.Salary);
				OnPropertyChanged("Salary");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return entityData.SaStfMemberIdSource; }
            set { entityData.SaStfMemberIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsApprovalH"/>.
		/// </summary>
		/// <value>The source GsApprovalH for GsApprovalHId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsApprovalH GsApprovalHIdSource
      	{
            get { return entityData.GsApprovalHIdSource; }
            set { entityData.GsApprovalHIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeScDeg"/>.
		/// </summary>
		/// <value>The source SaCodeScDeg for SaCodeScDegId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaCodeScDeg SaCodeScDegIdSource
      	{
            get { return entityData.SaCodeScDegIdSource; }
            set { entityData.SaCodeScDegIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaScCommDecision"/>.
		/// </summary>
		/// <value>The source SaScCommDecision for SaScCommDecisionId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaScCommDecision SaScCommDecisionIdSource
      	{
            get { return entityData.SaScCommDecisionIdSource; }
            set { entityData.SaScCommDecisionIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DecisionNum", "Decision Num"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DecisionNum", "Decision Num", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Comments", "Comments", 200));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SA_PROMOTION"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SA_PROMOTION_ID", "DECISION_NUM", "DECISION_DATE", "STRT_WORK_FROM", "COMMENTS", "HISTORY_DATA_FLAG", "SA_STF_MEMBER_ID", "SA_CODE_SC_DEG_ID", "GS_APPROVAL_H_ID", "AS_FACULTY_INFO_ID", "SA_SC_COMM_DECISION_ID", "GS_COUNTRY_NODE_ID", "AS_NODE_ID", "Salary"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SaPromotionEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SaPromotion) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SaPromotion>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SaPromotion);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SaPromotion Entity 
		///</summary>
		protected virtual SaPromotion Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SaPromotion copy = new SaPromotion();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SaPromotionId = this.SaPromotionId;
					copy.OriginalSaPromotionId = this.OriginalSaPromotionId;
				copy.DecisionNum = this.DecisionNum;
				copy.DecisionDate = this.DecisionDate;
				copy.StrtWorkFrom = this.StrtWorkFrom;
				copy.Comments = this.Comments;
				copy.HistoryDataFlag = this.HistoryDataFlag;
				copy.SaStfMemberId = this.SaStfMemberId;
				copy.SaCodeScDegId = this.SaCodeScDegId;
				copy.GsApprovalHId = this.GsApprovalHId;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.SaScCommDecisionId = this.SaScCommDecisionId;
				copy.GsCountryNodeId = this.GsCountryNodeId;
				copy.AsNodeId = this.AsNodeId;
				copy.Salary = this.Salary;
			
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				copy.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				copy.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
			if (this.GsApprovalHIdSource != null && existingCopies.Contains(this.GsApprovalHIdSource))
				copy.GsApprovalHIdSource = existingCopies[this.GsApprovalHIdSource] as GsApprovalH;
			else
				copy.GsApprovalHIdSource = MakeCopyOf(this.GsApprovalHIdSource, existingCopies) as GsApprovalH;
			if (this.SaCodeScDegIdSource != null && existingCopies.Contains(this.SaCodeScDegIdSource))
				copy.SaCodeScDegIdSource = existingCopies[this.SaCodeScDegIdSource] as SaCodeScDeg;
			else
				copy.SaCodeScDegIdSource = MakeCopyOf(this.SaCodeScDegIdSource, existingCopies) as SaCodeScDeg;
			if (this.SaScCommDecisionIdSource != null && existingCopies.Contains(this.SaScCommDecisionIdSource))
				copy.SaScCommDecisionIdSource = existingCopies[this.SaScCommDecisionIdSource] as SaScCommDecision;
			else
				copy.SaScCommDecisionIdSource = MakeCopyOf(this.SaScCommDecisionIdSource, existingCopies) as SaScCommDecision;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SaPromotion Entity 
		///</summary>
		public virtual SaPromotion Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SaPromotion Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SaPromotion DeepCopy()
		{
			return EntityHelper.Clone<SaPromotion>(this as SaPromotion);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SaPromotionEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SaPromotionEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SaPromotionEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SaPromotionColumn column)
		{
			switch(column)
			{
					case SaPromotionColumn.SaPromotionId:
					return entityData.SaPromotionId != _originalData.SaPromotionId;
					case SaPromotionColumn.DecisionNum:
					return entityData.DecisionNum != _originalData.DecisionNum;
					case SaPromotionColumn.DecisionDate:
					return entityData.DecisionDate != _originalData.DecisionDate;
					case SaPromotionColumn.StrtWorkFrom:
					return entityData.StrtWorkFrom != _originalData.StrtWorkFrom;
					case SaPromotionColumn.Comments:
					return entityData.Comments != _originalData.Comments;
					case SaPromotionColumn.HistoryDataFlag:
					return entityData.HistoryDataFlag != _originalData.HistoryDataFlag;
					case SaPromotionColumn.SaStfMemberId:
					return entityData.SaStfMemberId != _originalData.SaStfMemberId;
					case SaPromotionColumn.SaCodeScDegId:
					return entityData.SaCodeScDegId != _originalData.SaCodeScDegId;
					case SaPromotionColumn.GsApprovalHId:
					return entityData.GsApprovalHId != _originalData.GsApprovalHId;
					case SaPromotionColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case SaPromotionColumn.SaScCommDecisionId:
					return entityData.SaScCommDecisionId != _originalData.SaScCommDecisionId;
					case SaPromotionColumn.GsCountryNodeId:
					return entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
					case SaPromotionColumn.AsNodeId:
					return entityData.AsNodeId != _originalData.AsNodeId;
					case SaPromotionColumn.Salary:
					return entityData.Salary != _originalData.Salary;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SaPromotionColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SaPromotionId != _originalData.SaPromotionId;
			result = result || entityData.DecisionNum != _originalData.DecisionNum;
			result = result || entityData.DecisionDate != _originalData.DecisionDate;
			result = result || entityData.StrtWorkFrom != _originalData.StrtWorkFrom;
			result = result || entityData.Comments != _originalData.Comments;
			result = result || entityData.HistoryDataFlag != _originalData.HistoryDataFlag;
			result = result || entityData.SaStfMemberId != _originalData.SaStfMemberId;
			result = result || entityData.SaCodeScDegId != _originalData.SaCodeScDegId;
			result = result || entityData.GsApprovalHId != _originalData.GsApprovalHId;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.SaScCommDecisionId != _originalData.SaScCommDecisionId;
			result = result || entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
			result = result || entityData.AsNodeId != _originalData.AsNodeId;
			result = result || entityData.Salary != _originalData.Salary;
			return result;
		}	
		
		///<summary>
		///  Returns a SaPromotion Entity with the original data.
		///</summary>
		public SaPromotion GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSaPromotion(
				_originalData.SaPromotionId,
				_originalData.DecisionNum,
				_originalData.DecisionDate,
				_originalData.StrtWorkFrom,
				_originalData.Comments,
				_originalData.HistoryDataFlag,
				_originalData.SaStfMemberId,
				_originalData.SaCodeScDegId,
				_originalData.GsApprovalHId,
				_originalData.AsFacultyInfoId,
				_originalData.SaScCommDecisionId,
				_originalData.GsCountryNodeId,
				_originalData.AsNodeId,
				_originalData.Salary
				);
				
			return (SaPromotion)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SaPromotionBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SaPromotionBase)
				return ValueEquals(this, (SaPromotionBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SaPromotionBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SaPromotionId.GetHashCode() ^ 
					this.DecisionNum.GetHashCode() ^ 
					this.DecisionDate.GetHashCode() ^ 
					((this.StrtWorkFrom == null) ? string.Empty : this.StrtWorkFrom.ToString()).GetHashCode() ^ 
					((this.Comments == null) ? string.Empty : this.Comments.ToString()).GetHashCode() ^ 
					this.HistoryDataFlag.GetHashCode() ^ 
					this.SaStfMemberId.GetHashCode() ^ 
					this.SaCodeScDegId.GetHashCode() ^ 
					((this.GsApprovalHId == null) ? string.Empty : this.GsApprovalHId.ToString()).GetHashCode() ^ 
					this.AsFacultyInfoId.GetHashCode() ^ 
					((this.SaScCommDecisionId == null) ? string.Empty : this.SaScCommDecisionId.ToString()).GetHashCode() ^ 
					((this.GsCountryNodeId == null) ? string.Empty : this.GsCountryNodeId.ToString()).GetHashCode() ^ 
					((this.AsNodeId == null) ? string.Empty : this.AsNodeId.ToString()).GetHashCode() ^ 
					((this.Salary == null) ? string.Empty : this.Salary.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SaPromotionBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SaPromotionBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SaPromotionBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SaPromotionBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SaPromotionBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SaPromotionBase Object1, SaPromotionBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SaPromotionId != Object2.SaPromotionId)
				equal = false;
			if (Object1.DecisionNum != Object2.DecisionNum)
				equal = false;
			if (Object1.DecisionDate != Object2.DecisionDate)
				equal = false;
			if ( Object1.StrtWorkFrom != null && Object2.StrtWorkFrom != null )
			{
				if (Object1.StrtWorkFrom != Object2.StrtWorkFrom)
					equal = false;
			}
			else if (Object1.StrtWorkFrom == null ^ Object2.StrtWorkFrom == null )
			{
				equal = false;
			}
			if ( Object1.Comments != null && Object2.Comments != null )
			{
				if (Object1.Comments != Object2.Comments)
					equal = false;
			}
			else if (Object1.Comments == null ^ Object2.Comments == null )
			{
				equal = false;
			}
			if (Object1.HistoryDataFlag != Object2.HistoryDataFlag)
				equal = false;
			if (Object1.SaStfMemberId != Object2.SaStfMemberId)
				equal = false;
			if (Object1.SaCodeScDegId != Object2.SaCodeScDegId)
				equal = false;
			if ( Object1.GsApprovalHId != null && Object2.GsApprovalHId != null )
			{
				if (Object1.GsApprovalHId != Object2.GsApprovalHId)
					equal = false;
			}
			else if (Object1.GsApprovalHId == null ^ Object2.GsApprovalHId == null )
			{
				equal = false;
			}
			if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
				equal = false;
			if ( Object1.SaScCommDecisionId != null && Object2.SaScCommDecisionId != null )
			{
				if (Object1.SaScCommDecisionId != Object2.SaScCommDecisionId)
					equal = false;
			}
			else if (Object1.SaScCommDecisionId == null ^ Object2.SaScCommDecisionId == null )
			{
				equal = false;
			}
			if ( Object1.GsCountryNodeId != null && Object2.GsCountryNodeId != null )
			{
				if (Object1.GsCountryNodeId != Object2.GsCountryNodeId)
					equal = false;
			}
			else if (Object1.GsCountryNodeId == null ^ Object2.GsCountryNodeId == null )
			{
				equal = false;
			}
			if ( Object1.AsNodeId != null && Object2.AsNodeId != null )
			{
				if (Object1.AsNodeId != Object2.AsNodeId)
					equal = false;
			}
			else if (Object1.AsNodeId == null ^ Object2.AsNodeId == null )
			{
				equal = false;
			}
			if ( Object1.Salary != null && Object2.Salary != null )
			{
				if (Object1.Salary != Object2.Salary)
					equal = false;
			}
			else if (Object1.Salary == null ^ Object2.Salary == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SaPromotionBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SaPromotionComparer GetComparer()
        {
            return new SaPromotionComparer();
        }
        */

        // Comparer delegates back to SaPromotion
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SaPromotion rhs, SaPromotionColumn which)
        {
            switch (which)
            {
            	
            	
            	case SaPromotionColumn.SaPromotionId:
            		return this.SaPromotionId.CompareTo(rhs.SaPromotionId);
            		
            		                 
            	
            	
            	case SaPromotionColumn.DecisionNum:
            		return this.DecisionNum.CompareTo(rhs.DecisionNum);
            		
            		                 
            	
            	
            	case SaPromotionColumn.DecisionDate:
            		return this.DecisionDate.CompareTo(rhs.DecisionDate);
            		
            		                 
            	
            	
            	case SaPromotionColumn.StrtWorkFrom:
            		return this.StrtWorkFrom.Value.CompareTo(rhs.StrtWorkFrom.Value);
            		
            		                 
            	
            	
            	case SaPromotionColumn.Comments:
            		return this.Comments.CompareTo(rhs.Comments);
            		
            		                 
            	
            	
            	case SaPromotionColumn.HistoryDataFlag:
            		return this.HistoryDataFlag.CompareTo(rhs.HistoryDataFlag);
            		
            		                 
            	
            	
            	case SaPromotionColumn.SaStfMemberId:
            		return this.SaStfMemberId.CompareTo(rhs.SaStfMemberId);
            		
            		                 
            	
            	
            	case SaPromotionColumn.SaCodeScDegId:
            		return this.SaCodeScDegId.CompareTo(rhs.SaCodeScDegId);
            		
            		                 
            	
            	
            	case SaPromotionColumn.GsApprovalHId:
            		return this.GsApprovalHId.Value.CompareTo(rhs.GsApprovalHId.Value);
            		
            		                 
            	
            	
            	case SaPromotionColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.CompareTo(rhs.AsFacultyInfoId);
            		
            		                 
            	
            	
            	case SaPromotionColumn.SaScCommDecisionId:
            		return this.SaScCommDecisionId.Value.CompareTo(rhs.SaScCommDecisionId.Value);
            		
            		                 
            	
            	
            	case SaPromotionColumn.GsCountryNodeId:
            		return this.GsCountryNodeId.Value.CompareTo(rhs.GsCountryNodeId.Value);
            		
            		                 
            	
            	
            	case SaPromotionColumn.AsNodeId:
            		return this.AsNodeId.Value.CompareTo(rhs.AsNodeId.Value);
            		
            		                 
            	
            	
            	case SaPromotionColumn.Salary:
            		return this.Salary.Value.CompareTo(rhs.Salary.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SaPromotionKey> Members
		
		// member variable for the EntityId property
		private SaPromotionKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SaPromotionKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SaPromotionKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SaPromotion")
					.Append("|").Append( this.SaPromotionId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{15}{14}- SaPromotionId: {0}{14}- DecisionNum: {1}{14}- DecisionDate: {2}{14}- StrtWorkFrom: {3}{14}- Comments: {4}{14}- HistoryDataFlag: {5}{14}- SaStfMemberId: {6}{14}- SaCodeScDegId: {7}{14}- GsApprovalHId: {8}{14}- AsFacultyInfoId: {9}{14}- SaScCommDecisionId: {10}{14}- GsCountryNodeId: {11}{14}- AsNodeId: {12}{14}- Salary: {13}{14}{16}", 
				this.SaPromotionId,
				this.DecisionNum,
				this.DecisionDate,
				(this.StrtWorkFrom == null) ? string.Empty : this.StrtWorkFrom.ToString(),
				(this.Comments == null) ? string.Empty : this.Comments.ToString(),
				this.HistoryDataFlag,
				this.SaStfMemberId,
				this.SaCodeScDegId,
				(this.GsApprovalHId == null) ? string.Empty : this.GsApprovalHId.ToString(),
				this.AsFacultyInfoId,
				(this.SaScCommDecisionId == null) ? string.Empty : this.SaScCommDecisionId.ToString(),
				(this.GsCountryNodeId == null) ? string.Empty : this.GsCountryNodeId.ToString(),
				(this.AsNodeId == null) ? string.Empty : this.AsNodeId.ToString(),
				(this.Salary == null) ? string.Empty : this.Salary.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SA_PROMOTION' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SaPromotionEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SA_PROMOTION_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SA_PROMOTION"</remarks>
		public System.Decimal SaPromotionId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSaPromotionId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// DECISION_NUM : 
		/// </summary>
		public System.String		  DecisionNum = string.Empty;
		
		/// <summary>
		/// DECISION_DATE : 
		/// </summary>
		public System.DateTime		  DecisionDate = DateTime.MinValue;
		
		/// <summary>
		/// STRT_WORK_FROM : 
		/// </summary>
		public System.DateTime?		  StrtWorkFrom = null;
		
		/// <summary>
		/// COMMENTS : 
		/// </summary>
		public System.String		  Comments = null;
		
		/// <summary>
		/// HISTORY_DATA_FLAG : 
		/// </summary>
		public System.Decimal		  HistoryDataFlag = 0.0m;
		
		/// <summary>
		/// SA_STF_MEMBER_ID : 
		/// </summary>
		public System.Decimal		  SaStfMemberId = 0.0m;
		
		/// <summary>
		/// SA_CODE_SC_DEG_ID : 
		/// </summary>
		public System.Decimal		  SaCodeScDegId = 0.0m;
		
		/// <summary>
		/// GS_APPROVAL_H_ID : 
		/// </summary>
		public System.Decimal?		  GsApprovalHId = null;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal		  AsFacultyInfoId = 0.0m;
		
		/// <summary>
		/// SA_SC_COMM_DECISION_ID : 
		/// </summary>
		public System.Decimal?		  SaScCommDecisionId = null;
		
		/// <summary>
		/// GS_COUNTRY_NODE_ID : 
		/// </summary>
		public System.Decimal?		  GsCountryNodeId = null;
		
		/// <summary>
		/// AS_NODE_ID : 
		/// </summary>
		public System.Decimal?		  AsNodeId = null;
		
		/// <summary>
		/// Salary : 
		/// </summary>
		public System.Decimal?		  Salary = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private SaStfMember _saStfMemberIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return this._saStfMemberIdSource; }
            set { this._saStfMemberIdSource = value; }
      	}
		private GsApprovalH _gsApprovalHidSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsApprovalH"/>.
		/// </summary>
		/// <value>The source GsApprovalH for GsApprovalHId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsApprovalH GsApprovalHIdSource
      	{
            get { return this._gsApprovalHidSource; }
            set { this._gsApprovalHidSource = value; }
      	}
		private SaCodeScDeg _saCodeScDegIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeScDeg"/>.
		/// </summary>
		/// <value>The source SaCodeScDeg for SaCodeScDegId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaCodeScDeg SaCodeScDegIdSource
      	{
            get { return this._saCodeScDegIdSource; }
            set { this._saCodeScDegIdSource = value; }
      	}
		private SaScCommDecision _saScCommDecisionIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaScCommDecision"/>.
		/// </summary>
		/// <value>The source SaScCommDecision for SaScCommDecisionId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaScCommDecision SaScCommDecisionIdSource
      	{
            get { return this._saScCommDecisionIdSource; }
            set { this._saScCommDecisionIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SaPromotionEntityData _tmp = new SaPromotionEntityData();
						
			_tmp.SaPromotionId = this.SaPromotionId;
			_tmp.OriginalSaPromotionId = this.OriginalSaPromotionId;
			
			_tmp.DecisionNum = this.DecisionNum;
			_tmp.DecisionDate = this.DecisionDate;
			_tmp.StrtWorkFrom = this.StrtWorkFrom;
			_tmp.Comments = this.Comments;
			_tmp.HistoryDataFlag = this.HistoryDataFlag;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.SaCodeScDegId = this.SaCodeScDegId;
			_tmp.GsApprovalHId = this.GsApprovalHId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.SaScCommDecisionId = this.SaScCommDecisionId;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.AsNodeId = this.AsNodeId;
			_tmp.Salary = this.Salary;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.SaStfMemberIdSource != null)
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource) as SaStfMember;
			if (this.GsApprovalHIdSource != null)
				_tmp.GsApprovalHIdSource = MakeCopyOf(this.GsApprovalHIdSource) as GsApprovalH;
			if (this.SaCodeScDegIdSource != null)
				_tmp.SaCodeScDegIdSource = MakeCopyOf(this.SaCodeScDegIdSource) as SaCodeScDeg;
			if (this.SaScCommDecisionIdSource != null)
				_tmp.SaScCommDecisionIdSource = MakeCopyOf(this.SaScCommDecisionIdSource) as SaScCommDecision;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SaPromotionEntityData _tmp = new SaPromotionEntityData();
						
			_tmp.SaPromotionId = this.SaPromotionId;
			_tmp.OriginalSaPromotionId = this.OriginalSaPromotionId;
			
			_tmp.DecisionNum = this.DecisionNum;
			_tmp.DecisionDate = this.DecisionDate;
			_tmp.StrtWorkFrom = this.StrtWorkFrom;
			_tmp.Comments = this.Comments;
			_tmp.HistoryDataFlag = this.HistoryDataFlag;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.SaCodeScDegId = this.SaCodeScDegId;
			_tmp.GsApprovalHId = this.GsApprovalHId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.SaScCommDecisionId = this.SaScCommDecisionId;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.AsNodeId = this.AsNodeId;
			_tmp.Salary = this.Salary;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				_tmp.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
			if (this.GsApprovalHIdSource != null && existingCopies.Contains(this.GsApprovalHIdSource))
				_tmp.GsApprovalHIdSource = existingCopies[this.GsApprovalHIdSource] as GsApprovalH;
			else
				_tmp.GsApprovalHIdSource = MakeCopyOf(this.GsApprovalHIdSource, existingCopies) as GsApprovalH;
			if (this.SaCodeScDegIdSource != null && existingCopies.Contains(this.SaCodeScDegIdSource))
				_tmp.SaCodeScDegIdSource = existingCopies[this.SaCodeScDegIdSource] as SaCodeScDeg;
			else
				_tmp.SaCodeScDegIdSource = MakeCopyOf(this.SaCodeScDegIdSource, existingCopies) as SaCodeScDeg;
			if (this.SaScCommDecisionIdSource != null && existingCopies.Contains(this.SaScCommDecisionIdSource))
				_tmp.SaScCommDecisionIdSource = existingCopies[this.SaScCommDecisionIdSource] as SaScCommDecision;
			else
				_tmp.SaScCommDecisionIdSource = MakeCopyOf(this.SaScCommDecisionIdSource, existingCopies) as SaScCommDecision;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaPromotionColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SaPromotionColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaPromotionColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SaPromotionColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaPromotionColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SaPromotionColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SaPromotionEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SaPromotionEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaPromotionColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SaPromotionColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SaPromotionEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SaPromotionEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SaPromotionEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SaPromotion"/> object.
	/// </remarks>
	public class SaPromotionEventArgs : System.EventArgs
	{
		private SaPromotionColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SaPromotionEventArgs class.
		///</summary>
		public SaPromotionEventArgs(SaPromotionColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SaPromotionEventArgs class.
		///</summary>
		public SaPromotionEventArgs(SaPromotionColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SaPromotionColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SaPromotionColumn" />
		public SaPromotionColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SaPromotion related events.
	///</summary>
	public delegate void SaPromotionEventHandler(object sender, SaPromotionEventArgs e);
	
	#region SaPromotionComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SaPromotionComparer : System.Collections.Generic.IComparer<SaPromotion>
	{
		SaPromotionColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SaPromotionComparer"/> class.
        /// </summary>
		public SaPromotionComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SaPromotionComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SaPromotionComparer(SaPromotionColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SaPromotion"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SaPromotion"/> to compare.</param>
        /// <param name="b">The second <c>SaPromotion</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SaPromotion a, SaPromotion b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SaPromotion entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SaPromotion a, SaPromotion b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SaPromotionColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SaPromotionKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SaPromotion"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SaPromotionKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SaPromotionKey class.
		/// </summary>
		public SaPromotionKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SaPromotionKey class.
		/// </summary>
		public SaPromotionKey(SaPromotionBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SaPromotionId = entity.SaPromotionId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SaPromotionKey class.
		/// </summary>
		public SaPromotionKey(System.Decimal _saPromotionId)
		{
			#region Init Properties

			this.SaPromotionId = _saPromotionId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SaPromotionBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SaPromotionBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SaPromotionId property
		private System.Decimal _saPromotionId;
		
		/// <summary>
		/// Gets or sets the SaPromotionId property.
		/// </summary>
		public System.Decimal SaPromotionId
		{
			get { return _saPromotionId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SaPromotionId = value;
				
				_saPromotionId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SaPromotionId = ( values["SaPromotionId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SaPromotionId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SaPromotionId", SaPromotionId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SaPromotionId: {0}{1}",
								SaPromotionId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SaPromotionColumn Enum
	
	/// <summary>
	/// Enumerate the SaPromotion columns.
	/// </summary>
	[Serializable]
	public enum SaPromotionColumn : int
	{
		/// <summary>
		/// SaPromotionId : 
		/// </summary>
		[EnumTextValue("SA_PROMOTION_ID")]
		[ColumnEnum("SA_PROMOTION_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SaPromotionId = 1,
		/// <summary>
		/// DecisionNum : 
		/// </summary>
		[EnumTextValue("DECISION_NUM")]
		[ColumnEnum("DECISION_NUM", typeof(System.String), System.Data.DbType.String, false, false, false, 10)]
		DecisionNum = 2,
		/// <summary>
		/// DecisionDate : 
		/// </summary>
		[EnumTextValue("DECISION_DATE")]
		[ColumnEnum("DECISION_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		DecisionDate = 3,
		/// <summary>
		/// StrtWorkFrom : 
		/// </summary>
		[EnumTextValue("STRT_WORK_FROM")]
		[ColumnEnum("STRT_WORK_FROM", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		StrtWorkFrom = 4,
		/// <summary>
		/// Comments : 
		/// </summary>
		[EnumTextValue("COMMENTS")]
		[ColumnEnum("COMMENTS", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		Comments = 5,
		/// <summary>
		/// HistoryDataFlag : 
		/// </summary>
		[EnumTextValue("HISTORY_DATA_FLAG")]
		[ColumnEnum("HISTORY_DATA_FLAG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		HistoryDataFlag = 6,
		/// <summary>
		/// SaStfMemberId : 
		/// </summary>
		[EnumTextValue("SA_STF_MEMBER_ID")]
		[ColumnEnum("SA_STF_MEMBER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaStfMemberId = 7,
		/// <summary>
		/// SaCodeScDegId : 
		/// </summary>
		[EnumTextValue("SA_CODE_SC_DEG_ID")]
		[ColumnEnum("SA_CODE_SC_DEG_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaCodeScDegId = 8,
		/// <summary>
		/// GsApprovalHId : 
		/// </summary>
		[EnumTextValue("GS_APPROVAL_H_ID")]
		[ColumnEnum("GS_APPROVAL_H_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsApprovalHId = 9,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsFacultyInfoId = 10,
		/// <summary>
		/// SaScCommDecisionId : 
		/// </summary>
		[EnumTextValue("SA_SC_COMM_DECISION_ID")]
		[ColumnEnum("SA_SC_COMM_DECISION_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SaScCommDecisionId = 11,
		/// <summary>
		/// GsCountryNodeId : 
		/// </summary>
		[EnumTextValue("GS_COUNTRY_NODE_ID")]
		[ColumnEnum("GS_COUNTRY_NODE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCountryNodeId = 12,
		/// <summary>
		/// AsNodeId : 
		/// </summary>
		[EnumTextValue("AS_NODE_ID")]
		[ColumnEnum("AS_NODE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsNodeId = 13,
		/// <summary>
		/// Salary : 
		/// </summary>
		[EnumTextValue("Salary")]
		[ColumnEnum("Salary", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Salary = 14
	}//End enum

	#endregion SaPromotionColumn Enum

} // end namespace
