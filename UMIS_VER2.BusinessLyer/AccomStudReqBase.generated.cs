
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AccomStudReq.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ACCOM_STUD_REQ' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AccomStudReqBase : EntityBase, IAccomStudReq, IEntityId<AccomStudReqKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AccomStudReqEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AccomStudReqEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AccomStudReqEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AccomStudReq> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AccomStudReqEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AccomStudReqEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AccomStudReqBase"/> instance.
		///</summary>
		public AccomStudReqBase()
		{
			this.entityData = new AccomStudReqEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AccomStudReqBase"/> instance.
		///</summary>
		///<param name="_accomStudReqId">Accomodation  طلب اقامة</param>
		///<param name="_edAcadYearId">العام الاكاديمى</param>
		///<param name="_edCodeSemesterId">الفصل الدراسي</param>
		///<param name="_edStudId">الطالب</param>
		///<param name="_maritalFlg">حالة السكن : أعزب / متزوج</param>
		///<param name="_accomInFlg">قيم بالسكن الجامعى أم الخارجي؟ In / out</param>
		///<param name="_reqDate">تاريخ الطلب</param>
		///<param name="_accomCdeRoomTypeId">نوع الغرفة  فردى ثنائي ثلاثى....</param>
		///<param name="_feeCodeItemId">FEE_CODE_TYPE_ID=10*</param>
		///<param name="_feeAmount">القيمة المستحقة*</param>
		///<param name="_gsCodeCurrencyId">العملة =default*</param>
		///<param name="_feeStudFeeItemId">بند مصروف سكن على الطالب</param>
		///<param name="_notes">ملاحظات</param>
		///<param name="_gsCodeReqStatusId">حالة الطلب</param>
		///<param name="_approveFlg">مؤشر اعتماد</param>
		///<param name="_approveDate">تاريخ اعتماد</param>
		///<param name="_attchdDocPath">Attached file</param>
		///<param name="_fromDate">استلام</param>
		///<param name="_toDate">اخلاء</param>
		///<param name="_reqNum">رقم الطلب</param>
		///<param name="_airCondFlg">مكيف-  غير مكيف</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public AccomStudReqBase(System.Decimal _accomStudReqId, System.Decimal _edAcadYearId, 
			System.Decimal? _edCodeSemesterId, System.Decimal _edStudId, System.Boolean _maritalFlg, 
			System.Boolean _accomInFlg, System.DateTime _reqDate, System.Int32? _accomCdeRoomTypeId, 
			System.Decimal? _feeCodeItemId, System.Decimal? _feeAmount, System.Decimal? _gsCodeCurrencyId, 
			System.Decimal? _feeStudFeeItemId, System.String _notes, System.Decimal _gsCodeReqStatusId, 
			System.Int32? _approveFlg, System.DateTime? _approveDate, System.String _attchdDocPath, 
			System.DateTime? _fromDate, System.DateTime? _toDate, System.Decimal? _reqNum, 
			System.Boolean? _airCondFlg, System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			this.entityData = new AccomStudReqEntityData();
			this.backupData = null;

			this.AccomStudReqId = _accomStudReqId;
			this.EdAcadYearId = _edAcadYearId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.EdStudId = _edStudId;
			this.MaritalFlg = _maritalFlg;
			this.AccomInFlg = _accomInFlg;
			this.ReqDate = _reqDate;
			this.AccomCdeRoomTypeId = _accomCdeRoomTypeId;
			this.FeeCodeItemId = _feeCodeItemId;
			this.FeeAmount = _feeAmount;
			this.GsCodeCurrencyId = _gsCodeCurrencyId;
			this.FeeStudFeeItemId = _feeStudFeeItemId;
			this.Notes = _notes;
			this.GsCodeReqStatusId = _gsCodeReqStatusId;
			this.ApproveFlg = _approveFlg;
			this.ApproveDate = _approveDate;
			this.AttchdDocPath = _attchdDocPath;
			this.FromDate = _fromDate;
			this.ToDate = _toDate;
			this.ReqNum = _reqNum;
			this.AirCondFlg = _airCondFlg;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AccomStudReq"/> instance.
		///</summary>
		///<param name="_accomStudReqId">Accomodation  طلب اقامة</param>
		///<param name="_edAcadYearId">العام الاكاديمى</param>
		///<param name="_edCodeSemesterId">الفصل الدراسي</param>
		///<param name="_edStudId">الطالب</param>
		///<param name="_maritalFlg">حالة السكن : أعزب / متزوج</param>
		///<param name="_accomInFlg">قيم بالسكن الجامعى أم الخارجي؟ In / out</param>
		///<param name="_reqDate">تاريخ الطلب</param>
		///<param name="_accomCdeRoomTypeId">نوع الغرفة  فردى ثنائي ثلاثى....</param>
		///<param name="_feeCodeItemId">FEE_CODE_TYPE_ID=10*</param>
		///<param name="_feeAmount">القيمة المستحقة*</param>
		///<param name="_gsCodeCurrencyId">العملة =default*</param>
		///<param name="_feeStudFeeItemId">بند مصروف سكن على الطالب</param>
		///<param name="_notes">ملاحظات</param>
		///<param name="_gsCodeReqStatusId">حالة الطلب</param>
		///<param name="_approveFlg">مؤشر اعتماد</param>
		///<param name="_approveDate">تاريخ اعتماد</param>
		///<param name="_attchdDocPath">Attached file</param>
		///<param name="_fromDate">استلام</param>
		///<param name="_toDate">اخلاء</param>
		///<param name="_reqNum">رقم الطلب</param>
		///<param name="_airCondFlg">مكيف-  غير مكيف</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static AccomStudReq CreateAccomStudReq(System.Decimal _accomStudReqId, System.Decimal _edAcadYearId, 
			System.Decimal? _edCodeSemesterId, System.Decimal _edStudId, System.Boolean _maritalFlg, 
			System.Boolean _accomInFlg, System.DateTime _reqDate, System.Int32? _accomCdeRoomTypeId, 
			System.Decimal? _feeCodeItemId, System.Decimal? _feeAmount, System.Decimal? _gsCodeCurrencyId, 
			System.Decimal? _feeStudFeeItemId, System.String _notes, System.Decimal _gsCodeReqStatusId, 
			System.Int32? _approveFlg, System.DateTime? _approveDate, System.String _attchdDocPath, 
			System.DateTime? _fromDate, System.DateTime? _toDate, System.Decimal? _reqNum, 
			System.Boolean? _airCondFlg, System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			AccomStudReq newAccomStudReq = new AccomStudReq();
			newAccomStudReq.AccomStudReqId = _accomStudReqId;
			newAccomStudReq.EdAcadYearId = _edAcadYearId;
			newAccomStudReq.EdCodeSemesterId = _edCodeSemesterId;
			newAccomStudReq.EdStudId = _edStudId;
			newAccomStudReq.MaritalFlg = _maritalFlg;
			newAccomStudReq.AccomInFlg = _accomInFlg;
			newAccomStudReq.ReqDate = _reqDate;
			newAccomStudReq.AccomCdeRoomTypeId = _accomCdeRoomTypeId;
			newAccomStudReq.FeeCodeItemId = _feeCodeItemId;
			newAccomStudReq.FeeAmount = _feeAmount;
			newAccomStudReq.GsCodeCurrencyId = _gsCodeCurrencyId;
			newAccomStudReq.FeeStudFeeItemId = _feeStudFeeItemId;
			newAccomStudReq.Notes = _notes;
			newAccomStudReq.GsCodeReqStatusId = _gsCodeReqStatusId;
			newAccomStudReq.ApproveFlg = _approveFlg;
			newAccomStudReq.ApproveDate = _approveDate;
			newAccomStudReq.AttchdDocPath = _attchdDocPath;
			newAccomStudReq.FromDate = _fromDate;
			newAccomStudReq.ToDate = _toDate;
			newAccomStudReq.ReqNum = _reqNum;
			newAccomStudReq.AirCondFlg = _airCondFlg;
			newAccomStudReq.SeUserId = _seUserId;
			newAccomStudReq.LastDate = _lastDate;
			return newAccomStudReq;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AccomStudReqId property. 
		///		Accomodation  طلب اقامة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Accomodation  طلب اقامة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal AccomStudReqId
		{
			get
			{
				return this.entityData.AccomStudReqId; 
			}
			
			set
			{
				if (this.entityData.AccomStudReqId == value)
					return;
					
				OnColumnChanging(AccomStudReqColumn.AccomStudReqId, this.entityData.AccomStudReqId);
				this.entityData.AccomStudReqId = value;
				this.EntityId.AccomStudReqId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudReqColumn.AccomStudReqId, this.entityData.AccomStudReqId);
				OnPropertyChanged("AccomStudReqId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ACCOM_STUD_REQ_ID property.
		///		Accomodation  طلب اقامة
		/// </summary>
		/// <remarks>This is the original value of the ACCOM_STUD_REQ_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalAccomStudReqId
		{
			get { return this.entityData.OriginalAccomStudReqId; }
			set { this.entityData.OriginalAccomStudReqId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		العام الاكاديمى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"العام الاكاديمى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(AccomStudReqColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudReqColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		الفصل الدراسي
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeSemesterIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"الفصل الدراسي"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(AccomStudReqColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudReqColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		الطالب
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"الطالب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(AccomStudReqColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudReqColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaritalFlg property. 
		///		حالة السكن : أعزب / متزوج
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"حالة السكن : أعزب / متزوج"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean MaritalFlg
		{
			get
			{
				return this.entityData.MaritalFlg; 
			}
			
			set
			{
				if (this.entityData.MaritalFlg == value)
					return;
					
				OnColumnChanging(AccomStudReqColumn.MaritalFlg, this.entityData.MaritalFlg);
				this.entityData.MaritalFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudReqColumn.MaritalFlg, this.entityData.MaritalFlg);
				OnPropertyChanged("MaritalFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccomInFlg property. 
		///		قيم بالسكن الجامعى أم الخارجي؟ In / out
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"قيم بالسكن الجامعى أم الخارجي؟ In / out"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean AccomInFlg
		{
			get
			{
				return this.entityData.AccomInFlg; 
			}
			
			set
			{
				if (this.entityData.AccomInFlg == value)
					return;
					
				OnColumnChanging(AccomStudReqColumn.AccomInFlg, this.entityData.AccomInFlg);
				this.entityData.AccomInFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudReqColumn.AccomInFlg, this.entityData.AccomInFlg);
				OnPropertyChanged("AccomInFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReqDate property. 
		///		تاريخ الطلب
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"تاريخ الطلب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ReqDate
		{
			get
			{
				return this.entityData.ReqDate; 
			}
			
			set
			{
				if (this.entityData.ReqDate == value)
					return;
					
				OnColumnChanging(AccomStudReqColumn.ReqDate, this.entityData.ReqDate);
				this.entityData.ReqDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudReqColumn.ReqDate, this.entityData.ReqDate);
				OnPropertyChanged("ReqDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccomCdeRoomTypeId property. 
		///		نوع الغرفة  فردى ثنائي ثلاثى....
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsAccomCdeRoomTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"نوع الغرفة  فردى ثنائي ثلاثى...."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? AccomCdeRoomTypeId
		{
			get
			{
				return this.entityData.AccomCdeRoomTypeId; 
			}
			
			set
			{
				if (this.entityData.AccomCdeRoomTypeId == value)
					return;
					
				OnColumnChanging(AccomStudReqColumn.AccomCdeRoomTypeId, this.entityData.AccomCdeRoomTypeId);
				this.entityData.AccomCdeRoomTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudReqColumn.AccomCdeRoomTypeId, this.entityData.AccomCdeRoomTypeId);
				OnPropertyChanged("AccomCdeRoomTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeCodeItemId property. 
		///		FEE_CODE_TYPE_ID=10*
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeCodeItemIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"FEE_CODE_TYPE_ID=10*"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeeCodeItemId
		{
			get
			{
				return this.entityData.FeeCodeItemId; 
			}
			
			set
			{
				if (this.entityData.FeeCodeItemId == value)
					return;
					
				OnColumnChanging(AccomStudReqColumn.FeeCodeItemId, this.entityData.FeeCodeItemId);
				this.entityData.FeeCodeItemId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudReqColumn.FeeCodeItemId, this.entityData.FeeCodeItemId);
				OnPropertyChanged("FeeCodeItemId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeAmount property. 
		///		القيمة المستحقة*
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeAmountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"القيمة المستحقة*"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeeAmount
		{
			get
			{
				return this.entityData.FeeAmount; 
			}
			
			set
			{
				if (this.entityData.FeeAmount == value)
					return;
					
				OnColumnChanging(AccomStudReqColumn.FeeAmount, this.entityData.FeeAmount);
				this.entityData.FeeAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudReqColumn.FeeAmount, this.entityData.FeeAmount);
				OnPropertyChanged("FeeAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeCurrencyId property. 
		///		العملة =default*
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCodeCurrencyIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"العملة =default*"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCodeCurrencyId
		{
			get
			{
				return this.entityData.GsCodeCurrencyId; 
			}
			
			set
			{
				if (this.entityData.GsCodeCurrencyId == value)
					return;
					
				OnColumnChanging(AccomStudReqColumn.GsCodeCurrencyId, this.entityData.GsCodeCurrencyId);
				this.entityData.GsCodeCurrencyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudReqColumn.GsCodeCurrencyId, this.entityData.GsCodeCurrencyId);
				OnPropertyChanged("GsCodeCurrencyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeStudFeeItemId property. 
		///		بند مصروف سكن على الطالب
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeStudFeeItemIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"بند مصروف سكن على الطالب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeeStudFeeItemId
		{
			get
			{
				return this.entityData.FeeStudFeeItemId; 
			}
			
			set
			{
				if (this.entityData.FeeStudFeeItemId == value)
					return;
					
				OnColumnChanging(AccomStudReqColumn.FeeStudFeeItemId, this.entityData.FeeStudFeeItemId);
				this.entityData.FeeStudFeeItemId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudReqColumn.FeeStudFeeItemId, this.entityData.FeeStudFeeItemId);
				OnPropertyChanged("FeeStudFeeItemId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		ملاحظات
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"ملاحظات"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(AccomStudReqColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudReqColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeReqStatusId property. 
		///		حالة الطلب
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"حالة الطلب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsCodeReqStatusId
		{
			get
			{
				return this.entityData.GsCodeReqStatusId; 
			}
			
			set
			{
				if (this.entityData.GsCodeReqStatusId == value)
					return;
					
				OnColumnChanging(AccomStudReqColumn.GsCodeReqStatusId, this.entityData.GsCodeReqStatusId);
				this.entityData.GsCodeReqStatusId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudReqColumn.GsCodeReqStatusId, this.entityData.GsCodeReqStatusId);
				OnPropertyChanged("GsCodeReqStatusId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApproveFlg property. 
		///		مؤشر اعتماد
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsApproveFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مؤشر اعتماد"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ApproveFlg
		{
			get
			{
				return this.entityData.ApproveFlg; 
			}
			
			set
			{
				if (this.entityData.ApproveFlg == value)
					return;
					
				OnColumnChanging(AccomStudReqColumn.ApproveFlg, this.entityData.ApproveFlg);
				this.entityData.ApproveFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudReqColumn.ApproveFlg, this.entityData.ApproveFlg);
				OnPropertyChanged("ApproveFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApproveDate property. 
		///		تاريخ اعتماد
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsApproveDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ اعتماد"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ApproveDate
		{
			get
			{
				return this.entityData.ApproveDate; 
			}
			
			set
			{
				if (this.entityData.ApproveDate == value)
					return;
					
				OnColumnChanging(AccomStudReqColumn.ApproveDate, this.entityData.ApproveDate);
				this.entityData.ApproveDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudReqColumn.ApproveDate, this.entityData.ApproveDate);
				OnPropertyChanged("ApproveDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AttchdDocPath property. 
		///		Attached file
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Attached file"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String AttchdDocPath
		{
			get
			{
				return this.entityData.AttchdDocPath; 
			}
			
			set
			{
				if (this.entityData.AttchdDocPath == value)
					return;
					
				OnColumnChanging(AccomStudReqColumn.AttchdDocPath, this.entityData.AttchdDocPath);
				this.entityData.AttchdDocPath = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudReqColumn.AttchdDocPath, this.entityData.AttchdDocPath);
				OnPropertyChanged("AttchdDocPath");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FromDate property. 
		///		استلام
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsFromDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"استلام"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? FromDate
		{
			get
			{
				return this.entityData.FromDate; 
			}
			
			set
			{
				if (this.entityData.FromDate == value)
					return;
					
				OnColumnChanging(AccomStudReqColumn.FromDate, this.entityData.FromDate);
				this.entityData.FromDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudReqColumn.FromDate, this.entityData.FromDate);
				OnPropertyChanged("FromDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ToDate property. 
		///		اخلاء
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsToDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"اخلاء"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ToDate
		{
			get
			{
				return this.entityData.ToDate; 
			}
			
			set
			{
				if (this.entityData.ToDate == value)
					return;
					
				OnColumnChanging(AccomStudReqColumn.ToDate, this.entityData.ToDate);
				this.entityData.ToDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudReqColumn.ToDate, this.entityData.ToDate);
				OnPropertyChanged("ToDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReqNum property. 
		///		رقم الطلب
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsReqNumNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"رقم الطلب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ReqNum
		{
			get
			{
				return this.entityData.ReqNum; 
			}
			
			set
			{
				if (this.entityData.ReqNum == value)
					return;
					
				OnColumnChanging(AccomStudReqColumn.ReqNum, this.entityData.ReqNum);
				this.entityData.ReqNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudReqColumn.ReqNum, this.entityData.ReqNum);
				OnPropertyChanged("ReqNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AirCondFlg property. 
		///		مكيف-  غير مكيف
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsAirCondFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مكيف-  غير مكيف"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? AirCondFlg
		{
			get
			{
				return this.entityData.AirCondFlg; 
			}
			
			set
			{
				if (this.entityData.AirCondFlg == value)
					return;
					
				OnColumnChanging(AccomStudReqColumn.AirCondFlg, this.entityData.AirCondFlg);
				this.entityData.AirCondFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudReqColumn.AirCondFlg, this.entityData.AirCondFlg);
				OnPropertyChanged("AirCondFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(AccomStudReqColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudReqColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(AccomStudReqColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomStudReqColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AccomCdeRoomType"/>.
		/// </summary>
		/// <value>The source AccomCdeRoomType for AccomCdeRoomTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AccomCdeRoomType AccomCdeRoomTypeIdSource
      	{
            get { return entityData.AccomCdeRoomTypeIdSource; }
            set { entityData.AccomCdeRoomTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeItem"/>.
		/// </summary>
		/// <value>The source FeeCodeItem for FeeCodeItemId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeCodeItem FeeCodeItemIdSource
      	{
            get { return entityData.FeeCodeItemIdSource; }
            set { entityData.FeeCodeItemIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeStudFeeItem"/>.
		/// </summary>
		/// <value>The source FeeStudFeeItem for FeeStudFeeItemId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeStudFeeItem FeeStudFeeItemIdSource
      	{
            get { return entityData.FeeStudFeeItemIdSource; }
            set { entityData.FeeStudFeeItemIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCurrency"/>.
		/// </summary>
		/// <value>The source GsCodeCurrency for GsCodeCurrencyId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeCurrency GsCodeCurrencyIdSource
      	{
            get { return entityData.GsCodeCurrencyIdSource; }
            set { entityData.GsCodeCurrencyIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeReqStatus"/>.
		/// </summary>
		/// <value>The source GsCodeReqStatus for GsCodeReqStatusId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeReqStatus GsCodeReqStatusIdSource
      	{
            get { return entityData.GsCodeReqStatusIdSource; }
            set { entityData.GsCodeReqStatusIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of AccomWfRequestApprove objects
		///	which are related to this object through the relation FK_ACCOM_WF_REQUEST_APPROVE_ACCOM_STUD_REQ
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AccomWfRequestApprove> AccomWfRequestApproveCollection
		{
			get { return entityData.AccomWfRequestApproveCollection; }
			set { entityData.AccomWfRequestApproveCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 200));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ACCOM_STUD_REQ"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ACCOM_STUD_REQ_ID", "ED_ACAD_YEAR_ID", "ED_CODE_SEMESTER_ID", "ED_STUD_ID", "MARITAL_FLG", "ACCOM_IN_FLG", "REQ_DATE", "ACCOM_CDE_ROOM_TYPE_ID", "FEE_CODE_ITEM_ID", "FEE_AMOUNT", "GS_CODE_CURRENCY_ID", "FEE_STUD_FEE_ITEM_ID", "NOTES", "GS_CODE_REQ_STATUS_ID", "APPROVE_FLG", "APPROVE_DATE", "ATTCHD_DOC_PATH", "FROM_DATE", "TO_DATE", "REQ_NUM", "AIR_COND_FLG", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AccomStudReqEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AccomStudReq) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AccomStudReq>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AccomStudReq);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AccomStudReq Entity 
		///</summary>
		protected virtual AccomStudReq Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AccomStudReq copy = new AccomStudReq();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AccomStudReqId = this.AccomStudReqId;
					copy.OriginalAccomStudReqId = this.OriginalAccomStudReqId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.EdStudId = this.EdStudId;
				copy.MaritalFlg = this.MaritalFlg;
				copy.AccomInFlg = this.AccomInFlg;
				copy.ReqDate = this.ReqDate;
				copy.AccomCdeRoomTypeId = this.AccomCdeRoomTypeId;
				copy.FeeCodeItemId = this.FeeCodeItemId;
				copy.FeeAmount = this.FeeAmount;
				copy.GsCodeCurrencyId = this.GsCodeCurrencyId;
				copy.FeeStudFeeItemId = this.FeeStudFeeItemId;
				copy.Notes = this.Notes;
				copy.GsCodeReqStatusId = this.GsCodeReqStatusId;
				copy.ApproveFlg = this.ApproveFlg;
				copy.ApproveDate = this.ApproveDate;
				copy.AttchdDocPath = this.AttchdDocPath;
				copy.FromDate = this.FromDate;
				copy.ToDate = this.ToDate;
				copy.ReqNum = this.ReqNum;
				copy.AirCondFlg = this.AirCondFlg;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.AccomCdeRoomTypeIdSource != null && existingCopies.Contains(this.AccomCdeRoomTypeIdSource))
				copy.AccomCdeRoomTypeIdSource = existingCopies[this.AccomCdeRoomTypeIdSource] as AccomCdeRoomType;
			else
				copy.AccomCdeRoomTypeIdSource = MakeCopyOf(this.AccomCdeRoomTypeIdSource, existingCopies) as AccomCdeRoomType;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.FeeCodeItemIdSource != null && existingCopies.Contains(this.FeeCodeItemIdSource))
				copy.FeeCodeItemIdSource = existingCopies[this.FeeCodeItemIdSource] as FeeCodeItem;
			else
				copy.FeeCodeItemIdSource = MakeCopyOf(this.FeeCodeItemIdSource, existingCopies) as FeeCodeItem;
			if (this.FeeStudFeeItemIdSource != null && existingCopies.Contains(this.FeeStudFeeItemIdSource))
				copy.FeeStudFeeItemIdSource = existingCopies[this.FeeStudFeeItemIdSource] as FeeStudFeeItem;
			else
				copy.FeeStudFeeItemIdSource = MakeCopyOf(this.FeeStudFeeItemIdSource, existingCopies) as FeeStudFeeItem;
			if (this.GsCodeCurrencyIdSource != null && existingCopies.Contains(this.GsCodeCurrencyIdSource))
				copy.GsCodeCurrencyIdSource = existingCopies[this.GsCodeCurrencyIdSource] as GsCodeCurrency;
			else
				copy.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource, existingCopies) as GsCodeCurrency;
			if (this.GsCodeReqStatusIdSource != null && existingCopies.Contains(this.GsCodeReqStatusIdSource))
				copy.GsCodeReqStatusIdSource = existingCopies[this.GsCodeReqStatusIdSource] as GsCodeReqStatus;
			else
				copy.GsCodeReqStatusIdSource = MakeCopyOf(this.GsCodeReqStatusIdSource, existingCopies) as GsCodeReqStatus;
		
			//deep copy nested objects
			copy.AccomWfRequestApproveCollection = (TList<AccomWfRequestApprove>) MakeCopyOf(this.AccomWfRequestApproveCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AccomStudReq Entity 
		///</summary>
		public virtual AccomStudReq Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AccomStudReq Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AccomStudReq DeepCopy()
		{
			return EntityHelper.Clone<AccomStudReq>(this as AccomStudReq);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AccomStudReqEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AccomStudReqEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AccomStudReqEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AccomStudReqColumn column)
		{
			switch(column)
			{
					case AccomStudReqColumn.AccomStudReqId:
					return entityData.AccomStudReqId != _originalData.AccomStudReqId;
					case AccomStudReqColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case AccomStudReqColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case AccomStudReqColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case AccomStudReqColumn.MaritalFlg:
					return entityData.MaritalFlg != _originalData.MaritalFlg;
					case AccomStudReqColumn.AccomInFlg:
					return entityData.AccomInFlg != _originalData.AccomInFlg;
					case AccomStudReqColumn.ReqDate:
					return entityData.ReqDate != _originalData.ReqDate;
					case AccomStudReqColumn.AccomCdeRoomTypeId:
					return entityData.AccomCdeRoomTypeId != _originalData.AccomCdeRoomTypeId;
					case AccomStudReqColumn.FeeCodeItemId:
					return entityData.FeeCodeItemId != _originalData.FeeCodeItemId;
					case AccomStudReqColumn.FeeAmount:
					return entityData.FeeAmount != _originalData.FeeAmount;
					case AccomStudReqColumn.GsCodeCurrencyId:
					return entityData.GsCodeCurrencyId != _originalData.GsCodeCurrencyId;
					case AccomStudReqColumn.FeeStudFeeItemId:
					return entityData.FeeStudFeeItemId != _originalData.FeeStudFeeItemId;
					case AccomStudReqColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case AccomStudReqColumn.GsCodeReqStatusId:
					return entityData.GsCodeReqStatusId != _originalData.GsCodeReqStatusId;
					case AccomStudReqColumn.ApproveFlg:
					return entityData.ApproveFlg != _originalData.ApproveFlg;
					case AccomStudReqColumn.ApproveDate:
					return entityData.ApproveDate != _originalData.ApproveDate;
					case AccomStudReqColumn.AttchdDocPath:
					return entityData.AttchdDocPath != _originalData.AttchdDocPath;
					case AccomStudReqColumn.FromDate:
					return entityData.FromDate != _originalData.FromDate;
					case AccomStudReqColumn.ToDate:
					return entityData.ToDate != _originalData.ToDate;
					case AccomStudReqColumn.ReqNum:
					return entityData.ReqNum != _originalData.ReqNum;
					case AccomStudReqColumn.AirCondFlg:
					return entityData.AirCondFlg != _originalData.AirCondFlg;
					case AccomStudReqColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case AccomStudReqColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AccomStudReqColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AccomStudReqId != _originalData.AccomStudReqId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.MaritalFlg != _originalData.MaritalFlg;
			result = result || entityData.AccomInFlg != _originalData.AccomInFlg;
			result = result || entityData.ReqDate != _originalData.ReqDate;
			result = result || entityData.AccomCdeRoomTypeId != _originalData.AccomCdeRoomTypeId;
			result = result || entityData.FeeCodeItemId != _originalData.FeeCodeItemId;
			result = result || entityData.FeeAmount != _originalData.FeeAmount;
			result = result || entityData.GsCodeCurrencyId != _originalData.GsCodeCurrencyId;
			result = result || entityData.FeeStudFeeItemId != _originalData.FeeStudFeeItemId;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.GsCodeReqStatusId != _originalData.GsCodeReqStatusId;
			result = result || entityData.ApproveFlg != _originalData.ApproveFlg;
			result = result || entityData.ApproveDate != _originalData.ApproveDate;
			result = result || entityData.AttchdDocPath != _originalData.AttchdDocPath;
			result = result || entityData.FromDate != _originalData.FromDate;
			result = result || entityData.ToDate != _originalData.ToDate;
			result = result || entityData.ReqNum != _originalData.ReqNum;
			result = result || entityData.AirCondFlg != _originalData.AirCondFlg;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a AccomStudReq Entity with the original data.
		///</summary>
		public AccomStudReq GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAccomStudReq(
				_originalData.AccomStudReqId,
				_originalData.EdAcadYearId,
				_originalData.EdCodeSemesterId,
				_originalData.EdStudId,
				_originalData.MaritalFlg,
				_originalData.AccomInFlg,
				_originalData.ReqDate,
				_originalData.AccomCdeRoomTypeId,
				_originalData.FeeCodeItemId,
				_originalData.FeeAmount,
				_originalData.GsCodeCurrencyId,
				_originalData.FeeStudFeeItemId,
				_originalData.Notes,
				_originalData.GsCodeReqStatusId,
				_originalData.ApproveFlg,
				_originalData.ApproveDate,
				_originalData.AttchdDocPath,
				_originalData.FromDate,
				_originalData.ToDate,
				_originalData.ReqNum,
				_originalData.AirCondFlg,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (AccomStudReq)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AccomStudReqBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AccomStudReqBase)
				return ValueEquals(this, (AccomStudReqBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AccomStudReqBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AccomStudReqId.GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					((this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString()).GetHashCode() ^ 
					this.EdStudId.GetHashCode() ^ 
					this.MaritalFlg.GetHashCode() ^ 
					this.AccomInFlg.GetHashCode() ^ 
					this.ReqDate.GetHashCode() ^ 
					((this.AccomCdeRoomTypeId == null) ? string.Empty : this.AccomCdeRoomTypeId.ToString()).GetHashCode() ^ 
					((this.FeeCodeItemId == null) ? string.Empty : this.FeeCodeItemId.ToString()).GetHashCode() ^ 
					((this.FeeAmount == null) ? string.Empty : this.FeeAmount.ToString()).GetHashCode() ^ 
					((this.GsCodeCurrencyId == null) ? string.Empty : this.GsCodeCurrencyId.ToString()).GetHashCode() ^ 
					((this.FeeStudFeeItemId == null) ? string.Empty : this.FeeStudFeeItemId.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					this.GsCodeReqStatusId.GetHashCode() ^ 
					((this.ApproveFlg == null) ? string.Empty : this.ApproveFlg.ToString()).GetHashCode() ^ 
					((this.ApproveDate == null) ? string.Empty : this.ApproveDate.ToString()).GetHashCode() ^ 
					((this.AttchdDocPath == null) ? string.Empty : this.AttchdDocPath.ToString()).GetHashCode() ^ 
					((this.FromDate == null) ? string.Empty : this.FromDate.ToString()).GetHashCode() ^ 
					((this.ToDate == null) ? string.Empty : this.ToDate.ToString()).GetHashCode() ^ 
					((this.ReqNum == null) ? string.Empty : this.ReqNum.ToString()).GetHashCode() ^ 
					((this.AirCondFlg == null) ? string.Empty : this.AirCondFlg.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AccomStudReqBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AccomStudReqBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AccomStudReqBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AccomStudReqBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AccomStudReqBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AccomStudReqBase Object1, AccomStudReqBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AccomStudReqId != Object2.AccomStudReqId)
				equal = false;
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if ( Object1.EdCodeSemesterId != null && Object2.EdCodeSemesterId != null )
			{
				if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
					equal = false;
			}
			else if (Object1.EdCodeSemesterId == null ^ Object2.EdCodeSemesterId == null )
			{
				equal = false;
			}
			if (Object1.EdStudId != Object2.EdStudId)
				equal = false;
			if (Object1.MaritalFlg != Object2.MaritalFlg)
				equal = false;
			if (Object1.AccomInFlg != Object2.AccomInFlg)
				equal = false;
			if (Object1.ReqDate != Object2.ReqDate)
				equal = false;
			if ( Object1.AccomCdeRoomTypeId != null && Object2.AccomCdeRoomTypeId != null )
			{
				if (Object1.AccomCdeRoomTypeId != Object2.AccomCdeRoomTypeId)
					equal = false;
			}
			else if (Object1.AccomCdeRoomTypeId == null ^ Object2.AccomCdeRoomTypeId == null )
			{
				equal = false;
			}
			if ( Object1.FeeCodeItemId != null && Object2.FeeCodeItemId != null )
			{
				if (Object1.FeeCodeItemId != Object2.FeeCodeItemId)
					equal = false;
			}
			else if (Object1.FeeCodeItemId == null ^ Object2.FeeCodeItemId == null )
			{
				equal = false;
			}
			if ( Object1.FeeAmount != null && Object2.FeeAmount != null )
			{
				if (Object1.FeeAmount != Object2.FeeAmount)
					equal = false;
			}
			else if (Object1.FeeAmount == null ^ Object2.FeeAmount == null )
			{
				equal = false;
			}
			if ( Object1.GsCodeCurrencyId != null && Object2.GsCodeCurrencyId != null )
			{
				if (Object1.GsCodeCurrencyId != Object2.GsCodeCurrencyId)
					equal = false;
			}
			else if (Object1.GsCodeCurrencyId == null ^ Object2.GsCodeCurrencyId == null )
			{
				equal = false;
			}
			if ( Object1.FeeStudFeeItemId != null && Object2.FeeStudFeeItemId != null )
			{
				if (Object1.FeeStudFeeItemId != Object2.FeeStudFeeItemId)
					equal = false;
			}
			else if (Object1.FeeStudFeeItemId == null ^ Object2.FeeStudFeeItemId == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if (Object1.GsCodeReqStatusId != Object2.GsCodeReqStatusId)
				equal = false;
			if ( Object1.ApproveFlg != null && Object2.ApproveFlg != null )
			{
				if (Object1.ApproveFlg != Object2.ApproveFlg)
					equal = false;
			}
			else if (Object1.ApproveFlg == null ^ Object2.ApproveFlg == null )
			{
				equal = false;
			}
			if ( Object1.ApproveDate != null && Object2.ApproveDate != null )
			{
				if (Object1.ApproveDate != Object2.ApproveDate)
					equal = false;
			}
			else if (Object1.ApproveDate == null ^ Object2.ApproveDate == null )
			{
				equal = false;
			}
			if ( Object1.AttchdDocPath != null && Object2.AttchdDocPath != null )
			{
				if (Object1.AttchdDocPath != Object2.AttchdDocPath)
					equal = false;
			}
			else if (Object1.AttchdDocPath == null ^ Object2.AttchdDocPath == null )
			{
				equal = false;
			}
			if ( Object1.FromDate != null && Object2.FromDate != null )
			{
				if (Object1.FromDate != Object2.FromDate)
					equal = false;
			}
			else if (Object1.FromDate == null ^ Object2.FromDate == null )
			{
				equal = false;
			}
			if ( Object1.ToDate != null && Object2.ToDate != null )
			{
				if (Object1.ToDate != Object2.ToDate)
					equal = false;
			}
			else if (Object1.ToDate == null ^ Object2.ToDate == null )
			{
				equal = false;
			}
			if ( Object1.ReqNum != null && Object2.ReqNum != null )
			{
				if (Object1.ReqNum != Object2.ReqNum)
					equal = false;
			}
			else if (Object1.ReqNum == null ^ Object2.ReqNum == null )
			{
				equal = false;
			}
			if ( Object1.AirCondFlg != null && Object2.AirCondFlg != null )
			{
				if (Object1.AirCondFlg != Object2.AirCondFlg)
					equal = false;
			}
			else if (Object1.AirCondFlg == null ^ Object2.AirCondFlg == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AccomStudReqBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AccomStudReqComparer GetComparer()
        {
            return new AccomStudReqComparer();
        }
        */

        // Comparer delegates back to AccomStudReq
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AccomStudReq rhs, AccomStudReqColumn which)
        {
            switch (which)
            {
            	
            	
            	case AccomStudReqColumn.AccomStudReqId:
            		return this.AccomStudReqId.CompareTo(rhs.AccomStudReqId);
            		
            		                 
            	
            	
            	case AccomStudReqColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case AccomStudReqColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.Value.CompareTo(rhs.EdCodeSemesterId.Value);
            		
            		                 
            	
            	
            	case AccomStudReqColumn.EdStudId:
            		return this.EdStudId.CompareTo(rhs.EdStudId);
            		
            		                 
            	
            	
            	case AccomStudReqColumn.MaritalFlg:
            		return this.MaritalFlg.CompareTo(rhs.MaritalFlg);
            		
            		                 
            	
            	
            	case AccomStudReqColumn.AccomInFlg:
            		return this.AccomInFlg.CompareTo(rhs.AccomInFlg);
            		
            		                 
            	
            	
            	case AccomStudReqColumn.ReqDate:
            		return this.ReqDate.CompareTo(rhs.ReqDate);
            		
            		                 
            	
            	
            	case AccomStudReqColumn.AccomCdeRoomTypeId:
            		return this.AccomCdeRoomTypeId.Value.CompareTo(rhs.AccomCdeRoomTypeId.Value);
            		
            		                 
            	
            	
            	case AccomStudReqColumn.FeeCodeItemId:
            		return this.FeeCodeItemId.Value.CompareTo(rhs.FeeCodeItemId.Value);
            		
            		                 
            	
            	
            	case AccomStudReqColumn.FeeAmount:
            		return this.FeeAmount.Value.CompareTo(rhs.FeeAmount.Value);
            		
            		                 
            	
            	
            	case AccomStudReqColumn.GsCodeCurrencyId:
            		return this.GsCodeCurrencyId.Value.CompareTo(rhs.GsCodeCurrencyId.Value);
            		
            		                 
            	
            	
            	case AccomStudReqColumn.FeeStudFeeItemId:
            		return this.FeeStudFeeItemId.Value.CompareTo(rhs.FeeStudFeeItemId.Value);
            		
            		                 
            	
            	
            	case AccomStudReqColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case AccomStudReqColumn.GsCodeReqStatusId:
            		return this.GsCodeReqStatusId.CompareTo(rhs.GsCodeReqStatusId);
            		
            		                 
            	
            	
            	case AccomStudReqColumn.ApproveFlg:
            		return this.ApproveFlg.Value.CompareTo(rhs.ApproveFlg.Value);
            		
            		                 
            	
            	
            	case AccomStudReqColumn.ApproveDate:
            		return this.ApproveDate.Value.CompareTo(rhs.ApproveDate.Value);
            		
            		                 
            	
            	
            	case AccomStudReqColumn.AttchdDocPath:
            		return this.AttchdDocPath.CompareTo(rhs.AttchdDocPath);
            		
            		                 
            	
            	
            	case AccomStudReqColumn.FromDate:
            		return this.FromDate.Value.CompareTo(rhs.FromDate.Value);
            		
            		                 
            	
            	
            	case AccomStudReqColumn.ToDate:
            		return this.ToDate.Value.CompareTo(rhs.ToDate.Value);
            		
            		                 
            	
            	
            	case AccomStudReqColumn.ReqNum:
            		return this.ReqNum.Value.CompareTo(rhs.ReqNum.Value);
            		
            		                 
            	
            	
            	case AccomStudReqColumn.AirCondFlg:
            		return this.AirCondFlg.Value.CompareTo(rhs.AirCondFlg.Value);
            		
            		                 
            	
            	
            	case AccomStudReqColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case AccomStudReqColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AccomStudReqKey> Members
		
		// member variable for the EntityId property
		private AccomStudReqKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AccomStudReqKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AccomStudReqKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AccomStudReq")
					.Append("|").Append( this.AccomStudReqId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{24}{23}- AccomStudReqId: {0}{23}- EdAcadYearId: {1}{23}- EdCodeSemesterId: {2}{23}- EdStudId: {3}{23}- MaritalFlg: {4}{23}- AccomInFlg: {5}{23}- ReqDate: {6}{23}- AccomCdeRoomTypeId: {7}{23}- FeeCodeItemId: {8}{23}- FeeAmount: {9}{23}- GsCodeCurrencyId: {10}{23}- FeeStudFeeItemId: {11}{23}- Notes: {12}{23}- GsCodeReqStatusId: {13}{23}- ApproveFlg: {14}{23}- ApproveDate: {15}{23}- AttchdDocPath: {16}{23}- FromDate: {17}{23}- ToDate: {18}{23}- ReqNum: {19}{23}- AirCondFlg: {20}{23}- SeUserId: {21}{23}- LastDate: {22}{23}{25}", 
				this.AccomStudReqId,
				this.EdAcadYearId,
				(this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString(),
				this.EdStudId,
				this.MaritalFlg,
				this.AccomInFlg,
				this.ReqDate,
				(this.AccomCdeRoomTypeId == null) ? string.Empty : this.AccomCdeRoomTypeId.ToString(),
				(this.FeeCodeItemId == null) ? string.Empty : this.FeeCodeItemId.ToString(),
				(this.FeeAmount == null) ? string.Empty : this.FeeAmount.ToString(),
				(this.GsCodeCurrencyId == null) ? string.Empty : this.GsCodeCurrencyId.ToString(),
				(this.FeeStudFeeItemId == null) ? string.Empty : this.FeeStudFeeItemId.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				this.GsCodeReqStatusId,
				(this.ApproveFlg == null) ? string.Empty : this.ApproveFlg.ToString(),
				(this.ApproveDate == null) ? string.Empty : this.ApproveDate.ToString(),
				(this.AttchdDocPath == null) ? string.Empty : this.AttchdDocPath.ToString(),
				(this.FromDate == null) ? string.Empty : this.FromDate.ToString(),
				(this.ToDate == null) ? string.Empty : this.ToDate.ToString(),
				(this.ReqNum == null) ? string.Empty : this.ReqNum.ToString(),
				(this.AirCondFlg == null) ? string.Empty : this.AirCondFlg.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ACCOM_STUD_REQ' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AccomStudReqEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ACCOM_STUD_REQ_ID : Accomodation  طلب اقامة
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ACCOM_STUD_REQ"</remarks>
		public System.Decimal AccomStudReqId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalAccomStudReqId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : العام الاكاديمى
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : الفصل الدراسي
		/// </summary>
		public System.Decimal?		  EdCodeSemesterId = null;
		
		/// <summary>
		/// ED_STUD_ID : الطالب
		/// </summary>
		public System.Decimal		  EdStudId = 0.0m;
		
		/// <summary>
		/// MARITAL_FLG : حالة السكن : أعزب / متزوج
		/// </summary>
		public System.Boolean		  MaritalFlg = false;
		
		/// <summary>
		/// ACCOM_IN_FLG : قيم بالسكن الجامعى أم الخارجي؟ In / out
		/// </summary>
		public System.Boolean		  AccomInFlg = false;
		
		/// <summary>
		/// REQ_DATE : تاريخ الطلب
		/// </summary>
		public System.DateTime		  ReqDate = DateTime.MinValue;
		
		/// <summary>
		/// ACCOM_CDE_ROOM_TYPE_ID : نوع الغرفة  فردى ثنائي ثلاثى....
		/// </summary>
		public System.Int32?		  AccomCdeRoomTypeId = null;
		
		/// <summary>
		/// FEE_CODE_ITEM_ID : FEE_CODE_TYPE_ID=10*
		/// </summary>
		public System.Decimal?		  FeeCodeItemId = null;
		
		/// <summary>
		/// FEE_AMOUNT : القيمة المستحقة*
		/// </summary>
		public System.Decimal?		  FeeAmount = null;
		
		/// <summary>
		/// GS_CODE_CURRENCY_ID : العملة =default*
		/// </summary>
		public System.Decimal?		  GsCodeCurrencyId = null;
		
		/// <summary>
		/// FEE_STUD_FEE_ITEM_ID : بند مصروف سكن على الطالب
		/// </summary>
		public System.Decimal?		  FeeStudFeeItemId = null;
		
		/// <summary>
		/// NOTES : ملاحظات
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// GS_CODE_REQ_STATUS_ID : حالة الطلب
		/// </summary>
		public System.Decimal		  GsCodeReqStatusId = 0.0m;
		
		/// <summary>
		/// APPROVE_FLG : مؤشر اعتماد
		/// </summary>
		public System.Int32?		  ApproveFlg = null;
		
		/// <summary>
		/// APPROVE_DATE : تاريخ اعتماد
		/// </summary>
		public System.DateTime?		  ApproveDate = null;
		
		/// <summary>
		/// ATTCHD_DOC_PATH : Attached file
		/// </summary>
		public System.String		  AttchdDocPath = null;
		
		/// <summary>
		/// FROM_DATE : استلام
		/// </summary>
		public System.DateTime?		  FromDate = null;
		
		/// <summary>
		/// TO_DATE : اخلاء
		/// </summary>
		public System.DateTime?		  ToDate = null;
		
		/// <summary>
		/// REQ_NUM : رقم الطلب
		/// </summary>
		public System.Decimal?		  ReqNum = null;
		
		/// <summary>
		/// AIR_COND_FLG : مكيف-  غير مكيف
		/// </summary>
		public System.Boolean?		  AirCondFlg = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AccomCdeRoomType _accomCdeRoomTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AccomCdeRoomType"/>.
		/// </summary>
		/// <value>The source AccomCdeRoomType for AccomCdeRoomTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AccomCdeRoomType AccomCdeRoomTypeIdSource
      	{
            get { return this._accomCdeRoomTypeIdSource; }
            set { this._accomCdeRoomTypeIdSource = value; }
      	}
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		private FeeCodeItem _feeCodeItemIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeItem"/>.
		/// </summary>
		/// <value>The source FeeCodeItem for FeeCodeItemId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeCodeItem FeeCodeItemIdSource
      	{
            get { return this._feeCodeItemIdSource; }
            set { this._feeCodeItemIdSource = value; }
      	}
		private FeeStudFeeItem _feeStudFeeItemIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeStudFeeItem"/>.
		/// </summary>
		/// <value>The source FeeStudFeeItem for FeeStudFeeItemId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeStudFeeItem FeeStudFeeItemIdSource
      	{
            get { return this._feeStudFeeItemIdSource; }
            set { this._feeStudFeeItemIdSource = value; }
      	}
		private GsCodeCurrency _gsCodeCurrencyIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCurrency"/>.
		/// </summary>
		/// <value>The source GsCodeCurrency for GsCodeCurrencyId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeCurrency GsCodeCurrencyIdSource
      	{
            get { return this._gsCodeCurrencyIdSource; }
            set { this._gsCodeCurrencyIdSource = value; }
      	}
		private GsCodeReqStatus _gsCodeReqStatusIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeReqStatus"/>.
		/// </summary>
		/// <value>The source GsCodeReqStatus for GsCodeReqStatusId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeReqStatus GsCodeReqStatusIdSource
      	{
            get { return this._gsCodeReqStatusIdSource; }
            set { this._gsCodeReqStatusIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region AccomWfRequestApproveCollection
		
		private TList<AccomWfRequestApprove> _accomWfRequestApproveAccomStudReqId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _accomWfRequestApproveAccomStudReqId
		/// </summary>
		
		public TList<AccomWfRequestApprove> AccomWfRequestApproveCollection
		{
			get
			{
				if (_accomWfRequestApproveAccomStudReqId == null)
				{
				_accomWfRequestApproveAccomStudReqId = new TList<AccomWfRequestApprove>();
				}
	
				return _accomWfRequestApproveAccomStudReqId;
			}
			set { _accomWfRequestApproveAccomStudReqId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AccomStudReqEntityData _tmp = new AccomStudReqEntityData();
						
			_tmp.AccomStudReqId = this.AccomStudReqId;
			_tmp.OriginalAccomStudReqId = this.OriginalAccomStudReqId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.MaritalFlg = this.MaritalFlg;
			_tmp.AccomInFlg = this.AccomInFlg;
			_tmp.ReqDate = this.ReqDate;
			_tmp.AccomCdeRoomTypeId = this.AccomCdeRoomTypeId;
			_tmp.FeeCodeItemId = this.FeeCodeItemId;
			_tmp.FeeAmount = this.FeeAmount;
			_tmp.GsCodeCurrencyId = this.GsCodeCurrencyId;
			_tmp.FeeStudFeeItemId = this.FeeStudFeeItemId;
			_tmp.Notes = this.Notes;
			_tmp.GsCodeReqStatusId = this.GsCodeReqStatusId;
			_tmp.ApproveFlg = this.ApproveFlg;
			_tmp.ApproveDate = this.ApproveDate;
			_tmp.AttchdDocPath = this.AttchdDocPath;
			_tmp.FromDate = this.FromDate;
			_tmp.ToDate = this.ToDate;
			_tmp.ReqNum = this.ReqNum;
			_tmp.AirCondFlg = this.AirCondFlg;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.AccomCdeRoomTypeIdSource != null)
				_tmp.AccomCdeRoomTypeIdSource = MakeCopyOf(this.AccomCdeRoomTypeIdSource) as AccomCdeRoomType;
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			if (this.FeeCodeItemIdSource != null)
				_tmp.FeeCodeItemIdSource = MakeCopyOf(this.FeeCodeItemIdSource) as FeeCodeItem;
			if (this.FeeStudFeeItemIdSource != null)
				_tmp.FeeStudFeeItemIdSource = MakeCopyOf(this.FeeStudFeeItemIdSource) as FeeStudFeeItem;
			if (this.GsCodeCurrencyIdSource != null)
				_tmp.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource) as GsCodeCurrency;
			if (this.GsCodeReqStatusIdSource != null)
				_tmp.GsCodeReqStatusIdSource = MakeCopyOf(this.GsCodeReqStatusIdSource) as GsCodeReqStatus;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._accomWfRequestApproveAccomStudReqId != null)
				_tmp.AccomWfRequestApproveCollection = (TList<AccomWfRequestApprove>) MakeCopyOf(this.AccomWfRequestApproveCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AccomStudReqEntityData _tmp = new AccomStudReqEntityData();
						
			_tmp.AccomStudReqId = this.AccomStudReqId;
			_tmp.OriginalAccomStudReqId = this.OriginalAccomStudReqId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.MaritalFlg = this.MaritalFlg;
			_tmp.AccomInFlg = this.AccomInFlg;
			_tmp.ReqDate = this.ReqDate;
			_tmp.AccomCdeRoomTypeId = this.AccomCdeRoomTypeId;
			_tmp.FeeCodeItemId = this.FeeCodeItemId;
			_tmp.FeeAmount = this.FeeAmount;
			_tmp.GsCodeCurrencyId = this.GsCodeCurrencyId;
			_tmp.FeeStudFeeItemId = this.FeeStudFeeItemId;
			_tmp.Notes = this.Notes;
			_tmp.GsCodeReqStatusId = this.GsCodeReqStatusId;
			_tmp.ApproveFlg = this.ApproveFlg;
			_tmp.ApproveDate = this.ApproveDate;
			_tmp.AttchdDocPath = this.AttchdDocPath;
			_tmp.FromDate = this.FromDate;
			_tmp.ToDate = this.ToDate;
			_tmp.ReqNum = this.ReqNum;
			_tmp.AirCondFlg = this.AirCondFlg;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.AccomCdeRoomTypeIdSource != null && existingCopies.Contains(this.AccomCdeRoomTypeIdSource))
				_tmp.AccomCdeRoomTypeIdSource = existingCopies[this.AccomCdeRoomTypeIdSource] as AccomCdeRoomType;
			else
				_tmp.AccomCdeRoomTypeIdSource = MakeCopyOf(this.AccomCdeRoomTypeIdSource, existingCopies) as AccomCdeRoomType;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.FeeCodeItemIdSource != null && existingCopies.Contains(this.FeeCodeItemIdSource))
				_tmp.FeeCodeItemIdSource = existingCopies[this.FeeCodeItemIdSource] as FeeCodeItem;
			else
				_tmp.FeeCodeItemIdSource = MakeCopyOf(this.FeeCodeItemIdSource, existingCopies) as FeeCodeItem;
			if (this.FeeStudFeeItemIdSource != null && existingCopies.Contains(this.FeeStudFeeItemIdSource))
				_tmp.FeeStudFeeItemIdSource = existingCopies[this.FeeStudFeeItemIdSource] as FeeStudFeeItem;
			else
				_tmp.FeeStudFeeItemIdSource = MakeCopyOf(this.FeeStudFeeItemIdSource, existingCopies) as FeeStudFeeItem;
			if (this.GsCodeCurrencyIdSource != null && existingCopies.Contains(this.GsCodeCurrencyIdSource))
				_tmp.GsCodeCurrencyIdSource = existingCopies[this.GsCodeCurrencyIdSource] as GsCodeCurrency;
			else
				_tmp.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource, existingCopies) as GsCodeCurrency;
			if (this.GsCodeReqStatusIdSource != null && existingCopies.Contains(this.GsCodeReqStatusIdSource))
				_tmp.GsCodeReqStatusIdSource = existingCopies[this.GsCodeReqStatusIdSource] as GsCodeReqStatus;
			else
				_tmp.GsCodeReqStatusIdSource = MakeCopyOf(this.GsCodeReqStatusIdSource, existingCopies) as GsCodeReqStatus;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.AccomWfRequestApproveCollection = (TList<AccomWfRequestApprove>) MakeCopyOf(this.AccomWfRequestApproveCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccomStudReqColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AccomStudReqColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccomStudReqColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AccomStudReqColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccomStudReqColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AccomStudReqColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AccomStudReqEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AccomStudReqEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccomStudReqColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AccomStudReqColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AccomStudReqEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AccomStudReqEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AccomStudReqEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AccomStudReq"/> object.
	/// </remarks>
	public class AccomStudReqEventArgs : System.EventArgs
	{
		private AccomStudReqColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AccomStudReqEventArgs class.
		///</summary>
		public AccomStudReqEventArgs(AccomStudReqColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AccomStudReqEventArgs class.
		///</summary>
		public AccomStudReqEventArgs(AccomStudReqColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AccomStudReqColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AccomStudReqColumn" />
		public AccomStudReqColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AccomStudReq related events.
	///</summary>
	public delegate void AccomStudReqEventHandler(object sender, AccomStudReqEventArgs e);
	
	#region AccomStudReqComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AccomStudReqComparer : System.Collections.Generic.IComparer<AccomStudReq>
	{
		AccomStudReqColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AccomStudReqComparer"/> class.
        /// </summary>
		public AccomStudReqComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AccomStudReqComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AccomStudReqComparer(AccomStudReqColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AccomStudReq"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AccomStudReq"/> to compare.</param>
        /// <param name="b">The second <c>AccomStudReq</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AccomStudReq a, AccomStudReq b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AccomStudReq entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AccomStudReq a, AccomStudReq b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AccomStudReqColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AccomStudReqKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AccomStudReq"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AccomStudReqKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AccomStudReqKey class.
		/// </summary>
		public AccomStudReqKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AccomStudReqKey class.
		/// </summary>
		public AccomStudReqKey(AccomStudReqBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AccomStudReqId = entity.AccomStudReqId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AccomStudReqKey class.
		/// </summary>
		public AccomStudReqKey(System.Decimal _accomStudReqId)
		{
			#region Init Properties

			this.AccomStudReqId = _accomStudReqId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AccomStudReqBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AccomStudReqBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AccomStudReqId property
		private System.Decimal _accomStudReqId;
		
		/// <summary>
		/// Gets or sets the AccomStudReqId property.
		/// </summary>
		public System.Decimal AccomStudReqId
		{
			get { return _accomStudReqId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AccomStudReqId = value;
				
				_accomStudReqId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AccomStudReqId = ( values["AccomStudReqId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["AccomStudReqId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AccomStudReqId", AccomStudReqId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AccomStudReqId: {0}{1}",
								AccomStudReqId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AccomStudReqColumn Enum
	
	/// <summary>
	/// Enumerate the AccomStudReq columns.
	/// </summary>
	[Serializable]
	public enum AccomStudReqColumn : int
	{
		/// <summary>
		/// AccomStudReqId : Accomodation  طلب اقامة
		/// </summary>
		[EnumTextValue("ACCOM_STUD_REQ_ID")]
		[ColumnEnum("ACCOM_STUD_REQ_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		AccomStudReqId = 1,
		/// <summary>
		/// EdAcadYearId : العام الاكاديمى
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 2,
		/// <summary>
		/// EdCodeSemesterId : الفصل الدراسي
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeSemesterId = 3,
		/// <summary>
		/// EdStudId : الطالب
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudId = 4,
		/// <summary>
		/// MaritalFlg : حالة السكن : أعزب / متزوج
		/// </summary>
		[EnumTextValue("MARITAL_FLG")]
		[ColumnEnum("MARITAL_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		MaritalFlg = 5,
		/// <summary>
		/// AccomInFlg : قيم بالسكن الجامعى أم الخارجي؟ In / out
		/// </summary>
		[EnumTextValue("ACCOM_IN_FLG")]
		[ColumnEnum("ACCOM_IN_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		AccomInFlg = 6,
		/// <summary>
		/// ReqDate : تاريخ الطلب
		/// </summary>
		[EnumTextValue("REQ_DATE")]
		[ColumnEnum("REQ_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ReqDate = 7,
		/// <summary>
		/// AccomCdeRoomTypeId : نوع الغرفة  فردى ثنائي ثلاثى....
		/// </summary>
		[EnumTextValue("ACCOM_CDE_ROOM_TYPE_ID")]
		[ColumnEnum("ACCOM_CDE_ROOM_TYPE_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		AccomCdeRoomTypeId = 8,
		/// <summary>
		/// FeeCodeItemId : FEE_CODE_TYPE_ID=10*
		/// </summary>
		[EnumTextValue("FEE_CODE_ITEM_ID")]
		[ColumnEnum("FEE_CODE_ITEM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeeCodeItemId = 9,
		/// <summary>
		/// FeeAmount : القيمة المستحقة*
		/// </summary>
		[EnumTextValue("FEE_AMOUNT")]
		[ColumnEnum("FEE_AMOUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeeAmount = 10,
		/// <summary>
		/// GsCodeCurrencyId : العملة =default*
		/// </summary>
		[EnumTextValue("GS_CODE_CURRENCY_ID")]
		[ColumnEnum("GS_CODE_CURRENCY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCodeCurrencyId = 11,
		/// <summary>
		/// FeeStudFeeItemId : بند مصروف سكن على الطالب
		/// </summary>
		[EnumTextValue("FEE_STUD_FEE_ITEM_ID")]
		[ColumnEnum("FEE_STUD_FEE_ITEM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeeStudFeeItemId = 12,
		/// <summary>
		/// Notes : ملاحظات
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		Notes = 13,
		/// <summary>
		/// GsCodeReqStatusId : حالة الطلب
		/// </summary>
		[EnumTextValue("GS_CODE_REQ_STATUS_ID")]
		[ColumnEnum("GS_CODE_REQ_STATUS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsCodeReqStatusId = 14,
		/// <summary>
		/// ApproveFlg : مؤشر اعتماد
		/// </summary>
		[EnumTextValue("APPROVE_FLG")]
		[ColumnEnum("APPROVE_FLG", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ApproveFlg = 15,
		/// <summary>
		/// ApproveDate : تاريخ اعتماد
		/// </summary>
		[EnumTextValue("APPROVE_DATE")]
		[ColumnEnum("APPROVE_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ApproveDate = 16,
		/// <summary>
		/// AttchdDocPath : Attached file
		/// </summary>
		[EnumTextValue("ATTCHD_DOC_PATH")]
		[ColumnEnum("ATTCHD_DOC_PATH", typeof(System.String), System.Data.DbType.String, false, false, true)]
		AttchdDocPath = 17,
		/// <summary>
		/// FromDate : استلام
		/// </summary>
		[EnumTextValue("FROM_DATE")]
		[ColumnEnum("FROM_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		FromDate = 18,
		/// <summary>
		/// ToDate : اخلاء
		/// </summary>
		[EnumTextValue("TO_DATE")]
		[ColumnEnum("TO_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ToDate = 19,
		/// <summary>
		/// ReqNum : رقم الطلب
		/// </summary>
		[EnumTextValue("REQ_NUM")]
		[ColumnEnum("REQ_NUM", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ReqNum = 20,
		/// <summary>
		/// AirCondFlg : مكيف-  غير مكيف
		/// </summary>
		[EnumTextValue("AIR_COND_FLG")]
		[ColumnEnum("AIR_COND_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		AirCondFlg = 21,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 22,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 23
	}//End enum

	#endregion AccomStudReqColumn Enum

} // end namespace
