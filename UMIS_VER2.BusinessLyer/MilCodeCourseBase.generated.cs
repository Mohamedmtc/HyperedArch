
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file MilCodeCourse.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'MIL_CODE_COURSE' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class MilCodeCourseBase : EntityBase, IMilCodeCourse, IEntityId<MilCodeCourseKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private MilCodeCourseEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private MilCodeCourseEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private MilCodeCourseEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<MilCodeCourse> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MilCodeCourseEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MilCodeCourseEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="MilCodeCourseBase"/> instance.
		///</summary>
		public MilCodeCourseBase()
		{
			this.entityData = new MilCodeCourseEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="MilCodeCourseBase"/> instance.
		///</summary>
		///<param name="_milCodeCourseId">مقررات الدورة العسكرية</param>
		///<param name="_edAcadYearId">عام الدورة</param>
		///<param name="_milCrsCode">كود الدورة</param>
		///<param name="_milCrsAr"></param>
		///<param name="_milCrsEn"></param>
		///<param name="_milCrsStartDate">تاريخ بداية الدورة</param>
		///<param name="_milCrsEndDate">تاريخ نهاية الدورة</param>
		///<param name="_milCrsMonths">عدد الشهور</param>
		///<param name="_milCrsDays">عدد الايام</param>
		///<param name="_milCrsNotes">ملاحظات على الدورة</param>
		public MilCodeCourseBase(System.Int32 _milCodeCourseId, System.Decimal? _edAcadYearId, 
			System.String _milCrsCode, System.String _milCrsAr, System.String _milCrsEn, 
			System.DateTime? _milCrsStartDate, System.DateTime? _milCrsEndDate, System.Decimal? _milCrsMonths, 
			System.Decimal? _milCrsDays, System.String _milCrsNotes)
		{
			this.entityData = new MilCodeCourseEntityData();
			this.backupData = null;

			this.MilCodeCourseId = _milCodeCourseId;
			this.EdAcadYearId = _edAcadYearId;
			this.MilCrsCode = _milCrsCode;
			this.MilCrsAr = _milCrsAr;
			this.MilCrsEn = _milCrsEn;
			this.MilCrsStartDate = _milCrsStartDate;
			this.MilCrsEndDate = _milCrsEndDate;
			this.MilCrsMonths = _milCrsMonths;
			this.MilCrsDays = _milCrsDays;
			this.MilCrsNotes = _milCrsNotes;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="MilCodeCourse"/> instance.
		///</summary>
		///<param name="_milCodeCourseId">مقررات الدورة العسكرية</param>
		///<param name="_edAcadYearId">عام الدورة</param>
		///<param name="_milCrsCode">كود الدورة</param>
		///<param name="_milCrsAr"></param>
		///<param name="_milCrsEn"></param>
		///<param name="_milCrsStartDate">تاريخ بداية الدورة</param>
		///<param name="_milCrsEndDate">تاريخ نهاية الدورة</param>
		///<param name="_milCrsMonths">عدد الشهور</param>
		///<param name="_milCrsDays">عدد الايام</param>
		///<param name="_milCrsNotes">ملاحظات على الدورة</param>
		public static MilCodeCourse CreateMilCodeCourse(System.Int32 _milCodeCourseId, System.Decimal? _edAcadYearId, 
			System.String _milCrsCode, System.String _milCrsAr, System.String _milCrsEn, 
			System.DateTime? _milCrsStartDate, System.DateTime? _milCrsEndDate, System.Decimal? _milCrsMonths, 
			System.Decimal? _milCrsDays, System.String _milCrsNotes)
		{
			MilCodeCourse newMilCodeCourse = new MilCodeCourse();
			newMilCodeCourse.MilCodeCourseId = _milCodeCourseId;
			newMilCodeCourse.EdAcadYearId = _edAcadYearId;
			newMilCodeCourse.MilCrsCode = _milCrsCode;
			newMilCodeCourse.MilCrsAr = _milCrsAr;
			newMilCodeCourse.MilCrsEn = _milCrsEn;
			newMilCodeCourse.MilCrsStartDate = _milCrsStartDate;
			newMilCodeCourse.MilCrsEndDate = _milCrsEndDate;
			newMilCodeCourse.MilCrsMonths = _milCrsMonths;
			newMilCodeCourse.MilCrsDays = _milCrsDays;
			newMilCodeCourse.MilCrsNotes = _milCrsNotes;
			return newMilCodeCourse;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MilCodeCourseId property. 
		///		مقررات الدورة العسكرية
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"مقررات الدورة العسكرية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 MilCodeCourseId
		{
			get
			{
				return this.entityData.MilCodeCourseId; 
			}
			
			set
			{
				if (this.entityData.MilCodeCourseId == value)
					return;
					
				OnColumnChanging(MilCodeCourseColumn.MilCodeCourseId, this.entityData.MilCodeCourseId);
				this.entityData.MilCodeCourseId = value;
				this.EntityId.MilCodeCourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MilCodeCourseColumn.MilCodeCourseId, this.entityData.MilCodeCourseId);
				OnPropertyChanged("MilCodeCourseId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the MIL_CODE_COURSE_ID property.
		///		مقررات الدورة العسكرية
		/// </summary>
		/// <remarks>This is the original value of the MIL_CODE_COURSE_ID property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalMilCodeCourseId
		{
			get { return this.entityData.OriginalMilCodeCourseId; }
			set { this.entityData.OriginalMilCodeCourseId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		عام الدورة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdAcadYearIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"عام الدورة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(MilCodeCourseColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MilCodeCourseColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MilCrsCode property. 
		///		كود الدورة
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"كود الدورة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String MilCrsCode
		{
			get
			{
				return this.entityData.MilCrsCode; 
			}
			
			set
			{
				if (this.entityData.MilCrsCode == value)
					return;
					
				OnColumnChanging(MilCodeCourseColumn.MilCrsCode, this.entityData.MilCrsCode);
				this.entityData.MilCrsCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MilCodeCourseColumn.MilCrsCode, this.entityData.MilCrsCode);
				OnPropertyChanged("MilCrsCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MilCrsAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String MilCrsAr
		{
			get
			{
				return this.entityData.MilCrsAr; 
			}
			
			set
			{
				if (this.entityData.MilCrsAr == value)
					return;
					
				OnColumnChanging(MilCodeCourseColumn.MilCrsAr, this.entityData.MilCrsAr);
				this.entityData.MilCrsAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MilCodeCourseColumn.MilCrsAr, this.entityData.MilCrsAr);
				OnPropertyChanged("MilCrsAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MilCrsEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String MilCrsEn
		{
			get
			{
				return this.entityData.MilCrsEn; 
			}
			
			set
			{
				if (this.entityData.MilCrsEn == value)
					return;
					
				OnColumnChanging(MilCodeCourseColumn.MilCrsEn, this.entityData.MilCrsEn);
				this.entityData.MilCrsEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MilCodeCourseColumn.MilCrsEn, this.entityData.MilCrsEn);
				OnPropertyChanged("MilCrsEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MilCrsStartDate property. 
		///		تاريخ بداية الدورة
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsMilCrsStartDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ بداية الدورة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? MilCrsStartDate
		{
			get
			{
				return this.entityData.MilCrsStartDate; 
			}
			
			set
			{
				if (this.entityData.MilCrsStartDate == value)
					return;
					
				OnColumnChanging(MilCodeCourseColumn.MilCrsStartDate, this.entityData.MilCrsStartDate);
				this.entityData.MilCrsStartDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MilCodeCourseColumn.MilCrsStartDate, this.entityData.MilCrsStartDate);
				OnPropertyChanged("MilCrsStartDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MilCrsEndDate property. 
		///		تاريخ نهاية الدورة
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsMilCrsEndDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ نهاية الدورة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? MilCrsEndDate
		{
			get
			{
				return this.entityData.MilCrsEndDate; 
			}
			
			set
			{
				if (this.entityData.MilCrsEndDate == value)
					return;
					
				OnColumnChanging(MilCodeCourseColumn.MilCrsEndDate, this.entityData.MilCrsEndDate);
				this.entityData.MilCrsEndDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MilCodeCourseColumn.MilCrsEndDate, this.entityData.MilCrsEndDate);
				OnPropertyChanged("MilCrsEndDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MilCrsMonths property. 
		///		عدد الشهور
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMilCrsMonthsNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"عدد الشهور"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MilCrsMonths
		{
			get
			{
				return this.entityData.MilCrsMonths; 
			}
			
			set
			{
				if (this.entityData.MilCrsMonths == value)
					return;
					
				OnColumnChanging(MilCodeCourseColumn.MilCrsMonths, this.entityData.MilCrsMonths);
				this.entityData.MilCrsMonths = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MilCodeCourseColumn.MilCrsMonths, this.entityData.MilCrsMonths);
				OnPropertyChanged("MilCrsMonths");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MilCrsDays property. 
		///		عدد الايام
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMilCrsDaysNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"عدد الايام"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MilCrsDays
		{
			get
			{
				return this.entityData.MilCrsDays; 
			}
			
			set
			{
				if (this.entityData.MilCrsDays == value)
					return;
					
				OnColumnChanging(MilCodeCourseColumn.MilCrsDays, this.entityData.MilCrsDays);
				this.entityData.MilCrsDays = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MilCodeCourseColumn.MilCrsDays, this.entityData.MilCrsDays);
				OnPropertyChanged("MilCrsDays");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MilCrsNotes property. 
		///		ملاحظات على الدورة
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"ملاحظات على الدورة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 400)]
		public virtual System.String MilCrsNotes
		{
			get
			{
				return this.entityData.MilCrsNotes; 
			}
			
			set
			{
				if (this.entityData.MilCrsNotes == value)
					return;
					
				OnColumnChanging(MilCodeCourseColumn.MilCrsNotes, this.entityData.MilCrsNotes);
				this.entityData.MilCrsNotes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MilCodeCourseColumn.MilCrsNotes, this.entityData.MilCrsNotes);
				OnPropertyChanged("MilCrsNotes");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EdStudMltryCrs objects
		///	which are related to this object through the relation FK_ED_STUD_MLTRY_CRS_MIL_CODE_COURSE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudMltryCrs> EdStudMltryCrsCollection
		{
			get { return entityData.EdStudMltryCrsCollection; }
			set { entityData.EdStudMltryCrsCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MilCrsCode", "Mil Crs Code", 100));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MilCrsAr", "Mil Crs Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MilCrsAr", "Mil Crs Ar", 100));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MilCrsEn", "Mil Crs En"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MilCrsEn", "Mil Crs En", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MilCrsNotes", "Mil Crs Notes", 400));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "MIL_CODE_COURSE"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MIL_CODE_COURSE_ID", "ED_ACAD_YEAR_ID", "MIL_CRS_CODE", "MIL_CRS_AR", "MIL_CRS_EN", "MIL_CRS_START_DATE", "MIL_CRS_END_DATE", "MIL_CRS_MONTHS", "MIL_CRS_DAYS", "MIL_CRS_NOTES"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as MilCodeCourseEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (MilCodeCourse) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<MilCodeCourse>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as MilCodeCourse);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed MilCodeCourse Entity 
		///</summary>
		protected virtual MilCodeCourse Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			MilCodeCourse copy = new MilCodeCourse();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MilCodeCourseId = this.MilCodeCourseId;
					copy.OriginalMilCodeCourseId = this.OriginalMilCodeCourseId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.MilCrsCode = this.MilCrsCode;
				copy.MilCrsAr = this.MilCrsAr;
				copy.MilCrsEn = this.MilCrsEn;
				copy.MilCrsStartDate = this.MilCrsStartDate;
				copy.MilCrsEndDate = this.MilCrsEndDate;
				copy.MilCrsMonths = this.MilCrsMonths;
				copy.MilCrsDays = this.MilCrsDays;
				copy.MilCrsNotes = this.MilCrsNotes;
			
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
		
			//deep copy nested objects
			copy.EdStudMltryCrsCollection = (TList<EdStudMltryCrs>) MakeCopyOf(this.EdStudMltryCrsCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed MilCodeCourse Entity 
		///</summary>
		public virtual MilCodeCourse Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed MilCodeCourse Entity which is a deep copy of the current entity.
		///</summary>
		public virtual MilCodeCourse DeepCopy()
		{
			return EntityHelper.Clone<MilCodeCourse>(this as MilCodeCourse);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as MilCodeCourseEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new MilCodeCourseEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as MilCodeCourseEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(MilCodeCourseColumn column)
		{
			switch(column)
			{
					case MilCodeCourseColumn.MilCodeCourseId:
					return entityData.MilCodeCourseId != _originalData.MilCodeCourseId;
					case MilCodeCourseColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case MilCodeCourseColumn.MilCrsCode:
					return entityData.MilCrsCode != _originalData.MilCrsCode;
					case MilCodeCourseColumn.MilCrsAr:
					return entityData.MilCrsAr != _originalData.MilCrsAr;
					case MilCodeCourseColumn.MilCrsEn:
					return entityData.MilCrsEn != _originalData.MilCrsEn;
					case MilCodeCourseColumn.MilCrsStartDate:
					return entityData.MilCrsStartDate != _originalData.MilCrsStartDate;
					case MilCodeCourseColumn.MilCrsEndDate:
					return entityData.MilCrsEndDate != _originalData.MilCrsEndDate;
					case MilCodeCourseColumn.MilCrsMonths:
					return entityData.MilCrsMonths != _originalData.MilCrsMonths;
					case MilCodeCourseColumn.MilCrsDays:
					return entityData.MilCrsDays != _originalData.MilCrsDays;
					case MilCodeCourseColumn.MilCrsNotes:
					return entityData.MilCrsNotes != _originalData.MilCrsNotes;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< MilCodeCourseColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MilCodeCourseId != _originalData.MilCodeCourseId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.MilCrsCode != _originalData.MilCrsCode;
			result = result || entityData.MilCrsAr != _originalData.MilCrsAr;
			result = result || entityData.MilCrsEn != _originalData.MilCrsEn;
			result = result || entityData.MilCrsStartDate != _originalData.MilCrsStartDate;
			result = result || entityData.MilCrsEndDate != _originalData.MilCrsEndDate;
			result = result || entityData.MilCrsMonths != _originalData.MilCrsMonths;
			result = result || entityData.MilCrsDays != _originalData.MilCrsDays;
			result = result || entityData.MilCrsNotes != _originalData.MilCrsNotes;
			return result;
		}	
		
		///<summary>
		///  Returns a MilCodeCourse Entity with the original data.
		///</summary>
		public MilCodeCourse GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateMilCodeCourse(
				_originalData.MilCodeCourseId,
				_originalData.EdAcadYearId,
				_originalData.MilCrsCode,
				_originalData.MilCrsAr,
				_originalData.MilCrsEn,
				_originalData.MilCrsStartDate,
				_originalData.MilCrsEndDate,
				_originalData.MilCrsMonths,
				_originalData.MilCrsDays,
				_originalData.MilCrsNotes
				);
				
			return (MilCodeCourse)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="MilCodeCourseBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is MilCodeCourseBase)
				return ValueEquals(this, (MilCodeCourseBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="MilCodeCourseBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MilCodeCourseId.GetHashCode() ^ 
					((this.EdAcadYearId == null) ? string.Empty : this.EdAcadYearId.ToString()).GetHashCode() ^ 
					((this.MilCrsCode == null) ? string.Empty : this.MilCrsCode.ToString()).GetHashCode() ^ 
					this.MilCrsAr.GetHashCode() ^ 
					this.MilCrsEn.GetHashCode() ^ 
					((this.MilCrsStartDate == null) ? string.Empty : this.MilCrsStartDate.ToString()).GetHashCode() ^ 
					((this.MilCrsEndDate == null) ? string.Empty : this.MilCrsEndDate.ToString()).GetHashCode() ^ 
					((this.MilCrsMonths == null) ? string.Empty : this.MilCrsMonths.ToString()).GetHashCode() ^ 
					((this.MilCrsDays == null) ? string.Empty : this.MilCrsDays.ToString()).GetHashCode() ^ 
					((this.MilCrsNotes == null) ? string.Empty : this.MilCrsNotes.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="MilCodeCourseBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(MilCodeCourseBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="MilCodeCourseBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="MilCodeCourseBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="MilCodeCourseBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(MilCodeCourseBase Object1, MilCodeCourseBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MilCodeCourseId != Object2.MilCodeCourseId)
				equal = false;
			if ( Object1.EdAcadYearId != null && Object2.EdAcadYearId != null )
			{
				if (Object1.EdAcadYearId != Object2.EdAcadYearId)
					equal = false;
			}
			else if (Object1.EdAcadYearId == null ^ Object2.EdAcadYearId == null )
			{
				equal = false;
			}
			if ( Object1.MilCrsCode != null && Object2.MilCrsCode != null )
			{
				if (Object1.MilCrsCode != Object2.MilCrsCode)
					equal = false;
			}
			else if (Object1.MilCrsCode == null ^ Object2.MilCrsCode == null )
			{
				equal = false;
			}
			if (Object1.MilCrsAr != Object2.MilCrsAr)
				equal = false;
			if (Object1.MilCrsEn != Object2.MilCrsEn)
				equal = false;
			if ( Object1.MilCrsStartDate != null && Object2.MilCrsStartDate != null )
			{
				if (Object1.MilCrsStartDate != Object2.MilCrsStartDate)
					equal = false;
			}
			else if (Object1.MilCrsStartDate == null ^ Object2.MilCrsStartDate == null )
			{
				equal = false;
			}
			if ( Object1.MilCrsEndDate != null && Object2.MilCrsEndDate != null )
			{
				if (Object1.MilCrsEndDate != Object2.MilCrsEndDate)
					equal = false;
			}
			else if (Object1.MilCrsEndDate == null ^ Object2.MilCrsEndDate == null )
			{
				equal = false;
			}
			if ( Object1.MilCrsMonths != null && Object2.MilCrsMonths != null )
			{
				if (Object1.MilCrsMonths != Object2.MilCrsMonths)
					equal = false;
			}
			else if (Object1.MilCrsMonths == null ^ Object2.MilCrsMonths == null )
			{
				equal = false;
			}
			if ( Object1.MilCrsDays != null && Object2.MilCrsDays != null )
			{
				if (Object1.MilCrsDays != Object2.MilCrsDays)
					equal = false;
			}
			else if (Object1.MilCrsDays == null ^ Object2.MilCrsDays == null )
			{
				equal = false;
			}
			if ( Object1.MilCrsNotes != null && Object2.MilCrsNotes != null )
			{
				if (Object1.MilCrsNotes != Object2.MilCrsNotes)
					equal = false;
			}
			else if (Object1.MilCrsNotes == null ^ Object2.MilCrsNotes == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((MilCodeCourseBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static MilCodeCourseComparer GetComparer()
        {
            return new MilCodeCourseComparer();
        }
        */

        // Comparer delegates back to MilCodeCourse
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(MilCodeCourse rhs, MilCodeCourseColumn which)
        {
            switch (which)
            {
            	
            	
            	case MilCodeCourseColumn.MilCodeCourseId:
            		return this.MilCodeCourseId.CompareTo(rhs.MilCodeCourseId);
            		
            		                 
            	
            	
            	case MilCodeCourseColumn.EdAcadYearId:
            		return this.EdAcadYearId.Value.CompareTo(rhs.EdAcadYearId.Value);
            		
            		                 
            	
            	
            	case MilCodeCourseColumn.MilCrsCode:
            		return this.MilCrsCode.CompareTo(rhs.MilCrsCode);
            		
            		                 
            	
            	
            	case MilCodeCourseColumn.MilCrsAr:
            		return this.MilCrsAr.CompareTo(rhs.MilCrsAr);
            		
            		                 
            	
            	
            	case MilCodeCourseColumn.MilCrsEn:
            		return this.MilCrsEn.CompareTo(rhs.MilCrsEn);
            		
            		                 
            	
            	
            	case MilCodeCourseColumn.MilCrsStartDate:
            		return this.MilCrsStartDate.Value.CompareTo(rhs.MilCrsStartDate.Value);
            		
            		                 
            	
            	
            	case MilCodeCourseColumn.MilCrsEndDate:
            		return this.MilCrsEndDate.Value.CompareTo(rhs.MilCrsEndDate.Value);
            		
            		                 
            	
            	
            	case MilCodeCourseColumn.MilCrsMonths:
            		return this.MilCrsMonths.Value.CompareTo(rhs.MilCrsMonths.Value);
            		
            		                 
            	
            	
            	case MilCodeCourseColumn.MilCrsDays:
            		return this.MilCrsDays.Value.CompareTo(rhs.MilCrsDays.Value);
            		
            		                 
            	
            	
            	case MilCodeCourseColumn.MilCrsNotes:
            		return this.MilCrsNotes.CompareTo(rhs.MilCrsNotes);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<MilCodeCourseKey> Members
		
		// member variable for the EntityId property
		private MilCodeCourseKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual MilCodeCourseKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new MilCodeCourseKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("MilCodeCourse")
					.Append("|").Append( this.MilCodeCourseId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{11}{10}- MilCodeCourseId: {0}{10}- EdAcadYearId: {1}{10}- MilCrsCode: {2}{10}- MilCrsAr: {3}{10}- MilCrsEn: {4}{10}- MilCrsStartDate: {5}{10}- MilCrsEndDate: {6}{10}- MilCrsMonths: {7}{10}- MilCrsDays: {8}{10}- MilCrsNotes: {9}{10}{12}", 
				this.MilCodeCourseId,
				(this.EdAcadYearId == null) ? string.Empty : this.EdAcadYearId.ToString(),
				(this.MilCrsCode == null) ? string.Empty : this.MilCrsCode.ToString(),
				this.MilCrsAr,
				this.MilCrsEn,
				(this.MilCrsStartDate == null) ? string.Empty : this.MilCrsStartDate.ToString(),
				(this.MilCrsEndDate == null) ? string.Empty : this.MilCrsEndDate.ToString(),
				(this.MilCrsMonths == null) ? string.Empty : this.MilCrsMonths.ToString(),
				(this.MilCrsDays == null) ? string.Empty : this.MilCrsDays.ToString(),
				(this.MilCrsNotes == null) ? string.Empty : this.MilCrsNotes.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'MIL_CODE_COURSE' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class MilCodeCourseEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MIL_CODE_COURSE_ID : مقررات الدورة العسكرية
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "MIL_CODE_COURSE"</remarks>
		public System.Int32 MilCodeCourseId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Int32 OriginalMilCodeCourseId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : عام الدورة
		/// </summary>
		public System.Decimal?		  EdAcadYearId = null;
		
		/// <summary>
		/// MIL_CRS_CODE : كود الدورة
		/// </summary>
		public System.String		  MilCrsCode = null;
		
		/// <summary>
		/// MIL_CRS_AR : 
		/// </summary>
		public System.String		  MilCrsAr = string.Empty;
		
		/// <summary>
		/// MIL_CRS_EN : 
		/// </summary>
		public System.String		  MilCrsEn = string.Empty;
		
		/// <summary>
		/// MIL_CRS_START_DATE : تاريخ بداية الدورة
		/// </summary>
		public System.DateTime?		  MilCrsStartDate = null;
		
		/// <summary>
		/// MIL_CRS_END_DATE : تاريخ نهاية الدورة
		/// </summary>
		public System.DateTime?		  MilCrsEndDate = null;
		
		/// <summary>
		/// MIL_CRS_MONTHS : عدد الشهور
		/// </summary>
		public System.Decimal?		  MilCrsMonths = null;
		
		/// <summary>
		/// MIL_CRS_DAYS : عدد الايام
		/// </summary>
		public System.Decimal?		  MilCrsDays = null;
		
		/// <summary>
		/// MIL_CRS_NOTES : ملاحظات على الدورة
		/// </summary>
		public System.String		  MilCrsNotes = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EdStudMltryCrsCollection
		
		private TList<EdStudMltryCrs> _edStudMltryCrsMilCodeCourseId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudMltryCrsMilCodeCourseId
		/// </summary>
		
		public TList<EdStudMltryCrs> EdStudMltryCrsCollection
		{
			get
			{
				if (_edStudMltryCrsMilCodeCourseId == null)
				{
				_edStudMltryCrsMilCodeCourseId = new TList<EdStudMltryCrs>();
				}
	
				return _edStudMltryCrsMilCodeCourseId;
			}
			set { _edStudMltryCrsMilCodeCourseId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			MilCodeCourseEntityData _tmp = new MilCodeCourseEntityData();
						
			_tmp.MilCodeCourseId = this.MilCodeCourseId;
			_tmp.OriginalMilCodeCourseId = this.OriginalMilCodeCourseId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.MilCrsCode = this.MilCrsCode;
			_tmp.MilCrsAr = this.MilCrsAr;
			_tmp.MilCrsEn = this.MilCrsEn;
			_tmp.MilCrsStartDate = this.MilCrsStartDate;
			_tmp.MilCrsEndDate = this.MilCrsEndDate;
			_tmp.MilCrsMonths = this.MilCrsMonths;
			_tmp.MilCrsDays = this.MilCrsDays;
			_tmp.MilCrsNotes = this.MilCrsNotes;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._edStudMltryCrsMilCodeCourseId != null)
				_tmp.EdStudMltryCrsCollection = (TList<EdStudMltryCrs>) MakeCopyOf(this.EdStudMltryCrsCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			MilCodeCourseEntityData _tmp = new MilCodeCourseEntityData();
						
			_tmp.MilCodeCourseId = this.MilCodeCourseId;
			_tmp.OriginalMilCodeCourseId = this.OriginalMilCodeCourseId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.MilCrsCode = this.MilCrsCode;
			_tmp.MilCrsAr = this.MilCrsAr;
			_tmp.MilCrsEn = this.MilCrsEn;
			_tmp.MilCrsStartDate = this.MilCrsStartDate;
			_tmp.MilCrsEndDate = this.MilCrsEndDate;
			_tmp.MilCrsMonths = this.MilCrsMonths;
			_tmp.MilCrsDays = this.MilCrsDays;
			_tmp.MilCrsNotes = this.MilCrsNotes;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EdStudMltryCrsCollection = (TList<EdStudMltryCrs>) MakeCopyOf(this.EdStudMltryCrsCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MilCodeCourseColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(MilCodeCourseColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MilCodeCourseColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(MilCodeCourseColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MilCodeCourseColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(MilCodeCourseColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				MilCodeCourseEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new MilCodeCourseEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MilCodeCourseColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(MilCodeCourseColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				MilCodeCourseEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new MilCodeCourseEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region MilCodeCourseEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="MilCodeCourse"/> object.
	/// </remarks>
	public class MilCodeCourseEventArgs : System.EventArgs
	{
		private MilCodeCourseColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the MilCodeCourseEventArgs class.
		///</summary>
		public MilCodeCourseEventArgs(MilCodeCourseColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the MilCodeCourseEventArgs class.
		///</summary>
		public MilCodeCourseEventArgs(MilCodeCourseColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The MilCodeCourseColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="MilCodeCourseColumn" />
		public MilCodeCourseColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all MilCodeCourse related events.
	///</summary>
	public delegate void MilCodeCourseEventHandler(object sender, MilCodeCourseEventArgs e);
	
	#region MilCodeCourseComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class MilCodeCourseComparer : System.Collections.Generic.IComparer<MilCodeCourse>
	{
		MilCodeCourseColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:MilCodeCourseComparer"/> class.
        /// </summary>
		public MilCodeCourseComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:MilCodeCourseComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public MilCodeCourseComparer(MilCodeCourseColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="MilCodeCourse"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="MilCodeCourse"/> to compare.</param>
        /// <param name="b">The second <c>MilCodeCourse</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(MilCodeCourse a, MilCodeCourse b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(MilCodeCourse entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(MilCodeCourse a, MilCodeCourse b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public MilCodeCourseColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region MilCodeCourseKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="MilCodeCourse"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class MilCodeCourseKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the MilCodeCourseKey class.
		/// </summary>
		public MilCodeCourseKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the MilCodeCourseKey class.
		/// </summary>
		public MilCodeCourseKey(MilCodeCourseBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MilCodeCourseId = entity.MilCodeCourseId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the MilCodeCourseKey class.
		/// </summary>
		public MilCodeCourseKey(System.Int32 _milCodeCourseId)
		{
			#region Init Properties

			this.MilCodeCourseId = _milCodeCourseId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private MilCodeCourseBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public MilCodeCourseBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MilCodeCourseId property
		private System.Int32 _milCodeCourseId;
		
		/// <summary>
		/// Gets or sets the MilCodeCourseId property.
		/// </summary>
		public System.Int32 MilCodeCourseId
		{
			get { return _milCodeCourseId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MilCodeCourseId = value;
				
				_milCodeCourseId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MilCodeCourseId = ( values["MilCodeCourseId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["MilCodeCourseId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MilCodeCourseId", MilCodeCourseId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MilCodeCourseId: {0}{1}",
								MilCodeCourseId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region MilCodeCourseColumn Enum
	
	/// <summary>
	/// Enumerate the MilCodeCourse columns.
	/// </summary>
	[Serializable]
	public enum MilCodeCourseColumn : int
	{
		/// <summary>
		/// MilCodeCourseId : مقررات الدورة العسكرية
		/// </summary>
		[EnumTextValue("MIL_CODE_COURSE_ID")]
		[ColumnEnum("MIL_CODE_COURSE_ID", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		MilCodeCourseId = 1,
		/// <summary>
		/// EdAcadYearId : عام الدورة
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdAcadYearId = 2,
		/// <summary>
		/// MilCrsCode : كود الدورة
		/// </summary>
		[EnumTextValue("MIL_CRS_CODE")]
		[ColumnEnum("MIL_CRS_CODE", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		MilCrsCode = 3,
		/// <summary>
		/// MilCrsAr : 
		/// </summary>
		[EnumTextValue("MIL_CRS_AR")]
		[ColumnEnum("MIL_CRS_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		MilCrsAr = 4,
		/// <summary>
		/// MilCrsEn : 
		/// </summary>
		[EnumTextValue("MIL_CRS_EN")]
		[ColumnEnum("MIL_CRS_EN", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		MilCrsEn = 5,
		/// <summary>
		/// MilCrsStartDate : تاريخ بداية الدورة
		/// </summary>
		[EnumTextValue("MIL_CRS_START_DATE")]
		[ColumnEnum("MIL_CRS_START_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		MilCrsStartDate = 6,
		/// <summary>
		/// MilCrsEndDate : تاريخ نهاية الدورة
		/// </summary>
		[EnumTextValue("MIL_CRS_END_DATE")]
		[ColumnEnum("MIL_CRS_END_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		MilCrsEndDate = 7,
		/// <summary>
		/// MilCrsMonths : عدد الشهور
		/// </summary>
		[EnumTextValue("MIL_CRS_MONTHS")]
		[ColumnEnum("MIL_CRS_MONTHS", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MilCrsMonths = 8,
		/// <summary>
		/// MilCrsDays : عدد الايام
		/// </summary>
		[EnumTextValue("MIL_CRS_DAYS")]
		[ColumnEnum("MIL_CRS_DAYS", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MilCrsDays = 9,
		/// <summary>
		/// MilCrsNotes : ملاحظات على الدورة
		/// </summary>
		[EnumTextValue("MIL_CRS_NOTES")]
		[ColumnEnum("MIL_CRS_NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 400)]
		MilCrsNotes = 10
	}//End enum

	#endregion MilCodeCourseColumn Enum

} // end namespace
