
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file FeeFacultyRule.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// مواطن  >> 0
	/// 	/// خليجي >> 1
	/// 	/// وافد>> 2
	/// 	/// الكل >> 3	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class FeeFacultyRuleBase : EntityBase, IFeeFacultyRule, IEntityId<FeeFacultyRuleKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private FeeFacultyRuleEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private FeeFacultyRuleEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private FeeFacultyRuleEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<FeeFacultyRule> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeFacultyRuleEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeFacultyRuleEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="FeeFacultyRuleBase"/> instance.
		///</summary>
		public FeeFacultyRuleBase()
		{
			this.entityData = new FeeFacultyRuleEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="FeeFacultyRuleBase"/> instance.
		///</summary>
		///<param name="_feeFacultyRuleId"></param>
		///<param name="_entMainId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_foreignFlg"></param>
		///<param name="_gsCodeCurrencyId"></param>
		///<param name="_edCodeSemesterTypeId"></param>
		///<param name="_edCodeLevelId"></param>
		///<param name="_feeCodeTypeId"></param>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_asCodeDegreeId"></param>
		///<param name="_isSponsor"></param>
		///<param name="_isActive"></param>
		///<param name="_edAcadYearId">XX not used</param>
		///<param name="_orientFlg"></param>
		///<param name="_notes"></param>
		///<param name="_feeFacultyRuleAr"></param>
		///<param name="_feeFacultyRuleEn"></param>
		///<param name="_edCodeSemesterId">KU</param>
		///<param name="_spoSponsorId"></param>
		///<param name="_edCdeStudTypeId">burimi</param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		public FeeFacultyRuleBase(System.Decimal _feeFacultyRuleId, System.Decimal _entMainId, 
			System.Decimal? _asFacultyInfoId, System.Decimal _foreignFlg, System.Decimal _gsCodeCurrencyId, 
			System.Decimal? _edCodeSemesterTypeId, System.Decimal? _edCodeLevelId, System.Decimal _feeCodeTypeId, 
			System.Decimal? _asCodeDegreeClassId, System.Decimal? _asCodeDegreeId, System.Decimal _isSponsor, 
			System.Decimal? _isActive, System.Decimal? _edAcadYearId, System.Boolean? _orientFlg, 
			System.String _notes, System.String _feeFacultyRuleAr, System.String _feeFacultyRuleEn, 
			System.Decimal? _edCodeSemesterId, System.Decimal? _spoSponsorId, System.Int32? _edCdeStudTypeId, 
			System.DateTime? _lastDate, System.Decimal? _seUserId)
		{
			this.entityData = new FeeFacultyRuleEntityData();
			this.backupData = null;

			this.FeeFacultyRuleId = _feeFacultyRuleId;
			this.EntMainId = _entMainId;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.ForeignFlg = _foreignFlg;
			this.GsCodeCurrencyId = _gsCodeCurrencyId;
			this.EdCodeSemesterTypeId = _edCodeSemesterTypeId;
			this.EdCodeLevelId = _edCodeLevelId;
			this.FeeCodeTypeId = _feeCodeTypeId;
			this.AsCodeDegreeClassId = _asCodeDegreeClassId;
			this.AsCodeDegreeId = _asCodeDegreeId;
			this.IsSponsor = _isSponsor;
			this.IsActive = _isActive;
			this.EdAcadYearId = _edAcadYearId;
			this.OrientFlg = _orientFlg;
			this.Notes = _notes;
			this.FeeFacultyRuleAr = _feeFacultyRuleAr;
			this.FeeFacultyRuleEn = _feeFacultyRuleEn;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.SpoSponsorId = _spoSponsorId;
			this.EdCdeStudTypeId = _edCdeStudTypeId;
			this.LastDate = _lastDate;
			this.SeUserId = _seUserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="FeeFacultyRule"/> instance.
		///</summary>
		///<param name="_feeFacultyRuleId"></param>
		///<param name="_entMainId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_foreignFlg"></param>
		///<param name="_gsCodeCurrencyId"></param>
		///<param name="_edCodeSemesterTypeId"></param>
		///<param name="_edCodeLevelId"></param>
		///<param name="_feeCodeTypeId"></param>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_asCodeDegreeId"></param>
		///<param name="_isSponsor"></param>
		///<param name="_isActive"></param>
		///<param name="_edAcadYearId">XX not used</param>
		///<param name="_orientFlg"></param>
		///<param name="_notes"></param>
		///<param name="_feeFacultyRuleAr"></param>
		///<param name="_feeFacultyRuleEn"></param>
		///<param name="_edCodeSemesterId">KU</param>
		///<param name="_spoSponsorId"></param>
		///<param name="_edCdeStudTypeId">burimi</param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		public static FeeFacultyRule CreateFeeFacultyRule(System.Decimal _feeFacultyRuleId, System.Decimal _entMainId, 
			System.Decimal? _asFacultyInfoId, System.Decimal _foreignFlg, System.Decimal _gsCodeCurrencyId, 
			System.Decimal? _edCodeSemesterTypeId, System.Decimal? _edCodeLevelId, System.Decimal _feeCodeTypeId, 
			System.Decimal? _asCodeDegreeClassId, System.Decimal? _asCodeDegreeId, System.Decimal _isSponsor, 
			System.Decimal? _isActive, System.Decimal? _edAcadYearId, System.Boolean? _orientFlg, 
			System.String _notes, System.String _feeFacultyRuleAr, System.String _feeFacultyRuleEn, 
			System.Decimal? _edCodeSemesterId, System.Decimal? _spoSponsorId, System.Int32? _edCdeStudTypeId, 
			System.DateTime? _lastDate, System.Decimal? _seUserId)
		{
			FeeFacultyRule newFeeFacultyRule = new FeeFacultyRule();
			newFeeFacultyRule.FeeFacultyRuleId = _feeFacultyRuleId;
			newFeeFacultyRule.EntMainId = _entMainId;
			newFeeFacultyRule.AsFacultyInfoId = _asFacultyInfoId;
			newFeeFacultyRule.ForeignFlg = _foreignFlg;
			newFeeFacultyRule.GsCodeCurrencyId = _gsCodeCurrencyId;
			newFeeFacultyRule.EdCodeSemesterTypeId = _edCodeSemesterTypeId;
			newFeeFacultyRule.EdCodeLevelId = _edCodeLevelId;
			newFeeFacultyRule.FeeCodeTypeId = _feeCodeTypeId;
			newFeeFacultyRule.AsCodeDegreeClassId = _asCodeDegreeClassId;
			newFeeFacultyRule.AsCodeDegreeId = _asCodeDegreeId;
			newFeeFacultyRule.IsSponsor = _isSponsor;
			newFeeFacultyRule.IsActive = _isActive;
			newFeeFacultyRule.EdAcadYearId = _edAcadYearId;
			newFeeFacultyRule.OrientFlg = _orientFlg;
			newFeeFacultyRule.Notes = _notes;
			newFeeFacultyRule.FeeFacultyRuleAr = _feeFacultyRuleAr;
			newFeeFacultyRule.FeeFacultyRuleEn = _feeFacultyRuleEn;
			newFeeFacultyRule.EdCodeSemesterId = _edCodeSemesterId;
			newFeeFacultyRule.SpoSponsorId = _spoSponsorId;
			newFeeFacultyRule.EdCdeStudTypeId = _edCdeStudTypeId;
			newFeeFacultyRule.LastDate = _lastDate;
			newFeeFacultyRule.SeUserId = _seUserId;
			return newFeeFacultyRule;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the FeeFacultyRuleId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal FeeFacultyRuleId
		{
			get
			{
				return this.entityData.FeeFacultyRuleId; 
			}
			
			set
			{
				if (this.entityData.FeeFacultyRuleId == value)
					return;
					
				OnColumnChanging(FeeFacultyRuleColumn.FeeFacultyRuleId, this.entityData.FeeFacultyRuleId);
				this.entityData.FeeFacultyRuleId = value;
				this.EntityId.FeeFacultyRuleId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyRuleColumn.FeeFacultyRuleId, this.entityData.FeeFacultyRuleId);
				OnPropertyChanged("FeeFacultyRuleId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the FEE_FACULTY_RULE_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the FEE_FACULTY_RULE_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalFeeFacultyRuleId
		{
			get { return this.entityData.OriginalFeeFacultyRuleId; }
			set { this.entityData.OriginalFeeFacultyRuleId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EntMainId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EntMainId
		{
			get
			{
				return this.entityData.EntMainId; 
			}
			
			set
			{
				if (this.entityData.EntMainId == value)
					return;
					
				OnColumnChanging(FeeFacultyRuleColumn.EntMainId, this.entityData.EntMainId);
				this.entityData.EntMainId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyRuleColumn.EntMainId, this.entityData.EntMainId);
				OnPropertyChanged("EntMainId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(FeeFacultyRuleColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyRuleColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ForeignFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ForeignFlg
		{
			get
			{
				return this.entityData.ForeignFlg; 
			}
			
			set
			{
				if (this.entityData.ForeignFlg == value)
					return;
					
				OnColumnChanging(FeeFacultyRuleColumn.ForeignFlg, this.entityData.ForeignFlg);
				this.entityData.ForeignFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyRuleColumn.ForeignFlg, this.entityData.ForeignFlg);
				OnPropertyChanged("ForeignFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeCurrencyId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsCodeCurrencyId
		{
			get
			{
				return this.entityData.GsCodeCurrencyId; 
			}
			
			set
			{
				if (this.entityData.GsCodeCurrencyId == value)
					return;
					
				OnColumnChanging(FeeFacultyRuleColumn.GsCodeCurrencyId, this.entityData.GsCodeCurrencyId);
				this.entityData.GsCodeCurrencyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyRuleColumn.GsCodeCurrencyId, this.entityData.GsCodeCurrencyId);
				OnPropertyChanged("GsCodeCurrencyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeSemesterTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeSemesterTypeId
		{
			get
			{
				return this.entityData.EdCodeSemesterTypeId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterTypeId == value)
					return;
					
				OnColumnChanging(FeeFacultyRuleColumn.EdCodeSemesterTypeId, this.entityData.EdCodeSemesterTypeId);
				this.entityData.EdCodeSemesterTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyRuleColumn.EdCodeSemesterTypeId, this.entityData.EdCodeSemesterTypeId);
				OnPropertyChanged("EdCodeSemesterTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeLevelId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeLevelIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeLevelId
		{
			get
			{
				return this.entityData.EdCodeLevelId; 
			}
			
			set
			{
				if (this.entityData.EdCodeLevelId == value)
					return;
					
				OnColumnChanging(FeeFacultyRuleColumn.EdCodeLevelId, this.entityData.EdCodeLevelId);
				this.entityData.EdCodeLevelId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyRuleColumn.EdCodeLevelId, this.entityData.EdCodeLevelId);
				OnPropertyChanged("EdCodeLevelId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeCodeTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal FeeCodeTypeId
		{
			get
			{
				return this.entityData.FeeCodeTypeId; 
			}
			
			set
			{
				if (this.entityData.FeeCodeTypeId == value)
					return;
					
				OnColumnChanging(FeeFacultyRuleColumn.FeeCodeTypeId, this.entityData.FeeCodeTypeId);
				this.entityData.FeeCodeTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyRuleColumn.FeeCodeTypeId, this.entityData.FeeCodeTypeId);
				OnPropertyChanged("FeeCodeTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeClassId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeClassIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeClassId
		{
			get
			{
				return this.entityData.AsCodeDegreeClassId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeClassId == value)
					return;
					
				OnColumnChanging(FeeFacultyRuleColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				this.entityData.AsCodeDegreeClassId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyRuleColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				OnPropertyChanged("AsCodeDegreeClassId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeId
		{
			get
			{
				return this.entityData.AsCodeDegreeId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeId == value)
					return;
					
				OnColumnChanging(FeeFacultyRuleColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				this.entityData.AsCodeDegreeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyRuleColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				OnPropertyChanged("AsCodeDegreeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsSponsor property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsSponsor
		{
			get
			{
				return this.entityData.IsSponsor; 
			}
			
			set
			{
				if (this.entityData.IsSponsor == value)
					return;
					
				OnColumnChanging(FeeFacultyRuleColumn.IsSponsor, this.entityData.IsSponsor);
				this.entityData.IsSponsor = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyRuleColumn.IsSponsor, this.entityData.IsSponsor);
				OnPropertyChanged("IsSponsor");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsIsActiveNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
				OnColumnChanging(FeeFacultyRuleColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyRuleColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		XX not used
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdAcadYearIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XX not used"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(FeeFacultyRuleColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyRuleColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrientFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsOrientFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? OrientFlg
		{
			get
			{
				return this.entityData.OrientFlg; 
			}
			
			set
			{
				if (this.entityData.OrientFlg == value)
					return;
					
				OnColumnChanging(FeeFacultyRuleColumn.OrientFlg, this.entityData.OrientFlg);
				this.entityData.OrientFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyRuleColumn.OrientFlg, this.entityData.OrientFlg);
				OnPropertyChanged("OrientFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(FeeFacultyRuleColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyRuleColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeFacultyRuleAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String FeeFacultyRuleAr
		{
			get
			{
				return this.entityData.FeeFacultyRuleAr; 
			}
			
			set
			{
				if (this.entityData.FeeFacultyRuleAr == value)
					return;
					
				OnColumnChanging(FeeFacultyRuleColumn.FeeFacultyRuleAr, this.entityData.FeeFacultyRuleAr);
				this.entityData.FeeFacultyRuleAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyRuleColumn.FeeFacultyRuleAr, this.entityData.FeeFacultyRuleAr);
				OnPropertyChanged("FeeFacultyRuleAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeFacultyRuleEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String FeeFacultyRuleEn
		{
			get
			{
				return this.entityData.FeeFacultyRuleEn; 
			}
			
			set
			{
				if (this.entityData.FeeFacultyRuleEn == value)
					return;
					
				OnColumnChanging(FeeFacultyRuleColumn.FeeFacultyRuleEn, this.entityData.FeeFacultyRuleEn);
				this.entityData.FeeFacultyRuleEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyRuleColumn.FeeFacultyRuleEn, this.entityData.FeeFacultyRuleEn);
				OnPropertyChanged("FeeFacultyRuleEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		KU
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeSemesterIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"KU"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(FeeFacultyRuleColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyRuleColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SpoSponsorId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSpoSponsorIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SpoSponsorId
		{
			get
			{
				return this.entityData.SpoSponsorId; 
			}
			
			set
			{
				if (this.entityData.SpoSponsorId == value)
					return;
					
				OnColumnChanging(FeeFacultyRuleColumn.SpoSponsorId, this.entityData.SpoSponsorId);
				this.entityData.SpoSponsorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyRuleColumn.SpoSponsorId, this.entityData.SpoSponsorId);
				OnPropertyChanged("SpoSponsorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCdeStudTypeId property. 
		///		burimi
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsEdCdeStudTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"burimi"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? EdCdeStudTypeId
		{
			get
			{
				return this.entityData.EdCdeStudTypeId; 
			}
			
			set
			{
				if (this.entityData.EdCdeStudTypeId == value)
					return;
					
				OnColumnChanging(FeeFacultyRuleColumn.EdCdeStudTypeId, this.entityData.EdCdeStudTypeId);
				this.entityData.EdCdeStudTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyRuleColumn.EdCdeStudTypeId, this.entityData.EdCdeStudTypeId);
				OnPropertyChanged("EdCdeStudTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(FeeFacultyRuleColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyRuleColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(FeeFacultyRuleColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeFacultyRuleColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return entityData.AsCodeDegreeIdSource; }
            set { entityData.AsCodeDegreeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return entityData.AsCodeDegreeClassIdSource; }
            set { entityData.AsCodeDegreeClassIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeStudType"/>.
		/// </summary>
		/// <value>The source EdCdeStudType for EdCdeStudTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCdeStudType EdCdeStudTypeIdSource
      	{
            get { return entityData.EdCdeStudTypeIdSource; }
            set { entityData.EdCdeStudTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeLevel EdCodeLevelIdSource
      	{
            get { return entityData.EdCodeLevelIdSource; }
            set { entityData.EdCodeLevelIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemesterType"/>.
		/// </summary>
		/// <value>The source EdCodeSemesterType for EdCodeSemesterTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemesterType EdCodeSemesterTypeIdSource
      	{
            get { return entityData.EdCodeSemesterTypeIdSource; }
            set { entityData.EdCodeSemesterTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return entityData.EntMainIdSource; }
            set { entityData.EntMainIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeType"/>.
		/// </summary>
		/// <value>The source FeeCodeType for FeeCodeTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeCodeType FeeCodeTypeIdSource
      	{
            get { return entityData.FeeCodeTypeIdSource; }
            set { entityData.FeeCodeTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeFacultyRule"/>.
		/// </summary>
		/// <value>The source FeeFacultyRule for FeeFacultyRuleId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeFacultyRule FeeFacultyRuleIdSource
      	{
            get { return entityData.FeeFacultyRuleIdSource; }
            set { entityData.FeeFacultyRuleIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCurrency"/>.
		/// </summary>
		/// <value>The source GsCodeCurrency for GsCodeCurrencyId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeCurrency GsCodeCurrencyIdSource
      	{
            get { return entityData.GsCodeCurrencyIdSource; }
            set { entityData.GsCodeCurrencyIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SpoSponsor"/>.
		/// </summary>
		/// <value>The source SpoSponsor for SpoSponsorId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SpoSponsor SpoSponsorIdSource
      	{
            get { return entityData.SpoSponsorIdSource; }
            set { entityData.SpoSponsorIdSource = value; }
      	}
		#endregion
		
		#region Children Collections

		/// <summary>
		///	Holds a FeeFacultyRule object
		///	which is related to this object through the relation FeeFacultyRule
		/// </summary>
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeFacultyRule FeeFacultyRule
		{
			get { return entityData.FeeFacultyRule; }
			set { entityData.FeeFacultyRule = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeItemSemester objects
		///	which are related to this object through the relation FK_FEE_ITEM_SEMESTER_FEE_FACULTY_RULE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeItemSemester> FeeItemSemesterCollection
		{
			get { return entityData.FeeItemSemesterCollection; }
			set { entityData.FeeItemSemesterCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudSemesterTemp objects
		///	which are related to this object through the relation FK_ED_STUD_SEMESTER_OLD_FEE_FACULTY_RULE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudSemesterTemp> EdStudSemesterTempCollection
		{
			get { return entityData.EdStudSemesterTempCollection; }
			set { entityData.EdStudSemesterTempCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudSemester objects
		///	which are related to this object through the relation FK_ED_STUD_SEMESTER_FEE_FACULTY_RULE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudSemester> EdStudSemesterCollection
		{
			get { return entityData.EdStudSemesterCollection; }
			set { entityData.EdStudSemesterCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeFacultyItem objects
		///	which are related to this object through the relation FK_FEE_FAC_ITEM_FEE_FACULTY_RULE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeFacultyItem> FeeFacultyItemCollection
		{
			get { return entityData.FeeFacultyItemCollection; }
			set { entityData.FeeFacultyItemCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FeeFacultyRuleAr", "Fee Faculty Rule Ar", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FeeFacultyRuleEn", "Fee Faculty Rule En", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "FEE_FACULTY_RULE"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"FEE_FACULTY_RULE_ID", "ENT_MAIN_ID", "AS_FACULTY_INFO_ID", "FOREIGN_FLG", "GS_CODE_CURRENCY_ID", "ED_CODE_SEMESTER_TYPE_ID", "ED_CODE_LEVEL_ID", "FEE_CODE_TYPE_ID", "AS_CODE_DEGREE_CLASS_ID", "AS_CODE_DEGREE_ID", "IS_SPONSOR", "IS_ACTIVE", "ED_ACAD_YEAR_ID", "ORIENT_FLG", "NOTES", "FEE_FACULTY_RULE_AR", "FEE_FACULTY_RULE_EN", "ED_CODE_SEMESTER_ID", "SPO_SPONSOR_ID", "ED_CDE_STUD_TYPE_ID", "LAST_DATE", "SE_USER_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as FeeFacultyRuleEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (FeeFacultyRule) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<FeeFacultyRule>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as FeeFacultyRule);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed FeeFacultyRule Entity 
		///</summary>
		protected virtual FeeFacultyRule Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			FeeFacultyRule copy = new FeeFacultyRule();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.FeeFacultyRuleId = this.FeeFacultyRuleId;
					copy.OriginalFeeFacultyRuleId = this.OriginalFeeFacultyRuleId;
				copy.EntMainId = this.EntMainId;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.ForeignFlg = this.ForeignFlg;
				copy.GsCodeCurrencyId = this.GsCodeCurrencyId;
				copy.EdCodeSemesterTypeId = this.EdCodeSemesterTypeId;
				copy.EdCodeLevelId = this.EdCodeLevelId;
				copy.FeeCodeTypeId = this.FeeCodeTypeId;
				copy.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
				copy.AsCodeDegreeId = this.AsCodeDegreeId;
				copy.IsSponsor = this.IsSponsor;
				copy.IsActive = this.IsActive;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.OrientFlg = this.OrientFlg;
				copy.Notes = this.Notes;
				copy.FeeFacultyRuleAr = this.FeeFacultyRuleAr;
				copy.FeeFacultyRuleEn = this.FeeFacultyRuleEn;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.SpoSponsorId = this.SpoSponsorId;
				copy.EdCdeStudTypeId = this.EdCdeStudTypeId;
				copy.LastDate = this.LastDate;
				copy.SeUserId = this.SeUserId;
			
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				copy.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				copy.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				copy.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				copy.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCdeStudTypeIdSource != null && existingCopies.Contains(this.EdCdeStudTypeIdSource))
				copy.EdCdeStudTypeIdSource = existingCopies[this.EdCdeStudTypeIdSource] as EdCdeStudType;
			else
				copy.EdCdeStudTypeIdSource = MakeCopyOf(this.EdCdeStudTypeIdSource, existingCopies) as EdCdeStudType;
			if (this.EdCodeLevelIdSource != null && existingCopies.Contains(this.EdCodeLevelIdSource))
				copy.EdCodeLevelIdSource = existingCopies[this.EdCodeLevelIdSource] as EdCodeLevel;
			else
				copy.EdCodeLevelIdSource = MakeCopyOf(this.EdCodeLevelIdSource, existingCopies) as EdCodeLevel;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCodeSemesterTypeIdSource != null && existingCopies.Contains(this.EdCodeSemesterTypeIdSource))
				copy.EdCodeSemesterTypeIdSource = existingCopies[this.EdCodeSemesterTypeIdSource] as EdCodeSemesterType;
			else
				copy.EdCodeSemesterTypeIdSource = MakeCopyOf(this.EdCodeSemesterTypeIdSource, existingCopies) as EdCodeSemesterType;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				copy.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				copy.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.FeeCodeTypeIdSource != null && existingCopies.Contains(this.FeeCodeTypeIdSource))
				copy.FeeCodeTypeIdSource = existingCopies[this.FeeCodeTypeIdSource] as FeeCodeType;
			else
				copy.FeeCodeTypeIdSource = MakeCopyOf(this.FeeCodeTypeIdSource, existingCopies) as FeeCodeType;
			if (this.FeeFacultyRuleIdSource != null && existingCopies.Contains(this.FeeFacultyRuleIdSource))
				copy.FeeFacultyRuleIdSource = existingCopies[this.FeeFacultyRuleIdSource] as FeeFacultyRule;
			else
				copy.FeeFacultyRuleIdSource = MakeCopyOf(this.FeeFacultyRuleIdSource, existingCopies) as FeeFacultyRule;
			if (this.GsCodeCurrencyIdSource != null && existingCopies.Contains(this.GsCodeCurrencyIdSource))
				copy.GsCodeCurrencyIdSource = existingCopies[this.GsCodeCurrencyIdSource] as GsCodeCurrency;
			else
				copy.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource, existingCopies) as GsCodeCurrency;
			if (this.SpoSponsorIdSource != null && existingCopies.Contains(this.SpoSponsorIdSource))
				copy.SpoSponsorIdSource = existingCopies[this.SpoSponsorIdSource] as SpoSponsor;
			else
				copy.SpoSponsorIdSource = MakeCopyOf(this.SpoSponsorIdSource, existingCopies) as SpoSponsor;
		
			//deep copy nested objects
			copy.FeeFacultyRule = (FeeFacultyRule) MakeCopyOf(this.FeeFacultyRule, existingCopies); 
			copy.FeeItemSemesterCollection = (TList<FeeItemSemester>) MakeCopyOf(this.FeeItemSemesterCollection, existingCopies); 
			copy.EdStudSemesterTempCollection = (TList<EdStudSemesterTemp>) MakeCopyOf(this.EdStudSemesterTempCollection, existingCopies); 
			copy.EdStudSemesterCollection = (TList<EdStudSemester>) MakeCopyOf(this.EdStudSemesterCollection, existingCopies); 
			copy.FeeFacultyItemCollection = (TList<FeeFacultyItem>) MakeCopyOf(this.FeeFacultyItemCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed FeeFacultyRule Entity 
		///</summary>
		public virtual FeeFacultyRule Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed FeeFacultyRule Entity which is a deep copy of the current entity.
		///</summary>
		public virtual FeeFacultyRule DeepCopy()
		{
			return EntityHelper.Clone<FeeFacultyRule>(this as FeeFacultyRule);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as FeeFacultyRuleEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new FeeFacultyRuleEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as FeeFacultyRuleEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(FeeFacultyRuleColumn column)
		{
			switch(column)
			{
					case FeeFacultyRuleColumn.FeeFacultyRuleId:
					return entityData.FeeFacultyRuleId != _originalData.FeeFacultyRuleId;
					case FeeFacultyRuleColumn.EntMainId:
					return entityData.EntMainId != _originalData.EntMainId;
					case FeeFacultyRuleColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case FeeFacultyRuleColumn.ForeignFlg:
					return entityData.ForeignFlg != _originalData.ForeignFlg;
					case FeeFacultyRuleColumn.GsCodeCurrencyId:
					return entityData.GsCodeCurrencyId != _originalData.GsCodeCurrencyId;
					case FeeFacultyRuleColumn.EdCodeSemesterTypeId:
					return entityData.EdCodeSemesterTypeId != _originalData.EdCodeSemesterTypeId;
					case FeeFacultyRuleColumn.EdCodeLevelId:
					return entityData.EdCodeLevelId != _originalData.EdCodeLevelId;
					case FeeFacultyRuleColumn.FeeCodeTypeId:
					return entityData.FeeCodeTypeId != _originalData.FeeCodeTypeId;
					case FeeFacultyRuleColumn.AsCodeDegreeClassId:
					return entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
					case FeeFacultyRuleColumn.AsCodeDegreeId:
					return entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
					case FeeFacultyRuleColumn.IsSponsor:
					return entityData.IsSponsor != _originalData.IsSponsor;
					case FeeFacultyRuleColumn.IsActive:
					return entityData.IsActive != _originalData.IsActive;
					case FeeFacultyRuleColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case FeeFacultyRuleColumn.OrientFlg:
					return entityData.OrientFlg != _originalData.OrientFlg;
					case FeeFacultyRuleColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case FeeFacultyRuleColumn.FeeFacultyRuleAr:
					return entityData.FeeFacultyRuleAr != _originalData.FeeFacultyRuleAr;
					case FeeFacultyRuleColumn.FeeFacultyRuleEn:
					return entityData.FeeFacultyRuleEn != _originalData.FeeFacultyRuleEn;
					case FeeFacultyRuleColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case FeeFacultyRuleColumn.SpoSponsorId:
					return entityData.SpoSponsorId != _originalData.SpoSponsorId;
					case FeeFacultyRuleColumn.EdCdeStudTypeId:
					return entityData.EdCdeStudTypeId != _originalData.EdCdeStudTypeId;
					case FeeFacultyRuleColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case FeeFacultyRuleColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< FeeFacultyRuleColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.FeeFacultyRuleId != _originalData.FeeFacultyRuleId;
			result = result || entityData.EntMainId != _originalData.EntMainId;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.ForeignFlg != _originalData.ForeignFlg;
			result = result || entityData.GsCodeCurrencyId != _originalData.GsCodeCurrencyId;
			result = result || entityData.EdCodeSemesterTypeId != _originalData.EdCodeSemesterTypeId;
			result = result || entityData.EdCodeLevelId != _originalData.EdCodeLevelId;
			result = result || entityData.FeeCodeTypeId != _originalData.FeeCodeTypeId;
			result = result || entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
			result = result || entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
			result = result || entityData.IsSponsor != _originalData.IsSponsor;
			result = result || entityData.IsActive != _originalData.IsActive;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.OrientFlg != _originalData.OrientFlg;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.FeeFacultyRuleAr != _originalData.FeeFacultyRuleAr;
			result = result || entityData.FeeFacultyRuleEn != _originalData.FeeFacultyRuleEn;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.SpoSponsorId != _originalData.SpoSponsorId;
			result = result || entityData.EdCdeStudTypeId != _originalData.EdCdeStudTypeId;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			return result;
		}	
		
		///<summary>
		///  Returns a FeeFacultyRule Entity with the original data.
		///</summary>
		public FeeFacultyRule GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateFeeFacultyRule(
				_originalData.FeeFacultyRuleId,
				_originalData.EntMainId,
				_originalData.AsFacultyInfoId,
				_originalData.ForeignFlg,
				_originalData.GsCodeCurrencyId,
				_originalData.EdCodeSemesterTypeId,
				_originalData.EdCodeLevelId,
				_originalData.FeeCodeTypeId,
				_originalData.AsCodeDegreeClassId,
				_originalData.AsCodeDegreeId,
				_originalData.IsSponsor,
				_originalData.IsActive,
				_originalData.EdAcadYearId,
				_originalData.OrientFlg,
				_originalData.Notes,
				_originalData.FeeFacultyRuleAr,
				_originalData.FeeFacultyRuleEn,
				_originalData.EdCodeSemesterId,
				_originalData.SpoSponsorId,
				_originalData.EdCdeStudTypeId,
				_originalData.LastDate,
				_originalData.SeUserId
				);
				
			return (FeeFacultyRule)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="FeeFacultyRuleBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is FeeFacultyRuleBase)
				return ValueEquals(this, (FeeFacultyRuleBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="FeeFacultyRuleBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.FeeFacultyRuleId.GetHashCode() ^ 
					this.EntMainId.GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					this.ForeignFlg.GetHashCode() ^ 
					this.GsCodeCurrencyId.GetHashCode() ^ 
					((this.EdCodeSemesterTypeId == null) ? string.Empty : this.EdCodeSemesterTypeId.ToString()).GetHashCode() ^ 
					((this.EdCodeLevelId == null) ? string.Empty : this.EdCodeLevelId.ToString()).GetHashCode() ^ 
					this.FeeCodeTypeId.GetHashCode() ^ 
					((this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString()).GetHashCode() ^ 
					((this.AsCodeDegreeId == null) ? string.Empty : this.AsCodeDegreeId.ToString()).GetHashCode() ^ 
					this.IsSponsor.GetHashCode() ^ 
					((this.IsActive == null) ? string.Empty : this.IsActive.ToString()).GetHashCode() ^ 
					((this.EdAcadYearId == null) ? string.Empty : this.EdAcadYearId.ToString()).GetHashCode() ^ 
					((this.OrientFlg == null) ? string.Empty : this.OrientFlg.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.FeeFacultyRuleAr == null) ? string.Empty : this.FeeFacultyRuleAr.ToString()).GetHashCode() ^ 
					((this.FeeFacultyRuleEn == null) ? string.Empty : this.FeeFacultyRuleEn.ToString()).GetHashCode() ^ 
					((this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString()).GetHashCode() ^ 
					((this.SpoSponsorId == null) ? string.Empty : this.SpoSponsorId.ToString()).GetHashCode() ^ 
					((this.EdCdeStudTypeId == null) ? string.Empty : this.EdCdeStudTypeId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="FeeFacultyRuleBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(FeeFacultyRuleBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="FeeFacultyRuleBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="FeeFacultyRuleBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="FeeFacultyRuleBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(FeeFacultyRuleBase Object1, FeeFacultyRuleBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.FeeFacultyRuleId != Object2.FeeFacultyRuleId)
				equal = false;
			if (Object1.EntMainId != Object2.EntMainId)
				equal = false;
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if (Object1.ForeignFlg != Object2.ForeignFlg)
				equal = false;
			if (Object1.GsCodeCurrencyId != Object2.GsCodeCurrencyId)
				equal = false;
			if ( Object1.EdCodeSemesterTypeId != null && Object2.EdCodeSemesterTypeId != null )
			{
				if (Object1.EdCodeSemesterTypeId != Object2.EdCodeSemesterTypeId)
					equal = false;
			}
			else if (Object1.EdCodeSemesterTypeId == null ^ Object2.EdCodeSemesterTypeId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeLevelId != null && Object2.EdCodeLevelId != null )
			{
				if (Object1.EdCodeLevelId != Object2.EdCodeLevelId)
					equal = false;
			}
			else if (Object1.EdCodeLevelId == null ^ Object2.EdCodeLevelId == null )
			{
				equal = false;
			}
			if (Object1.FeeCodeTypeId != Object2.FeeCodeTypeId)
				equal = false;
			if ( Object1.AsCodeDegreeClassId != null && Object2.AsCodeDegreeClassId != null )
			{
				if (Object1.AsCodeDegreeClassId != Object2.AsCodeDegreeClassId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeClassId == null ^ Object2.AsCodeDegreeClassId == null )
			{
				equal = false;
			}
			if ( Object1.AsCodeDegreeId != null && Object2.AsCodeDegreeId != null )
			{
				if (Object1.AsCodeDegreeId != Object2.AsCodeDegreeId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeId == null ^ Object2.AsCodeDegreeId == null )
			{
				equal = false;
			}
			if (Object1.IsSponsor != Object2.IsSponsor)
				equal = false;
			if ( Object1.IsActive != null && Object2.IsActive != null )
			{
				if (Object1.IsActive != Object2.IsActive)
					equal = false;
			}
			else if (Object1.IsActive == null ^ Object2.IsActive == null )
			{
				equal = false;
			}
			if ( Object1.EdAcadYearId != null && Object2.EdAcadYearId != null )
			{
				if (Object1.EdAcadYearId != Object2.EdAcadYearId)
					equal = false;
			}
			else if (Object1.EdAcadYearId == null ^ Object2.EdAcadYearId == null )
			{
				equal = false;
			}
			if ( Object1.OrientFlg != null && Object2.OrientFlg != null )
			{
				if (Object1.OrientFlg != Object2.OrientFlg)
					equal = false;
			}
			else if (Object1.OrientFlg == null ^ Object2.OrientFlg == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.FeeFacultyRuleAr != null && Object2.FeeFacultyRuleAr != null )
			{
				if (Object1.FeeFacultyRuleAr != Object2.FeeFacultyRuleAr)
					equal = false;
			}
			else if (Object1.FeeFacultyRuleAr == null ^ Object2.FeeFacultyRuleAr == null )
			{
				equal = false;
			}
			if ( Object1.FeeFacultyRuleEn != null && Object2.FeeFacultyRuleEn != null )
			{
				if (Object1.FeeFacultyRuleEn != Object2.FeeFacultyRuleEn)
					equal = false;
			}
			else if (Object1.FeeFacultyRuleEn == null ^ Object2.FeeFacultyRuleEn == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeSemesterId != null && Object2.EdCodeSemesterId != null )
			{
				if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
					equal = false;
			}
			else if (Object1.EdCodeSemesterId == null ^ Object2.EdCodeSemesterId == null )
			{
				equal = false;
			}
			if ( Object1.SpoSponsorId != null && Object2.SpoSponsorId != null )
			{
				if (Object1.SpoSponsorId != Object2.SpoSponsorId)
					equal = false;
			}
			else if (Object1.SpoSponsorId == null ^ Object2.SpoSponsorId == null )
			{
				equal = false;
			}
			if ( Object1.EdCdeStudTypeId != null && Object2.EdCdeStudTypeId != null )
			{
				if (Object1.EdCdeStudTypeId != Object2.EdCdeStudTypeId)
					equal = false;
			}
			else if (Object1.EdCdeStudTypeId == null ^ Object2.EdCdeStudTypeId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((FeeFacultyRuleBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static FeeFacultyRuleComparer GetComparer()
        {
            return new FeeFacultyRuleComparer();
        }
        */

        // Comparer delegates back to FeeFacultyRule
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(FeeFacultyRule rhs, FeeFacultyRuleColumn which)
        {
            switch (which)
            {
            	
            	
            	case FeeFacultyRuleColumn.FeeFacultyRuleId:
            		return this.FeeFacultyRuleId.CompareTo(rhs.FeeFacultyRuleId);
            		
            		                 
            	
            	
            	case FeeFacultyRuleColumn.EntMainId:
            		return this.EntMainId.CompareTo(rhs.EntMainId);
            		
            		                 
            	
            	
            	case FeeFacultyRuleColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case FeeFacultyRuleColumn.ForeignFlg:
            		return this.ForeignFlg.CompareTo(rhs.ForeignFlg);
            		
            		                 
            	
            	
            	case FeeFacultyRuleColumn.GsCodeCurrencyId:
            		return this.GsCodeCurrencyId.CompareTo(rhs.GsCodeCurrencyId);
            		
            		                 
            	
            	
            	case FeeFacultyRuleColumn.EdCodeSemesterTypeId:
            		return this.EdCodeSemesterTypeId.Value.CompareTo(rhs.EdCodeSemesterTypeId.Value);
            		
            		                 
            	
            	
            	case FeeFacultyRuleColumn.EdCodeLevelId:
            		return this.EdCodeLevelId.Value.CompareTo(rhs.EdCodeLevelId.Value);
            		
            		                 
            	
            	
            	case FeeFacultyRuleColumn.FeeCodeTypeId:
            		return this.FeeCodeTypeId.CompareTo(rhs.FeeCodeTypeId);
            		
            		                 
            	
            	
            	case FeeFacultyRuleColumn.AsCodeDegreeClassId:
            		return this.AsCodeDegreeClassId.Value.CompareTo(rhs.AsCodeDegreeClassId.Value);
            		
            		                 
            	
            	
            	case FeeFacultyRuleColumn.AsCodeDegreeId:
            		return this.AsCodeDegreeId.Value.CompareTo(rhs.AsCodeDegreeId.Value);
            		
            		                 
            	
            	
            	case FeeFacultyRuleColumn.IsSponsor:
            		return this.IsSponsor.CompareTo(rhs.IsSponsor);
            		
            		                 
            	
            	
            	case FeeFacultyRuleColumn.IsActive:
            		return this.IsActive.Value.CompareTo(rhs.IsActive.Value);
            		
            		                 
            	
            	
            	case FeeFacultyRuleColumn.EdAcadYearId:
            		return this.EdAcadYearId.Value.CompareTo(rhs.EdAcadYearId.Value);
            		
            		                 
            	
            	
            	case FeeFacultyRuleColumn.OrientFlg:
            		return this.OrientFlg.Value.CompareTo(rhs.OrientFlg.Value);
            		
            		                 
            	
            	
            	case FeeFacultyRuleColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case FeeFacultyRuleColumn.FeeFacultyRuleAr:
            		return this.FeeFacultyRuleAr.CompareTo(rhs.FeeFacultyRuleAr);
            		
            		                 
            	
            	
            	case FeeFacultyRuleColumn.FeeFacultyRuleEn:
            		return this.FeeFacultyRuleEn.CompareTo(rhs.FeeFacultyRuleEn);
            		
            		                 
            	
            	
            	case FeeFacultyRuleColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.Value.CompareTo(rhs.EdCodeSemesterId.Value);
            		
            		                 
            	
            	
            	case FeeFacultyRuleColumn.SpoSponsorId:
            		return this.SpoSponsorId.Value.CompareTo(rhs.SpoSponsorId.Value);
            		
            		                 
            	
            	
            	case FeeFacultyRuleColumn.EdCdeStudTypeId:
            		return this.EdCdeStudTypeId.Value.CompareTo(rhs.EdCdeStudTypeId.Value);
            		
            		                 
            	
            	
            	case FeeFacultyRuleColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case FeeFacultyRuleColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<FeeFacultyRuleKey> Members
		
		// member variable for the EntityId property
		private FeeFacultyRuleKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual FeeFacultyRuleKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new FeeFacultyRuleKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("FeeFacultyRule")
					.Append("|").Append( this.FeeFacultyRuleId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{23}{22}- FeeFacultyRuleId: {0}{22}- EntMainId: {1}{22}- AsFacultyInfoId: {2}{22}- ForeignFlg: {3}{22}- GsCodeCurrencyId: {4}{22}- EdCodeSemesterTypeId: {5}{22}- EdCodeLevelId: {6}{22}- FeeCodeTypeId: {7}{22}- AsCodeDegreeClassId: {8}{22}- AsCodeDegreeId: {9}{22}- IsSponsor: {10}{22}- IsActive: {11}{22}- EdAcadYearId: {12}{22}- OrientFlg: {13}{22}- Notes: {14}{22}- FeeFacultyRuleAr: {15}{22}- FeeFacultyRuleEn: {16}{22}- EdCodeSemesterId: {17}{22}- SpoSponsorId: {18}{22}- EdCdeStudTypeId: {19}{22}- LastDate: {20}{22}- SeUserId: {21}{22}{24}", 
				this.FeeFacultyRuleId,
				this.EntMainId,
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				this.ForeignFlg,
				this.GsCodeCurrencyId,
				(this.EdCodeSemesterTypeId == null) ? string.Empty : this.EdCodeSemesterTypeId.ToString(),
				(this.EdCodeLevelId == null) ? string.Empty : this.EdCodeLevelId.ToString(),
				this.FeeCodeTypeId,
				(this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString(),
				(this.AsCodeDegreeId == null) ? string.Empty : this.AsCodeDegreeId.ToString(),
				this.IsSponsor,
				(this.IsActive == null) ? string.Empty : this.IsActive.ToString(),
				(this.EdAcadYearId == null) ? string.Empty : this.EdAcadYearId.ToString(),
				(this.OrientFlg == null) ? string.Empty : this.OrientFlg.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.FeeFacultyRuleAr == null) ? string.Empty : this.FeeFacultyRuleAr.ToString(),
				(this.FeeFacultyRuleEn == null) ? string.Empty : this.FeeFacultyRuleEn.ToString(),
				(this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString(),
				(this.SpoSponsorId == null) ? string.Empty : this.SpoSponsorId.ToString(),
				(this.EdCdeStudTypeId == null) ? string.Empty : this.EdCdeStudTypeId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'FEE_FACULTY_RULE' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class FeeFacultyRuleEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// FEE_FACULTY_RULE_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "FEE_FACULTY_RULE"</remarks>
		public System.Decimal FeeFacultyRuleId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalFeeFacultyRuleId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ENT_MAIN_ID : 
		/// </summary>
		public System.Decimal		  EntMainId = 0.0m;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// FOREIGN_FLG : 
		/// </summary>
		public System.Decimal		  ForeignFlg = 0.0m;
		
		/// <summary>
		/// GS_CODE_CURRENCY_ID : 
		/// </summary>
		public System.Decimal		  GsCodeCurrencyId = 0.0m;
		
		/// <summary>
		/// ED_CODE_SEMESTER_TYPE_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeSemesterTypeId = null;
		
		/// <summary>
		/// ED_CODE_LEVEL_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeLevelId = null;
		
		/// <summary>
		/// FEE_CODE_TYPE_ID : 
		/// </summary>
		public System.Decimal		  FeeCodeTypeId = 0.0m;
		
		/// <summary>
		/// AS_CODE_DEGREE_CLASS_ID : 
		/// </summary>
		public System.Decimal?		  AsCodeDegreeClassId = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_ID : 
		/// </summary>
		public System.Decimal?		  AsCodeDegreeId = null;
		
		/// <summary>
		/// IS_SPONSOR : 
		/// </summary>
		public System.Decimal		  IsSponsor = 0.0m;
		
		/// <summary>
		/// IS_ACTIVE : 
		/// </summary>
		public System.Decimal?		  IsActive = null;
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : XX not used
		/// </summary>
		public System.Decimal?		  EdAcadYearId = null;
		
		/// <summary>
		/// ORIENT_FLG : 
		/// </summary>
		public System.Boolean?		  OrientFlg = null;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// FEE_FACULTY_RULE_AR : 
		/// </summary>
		public System.String		  FeeFacultyRuleAr = null;
		
		/// <summary>
		/// FEE_FACULTY_RULE_EN : 
		/// </summary>
		public System.String		  FeeFacultyRuleEn = null;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : KU
		/// </summary>
		public System.Decimal?		  EdCodeSemesterId = null;
		
		/// <summary>
		/// SPO_SPONSOR_ID : 
		/// </summary>
		public System.Decimal?		  SpoSponsorId = null;
		
		/// <summary>
		/// ED_CDE_STUD_TYPE_ID : burimi
		/// </summary>
		public System.Int32?		  EdCdeStudTypeId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsCodeDegree _asCodeDegreeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return this._asCodeDegreeIdSource; }
            set { this._asCodeDegreeIdSource = value; }
      	}
		private AsCodeDegreeClass _asCodeDegreeClassIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return this._asCodeDegreeClassIdSource; }
            set { this._asCodeDegreeClassIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCdeStudType _edCdeStudTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeStudType"/>.
		/// </summary>
		/// <value>The source EdCdeStudType for EdCdeStudTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCdeStudType EdCdeStudTypeIdSource
      	{
            get { return this._edCdeStudTypeIdSource; }
            set { this._edCdeStudTypeIdSource = value; }
      	}
		private EdCodeLevel _edCodeLevelIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeLevel"/>.
		/// </summary>
		/// <value>The source EdCodeLevel for EdCodeLevelId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeLevel EdCodeLevelIdSource
      	{
            get { return this._edCodeLevelIdSource; }
            set { this._edCodeLevelIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private EdCodeSemesterType _edCodeSemesterTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemesterType"/>.
		/// </summary>
		/// <value>The source EdCodeSemesterType for EdCodeSemesterTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemesterType EdCodeSemesterTypeIdSource
      	{
            get { return this._edCodeSemesterTypeIdSource; }
            set { this._edCodeSemesterTypeIdSource = value; }
      	}
		private EntityMain _entMainIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return this._entMainIdSource; }
            set { this._entMainIdSource = value; }
      	}
		private FeeCodeType _feeCodeTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeType"/>.
		/// </summary>
		/// <value>The source FeeCodeType for FeeCodeTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeCodeType FeeCodeTypeIdSource
      	{
            get { return this._feeCodeTypeIdSource; }
            set { this._feeCodeTypeIdSource = value; }
      	}
		private FeeFacultyRule _feeFacultyRuleIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeFacultyRule"/>.
		/// </summary>
		/// <value>The source FeeFacultyRule for FeeFacultyRuleId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeFacultyRule FeeFacultyRuleIdSource
      	{
            get { return this._feeFacultyRuleIdSource; }
            set { this._feeFacultyRuleIdSource = value; }
      	}
		private GsCodeCurrency _gsCodeCurrencyIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCurrency"/>.
		/// </summary>
		/// <value>The source GsCodeCurrency for GsCodeCurrencyId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeCurrency GsCodeCurrencyIdSource
      	{
            get { return this._gsCodeCurrencyIdSource; }
            set { this._gsCodeCurrencyIdSource = value; }
      	}
		private SpoSponsor _spoSponsorIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SpoSponsor"/>.
		/// </summary>
		/// <value>The source SpoSponsor for SpoSponsorId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SpoSponsor SpoSponsorIdSource
      	{
            get { return this._spoSponsorIdSource; }
            set { this._spoSponsorIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region FeeFacultyRule
		
		private FeeFacultyRule _feeFacultyRuleFeeFacultyRuleId;
		
		/// <summary>
		///	Holds a  FeeFacultyRule entity object
		///	which is related to this object through the relation _feeFacultyRuleFeeFacultyRuleId
		/// </summary>
		
		public FeeFacultyRule FeeFacultyRule
		{
			get {		return _feeFacultyRuleFeeFacultyRuleId;		}
			set { 	_feeFacultyRuleFeeFacultyRuleId = value; 	}
		}
		
		#endregion 

		#region FeeItemSemesterCollection
		
		private TList<FeeItemSemester> _feeItemSemesterFeeFacultyRuleId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeItemSemesterFeeFacultyRuleId
		/// </summary>
		
		public TList<FeeItemSemester> FeeItemSemesterCollection
		{
			get
			{
				if (_feeItemSemesterFeeFacultyRuleId == null)
				{
				_feeItemSemesterFeeFacultyRuleId = new TList<FeeItemSemester>();
				}
	
				return _feeItemSemesterFeeFacultyRuleId;
			}
			set { _feeItemSemesterFeeFacultyRuleId = value; }
		}
		
		#endregion

		#region EdStudSemesterTempCollection
		
		private TList<EdStudSemesterTemp> _edStudSemesterTempFeeFacultyRuleId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudSemesterTempFeeFacultyRuleId
		/// </summary>
		
		public TList<EdStudSemesterTemp> EdStudSemesterTempCollection
		{
			get
			{
				if (_edStudSemesterTempFeeFacultyRuleId == null)
				{
				_edStudSemesterTempFeeFacultyRuleId = new TList<EdStudSemesterTemp>();
				}
	
				return _edStudSemesterTempFeeFacultyRuleId;
			}
			set { _edStudSemesterTempFeeFacultyRuleId = value; }
		}
		
		#endregion

		#region EdStudSemesterCollection
		
		private TList<EdStudSemester> _edStudSemesterFeeFacultyRuleId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudSemesterFeeFacultyRuleId
		/// </summary>
		
		public TList<EdStudSemester> EdStudSemesterCollection
		{
			get
			{
				if (_edStudSemesterFeeFacultyRuleId == null)
				{
				_edStudSemesterFeeFacultyRuleId = new TList<EdStudSemester>();
				}
	
				return _edStudSemesterFeeFacultyRuleId;
			}
			set { _edStudSemesterFeeFacultyRuleId = value; }
		}
		
		#endregion

		#region FeeFacultyItemCollection
		
		private TList<FeeFacultyItem> _feeFacultyItemFeeFacultyRuleId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeFacultyItemFeeFacultyRuleId
		/// </summary>
		
		public TList<FeeFacultyItem> FeeFacultyItemCollection
		{
			get
			{
				if (_feeFacultyItemFeeFacultyRuleId == null)
				{
				_feeFacultyItemFeeFacultyRuleId = new TList<FeeFacultyItem>();
				}
	
				return _feeFacultyItemFeeFacultyRuleId;
			}
			set { _feeFacultyItemFeeFacultyRuleId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			FeeFacultyRuleEntityData _tmp = new FeeFacultyRuleEntityData();
						
			_tmp.FeeFacultyRuleId = this.FeeFacultyRuleId;
			_tmp.OriginalFeeFacultyRuleId = this.OriginalFeeFacultyRuleId;
			
			_tmp.EntMainId = this.EntMainId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.ForeignFlg = this.ForeignFlg;
			_tmp.GsCodeCurrencyId = this.GsCodeCurrencyId;
			_tmp.EdCodeSemesterTypeId = this.EdCodeSemesterTypeId;
			_tmp.EdCodeLevelId = this.EdCodeLevelId;
			_tmp.FeeCodeTypeId = this.FeeCodeTypeId;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.IsSponsor = this.IsSponsor;
			_tmp.IsActive = this.IsActive;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.OrientFlg = this.OrientFlg;
			_tmp.Notes = this.Notes;
			_tmp.FeeFacultyRuleAr = this.FeeFacultyRuleAr;
			_tmp.FeeFacultyRuleEn = this.FeeFacultyRuleEn;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.SpoSponsorId = this.SpoSponsorId;
			_tmp.EdCdeStudTypeId = this.EdCdeStudTypeId;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			
			#region Source Parent Composite Entities
			if (this.AsCodeDegreeIdSource != null)
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null)
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCdeStudTypeIdSource != null)
				_tmp.EdCdeStudTypeIdSource = MakeCopyOf(this.EdCdeStudTypeIdSource) as EdCdeStudType;
			if (this.EdCodeLevelIdSource != null)
				_tmp.EdCodeLevelIdSource = MakeCopyOf(this.EdCodeLevelIdSource) as EdCodeLevel;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.EdCodeSemesterTypeIdSource != null)
				_tmp.EdCodeSemesterTypeIdSource = MakeCopyOf(this.EdCodeSemesterTypeIdSource) as EdCodeSemesterType;
			if (this.EntMainIdSource != null)
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource) as EntityMain;
			if (this.FeeCodeTypeIdSource != null)
				_tmp.FeeCodeTypeIdSource = MakeCopyOf(this.FeeCodeTypeIdSource) as FeeCodeType;
			if (this.FeeFacultyRuleIdSource != null)
				_tmp.FeeFacultyRuleIdSource = MakeCopyOf(this.FeeFacultyRuleIdSource) as FeeFacultyRule;
			if (this.GsCodeCurrencyIdSource != null)
				_tmp.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource) as GsCodeCurrency;
			if (this.SpoSponsorIdSource != null)
				_tmp.SpoSponsorIdSource = MakeCopyOf(this.SpoSponsorIdSource) as SpoSponsor;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._feeFacultyRuleFeeFacultyRuleId != null)
				_tmp.FeeFacultyRule = (FeeFacultyRule) MakeCopyOf(this.FeeFacultyRule); 
			if (this._feeItemSemesterFeeFacultyRuleId != null)
				_tmp.FeeItemSemesterCollection = (TList<FeeItemSemester>) MakeCopyOf(this.FeeItemSemesterCollection); 
			if (this._edStudSemesterTempFeeFacultyRuleId != null)
				_tmp.EdStudSemesterTempCollection = (TList<EdStudSemesterTemp>) MakeCopyOf(this.EdStudSemesterTempCollection); 
			if (this._edStudSemesterFeeFacultyRuleId != null)
				_tmp.EdStudSemesterCollection = (TList<EdStudSemester>) MakeCopyOf(this.EdStudSemesterCollection); 
			if (this._feeFacultyItemFeeFacultyRuleId != null)
				_tmp.FeeFacultyItemCollection = (TList<FeeFacultyItem>) MakeCopyOf(this.FeeFacultyItemCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			FeeFacultyRuleEntityData _tmp = new FeeFacultyRuleEntityData();
						
			_tmp.FeeFacultyRuleId = this.FeeFacultyRuleId;
			_tmp.OriginalFeeFacultyRuleId = this.OriginalFeeFacultyRuleId;
			
			_tmp.EntMainId = this.EntMainId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.ForeignFlg = this.ForeignFlg;
			_tmp.GsCodeCurrencyId = this.GsCodeCurrencyId;
			_tmp.EdCodeSemesterTypeId = this.EdCodeSemesterTypeId;
			_tmp.EdCodeLevelId = this.EdCodeLevelId;
			_tmp.FeeCodeTypeId = this.FeeCodeTypeId;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.IsSponsor = this.IsSponsor;
			_tmp.IsActive = this.IsActive;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.OrientFlg = this.OrientFlg;
			_tmp.Notes = this.Notes;
			_tmp.FeeFacultyRuleAr = this.FeeFacultyRuleAr;
			_tmp.FeeFacultyRuleEn = this.FeeFacultyRuleEn;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.SpoSponsorId = this.SpoSponsorId;
			_tmp.EdCdeStudTypeId = this.EdCdeStudTypeId;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			
			#region Source Parent Composite Entities
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				_tmp.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				_tmp.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCdeStudTypeIdSource != null && existingCopies.Contains(this.EdCdeStudTypeIdSource))
				_tmp.EdCdeStudTypeIdSource = existingCopies[this.EdCdeStudTypeIdSource] as EdCdeStudType;
			else
				_tmp.EdCdeStudTypeIdSource = MakeCopyOf(this.EdCdeStudTypeIdSource, existingCopies) as EdCdeStudType;
			if (this.EdCodeLevelIdSource != null && existingCopies.Contains(this.EdCodeLevelIdSource))
				_tmp.EdCodeLevelIdSource = existingCopies[this.EdCodeLevelIdSource] as EdCodeLevel;
			else
				_tmp.EdCodeLevelIdSource = MakeCopyOf(this.EdCodeLevelIdSource, existingCopies) as EdCodeLevel;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCodeSemesterTypeIdSource != null && existingCopies.Contains(this.EdCodeSemesterTypeIdSource))
				_tmp.EdCodeSemesterTypeIdSource = existingCopies[this.EdCodeSemesterTypeIdSource] as EdCodeSemesterType;
			else
				_tmp.EdCodeSemesterTypeIdSource = MakeCopyOf(this.EdCodeSemesterTypeIdSource, existingCopies) as EdCodeSemesterType;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				_tmp.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.FeeCodeTypeIdSource != null && existingCopies.Contains(this.FeeCodeTypeIdSource))
				_tmp.FeeCodeTypeIdSource = existingCopies[this.FeeCodeTypeIdSource] as FeeCodeType;
			else
				_tmp.FeeCodeTypeIdSource = MakeCopyOf(this.FeeCodeTypeIdSource, existingCopies) as FeeCodeType;
			if (this.FeeFacultyRuleIdSource != null && existingCopies.Contains(this.FeeFacultyRuleIdSource))
				_tmp.FeeFacultyRuleIdSource = existingCopies[this.FeeFacultyRuleIdSource] as FeeFacultyRule;
			else
				_tmp.FeeFacultyRuleIdSource = MakeCopyOf(this.FeeFacultyRuleIdSource, existingCopies) as FeeFacultyRule;
			if (this.GsCodeCurrencyIdSource != null && existingCopies.Contains(this.GsCodeCurrencyIdSource))
				_tmp.GsCodeCurrencyIdSource = existingCopies[this.GsCodeCurrencyIdSource] as GsCodeCurrency;
			else
				_tmp.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource, existingCopies) as GsCodeCurrency;
			if (this.SpoSponsorIdSource != null && existingCopies.Contains(this.SpoSponsorIdSource))
				_tmp.SpoSponsorIdSource = existingCopies[this.SpoSponsorIdSource] as SpoSponsor;
			else
				_tmp.SpoSponsorIdSource = MakeCopyOf(this.SpoSponsorIdSource, existingCopies) as SpoSponsor;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.FeeFacultyRule = (FeeFacultyRule) MakeCopyOf(this.FeeFacultyRule, existingCopies); 
			_tmp.FeeItemSemesterCollection = (TList<FeeItemSemester>) MakeCopyOf(this.FeeItemSemesterCollection, existingCopies); 
			_tmp.EdStudSemesterTempCollection = (TList<EdStudSemesterTemp>) MakeCopyOf(this.EdStudSemesterTempCollection, existingCopies); 
			_tmp.EdStudSemesterCollection = (TList<EdStudSemester>) MakeCopyOf(this.EdStudSemesterCollection, existingCopies); 
			_tmp.FeeFacultyItemCollection = (TList<FeeFacultyItem>) MakeCopyOf(this.FeeFacultyItemCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeFacultyRuleColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(FeeFacultyRuleColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeFacultyRuleColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(FeeFacultyRuleColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeFacultyRuleColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(FeeFacultyRuleColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				FeeFacultyRuleEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new FeeFacultyRuleEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeFacultyRuleColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(FeeFacultyRuleColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				FeeFacultyRuleEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new FeeFacultyRuleEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region FeeFacultyRuleEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="FeeFacultyRule"/> object.
	/// </remarks>
	public class FeeFacultyRuleEventArgs : System.EventArgs
	{
		private FeeFacultyRuleColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the FeeFacultyRuleEventArgs class.
		///</summary>
		public FeeFacultyRuleEventArgs(FeeFacultyRuleColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the FeeFacultyRuleEventArgs class.
		///</summary>
		public FeeFacultyRuleEventArgs(FeeFacultyRuleColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The FeeFacultyRuleColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="FeeFacultyRuleColumn" />
		public FeeFacultyRuleColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all FeeFacultyRule related events.
	///</summary>
	public delegate void FeeFacultyRuleEventHandler(object sender, FeeFacultyRuleEventArgs e);
	
	#region FeeFacultyRuleComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class FeeFacultyRuleComparer : System.Collections.Generic.IComparer<FeeFacultyRule>
	{
		FeeFacultyRuleColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:FeeFacultyRuleComparer"/> class.
        /// </summary>
		public FeeFacultyRuleComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:FeeFacultyRuleComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public FeeFacultyRuleComparer(FeeFacultyRuleColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="FeeFacultyRule"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="FeeFacultyRule"/> to compare.</param>
        /// <param name="b">The second <c>FeeFacultyRule</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(FeeFacultyRule a, FeeFacultyRule b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(FeeFacultyRule entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(FeeFacultyRule a, FeeFacultyRule b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public FeeFacultyRuleColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region FeeFacultyRuleKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="FeeFacultyRule"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class FeeFacultyRuleKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the FeeFacultyRuleKey class.
		/// </summary>
		public FeeFacultyRuleKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeFacultyRuleKey class.
		/// </summary>
		public FeeFacultyRuleKey(FeeFacultyRuleBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.FeeFacultyRuleId = entity.FeeFacultyRuleId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeFacultyRuleKey class.
		/// </summary>
		public FeeFacultyRuleKey(System.Decimal _feeFacultyRuleId)
		{
			#region Init Properties

			this.FeeFacultyRuleId = _feeFacultyRuleId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private FeeFacultyRuleBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public FeeFacultyRuleBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the FeeFacultyRuleId property
		private System.Decimal _feeFacultyRuleId;
		
		/// <summary>
		/// Gets or sets the FeeFacultyRuleId property.
		/// </summary>
		public System.Decimal FeeFacultyRuleId
		{
			get { return _feeFacultyRuleId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.FeeFacultyRuleId = value;
				
				_feeFacultyRuleId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				FeeFacultyRuleId = ( values["FeeFacultyRuleId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["FeeFacultyRuleId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("FeeFacultyRuleId", FeeFacultyRuleId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("FeeFacultyRuleId: {0}{1}",
								FeeFacultyRuleId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region FeeFacultyRuleColumn Enum
	
	/// <summary>
	/// Enumerate the FeeFacultyRule columns.
	/// </summary>
	[Serializable]
	public enum FeeFacultyRuleColumn : int
	{
		/// <summary>
		/// FeeFacultyRuleId : 
		/// </summary>
		[EnumTextValue("FEE_FACULTY_RULE_ID")]
		[ColumnEnum("FEE_FACULTY_RULE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		FeeFacultyRuleId = 1,
		/// <summary>
		/// EntMainId : 
		/// </summary>
		[EnumTextValue("ENT_MAIN_ID")]
		[ColumnEnum("ENT_MAIN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EntMainId = 2,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 3,
		/// <summary>
		/// ForeignFlg : 
		/// </summary>
		[EnumTextValue("FOREIGN_FLG")]
		[ColumnEnum("FOREIGN_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ForeignFlg = 4,
		/// <summary>
		/// GsCodeCurrencyId : 
		/// </summary>
		[EnumTextValue("GS_CODE_CURRENCY_ID")]
		[ColumnEnum("GS_CODE_CURRENCY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsCodeCurrencyId = 5,
		/// <summary>
		/// EdCodeSemesterTypeId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_TYPE_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeSemesterTypeId = 6,
		/// <summary>
		/// EdCodeLevelId : 
		/// </summary>
		[EnumTextValue("ED_CODE_LEVEL_ID")]
		[ColumnEnum("ED_CODE_LEVEL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeLevelId = 7,
		/// <summary>
		/// FeeCodeTypeId : 
		/// </summary>
		[EnumTextValue("FEE_CODE_TYPE_ID")]
		[ColumnEnum("FEE_CODE_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		FeeCodeTypeId = 8,
		/// <summary>
		/// AsCodeDegreeClassId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_CLASS_ID")]
		[ColumnEnum("AS_CODE_DEGREE_CLASS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeClassId = 9,
		/// <summary>
		/// AsCodeDegreeId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_ID")]
		[ColumnEnum("AS_CODE_DEGREE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeId = 10,
		/// <summary>
		/// IsSponsor : 
		/// </summary>
		[EnumTextValue("IS_SPONSOR")]
		[ColumnEnum("IS_SPONSOR", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsSponsor = 11,
		/// <summary>
		/// IsActive : 
		/// </summary>
		[EnumTextValue("IS_ACTIVE")]
		[ColumnEnum("IS_ACTIVE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		IsActive = 12,
		/// <summary>
		/// EdAcadYearId : XX not used
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdAcadYearId = 13,
		/// <summary>
		/// OrientFlg : 
		/// </summary>
		[EnumTextValue("ORIENT_FLG")]
		[ColumnEnum("ORIENT_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		OrientFlg = 14,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		Notes = 15,
		/// <summary>
		/// FeeFacultyRuleAr : 
		/// </summary>
		[EnumTextValue("FEE_FACULTY_RULE_AR")]
		[ColumnEnum("FEE_FACULTY_RULE_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		FeeFacultyRuleAr = 16,
		/// <summary>
		/// FeeFacultyRuleEn : 
		/// </summary>
		[EnumTextValue("FEE_FACULTY_RULE_EN")]
		[ColumnEnum("FEE_FACULTY_RULE_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		FeeFacultyRuleEn = 17,
		/// <summary>
		/// EdCodeSemesterId : KU
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeSemesterId = 18,
		/// <summary>
		/// SpoSponsorId : 
		/// </summary>
		[EnumTextValue("SPO_SPONSOR_ID")]
		[ColumnEnum("SPO_SPONSOR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SpoSponsorId = 19,
		/// <summary>
		/// EdCdeStudTypeId : burimi
		/// </summary>
		[EnumTextValue("ED_CDE_STUD_TYPE_ID")]
		[ColumnEnum("ED_CDE_STUD_TYPE_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		EdCdeStudTypeId = 20,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 21,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 22
	}//End enum

	#endregion FeeFacultyRuleColumn Enum

} // end namespace
