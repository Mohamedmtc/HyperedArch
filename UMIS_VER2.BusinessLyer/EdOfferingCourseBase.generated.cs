
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdOfferingCourse.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_OFFERING_COURSE' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdOfferingCourseBase : EntityBase, IEdOfferingCourse, IEntityId<EdOfferingCourseKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdOfferingCourseEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdOfferingCourseEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdOfferingCourseEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdOfferingCourse> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdOfferingCourseEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdOfferingCourseEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdOfferingCourseBase"/> instance.
		///</summary>
		public EdOfferingCourseBase()
		{
			this.entityData = new EdOfferingCourseEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdOfferingCourseBase"/> instance.
		///</summary>
		///<param name="_edOfferingCourseId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_edOfferingId"></param>
		///<param name="_auditFlg"></param>
		///<param name="_onlineFlg"></param>
		///<param name="_minAttendNo"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_allSessionNo"></param>
		///<param name="_allHoursNo">عدد ساعات تدريس المقرر على الفصل</param>
		///<param name="_approveNoFlg">اعتماد عدد ساعات المقرر على الفصل</param>
		///<param name="_maxStudCount"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_lastDate"></param>
		///<param name="_seFormId"></param>
		///<param name="_seUserId"></param>
		public EdOfferingCourseBase(System.Decimal _edOfferingCourseId, System.Decimal? _edCourseId, 
			System.Decimal? _edOfferingId, System.Decimal? _auditFlg, System.Decimal? _onlineFlg, 
			System.Decimal? _minAttendNo, System.Decimal? _asFacultyInfoId, System.Decimal? _allSessionNo, 
			System.Decimal? _allHoursNo, System.Boolean? _approveNoFlg, System.Decimal? _maxStudCount, 
			System.Decimal? _saStfMemberId, System.DateTime? _lastDate, System.Decimal? _seFormId, 
			System.Decimal? _seUserId)
		{
			this.entityData = new EdOfferingCourseEntityData();
			this.backupData = null;

			this.EdOfferingCourseId = _edOfferingCourseId;
			this.EdCourseId = _edCourseId;
			this.EdOfferingId = _edOfferingId;
			this.AuditFlg = _auditFlg;
			this.OnlineFlg = _onlineFlg;
			this.MinAttendNo = _minAttendNo;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.AllSessionNo = _allSessionNo;
			this.AllHoursNo = _allHoursNo;
			this.ApproveNoFlg = _approveNoFlg;
			this.MaxStudCount = _maxStudCount;
			this.SaStfMemberId = _saStfMemberId;
			this.LastDate = _lastDate;
			this.SeFormId = _seFormId;
			this.SeUserId = _seUserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdOfferingCourse"/> instance.
		///</summary>
		///<param name="_edOfferingCourseId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_edOfferingId"></param>
		///<param name="_auditFlg"></param>
		///<param name="_onlineFlg"></param>
		///<param name="_minAttendNo"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_allSessionNo"></param>
		///<param name="_allHoursNo">عدد ساعات تدريس المقرر على الفصل</param>
		///<param name="_approveNoFlg">اعتماد عدد ساعات المقرر على الفصل</param>
		///<param name="_maxStudCount"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_lastDate"></param>
		///<param name="_seFormId"></param>
		///<param name="_seUserId"></param>
		public static EdOfferingCourse CreateEdOfferingCourse(System.Decimal _edOfferingCourseId, System.Decimal? _edCourseId, 
			System.Decimal? _edOfferingId, System.Decimal? _auditFlg, System.Decimal? _onlineFlg, 
			System.Decimal? _minAttendNo, System.Decimal? _asFacultyInfoId, System.Decimal? _allSessionNo, 
			System.Decimal? _allHoursNo, System.Boolean? _approveNoFlg, System.Decimal? _maxStudCount, 
			System.Decimal? _saStfMemberId, System.DateTime? _lastDate, System.Decimal? _seFormId, 
			System.Decimal? _seUserId)
		{
			EdOfferingCourse newEdOfferingCourse = new EdOfferingCourse();
			newEdOfferingCourse.EdOfferingCourseId = _edOfferingCourseId;
			newEdOfferingCourse.EdCourseId = _edCourseId;
			newEdOfferingCourse.EdOfferingId = _edOfferingId;
			newEdOfferingCourse.AuditFlg = _auditFlg;
			newEdOfferingCourse.OnlineFlg = _onlineFlg;
			newEdOfferingCourse.MinAttendNo = _minAttendNo;
			newEdOfferingCourse.AsFacultyInfoId = _asFacultyInfoId;
			newEdOfferingCourse.AllSessionNo = _allSessionNo;
			newEdOfferingCourse.AllHoursNo = _allHoursNo;
			newEdOfferingCourse.ApproveNoFlg = _approveNoFlg;
			newEdOfferingCourse.MaxStudCount = _maxStudCount;
			newEdOfferingCourse.SaStfMemberId = _saStfMemberId;
			newEdOfferingCourse.LastDate = _lastDate;
			newEdOfferingCourse.SeFormId = _seFormId;
			newEdOfferingCourse.SeUserId = _seUserId;
			return newEdOfferingCourse;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdOfferingCourseId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdOfferingCourseId
		{
			get
			{
				return this.entityData.EdOfferingCourseId; 
			}
			
			set
			{
				if (this.entityData.EdOfferingCourseId == value)
					return;
					
				OnColumnChanging(EdOfferingCourseColumn.EdOfferingCourseId, this.entityData.EdOfferingCourseId);
				this.entityData.EdOfferingCourseId = value;
				this.EntityId.EdOfferingCourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdOfferingCourseColumn.EdOfferingCourseId, this.entityData.EdOfferingCourseId);
				OnPropertyChanged("EdOfferingCourseId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_OFFERING_COURSE_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ED_OFFERING_COURSE_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdOfferingCourseId
		{
			get { return this.entityData.OriginalEdOfferingCourseId; }
			set { this.entityData.OriginalEdOfferingCourseId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCourseIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCourseId
		{
			get
			{
				return this.entityData.EdCourseId; 
			}
			
			set
			{
				if (this.entityData.EdCourseId == value)
					return;
					
				OnColumnChanging(EdOfferingCourseColumn.EdCourseId, this.entityData.EdCourseId);
				this.entityData.EdCourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdOfferingCourseColumn.EdCourseId, this.entityData.EdCourseId);
				OnPropertyChanged("EdCourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdOfferingId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdOfferingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdOfferingId
		{
			get
			{
				return this.entityData.EdOfferingId; 
			}
			
			set
			{
				if (this.entityData.EdOfferingId == value)
					return;
					
				OnColumnChanging(EdOfferingCourseColumn.EdOfferingId, this.entityData.EdOfferingId);
				this.entityData.EdOfferingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdOfferingCourseColumn.EdOfferingId, this.entityData.EdOfferingId);
				OnPropertyChanged("EdOfferingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AuditFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAuditFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AuditFlg
		{
			get
			{
				return this.entityData.AuditFlg; 
			}
			
			set
			{
				if (this.entityData.AuditFlg == value)
					return;
					
				OnColumnChanging(EdOfferingCourseColumn.AuditFlg, this.entityData.AuditFlg);
				this.entityData.AuditFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdOfferingCourseColumn.AuditFlg, this.entityData.AuditFlg);
				OnPropertyChanged("AuditFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OnlineFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsOnlineFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? OnlineFlg
		{
			get
			{
				return this.entityData.OnlineFlg; 
			}
			
			set
			{
				if (this.entityData.OnlineFlg == value)
					return;
					
				OnColumnChanging(EdOfferingCourseColumn.OnlineFlg, this.entityData.OnlineFlg);
				this.entityData.OnlineFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdOfferingCourseColumn.OnlineFlg, this.entityData.OnlineFlg);
				OnPropertyChanged("OnlineFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MinAttendNo property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMinAttendNoNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MinAttendNo
		{
			get
			{
				return this.entityData.MinAttendNo; 
			}
			
			set
			{
				if (this.entityData.MinAttendNo == value)
					return;
					
				OnColumnChanging(EdOfferingCourseColumn.MinAttendNo, this.entityData.MinAttendNo);
				this.entityData.MinAttendNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdOfferingCourseColumn.MinAttendNo, this.entityData.MinAttendNo);
				OnPropertyChanged("MinAttendNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(EdOfferingCourseColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdOfferingCourseColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AllSessionNo property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAllSessionNoNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AllSessionNo
		{
			get
			{
				return this.entityData.AllSessionNo; 
			}
			
			set
			{
				if (this.entityData.AllSessionNo == value)
					return;
					
				OnColumnChanging(EdOfferingCourseColumn.AllSessionNo, this.entityData.AllSessionNo);
				this.entityData.AllSessionNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdOfferingCourseColumn.AllSessionNo, this.entityData.AllSessionNo);
				OnPropertyChanged("AllSessionNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AllHoursNo property. 
		///		عدد ساعات تدريس المقرر على الفصل
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAllHoursNoNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"عدد ساعات تدريس المقرر على الفصل"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AllHoursNo
		{
			get
			{
				return this.entityData.AllHoursNo; 
			}
			
			set
			{
				if (this.entityData.AllHoursNo == value)
					return;
					
				OnColumnChanging(EdOfferingCourseColumn.AllHoursNo, this.entityData.AllHoursNo);
				this.entityData.AllHoursNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdOfferingCourseColumn.AllHoursNo, this.entityData.AllHoursNo);
				OnPropertyChanged("AllHoursNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApproveNoFlg property. 
		///		اعتماد عدد ساعات المقرر على الفصل
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsApproveNoFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"اعتماد عدد ساعات المقرر على الفصل"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ApproveNoFlg
		{
			get
			{
				return this.entityData.ApproveNoFlg; 
			}
			
			set
			{
				if (this.entityData.ApproveNoFlg == value)
					return;
					
				OnColumnChanging(EdOfferingCourseColumn.ApproveNoFlg, this.entityData.ApproveNoFlg);
				this.entityData.ApproveNoFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdOfferingCourseColumn.ApproveNoFlg, this.entityData.ApproveNoFlg);
				OnPropertyChanged("ApproveNoFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaxStudCount property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMaxStudCountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MaxStudCount
		{
			get
			{
				return this.entityData.MaxStudCount; 
			}
			
			set
			{
				if (this.entityData.MaxStudCount == value)
					return;
					
				OnColumnChanging(EdOfferingCourseColumn.MaxStudCount, this.entityData.MaxStudCount);
				this.entityData.MaxStudCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdOfferingCourseColumn.MaxStudCount, this.entityData.MaxStudCount);
				OnPropertyChanged("MaxStudCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaStfMemberId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSaStfMemberIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SaStfMemberId
		{
			get
			{
				return this.entityData.SaStfMemberId; 
			}
			
			set
			{
				if (this.entityData.SaStfMemberId == value)
					return;
					
				OnColumnChanging(EdOfferingCourseColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				this.entityData.SaStfMemberId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdOfferingCourseColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				OnPropertyChanged("SaStfMemberId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(EdOfferingCourseColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdOfferingCourseColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeFormId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeFormIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeFormId
		{
			get
			{
				return this.entityData.SeFormId; 
			}
			
			set
			{
				if (this.entityData.SeFormId == value)
					return;
					
				OnColumnChanging(EdOfferingCourseColumn.SeFormId, this.entityData.SeFormId);
				this.entityData.SeFormId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdOfferingCourseColumn.SeFormId, this.entityData.SeFormId);
				OnPropertyChanged("SeFormId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(EdOfferingCourseColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdOfferingCourseColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return entityData.EdCourseIdSource; }
            set { entityData.EdCourseIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdOffering"/>.
		/// </summary>
		/// <value>The source EdOffering for EdOfferingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdOffering EdOfferingIdSource
      	{
            get { return entityData.EdOfferingIdSource; }
            set { entityData.EdOfferingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return entityData.SaStfMemberIdSource; }
            set { entityData.SaStfMemberIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeForm"/>.
		/// </summary>
		/// <value>The source SeForm for SeFormId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeForm SeFormIdSource
      	{
            get { return entityData.SeFormIdSource; }
            set { entityData.SeFormIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeUser SeUserIdSource
      	{
            get { return entityData.SeUserIdSource; }
            set { entityData.SeUserIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EdCourseInstance objects
		///	which are related to this object through the relation FK_ED_COURSE‌_INSTANCE_ED_OFFERING_COURSE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdCourseInstance> EdCourseInstanceCollection
		{
			get { return entityData.EdCourseInstanceCollection; }
			set { entityData.EdCourseInstanceCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ScScheduleHdr objects
		///	which are related to this object through the relation FK_SC_SCHEDULE_HDR_ED_COURSE_INSTANCE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScScheduleHdr> ScScheduleHdrCollection
		{
			get { return entityData.ScScheduleHdrCollection; }
			set { entityData.ScScheduleHdrCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_OFFERING_COURSE"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_OFFERING_COURSE_ID", "ED_COURSE_ID", "ED_OFFERING_ID", "AUDIT_FLG", "ONLINE_FLG", "MIN_ATTEND_NO", "AS_FACULTY_INFO_ID", "ALL_SESSION_NO", "ALL_HOURS_NO", "APPROVE_NO_FLG", "MAX_STUD_COUNT", "SA_STF_MEMBER_ID", "LAST_DATE", "SE_FORM_ID", "SE_USER_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdOfferingCourseEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdOfferingCourse) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdOfferingCourse>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdOfferingCourse);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdOfferingCourse Entity 
		///</summary>
		protected virtual EdOfferingCourse Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdOfferingCourse copy = new EdOfferingCourse();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdOfferingCourseId = this.EdOfferingCourseId;
					copy.OriginalEdOfferingCourseId = this.OriginalEdOfferingCourseId;
				copy.EdCourseId = this.EdCourseId;
				copy.EdOfferingId = this.EdOfferingId;
				copy.AuditFlg = this.AuditFlg;
				copy.OnlineFlg = this.OnlineFlg;
				copy.MinAttendNo = this.MinAttendNo;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.AllSessionNo = this.AllSessionNo;
				copy.AllHoursNo = this.AllHoursNo;
				copy.ApproveNoFlg = this.ApproveNoFlg;
				copy.MaxStudCount = this.MaxStudCount;
				copy.SaStfMemberId = this.SaStfMemberId;
				copy.LastDate = this.LastDate;
				copy.SeFormId = this.SeFormId;
				copy.SeUserId = this.SeUserId;
			
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				copy.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				copy.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EdOfferingIdSource != null && existingCopies.Contains(this.EdOfferingIdSource))
				copy.EdOfferingIdSource = existingCopies[this.EdOfferingIdSource] as EdOffering;
			else
				copy.EdOfferingIdSource = MakeCopyOf(this.EdOfferingIdSource, existingCopies) as EdOffering;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				copy.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				copy.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
			if (this.SeFormIdSource != null && existingCopies.Contains(this.SeFormIdSource))
				copy.SeFormIdSource = existingCopies[this.SeFormIdSource] as SeForm;
			else
				copy.SeFormIdSource = MakeCopyOf(this.SeFormIdSource, existingCopies) as SeForm;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				copy.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				copy.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
		
			//deep copy nested objects
			copy.EdCourseInstanceCollection = (TList<EdCourseInstance>) MakeCopyOf(this.EdCourseInstanceCollection, existingCopies); 
			copy.ScScheduleHdrCollection = (TList<ScScheduleHdr>) MakeCopyOf(this.ScScheduleHdrCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdOfferingCourse Entity 
		///</summary>
		public virtual EdOfferingCourse Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdOfferingCourse Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdOfferingCourse DeepCopy()
		{
			return EntityHelper.Clone<EdOfferingCourse>(this as EdOfferingCourse);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdOfferingCourseEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdOfferingCourseEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdOfferingCourseEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdOfferingCourseColumn column)
		{
			switch(column)
			{
					case EdOfferingCourseColumn.EdOfferingCourseId:
					return entityData.EdOfferingCourseId != _originalData.EdOfferingCourseId;
					case EdOfferingCourseColumn.EdCourseId:
					return entityData.EdCourseId != _originalData.EdCourseId;
					case EdOfferingCourseColumn.EdOfferingId:
					return entityData.EdOfferingId != _originalData.EdOfferingId;
					case EdOfferingCourseColumn.AuditFlg:
					return entityData.AuditFlg != _originalData.AuditFlg;
					case EdOfferingCourseColumn.OnlineFlg:
					return entityData.OnlineFlg != _originalData.OnlineFlg;
					case EdOfferingCourseColumn.MinAttendNo:
					return entityData.MinAttendNo != _originalData.MinAttendNo;
					case EdOfferingCourseColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case EdOfferingCourseColumn.AllSessionNo:
					return entityData.AllSessionNo != _originalData.AllSessionNo;
					case EdOfferingCourseColumn.AllHoursNo:
					return entityData.AllHoursNo != _originalData.AllHoursNo;
					case EdOfferingCourseColumn.ApproveNoFlg:
					return entityData.ApproveNoFlg != _originalData.ApproveNoFlg;
					case EdOfferingCourseColumn.MaxStudCount:
					return entityData.MaxStudCount != _originalData.MaxStudCount;
					case EdOfferingCourseColumn.SaStfMemberId:
					return entityData.SaStfMemberId != _originalData.SaStfMemberId;
					case EdOfferingCourseColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case EdOfferingCourseColumn.SeFormId:
					return entityData.SeFormId != _originalData.SeFormId;
					case EdOfferingCourseColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdOfferingCourseColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdOfferingCourseId != _originalData.EdOfferingCourseId;
			result = result || entityData.EdCourseId != _originalData.EdCourseId;
			result = result || entityData.EdOfferingId != _originalData.EdOfferingId;
			result = result || entityData.AuditFlg != _originalData.AuditFlg;
			result = result || entityData.OnlineFlg != _originalData.OnlineFlg;
			result = result || entityData.MinAttendNo != _originalData.MinAttendNo;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.AllSessionNo != _originalData.AllSessionNo;
			result = result || entityData.AllHoursNo != _originalData.AllHoursNo;
			result = result || entityData.ApproveNoFlg != _originalData.ApproveNoFlg;
			result = result || entityData.MaxStudCount != _originalData.MaxStudCount;
			result = result || entityData.SaStfMemberId != _originalData.SaStfMemberId;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.SeFormId != _originalData.SeFormId;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			return result;
		}	
		
		///<summary>
		///  Returns a EdOfferingCourse Entity with the original data.
		///</summary>
		public EdOfferingCourse GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdOfferingCourse(
				_originalData.EdOfferingCourseId,
				_originalData.EdCourseId,
				_originalData.EdOfferingId,
				_originalData.AuditFlg,
				_originalData.OnlineFlg,
				_originalData.MinAttendNo,
				_originalData.AsFacultyInfoId,
				_originalData.AllSessionNo,
				_originalData.AllHoursNo,
				_originalData.ApproveNoFlg,
				_originalData.MaxStudCount,
				_originalData.SaStfMemberId,
				_originalData.LastDate,
				_originalData.SeFormId,
				_originalData.SeUserId
				);
				
			return (EdOfferingCourse)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdOfferingCourseBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdOfferingCourseBase)
				return ValueEquals(this, (EdOfferingCourseBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdOfferingCourseBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdOfferingCourseId.GetHashCode() ^ 
					((this.EdCourseId == null) ? string.Empty : this.EdCourseId.ToString()).GetHashCode() ^ 
					((this.EdOfferingId == null) ? string.Empty : this.EdOfferingId.ToString()).GetHashCode() ^ 
					((this.AuditFlg == null) ? string.Empty : this.AuditFlg.ToString()).GetHashCode() ^ 
					((this.OnlineFlg == null) ? string.Empty : this.OnlineFlg.ToString()).GetHashCode() ^ 
					((this.MinAttendNo == null) ? string.Empty : this.MinAttendNo.ToString()).GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					((this.AllSessionNo == null) ? string.Empty : this.AllSessionNo.ToString()).GetHashCode() ^ 
					((this.AllHoursNo == null) ? string.Empty : this.AllHoursNo.ToString()).GetHashCode() ^ 
					((this.ApproveNoFlg == null) ? string.Empty : this.ApproveNoFlg.ToString()).GetHashCode() ^ 
					((this.MaxStudCount == null) ? string.Empty : this.MaxStudCount.ToString()).GetHashCode() ^ 
					((this.SaStfMemberId == null) ? string.Empty : this.SaStfMemberId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.SeFormId == null) ? string.Empty : this.SeFormId.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdOfferingCourseBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdOfferingCourseBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdOfferingCourseBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdOfferingCourseBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdOfferingCourseBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdOfferingCourseBase Object1, EdOfferingCourseBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdOfferingCourseId != Object2.EdOfferingCourseId)
				equal = false;
			if ( Object1.EdCourseId != null && Object2.EdCourseId != null )
			{
				if (Object1.EdCourseId != Object2.EdCourseId)
					equal = false;
			}
			else if (Object1.EdCourseId == null ^ Object2.EdCourseId == null )
			{
				equal = false;
			}
			if ( Object1.EdOfferingId != null && Object2.EdOfferingId != null )
			{
				if (Object1.EdOfferingId != Object2.EdOfferingId)
					equal = false;
			}
			else if (Object1.EdOfferingId == null ^ Object2.EdOfferingId == null )
			{
				equal = false;
			}
			if ( Object1.AuditFlg != null && Object2.AuditFlg != null )
			{
				if (Object1.AuditFlg != Object2.AuditFlg)
					equal = false;
			}
			else if (Object1.AuditFlg == null ^ Object2.AuditFlg == null )
			{
				equal = false;
			}
			if ( Object1.OnlineFlg != null && Object2.OnlineFlg != null )
			{
				if (Object1.OnlineFlg != Object2.OnlineFlg)
					equal = false;
			}
			else if (Object1.OnlineFlg == null ^ Object2.OnlineFlg == null )
			{
				equal = false;
			}
			if ( Object1.MinAttendNo != null && Object2.MinAttendNo != null )
			{
				if (Object1.MinAttendNo != Object2.MinAttendNo)
					equal = false;
			}
			else if (Object1.MinAttendNo == null ^ Object2.MinAttendNo == null )
			{
				equal = false;
			}
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if ( Object1.AllSessionNo != null && Object2.AllSessionNo != null )
			{
				if (Object1.AllSessionNo != Object2.AllSessionNo)
					equal = false;
			}
			else if (Object1.AllSessionNo == null ^ Object2.AllSessionNo == null )
			{
				equal = false;
			}
			if ( Object1.AllHoursNo != null && Object2.AllHoursNo != null )
			{
				if (Object1.AllHoursNo != Object2.AllHoursNo)
					equal = false;
			}
			else if (Object1.AllHoursNo == null ^ Object2.AllHoursNo == null )
			{
				equal = false;
			}
			if ( Object1.ApproveNoFlg != null && Object2.ApproveNoFlg != null )
			{
				if (Object1.ApproveNoFlg != Object2.ApproveNoFlg)
					equal = false;
			}
			else if (Object1.ApproveNoFlg == null ^ Object2.ApproveNoFlg == null )
			{
				equal = false;
			}
			if ( Object1.MaxStudCount != null && Object2.MaxStudCount != null )
			{
				if (Object1.MaxStudCount != Object2.MaxStudCount)
					equal = false;
			}
			else if (Object1.MaxStudCount == null ^ Object2.MaxStudCount == null )
			{
				equal = false;
			}
			if ( Object1.SaStfMemberId != null && Object2.SaStfMemberId != null )
			{
				if (Object1.SaStfMemberId != Object2.SaStfMemberId)
					equal = false;
			}
			else if (Object1.SaStfMemberId == null ^ Object2.SaStfMemberId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.SeFormId != null && Object2.SeFormId != null )
			{
				if (Object1.SeFormId != Object2.SeFormId)
					equal = false;
			}
			else if (Object1.SeFormId == null ^ Object2.SeFormId == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdOfferingCourseBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdOfferingCourseComparer GetComparer()
        {
            return new EdOfferingCourseComparer();
        }
        */

        // Comparer delegates back to EdOfferingCourse
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdOfferingCourse rhs, EdOfferingCourseColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdOfferingCourseColumn.EdOfferingCourseId:
            		return this.EdOfferingCourseId.CompareTo(rhs.EdOfferingCourseId);
            		
            		                 
            	
            	
            	case EdOfferingCourseColumn.EdCourseId:
            		return this.EdCourseId.Value.CompareTo(rhs.EdCourseId.Value);
            		
            		                 
            	
            	
            	case EdOfferingCourseColumn.EdOfferingId:
            		return this.EdOfferingId.Value.CompareTo(rhs.EdOfferingId.Value);
            		
            		                 
            	
            	
            	case EdOfferingCourseColumn.AuditFlg:
            		return this.AuditFlg.Value.CompareTo(rhs.AuditFlg.Value);
            		
            		                 
            	
            	
            	case EdOfferingCourseColumn.OnlineFlg:
            		return this.OnlineFlg.Value.CompareTo(rhs.OnlineFlg.Value);
            		
            		                 
            	
            	
            	case EdOfferingCourseColumn.MinAttendNo:
            		return this.MinAttendNo.Value.CompareTo(rhs.MinAttendNo.Value);
            		
            		                 
            	
            	
            	case EdOfferingCourseColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case EdOfferingCourseColumn.AllSessionNo:
            		return this.AllSessionNo.Value.CompareTo(rhs.AllSessionNo.Value);
            		
            		                 
            	
            	
            	case EdOfferingCourseColumn.AllHoursNo:
            		return this.AllHoursNo.Value.CompareTo(rhs.AllHoursNo.Value);
            		
            		                 
            	
            	
            	case EdOfferingCourseColumn.ApproveNoFlg:
            		return this.ApproveNoFlg.Value.CompareTo(rhs.ApproveNoFlg.Value);
            		
            		                 
            	
            	
            	case EdOfferingCourseColumn.MaxStudCount:
            		return this.MaxStudCount.Value.CompareTo(rhs.MaxStudCount.Value);
            		
            		                 
            	
            	
            	case EdOfferingCourseColumn.SaStfMemberId:
            		return this.SaStfMemberId.Value.CompareTo(rhs.SaStfMemberId.Value);
            		
            		                 
            	
            	
            	case EdOfferingCourseColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case EdOfferingCourseColumn.SeFormId:
            		return this.SeFormId.Value.CompareTo(rhs.SeFormId.Value);
            		
            		                 
            	
            	
            	case EdOfferingCourseColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdOfferingCourseKey> Members
		
		// member variable for the EntityId property
		private EdOfferingCourseKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdOfferingCourseKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdOfferingCourseKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdOfferingCourse")
					.Append("|").Append( this.EdOfferingCourseId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{16}{15}- EdOfferingCourseId: {0}{15}- EdCourseId: {1}{15}- EdOfferingId: {2}{15}- AuditFlg: {3}{15}- OnlineFlg: {4}{15}- MinAttendNo: {5}{15}- AsFacultyInfoId: {6}{15}- AllSessionNo: {7}{15}- AllHoursNo: {8}{15}- ApproveNoFlg: {9}{15}- MaxStudCount: {10}{15}- SaStfMemberId: {11}{15}- LastDate: {12}{15}- SeFormId: {13}{15}- SeUserId: {14}{15}{17}", 
				this.EdOfferingCourseId,
				(this.EdCourseId == null) ? string.Empty : this.EdCourseId.ToString(),
				(this.EdOfferingId == null) ? string.Empty : this.EdOfferingId.ToString(),
				(this.AuditFlg == null) ? string.Empty : this.AuditFlg.ToString(),
				(this.OnlineFlg == null) ? string.Empty : this.OnlineFlg.ToString(),
				(this.MinAttendNo == null) ? string.Empty : this.MinAttendNo.ToString(),
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				(this.AllSessionNo == null) ? string.Empty : this.AllSessionNo.ToString(),
				(this.AllHoursNo == null) ? string.Empty : this.AllHoursNo.ToString(),
				(this.ApproveNoFlg == null) ? string.Empty : this.ApproveNoFlg.ToString(),
				(this.MaxStudCount == null) ? string.Empty : this.MaxStudCount.ToString(),
				(this.SaStfMemberId == null) ? string.Empty : this.SaStfMemberId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.SeFormId == null) ? string.Empty : this.SeFormId.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_OFFERING_COURSE' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdOfferingCourseEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_OFFERING_COURSE_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_OFFERING_COURSE"</remarks>
		public System.Decimal EdOfferingCourseId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdOfferingCourseId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_COURSE_ID : 
		/// </summary>
		public System.Decimal?		  EdCourseId = null;
		
		/// <summary>
		/// ED_OFFERING_ID : 
		/// </summary>
		public System.Decimal?		  EdOfferingId = null;
		
		/// <summary>
		/// AUDIT_FLG : 
		/// </summary>
		public System.Decimal?		  AuditFlg = null;
		
		/// <summary>
		/// ONLINE_FLG : 
		/// </summary>
		public System.Decimal?		  OnlineFlg = null;
		
		/// <summary>
		/// MIN_ATTEND_NO : 
		/// </summary>
		public System.Decimal?		  MinAttendNo = null;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// ALL_SESSION_NO : 
		/// </summary>
		public System.Decimal?		  AllSessionNo = null;
		
		/// <summary>
		/// ALL_HOURS_NO : عدد ساعات تدريس المقرر على الفصل
		/// </summary>
		public System.Decimal?		  AllHoursNo = null;
		
		/// <summary>
		/// APPROVE_NO_FLG : اعتماد عدد ساعات المقرر على الفصل
		/// </summary>
		public System.Boolean?		  ApproveNoFlg = null;
		
		/// <summary>
		/// MAX_STUD_COUNT : 
		/// </summary>
		public System.Decimal?		  MaxStudCount = null;
		
		/// <summary>
		/// SA_STF_MEMBER_ID : 
		/// </summary>
		public System.Decimal?		  SaStfMemberId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// SE_FORM_ID : 
		/// </summary>
		public System.Decimal?		  SeFormId = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdCourse _edCourseIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return this._edCourseIdSource; }
            set { this._edCourseIdSource = value; }
      	}
		private EdOffering _edOfferingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdOffering"/>.
		/// </summary>
		/// <value>The source EdOffering for EdOfferingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdOffering EdOfferingIdSource
      	{
            get { return this._edOfferingIdSource; }
            set { this._edOfferingIdSource = value; }
      	}
		private SaStfMember _saStfMemberIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return this._saStfMemberIdSource; }
            set { this._saStfMemberIdSource = value; }
      	}
		private SeForm _seFormIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeForm"/>.
		/// </summary>
		/// <value>The source SeForm for SeFormId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeForm SeFormIdSource
      	{
            get { return this._seFormIdSource; }
            set { this._seFormIdSource = value; }
      	}
		private SeUser _seUserIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeUser SeUserIdSource
      	{
            get { return this._seUserIdSource; }
            set { this._seUserIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EdCourseInstanceCollection
		
		private TList<EdCourseInstance> _edCourseInstanceEdOfferingCourseId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edCourseInstanceEdOfferingCourseId
		/// </summary>
		
		public TList<EdCourseInstance> EdCourseInstanceCollection
		{
			get
			{
				if (_edCourseInstanceEdOfferingCourseId == null)
				{
				_edCourseInstanceEdOfferingCourseId = new TList<EdCourseInstance>();
				}
	
				return _edCourseInstanceEdOfferingCourseId;
			}
			set { _edCourseInstanceEdOfferingCourseId = value; }
		}
		
		#endregion

		#region ScScheduleHdrCollection
		
		private TList<ScScheduleHdr> _scScheduleHdrEdOfferingCourseId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scScheduleHdrEdOfferingCourseId
		/// </summary>
		
		public TList<ScScheduleHdr> ScScheduleHdrCollection
		{
			get
			{
				if (_scScheduleHdrEdOfferingCourseId == null)
				{
				_scScheduleHdrEdOfferingCourseId = new TList<ScScheduleHdr>();
				}
	
				return _scScheduleHdrEdOfferingCourseId;
			}
			set { _scScheduleHdrEdOfferingCourseId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdOfferingCourseEntityData _tmp = new EdOfferingCourseEntityData();
						
			_tmp.EdOfferingCourseId = this.EdOfferingCourseId;
			_tmp.OriginalEdOfferingCourseId = this.OriginalEdOfferingCourseId;
			
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.EdOfferingId = this.EdOfferingId;
			_tmp.AuditFlg = this.AuditFlg;
			_tmp.OnlineFlg = this.OnlineFlg;
			_tmp.MinAttendNo = this.MinAttendNo;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.AllSessionNo = this.AllSessionNo;
			_tmp.AllHoursNo = this.AllHoursNo;
			_tmp.ApproveNoFlg = this.ApproveNoFlg;
			_tmp.MaxStudCount = this.MaxStudCount;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.LastDate = this.LastDate;
			_tmp.SeFormId = this.SeFormId;
			_tmp.SeUserId = this.SeUserId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdCourseIdSource != null)
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource) as EdCourse;
			if (this.EdOfferingIdSource != null)
				_tmp.EdOfferingIdSource = MakeCopyOf(this.EdOfferingIdSource) as EdOffering;
			if (this.SaStfMemberIdSource != null)
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource) as SaStfMember;
			if (this.SeFormIdSource != null)
				_tmp.SeFormIdSource = MakeCopyOf(this.SeFormIdSource) as SeForm;
			if (this.SeUserIdSource != null)
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource) as SeUser;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._edCourseInstanceEdOfferingCourseId != null)
				_tmp.EdCourseInstanceCollection = (TList<EdCourseInstance>) MakeCopyOf(this.EdCourseInstanceCollection); 
			if (this._scScheduleHdrEdOfferingCourseId != null)
				_tmp.ScScheduleHdrCollection = (TList<ScScheduleHdr>) MakeCopyOf(this.ScScheduleHdrCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdOfferingCourseEntityData _tmp = new EdOfferingCourseEntityData();
						
			_tmp.EdOfferingCourseId = this.EdOfferingCourseId;
			_tmp.OriginalEdOfferingCourseId = this.OriginalEdOfferingCourseId;
			
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.EdOfferingId = this.EdOfferingId;
			_tmp.AuditFlg = this.AuditFlg;
			_tmp.OnlineFlg = this.OnlineFlg;
			_tmp.MinAttendNo = this.MinAttendNo;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.AllSessionNo = this.AllSessionNo;
			_tmp.AllHoursNo = this.AllHoursNo;
			_tmp.ApproveNoFlg = this.ApproveNoFlg;
			_tmp.MaxStudCount = this.MaxStudCount;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.LastDate = this.LastDate;
			_tmp.SeFormId = this.SeFormId;
			_tmp.SeUserId = this.SeUserId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				_tmp.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EdOfferingIdSource != null && existingCopies.Contains(this.EdOfferingIdSource))
				_tmp.EdOfferingIdSource = existingCopies[this.EdOfferingIdSource] as EdOffering;
			else
				_tmp.EdOfferingIdSource = MakeCopyOf(this.EdOfferingIdSource, existingCopies) as EdOffering;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				_tmp.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
			if (this.SeFormIdSource != null && existingCopies.Contains(this.SeFormIdSource))
				_tmp.SeFormIdSource = existingCopies[this.SeFormIdSource] as SeForm;
			else
				_tmp.SeFormIdSource = MakeCopyOf(this.SeFormIdSource, existingCopies) as SeForm;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				_tmp.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EdCourseInstanceCollection = (TList<EdCourseInstance>) MakeCopyOf(this.EdCourseInstanceCollection, existingCopies); 
			_tmp.ScScheduleHdrCollection = (TList<ScScheduleHdr>) MakeCopyOf(this.ScScheduleHdrCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdOfferingCourseColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdOfferingCourseColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdOfferingCourseColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdOfferingCourseColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdOfferingCourseColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdOfferingCourseColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdOfferingCourseEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdOfferingCourseEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdOfferingCourseColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdOfferingCourseColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdOfferingCourseEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdOfferingCourseEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdOfferingCourseEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdOfferingCourse"/> object.
	/// </remarks>
	public class EdOfferingCourseEventArgs : System.EventArgs
	{
		private EdOfferingCourseColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdOfferingCourseEventArgs class.
		///</summary>
		public EdOfferingCourseEventArgs(EdOfferingCourseColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdOfferingCourseEventArgs class.
		///</summary>
		public EdOfferingCourseEventArgs(EdOfferingCourseColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdOfferingCourseColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdOfferingCourseColumn" />
		public EdOfferingCourseColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdOfferingCourse related events.
	///</summary>
	public delegate void EdOfferingCourseEventHandler(object sender, EdOfferingCourseEventArgs e);
	
	#region EdOfferingCourseComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdOfferingCourseComparer : System.Collections.Generic.IComparer<EdOfferingCourse>
	{
		EdOfferingCourseColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdOfferingCourseComparer"/> class.
        /// </summary>
		public EdOfferingCourseComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdOfferingCourseComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdOfferingCourseComparer(EdOfferingCourseColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdOfferingCourse"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdOfferingCourse"/> to compare.</param>
        /// <param name="b">The second <c>EdOfferingCourse</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdOfferingCourse a, EdOfferingCourse b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdOfferingCourse entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdOfferingCourse a, EdOfferingCourse b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdOfferingCourseColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdOfferingCourseKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdOfferingCourse"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdOfferingCourseKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdOfferingCourseKey class.
		/// </summary>
		public EdOfferingCourseKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdOfferingCourseKey class.
		/// </summary>
		public EdOfferingCourseKey(EdOfferingCourseBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdOfferingCourseId = entity.EdOfferingCourseId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdOfferingCourseKey class.
		/// </summary>
		public EdOfferingCourseKey(System.Decimal _edOfferingCourseId)
		{
			#region Init Properties

			this.EdOfferingCourseId = _edOfferingCourseId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdOfferingCourseBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdOfferingCourseBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdOfferingCourseId property
		private System.Decimal _edOfferingCourseId;
		
		/// <summary>
		/// Gets or sets the EdOfferingCourseId property.
		/// </summary>
		public System.Decimal EdOfferingCourseId
		{
			get { return _edOfferingCourseId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdOfferingCourseId = value;
				
				_edOfferingCourseId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdOfferingCourseId = ( values["EdOfferingCourseId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdOfferingCourseId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdOfferingCourseId", EdOfferingCourseId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdOfferingCourseId: {0}{1}",
								EdOfferingCourseId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdOfferingCourseColumn Enum
	
	/// <summary>
	/// Enumerate the EdOfferingCourse columns.
	/// </summary>
	[Serializable]
	public enum EdOfferingCourseColumn : int
	{
		/// <summary>
		/// EdOfferingCourseId : 
		/// </summary>
		[EnumTextValue("ED_OFFERING_COURSE_ID")]
		[ColumnEnum("ED_OFFERING_COURSE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdOfferingCourseId = 1,
		/// <summary>
		/// EdCourseId : 
		/// </summary>
		[EnumTextValue("ED_COURSE_ID")]
		[ColumnEnum("ED_COURSE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCourseId = 2,
		/// <summary>
		/// EdOfferingId : 
		/// </summary>
		[EnumTextValue("ED_OFFERING_ID")]
		[ColumnEnum("ED_OFFERING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdOfferingId = 3,
		/// <summary>
		/// AuditFlg : 
		/// </summary>
		[EnumTextValue("AUDIT_FLG")]
		[ColumnEnum("AUDIT_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AuditFlg = 4,
		/// <summary>
		/// OnlineFlg : 
		/// </summary>
		[EnumTextValue("ONLINE_FLG")]
		[ColumnEnum("ONLINE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		OnlineFlg = 5,
		/// <summary>
		/// MinAttendNo : 
		/// </summary>
		[EnumTextValue("MIN_ATTEND_NO")]
		[ColumnEnum("MIN_ATTEND_NO", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MinAttendNo = 6,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 7,
		/// <summary>
		/// AllSessionNo : 
		/// </summary>
		[EnumTextValue("ALL_SESSION_NO")]
		[ColumnEnum("ALL_SESSION_NO", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AllSessionNo = 8,
		/// <summary>
		/// AllHoursNo : عدد ساعات تدريس المقرر على الفصل
		/// </summary>
		[EnumTextValue("ALL_HOURS_NO")]
		[ColumnEnum("ALL_HOURS_NO", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AllHoursNo = 9,
		/// <summary>
		/// ApproveNoFlg : اعتماد عدد ساعات المقرر على الفصل
		/// </summary>
		[EnumTextValue("APPROVE_NO_FLG")]
		[ColumnEnum("APPROVE_NO_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ApproveNoFlg = 10,
		/// <summary>
		/// MaxStudCount : 
		/// </summary>
		[EnumTextValue("MAX_STUD_COUNT")]
		[ColumnEnum("MAX_STUD_COUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MaxStudCount = 11,
		/// <summary>
		/// SaStfMemberId : 
		/// </summary>
		[EnumTextValue("SA_STF_MEMBER_ID")]
		[ColumnEnum("SA_STF_MEMBER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SaStfMemberId = 12,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 13,
		/// <summary>
		/// SeFormId : 
		/// </summary>
		[EnumTextValue("SE_FORM_ID")]
		[ColumnEnum("SE_FORM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeFormId = 14,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 15
	}//End enum

	#endregion EdOfferingCourseColumn Enum

} // end namespace
