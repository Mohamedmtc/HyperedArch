
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file CoCrsRsltRaise.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'CO_CRS_RSLT_RAISE' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class CoCrsRsltRaiseBase : EntityBase, ICoCrsRsltRaise, IEntityId<CoCrsRsltRaiseKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CoCrsRsltRaiseEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CoCrsRsltRaiseEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CoCrsRsltRaiseEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<CoCrsRsltRaise> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CoCrsRsltRaiseEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CoCrsRsltRaiseEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CoCrsRsltRaiseBase"/> instance.
		///</summary>
		public CoCrsRsltRaiseBase()
		{
			this.entityData = new CoCrsRsltRaiseEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CoCrsRsltRaiseBase"/> instance.
		///</summary>
		///<param name="_coCrsRsltRaiseId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_edCodeCourseAssessId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId">مسلسل الفصل الدراسي</param>
		///<param name="_dcsonDate">تاريخ لرفع درجات طالب راسب</param>
		///<param name="_dcsonNo">رقم القرار</param>
		///<param name="_raiseMark">الدرجة المرفوعه</param>
		///<param name="_raisePrcnt">النسبة المرفوعه</param>
		///<param name="_stdMrkFrom"></param>
		///<param name="_stdMrkTo"></param>
		///<param name="_note">ملاحظات</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_entPolicyAssessHdrId"></param>
		///<param name="_asCodeDegreeClassId"></param>
		public CoCrsRsltRaiseBase(System.Decimal _coCrsRsltRaiseId, System.Decimal _asFacultyInfoId, 
			System.Decimal _edCourseId, System.Decimal? _edCodeCourseAssessId, System.Decimal _edAcadYearId, 
			System.Decimal _edCodeSemesterId, System.DateTime _dcsonDate, System.String _dcsonNo, 
			System.Decimal? _raiseMark, System.Decimal? _raisePrcnt, System.Decimal? _stdMrkFrom, 
			System.Decimal? _stdMrkTo, System.String _note, System.Decimal _seUserId, 
			System.DateTime _lastDate, System.Decimal? _entPolicyAssessHdrId, System.Decimal? _asCodeDegreeClassId)
		{
			this.entityData = new CoCrsRsltRaiseEntityData();
			this.backupData = null;

			this.CoCrsRsltRaiseId = _coCrsRsltRaiseId;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.EdCourseId = _edCourseId;
			this.EdCodeCourseAssessId = _edCodeCourseAssessId;
			this.EdAcadYearId = _edAcadYearId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.DcsonDate = _dcsonDate;
			this.DcsonNo = _dcsonNo;
			this.RaiseMark = _raiseMark;
			this.RaisePrcnt = _raisePrcnt;
			this.StdMrkFrom = _stdMrkFrom;
			this.StdMrkTo = _stdMrkTo;
			this.Note = _note;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
			this.EntPolicyAssessHdrId = _entPolicyAssessHdrId;
			this.AsCodeDegreeClassId = _asCodeDegreeClassId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="CoCrsRsltRaise"/> instance.
		///</summary>
		///<param name="_coCrsRsltRaiseId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_edCodeCourseAssessId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId">مسلسل الفصل الدراسي</param>
		///<param name="_dcsonDate">تاريخ لرفع درجات طالب راسب</param>
		///<param name="_dcsonNo">رقم القرار</param>
		///<param name="_raiseMark">الدرجة المرفوعه</param>
		///<param name="_raisePrcnt">النسبة المرفوعه</param>
		///<param name="_stdMrkFrom"></param>
		///<param name="_stdMrkTo"></param>
		///<param name="_note">ملاحظات</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_entPolicyAssessHdrId"></param>
		///<param name="_asCodeDegreeClassId"></param>
		public static CoCrsRsltRaise CreateCoCrsRsltRaise(System.Decimal _coCrsRsltRaiseId, System.Decimal _asFacultyInfoId, 
			System.Decimal _edCourseId, System.Decimal? _edCodeCourseAssessId, System.Decimal _edAcadYearId, 
			System.Decimal _edCodeSemesterId, System.DateTime _dcsonDate, System.String _dcsonNo, 
			System.Decimal? _raiseMark, System.Decimal? _raisePrcnt, System.Decimal? _stdMrkFrom, 
			System.Decimal? _stdMrkTo, System.String _note, System.Decimal _seUserId, 
			System.DateTime _lastDate, System.Decimal? _entPolicyAssessHdrId, System.Decimal? _asCodeDegreeClassId)
		{
			CoCrsRsltRaise newCoCrsRsltRaise = new CoCrsRsltRaise();
			newCoCrsRsltRaise.CoCrsRsltRaiseId = _coCrsRsltRaiseId;
			newCoCrsRsltRaise.AsFacultyInfoId = _asFacultyInfoId;
			newCoCrsRsltRaise.EdCourseId = _edCourseId;
			newCoCrsRsltRaise.EdCodeCourseAssessId = _edCodeCourseAssessId;
			newCoCrsRsltRaise.EdAcadYearId = _edAcadYearId;
			newCoCrsRsltRaise.EdCodeSemesterId = _edCodeSemesterId;
			newCoCrsRsltRaise.DcsonDate = _dcsonDate;
			newCoCrsRsltRaise.DcsonNo = _dcsonNo;
			newCoCrsRsltRaise.RaiseMark = _raiseMark;
			newCoCrsRsltRaise.RaisePrcnt = _raisePrcnt;
			newCoCrsRsltRaise.StdMrkFrom = _stdMrkFrom;
			newCoCrsRsltRaise.StdMrkTo = _stdMrkTo;
			newCoCrsRsltRaise.Note = _note;
			newCoCrsRsltRaise.SeUserId = _seUserId;
			newCoCrsRsltRaise.LastDate = _lastDate;
			newCoCrsRsltRaise.EntPolicyAssessHdrId = _entPolicyAssessHdrId;
			newCoCrsRsltRaise.AsCodeDegreeClassId = _asCodeDegreeClassId;
			return newCoCrsRsltRaise;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the CoCrsRsltRaiseId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal CoCrsRsltRaiseId
		{
			get
			{
				return this.entityData.CoCrsRsltRaiseId; 
			}
			
			set
			{
				if (this.entityData.CoCrsRsltRaiseId == value)
					return;
					
				OnColumnChanging(CoCrsRsltRaiseColumn.CoCrsRsltRaiseId, this.entityData.CoCrsRsltRaiseId);
				this.entityData.CoCrsRsltRaiseId = value;
				this.EntityId.CoCrsRsltRaiseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoCrsRsltRaiseColumn.CoCrsRsltRaiseId, this.entityData.CoCrsRsltRaiseId);
				OnPropertyChanged("CoCrsRsltRaiseId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the CO_CRS_RSLT_RAISE_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the CO_CRS_RSLT_RAISE_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalCoCrsRsltRaiseId
		{
			get { return this.entityData.OriginalCoCrsRsltRaiseId; }
			set { this.entityData.OriginalCoCrsRsltRaiseId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(CoCrsRsltRaiseColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoCrsRsltRaiseColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCourseId
		{
			get
			{
				return this.entityData.EdCourseId; 
			}
			
			set
			{
				if (this.entityData.EdCourseId == value)
					return;
					
				OnColumnChanging(CoCrsRsltRaiseColumn.EdCourseId, this.entityData.EdCourseId);
				this.entityData.EdCourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoCrsRsltRaiseColumn.EdCourseId, this.entityData.EdCourseId);
				OnPropertyChanged("EdCourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeCourseAssessId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeCourseAssessIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeCourseAssessId
		{
			get
			{
				return this.entityData.EdCodeCourseAssessId; 
			}
			
			set
			{
				if (this.entityData.EdCodeCourseAssessId == value)
					return;
					
				OnColumnChanging(CoCrsRsltRaiseColumn.EdCodeCourseAssessId, this.entityData.EdCodeCourseAssessId);
				this.entityData.EdCodeCourseAssessId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoCrsRsltRaiseColumn.EdCodeCourseAssessId, this.entityData.EdCodeCourseAssessId);
				OnPropertyChanged("EdCodeCourseAssessId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(CoCrsRsltRaiseColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoCrsRsltRaiseColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		مسلسل الفصل الدراسي
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"مسلسل الفصل الدراسي"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(CoCrsRsltRaiseColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoCrsRsltRaiseColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DcsonDate property. 
		///		تاريخ لرفع درجات طالب راسب
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"تاريخ لرفع درجات طالب راسب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime DcsonDate
		{
			get
			{
				return this.entityData.DcsonDate; 
			}
			
			set
			{
				if (this.entityData.DcsonDate == value)
					return;
					
				OnColumnChanging(CoCrsRsltRaiseColumn.DcsonDate, this.entityData.DcsonDate);
				this.entityData.DcsonDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoCrsRsltRaiseColumn.DcsonDate, this.entityData.DcsonDate);
				OnPropertyChanged("DcsonDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DcsonNo property. 
		///		رقم القرار
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"رقم القرار"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String DcsonNo
		{
			get
			{
				return this.entityData.DcsonNo; 
			}
			
			set
			{
				if (this.entityData.DcsonNo == value)
					return;
					
				OnColumnChanging(CoCrsRsltRaiseColumn.DcsonNo, this.entityData.DcsonNo);
				this.entityData.DcsonNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoCrsRsltRaiseColumn.DcsonNo, this.entityData.DcsonNo);
				OnPropertyChanged("DcsonNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RaiseMark property. 
		///		الدرجة المرفوعه
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRaiseMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"الدرجة المرفوعه"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RaiseMark
		{
			get
			{
				return this.entityData.RaiseMark; 
			}
			
			set
			{
				if (this.entityData.RaiseMark == value)
					return;
					
				OnColumnChanging(CoCrsRsltRaiseColumn.RaiseMark, this.entityData.RaiseMark);
				this.entityData.RaiseMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoCrsRsltRaiseColumn.RaiseMark, this.entityData.RaiseMark);
				OnPropertyChanged("RaiseMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RaisePrcnt property. 
		///		النسبة المرفوعه
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRaisePrcntNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"النسبة المرفوعه"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RaisePrcnt
		{
			get
			{
				return this.entityData.RaisePrcnt; 
			}
			
			set
			{
				if (this.entityData.RaisePrcnt == value)
					return;
					
				OnColumnChanging(CoCrsRsltRaiseColumn.RaisePrcnt, this.entityData.RaisePrcnt);
				this.entityData.RaisePrcnt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoCrsRsltRaiseColumn.RaisePrcnt, this.entityData.RaisePrcnt);
				OnPropertyChanged("RaisePrcnt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StdMrkFrom property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsStdMrkFromNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? StdMrkFrom
		{
			get
			{
				return this.entityData.StdMrkFrom; 
			}
			
			set
			{
				if (this.entityData.StdMrkFrom == value)
					return;
					
				OnColumnChanging(CoCrsRsltRaiseColumn.StdMrkFrom, this.entityData.StdMrkFrom);
				this.entityData.StdMrkFrom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoCrsRsltRaiseColumn.StdMrkFrom, this.entityData.StdMrkFrom);
				OnPropertyChanged("StdMrkFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StdMrkTo property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsStdMrkToNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? StdMrkTo
		{
			get
			{
				return this.entityData.StdMrkTo; 
			}
			
			set
			{
				if (this.entityData.StdMrkTo == value)
					return;
					
				OnColumnChanging(CoCrsRsltRaiseColumn.StdMrkTo, this.entityData.StdMrkTo);
				this.entityData.StdMrkTo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoCrsRsltRaiseColumn.StdMrkTo, this.entityData.StdMrkTo);
				OnPropertyChanged("StdMrkTo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Note property. 
		///		ملاحظات
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"ملاحظات"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 240)]
		public virtual System.String Note
		{
			get
			{
				return this.entityData.Note; 
			}
			
			set
			{
				if (this.entityData.Note == value)
					return;
					
				OnColumnChanging(CoCrsRsltRaiseColumn.Note, this.entityData.Note);
				this.entityData.Note = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoCrsRsltRaiseColumn.Note, this.entityData.Note);
				OnPropertyChanged("Note");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(CoCrsRsltRaiseColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoCrsRsltRaiseColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(CoCrsRsltRaiseColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoCrsRsltRaiseColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntPolicyAssessHdrId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntPolicyAssessHdrIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntPolicyAssessHdrId
		{
			get
			{
				return this.entityData.EntPolicyAssessHdrId; 
			}
			
			set
			{
				if (this.entityData.EntPolicyAssessHdrId == value)
					return;
					
				OnColumnChanging(CoCrsRsltRaiseColumn.EntPolicyAssessHdrId, this.entityData.EntPolicyAssessHdrId);
				this.entityData.EntPolicyAssessHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoCrsRsltRaiseColumn.EntPolicyAssessHdrId, this.entityData.EntPolicyAssessHdrId);
				OnPropertyChanged("EntPolicyAssessHdrId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeClassId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeClassIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeClassId
		{
			get
			{
				return this.entityData.AsCodeDegreeClassId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeClassId == value)
					return;
					
				OnColumnChanging(CoCrsRsltRaiseColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				this.entityData.AsCodeDegreeClassId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoCrsRsltRaiseColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				OnPropertyChanged("AsCodeDegreeClassId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseAssess"/>.
		/// </summary>
		/// <value>The source EdCodeCourseAssess for EdCodeCourseAssessId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeCourseAssess EdCodeCourseAssessIdSource
      	{
            get { return entityData.EdCodeCourseAssessIdSource; }
            set { entityData.EdCodeCourseAssessIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return entityData.EdCourseIdSource; }
            set { entityData.EdCourseIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntPolicyAssessHdr"/>.
		/// </summary>
		/// <value>The source EntPolicyAssessHdr for EntPolicyAssessHdrId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntPolicyAssessHdr EntPolicyAssessHdrIdSource
      	{
            get { return entityData.EntPolicyAssessHdrIdSource; }
            set { entityData.EntPolicyAssessHdrIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeUser SeUserIdSource
      	{
            get { return entityData.SeUserIdSource; }
            set { entityData.SeUserIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DcsonNo", "Dcson No"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DcsonNo", "Dcson No", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Note", "Note", 240));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "CO_CRS_RSLT_RAISE"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"CO_CRS_RSLT_RAISE_ID", "AS_FACULTY_INFO_ID", "ED_COURSE_ID", "ED_CODE_COURSE_ASSESS_ID", "ED_ACAD_YEAR_ID", "ED_CODE_SEMESTER_ID", "DCSON_DATE", "DCSON_NO", "RAISE_MARK", "RAISE_PRCNT", "STD_MRK_FROM", "STD_MRK_TO", "NOTE", "SE_USER_ID", "LAST_DATE", "ENT_POLICY_ASSESS_HDR_ID", "AS_CODE_DEGREE_CLASS_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CoCrsRsltRaiseEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (CoCrsRsltRaise) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<CoCrsRsltRaise>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as CoCrsRsltRaise);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed CoCrsRsltRaise Entity 
		///</summary>
		protected virtual CoCrsRsltRaise Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			CoCrsRsltRaise copy = new CoCrsRsltRaise();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.CoCrsRsltRaiseId = this.CoCrsRsltRaiseId;
					copy.OriginalCoCrsRsltRaiseId = this.OriginalCoCrsRsltRaiseId;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.EdCourseId = this.EdCourseId;
				copy.EdCodeCourseAssessId = this.EdCodeCourseAssessId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.DcsonDate = this.DcsonDate;
				copy.DcsonNo = this.DcsonNo;
				copy.RaiseMark = this.RaiseMark;
				copy.RaisePrcnt = this.RaisePrcnt;
				copy.StdMrkFrom = this.StdMrkFrom;
				copy.StdMrkTo = this.StdMrkTo;
				copy.Note = this.Note;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
				copy.EntPolicyAssessHdrId = this.EntPolicyAssessHdrId;
				copy.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeCourseAssessIdSource != null && existingCopies.Contains(this.EdCodeCourseAssessIdSource))
				copy.EdCodeCourseAssessIdSource = existingCopies[this.EdCodeCourseAssessIdSource] as EdCodeCourseAssess;
			else
				copy.EdCodeCourseAssessIdSource = MakeCopyOf(this.EdCodeCourseAssessIdSource, existingCopies) as EdCodeCourseAssess;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				copy.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				copy.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EntPolicyAssessHdrIdSource != null && existingCopies.Contains(this.EntPolicyAssessHdrIdSource))
				copy.EntPolicyAssessHdrIdSource = existingCopies[this.EntPolicyAssessHdrIdSource] as EntPolicyAssessHdr;
			else
				copy.EntPolicyAssessHdrIdSource = MakeCopyOf(this.EntPolicyAssessHdrIdSource, existingCopies) as EntPolicyAssessHdr;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				copy.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				copy.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed CoCrsRsltRaise Entity 
		///</summary>
		public virtual CoCrsRsltRaise Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed CoCrsRsltRaise Entity which is a deep copy of the current entity.
		///</summary>
		public virtual CoCrsRsltRaise DeepCopy()
		{
			return EntityHelper.Clone<CoCrsRsltRaise>(this as CoCrsRsltRaise);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CoCrsRsltRaiseEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new CoCrsRsltRaiseEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CoCrsRsltRaiseEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CoCrsRsltRaiseColumn column)
		{
			switch(column)
			{
					case CoCrsRsltRaiseColumn.CoCrsRsltRaiseId:
					return entityData.CoCrsRsltRaiseId != _originalData.CoCrsRsltRaiseId;
					case CoCrsRsltRaiseColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case CoCrsRsltRaiseColumn.EdCourseId:
					return entityData.EdCourseId != _originalData.EdCourseId;
					case CoCrsRsltRaiseColumn.EdCodeCourseAssessId:
					return entityData.EdCodeCourseAssessId != _originalData.EdCodeCourseAssessId;
					case CoCrsRsltRaiseColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case CoCrsRsltRaiseColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case CoCrsRsltRaiseColumn.DcsonDate:
					return entityData.DcsonDate != _originalData.DcsonDate;
					case CoCrsRsltRaiseColumn.DcsonNo:
					return entityData.DcsonNo != _originalData.DcsonNo;
					case CoCrsRsltRaiseColumn.RaiseMark:
					return entityData.RaiseMark != _originalData.RaiseMark;
					case CoCrsRsltRaiseColumn.RaisePrcnt:
					return entityData.RaisePrcnt != _originalData.RaisePrcnt;
					case CoCrsRsltRaiseColumn.StdMrkFrom:
					return entityData.StdMrkFrom != _originalData.StdMrkFrom;
					case CoCrsRsltRaiseColumn.StdMrkTo:
					return entityData.StdMrkTo != _originalData.StdMrkTo;
					case CoCrsRsltRaiseColumn.Note:
					return entityData.Note != _originalData.Note;
					case CoCrsRsltRaiseColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case CoCrsRsltRaiseColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case CoCrsRsltRaiseColumn.EntPolicyAssessHdrId:
					return entityData.EntPolicyAssessHdrId != _originalData.EntPolicyAssessHdrId;
					case CoCrsRsltRaiseColumn.AsCodeDegreeClassId:
					return entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< CoCrsRsltRaiseColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.CoCrsRsltRaiseId != _originalData.CoCrsRsltRaiseId;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.EdCourseId != _originalData.EdCourseId;
			result = result || entityData.EdCodeCourseAssessId != _originalData.EdCodeCourseAssessId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.DcsonDate != _originalData.DcsonDate;
			result = result || entityData.DcsonNo != _originalData.DcsonNo;
			result = result || entityData.RaiseMark != _originalData.RaiseMark;
			result = result || entityData.RaisePrcnt != _originalData.RaisePrcnt;
			result = result || entityData.StdMrkFrom != _originalData.StdMrkFrom;
			result = result || entityData.StdMrkTo != _originalData.StdMrkTo;
			result = result || entityData.Note != _originalData.Note;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.EntPolicyAssessHdrId != _originalData.EntPolicyAssessHdrId;
			result = result || entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
			return result;
		}	
		
		///<summary>
		///  Returns a CoCrsRsltRaise Entity with the original data.
		///</summary>
		public CoCrsRsltRaise GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateCoCrsRsltRaise(
				_originalData.CoCrsRsltRaiseId,
				_originalData.AsFacultyInfoId,
				_originalData.EdCourseId,
				_originalData.EdCodeCourseAssessId,
				_originalData.EdAcadYearId,
				_originalData.EdCodeSemesterId,
				_originalData.DcsonDate,
				_originalData.DcsonNo,
				_originalData.RaiseMark,
				_originalData.RaisePrcnt,
				_originalData.StdMrkFrom,
				_originalData.StdMrkTo,
				_originalData.Note,
				_originalData.SeUserId,
				_originalData.LastDate,
				_originalData.EntPolicyAssessHdrId,
				_originalData.AsCodeDegreeClassId
				);
				
			return (CoCrsRsltRaise)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CoCrsRsltRaiseBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is CoCrsRsltRaiseBase)
				return ValueEquals(this, (CoCrsRsltRaiseBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CoCrsRsltRaiseBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.CoCrsRsltRaiseId.GetHashCode() ^ 
					this.AsFacultyInfoId.GetHashCode() ^ 
					this.EdCourseId.GetHashCode() ^ 
					((this.EdCodeCourseAssessId == null) ? string.Empty : this.EdCodeCourseAssessId.ToString()).GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					this.EdCodeSemesterId.GetHashCode() ^ 
					this.DcsonDate.GetHashCode() ^ 
					this.DcsonNo.GetHashCode() ^ 
					((this.RaiseMark == null) ? string.Empty : this.RaiseMark.ToString()).GetHashCode() ^ 
					((this.RaisePrcnt == null) ? string.Empty : this.RaisePrcnt.ToString()).GetHashCode() ^ 
					((this.StdMrkFrom == null) ? string.Empty : this.StdMrkFrom.ToString()).GetHashCode() ^ 
					((this.StdMrkTo == null) ? string.Empty : this.StdMrkTo.ToString()).GetHashCode() ^ 
					((this.Note == null) ? string.Empty : this.Note.ToString()).GetHashCode() ^ 
					this.SeUserId.GetHashCode() ^ 
					this.LastDate.GetHashCode() ^ 
					((this.EntPolicyAssessHdrId == null) ? string.Empty : this.EntPolicyAssessHdrId.ToString()).GetHashCode() ^ 
					((this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CoCrsRsltRaiseBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CoCrsRsltRaiseBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="CoCrsRsltRaiseBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="CoCrsRsltRaiseBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CoCrsRsltRaiseBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(CoCrsRsltRaiseBase Object1, CoCrsRsltRaiseBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.CoCrsRsltRaiseId != Object2.CoCrsRsltRaiseId)
				equal = false;
			if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
				equal = false;
			if (Object1.EdCourseId != Object2.EdCourseId)
				equal = false;
			if ( Object1.EdCodeCourseAssessId != null && Object2.EdCodeCourseAssessId != null )
			{
				if (Object1.EdCodeCourseAssessId != Object2.EdCodeCourseAssessId)
					equal = false;
			}
			else if (Object1.EdCodeCourseAssessId == null ^ Object2.EdCodeCourseAssessId == null )
			{
				equal = false;
			}
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
				equal = false;
			if (Object1.DcsonDate != Object2.DcsonDate)
				equal = false;
			if (Object1.DcsonNo != Object2.DcsonNo)
				equal = false;
			if ( Object1.RaiseMark != null && Object2.RaiseMark != null )
			{
				if (Object1.RaiseMark != Object2.RaiseMark)
					equal = false;
			}
			else if (Object1.RaiseMark == null ^ Object2.RaiseMark == null )
			{
				equal = false;
			}
			if ( Object1.RaisePrcnt != null && Object2.RaisePrcnt != null )
			{
				if (Object1.RaisePrcnt != Object2.RaisePrcnt)
					equal = false;
			}
			else if (Object1.RaisePrcnt == null ^ Object2.RaisePrcnt == null )
			{
				equal = false;
			}
			if ( Object1.StdMrkFrom != null && Object2.StdMrkFrom != null )
			{
				if (Object1.StdMrkFrom != Object2.StdMrkFrom)
					equal = false;
			}
			else if (Object1.StdMrkFrom == null ^ Object2.StdMrkFrom == null )
			{
				equal = false;
			}
			if ( Object1.StdMrkTo != null && Object2.StdMrkTo != null )
			{
				if (Object1.StdMrkTo != Object2.StdMrkTo)
					equal = false;
			}
			else if (Object1.StdMrkTo == null ^ Object2.StdMrkTo == null )
			{
				equal = false;
			}
			if ( Object1.Note != null && Object2.Note != null )
			{
				if (Object1.Note != Object2.Note)
					equal = false;
			}
			else if (Object1.Note == null ^ Object2.Note == null )
			{
				equal = false;
			}
			if (Object1.SeUserId != Object2.SeUserId)
				equal = false;
			if (Object1.LastDate != Object2.LastDate)
				equal = false;
			if ( Object1.EntPolicyAssessHdrId != null && Object2.EntPolicyAssessHdrId != null )
			{
				if (Object1.EntPolicyAssessHdrId != Object2.EntPolicyAssessHdrId)
					equal = false;
			}
			else if (Object1.EntPolicyAssessHdrId == null ^ Object2.EntPolicyAssessHdrId == null )
			{
				equal = false;
			}
			if ( Object1.AsCodeDegreeClassId != null && Object2.AsCodeDegreeClassId != null )
			{
				if (Object1.AsCodeDegreeClassId != Object2.AsCodeDegreeClassId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeClassId == null ^ Object2.AsCodeDegreeClassId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CoCrsRsltRaiseBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CoCrsRsltRaiseComparer GetComparer()
        {
            return new CoCrsRsltRaiseComparer();
        }
        */

        // Comparer delegates back to CoCrsRsltRaise
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(CoCrsRsltRaise rhs, CoCrsRsltRaiseColumn which)
        {
            switch (which)
            {
            	
            	
            	case CoCrsRsltRaiseColumn.CoCrsRsltRaiseId:
            		return this.CoCrsRsltRaiseId.CompareTo(rhs.CoCrsRsltRaiseId);
            		
            		                 
            	
            	
            	case CoCrsRsltRaiseColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.CompareTo(rhs.AsFacultyInfoId);
            		
            		                 
            	
            	
            	case CoCrsRsltRaiseColumn.EdCourseId:
            		return this.EdCourseId.CompareTo(rhs.EdCourseId);
            		
            		                 
            	
            	
            	case CoCrsRsltRaiseColumn.EdCodeCourseAssessId:
            		return this.EdCodeCourseAssessId.Value.CompareTo(rhs.EdCodeCourseAssessId.Value);
            		
            		                 
            	
            	
            	case CoCrsRsltRaiseColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case CoCrsRsltRaiseColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.CompareTo(rhs.EdCodeSemesterId);
            		
            		                 
            	
            	
            	case CoCrsRsltRaiseColumn.DcsonDate:
            		return this.DcsonDate.CompareTo(rhs.DcsonDate);
            		
            		                 
            	
            	
            	case CoCrsRsltRaiseColumn.DcsonNo:
            		return this.DcsonNo.CompareTo(rhs.DcsonNo);
            		
            		                 
            	
            	
            	case CoCrsRsltRaiseColumn.RaiseMark:
            		return this.RaiseMark.Value.CompareTo(rhs.RaiseMark.Value);
            		
            		                 
            	
            	
            	case CoCrsRsltRaiseColumn.RaisePrcnt:
            		return this.RaisePrcnt.Value.CompareTo(rhs.RaisePrcnt.Value);
            		
            		                 
            	
            	
            	case CoCrsRsltRaiseColumn.StdMrkFrom:
            		return this.StdMrkFrom.Value.CompareTo(rhs.StdMrkFrom.Value);
            		
            		                 
            	
            	
            	case CoCrsRsltRaiseColumn.StdMrkTo:
            		return this.StdMrkTo.Value.CompareTo(rhs.StdMrkTo.Value);
            		
            		                 
            	
            	
            	case CoCrsRsltRaiseColumn.Note:
            		return this.Note.CompareTo(rhs.Note);
            		
            		                 
            	
            	
            	case CoCrsRsltRaiseColumn.SeUserId:
            		return this.SeUserId.CompareTo(rhs.SeUserId);
            		
            		                 
            	
            	
            	case CoCrsRsltRaiseColumn.LastDate:
            		return this.LastDate.CompareTo(rhs.LastDate);
            		
            		                 
            	
            	
            	case CoCrsRsltRaiseColumn.EntPolicyAssessHdrId:
            		return this.EntPolicyAssessHdrId.Value.CompareTo(rhs.EntPolicyAssessHdrId.Value);
            		
            		                 
            	
            	
            	case CoCrsRsltRaiseColumn.AsCodeDegreeClassId:
            		return this.AsCodeDegreeClassId.Value.CompareTo(rhs.AsCodeDegreeClassId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CoCrsRsltRaiseKey> Members
		
		// member variable for the EntityId property
		private CoCrsRsltRaiseKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual CoCrsRsltRaiseKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CoCrsRsltRaiseKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("CoCrsRsltRaise")
					.Append("|").Append( this.CoCrsRsltRaiseId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{18}{17}- CoCrsRsltRaiseId: {0}{17}- AsFacultyInfoId: {1}{17}- EdCourseId: {2}{17}- EdCodeCourseAssessId: {3}{17}- EdAcadYearId: {4}{17}- EdCodeSemesterId: {5}{17}- DcsonDate: {6}{17}- DcsonNo: {7}{17}- RaiseMark: {8}{17}- RaisePrcnt: {9}{17}- StdMrkFrom: {10}{17}- StdMrkTo: {11}{17}- Note: {12}{17}- SeUserId: {13}{17}- LastDate: {14}{17}- EntPolicyAssessHdrId: {15}{17}- AsCodeDegreeClassId: {16}{17}{19}", 
				this.CoCrsRsltRaiseId,
				this.AsFacultyInfoId,
				this.EdCourseId,
				(this.EdCodeCourseAssessId == null) ? string.Empty : this.EdCodeCourseAssessId.ToString(),
				this.EdAcadYearId,
				this.EdCodeSemesterId,
				this.DcsonDate,
				this.DcsonNo,
				(this.RaiseMark == null) ? string.Empty : this.RaiseMark.ToString(),
				(this.RaisePrcnt == null) ? string.Empty : this.RaisePrcnt.ToString(),
				(this.StdMrkFrom == null) ? string.Empty : this.StdMrkFrom.ToString(),
				(this.StdMrkTo == null) ? string.Empty : this.StdMrkTo.ToString(),
				(this.Note == null) ? string.Empty : this.Note.ToString(),
				this.SeUserId,
				this.LastDate,
				(this.EntPolicyAssessHdrId == null) ? string.Empty : this.EntPolicyAssessHdrId.ToString(),
				(this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'CO_CRS_RSLT_RAISE' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CoCrsRsltRaiseEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// CO_CRS_RSLT_RAISE_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "CO_CRS_RSLT_RAISE"</remarks>
		public System.Decimal CoCrsRsltRaiseId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalCoCrsRsltRaiseId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal		  AsFacultyInfoId = 0.0m;
		
		/// <summary>
		/// ED_COURSE_ID : 
		/// </summary>
		public System.Decimal		  EdCourseId = 0.0m;
		
		/// <summary>
		/// ED_CODE_COURSE_ASSESS_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeCourseAssessId = null;
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : مسلسل الفصل الدراسي
		/// </summary>
		public System.Decimal		  EdCodeSemesterId = 0.0m;
		
		/// <summary>
		/// DCSON_DATE : تاريخ لرفع درجات طالب راسب
		/// </summary>
		public System.DateTime		  DcsonDate = DateTime.MinValue;
		
		/// <summary>
		/// DCSON_NO : رقم القرار
		/// </summary>
		public System.String		  DcsonNo = string.Empty;
		
		/// <summary>
		/// RAISE_MARK : الدرجة المرفوعه
		/// </summary>
		public System.Decimal?		  RaiseMark = null;
		
		/// <summary>
		/// RAISE_PRCNT : النسبة المرفوعه
		/// </summary>
		public System.Decimal?		  RaisePrcnt = null;
		
		/// <summary>
		/// STD_MRK_FROM : 
		/// </summary>
		public System.Decimal?		  StdMrkFrom = null;
		
		/// <summary>
		/// STD_MRK_TO : 
		/// </summary>
		public System.Decimal?		  StdMrkTo = null;
		
		/// <summary>
		/// NOTE : ملاحظات
		/// </summary>
		public System.String		  Note = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal		  SeUserId = 0.0m;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime		  LastDate = DateTime.MinValue;
		
		/// <summary>
		/// ENT_POLICY_ASSESS_HDR_ID : 
		/// </summary>
		public System.Decimal?		  EntPolicyAssessHdrId = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_CLASS_ID : 
		/// </summary>
		public System.Decimal?		  AsCodeDegreeClassId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCodeCourseAssess _edCodeCourseAssessIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseAssess"/>.
		/// </summary>
		/// <value>The source EdCodeCourseAssess for EdCodeCourseAssessId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeCourseAssess EdCodeCourseAssessIdSource
      	{
            get { return this._edCodeCourseAssessIdSource; }
            set { this._edCodeCourseAssessIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private EdCourse _edCourseIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return this._edCourseIdSource; }
            set { this._edCourseIdSource = value; }
      	}
		private EntPolicyAssessHdr _entPolicyAssessHdrIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntPolicyAssessHdr"/>.
		/// </summary>
		/// <value>The source EntPolicyAssessHdr for EntPolicyAssessHdrId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntPolicyAssessHdr EntPolicyAssessHdrIdSource
      	{
            get { return this._entPolicyAssessHdrIdSource; }
            set { this._entPolicyAssessHdrIdSource = value; }
      	}
		private SeUser _seUserIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeUser SeUserIdSource
      	{
            get { return this._seUserIdSource; }
            set { this._seUserIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CoCrsRsltRaiseEntityData _tmp = new CoCrsRsltRaiseEntityData();
						
			_tmp.CoCrsRsltRaiseId = this.CoCrsRsltRaiseId;
			_tmp.OriginalCoCrsRsltRaiseId = this.OriginalCoCrsRsltRaiseId;
			
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.EdCodeCourseAssessId = this.EdCodeCourseAssessId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.DcsonDate = this.DcsonDate;
			_tmp.DcsonNo = this.DcsonNo;
			_tmp.RaiseMark = this.RaiseMark;
			_tmp.RaisePrcnt = this.RaisePrcnt;
			_tmp.StdMrkFrom = this.StdMrkFrom;
			_tmp.StdMrkTo = this.StdMrkTo;
			_tmp.Note = this.Note;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.EntPolicyAssessHdrId = this.EntPolicyAssessHdrId;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCodeCourseAssessIdSource != null)
				_tmp.EdCodeCourseAssessIdSource = MakeCopyOf(this.EdCodeCourseAssessIdSource) as EdCodeCourseAssess;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.EdCourseIdSource != null)
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource) as EdCourse;
			if (this.EntPolicyAssessHdrIdSource != null)
				_tmp.EntPolicyAssessHdrIdSource = MakeCopyOf(this.EntPolicyAssessHdrIdSource) as EntPolicyAssessHdr;
			if (this.SeUserIdSource != null)
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource) as SeUser;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			CoCrsRsltRaiseEntityData _tmp = new CoCrsRsltRaiseEntityData();
						
			_tmp.CoCrsRsltRaiseId = this.CoCrsRsltRaiseId;
			_tmp.OriginalCoCrsRsltRaiseId = this.OriginalCoCrsRsltRaiseId;
			
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.EdCodeCourseAssessId = this.EdCodeCourseAssessId;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.DcsonDate = this.DcsonDate;
			_tmp.DcsonNo = this.DcsonNo;
			_tmp.RaiseMark = this.RaiseMark;
			_tmp.RaisePrcnt = this.RaisePrcnt;
			_tmp.StdMrkFrom = this.StdMrkFrom;
			_tmp.StdMrkTo = this.StdMrkTo;
			_tmp.Note = this.Note;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.EntPolicyAssessHdrId = this.EntPolicyAssessHdrId;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeCourseAssessIdSource != null && existingCopies.Contains(this.EdCodeCourseAssessIdSource))
				_tmp.EdCodeCourseAssessIdSource = existingCopies[this.EdCodeCourseAssessIdSource] as EdCodeCourseAssess;
			else
				_tmp.EdCodeCourseAssessIdSource = MakeCopyOf(this.EdCodeCourseAssessIdSource, existingCopies) as EdCodeCourseAssess;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				_tmp.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EntPolicyAssessHdrIdSource != null && existingCopies.Contains(this.EntPolicyAssessHdrIdSource))
				_tmp.EntPolicyAssessHdrIdSource = existingCopies[this.EntPolicyAssessHdrIdSource] as EntPolicyAssessHdr;
			else
				_tmp.EntPolicyAssessHdrIdSource = MakeCopyOf(this.EntPolicyAssessHdrIdSource, existingCopies) as EntPolicyAssessHdr;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				_tmp.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CoCrsRsltRaiseColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(CoCrsRsltRaiseColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CoCrsRsltRaiseColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(CoCrsRsltRaiseColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CoCrsRsltRaiseColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(CoCrsRsltRaiseColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				CoCrsRsltRaiseEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CoCrsRsltRaiseEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CoCrsRsltRaiseColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(CoCrsRsltRaiseColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CoCrsRsltRaiseEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CoCrsRsltRaiseEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CoCrsRsltRaiseEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="CoCrsRsltRaise"/> object.
	/// </remarks>
	public class CoCrsRsltRaiseEventArgs : System.EventArgs
	{
		private CoCrsRsltRaiseColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CoCrsRsltRaiseEventArgs class.
		///</summary>
		public CoCrsRsltRaiseEventArgs(CoCrsRsltRaiseColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CoCrsRsltRaiseEventArgs class.
		///</summary>
		public CoCrsRsltRaiseEventArgs(CoCrsRsltRaiseColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CoCrsRsltRaiseColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CoCrsRsltRaiseColumn" />
		public CoCrsRsltRaiseColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all CoCrsRsltRaise related events.
	///</summary>
	public delegate void CoCrsRsltRaiseEventHandler(object sender, CoCrsRsltRaiseEventArgs e);
	
	#region CoCrsRsltRaiseComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CoCrsRsltRaiseComparer : System.Collections.Generic.IComparer<CoCrsRsltRaise>
	{
		CoCrsRsltRaiseColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CoCrsRsltRaiseComparer"/> class.
        /// </summary>
		public CoCrsRsltRaiseComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CoCrsRsltRaiseComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CoCrsRsltRaiseComparer(CoCrsRsltRaiseColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="CoCrsRsltRaise"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="CoCrsRsltRaise"/> to compare.</param>
        /// <param name="b">The second <c>CoCrsRsltRaise</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(CoCrsRsltRaise a, CoCrsRsltRaise b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(CoCrsRsltRaise entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(CoCrsRsltRaise a, CoCrsRsltRaise b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CoCrsRsltRaiseColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CoCrsRsltRaiseKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="CoCrsRsltRaise"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CoCrsRsltRaiseKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CoCrsRsltRaiseKey class.
		/// </summary>
		public CoCrsRsltRaiseKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CoCrsRsltRaiseKey class.
		/// </summary>
		public CoCrsRsltRaiseKey(CoCrsRsltRaiseBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.CoCrsRsltRaiseId = entity.CoCrsRsltRaiseId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CoCrsRsltRaiseKey class.
		/// </summary>
		public CoCrsRsltRaiseKey(System.Decimal _coCrsRsltRaiseId)
		{
			#region Init Properties

			this.CoCrsRsltRaiseId = _coCrsRsltRaiseId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CoCrsRsltRaiseBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CoCrsRsltRaiseBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the CoCrsRsltRaiseId property
		private System.Decimal _coCrsRsltRaiseId;
		
		/// <summary>
		/// Gets or sets the CoCrsRsltRaiseId property.
		/// </summary>
		public System.Decimal CoCrsRsltRaiseId
		{
			get { return _coCrsRsltRaiseId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.CoCrsRsltRaiseId = value;
				
				_coCrsRsltRaiseId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				CoCrsRsltRaiseId = ( values["CoCrsRsltRaiseId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["CoCrsRsltRaiseId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("CoCrsRsltRaiseId", CoCrsRsltRaiseId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("CoCrsRsltRaiseId: {0}{1}",
								CoCrsRsltRaiseId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CoCrsRsltRaiseColumn Enum
	
	/// <summary>
	/// Enumerate the CoCrsRsltRaise columns.
	/// </summary>
	[Serializable]
	public enum CoCrsRsltRaiseColumn : int
	{
		/// <summary>
		/// CoCrsRsltRaiseId : 
		/// </summary>
		[EnumTextValue("CO_CRS_RSLT_RAISE_ID")]
		[ColumnEnum("CO_CRS_RSLT_RAISE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		CoCrsRsltRaiseId = 1,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsFacultyInfoId = 2,
		/// <summary>
		/// EdCourseId : 
		/// </summary>
		[EnumTextValue("ED_COURSE_ID")]
		[ColumnEnum("ED_COURSE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCourseId = 3,
		/// <summary>
		/// EdCodeCourseAssessId : 
		/// </summary>
		[EnumTextValue("ED_CODE_COURSE_ASSESS_ID")]
		[ColumnEnum("ED_CODE_COURSE_ASSESS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeCourseAssessId = 4,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 5,
		/// <summary>
		/// EdCodeSemesterId : مسلسل الفصل الدراسي
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeSemesterId = 6,
		/// <summary>
		/// DcsonDate : تاريخ لرفع درجات طالب راسب
		/// </summary>
		[EnumTextValue("DCSON_DATE")]
		[ColumnEnum("DCSON_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		DcsonDate = 7,
		/// <summary>
		/// DcsonNo : رقم القرار
		/// </summary>
		[EnumTextValue("DCSON_NO")]
		[ColumnEnum("DCSON_NO", typeof(System.String), System.Data.DbType.String, false, false, false, 20)]
		DcsonNo = 8,
		/// <summary>
		/// RaiseMark : الدرجة المرفوعه
		/// </summary>
		[EnumTextValue("RAISE_MARK")]
		[ColumnEnum("RAISE_MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RaiseMark = 9,
		/// <summary>
		/// RaisePrcnt : النسبة المرفوعه
		/// </summary>
		[EnumTextValue("RAISE_PRCNT")]
		[ColumnEnum("RAISE_PRCNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RaisePrcnt = 10,
		/// <summary>
		/// StdMrkFrom : 
		/// </summary>
		[EnumTextValue("STD_MRK_FROM")]
		[ColumnEnum("STD_MRK_FROM", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		StdMrkFrom = 11,
		/// <summary>
		/// StdMrkTo : 
		/// </summary>
		[EnumTextValue("STD_MRK_TO")]
		[ColumnEnum("STD_MRK_TO", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		StdMrkTo = 12,
		/// <summary>
		/// Note : ملاحظات
		/// </summary>
		[EnumTextValue("NOTE")]
		[ColumnEnum("NOTE", typeof(System.String), System.Data.DbType.String, false, false, true, 240)]
		Note = 13,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SeUserId = 14,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		LastDate = 15,
		/// <summary>
		/// EntPolicyAssessHdrId : 
		/// </summary>
		[EnumTextValue("ENT_POLICY_ASSESS_HDR_ID")]
		[ColumnEnum("ENT_POLICY_ASSESS_HDR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntPolicyAssessHdrId = 16,
		/// <summary>
		/// AsCodeDegreeClassId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_CLASS_ID")]
		[ColumnEnum("AS_CODE_DEGREE_CLASS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeClassId = 17
	}//End enum

	#endregion CoCrsRsltRaiseColumn Enum

} // end namespace
