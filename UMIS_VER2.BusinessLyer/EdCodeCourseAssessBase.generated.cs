
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdCodeCourseAssess.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_CODE_COURSE_ASSESS' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdCodeCourseAssessBase : EntityBase, IEdCodeCourseAssess, IEntityId<EdCodeCourseAssessKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdCodeCourseAssessEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdCodeCourseAssessEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdCodeCourseAssessEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdCodeCourseAssess> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdCodeCourseAssessEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdCodeCourseAssessEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdCodeCourseAssessBase"/> instance.
		///</summary>
		public EdCodeCourseAssessBase()
		{
			this.entityData = new EdCodeCourseAssessEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdCodeCourseAssessBase"/> instance.
		///</summary>
		///<param name="_edCodeCourseAssessId"></param>
		///<param name="_descrAr"></param>
		///<param name="_descrEn"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_controlFlag"></param>
		///<param name="_semWorkFlg"></param>
		///<param name="_assessOrder"></param>
		///<param name="_examPayPercent">اجمالى نسبة المدفوع من الطالب مصروفات دراسية</param>
		///<param name="_moodleFlg">Show in screen only if sysparam MOODLE_INTEG=1
		/// 		/// for each assess , onle one flag=1 :
		/// 		/// - Fina Exam (Control Flag)
		/// 		/// -Sem Work Flag
		/// 		/// -Moodle Flag</param>
		///<param name="_enumId"></param>
		///<param name="_postponeFlg"></param>
		public EdCodeCourseAssessBase(System.Decimal _edCodeCourseAssessId, System.String _descrAr, 
			System.String _descrEn, System.Decimal? _asFacultyInfoId, System.Decimal _controlFlag, 
			System.Decimal? _semWorkFlg, System.Decimal? _assessOrder, System.Decimal? _examPayPercent, 
			System.Boolean? _moodleFlg, System.Int32? _enumId, System.Boolean? _postponeFlg)
		{
			this.entityData = new EdCodeCourseAssessEntityData();
			this.backupData = null;

			this.EdCodeCourseAssessId = _edCodeCourseAssessId;
			this.DescrAr = _descrAr;
			this.DescrEn = _descrEn;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.ControlFlag = _controlFlag;
			this.SemWorkFlg = _semWorkFlg;
			this.AssessOrder = _assessOrder;
			this.ExamPayPercent = _examPayPercent;
			this.MoodleFlg = _moodleFlg;
			this.EnumId = _enumId;
			this.PostponeFlg = _postponeFlg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdCodeCourseAssess"/> instance.
		///</summary>
		///<param name="_edCodeCourseAssessId"></param>
		///<param name="_descrAr"></param>
		///<param name="_descrEn"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_controlFlag"></param>
		///<param name="_semWorkFlg"></param>
		///<param name="_assessOrder"></param>
		///<param name="_examPayPercent">اجمالى نسبة المدفوع من الطالب مصروفات دراسية</param>
		///<param name="_moodleFlg">Show in screen only if sysparam MOODLE_INTEG=1
		/// 		/// for each assess , onle one flag=1 :
		/// 		/// - Fina Exam (Control Flag)
		/// 		/// -Sem Work Flag
		/// 		/// -Moodle Flag</param>
		///<param name="_enumId"></param>
		///<param name="_postponeFlg"></param>
		public static EdCodeCourseAssess CreateEdCodeCourseAssess(System.Decimal _edCodeCourseAssessId, System.String _descrAr, 
			System.String _descrEn, System.Decimal? _asFacultyInfoId, System.Decimal _controlFlag, 
			System.Decimal? _semWorkFlg, System.Decimal? _assessOrder, System.Decimal? _examPayPercent, 
			System.Boolean? _moodleFlg, System.Int32? _enumId, System.Boolean? _postponeFlg)
		{
			EdCodeCourseAssess newEdCodeCourseAssess = new EdCodeCourseAssess();
			newEdCodeCourseAssess.EdCodeCourseAssessId = _edCodeCourseAssessId;
			newEdCodeCourseAssess.DescrAr = _descrAr;
			newEdCodeCourseAssess.DescrEn = _descrEn;
			newEdCodeCourseAssess.AsFacultyInfoId = _asFacultyInfoId;
			newEdCodeCourseAssess.ControlFlag = _controlFlag;
			newEdCodeCourseAssess.SemWorkFlg = _semWorkFlg;
			newEdCodeCourseAssess.AssessOrder = _assessOrder;
			newEdCodeCourseAssess.ExamPayPercent = _examPayPercent;
			newEdCodeCourseAssess.MoodleFlg = _moodleFlg;
			newEdCodeCourseAssess.EnumId = _enumId;
			newEdCodeCourseAssess.PostponeFlg = _postponeFlg;
			return newEdCodeCourseAssess;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdCodeCourseAssessId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdCodeCourseAssessId
		{
			get
			{
				return this.entityData.EdCodeCourseAssessId; 
			}
			
			set
			{
				if (this.entityData.EdCodeCourseAssessId == value)
					return;
					
				OnColumnChanging(EdCodeCourseAssessColumn.EdCodeCourseAssessId, this.entityData.EdCodeCourseAssessId);
				this.entityData.EdCodeCourseAssessId = value;
				this.EntityId.EdCodeCourseAssessId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeCourseAssessColumn.EdCodeCourseAssessId, this.entityData.EdCodeCourseAssessId);
				OnPropertyChanged("EdCodeCourseAssessId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_CODE_COURSE_ASSESS_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ED_CODE_COURSE_ASSESS_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdCodeCourseAssessId
		{
			get { return this.entityData.OriginalEdCodeCourseAssessId; }
			set { this.entityData.OriginalEdCodeCourseAssessId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the DescrAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String DescrAr
		{
			get
			{
				return this.entityData.DescrAr; 
			}
			
			set
			{
				if (this.entityData.DescrAr == value)
					return;
					
				OnColumnChanging(EdCodeCourseAssessColumn.DescrAr, this.entityData.DescrAr);
				this.entityData.DescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeCourseAssessColumn.DescrAr, this.entityData.DescrAr);
				OnPropertyChanged("DescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String DescrEn
		{
			get
			{
				return this.entityData.DescrEn; 
			}
			
			set
			{
				if (this.entityData.DescrEn == value)
					return;
					
				OnColumnChanging(EdCodeCourseAssessColumn.DescrEn, this.entityData.DescrEn);
				this.entityData.DescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeCourseAssessColumn.DescrEn, this.entityData.DescrEn);
				OnPropertyChanged("DescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(EdCodeCourseAssessColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeCourseAssessColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ControlFlag property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ControlFlag
		{
			get
			{
				return this.entityData.ControlFlag; 
			}
			
			set
			{
				if (this.entityData.ControlFlag == value)
					return;
					
				OnColumnChanging(EdCodeCourseAssessColumn.ControlFlag, this.entityData.ControlFlag);
				this.entityData.ControlFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeCourseAssessColumn.ControlFlag, this.entityData.ControlFlag);
				OnPropertyChanged("ControlFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SemWorkFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSemWorkFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SemWorkFlg
		{
			get
			{
				return this.entityData.SemWorkFlg; 
			}
			
			set
			{
				if (this.entityData.SemWorkFlg == value)
					return;
					
				OnColumnChanging(EdCodeCourseAssessColumn.SemWorkFlg, this.entityData.SemWorkFlg);
				this.entityData.SemWorkFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeCourseAssessColumn.SemWorkFlg, this.entityData.SemWorkFlg);
				OnPropertyChanged("SemWorkFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AssessOrder property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAssessOrderNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AssessOrder
		{
			get
			{
				return this.entityData.AssessOrder; 
			}
			
			set
			{
				if (this.entityData.AssessOrder == value)
					return;
					
				OnColumnChanging(EdCodeCourseAssessColumn.AssessOrder, this.entityData.AssessOrder);
				this.entityData.AssessOrder = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeCourseAssessColumn.AssessOrder, this.entityData.AssessOrder);
				OnPropertyChanged("AssessOrder");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExamPayPercent property. 
		///		اجمالى نسبة المدفوع من الطالب مصروفات دراسية
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsExamPayPercentNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"اجمالى نسبة المدفوع من الطالب مصروفات دراسية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ExamPayPercent
		{
			get
			{
				return this.entityData.ExamPayPercent; 
			}
			
			set
			{
				if (this.entityData.ExamPayPercent == value)
					return;
					
				OnColumnChanging(EdCodeCourseAssessColumn.ExamPayPercent, this.entityData.ExamPayPercent);
				this.entityData.ExamPayPercent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeCourseAssessColumn.ExamPayPercent, this.entityData.ExamPayPercent);
				OnPropertyChanged("ExamPayPercent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MoodleFlg property. 
		///		Show in screen only if sysparam MOODLE_INTEG=1
		/// 		/// for each assess , onle one flag=1 :
		/// 		/// - Fina Exam (Control Flag)
		/// 		/// -Sem Work Flag
		/// 		/// -Moodle Flag
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsMoodleFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Show in screen only if sysparam MOODLE_INTEG=1 for each assess , onle one flag=1 : - Fina Exam (Control Flag) -Sem Work Flag -Moodle Flag"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? MoodleFlg
		{
			get
			{
				return this.entityData.MoodleFlg; 
			}
			
			set
			{
				if (this.entityData.MoodleFlg == value)
					return;
					
				OnColumnChanging(EdCodeCourseAssessColumn.MoodleFlg, this.entityData.MoodleFlg);
				this.entityData.MoodleFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeCourseAssessColumn.MoodleFlg, this.entityData.MoodleFlg);
				OnPropertyChanged("MoodleFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EnumId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsEnumIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? EnumId
		{
			get
			{
				return this.entityData.EnumId; 
			}
			
			set
			{
				if (this.entityData.EnumId == value)
					return;
					
				OnColumnChanging(EdCodeCourseAssessColumn.EnumId, this.entityData.EnumId);
				this.entityData.EnumId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeCourseAssessColumn.EnumId, this.entityData.EnumId);
				OnPropertyChanged("EnumId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PostponeFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsPostponeFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? PostponeFlg
		{
			get
			{
				return this.entityData.PostponeFlg; 
			}
			
			set
			{
				if (this.entityData.PostponeFlg == value)
					return;
					
				OnColumnChanging(EdCodeCourseAssessColumn.PostponeFlg, this.entityData.PostponeFlg);
				this.entityData.PostponeFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCodeCourseAssessColumn.PostponeFlg, this.entityData.PostponeFlg);
				OnPropertyChanged("PostponeFlg");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EntPolicyAssessDtl objects
		///	which are related to this object through the relation FK_ENT_POLICY_ASSESS_DTL_ED_CODE_COURSE_ASSESS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolicyAssessDtl> EntPolicyAssessDtlCollection
		{
			get { return entityData.EntPolicyAssessDtlCollection; }
			set { entityData.EntPolicyAssessDtlCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStdCrsExamAssess objects
		///	which are related to this object through the relation FK_ED_STD_CRS_EXAM_ASSESS_ED_CODE_COURSE_ASSESS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStdCrsExamAssess> EdStdCrsExamAssessCollection
		{
			get { return entityData.EdStdCrsExamAssessCollection; }
			set { entityData.EdStdCrsExamAssessCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudCourseRegAssessSub objects
		///	which are related to this object through the relation FK_ED_STUD_COURSE_REG_ASSESS_SUB_ED_CODE_COURSE_ASSESS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCourseRegAssessSub> EdStudCourseRegAssessSubCollection
		{
			get { return entityData.EdStudCourseRegAssessSubCollection; }
			set { entityData.EdStudCourseRegAssessSubCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CoCrsRsltRaise objects
		///	which are related to this object through the relation FK_CO_CRS_RSLT_RAISE_ED_CODE_COURSE_ASSESS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoCrsRsltRaise> CoCrsRsltRaiseCollection
		{
			get { return entityData.CoCrsRsltRaiseCollection; }
			set { entityData.CoCrsRsltRaiseCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPolicyAssessGrpDtl objects
		///	which are related to this object through the relation FK_ENT_POLICY_ASSESS_GRP_DTL_ED_CODE_COURSE_ASSESS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolicyAssessGrpDtl> EntPolicyAssessGrpDtlCollection
		{
			get { return entityData.EntPolicyAssessGrpDtlCollection; }
			set { entityData.EntPolicyAssessGrpDtlCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudCourseRegAssess objects
		///	which are related to this object through the relation FK_ED_STUD_STATE_COURSE_ASSESS_ED_CODE_COURSE_ASSESS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCourseRegAssess> EdStudCourseRegAssessCollection
		{
			get { return entityData.EdStudCourseRegAssessCollection; }
			set { entityData.EdStudCourseRegAssessCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdExamSchdl objects
		///	which are related to this object through the relation FK_ED_EXAM_ED_CODE_COURSE_ASSESS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdExamSchdl> EdExamSchdlCollection
		{
			get { return entityData.EdExamSchdlCollection; }
			set { entityData.EdExamSchdlCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SeUserCrsAssess objects
		///	which are related to this object through the relation FK_SE_USER_CRS_ASSESS_ED_CODE_COURSE_ASSESS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SeUserCrsAssess> SeUserCrsAssessCollection
		{
			get { return entityData.SeUserCrsAssessCollection; }
			set { entityData.SeUserCrsAssessCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPolcyGrdngHdr objects
		///	which are related to this object through the relation FK_ENT_POLCY_GRDNG_HDR_ED_CODE_COURSE_ASSESS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolcyGrdngHdr> EntPolcyGrdngHdrCollection
		{
			get { return entityData.EntPolcyGrdngHdrCollection; }
			set { entityData.EntPolcyGrdngHdrCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DescrAr", "Descr Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrAr", "Descr Ar", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrEn", "Descr En", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_CODE_COURSE_ASSESS"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_CODE_COURSE_ASSESS_ID", "DESCR_AR", "DESCR_EN", "AS_FACULTY_INFO_ID", "CONTROL_FLAG", "SEM_WORK_FLG", "ASSESS_ORDER", "EXAM_PAY_PERCENT", "MOODLE_FLG", "ENUM_ID", "POSTPONE_FLG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdCodeCourseAssessEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdCodeCourseAssess) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdCodeCourseAssess>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdCodeCourseAssess);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdCodeCourseAssess Entity 
		///</summary>
		protected virtual EdCodeCourseAssess Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdCodeCourseAssess copy = new EdCodeCourseAssess();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdCodeCourseAssessId = this.EdCodeCourseAssessId;
					copy.OriginalEdCodeCourseAssessId = this.OriginalEdCodeCourseAssessId;
				copy.DescrAr = this.DescrAr;
				copy.DescrEn = this.DescrEn;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.ControlFlag = this.ControlFlag;
				copy.SemWorkFlg = this.SemWorkFlg;
				copy.AssessOrder = this.AssessOrder;
				copy.ExamPayPercent = this.ExamPayPercent;
				copy.MoodleFlg = this.MoodleFlg;
				copy.EnumId = this.EnumId;
				copy.PostponeFlg = this.PostponeFlg;
			
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
		
			//deep copy nested objects
			copy.EntPolicyAssessDtlCollection = (TList<EntPolicyAssessDtl>) MakeCopyOf(this.EntPolicyAssessDtlCollection, existingCopies); 
			copy.EdStdCrsExamAssessCollection = (TList<EdStdCrsExamAssess>) MakeCopyOf(this.EdStdCrsExamAssessCollection, existingCopies); 
			copy.EdStudCourseRegAssessSubCollection = (TList<EdStudCourseRegAssessSub>) MakeCopyOf(this.EdStudCourseRegAssessSubCollection, existingCopies); 
			copy.CoCrsRsltRaiseCollection = (TList<CoCrsRsltRaise>) MakeCopyOf(this.CoCrsRsltRaiseCollection, existingCopies); 
			copy.EntPolicyAssessGrpDtlCollection = (TList<EntPolicyAssessGrpDtl>) MakeCopyOf(this.EntPolicyAssessGrpDtlCollection, existingCopies); 
			copy.EdStudCourseRegAssessCollection = (TList<EdStudCourseRegAssess>) MakeCopyOf(this.EdStudCourseRegAssessCollection, existingCopies); 
			copy.EdExamSchdlCollection = (TList<EdExamSchdl>) MakeCopyOf(this.EdExamSchdlCollection, existingCopies); 
			copy.SeUserCrsAssessCollection = (TList<SeUserCrsAssess>) MakeCopyOf(this.SeUserCrsAssessCollection, existingCopies); 
			copy.EntPolcyGrdngHdrCollection = (TList<EntPolcyGrdngHdr>) MakeCopyOf(this.EntPolcyGrdngHdrCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdCodeCourseAssess Entity 
		///</summary>
		public virtual EdCodeCourseAssess Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdCodeCourseAssess Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdCodeCourseAssess DeepCopy()
		{
			return EntityHelper.Clone<EdCodeCourseAssess>(this as EdCodeCourseAssess);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdCodeCourseAssessEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdCodeCourseAssessEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdCodeCourseAssessEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdCodeCourseAssessColumn column)
		{
			switch(column)
			{
					case EdCodeCourseAssessColumn.EdCodeCourseAssessId:
					return entityData.EdCodeCourseAssessId != _originalData.EdCodeCourseAssessId;
					case EdCodeCourseAssessColumn.DescrAr:
					return entityData.DescrAr != _originalData.DescrAr;
					case EdCodeCourseAssessColumn.DescrEn:
					return entityData.DescrEn != _originalData.DescrEn;
					case EdCodeCourseAssessColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case EdCodeCourseAssessColumn.ControlFlag:
					return entityData.ControlFlag != _originalData.ControlFlag;
					case EdCodeCourseAssessColumn.SemWorkFlg:
					return entityData.SemWorkFlg != _originalData.SemWorkFlg;
					case EdCodeCourseAssessColumn.AssessOrder:
					return entityData.AssessOrder != _originalData.AssessOrder;
					case EdCodeCourseAssessColumn.ExamPayPercent:
					return entityData.ExamPayPercent != _originalData.ExamPayPercent;
					case EdCodeCourseAssessColumn.MoodleFlg:
					return entityData.MoodleFlg != _originalData.MoodleFlg;
					case EdCodeCourseAssessColumn.EnumId:
					return entityData.EnumId != _originalData.EnumId;
					case EdCodeCourseAssessColumn.PostponeFlg:
					return entityData.PostponeFlg != _originalData.PostponeFlg;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdCodeCourseAssessColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdCodeCourseAssessId != _originalData.EdCodeCourseAssessId;
			result = result || entityData.DescrAr != _originalData.DescrAr;
			result = result || entityData.DescrEn != _originalData.DescrEn;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.ControlFlag != _originalData.ControlFlag;
			result = result || entityData.SemWorkFlg != _originalData.SemWorkFlg;
			result = result || entityData.AssessOrder != _originalData.AssessOrder;
			result = result || entityData.ExamPayPercent != _originalData.ExamPayPercent;
			result = result || entityData.MoodleFlg != _originalData.MoodleFlg;
			result = result || entityData.EnumId != _originalData.EnumId;
			result = result || entityData.PostponeFlg != _originalData.PostponeFlg;
			return result;
		}	
		
		///<summary>
		///  Returns a EdCodeCourseAssess Entity with the original data.
		///</summary>
		public EdCodeCourseAssess GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdCodeCourseAssess(
				_originalData.EdCodeCourseAssessId,
				_originalData.DescrAr,
				_originalData.DescrEn,
				_originalData.AsFacultyInfoId,
				_originalData.ControlFlag,
				_originalData.SemWorkFlg,
				_originalData.AssessOrder,
				_originalData.ExamPayPercent,
				_originalData.MoodleFlg,
				_originalData.EnumId,
				_originalData.PostponeFlg
				);
				
			return (EdCodeCourseAssess)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdCodeCourseAssessBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdCodeCourseAssessBase)
				return ValueEquals(this, (EdCodeCourseAssessBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdCodeCourseAssessBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdCodeCourseAssessId.GetHashCode() ^ 
					this.DescrAr.GetHashCode() ^ 
					((this.DescrEn == null) ? string.Empty : this.DescrEn.ToString()).GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					this.ControlFlag.GetHashCode() ^ 
					((this.SemWorkFlg == null) ? string.Empty : this.SemWorkFlg.ToString()).GetHashCode() ^ 
					((this.AssessOrder == null) ? string.Empty : this.AssessOrder.ToString()).GetHashCode() ^ 
					((this.ExamPayPercent == null) ? string.Empty : this.ExamPayPercent.ToString()).GetHashCode() ^ 
					((this.MoodleFlg == null) ? string.Empty : this.MoodleFlg.ToString()).GetHashCode() ^ 
					((this.EnumId == null) ? string.Empty : this.EnumId.ToString()).GetHashCode() ^ 
					((this.PostponeFlg == null) ? string.Empty : this.PostponeFlg.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdCodeCourseAssessBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdCodeCourseAssessBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdCodeCourseAssessBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdCodeCourseAssessBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdCodeCourseAssessBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdCodeCourseAssessBase Object1, EdCodeCourseAssessBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdCodeCourseAssessId != Object2.EdCodeCourseAssessId)
				equal = false;
			if (Object1.DescrAr != Object2.DescrAr)
				equal = false;
			if ( Object1.DescrEn != null && Object2.DescrEn != null )
			{
				if (Object1.DescrEn != Object2.DescrEn)
					equal = false;
			}
			else if (Object1.DescrEn == null ^ Object2.DescrEn == null )
			{
				equal = false;
			}
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if (Object1.ControlFlag != Object2.ControlFlag)
				equal = false;
			if ( Object1.SemWorkFlg != null && Object2.SemWorkFlg != null )
			{
				if (Object1.SemWorkFlg != Object2.SemWorkFlg)
					equal = false;
			}
			else if (Object1.SemWorkFlg == null ^ Object2.SemWorkFlg == null )
			{
				equal = false;
			}
			if ( Object1.AssessOrder != null && Object2.AssessOrder != null )
			{
				if (Object1.AssessOrder != Object2.AssessOrder)
					equal = false;
			}
			else if (Object1.AssessOrder == null ^ Object2.AssessOrder == null )
			{
				equal = false;
			}
			if ( Object1.ExamPayPercent != null && Object2.ExamPayPercent != null )
			{
				if (Object1.ExamPayPercent != Object2.ExamPayPercent)
					equal = false;
			}
			else if (Object1.ExamPayPercent == null ^ Object2.ExamPayPercent == null )
			{
				equal = false;
			}
			if ( Object1.MoodleFlg != null && Object2.MoodleFlg != null )
			{
				if (Object1.MoodleFlg != Object2.MoodleFlg)
					equal = false;
			}
			else if (Object1.MoodleFlg == null ^ Object2.MoodleFlg == null )
			{
				equal = false;
			}
			if ( Object1.EnumId != null && Object2.EnumId != null )
			{
				if (Object1.EnumId != Object2.EnumId)
					equal = false;
			}
			else if (Object1.EnumId == null ^ Object2.EnumId == null )
			{
				equal = false;
			}
			if ( Object1.PostponeFlg != null && Object2.PostponeFlg != null )
			{
				if (Object1.PostponeFlg != Object2.PostponeFlg)
					equal = false;
			}
			else if (Object1.PostponeFlg == null ^ Object2.PostponeFlg == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdCodeCourseAssessBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdCodeCourseAssessComparer GetComparer()
        {
            return new EdCodeCourseAssessComparer();
        }
        */

        // Comparer delegates back to EdCodeCourseAssess
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdCodeCourseAssess rhs, EdCodeCourseAssessColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdCodeCourseAssessColumn.EdCodeCourseAssessId:
            		return this.EdCodeCourseAssessId.CompareTo(rhs.EdCodeCourseAssessId);
            		
            		                 
            	
            	
            	case EdCodeCourseAssessColumn.DescrAr:
            		return this.DescrAr.CompareTo(rhs.DescrAr);
            		
            		                 
            	
            	
            	case EdCodeCourseAssessColumn.DescrEn:
            		return this.DescrEn.CompareTo(rhs.DescrEn);
            		
            		                 
            	
            	
            	case EdCodeCourseAssessColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case EdCodeCourseAssessColumn.ControlFlag:
            		return this.ControlFlag.CompareTo(rhs.ControlFlag);
            		
            		                 
            	
            	
            	case EdCodeCourseAssessColumn.SemWorkFlg:
            		return this.SemWorkFlg.Value.CompareTo(rhs.SemWorkFlg.Value);
            		
            		                 
            	
            	
            	case EdCodeCourseAssessColumn.AssessOrder:
            		return this.AssessOrder.Value.CompareTo(rhs.AssessOrder.Value);
            		
            		                 
            	
            	
            	case EdCodeCourseAssessColumn.ExamPayPercent:
            		return this.ExamPayPercent.Value.CompareTo(rhs.ExamPayPercent.Value);
            		
            		                 
            	
            	
            	case EdCodeCourseAssessColumn.MoodleFlg:
            		return this.MoodleFlg.Value.CompareTo(rhs.MoodleFlg.Value);
            		
            		                 
            	
            	
            	case EdCodeCourseAssessColumn.EnumId:
            		return this.EnumId.Value.CompareTo(rhs.EnumId.Value);
            		
            		                 
            	
            	
            	case EdCodeCourseAssessColumn.PostponeFlg:
            		return this.PostponeFlg.Value.CompareTo(rhs.PostponeFlg.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdCodeCourseAssessKey> Members
		
		// member variable for the EntityId property
		private EdCodeCourseAssessKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdCodeCourseAssessKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdCodeCourseAssessKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdCodeCourseAssess")
					.Append("|").Append( this.EdCodeCourseAssessId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- EdCodeCourseAssessId: {0}{11}- DescrAr: {1}{11}- DescrEn: {2}{11}- AsFacultyInfoId: {3}{11}- ControlFlag: {4}{11}- SemWorkFlg: {5}{11}- AssessOrder: {6}{11}- ExamPayPercent: {7}{11}- MoodleFlg: {8}{11}- EnumId: {9}{11}- PostponeFlg: {10}{11}{13}", 
				this.EdCodeCourseAssessId,
				this.DescrAr,
				(this.DescrEn == null) ? string.Empty : this.DescrEn.ToString(),
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				this.ControlFlag,
				(this.SemWorkFlg == null) ? string.Empty : this.SemWorkFlg.ToString(),
				(this.AssessOrder == null) ? string.Empty : this.AssessOrder.ToString(),
				(this.ExamPayPercent == null) ? string.Empty : this.ExamPayPercent.ToString(),
				(this.MoodleFlg == null) ? string.Empty : this.MoodleFlg.ToString(),
				(this.EnumId == null) ? string.Empty : this.EnumId.ToString(),
				(this.PostponeFlg == null) ? string.Empty : this.PostponeFlg.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_CODE_COURSE_ASSESS' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdCodeCourseAssessEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_CODE_COURSE_ASSESS_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_CODE_COURSE_ASSESS"</remarks>
		public System.Decimal EdCodeCourseAssessId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdCodeCourseAssessId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// DESCR_AR : 
		/// </summary>
		public System.String		  DescrAr = string.Empty;
		
		/// <summary>
		/// DESCR_EN : 
		/// </summary>
		public System.String		  DescrEn = null;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// CONTROL_FLAG : 
		/// </summary>
		public System.Decimal		  ControlFlag = 0.0m;
		
		/// <summary>
		/// SEM_WORK_FLG : 
		/// </summary>
		public System.Decimal?		  SemWorkFlg = null;
		
		/// <summary>
		/// ASSESS_ORDER : 
		/// </summary>
		public System.Decimal?		  AssessOrder = null;
		
		/// <summary>
		/// EXAM_PAY_PERCENT : اجمالى نسبة المدفوع من الطالب مصروفات دراسية
		/// </summary>
		public System.Decimal?		  ExamPayPercent = null;
		
		/// <summary>
		/// MOODLE_FLG : Show in screen only if sysparam MOODLE_INTEG=1
		/// 		/// for each assess , onle one flag=1 :
		/// 		/// - Fina Exam (Control Flag)
		/// 		/// -Sem Work Flag
		/// 		/// -Moodle Flag
		/// </summary>
		public System.Boolean?		  MoodleFlg = null;
		
		/// <summary>
		/// ENUM_ID : 
		/// </summary>
		public System.Int32?		  EnumId = null;
		
		/// <summary>
		/// POSTPONE_FLG : 
		/// </summary>
		public System.Boolean?		  PostponeFlg = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EntPolicyAssessDtlCollection
		
		private TList<EntPolicyAssessDtl> _entPolicyAssessDtlEdCodeCourseAssessId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolicyAssessDtlEdCodeCourseAssessId
		/// </summary>
		
		public TList<EntPolicyAssessDtl> EntPolicyAssessDtlCollection
		{
			get
			{
				if (_entPolicyAssessDtlEdCodeCourseAssessId == null)
				{
				_entPolicyAssessDtlEdCodeCourseAssessId = new TList<EntPolicyAssessDtl>();
				}
	
				return _entPolicyAssessDtlEdCodeCourseAssessId;
			}
			set { _entPolicyAssessDtlEdCodeCourseAssessId = value; }
		}
		
		#endregion

		#region EdStdCrsExamAssessCollection
		
		private TList<EdStdCrsExamAssess> _edStdCrsExamAssessEdCodeCourseAssessId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStdCrsExamAssessEdCodeCourseAssessId
		/// </summary>
		
		public TList<EdStdCrsExamAssess> EdStdCrsExamAssessCollection
		{
			get
			{
				if (_edStdCrsExamAssessEdCodeCourseAssessId == null)
				{
				_edStdCrsExamAssessEdCodeCourseAssessId = new TList<EdStdCrsExamAssess>();
				}
	
				return _edStdCrsExamAssessEdCodeCourseAssessId;
			}
			set { _edStdCrsExamAssessEdCodeCourseAssessId = value; }
		}
		
		#endregion

		#region EdStudCourseRegAssessSubCollection
		
		private TList<EdStudCourseRegAssessSub> _edStudCourseRegAssessSubEdCodeCourseAssessId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCourseRegAssessSubEdCodeCourseAssessId
		/// </summary>
		
		public TList<EdStudCourseRegAssessSub> EdStudCourseRegAssessSubCollection
		{
			get
			{
				if (_edStudCourseRegAssessSubEdCodeCourseAssessId == null)
				{
				_edStudCourseRegAssessSubEdCodeCourseAssessId = new TList<EdStudCourseRegAssessSub>();
				}
	
				return _edStudCourseRegAssessSubEdCodeCourseAssessId;
			}
			set { _edStudCourseRegAssessSubEdCodeCourseAssessId = value; }
		}
		
		#endregion

		#region CoCrsRsltRaiseCollection
		
		private TList<CoCrsRsltRaise> _coCrsRsltRaiseEdCodeCourseAssessId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coCrsRsltRaiseEdCodeCourseAssessId
		/// </summary>
		
		public TList<CoCrsRsltRaise> CoCrsRsltRaiseCollection
		{
			get
			{
				if (_coCrsRsltRaiseEdCodeCourseAssessId == null)
				{
				_coCrsRsltRaiseEdCodeCourseAssessId = new TList<CoCrsRsltRaise>();
				}
	
				return _coCrsRsltRaiseEdCodeCourseAssessId;
			}
			set { _coCrsRsltRaiseEdCodeCourseAssessId = value; }
		}
		
		#endregion

		#region EntPolicyAssessGrpDtlCollection
		
		private TList<EntPolicyAssessGrpDtl> _entPolicyAssessGrpDtlEdCodeCourseAssessId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolicyAssessGrpDtlEdCodeCourseAssessId
		/// </summary>
		
		public TList<EntPolicyAssessGrpDtl> EntPolicyAssessGrpDtlCollection
		{
			get
			{
				if (_entPolicyAssessGrpDtlEdCodeCourseAssessId == null)
				{
				_entPolicyAssessGrpDtlEdCodeCourseAssessId = new TList<EntPolicyAssessGrpDtl>();
				}
	
				return _entPolicyAssessGrpDtlEdCodeCourseAssessId;
			}
			set { _entPolicyAssessGrpDtlEdCodeCourseAssessId = value; }
		}
		
		#endregion

		#region EdStudCourseRegAssessCollection
		
		private TList<EdStudCourseRegAssess> _edStudCourseRegAssessEdCodeCourseAssessId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCourseRegAssessEdCodeCourseAssessId
		/// </summary>
		
		public TList<EdStudCourseRegAssess> EdStudCourseRegAssessCollection
		{
			get
			{
				if (_edStudCourseRegAssessEdCodeCourseAssessId == null)
				{
				_edStudCourseRegAssessEdCodeCourseAssessId = new TList<EdStudCourseRegAssess>();
				}
	
				return _edStudCourseRegAssessEdCodeCourseAssessId;
			}
			set { _edStudCourseRegAssessEdCodeCourseAssessId = value; }
		}
		
		#endregion

		#region EdExamSchdlCollection
		
		private TList<EdExamSchdl> _edExamSchdlEdCodeCourseAssessId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edExamSchdlEdCodeCourseAssessId
		/// </summary>
		
		public TList<EdExamSchdl> EdExamSchdlCollection
		{
			get
			{
				if (_edExamSchdlEdCodeCourseAssessId == null)
				{
				_edExamSchdlEdCodeCourseAssessId = new TList<EdExamSchdl>();
				}
	
				return _edExamSchdlEdCodeCourseAssessId;
			}
			set { _edExamSchdlEdCodeCourseAssessId = value; }
		}
		
		#endregion

		#region SeUserCrsAssessCollection
		
		private TList<SeUserCrsAssess> _seUserCrsAssessEdCodeCourseAssessId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _seUserCrsAssessEdCodeCourseAssessId
		/// </summary>
		
		public TList<SeUserCrsAssess> SeUserCrsAssessCollection
		{
			get
			{
				if (_seUserCrsAssessEdCodeCourseAssessId == null)
				{
				_seUserCrsAssessEdCodeCourseAssessId = new TList<SeUserCrsAssess>();
				}
	
				return _seUserCrsAssessEdCodeCourseAssessId;
			}
			set { _seUserCrsAssessEdCodeCourseAssessId = value; }
		}
		
		#endregion

		#region EntPolcyGrdngHdrCollection
		
		private TList<EntPolcyGrdngHdr> _entPolcyGrdngHdrEdCodeCourseAssessId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolcyGrdngHdrEdCodeCourseAssessId
		/// </summary>
		
		public TList<EntPolcyGrdngHdr> EntPolcyGrdngHdrCollection
		{
			get
			{
				if (_entPolcyGrdngHdrEdCodeCourseAssessId == null)
				{
				_entPolcyGrdngHdrEdCodeCourseAssessId = new TList<EntPolcyGrdngHdr>();
				}
	
				return _entPolcyGrdngHdrEdCodeCourseAssessId;
			}
			set { _entPolcyGrdngHdrEdCodeCourseAssessId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdCodeCourseAssessEntityData _tmp = new EdCodeCourseAssessEntityData();
						
			_tmp.EdCodeCourseAssessId = this.EdCodeCourseAssessId;
			_tmp.OriginalEdCodeCourseAssessId = this.OriginalEdCodeCourseAssessId;
			
			_tmp.DescrAr = this.DescrAr;
			_tmp.DescrEn = this.DescrEn;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.ControlFlag = this.ControlFlag;
			_tmp.SemWorkFlg = this.SemWorkFlg;
			_tmp.AssessOrder = this.AssessOrder;
			_tmp.ExamPayPercent = this.ExamPayPercent;
			_tmp.MoodleFlg = this.MoodleFlg;
			_tmp.EnumId = this.EnumId;
			_tmp.PostponeFlg = this.PostponeFlg;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._entPolicyAssessDtlEdCodeCourseAssessId != null)
				_tmp.EntPolicyAssessDtlCollection = (TList<EntPolicyAssessDtl>) MakeCopyOf(this.EntPolicyAssessDtlCollection); 
			if (this._edStdCrsExamAssessEdCodeCourseAssessId != null)
				_tmp.EdStdCrsExamAssessCollection = (TList<EdStdCrsExamAssess>) MakeCopyOf(this.EdStdCrsExamAssessCollection); 
			if (this._edStudCourseRegAssessSubEdCodeCourseAssessId != null)
				_tmp.EdStudCourseRegAssessSubCollection = (TList<EdStudCourseRegAssessSub>) MakeCopyOf(this.EdStudCourseRegAssessSubCollection); 
			if (this._coCrsRsltRaiseEdCodeCourseAssessId != null)
				_tmp.CoCrsRsltRaiseCollection = (TList<CoCrsRsltRaise>) MakeCopyOf(this.CoCrsRsltRaiseCollection); 
			if (this._entPolicyAssessGrpDtlEdCodeCourseAssessId != null)
				_tmp.EntPolicyAssessGrpDtlCollection = (TList<EntPolicyAssessGrpDtl>) MakeCopyOf(this.EntPolicyAssessGrpDtlCollection); 
			if (this._edStudCourseRegAssessEdCodeCourseAssessId != null)
				_tmp.EdStudCourseRegAssessCollection = (TList<EdStudCourseRegAssess>) MakeCopyOf(this.EdStudCourseRegAssessCollection); 
			if (this._edExamSchdlEdCodeCourseAssessId != null)
				_tmp.EdExamSchdlCollection = (TList<EdExamSchdl>) MakeCopyOf(this.EdExamSchdlCollection); 
			if (this._seUserCrsAssessEdCodeCourseAssessId != null)
				_tmp.SeUserCrsAssessCollection = (TList<SeUserCrsAssess>) MakeCopyOf(this.SeUserCrsAssessCollection); 
			if (this._entPolcyGrdngHdrEdCodeCourseAssessId != null)
				_tmp.EntPolcyGrdngHdrCollection = (TList<EntPolcyGrdngHdr>) MakeCopyOf(this.EntPolcyGrdngHdrCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdCodeCourseAssessEntityData _tmp = new EdCodeCourseAssessEntityData();
						
			_tmp.EdCodeCourseAssessId = this.EdCodeCourseAssessId;
			_tmp.OriginalEdCodeCourseAssessId = this.OriginalEdCodeCourseAssessId;
			
			_tmp.DescrAr = this.DescrAr;
			_tmp.DescrEn = this.DescrEn;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.ControlFlag = this.ControlFlag;
			_tmp.SemWorkFlg = this.SemWorkFlg;
			_tmp.AssessOrder = this.AssessOrder;
			_tmp.ExamPayPercent = this.ExamPayPercent;
			_tmp.MoodleFlg = this.MoodleFlg;
			_tmp.EnumId = this.EnumId;
			_tmp.PostponeFlg = this.PostponeFlg;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EntPolicyAssessDtlCollection = (TList<EntPolicyAssessDtl>) MakeCopyOf(this.EntPolicyAssessDtlCollection, existingCopies); 
			_tmp.EdStdCrsExamAssessCollection = (TList<EdStdCrsExamAssess>) MakeCopyOf(this.EdStdCrsExamAssessCollection, existingCopies); 
			_tmp.EdStudCourseRegAssessSubCollection = (TList<EdStudCourseRegAssessSub>) MakeCopyOf(this.EdStudCourseRegAssessSubCollection, existingCopies); 
			_tmp.CoCrsRsltRaiseCollection = (TList<CoCrsRsltRaise>) MakeCopyOf(this.CoCrsRsltRaiseCollection, existingCopies); 
			_tmp.EntPolicyAssessGrpDtlCollection = (TList<EntPolicyAssessGrpDtl>) MakeCopyOf(this.EntPolicyAssessGrpDtlCollection, existingCopies); 
			_tmp.EdStudCourseRegAssessCollection = (TList<EdStudCourseRegAssess>) MakeCopyOf(this.EdStudCourseRegAssessCollection, existingCopies); 
			_tmp.EdExamSchdlCollection = (TList<EdExamSchdl>) MakeCopyOf(this.EdExamSchdlCollection, existingCopies); 
			_tmp.SeUserCrsAssessCollection = (TList<SeUserCrsAssess>) MakeCopyOf(this.SeUserCrsAssessCollection, existingCopies); 
			_tmp.EntPolcyGrdngHdrCollection = (TList<EntPolcyGrdngHdr>) MakeCopyOf(this.EntPolcyGrdngHdrCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCodeCourseAssessColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdCodeCourseAssessColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCodeCourseAssessColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdCodeCourseAssessColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCodeCourseAssessColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdCodeCourseAssessColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdCodeCourseAssessEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdCodeCourseAssessEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCodeCourseAssessColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdCodeCourseAssessColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdCodeCourseAssessEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdCodeCourseAssessEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdCodeCourseAssessEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdCodeCourseAssess"/> object.
	/// </remarks>
	public class EdCodeCourseAssessEventArgs : System.EventArgs
	{
		private EdCodeCourseAssessColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdCodeCourseAssessEventArgs class.
		///</summary>
		public EdCodeCourseAssessEventArgs(EdCodeCourseAssessColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdCodeCourseAssessEventArgs class.
		///</summary>
		public EdCodeCourseAssessEventArgs(EdCodeCourseAssessColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdCodeCourseAssessColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdCodeCourseAssessColumn" />
		public EdCodeCourseAssessColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdCodeCourseAssess related events.
	///</summary>
	public delegate void EdCodeCourseAssessEventHandler(object sender, EdCodeCourseAssessEventArgs e);
	
	#region EdCodeCourseAssessComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdCodeCourseAssessComparer : System.Collections.Generic.IComparer<EdCodeCourseAssess>
	{
		EdCodeCourseAssessColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdCodeCourseAssessComparer"/> class.
        /// </summary>
		public EdCodeCourseAssessComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdCodeCourseAssessComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdCodeCourseAssessComparer(EdCodeCourseAssessColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdCodeCourseAssess"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdCodeCourseAssess"/> to compare.</param>
        /// <param name="b">The second <c>EdCodeCourseAssess</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdCodeCourseAssess a, EdCodeCourseAssess b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdCodeCourseAssess entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdCodeCourseAssess a, EdCodeCourseAssess b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdCodeCourseAssessColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdCodeCourseAssessKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdCodeCourseAssess"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdCodeCourseAssessKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdCodeCourseAssessKey class.
		/// </summary>
		public EdCodeCourseAssessKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdCodeCourseAssessKey class.
		/// </summary>
		public EdCodeCourseAssessKey(EdCodeCourseAssessBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdCodeCourseAssessId = entity.EdCodeCourseAssessId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdCodeCourseAssessKey class.
		/// </summary>
		public EdCodeCourseAssessKey(System.Decimal _edCodeCourseAssessId)
		{
			#region Init Properties

			this.EdCodeCourseAssessId = _edCodeCourseAssessId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdCodeCourseAssessBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdCodeCourseAssessBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdCodeCourseAssessId property
		private System.Decimal _edCodeCourseAssessId;
		
		/// <summary>
		/// Gets or sets the EdCodeCourseAssessId property.
		/// </summary>
		public System.Decimal EdCodeCourseAssessId
		{
			get { return _edCodeCourseAssessId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdCodeCourseAssessId = value;
				
				_edCodeCourseAssessId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdCodeCourseAssessId = ( values["EdCodeCourseAssessId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdCodeCourseAssessId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdCodeCourseAssessId", EdCodeCourseAssessId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdCodeCourseAssessId: {0}{1}",
								EdCodeCourseAssessId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdCodeCourseAssessColumn Enum
	
	/// <summary>
	/// Enumerate the EdCodeCourseAssess columns.
	/// </summary>
	[Serializable]
	public enum EdCodeCourseAssessColumn : int
	{
		/// <summary>
		/// EdCodeCourseAssessId : 
		/// </summary>
		[EnumTextValue("ED_CODE_COURSE_ASSESS_ID")]
		[ColumnEnum("ED_CODE_COURSE_ASSESS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdCodeCourseAssessId = 1,
		/// <summary>
		/// DescrAr : 
		/// </summary>
		[EnumTextValue("DESCR_AR")]
		[ColumnEnum("DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 150)]
		DescrAr = 2,
		/// <summary>
		/// DescrEn : 
		/// </summary>
		[EnumTextValue("DESCR_EN")]
		[ColumnEnum("DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		DescrEn = 3,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 4,
		/// <summary>
		/// ControlFlag : 
		/// </summary>
		[EnumTextValue("CONTROL_FLAG")]
		[ColumnEnum("CONTROL_FLAG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ControlFlag = 5,
		/// <summary>
		/// SemWorkFlg : 
		/// </summary>
		[EnumTextValue("SEM_WORK_FLG")]
		[ColumnEnum("SEM_WORK_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SemWorkFlg = 6,
		/// <summary>
		/// AssessOrder : 
		/// </summary>
		[EnumTextValue("ASSESS_ORDER")]
		[ColumnEnum("ASSESS_ORDER", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AssessOrder = 7,
		/// <summary>
		/// ExamPayPercent : اجمالى نسبة المدفوع من الطالب مصروفات دراسية
		/// </summary>
		[EnumTextValue("EXAM_PAY_PERCENT")]
		[ColumnEnum("EXAM_PAY_PERCENT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ExamPayPercent = 8,
		/// <summary>
		/// MoodleFlg : Show in screen only if sysparam MOODLE_INTEG=1
		/// 		/// for each assess , onle one flag=1 :
		/// 		/// - Fina Exam (Control Flag)
		/// 		/// -Sem Work Flag
		/// 		/// -Moodle Flag
		/// </summary>
		[EnumTextValue("MOODLE_FLG")]
		[ColumnEnum("MOODLE_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		MoodleFlg = 9,
		/// <summary>
		/// EnumId : 
		/// </summary>
		[EnumTextValue("ENUM_ID")]
		[ColumnEnum("ENUM_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		EnumId = 10,
		/// <summary>
		/// PostponeFlg : 
		/// </summary>
		[EnumTextValue("POSTPONE_FLG")]
		[ColumnEnum("POSTPONE_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		PostponeFlg = 11
	}//End enum

	#endregion EdCodeCourseAssessColumn Enum

} // end namespace
