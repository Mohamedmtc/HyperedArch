
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ScHall.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SC_HALL' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ScHallBase : EntityBase, IScHall, IEntityId<ScHallKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ScHallEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ScHallEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ScHallEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ScHall> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ScHallEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ScHallEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ScHallBase"/> instance.
		///</summary>
		public ScHallBase()
		{
			this.entityData = new ScHallEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ScHallBase"/> instance.
		///</summary>
		///<param name="_scHallId">القاعات</param>
		///<param name="_scBuildingId"></param>
		///<param name="_hallCode"></param>
		///<param name="_descrAr"></param>
		///<param name="_capacity"></param>
		///<param name="_isShared"></param>
		///<param name="_isActive"></param>
		///<param name="_descrEn"></param>
		///<param name="_exmCapcity"></param>
		///<param name="_capacityMax"></param>
		///<param name="_floor">مؤشر قاعة اونلاين virtual</param>
		///<param name="_scCdeHallTypeId"></param>
		///<param name="_crsSharedFlg"></param>
		///<param name="_onlineFlg"></param>
		public ScHallBase(System.Decimal _scHallId, System.Decimal _scBuildingId, System.String _hallCode, 
			System.String _descrAr, System.Decimal _capacity, System.Decimal _isShared, System.Decimal _isActive, 
			System.String _descrEn, System.Decimal? _exmCapcity, System.Decimal? _capacityMax, System.String _floor, 
			System.Decimal? _scCdeHallTypeId, System.Boolean? _crsSharedFlg, System.Boolean? _onlineFlg)
		{
			this.entityData = new ScHallEntityData();
			this.backupData = null;

			this.ScHallId = _scHallId;
			this.ScBuildingId = _scBuildingId;
			this.HallCode = _hallCode;
			this.DescrAr = _descrAr;
			this.Capacity = _capacity;
			this.IsShared = _isShared;
			this.IsActive = _isActive;
			this.DescrEn = _descrEn;
			this.ExmCapcity = _exmCapcity;
			this.CapacityMax = _capacityMax;
			this.Floor = _floor;
			this.ScCdeHallTypeId = _scCdeHallTypeId;
			this.CrsSharedFlg = _crsSharedFlg;
			this.OnlineFlg = _onlineFlg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ScHall"/> instance.
		///</summary>
		///<param name="_scHallId">القاعات</param>
		///<param name="_scBuildingId"></param>
		///<param name="_hallCode"></param>
		///<param name="_descrAr"></param>
		///<param name="_capacity"></param>
		///<param name="_isShared"></param>
		///<param name="_isActive"></param>
		///<param name="_descrEn"></param>
		///<param name="_exmCapcity"></param>
		///<param name="_capacityMax"></param>
		///<param name="_floor">مؤشر قاعة اونلاين virtual</param>
		///<param name="_scCdeHallTypeId"></param>
		///<param name="_crsSharedFlg"></param>
		///<param name="_onlineFlg"></param>
		public static ScHall CreateScHall(System.Decimal _scHallId, System.Decimal _scBuildingId, System.String _hallCode, 
			System.String _descrAr, System.Decimal _capacity, System.Decimal _isShared, System.Decimal _isActive, 
			System.String _descrEn, System.Decimal? _exmCapcity, System.Decimal? _capacityMax, System.String _floor, 
			System.Decimal? _scCdeHallTypeId, System.Boolean? _crsSharedFlg, System.Boolean? _onlineFlg)
		{
			ScHall newScHall = new ScHall();
			newScHall.ScHallId = _scHallId;
			newScHall.ScBuildingId = _scBuildingId;
			newScHall.HallCode = _hallCode;
			newScHall.DescrAr = _descrAr;
			newScHall.Capacity = _capacity;
			newScHall.IsShared = _isShared;
			newScHall.IsActive = _isActive;
			newScHall.DescrEn = _descrEn;
			newScHall.ExmCapcity = _exmCapcity;
			newScHall.CapacityMax = _capacityMax;
			newScHall.Floor = _floor;
			newScHall.ScCdeHallTypeId = _scCdeHallTypeId;
			newScHall.CrsSharedFlg = _crsSharedFlg;
			newScHall.OnlineFlg = _onlineFlg;
			return newScHall;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the ScHallId property. 
		///		القاعات
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"القاعات"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal ScHallId
		{
			get
			{
				return this.entityData.ScHallId; 
			}
			
			set
			{
				if (this.entityData.ScHallId == value)
					return;
					
				OnColumnChanging(ScHallColumn.ScHallId, this.entityData.ScHallId);
				this.entityData.ScHallId = value;
				this.EntityId.ScHallId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScHallColumn.ScHallId, this.entityData.ScHallId);
				OnPropertyChanged("ScHallId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SC_HALL_ID property.
		///		القاعات
		/// </summary>
		/// <remarks>This is the original value of the SC_HALL_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalScHallId
		{
			get { return this.entityData.OriginalScHallId; }
			set { this.entityData.OriginalScHallId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the ScBuildingId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ScBuildingId
		{
			get
			{
				return this.entityData.ScBuildingId; 
			}
			
			set
			{
				if (this.entityData.ScBuildingId == value)
					return;
					
				OnColumnChanging(ScHallColumn.ScBuildingId, this.entityData.ScBuildingId);
				this.entityData.ScBuildingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScHallColumn.ScBuildingId, this.entityData.ScBuildingId);
				OnPropertyChanged("ScBuildingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HallCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String HallCode
		{
			get
			{
				return this.entityData.HallCode; 
			}
			
			set
			{
				if (this.entityData.HallCode == value)
					return;
					
				OnColumnChanging(ScHallColumn.HallCode, this.entityData.HallCode);
				this.entityData.HallCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScHallColumn.HallCode, this.entityData.HallCode);
				OnPropertyChanged("HallCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescrAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String DescrAr
		{
			get
			{
				return this.entityData.DescrAr; 
			}
			
			set
			{
				if (this.entityData.DescrAr == value)
					return;
					
				OnColumnChanging(ScHallColumn.DescrAr, this.entityData.DescrAr);
				this.entityData.DescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScHallColumn.DescrAr, this.entityData.DescrAr);
				OnPropertyChanged("DescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Capacity property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal Capacity
		{
			get
			{
				return this.entityData.Capacity; 
			}
			
			set
			{
				if (this.entityData.Capacity == value)
					return;
					
				OnColumnChanging(ScHallColumn.Capacity, this.entityData.Capacity);
				this.entityData.Capacity = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScHallColumn.Capacity, this.entityData.Capacity);
				OnPropertyChanged("Capacity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsShared property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsShared
		{
			get
			{
				return this.entityData.IsShared; 
			}
			
			set
			{
				if (this.entityData.IsShared == value)
					return;
					
				OnColumnChanging(ScHallColumn.IsShared, this.entityData.IsShared);
				this.entityData.IsShared = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScHallColumn.IsShared, this.entityData.IsShared);
				OnPropertyChanged("IsShared");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
				OnColumnChanging(ScHallColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScHallColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String DescrEn
		{
			get
			{
				return this.entityData.DescrEn; 
			}
			
			set
			{
				if (this.entityData.DescrEn == value)
					return;
					
				OnColumnChanging(ScHallColumn.DescrEn, this.entityData.DescrEn);
				this.entityData.DescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScHallColumn.DescrEn, this.entityData.DescrEn);
				OnPropertyChanged("DescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExmCapcity property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsExmCapcityNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ExmCapcity
		{
			get
			{
				return this.entityData.ExmCapcity; 
			}
			
			set
			{
				if (this.entityData.ExmCapcity == value)
					return;
					
				OnColumnChanging(ScHallColumn.ExmCapcity, this.entityData.ExmCapcity);
				this.entityData.ExmCapcity = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScHallColumn.ExmCapcity, this.entityData.ExmCapcity);
				OnPropertyChanged("ExmCapcity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CapacityMax property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCapacityMaxNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CapacityMax
		{
			get
			{
				return this.entityData.CapacityMax; 
			}
			
			set
			{
				if (this.entityData.CapacityMax == value)
					return;
					
				OnColumnChanging(ScHallColumn.CapacityMax, this.entityData.CapacityMax);
				this.entityData.CapacityMax = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScHallColumn.CapacityMax, this.entityData.CapacityMax);
				OnPropertyChanged("CapacityMax");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Floor property. 
		///		مؤشر قاعة اونلاين virtual
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"مؤشر قاعة اونلاين virtual"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String Floor
		{
			get
			{
				return this.entityData.Floor; 
			}
			
			set
			{
				if (this.entityData.Floor == value)
					return;
					
				OnColumnChanging(ScHallColumn.Floor, this.entityData.Floor);
				this.entityData.Floor = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScHallColumn.Floor, this.entityData.Floor);
				OnPropertyChanged("Floor");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScCdeHallTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScCdeHallTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScCdeHallTypeId
		{
			get
			{
				return this.entityData.ScCdeHallTypeId; 
			}
			
			set
			{
				if (this.entityData.ScCdeHallTypeId == value)
					return;
					
				OnColumnChanging(ScHallColumn.ScCdeHallTypeId, this.entityData.ScCdeHallTypeId);
				this.entityData.ScCdeHallTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScHallColumn.ScCdeHallTypeId, this.entityData.ScCdeHallTypeId);
				OnPropertyChanged("ScCdeHallTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CrsSharedFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsCrsSharedFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? CrsSharedFlg
		{
			get
			{
				return this.entityData.CrsSharedFlg; 
			}
			
			set
			{
				if (this.entityData.CrsSharedFlg == value)
					return;
					
				OnColumnChanging(ScHallColumn.CrsSharedFlg, this.entityData.CrsSharedFlg);
				this.entityData.CrsSharedFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScHallColumn.CrsSharedFlg, this.entityData.CrsSharedFlg);
				OnPropertyChanged("CrsSharedFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OnlineFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsOnlineFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? OnlineFlg
		{
			get
			{
				return this.entityData.OnlineFlg; 
			}
			
			set
			{
				if (this.entityData.OnlineFlg == value)
					return;
					
				OnColumnChanging(ScHallColumn.OnlineFlg, this.entityData.OnlineFlg);
				this.entityData.OnlineFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScHallColumn.OnlineFlg, this.entityData.OnlineFlg);
				OnPropertyChanged("OnlineFlg");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="ScBuilding"/>.
		/// </summary>
		/// <value>The source ScBuilding for ScBuildingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScBuilding ScBuildingIdSource
      	{
            get { return entityData.ScBuildingIdSource; }
            set { entityData.ScBuildingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScCdeHallType"/>.
		/// </summary>
		/// <value>The source ScCdeHallType for ScCdeHallTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScCdeHallType ScCdeHallTypeIdSource
      	{
            get { return entityData.ScCdeHallTypeIdSource; }
            set { entityData.ScCdeHallTypeIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EdStudCheat objects
		///	which are related to this object through the relation FK_ED_STUD_CHEAT_SC_HALL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCheat> EdStudCheatCollection
		{
			get { return entityData.EdStudCheatCollection; }
			set { entityData.EdStudCheatCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of PgThesisDiscussionDate objects
		///	which are related to this object through the relation FK_PG_THESIS_DISCUSSION_DATE_SC_HALL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgThesisDiscussionDate> PgThesisDiscussionDateCollection
		{
			get { return entityData.PgThesisDiscussionDateCollection; }
			set { entityData.PgThesisDiscussionDateCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ScHallRsrv objects
		///	which are related to this object through the relation FK_SC_HALL_RSRV_SC_HALL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScHallRsrv> ScHallRsrvCollection
		{
			get { return entityData.ScHallRsrvCollection; }
			set { entityData.ScHallRsrvCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ScGroupDay objects
		///	which are related to this object through the relation FK_SC_GROUP_DAY_SC_HALL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScGroupDay> ScGroupDayCollection
		{
			get { return entityData.ScGroupDayCollection; }
			set { entityData.ScGroupDayCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CoExamSchdlPlace objects
		///	which are related to this object through the relation FK_CO_EXAM_SCHDL_PLACE_SC_HALL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoExamSchdlPlace> CoExamSchdlPlaceCollection
		{
			get { return entityData.CoExamSchdlPlaceCollection; }
			set { entityData.CoExamSchdlPlaceCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of PgThesisSeminar objects
		///	which are related to this object through the relation FK_PG_STUD_SEMINAR_SC_HALL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgThesisSeminar> PgThesisSeminarCollection
		{
			get { return entityData.PgThesisSeminarCollection; }
			set { entityData.PgThesisSeminarCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ScSchdlSlot objects
		///	which are related to this object through the relation FK_SC_SCHDL_SLOT_SC_HALL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScSchdlSlot> ScSchdlSlotCollection
		{
			get { return entityData.ScSchdlSlotCollection; }
			set { entityData.ScSchdlSlotCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmPlaceExamLoc objects
		///	which are related to this object through the relation FK_ADM_PLACE_EXAM_LOC_SC_HALL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmPlaceExamLoc> AdmPlaceExamLocCollection
		{
			get { return entityData.AdmPlaceExamLocCollection; }
			set { entityData.AdmPlaceExamLocCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmPlaceExamDatetime objects
		///	which are related to this object through the relation FK_ADM_PLACE_EXAM_DATETIME_SC_HALL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmPlaceExamDatetime> AdmPlaceExamDatetimeCollection
		{
			get { return entityData.AdmPlaceExamDatetimeCollection; }
			set { entityData.AdmPlaceExamDatetimeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ScScheduleDtlDayException objects
		///	which are related to this object through the relation FK_SC_SCHEDULE_DTL_DAY_Exception_SC_HALL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScScheduleDtlDayException> ScScheduleDtlDayExceptionCollection
		{
			get { return entityData.ScScheduleDtlDayExceptionCollection; }
			set { entityData.ScScheduleDtlDayExceptionCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ScScheduleDtlDay objects
		///	which are related to this object through the relation FK_SC_SCHEDULE_DTL_DAY_SC_HALL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScScheduleDtlDay> ScScheduleDtlDayCollection
		{
			get { return entityData.ScScheduleDtlDayCollection; }
			set { entityData.ScScheduleDtlDayCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ScHallEquip objects
		///	which are related to this object through the relation FK_SC_HALL_EQUIP_SC_HALL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScHallEquip> ScHallEquipCollection
		{
			get { return entityData.ScHallEquipCollection; }
			set { entityData.ScHallEquipCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CoExamCommittee objects
		///	which are related to this object through the relation FK_CO_EXAM_COMMITTEE_SC_HALL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoExamCommittee> CoExamCommitteeCollection
		{
			get { return entityData.CoExamCommitteeCollection; }
			set { entityData.CoExamCommitteeCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("HallCode", "Hall Code"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HallCode", "Hall Code", 10));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DescrAr", "Descr Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrAr", "Descr Ar", 100));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DescrEn", "Descr En"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrEn", "Descr En", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Floor", "Floor", 10));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SC_HALL"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SC_HALL_ID", "SC_BUILDING_ID", "HALL_CODE", "DESCR_AR", "CAPACITY", "IS_SHARED", "IS_ACTIVE", "DESCR_EN", "EXM_CAPCITY", "CAPACITY_MAX", "FLOOR", "SC_CDE_HALL_TYPE_ID", "CRS_SHARED_FLG", "ONLINE_FLG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ScHallEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ScHall) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ScHall>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ScHall);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ScHall Entity 
		///</summary>
		protected virtual ScHall Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ScHall copy = new ScHall();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.ScHallId = this.ScHallId;
					copy.OriginalScHallId = this.OriginalScHallId;
				copy.ScBuildingId = this.ScBuildingId;
				copy.HallCode = this.HallCode;
				copy.DescrAr = this.DescrAr;
				copy.Capacity = this.Capacity;
				copy.IsShared = this.IsShared;
				copy.IsActive = this.IsActive;
				copy.DescrEn = this.DescrEn;
				copy.ExmCapcity = this.ExmCapcity;
				copy.CapacityMax = this.CapacityMax;
				copy.Floor = this.Floor;
				copy.ScCdeHallTypeId = this.ScCdeHallTypeId;
				copy.CrsSharedFlg = this.CrsSharedFlg;
				copy.OnlineFlg = this.OnlineFlg;
			
			if (this.ScBuildingIdSource != null && existingCopies.Contains(this.ScBuildingIdSource))
				copy.ScBuildingIdSource = existingCopies[this.ScBuildingIdSource] as ScBuilding;
			else
				copy.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource, existingCopies) as ScBuilding;
			if (this.ScCdeHallTypeIdSource != null && existingCopies.Contains(this.ScCdeHallTypeIdSource))
				copy.ScCdeHallTypeIdSource = existingCopies[this.ScCdeHallTypeIdSource] as ScCdeHallType;
			else
				copy.ScCdeHallTypeIdSource = MakeCopyOf(this.ScCdeHallTypeIdSource, existingCopies) as ScCdeHallType;
		
			//deep copy nested objects
			copy.EdStudCheatCollection = (TList<EdStudCheat>) MakeCopyOf(this.EdStudCheatCollection, existingCopies); 
			copy.PgThesisDiscussionDateCollection = (TList<PgThesisDiscussionDate>) MakeCopyOf(this.PgThesisDiscussionDateCollection, existingCopies); 
			copy.ScHallRsrvCollection = (TList<ScHallRsrv>) MakeCopyOf(this.ScHallRsrvCollection, existingCopies); 
			copy.ScGroupDayCollection = (TList<ScGroupDay>) MakeCopyOf(this.ScGroupDayCollection, existingCopies); 
			copy.CoExamSchdlPlaceCollection = (TList<CoExamSchdlPlace>) MakeCopyOf(this.CoExamSchdlPlaceCollection, existingCopies); 
			copy.PgThesisSeminarCollection = (TList<PgThesisSeminar>) MakeCopyOf(this.PgThesisSeminarCollection, existingCopies); 
			copy.ScSchdlSlotCollection = (TList<ScSchdlSlot>) MakeCopyOf(this.ScSchdlSlotCollection, existingCopies); 
			copy.AdmPlaceExamLocCollection = (TList<AdmPlaceExamLoc>) MakeCopyOf(this.AdmPlaceExamLocCollection, existingCopies); 
			copy.AdmPlaceExamDatetimeCollection = (TList<AdmPlaceExamDatetime>) MakeCopyOf(this.AdmPlaceExamDatetimeCollection, existingCopies); 
			copy.ScScheduleDtlDayExceptionCollection = (TList<ScScheduleDtlDayException>) MakeCopyOf(this.ScScheduleDtlDayExceptionCollection, existingCopies); 
			copy.ScScheduleDtlDayCollection = (TList<ScScheduleDtlDay>) MakeCopyOf(this.ScScheduleDtlDayCollection, existingCopies); 
			copy.ScHallEquipCollection = (TList<ScHallEquip>) MakeCopyOf(this.ScHallEquipCollection, existingCopies); 
			copy.CoExamCommitteeCollection = (TList<CoExamCommittee>) MakeCopyOf(this.CoExamCommitteeCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ScHall Entity 
		///</summary>
		public virtual ScHall Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ScHall Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ScHall DeepCopy()
		{
			return EntityHelper.Clone<ScHall>(this as ScHall);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ScHallEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ScHallEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ScHallEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ScHallColumn column)
		{
			switch(column)
			{
					case ScHallColumn.ScHallId:
					return entityData.ScHallId != _originalData.ScHallId;
					case ScHallColumn.ScBuildingId:
					return entityData.ScBuildingId != _originalData.ScBuildingId;
					case ScHallColumn.HallCode:
					return entityData.HallCode != _originalData.HallCode;
					case ScHallColumn.DescrAr:
					return entityData.DescrAr != _originalData.DescrAr;
					case ScHallColumn.Capacity:
					return entityData.Capacity != _originalData.Capacity;
					case ScHallColumn.IsShared:
					return entityData.IsShared != _originalData.IsShared;
					case ScHallColumn.IsActive:
					return entityData.IsActive != _originalData.IsActive;
					case ScHallColumn.DescrEn:
					return entityData.DescrEn != _originalData.DescrEn;
					case ScHallColumn.ExmCapcity:
					return entityData.ExmCapcity != _originalData.ExmCapcity;
					case ScHallColumn.CapacityMax:
					return entityData.CapacityMax != _originalData.CapacityMax;
					case ScHallColumn.Floor:
					return entityData.Floor != _originalData.Floor;
					case ScHallColumn.ScCdeHallTypeId:
					return entityData.ScCdeHallTypeId != _originalData.ScCdeHallTypeId;
					case ScHallColumn.CrsSharedFlg:
					return entityData.CrsSharedFlg != _originalData.CrsSharedFlg;
					case ScHallColumn.OnlineFlg:
					return entityData.OnlineFlg != _originalData.OnlineFlg;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ScHallColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.ScHallId != _originalData.ScHallId;
			result = result || entityData.ScBuildingId != _originalData.ScBuildingId;
			result = result || entityData.HallCode != _originalData.HallCode;
			result = result || entityData.DescrAr != _originalData.DescrAr;
			result = result || entityData.Capacity != _originalData.Capacity;
			result = result || entityData.IsShared != _originalData.IsShared;
			result = result || entityData.IsActive != _originalData.IsActive;
			result = result || entityData.DescrEn != _originalData.DescrEn;
			result = result || entityData.ExmCapcity != _originalData.ExmCapcity;
			result = result || entityData.CapacityMax != _originalData.CapacityMax;
			result = result || entityData.Floor != _originalData.Floor;
			result = result || entityData.ScCdeHallTypeId != _originalData.ScCdeHallTypeId;
			result = result || entityData.CrsSharedFlg != _originalData.CrsSharedFlg;
			result = result || entityData.OnlineFlg != _originalData.OnlineFlg;
			return result;
		}	
		
		///<summary>
		///  Returns a ScHall Entity with the original data.
		///</summary>
		public ScHall GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateScHall(
				_originalData.ScHallId,
				_originalData.ScBuildingId,
				_originalData.HallCode,
				_originalData.DescrAr,
				_originalData.Capacity,
				_originalData.IsShared,
				_originalData.IsActive,
				_originalData.DescrEn,
				_originalData.ExmCapcity,
				_originalData.CapacityMax,
				_originalData.Floor,
				_originalData.ScCdeHallTypeId,
				_originalData.CrsSharedFlg,
				_originalData.OnlineFlg
				);
				
			return (ScHall)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ScHallBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ScHallBase)
				return ValueEquals(this, (ScHallBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ScHallBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.ScHallId.GetHashCode() ^ 
					this.ScBuildingId.GetHashCode() ^ 
					this.HallCode.GetHashCode() ^ 
					this.DescrAr.GetHashCode() ^ 
					this.Capacity.GetHashCode() ^ 
					this.IsShared.GetHashCode() ^ 
					this.IsActive.GetHashCode() ^ 
					this.DescrEn.GetHashCode() ^ 
					((this.ExmCapcity == null) ? string.Empty : this.ExmCapcity.ToString()).GetHashCode() ^ 
					((this.CapacityMax == null) ? string.Empty : this.CapacityMax.ToString()).GetHashCode() ^ 
					((this.Floor == null) ? string.Empty : this.Floor.ToString()).GetHashCode() ^ 
					((this.ScCdeHallTypeId == null) ? string.Empty : this.ScCdeHallTypeId.ToString()).GetHashCode() ^ 
					((this.CrsSharedFlg == null) ? string.Empty : this.CrsSharedFlg.ToString()).GetHashCode() ^ 
					((this.OnlineFlg == null) ? string.Empty : this.OnlineFlg.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ScHallBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ScHallBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ScHallBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ScHallBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ScHallBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ScHallBase Object1, ScHallBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ScHallId != Object2.ScHallId)
				equal = false;
			if (Object1.ScBuildingId != Object2.ScBuildingId)
				equal = false;
			if (Object1.HallCode != Object2.HallCode)
				equal = false;
			if (Object1.DescrAr != Object2.DescrAr)
				equal = false;
			if (Object1.Capacity != Object2.Capacity)
				equal = false;
			if (Object1.IsShared != Object2.IsShared)
				equal = false;
			if (Object1.IsActive != Object2.IsActive)
				equal = false;
			if (Object1.DescrEn != Object2.DescrEn)
				equal = false;
			if ( Object1.ExmCapcity != null && Object2.ExmCapcity != null )
			{
				if (Object1.ExmCapcity != Object2.ExmCapcity)
					equal = false;
			}
			else if (Object1.ExmCapcity == null ^ Object2.ExmCapcity == null )
			{
				equal = false;
			}
			if ( Object1.CapacityMax != null && Object2.CapacityMax != null )
			{
				if (Object1.CapacityMax != Object2.CapacityMax)
					equal = false;
			}
			else if (Object1.CapacityMax == null ^ Object2.CapacityMax == null )
			{
				equal = false;
			}
			if ( Object1.Floor != null && Object2.Floor != null )
			{
				if (Object1.Floor != Object2.Floor)
					equal = false;
			}
			else if (Object1.Floor == null ^ Object2.Floor == null )
			{
				equal = false;
			}
			if ( Object1.ScCdeHallTypeId != null && Object2.ScCdeHallTypeId != null )
			{
				if (Object1.ScCdeHallTypeId != Object2.ScCdeHallTypeId)
					equal = false;
			}
			else if (Object1.ScCdeHallTypeId == null ^ Object2.ScCdeHallTypeId == null )
			{
				equal = false;
			}
			if ( Object1.CrsSharedFlg != null && Object2.CrsSharedFlg != null )
			{
				if (Object1.CrsSharedFlg != Object2.CrsSharedFlg)
					equal = false;
			}
			else if (Object1.CrsSharedFlg == null ^ Object2.CrsSharedFlg == null )
			{
				equal = false;
			}
			if ( Object1.OnlineFlg != null && Object2.OnlineFlg != null )
			{
				if (Object1.OnlineFlg != Object2.OnlineFlg)
					equal = false;
			}
			else if (Object1.OnlineFlg == null ^ Object2.OnlineFlg == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ScHallBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ScHallComparer GetComparer()
        {
            return new ScHallComparer();
        }
        */

        // Comparer delegates back to ScHall
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ScHall rhs, ScHallColumn which)
        {
            switch (which)
            {
            	
            	
            	case ScHallColumn.ScHallId:
            		return this.ScHallId.CompareTo(rhs.ScHallId);
            		
            		                 
            	
            	
            	case ScHallColumn.ScBuildingId:
            		return this.ScBuildingId.CompareTo(rhs.ScBuildingId);
            		
            		                 
            	
            	
            	case ScHallColumn.HallCode:
            		return this.HallCode.CompareTo(rhs.HallCode);
            		
            		                 
            	
            	
            	case ScHallColumn.DescrAr:
            		return this.DescrAr.CompareTo(rhs.DescrAr);
            		
            		                 
            	
            	
            	case ScHallColumn.Capacity:
            		return this.Capacity.CompareTo(rhs.Capacity);
            		
            		                 
            	
            	
            	case ScHallColumn.IsShared:
            		return this.IsShared.CompareTo(rhs.IsShared);
            		
            		                 
            	
            	
            	case ScHallColumn.IsActive:
            		return this.IsActive.CompareTo(rhs.IsActive);
            		
            		                 
            	
            	
            	case ScHallColumn.DescrEn:
            		return this.DescrEn.CompareTo(rhs.DescrEn);
            		
            		                 
            	
            	
            	case ScHallColumn.ExmCapcity:
            		return this.ExmCapcity.Value.CompareTo(rhs.ExmCapcity.Value);
            		
            		                 
            	
            	
            	case ScHallColumn.CapacityMax:
            		return this.CapacityMax.Value.CompareTo(rhs.CapacityMax.Value);
            		
            		                 
            	
            	
            	case ScHallColumn.Floor:
            		return this.Floor.CompareTo(rhs.Floor);
            		
            		                 
            	
            	
            	case ScHallColumn.ScCdeHallTypeId:
            		return this.ScCdeHallTypeId.Value.CompareTo(rhs.ScCdeHallTypeId.Value);
            		
            		                 
            	
            	
            	case ScHallColumn.CrsSharedFlg:
            		return this.CrsSharedFlg.Value.CompareTo(rhs.CrsSharedFlg.Value);
            		
            		                 
            	
            	
            	case ScHallColumn.OnlineFlg:
            		return this.OnlineFlg.Value.CompareTo(rhs.OnlineFlg.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ScHallKey> Members
		
		// member variable for the EntityId property
		private ScHallKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ScHallKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ScHallKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ScHall")
					.Append("|").Append( this.ScHallId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{15}{14}- ScHallId: {0}{14}- ScBuildingId: {1}{14}- HallCode: {2}{14}- DescrAr: {3}{14}- Capacity: {4}{14}- IsShared: {5}{14}- IsActive: {6}{14}- DescrEn: {7}{14}- ExmCapcity: {8}{14}- CapacityMax: {9}{14}- Floor: {10}{14}- ScCdeHallTypeId: {11}{14}- CrsSharedFlg: {12}{14}- OnlineFlg: {13}{14}{16}", 
				this.ScHallId,
				this.ScBuildingId,
				this.HallCode,
				this.DescrAr,
				this.Capacity,
				this.IsShared,
				this.IsActive,
				this.DescrEn,
				(this.ExmCapcity == null) ? string.Empty : this.ExmCapcity.ToString(),
				(this.CapacityMax == null) ? string.Empty : this.CapacityMax.ToString(),
				(this.Floor == null) ? string.Empty : this.Floor.ToString(),
				(this.ScCdeHallTypeId == null) ? string.Empty : this.ScCdeHallTypeId.ToString(),
				(this.CrsSharedFlg == null) ? string.Empty : this.CrsSharedFlg.ToString(),
				(this.OnlineFlg == null) ? string.Empty : this.OnlineFlg.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SC_HALL' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ScHallEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SC_HALL_ID : القاعات
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SC_HALL"</remarks>
		public System.Decimal ScHallId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalScHallId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SC_BUILDING_ID : 
		/// </summary>
		public System.Decimal		  ScBuildingId = 0.0m;
		
		/// <summary>
		/// HALL_CODE : 
		/// </summary>
		public System.String		  HallCode = string.Empty;
		
		/// <summary>
		/// DESCR_AR : 
		/// </summary>
		public System.String		  DescrAr = string.Empty;
		
		/// <summary>
		/// CAPACITY : 
		/// </summary>
		public System.Decimal		  Capacity = 0.0m;
		
		/// <summary>
		/// IS_SHARED : 
		/// </summary>
		public System.Decimal		  IsShared = 0.0m;
		
		/// <summary>
		/// IS_ACTIVE : 
		/// </summary>
		public System.Decimal		  IsActive = 0.0m;
		
		/// <summary>
		/// DESCR_EN : 
		/// </summary>
		public System.String		  DescrEn = string.Empty;
		
		/// <summary>
		/// EXM_CAPCITY : 
		/// </summary>
		public System.Decimal?		  ExmCapcity = null;
		
		/// <summary>
		/// CAPACITY_MAX : 
		/// </summary>
		public System.Decimal?		  CapacityMax = null;
		
		/// <summary>
		/// FLOOR : مؤشر قاعة اونلاين virtual
		/// </summary>
		public System.String		  Floor = null;
		
		/// <summary>
		/// SC_CDE_HALL_TYPE_ID : 
		/// </summary>
		public System.Decimal?		  ScCdeHallTypeId = null;
		
		/// <summary>
		/// CRS_SHARED_FLG : 
		/// </summary>
		public System.Boolean?		  CrsSharedFlg = null;
		
		/// <summary>
		/// ONLINE_FLG : 
		/// </summary>
		public System.Boolean?		  OnlineFlg = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private ScBuilding _scBuildingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScBuilding"/>.
		/// </summary>
		/// <value>The source ScBuilding for ScBuildingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScBuilding ScBuildingIdSource
      	{
            get { return this._scBuildingIdSource; }
            set { this._scBuildingIdSource = value; }
      	}
		private ScCdeHallType _scCdeHallTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScCdeHallType"/>.
		/// </summary>
		/// <value>The source ScCdeHallType for ScCdeHallTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScCdeHallType ScCdeHallTypeIdSource
      	{
            get { return this._scCdeHallTypeIdSource; }
            set { this._scCdeHallTypeIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EdStudCheatCollection
		
		private TList<EdStudCheat> _edStudCheatScHallId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCheatScHallId
		/// </summary>
		
		public TList<EdStudCheat> EdStudCheatCollection
		{
			get
			{
				if (_edStudCheatScHallId == null)
				{
				_edStudCheatScHallId = new TList<EdStudCheat>();
				}
	
				return _edStudCheatScHallId;
			}
			set { _edStudCheatScHallId = value; }
		}
		
		#endregion

		#region PgThesisDiscussionDateCollection
		
		private TList<PgThesisDiscussionDate> _pgThesisDiscussionDateScHallId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgThesisDiscussionDateScHallId
		/// </summary>
		
		public TList<PgThesisDiscussionDate> PgThesisDiscussionDateCollection
		{
			get
			{
				if (_pgThesisDiscussionDateScHallId == null)
				{
				_pgThesisDiscussionDateScHallId = new TList<PgThesisDiscussionDate>();
				}
	
				return _pgThesisDiscussionDateScHallId;
			}
			set { _pgThesisDiscussionDateScHallId = value; }
		}
		
		#endregion

		#region ScHallRsrvCollection
		
		private TList<ScHallRsrv> _scHallRsrvScHallId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scHallRsrvScHallId
		/// </summary>
		
		public TList<ScHallRsrv> ScHallRsrvCollection
		{
			get
			{
				if (_scHallRsrvScHallId == null)
				{
				_scHallRsrvScHallId = new TList<ScHallRsrv>();
				}
	
				return _scHallRsrvScHallId;
			}
			set { _scHallRsrvScHallId = value; }
		}
		
		#endregion

		#region ScGroupDayCollection
		
		private TList<ScGroupDay> _scGroupDayScHallId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scGroupDayScHallId
		/// </summary>
		
		public TList<ScGroupDay> ScGroupDayCollection
		{
			get
			{
				if (_scGroupDayScHallId == null)
				{
				_scGroupDayScHallId = new TList<ScGroupDay>();
				}
	
				return _scGroupDayScHallId;
			}
			set { _scGroupDayScHallId = value; }
		}
		
		#endregion

		#region CoExamSchdlPlaceCollection
		
		private TList<CoExamSchdlPlace> _coExamSchdlPlaceScHallId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coExamSchdlPlaceScHallId
		/// </summary>
		
		public TList<CoExamSchdlPlace> CoExamSchdlPlaceCollection
		{
			get
			{
				if (_coExamSchdlPlaceScHallId == null)
				{
				_coExamSchdlPlaceScHallId = new TList<CoExamSchdlPlace>();
				}
	
				return _coExamSchdlPlaceScHallId;
			}
			set { _coExamSchdlPlaceScHallId = value; }
		}
		
		#endregion

		#region PgThesisSeminarCollection
		
		private TList<PgThesisSeminar> _pgThesisSeminarScHallId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgThesisSeminarScHallId
		/// </summary>
		
		public TList<PgThesisSeminar> PgThesisSeminarCollection
		{
			get
			{
				if (_pgThesisSeminarScHallId == null)
				{
				_pgThesisSeminarScHallId = new TList<PgThesisSeminar>();
				}
	
				return _pgThesisSeminarScHallId;
			}
			set { _pgThesisSeminarScHallId = value; }
		}
		
		#endregion

		#region ScSchdlSlotCollection
		
		private TList<ScSchdlSlot> _scSchdlSlotScHallId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scSchdlSlotScHallId
		/// </summary>
		
		public TList<ScSchdlSlot> ScSchdlSlotCollection
		{
			get
			{
				if (_scSchdlSlotScHallId == null)
				{
				_scSchdlSlotScHallId = new TList<ScSchdlSlot>();
				}
	
				return _scSchdlSlotScHallId;
			}
			set { _scSchdlSlotScHallId = value; }
		}
		
		#endregion

		#region AdmPlaceExamLocCollection
		
		private TList<AdmPlaceExamLoc> _admPlaceExamLocScHallId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admPlaceExamLocScHallId
		/// </summary>
		
		public TList<AdmPlaceExamLoc> AdmPlaceExamLocCollection
		{
			get
			{
				if (_admPlaceExamLocScHallId == null)
				{
				_admPlaceExamLocScHallId = new TList<AdmPlaceExamLoc>();
				}
	
				return _admPlaceExamLocScHallId;
			}
			set { _admPlaceExamLocScHallId = value; }
		}
		
		#endregion

		#region AdmPlaceExamDatetimeCollection
		
		private TList<AdmPlaceExamDatetime> _admPlaceExamDatetimeScHallId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admPlaceExamDatetimeScHallId
		/// </summary>
		
		public TList<AdmPlaceExamDatetime> AdmPlaceExamDatetimeCollection
		{
			get
			{
				if (_admPlaceExamDatetimeScHallId == null)
				{
				_admPlaceExamDatetimeScHallId = new TList<AdmPlaceExamDatetime>();
				}
	
				return _admPlaceExamDatetimeScHallId;
			}
			set { _admPlaceExamDatetimeScHallId = value; }
		}
		
		#endregion

		#region ScScheduleDtlDayExceptionCollection
		
		private TList<ScScheduleDtlDayException> _scScheduleDtlDayExceptionScHallId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scScheduleDtlDayExceptionScHallId
		/// </summary>
		
		public TList<ScScheduleDtlDayException> ScScheduleDtlDayExceptionCollection
		{
			get
			{
				if (_scScheduleDtlDayExceptionScHallId == null)
				{
				_scScheduleDtlDayExceptionScHallId = new TList<ScScheduleDtlDayException>();
				}
	
				return _scScheduleDtlDayExceptionScHallId;
			}
			set { _scScheduleDtlDayExceptionScHallId = value; }
		}
		
		#endregion

		#region ScScheduleDtlDayCollection
		
		private TList<ScScheduleDtlDay> _scScheduleDtlDayScHallId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scScheduleDtlDayScHallId
		/// </summary>
		
		public TList<ScScheduleDtlDay> ScScheduleDtlDayCollection
		{
			get
			{
				if (_scScheduleDtlDayScHallId == null)
				{
				_scScheduleDtlDayScHallId = new TList<ScScheduleDtlDay>();
				}
	
				return _scScheduleDtlDayScHallId;
			}
			set { _scScheduleDtlDayScHallId = value; }
		}
		
		#endregion

		#region ScHallEquipCollection
		
		private TList<ScHallEquip> _scHallEquipScHallId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scHallEquipScHallId
		/// </summary>
		
		public TList<ScHallEquip> ScHallEquipCollection
		{
			get
			{
				if (_scHallEquipScHallId == null)
				{
				_scHallEquipScHallId = new TList<ScHallEquip>();
				}
	
				return _scHallEquipScHallId;
			}
			set { _scHallEquipScHallId = value; }
		}
		
		#endregion

		#region CoExamCommitteeCollection
		
		private TList<CoExamCommittee> _coExamCommitteeScHallId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coExamCommitteeScHallId
		/// </summary>
		
		public TList<CoExamCommittee> CoExamCommitteeCollection
		{
			get
			{
				if (_coExamCommitteeScHallId == null)
				{
				_coExamCommitteeScHallId = new TList<CoExamCommittee>();
				}
	
				return _coExamCommitteeScHallId;
			}
			set { _coExamCommitteeScHallId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ScHallEntityData _tmp = new ScHallEntityData();
						
			_tmp.ScHallId = this.ScHallId;
			_tmp.OriginalScHallId = this.OriginalScHallId;
			
			_tmp.ScBuildingId = this.ScBuildingId;
			_tmp.HallCode = this.HallCode;
			_tmp.DescrAr = this.DescrAr;
			_tmp.Capacity = this.Capacity;
			_tmp.IsShared = this.IsShared;
			_tmp.IsActive = this.IsActive;
			_tmp.DescrEn = this.DescrEn;
			_tmp.ExmCapcity = this.ExmCapcity;
			_tmp.CapacityMax = this.CapacityMax;
			_tmp.Floor = this.Floor;
			_tmp.ScCdeHallTypeId = this.ScCdeHallTypeId;
			_tmp.CrsSharedFlg = this.CrsSharedFlg;
			_tmp.OnlineFlg = this.OnlineFlg;
			
			#region Source Parent Composite Entities
			if (this.ScBuildingIdSource != null)
				_tmp.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource) as ScBuilding;
			if (this.ScCdeHallTypeIdSource != null)
				_tmp.ScCdeHallTypeIdSource = MakeCopyOf(this.ScCdeHallTypeIdSource) as ScCdeHallType;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._edStudCheatScHallId != null)
				_tmp.EdStudCheatCollection = (TList<EdStudCheat>) MakeCopyOf(this.EdStudCheatCollection); 
			if (this._pgThesisDiscussionDateScHallId != null)
				_tmp.PgThesisDiscussionDateCollection = (TList<PgThesisDiscussionDate>) MakeCopyOf(this.PgThesisDiscussionDateCollection); 
			if (this._scHallRsrvScHallId != null)
				_tmp.ScHallRsrvCollection = (TList<ScHallRsrv>) MakeCopyOf(this.ScHallRsrvCollection); 
			if (this._scGroupDayScHallId != null)
				_tmp.ScGroupDayCollection = (TList<ScGroupDay>) MakeCopyOf(this.ScGroupDayCollection); 
			if (this._coExamSchdlPlaceScHallId != null)
				_tmp.CoExamSchdlPlaceCollection = (TList<CoExamSchdlPlace>) MakeCopyOf(this.CoExamSchdlPlaceCollection); 
			if (this._pgThesisSeminarScHallId != null)
				_tmp.PgThesisSeminarCollection = (TList<PgThesisSeminar>) MakeCopyOf(this.PgThesisSeminarCollection); 
			if (this._scSchdlSlotScHallId != null)
				_tmp.ScSchdlSlotCollection = (TList<ScSchdlSlot>) MakeCopyOf(this.ScSchdlSlotCollection); 
			if (this._admPlaceExamLocScHallId != null)
				_tmp.AdmPlaceExamLocCollection = (TList<AdmPlaceExamLoc>) MakeCopyOf(this.AdmPlaceExamLocCollection); 
			if (this._admPlaceExamDatetimeScHallId != null)
				_tmp.AdmPlaceExamDatetimeCollection = (TList<AdmPlaceExamDatetime>) MakeCopyOf(this.AdmPlaceExamDatetimeCollection); 
			if (this._scScheduleDtlDayExceptionScHallId != null)
				_tmp.ScScheduleDtlDayExceptionCollection = (TList<ScScheduleDtlDayException>) MakeCopyOf(this.ScScheduleDtlDayExceptionCollection); 
			if (this._scScheduleDtlDayScHallId != null)
				_tmp.ScScheduleDtlDayCollection = (TList<ScScheduleDtlDay>) MakeCopyOf(this.ScScheduleDtlDayCollection); 
			if (this._scHallEquipScHallId != null)
				_tmp.ScHallEquipCollection = (TList<ScHallEquip>) MakeCopyOf(this.ScHallEquipCollection); 
			if (this._coExamCommitteeScHallId != null)
				_tmp.CoExamCommitteeCollection = (TList<CoExamCommittee>) MakeCopyOf(this.CoExamCommitteeCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ScHallEntityData _tmp = new ScHallEntityData();
						
			_tmp.ScHallId = this.ScHallId;
			_tmp.OriginalScHallId = this.OriginalScHallId;
			
			_tmp.ScBuildingId = this.ScBuildingId;
			_tmp.HallCode = this.HallCode;
			_tmp.DescrAr = this.DescrAr;
			_tmp.Capacity = this.Capacity;
			_tmp.IsShared = this.IsShared;
			_tmp.IsActive = this.IsActive;
			_tmp.DescrEn = this.DescrEn;
			_tmp.ExmCapcity = this.ExmCapcity;
			_tmp.CapacityMax = this.CapacityMax;
			_tmp.Floor = this.Floor;
			_tmp.ScCdeHallTypeId = this.ScCdeHallTypeId;
			_tmp.CrsSharedFlg = this.CrsSharedFlg;
			_tmp.OnlineFlg = this.OnlineFlg;
			
			#region Source Parent Composite Entities
			if (this.ScBuildingIdSource != null && existingCopies.Contains(this.ScBuildingIdSource))
				_tmp.ScBuildingIdSource = existingCopies[this.ScBuildingIdSource] as ScBuilding;
			else
				_tmp.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource, existingCopies) as ScBuilding;
			if (this.ScCdeHallTypeIdSource != null && existingCopies.Contains(this.ScCdeHallTypeIdSource))
				_tmp.ScCdeHallTypeIdSource = existingCopies[this.ScCdeHallTypeIdSource] as ScCdeHallType;
			else
				_tmp.ScCdeHallTypeIdSource = MakeCopyOf(this.ScCdeHallTypeIdSource, existingCopies) as ScCdeHallType;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EdStudCheatCollection = (TList<EdStudCheat>) MakeCopyOf(this.EdStudCheatCollection, existingCopies); 
			_tmp.PgThesisDiscussionDateCollection = (TList<PgThesisDiscussionDate>) MakeCopyOf(this.PgThesisDiscussionDateCollection, existingCopies); 
			_tmp.ScHallRsrvCollection = (TList<ScHallRsrv>) MakeCopyOf(this.ScHallRsrvCollection, existingCopies); 
			_tmp.ScGroupDayCollection = (TList<ScGroupDay>) MakeCopyOf(this.ScGroupDayCollection, existingCopies); 
			_tmp.CoExamSchdlPlaceCollection = (TList<CoExamSchdlPlace>) MakeCopyOf(this.CoExamSchdlPlaceCollection, existingCopies); 
			_tmp.PgThesisSeminarCollection = (TList<PgThesisSeminar>) MakeCopyOf(this.PgThesisSeminarCollection, existingCopies); 
			_tmp.ScSchdlSlotCollection = (TList<ScSchdlSlot>) MakeCopyOf(this.ScSchdlSlotCollection, existingCopies); 
			_tmp.AdmPlaceExamLocCollection = (TList<AdmPlaceExamLoc>) MakeCopyOf(this.AdmPlaceExamLocCollection, existingCopies); 
			_tmp.AdmPlaceExamDatetimeCollection = (TList<AdmPlaceExamDatetime>) MakeCopyOf(this.AdmPlaceExamDatetimeCollection, existingCopies); 
			_tmp.ScScheduleDtlDayExceptionCollection = (TList<ScScheduleDtlDayException>) MakeCopyOf(this.ScScheduleDtlDayExceptionCollection, existingCopies); 
			_tmp.ScScheduleDtlDayCollection = (TList<ScScheduleDtlDay>) MakeCopyOf(this.ScScheduleDtlDayCollection, existingCopies); 
			_tmp.ScHallEquipCollection = (TList<ScHallEquip>) MakeCopyOf(this.ScHallEquipCollection, existingCopies); 
			_tmp.CoExamCommitteeCollection = (TList<CoExamCommittee>) MakeCopyOf(this.CoExamCommitteeCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScHallColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ScHallColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScHallColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ScHallColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScHallColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ScHallColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ScHallEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ScHallEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScHallColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ScHallColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ScHallEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ScHallEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ScHallEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ScHall"/> object.
	/// </remarks>
	public class ScHallEventArgs : System.EventArgs
	{
		private ScHallColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ScHallEventArgs class.
		///</summary>
		public ScHallEventArgs(ScHallColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ScHallEventArgs class.
		///</summary>
		public ScHallEventArgs(ScHallColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ScHallColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ScHallColumn" />
		public ScHallColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ScHall related events.
	///</summary>
	public delegate void ScHallEventHandler(object sender, ScHallEventArgs e);
	
	#region ScHallComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ScHallComparer : System.Collections.Generic.IComparer<ScHall>
	{
		ScHallColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ScHallComparer"/> class.
        /// </summary>
		public ScHallComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ScHallComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ScHallComparer(ScHallColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="ScHall"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="ScHall"/> to compare.</param>
        /// <param name="b">The second <c>ScHall</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ScHall a, ScHall b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ScHall entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ScHall a, ScHall b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ScHallColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ScHallKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ScHall"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ScHallKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ScHallKey class.
		/// </summary>
		public ScHallKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ScHallKey class.
		/// </summary>
		public ScHallKey(ScHallBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.ScHallId = entity.ScHallId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ScHallKey class.
		/// </summary>
		public ScHallKey(System.Decimal _scHallId)
		{
			#region Init Properties

			this.ScHallId = _scHallId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ScHallBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ScHallBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ScHallId property
		private System.Decimal _scHallId;
		
		/// <summary>
		/// Gets or sets the ScHallId property.
		/// </summary>
		public System.Decimal ScHallId
		{
			get { return _scHallId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ScHallId = value;
				
				_scHallId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ScHallId = ( values["ScHallId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["ScHallId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ScHallId", ScHallId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ScHallId: {0}{1}",
								ScHallId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ScHallColumn Enum
	
	/// <summary>
	/// Enumerate the ScHall columns.
	/// </summary>
	[Serializable]
	public enum ScHallColumn : int
	{
		/// <summary>
		/// ScHallId : القاعات
		/// </summary>
		[EnumTextValue("SC_HALL_ID")]
		[ColumnEnum("SC_HALL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		ScHallId = 1,
		/// <summary>
		/// ScBuildingId : 
		/// </summary>
		[EnumTextValue("SC_BUILDING_ID")]
		[ColumnEnum("SC_BUILDING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ScBuildingId = 2,
		/// <summary>
		/// HallCode : 
		/// </summary>
		[EnumTextValue("HALL_CODE")]
		[ColumnEnum("HALL_CODE", typeof(System.String), System.Data.DbType.String, false, false, false, 10)]
		HallCode = 3,
		/// <summary>
		/// DescrAr : 
		/// </summary>
		[EnumTextValue("DESCR_AR")]
		[ColumnEnum("DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		DescrAr = 4,
		/// <summary>
		/// Capacity : 
		/// </summary>
		[EnumTextValue("CAPACITY")]
		[ColumnEnum("CAPACITY", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		Capacity = 5,
		/// <summary>
		/// IsShared : 
		/// </summary>
		[EnumTextValue("IS_SHARED")]
		[ColumnEnum("IS_SHARED", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsShared = 6,
		/// <summary>
		/// IsActive : 
		/// </summary>
		[EnumTextValue("IS_ACTIVE")]
		[ColumnEnum("IS_ACTIVE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsActive = 7,
		/// <summary>
		/// DescrEn : 
		/// </summary>
		[EnumTextValue("DESCR_EN")]
		[ColumnEnum("DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		DescrEn = 8,
		/// <summary>
		/// ExmCapcity : 
		/// </summary>
		[EnumTextValue("EXM_CAPCITY")]
		[ColumnEnum("EXM_CAPCITY", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ExmCapcity = 9,
		/// <summary>
		/// CapacityMax : 
		/// </summary>
		[EnumTextValue("CAPACITY_MAX")]
		[ColumnEnum("CAPACITY_MAX", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CapacityMax = 10,
		/// <summary>
		/// Floor : مؤشر قاعة اونلاين virtual
		/// </summary>
		[EnumTextValue("FLOOR")]
		[ColumnEnum("FLOOR", typeof(System.String), System.Data.DbType.String, false, false, true, 10)]
		Floor = 11,
		/// <summary>
		/// ScCdeHallTypeId : 
		/// </summary>
		[EnumTextValue("SC_CDE_HALL_TYPE_ID")]
		[ColumnEnum("SC_CDE_HALL_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScCdeHallTypeId = 12,
		/// <summary>
		/// CrsSharedFlg : 
		/// </summary>
		[EnumTextValue("CRS_SHARED_FLG")]
		[ColumnEnum("CRS_SHARED_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		CrsSharedFlg = 13,
		/// <summary>
		/// OnlineFlg : 
		/// </summary>
		[EnumTextValue("ONLINE_FLG")]
		[ColumnEnum("ONLINE_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		OnlineFlg = 14
	}//End enum

	#endregion ScHallColumn Enum

} // end namespace
