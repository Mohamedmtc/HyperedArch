
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file FeeUserFundReq.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'FEE_USER_FUND_REQ' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class FeeUserFundReqBase : EntityBase, IFeeUserFundReq, IEntityId<FeeUserFundReqKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private FeeUserFundReqEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private FeeUserFundReqEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private FeeUserFundReqEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<FeeUserFundReq> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeUserFundReqEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeUserFundReqEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="FeeUserFundReqBase"/> instance.
		///</summary>
		public FeeUserFundReqBase()
		{
			this.entityData = new FeeUserFundReqEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="FeeUserFundReqBase"/> instance.
		///</summary>
		///<param name="_feeUserFundReqId">طلبات السلف</param>
		///<param name="_edAcadYearId"></param>
		///<param name="_reqNum">رقم السند Automatic every year</param>
		///<param name="_reqDate">تاريخ الطلب</param>
		///<param name="_userName">اسم المستفيد</param>
		///<param name="_feeCdeBondItemId">بند السند</param>
		///<param name="_gsCodeCurrencyId">العملة الحالية</param>
		///<param name="_tempAmount">المبلغ المؤقت</param>
		///<param name="_reqAmount">المبلغ الفعلي</param>
		///<param name="_remainAmount">المبلغ الحالى المتبقى فى الخزنه</param>
		///<param name="_attchdDocPath">Attached file</param>
		///<param name="_notes">البيان</param>
		///<param name="_approveFlg">مؤشر اعتماد</param>
		///<param name="_approveDate">تاريخ الاعتماد</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public FeeUserFundReqBase(System.Decimal _feeUserFundReqId, System.Decimal _edAcadYearId, 
			System.Decimal _reqNum, System.DateTime _reqDate, System.String _userName, 
			System.Int32 _feeCdeBondItemId, System.Decimal _gsCodeCurrencyId, System.Decimal? _tempAmount, 
			System.Decimal? _reqAmount, System.Decimal? _remainAmount, System.String _attchdDocPath, 
			System.String _notes, System.Int32? _approveFlg, System.DateTime? _approveDate, 
			System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			this.entityData = new FeeUserFundReqEntityData();
			this.backupData = null;

			this.FeeUserFundReqId = _feeUserFundReqId;
			this.EdAcadYearId = _edAcadYearId;
			this.ReqNum = _reqNum;
			this.ReqDate = _reqDate;
			this.UserName = _userName;
			this.FeeCdeBondItemId = _feeCdeBondItemId;
			this.GsCodeCurrencyId = _gsCodeCurrencyId;
			this.TempAmount = _tempAmount;
			this.ReqAmount = _reqAmount;
			this.RemainAmount = _remainAmount;
			this.AttchdDocPath = _attchdDocPath;
			this.Notes = _notes;
			this.ApproveFlg = _approveFlg;
			this.ApproveDate = _approveDate;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="FeeUserFundReq"/> instance.
		///</summary>
		///<param name="_feeUserFundReqId">طلبات السلف</param>
		///<param name="_edAcadYearId"></param>
		///<param name="_reqNum">رقم السند Automatic every year</param>
		///<param name="_reqDate">تاريخ الطلب</param>
		///<param name="_userName">اسم المستفيد</param>
		///<param name="_feeCdeBondItemId">بند السند</param>
		///<param name="_gsCodeCurrencyId">العملة الحالية</param>
		///<param name="_tempAmount">المبلغ المؤقت</param>
		///<param name="_reqAmount">المبلغ الفعلي</param>
		///<param name="_remainAmount">المبلغ الحالى المتبقى فى الخزنه</param>
		///<param name="_attchdDocPath">Attached file</param>
		///<param name="_notes">البيان</param>
		///<param name="_approveFlg">مؤشر اعتماد</param>
		///<param name="_approveDate">تاريخ الاعتماد</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static FeeUserFundReq CreateFeeUserFundReq(System.Decimal _feeUserFundReqId, System.Decimal _edAcadYearId, 
			System.Decimal _reqNum, System.DateTime _reqDate, System.String _userName, 
			System.Int32 _feeCdeBondItemId, System.Decimal _gsCodeCurrencyId, System.Decimal? _tempAmount, 
			System.Decimal? _reqAmount, System.Decimal? _remainAmount, System.String _attchdDocPath, 
			System.String _notes, System.Int32? _approveFlg, System.DateTime? _approveDate, 
			System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			FeeUserFundReq newFeeUserFundReq = new FeeUserFundReq();
			newFeeUserFundReq.FeeUserFundReqId = _feeUserFundReqId;
			newFeeUserFundReq.EdAcadYearId = _edAcadYearId;
			newFeeUserFundReq.ReqNum = _reqNum;
			newFeeUserFundReq.ReqDate = _reqDate;
			newFeeUserFundReq.UserName = _userName;
			newFeeUserFundReq.FeeCdeBondItemId = _feeCdeBondItemId;
			newFeeUserFundReq.GsCodeCurrencyId = _gsCodeCurrencyId;
			newFeeUserFundReq.TempAmount = _tempAmount;
			newFeeUserFundReq.ReqAmount = _reqAmount;
			newFeeUserFundReq.RemainAmount = _remainAmount;
			newFeeUserFundReq.AttchdDocPath = _attchdDocPath;
			newFeeUserFundReq.Notes = _notes;
			newFeeUserFundReq.ApproveFlg = _approveFlg;
			newFeeUserFundReq.ApproveDate = _approveDate;
			newFeeUserFundReq.SeUserId = _seUserId;
			newFeeUserFundReq.LastDate = _lastDate;
			return newFeeUserFundReq;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the FeeUserFundReqId property. 
		///		طلبات السلف
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"طلبات السلف"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal FeeUserFundReqId
		{
			get
			{
				return this.entityData.FeeUserFundReqId; 
			}
			
			set
			{
				if (this.entityData.FeeUserFundReqId == value)
					return;
					
				OnColumnChanging(FeeUserFundReqColumn.FeeUserFundReqId, this.entityData.FeeUserFundReqId);
				this.entityData.FeeUserFundReqId = value;
				this.EntityId.FeeUserFundReqId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserFundReqColumn.FeeUserFundReqId, this.entityData.FeeUserFundReqId);
				OnPropertyChanged("FeeUserFundReqId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the FEE_USER_FUND_REQ_ID property.
		///		طلبات السلف
		/// </summary>
		/// <remarks>This is the original value of the FEE_USER_FUND_REQ_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalFeeUserFundReqId
		{
			get { return this.entityData.OriginalFeeUserFundReqId; }
			set { this.entityData.OriginalFeeUserFundReqId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(FeeUserFundReqColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserFundReqColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReqNum property. 
		///		رقم السند Automatic every year
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"رقم السند Automatic every year"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ReqNum
		{
			get
			{
				return this.entityData.ReqNum; 
			}
			
			set
			{
				if (this.entityData.ReqNum == value)
					return;
					
				OnColumnChanging(FeeUserFundReqColumn.ReqNum, this.entityData.ReqNum);
				this.entityData.ReqNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserFundReqColumn.ReqNum, this.entityData.ReqNum);
				OnPropertyChanged("ReqNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReqDate property. 
		///		تاريخ الطلب
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"تاريخ الطلب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ReqDate
		{
			get
			{
				return this.entityData.ReqDate; 
			}
			
			set
			{
				if (this.entityData.ReqDate == value)
					return;
					
				OnColumnChanging(FeeUserFundReqColumn.ReqDate, this.entityData.ReqDate);
				this.entityData.ReqDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserFundReqColumn.ReqDate, this.entityData.ReqDate);
				OnPropertyChanged("ReqDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserName property. 
		///		اسم المستفيد
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"اسم المستفيد"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String UserName
		{
			get
			{
				return this.entityData.UserName; 
			}
			
			set
			{
				if (this.entityData.UserName == value)
					return;
					
				OnColumnChanging(FeeUserFundReqColumn.UserName, this.entityData.UserName);
				this.entityData.UserName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserFundReqColumn.UserName, this.entityData.UserName);
				OnPropertyChanged("UserName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeCdeBondItemId property. 
		///		بند السند
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"بند السند"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 FeeCdeBondItemId
		{
			get
			{
				return this.entityData.FeeCdeBondItemId; 
			}
			
			set
			{
				if (this.entityData.FeeCdeBondItemId == value)
					return;
					
				OnColumnChanging(FeeUserFundReqColumn.FeeCdeBondItemId, this.entityData.FeeCdeBondItemId);
				this.entityData.FeeCdeBondItemId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserFundReqColumn.FeeCdeBondItemId, this.entityData.FeeCdeBondItemId);
				OnPropertyChanged("FeeCdeBondItemId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeCurrencyId property. 
		///		العملة الحالية
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"العملة الحالية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsCodeCurrencyId
		{
			get
			{
				return this.entityData.GsCodeCurrencyId; 
			}
			
			set
			{
				if (this.entityData.GsCodeCurrencyId == value)
					return;
					
				OnColumnChanging(FeeUserFundReqColumn.GsCodeCurrencyId, this.entityData.GsCodeCurrencyId);
				this.entityData.GsCodeCurrencyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserFundReqColumn.GsCodeCurrencyId, this.entityData.GsCodeCurrencyId);
				OnPropertyChanged("GsCodeCurrencyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TempAmount property. 
		///		المبلغ المؤقت
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTempAmountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"المبلغ المؤقت"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TempAmount
		{
			get
			{
				return this.entityData.TempAmount; 
			}
			
			set
			{
				if (this.entityData.TempAmount == value)
					return;
					
				OnColumnChanging(FeeUserFundReqColumn.TempAmount, this.entityData.TempAmount);
				this.entityData.TempAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserFundReqColumn.TempAmount, this.entityData.TempAmount);
				OnPropertyChanged("TempAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReqAmount property. 
		///		المبلغ الفعلي
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsReqAmountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"المبلغ الفعلي"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ReqAmount
		{
			get
			{
				return this.entityData.ReqAmount; 
			}
			
			set
			{
				if (this.entityData.ReqAmount == value)
					return;
					
				OnColumnChanging(FeeUserFundReqColumn.ReqAmount, this.entityData.ReqAmount);
				this.entityData.ReqAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserFundReqColumn.ReqAmount, this.entityData.ReqAmount);
				OnPropertyChanged("ReqAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RemainAmount property. 
		///		المبلغ الحالى المتبقى فى الخزنه
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRemainAmountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"المبلغ الحالى المتبقى فى الخزنه"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RemainAmount
		{
			get
			{
				return this.entityData.RemainAmount; 
			}
			
			set
			{
				if (this.entityData.RemainAmount == value)
					return;
					
				OnColumnChanging(FeeUserFundReqColumn.RemainAmount, this.entityData.RemainAmount);
				this.entityData.RemainAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserFundReqColumn.RemainAmount, this.entityData.RemainAmount);
				OnPropertyChanged("RemainAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AttchdDocPath property. 
		///		Attached file
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Attached file"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String AttchdDocPath
		{
			get
			{
				return this.entityData.AttchdDocPath; 
			}
			
			set
			{
				if (this.entityData.AttchdDocPath == value)
					return;
					
				OnColumnChanging(FeeUserFundReqColumn.AttchdDocPath, this.entityData.AttchdDocPath);
				this.entityData.AttchdDocPath = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserFundReqColumn.AttchdDocPath, this.entityData.AttchdDocPath);
				OnPropertyChanged("AttchdDocPath");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		البيان
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"البيان"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(FeeUserFundReqColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserFundReqColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApproveFlg property. 
		///		مؤشر اعتماد
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsApproveFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مؤشر اعتماد"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ApproveFlg
		{
			get
			{
				return this.entityData.ApproveFlg; 
			}
			
			set
			{
				if (this.entityData.ApproveFlg == value)
					return;
					
				OnColumnChanging(FeeUserFundReqColumn.ApproveFlg, this.entityData.ApproveFlg);
				this.entityData.ApproveFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserFundReqColumn.ApproveFlg, this.entityData.ApproveFlg);
				OnPropertyChanged("ApproveFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApproveDate property. 
		///		تاريخ الاعتماد
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsApproveDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ الاعتماد"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ApproveDate
		{
			get
			{
				return this.entityData.ApproveDate; 
			}
			
			set
			{
				if (this.entityData.ApproveDate == value)
					return;
					
				OnColumnChanging(FeeUserFundReqColumn.ApproveDate, this.entityData.ApproveDate);
				this.entityData.ApproveDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserFundReqColumn.ApproveDate, this.entityData.ApproveDate);
				OnPropertyChanged("ApproveDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(FeeUserFundReqColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserFundReqColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(FeeUserFundReqColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeUserFundReqColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeCdeBondItem"/>.
		/// </summary>
		/// <value>The source FeeCdeBondItem for FeeCdeBondItemId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeCdeBondItem FeeCdeBondItemIdSource
      	{
            get { return entityData.FeeCdeBondItemIdSource; }
            set { entityData.FeeCdeBondItemIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCurrency"/>.
		/// </summary>
		/// <value>The source GsCodeCurrency for GsCodeCurrencyId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeCurrency GsCodeCurrencyIdSource
      	{
            get { return entityData.GsCodeCurrencyIdSource; }
            set { entityData.GsCodeCurrencyIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("UserName", "User Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UserName", "User Name", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 250));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "FEE_USER_FUND_REQ"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"FEE_USER_FUND_REQ_ID", "ED_ACAD_YEAR_ID", "REQ_NUM", "REQ_DATE", "USER_NAME", "FEE_CDE_BOND_ITEM_ID", "GS_CODE_CURRENCY_ID", "TEMP_AMOUNT", "REQ_AMOUNT", "REMAIN_AMOUNT", "ATTCHD_DOC_PATH", "NOTES", "APPROVE_FLG", "APPROVE_DATE", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as FeeUserFundReqEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (FeeUserFundReq) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<FeeUserFundReq>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as FeeUserFundReq);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed FeeUserFundReq Entity 
		///</summary>
		protected virtual FeeUserFundReq Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			FeeUserFundReq copy = new FeeUserFundReq();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.FeeUserFundReqId = this.FeeUserFundReqId;
					copy.OriginalFeeUserFundReqId = this.OriginalFeeUserFundReqId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.ReqNum = this.ReqNum;
				copy.ReqDate = this.ReqDate;
				copy.UserName = this.UserName;
				copy.FeeCdeBondItemId = this.FeeCdeBondItemId;
				copy.GsCodeCurrencyId = this.GsCodeCurrencyId;
				copy.TempAmount = this.TempAmount;
				copy.ReqAmount = this.ReqAmount;
				copy.RemainAmount = this.RemainAmount;
				copy.AttchdDocPath = this.AttchdDocPath;
				copy.Notes = this.Notes;
				copy.ApproveFlg = this.ApproveFlg;
				copy.ApproveDate = this.ApproveDate;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.FeeCdeBondItemIdSource != null && existingCopies.Contains(this.FeeCdeBondItemIdSource))
				copy.FeeCdeBondItemIdSource = existingCopies[this.FeeCdeBondItemIdSource] as FeeCdeBondItem;
			else
				copy.FeeCdeBondItemIdSource = MakeCopyOf(this.FeeCdeBondItemIdSource, existingCopies) as FeeCdeBondItem;
			if (this.GsCodeCurrencyIdSource != null && existingCopies.Contains(this.GsCodeCurrencyIdSource))
				copy.GsCodeCurrencyIdSource = existingCopies[this.GsCodeCurrencyIdSource] as GsCodeCurrency;
			else
				copy.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource, existingCopies) as GsCodeCurrency;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed FeeUserFundReq Entity 
		///</summary>
		public virtual FeeUserFundReq Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed FeeUserFundReq Entity which is a deep copy of the current entity.
		///</summary>
		public virtual FeeUserFundReq DeepCopy()
		{
			return EntityHelper.Clone<FeeUserFundReq>(this as FeeUserFundReq);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as FeeUserFundReqEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new FeeUserFundReqEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as FeeUserFundReqEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(FeeUserFundReqColumn column)
		{
			switch(column)
			{
					case FeeUserFundReqColumn.FeeUserFundReqId:
					return entityData.FeeUserFundReqId != _originalData.FeeUserFundReqId;
					case FeeUserFundReqColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case FeeUserFundReqColumn.ReqNum:
					return entityData.ReqNum != _originalData.ReqNum;
					case FeeUserFundReqColumn.ReqDate:
					return entityData.ReqDate != _originalData.ReqDate;
					case FeeUserFundReqColumn.UserName:
					return entityData.UserName != _originalData.UserName;
					case FeeUserFundReqColumn.FeeCdeBondItemId:
					return entityData.FeeCdeBondItemId != _originalData.FeeCdeBondItemId;
					case FeeUserFundReqColumn.GsCodeCurrencyId:
					return entityData.GsCodeCurrencyId != _originalData.GsCodeCurrencyId;
					case FeeUserFundReqColumn.TempAmount:
					return entityData.TempAmount != _originalData.TempAmount;
					case FeeUserFundReqColumn.ReqAmount:
					return entityData.ReqAmount != _originalData.ReqAmount;
					case FeeUserFundReqColumn.RemainAmount:
					return entityData.RemainAmount != _originalData.RemainAmount;
					case FeeUserFundReqColumn.AttchdDocPath:
					return entityData.AttchdDocPath != _originalData.AttchdDocPath;
					case FeeUserFundReqColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case FeeUserFundReqColumn.ApproveFlg:
					return entityData.ApproveFlg != _originalData.ApproveFlg;
					case FeeUserFundReqColumn.ApproveDate:
					return entityData.ApproveDate != _originalData.ApproveDate;
					case FeeUserFundReqColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case FeeUserFundReqColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< FeeUserFundReqColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.FeeUserFundReqId != _originalData.FeeUserFundReqId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.ReqNum != _originalData.ReqNum;
			result = result || entityData.ReqDate != _originalData.ReqDate;
			result = result || entityData.UserName != _originalData.UserName;
			result = result || entityData.FeeCdeBondItemId != _originalData.FeeCdeBondItemId;
			result = result || entityData.GsCodeCurrencyId != _originalData.GsCodeCurrencyId;
			result = result || entityData.TempAmount != _originalData.TempAmount;
			result = result || entityData.ReqAmount != _originalData.ReqAmount;
			result = result || entityData.RemainAmount != _originalData.RemainAmount;
			result = result || entityData.AttchdDocPath != _originalData.AttchdDocPath;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.ApproveFlg != _originalData.ApproveFlg;
			result = result || entityData.ApproveDate != _originalData.ApproveDate;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a FeeUserFundReq Entity with the original data.
		///</summary>
		public FeeUserFundReq GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateFeeUserFundReq(
				_originalData.FeeUserFundReqId,
				_originalData.EdAcadYearId,
				_originalData.ReqNum,
				_originalData.ReqDate,
				_originalData.UserName,
				_originalData.FeeCdeBondItemId,
				_originalData.GsCodeCurrencyId,
				_originalData.TempAmount,
				_originalData.ReqAmount,
				_originalData.RemainAmount,
				_originalData.AttchdDocPath,
				_originalData.Notes,
				_originalData.ApproveFlg,
				_originalData.ApproveDate,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (FeeUserFundReq)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="FeeUserFundReqBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is FeeUserFundReqBase)
				return ValueEquals(this, (FeeUserFundReqBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="FeeUserFundReqBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.FeeUserFundReqId.GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					this.ReqNum.GetHashCode() ^ 
					this.ReqDate.GetHashCode() ^ 
					this.UserName.GetHashCode() ^ 
					this.FeeCdeBondItemId.GetHashCode() ^ 
					this.GsCodeCurrencyId.GetHashCode() ^ 
					((this.TempAmount == null) ? string.Empty : this.TempAmount.ToString()).GetHashCode() ^ 
					((this.ReqAmount == null) ? string.Empty : this.ReqAmount.ToString()).GetHashCode() ^ 
					((this.RemainAmount == null) ? string.Empty : this.RemainAmount.ToString()).GetHashCode() ^ 
					((this.AttchdDocPath == null) ? string.Empty : this.AttchdDocPath.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.ApproveFlg == null) ? string.Empty : this.ApproveFlg.ToString()).GetHashCode() ^ 
					((this.ApproveDate == null) ? string.Empty : this.ApproveDate.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="FeeUserFundReqBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(FeeUserFundReqBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="FeeUserFundReqBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="FeeUserFundReqBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="FeeUserFundReqBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(FeeUserFundReqBase Object1, FeeUserFundReqBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.FeeUserFundReqId != Object2.FeeUserFundReqId)
				equal = false;
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if (Object1.ReqNum != Object2.ReqNum)
				equal = false;
			if (Object1.ReqDate != Object2.ReqDate)
				equal = false;
			if (Object1.UserName != Object2.UserName)
				equal = false;
			if (Object1.FeeCdeBondItemId != Object2.FeeCdeBondItemId)
				equal = false;
			if (Object1.GsCodeCurrencyId != Object2.GsCodeCurrencyId)
				equal = false;
			if ( Object1.TempAmount != null && Object2.TempAmount != null )
			{
				if (Object1.TempAmount != Object2.TempAmount)
					equal = false;
			}
			else if (Object1.TempAmount == null ^ Object2.TempAmount == null )
			{
				equal = false;
			}
			if ( Object1.ReqAmount != null && Object2.ReqAmount != null )
			{
				if (Object1.ReqAmount != Object2.ReqAmount)
					equal = false;
			}
			else if (Object1.ReqAmount == null ^ Object2.ReqAmount == null )
			{
				equal = false;
			}
			if ( Object1.RemainAmount != null && Object2.RemainAmount != null )
			{
				if (Object1.RemainAmount != Object2.RemainAmount)
					equal = false;
			}
			else if (Object1.RemainAmount == null ^ Object2.RemainAmount == null )
			{
				equal = false;
			}
			if ( Object1.AttchdDocPath != null && Object2.AttchdDocPath != null )
			{
				if (Object1.AttchdDocPath != Object2.AttchdDocPath)
					equal = false;
			}
			else if (Object1.AttchdDocPath == null ^ Object2.AttchdDocPath == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.ApproveFlg != null && Object2.ApproveFlg != null )
			{
				if (Object1.ApproveFlg != Object2.ApproveFlg)
					equal = false;
			}
			else if (Object1.ApproveFlg == null ^ Object2.ApproveFlg == null )
			{
				equal = false;
			}
			if ( Object1.ApproveDate != null && Object2.ApproveDate != null )
			{
				if (Object1.ApproveDate != Object2.ApproveDate)
					equal = false;
			}
			else if (Object1.ApproveDate == null ^ Object2.ApproveDate == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((FeeUserFundReqBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static FeeUserFundReqComparer GetComparer()
        {
            return new FeeUserFundReqComparer();
        }
        */

        // Comparer delegates back to FeeUserFundReq
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(FeeUserFundReq rhs, FeeUserFundReqColumn which)
        {
            switch (which)
            {
            	
            	
            	case FeeUserFundReqColumn.FeeUserFundReqId:
            		return this.FeeUserFundReqId.CompareTo(rhs.FeeUserFundReqId);
            		
            		                 
            	
            	
            	case FeeUserFundReqColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case FeeUserFundReqColumn.ReqNum:
            		return this.ReqNum.CompareTo(rhs.ReqNum);
            		
            		                 
            	
            	
            	case FeeUserFundReqColumn.ReqDate:
            		return this.ReqDate.CompareTo(rhs.ReqDate);
            		
            		                 
            	
            	
            	case FeeUserFundReqColumn.UserName:
            		return this.UserName.CompareTo(rhs.UserName);
            		
            		                 
            	
            	
            	case FeeUserFundReqColumn.FeeCdeBondItemId:
            		return this.FeeCdeBondItemId.CompareTo(rhs.FeeCdeBondItemId);
            		
            		                 
            	
            	
            	case FeeUserFundReqColumn.GsCodeCurrencyId:
            		return this.GsCodeCurrencyId.CompareTo(rhs.GsCodeCurrencyId);
            		
            		                 
            	
            	
            	case FeeUserFundReqColumn.TempAmount:
            		return this.TempAmount.Value.CompareTo(rhs.TempAmount.Value);
            		
            		                 
            	
            	
            	case FeeUserFundReqColumn.ReqAmount:
            		return this.ReqAmount.Value.CompareTo(rhs.ReqAmount.Value);
            		
            		                 
            	
            	
            	case FeeUserFundReqColumn.RemainAmount:
            		return this.RemainAmount.Value.CompareTo(rhs.RemainAmount.Value);
            		
            		                 
            	
            	
            	case FeeUserFundReqColumn.AttchdDocPath:
            		return this.AttchdDocPath.CompareTo(rhs.AttchdDocPath);
            		
            		                 
            	
            	
            	case FeeUserFundReqColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case FeeUserFundReqColumn.ApproveFlg:
            		return this.ApproveFlg.Value.CompareTo(rhs.ApproveFlg.Value);
            		
            		                 
            	
            	
            	case FeeUserFundReqColumn.ApproveDate:
            		return this.ApproveDate.Value.CompareTo(rhs.ApproveDate.Value);
            		
            		                 
            	
            	
            	case FeeUserFundReqColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case FeeUserFundReqColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<FeeUserFundReqKey> Members
		
		// member variable for the EntityId property
		private FeeUserFundReqKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual FeeUserFundReqKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new FeeUserFundReqKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("FeeUserFundReq")
					.Append("|").Append( this.FeeUserFundReqId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{17}{16}- FeeUserFundReqId: {0}{16}- EdAcadYearId: {1}{16}- ReqNum: {2}{16}- ReqDate: {3}{16}- UserName: {4}{16}- FeeCdeBondItemId: {5}{16}- GsCodeCurrencyId: {6}{16}- TempAmount: {7}{16}- ReqAmount: {8}{16}- RemainAmount: {9}{16}- AttchdDocPath: {10}{16}- Notes: {11}{16}- ApproveFlg: {12}{16}- ApproveDate: {13}{16}- SeUserId: {14}{16}- LastDate: {15}{16}{18}", 
				this.FeeUserFundReqId,
				this.EdAcadYearId,
				this.ReqNum,
				this.ReqDate,
				this.UserName,
				this.FeeCdeBondItemId,
				this.GsCodeCurrencyId,
				(this.TempAmount == null) ? string.Empty : this.TempAmount.ToString(),
				(this.ReqAmount == null) ? string.Empty : this.ReqAmount.ToString(),
				(this.RemainAmount == null) ? string.Empty : this.RemainAmount.ToString(),
				(this.AttchdDocPath == null) ? string.Empty : this.AttchdDocPath.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.ApproveFlg == null) ? string.Empty : this.ApproveFlg.ToString(),
				(this.ApproveDate == null) ? string.Empty : this.ApproveDate.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'FEE_USER_FUND_REQ' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class FeeUserFundReqEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// FEE_USER_FUND_REQ_ID : طلبات السلف
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "FEE_USER_FUND_REQ"</remarks>
		public System.Decimal FeeUserFundReqId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalFeeUserFundReqId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// REQ_NUM : رقم السند Automatic every year
		/// </summary>
		public System.Decimal		  ReqNum = 0.0m;
		
		/// <summary>
		/// REQ_DATE : تاريخ الطلب
		/// </summary>
		public System.DateTime		  ReqDate = DateTime.MinValue;
		
		/// <summary>
		/// USER_NAME : اسم المستفيد
		/// </summary>
		public System.String		  UserName = string.Empty;
		
		/// <summary>
		/// FEE_CDE_BOND_ITEM_ID : بند السند
		/// </summary>
		public System.Int32		  FeeCdeBondItemId = (int)0;
		
		/// <summary>
		/// GS_CODE_CURRENCY_ID : العملة الحالية
		/// </summary>
		public System.Decimal		  GsCodeCurrencyId = 0.0m;
		
		/// <summary>
		/// TEMP_AMOUNT : المبلغ المؤقت
		/// </summary>
		public System.Decimal?		  TempAmount = null;
		
		/// <summary>
		/// REQ_AMOUNT : المبلغ الفعلي
		/// </summary>
		public System.Decimal?		  ReqAmount = null;
		
		/// <summary>
		/// REMAIN_AMOUNT : المبلغ الحالى المتبقى فى الخزنه
		/// </summary>
		public System.Decimal?		  RemainAmount = null;
		
		/// <summary>
		/// ATTCHD_DOC_PATH : Attached file
		/// </summary>
		public System.String		  AttchdDocPath = null;
		
		/// <summary>
		/// NOTES : البيان
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// APPROVE_FLG : مؤشر اعتماد
		/// </summary>
		public System.Int32?		  ApproveFlg = null;
		
		/// <summary>
		/// APPROVE_DATE : تاريخ الاعتماد
		/// </summary>
		public System.DateTime?		  ApproveDate = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private FeeCdeBondItem _feeCdeBondItemIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeCdeBondItem"/>.
		/// </summary>
		/// <value>The source FeeCdeBondItem for FeeCdeBondItemId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeCdeBondItem FeeCdeBondItemIdSource
      	{
            get { return this._feeCdeBondItemIdSource; }
            set { this._feeCdeBondItemIdSource = value; }
      	}
		private GsCodeCurrency _gsCodeCurrencyIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCurrency"/>.
		/// </summary>
		/// <value>The source GsCodeCurrency for GsCodeCurrencyId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeCurrency GsCodeCurrencyIdSource
      	{
            get { return this._gsCodeCurrencyIdSource; }
            set { this._gsCodeCurrencyIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			FeeUserFundReqEntityData _tmp = new FeeUserFundReqEntityData();
						
			_tmp.FeeUserFundReqId = this.FeeUserFundReqId;
			_tmp.OriginalFeeUserFundReqId = this.OriginalFeeUserFundReqId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.ReqNum = this.ReqNum;
			_tmp.ReqDate = this.ReqDate;
			_tmp.UserName = this.UserName;
			_tmp.FeeCdeBondItemId = this.FeeCdeBondItemId;
			_tmp.GsCodeCurrencyId = this.GsCodeCurrencyId;
			_tmp.TempAmount = this.TempAmount;
			_tmp.ReqAmount = this.ReqAmount;
			_tmp.RemainAmount = this.RemainAmount;
			_tmp.AttchdDocPath = this.AttchdDocPath;
			_tmp.Notes = this.Notes;
			_tmp.ApproveFlg = this.ApproveFlg;
			_tmp.ApproveDate = this.ApproveDate;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.FeeCdeBondItemIdSource != null)
				_tmp.FeeCdeBondItemIdSource = MakeCopyOf(this.FeeCdeBondItemIdSource) as FeeCdeBondItem;
			if (this.GsCodeCurrencyIdSource != null)
				_tmp.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource) as GsCodeCurrency;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			FeeUserFundReqEntityData _tmp = new FeeUserFundReqEntityData();
						
			_tmp.FeeUserFundReqId = this.FeeUserFundReqId;
			_tmp.OriginalFeeUserFundReqId = this.OriginalFeeUserFundReqId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.ReqNum = this.ReqNum;
			_tmp.ReqDate = this.ReqDate;
			_tmp.UserName = this.UserName;
			_tmp.FeeCdeBondItemId = this.FeeCdeBondItemId;
			_tmp.GsCodeCurrencyId = this.GsCodeCurrencyId;
			_tmp.TempAmount = this.TempAmount;
			_tmp.ReqAmount = this.ReqAmount;
			_tmp.RemainAmount = this.RemainAmount;
			_tmp.AttchdDocPath = this.AttchdDocPath;
			_tmp.Notes = this.Notes;
			_tmp.ApproveFlg = this.ApproveFlg;
			_tmp.ApproveDate = this.ApproveDate;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.FeeCdeBondItemIdSource != null && existingCopies.Contains(this.FeeCdeBondItemIdSource))
				_tmp.FeeCdeBondItemIdSource = existingCopies[this.FeeCdeBondItemIdSource] as FeeCdeBondItem;
			else
				_tmp.FeeCdeBondItemIdSource = MakeCopyOf(this.FeeCdeBondItemIdSource, existingCopies) as FeeCdeBondItem;
			if (this.GsCodeCurrencyIdSource != null && existingCopies.Contains(this.GsCodeCurrencyIdSource))
				_tmp.GsCodeCurrencyIdSource = existingCopies[this.GsCodeCurrencyIdSource] as GsCodeCurrency;
			else
				_tmp.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource, existingCopies) as GsCodeCurrency;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeUserFundReqColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(FeeUserFundReqColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeUserFundReqColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(FeeUserFundReqColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeUserFundReqColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(FeeUserFundReqColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				FeeUserFundReqEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new FeeUserFundReqEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeUserFundReqColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(FeeUserFundReqColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				FeeUserFundReqEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new FeeUserFundReqEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region FeeUserFundReqEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="FeeUserFundReq"/> object.
	/// </remarks>
	public class FeeUserFundReqEventArgs : System.EventArgs
	{
		private FeeUserFundReqColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the FeeUserFundReqEventArgs class.
		///</summary>
		public FeeUserFundReqEventArgs(FeeUserFundReqColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the FeeUserFundReqEventArgs class.
		///</summary>
		public FeeUserFundReqEventArgs(FeeUserFundReqColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The FeeUserFundReqColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="FeeUserFundReqColumn" />
		public FeeUserFundReqColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all FeeUserFundReq related events.
	///</summary>
	public delegate void FeeUserFundReqEventHandler(object sender, FeeUserFundReqEventArgs e);
	
	#region FeeUserFundReqComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class FeeUserFundReqComparer : System.Collections.Generic.IComparer<FeeUserFundReq>
	{
		FeeUserFundReqColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:FeeUserFundReqComparer"/> class.
        /// </summary>
		public FeeUserFundReqComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:FeeUserFundReqComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public FeeUserFundReqComparer(FeeUserFundReqColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="FeeUserFundReq"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="FeeUserFundReq"/> to compare.</param>
        /// <param name="b">The second <c>FeeUserFundReq</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(FeeUserFundReq a, FeeUserFundReq b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(FeeUserFundReq entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(FeeUserFundReq a, FeeUserFundReq b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public FeeUserFundReqColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region FeeUserFundReqKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="FeeUserFundReq"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class FeeUserFundReqKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the FeeUserFundReqKey class.
		/// </summary>
		public FeeUserFundReqKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeUserFundReqKey class.
		/// </summary>
		public FeeUserFundReqKey(FeeUserFundReqBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.FeeUserFundReqId = entity.FeeUserFundReqId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeUserFundReqKey class.
		/// </summary>
		public FeeUserFundReqKey(System.Decimal _feeUserFundReqId)
		{
			#region Init Properties

			this.FeeUserFundReqId = _feeUserFundReqId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private FeeUserFundReqBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public FeeUserFundReqBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the FeeUserFundReqId property
		private System.Decimal _feeUserFundReqId;
		
		/// <summary>
		/// Gets or sets the FeeUserFundReqId property.
		/// </summary>
		public System.Decimal FeeUserFundReqId
		{
			get { return _feeUserFundReqId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.FeeUserFundReqId = value;
				
				_feeUserFundReqId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				FeeUserFundReqId = ( values["FeeUserFundReqId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["FeeUserFundReqId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("FeeUserFundReqId", FeeUserFundReqId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("FeeUserFundReqId: {0}{1}",
								FeeUserFundReqId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region FeeUserFundReqColumn Enum
	
	/// <summary>
	/// Enumerate the FeeUserFundReq columns.
	/// </summary>
	[Serializable]
	public enum FeeUserFundReqColumn : int
	{
		/// <summary>
		/// FeeUserFundReqId : طلبات السلف
		/// </summary>
		[EnumTextValue("FEE_USER_FUND_REQ_ID")]
		[ColumnEnum("FEE_USER_FUND_REQ_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		FeeUserFundReqId = 1,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 2,
		/// <summary>
		/// ReqNum : رقم السند Automatic every year
		/// </summary>
		[EnumTextValue("REQ_NUM")]
		[ColumnEnum("REQ_NUM", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ReqNum = 3,
		/// <summary>
		/// ReqDate : تاريخ الطلب
		/// </summary>
		[EnumTextValue("REQ_DATE")]
		[ColumnEnum("REQ_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, false)]
		ReqDate = 4,
		/// <summary>
		/// UserName : اسم المستفيد
		/// </summary>
		[EnumTextValue("USER_NAME")]
		[ColumnEnum("USER_NAME", typeof(System.String), System.Data.DbType.String, false, false, false, 150)]
		UserName = 5,
		/// <summary>
		/// FeeCdeBondItemId : بند السند
		/// </summary>
		[EnumTextValue("FEE_CDE_BOND_ITEM_ID")]
		[ColumnEnum("FEE_CDE_BOND_ITEM_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		FeeCdeBondItemId = 6,
		/// <summary>
		/// GsCodeCurrencyId : العملة الحالية
		/// </summary>
		[EnumTextValue("GS_CODE_CURRENCY_ID")]
		[ColumnEnum("GS_CODE_CURRENCY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsCodeCurrencyId = 7,
		/// <summary>
		/// TempAmount : المبلغ المؤقت
		/// </summary>
		[EnumTextValue("TEMP_AMOUNT")]
		[ColumnEnum("TEMP_AMOUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TempAmount = 8,
		/// <summary>
		/// ReqAmount : المبلغ الفعلي
		/// </summary>
		[EnumTextValue("REQ_AMOUNT")]
		[ColumnEnum("REQ_AMOUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ReqAmount = 9,
		/// <summary>
		/// RemainAmount : المبلغ الحالى المتبقى فى الخزنه
		/// </summary>
		[EnumTextValue("REMAIN_AMOUNT")]
		[ColumnEnum("REMAIN_AMOUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RemainAmount = 10,
		/// <summary>
		/// AttchdDocPath : Attached file
		/// </summary>
		[EnumTextValue("ATTCHD_DOC_PATH")]
		[ColumnEnum("ATTCHD_DOC_PATH", typeof(System.String), System.Data.DbType.String, false, false, true)]
		AttchdDocPath = 11,
		/// <summary>
		/// Notes : البيان
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		Notes = 12,
		/// <summary>
		/// ApproveFlg : مؤشر اعتماد
		/// </summary>
		[EnumTextValue("APPROVE_FLG")]
		[ColumnEnum("APPROVE_FLG", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ApproveFlg = 13,
		/// <summary>
		/// ApproveDate : تاريخ الاعتماد
		/// </summary>
		[EnumTextValue("APPROVE_DATE")]
		[ColumnEnum("APPROVE_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ApproveDate = 14,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 15,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 16
	}//End enum

	#endregion FeeUserFundReqColumn Enum

} // end namespace
