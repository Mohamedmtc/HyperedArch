
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SvStudLockerReq.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SV_STUD_LOCKER_REQ' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SvStudLockerReqBase : EntityBase, ISvStudLockerReq, IEntityId<SvStudLockerReqKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SvStudLockerReqEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SvStudLockerReqEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SvStudLockerReqEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SvStudLockerReq> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SvStudLockerReqEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SvStudLockerReqEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SvStudLockerReqBase"/> instance.
		///</summary>
		public SvStudLockerReqBase()
		{
			this.entityData = new SvStudLockerReqEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SvStudLockerReqBase"/> instance.
		///</summary>
		///<param name="_svStudLockerReqId"></param>
		///<param name="_svCdeLockerId"></param>
		///<param name="_edStudId"></param>
		///<param name="_reqDate"></param>
		///<param name="_keyNo"></param>
		///<param name="_recptNo"></param>
		///<param name="_returnDate"></param>
		///<param name="_returnReason"></param>
		///<param name="_seUserId"></param>
		///<param name="_scBuildingId"></param>
		///<param name="_closeFlg"></param>
		///<param name="_employeeName"></param>
		public SvStudLockerReqBase(System.Decimal _svStudLockerReqId, System.Decimal? _svCdeLockerId, 
			System.Decimal _edStudId, System.DateTime _reqDate, System.String _keyNo, 
			System.String _recptNo, System.DateTime? _returnDate, System.String _returnReason, 
			System.Decimal? _seUserId, System.Decimal? _scBuildingId, System.Decimal? _closeFlg, 
			System.String _employeeName)
		{
			this.entityData = new SvStudLockerReqEntityData();
			this.backupData = null;

			this.SvStudLockerReqId = _svStudLockerReqId;
			this.SvCdeLockerId = _svCdeLockerId;
			this.EdStudId = _edStudId;
			this.ReqDate = _reqDate;
			this.KeyNo = _keyNo;
			this.RecptNo = _recptNo;
			this.ReturnDate = _returnDate;
			this.ReturnReason = _returnReason;
			this.SeUserId = _seUserId;
			this.ScBuildingId = _scBuildingId;
			this.CloseFlg = _closeFlg;
			this.EmployeeName = _employeeName;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SvStudLockerReq"/> instance.
		///</summary>
		///<param name="_svStudLockerReqId"></param>
		///<param name="_svCdeLockerId"></param>
		///<param name="_edStudId"></param>
		///<param name="_reqDate"></param>
		///<param name="_keyNo"></param>
		///<param name="_recptNo"></param>
		///<param name="_returnDate"></param>
		///<param name="_returnReason"></param>
		///<param name="_seUserId"></param>
		///<param name="_scBuildingId"></param>
		///<param name="_closeFlg"></param>
		///<param name="_employeeName"></param>
		public static SvStudLockerReq CreateSvStudLockerReq(System.Decimal _svStudLockerReqId, System.Decimal? _svCdeLockerId, 
			System.Decimal _edStudId, System.DateTime _reqDate, System.String _keyNo, 
			System.String _recptNo, System.DateTime? _returnDate, System.String _returnReason, 
			System.Decimal? _seUserId, System.Decimal? _scBuildingId, System.Decimal? _closeFlg, 
			System.String _employeeName)
		{
			SvStudLockerReq newSvStudLockerReq = new SvStudLockerReq();
			newSvStudLockerReq.SvStudLockerReqId = _svStudLockerReqId;
			newSvStudLockerReq.SvCdeLockerId = _svCdeLockerId;
			newSvStudLockerReq.EdStudId = _edStudId;
			newSvStudLockerReq.ReqDate = _reqDate;
			newSvStudLockerReq.KeyNo = _keyNo;
			newSvStudLockerReq.RecptNo = _recptNo;
			newSvStudLockerReq.ReturnDate = _returnDate;
			newSvStudLockerReq.ReturnReason = _returnReason;
			newSvStudLockerReq.SeUserId = _seUserId;
			newSvStudLockerReq.ScBuildingId = _scBuildingId;
			newSvStudLockerReq.CloseFlg = _closeFlg;
			newSvStudLockerReq.EmployeeName = _employeeName;
			return newSvStudLockerReq;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SvStudLockerReqId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SvStudLockerReqId
		{
			get
			{
				return this.entityData.SvStudLockerReqId; 
			}
			
			set
			{
				if (this.entityData.SvStudLockerReqId == value)
					return;
					
				OnColumnChanging(SvStudLockerReqColumn.SvStudLockerReqId, this.entityData.SvStudLockerReqId);
				this.entityData.SvStudLockerReqId = value;
				this.EntityId.SvStudLockerReqId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudLockerReqColumn.SvStudLockerReqId, this.entityData.SvStudLockerReqId);
				OnPropertyChanged("SvStudLockerReqId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SV_STUD_LOCKER_REQ_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SV_STUD_LOCKER_REQ_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSvStudLockerReqId
		{
			get { return this.entityData.OriginalSvStudLockerReqId; }
			set { this.entityData.OriginalSvStudLockerReqId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the SvCdeLockerId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSvCdeLockerIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SvCdeLockerId
		{
			get
			{
				return this.entityData.SvCdeLockerId; 
			}
			
			set
			{
				if (this.entityData.SvCdeLockerId == value)
					return;
					
				OnColumnChanging(SvStudLockerReqColumn.SvCdeLockerId, this.entityData.SvCdeLockerId);
				this.entityData.SvCdeLockerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudLockerReqColumn.SvCdeLockerId, this.entityData.SvCdeLockerId);
				OnPropertyChanged("SvCdeLockerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(SvStudLockerReqColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudLockerReqColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReqDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ReqDate
		{
			get
			{
				return this.entityData.ReqDate; 
			}
			
			set
			{
				if (this.entityData.ReqDate == value)
					return;
					
				OnColumnChanging(SvStudLockerReqColumn.ReqDate, this.entityData.ReqDate);
				this.entityData.ReqDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudLockerReqColumn.ReqDate, this.entityData.ReqDate);
				OnPropertyChanged("ReqDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the KeyNo property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 5)]
		public virtual System.String KeyNo
		{
			get
			{
				return this.entityData.KeyNo; 
			}
			
			set
			{
				if (this.entityData.KeyNo == value)
					return;
					
				OnColumnChanging(SvStudLockerReqColumn.KeyNo, this.entityData.KeyNo);
				this.entityData.KeyNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudLockerReqColumn.KeyNo, this.entityData.KeyNo);
				OnPropertyChanged("KeyNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RecptNo property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String RecptNo
		{
			get
			{
				return this.entityData.RecptNo; 
			}
			
			set
			{
				if (this.entityData.RecptNo == value)
					return;
					
				OnColumnChanging(SvStudLockerReqColumn.RecptNo, this.entityData.RecptNo);
				this.entityData.RecptNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudLockerReqColumn.RecptNo, this.entityData.RecptNo);
				OnPropertyChanged("RecptNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReturnDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsReturnDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ReturnDate
		{
			get
			{
				return this.entityData.ReturnDate; 
			}
			
			set
			{
				if (this.entityData.ReturnDate == value)
					return;
					
				OnColumnChanging(SvStudLockerReqColumn.ReturnDate, this.entityData.ReturnDate);
				this.entityData.ReturnDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudLockerReqColumn.ReturnDate, this.entityData.ReturnDate);
				OnPropertyChanged("ReturnDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReturnReason property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String ReturnReason
		{
			get
			{
				return this.entityData.ReturnReason; 
			}
			
			set
			{
				if (this.entityData.ReturnReason == value)
					return;
					
				OnColumnChanging(SvStudLockerReqColumn.ReturnReason, this.entityData.ReturnReason);
				this.entityData.ReturnReason = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudLockerReqColumn.ReturnReason, this.entityData.ReturnReason);
				OnPropertyChanged("ReturnReason");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(SvStudLockerReqColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudLockerReqColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScBuildingId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScBuildingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScBuildingId
		{
			get
			{
				return this.entityData.ScBuildingId; 
			}
			
			set
			{
				if (this.entityData.ScBuildingId == value)
					return;
					
				OnColumnChanging(SvStudLockerReqColumn.ScBuildingId, this.entityData.ScBuildingId);
				this.entityData.ScBuildingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudLockerReqColumn.ScBuildingId, this.entityData.ScBuildingId);
				OnPropertyChanged("ScBuildingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CloseFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCloseFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CloseFlg
		{
			get
			{
				return this.entityData.CloseFlg; 
			}
			
			set
			{
				if (this.entityData.CloseFlg == value)
					return;
					
				OnColumnChanging(SvStudLockerReqColumn.CloseFlg, this.entityData.CloseFlg);
				this.entityData.CloseFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudLockerReqColumn.CloseFlg, this.entityData.CloseFlg);
				OnPropertyChanged("CloseFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmployeeName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String EmployeeName
		{
			get
			{
				return this.entityData.EmployeeName; 
			}
			
			set
			{
				if (this.entityData.EmployeeName == value)
					return;
					
				OnColumnChanging(SvStudLockerReqColumn.EmployeeName, this.entityData.EmployeeName);
				this.entityData.EmployeeName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvStudLockerReqColumn.EmployeeName, this.entityData.EmployeeName);
				OnPropertyChanged("EmployeeName");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScBuilding"/>.
		/// </summary>
		/// <value>The source ScBuilding for ScBuildingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScBuilding ScBuildingIdSource
      	{
            get { return entityData.ScBuildingIdSource; }
            set { entityData.ScBuildingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeUser SeUserIdSource
      	{
            get { return entityData.SeUserIdSource; }
            set { entityData.SeUserIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SvCdeLocker"/>.
		/// </summary>
		/// <value>The source SvCdeLocker for SvCdeLockerId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SvCdeLocker SvCdeLockerIdSource
      	{
            get { return entityData.SvCdeLockerIdSource; }
            set { entityData.SvCdeLockerIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("KeyNo", "Key No", 5));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("RecptNo", "Recpt No", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ReturnReason", "Return Reason", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EmployeeName", "Employee Name", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SV_STUD_LOCKER_REQ"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SV_STUD_LOCKER_REQ_ID", "SV_CDE_LOCKER_ID", "ED_STUD_ID", "REQ_DATE", "KEY_NO", "RECPT_NO", "RETURN_DATE", "RETURN_REASON", "SE_USER_ID", "SC_BUILDING_ID", "CLOSE_FLG", "EMPLOYEE_NAME"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SvStudLockerReqEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SvStudLockerReq) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SvStudLockerReq>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SvStudLockerReq);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SvStudLockerReq Entity 
		///</summary>
		protected virtual SvStudLockerReq Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SvStudLockerReq copy = new SvStudLockerReq();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SvStudLockerReqId = this.SvStudLockerReqId;
					copy.OriginalSvStudLockerReqId = this.OriginalSvStudLockerReqId;
				copy.SvCdeLockerId = this.SvCdeLockerId;
				copy.EdStudId = this.EdStudId;
				copy.ReqDate = this.ReqDate;
				copy.KeyNo = this.KeyNo;
				copy.RecptNo = this.RecptNo;
				copy.ReturnDate = this.ReturnDate;
				copy.ReturnReason = this.ReturnReason;
				copy.SeUserId = this.SeUserId;
				copy.ScBuildingId = this.ScBuildingId;
				copy.CloseFlg = this.CloseFlg;
				copy.EmployeeName = this.EmployeeName;
			
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.ScBuildingIdSource != null && existingCopies.Contains(this.ScBuildingIdSource))
				copy.ScBuildingIdSource = existingCopies[this.ScBuildingIdSource] as ScBuilding;
			else
				copy.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource, existingCopies) as ScBuilding;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				copy.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				copy.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			if (this.SvCdeLockerIdSource != null && existingCopies.Contains(this.SvCdeLockerIdSource))
				copy.SvCdeLockerIdSource = existingCopies[this.SvCdeLockerIdSource] as SvCdeLocker;
			else
				copy.SvCdeLockerIdSource = MakeCopyOf(this.SvCdeLockerIdSource, existingCopies) as SvCdeLocker;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SvStudLockerReq Entity 
		///</summary>
		public virtual SvStudLockerReq Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SvStudLockerReq Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SvStudLockerReq DeepCopy()
		{
			return EntityHelper.Clone<SvStudLockerReq>(this as SvStudLockerReq);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SvStudLockerReqEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SvStudLockerReqEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SvStudLockerReqEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SvStudLockerReqColumn column)
		{
			switch(column)
			{
					case SvStudLockerReqColumn.SvStudLockerReqId:
					return entityData.SvStudLockerReqId != _originalData.SvStudLockerReqId;
					case SvStudLockerReqColumn.SvCdeLockerId:
					return entityData.SvCdeLockerId != _originalData.SvCdeLockerId;
					case SvStudLockerReqColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case SvStudLockerReqColumn.ReqDate:
					return entityData.ReqDate != _originalData.ReqDate;
					case SvStudLockerReqColumn.KeyNo:
					return entityData.KeyNo != _originalData.KeyNo;
					case SvStudLockerReqColumn.RecptNo:
					return entityData.RecptNo != _originalData.RecptNo;
					case SvStudLockerReqColumn.ReturnDate:
					return entityData.ReturnDate != _originalData.ReturnDate;
					case SvStudLockerReqColumn.ReturnReason:
					return entityData.ReturnReason != _originalData.ReturnReason;
					case SvStudLockerReqColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case SvStudLockerReqColumn.ScBuildingId:
					return entityData.ScBuildingId != _originalData.ScBuildingId;
					case SvStudLockerReqColumn.CloseFlg:
					return entityData.CloseFlg != _originalData.CloseFlg;
					case SvStudLockerReqColumn.EmployeeName:
					return entityData.EmployeeName != _originalData.EmployeeName;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SvStudLockerReqColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SvStudLockerReqId != _originalData.SvStudLockerReqId;
			result = result || entityData.SvCdeLockerId != _originalData.SvCdeLockerId;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.ReqDate != _originalData.ReqDate;
			result = result || entityData.KeyNo != _originalData.KeyNo;
			result = result || entityData.RecptNo != _originalData.RecptNo;
			result = result || entityData.ReturnDate != _originalData.ReturnDate;
			result = result || entityData.ReturnReason != _originalData.ReturnReason;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.ScBuildingId != _originalData.ScBuildingId;
			result = result || entityData.CloseFlg != _originalData.CloseFlg;
			result = result || entityData.EmployeeName != _originalData.EmployeeName;
			return result;
		}	
		
		///<summary>
		///  Returns a SvStudLockerReq Entity with the original data.
		///</summary>
		public SvStudLockerReq GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSvStudLockerReq(
				_originalData.SvStudLockerReqId,
				_originalData.SvCdeLockerId,
				_originalData.EdStudId,
				_originalData.ReqDate,
				_originalData.KeyNo,
				_originalData.RecptNo,
				_originalData.ReturnDate,
				_originalData.ReturnReason,
				_originalData.SeUserId,
				_originalData.ScBuildingId,
				_originalData.CloseFlg,
				_originalData.EmployeeName
				);
				
			return (SvStudLockerReq)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SvStudLockerReqBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SvStudLockerReqBase)
				return ValueEquals(this, (SvStudLockerReqBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SvStudLockerReqBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SvStudLockerReqId.GetHashCode() ^ 
					((this.SvCdeLockerId == null) ? string.Empty : this.SvCdeLockerId.ToString()).GetHashCode() ^ 
					this.EdStudId.GetHashCode() ^ 
					this.ReqDate.GetHashCode() ^ 
					((this.KeyNo == null) ? string.Empty : this.KeyNo.ToString()).GetHashCode() ^ 
					((this.RecptNo == null) ? string.Empty : this.RecptNo.ToString()).GetHashCode() ^ 
					((this.ReturnDate == null) ? string.Empty : this.ReturnDate.ToString()).GetHashCode() ^ 
					((this.ReturnReason == null) ? string.Empty : this.ReturnReason.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.ScBuildingId == null) ? string.Empty : this.ScBuildingId.ToString()).GetHashCode() ^ 
					((this.CloseFlg == null) ? string.Empty : this.CloseFlg.ToString()).GetHashCode() ^ 
					((this.EmployeeName == null) ? string.Empty : this.EmployeeName.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SvStudLockerReqBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SvStudLockerReqBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SvStudLockerReqBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SvStudLockerReqBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SvStudLockerReqBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SvStudLockerReqBase Object1, SvStudLockerReqBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SvStudLockerReqId != Object2.SvStudLockerReqId)
				equal = false;
			if ( Object1.SvCdeLockerId != null && Object2.SvCdeLockerId != null )
			{
				if (Object1.SvCdeLockerId != Object2.SvCdeLockerId)
					equal = false;
			}
			else if (Object1.SvCdeLockerId == null ^ Object2.SvCdeLockerId == null )
			{
				equal = false;
			}
			if (Object1.EdStudId != Object2.EdStudId)
				equal = false;
			if (Object1.ReqDate != Object2.ReqDate)
				equal = false;
			if ( Object1.KeyNo != null && Object2.KeyNo != null )
			{
				if (Object1.KeyNo != Object2.KeyNo)
					equal = false;
			}
			else if (Object1.KeyNo == null ^ Object2.KeyNo == null )
			{
				equal = false;
			}
			if ( Object1.RecptNo != null && Object2.RecptNo != null )
			{
				if (Object1.RecptNo != Object2.RecptNo)
					equal = false;
			}
			else if (Object1.RecptNo == null ^ Object2.RecptNo == null )
			{
				equal = false;
			}
			if ( Object1.ReturnDate != null && Object2.ReturnDate != null )
			{
				if (Object1.ReturnDate != Object2.ReturnDate)
					equal = false;
			}
			else if (Object1.ReturnDate == null ^ Object2.ReturnDate == null )
			{
				equal = false;
			}
			if ( Object1.ReturnReason != null && Object2.ReturnReason != null )
			{
				if (Object1.ReturnReason != Object2.ReturnReason)
					equal = false;
			}
			else if (Object1.ReturnReason == null ^ Object2.ReturnReason == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.ScBuildingId != null && Object2.ScBuildingId != null )
			{
				if (Object1.ScBuildingId != Object2.ScBuildingId)
					equal = false;
			}
			else if (Object1.ScBuildingId == null ^ Object2.ScBuildingId == null )
			{
				equal = false;
			}
			if ( Object1.CloseFlg != null && Object2.CloseFlg != null )
			{
				if (Object1.CloseFlg != Object2.CloseFlg)
					equal = false;
			}
			else if (Object1.CloseFlg == null ^ Object2.CloseFlg == null )
			{
				equal = false;
			}
			if ( Object1.EmployeeName != null && Object2.EmployeeName != null )
			{
				if (Object1.EmployeeName != Object2.EmployeeName)
					equal = false;
			}
			else if (Object1.EmployeeName == null ^ Object2.EmployeeName == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SvStudLockerReqBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SvStudLockerReqComparer GetComparer()
        {
            return new SvStudLockerReqComparer();
        }
        */

        // Comparer delegates back to SvStudLockerReq
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SvStudLockerReq rhs, SvStudLockerReqColumn which)
        {
            switch (which)
            {
            	
            	
            	case SvStudLockerReqColumn.SvStudLockerReqId:
            		return this.SvStudLockerReqId.CompareTo(rhs.SvStudLockerReqId);
            		
            		                 
            	
            	
            	case SvStudLockerReqColumn.SvCdeLockerId:
            		return this.SvCdeLockerId.Value.CompareTo(rhs.SvCdeLockerId.Value);
            		
            		                 
            	
            	
            	case SvStudLockerReqColumn.EdStudId:
            		return this.EdStudId.CompareTo(rhs.EdStudId);
            		
            		                 
            	
            	
            	case SvStudLockerReqColumn.ReqDate:
            		return this.ReqDate.CompareTo(rhs.ReqDate);
            		
            		                 
            	
            	
            	case SvStudLockerReqColumn.KeyNo:
            		return this.KeyNo.CompareTo(rhs.KeyNo);
            		
            		                 
            	
            	
            	case SvStudLockerReqColumn.RecptNo:
            		return this.RecptNo.CompareTo(rhs.RecptNo);
            		
            		                 
            	
            	
            	case SvStudLockerReqColumn.ReturnDate:
            		return this.ReturnDate.Value.CompareTo(rhs.ReturnDate.Value);
            		
            		                 
            	
            	
            	case SvStudLockerReqColumn.ReturnReason:
            		return this.ReturnReason.CompareTo(rhs.ReturnReason);
            		
            		                 
            	
            	
            	case SvStudLockerReqColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case SvStudLockerReqColumn.ScBuildingId:
            		return this.ScBuildingId.Value.CompareTo(rhs.ScBuildingId.Value);
            		
            		                 
            	
            	
            	case SvStudLockerReqColumn.CloseFlg:
            		return this.CloseFlg.Value.CompareTo(rhs.CloseFlg.Value);
            		
            		                 
            	
            	
            	case SvStudLockerReqColumn.EmployeeName:
            		return this.EmployeeName.CompareTo(rhs.EmployeeName);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SvStudLockerReqKey> Members
		
		// member variable for the EntityId property
		private SvStudLockerReqKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SvStudLockerReqKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SvStudLockerReqKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SvStudLockerReq")
					.Append("|").Append( this.SvStudLockerReqId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- SvStudLockerReqId: {0}{12}- SvCdeLockerId: {1}{12}- EdStudId: {2}{12}- ReqDate: {3}{12}- KeyNo: {4}{12}- RecptNo: {5}{12}- ReturnDate: {6}{12}- ReturnReason: {7}{12}- SeUserId: {8}{12}- ScBuildingId: {9}{12}- CloseFlg: {10}{12}- EmployeeName: {11}{12}{14}", 
				this.SvStudLockerReqId,
				(this.SvCdeLockerId == null) ? string.Empty : this.SvCdeLockerId.ToString(),
				this.EdStudId,
				this.ReqDate,
				(this.KeyNo == null) ? string.Empty : this.KeyNo.ToString(),
				(this.RecptNo == null) ? string.Empty : this.RecptNo.ToString(),
				(this.ReturnDate == null) ? string.Empty : this.ReturnDate.ToString(),
				(this.ReturnReason == null) ? string.Empty : this.ReturnReason.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.ScBuildingId == null) ? string.Empty : this.ScBuildingId.ToString(),
				(this.CloseFlg == null) ? string.Empty : this.CloseFlg.ToString(),
				(this.EmployeeName == null) ? string.Empty : this.EmployeeName.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SV_STUD_LOCKER_REQ' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SvStudLockerReqEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SV_STUD_LOCKER_REQ_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SV_STUD_LOCKER_REQ"</remarks>
		public System.Decimal SvStudLockerReqId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSvStudLockerReqId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SV_CDE_LOCKER_ID : 
		/// </summary>
		public System.Decimal?		  SvCdeLockerId = null;
		
		/// <summary>
		/// ED_STUD_ID : 
		/// </summary>
		public System.Decimal		  EdStudId = 0.0m;
		
		/// <summary>
		/// REQ_DATE : 
		/// </summary>
		public System.DateTime		  ReqDate = DateTime.MinValue;
		
		/// <summary>
		/// KEY_NO : 
		/// </summary>
		public System.String		  KeyNo = null;
		
		/// <summary>
		/// RECPT_NO : 
		/// </summary>
		public System.String		  RecptNo = null;
		
		/// <summary>
		/// RETURN_DATE : 
		/// </summary>
		public System.DateTime?		  ReturnDate = null;
		
		/// <summary>
		/// RETURN_REASON : 
		/// </summary>
		public System.String		  ReturnReason = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// SC_BUILDING_ID : 
		/// </summary>
		public System.Decimal?		  ScBuildingId = null;
		
		/// <summary>
		/// CLOSE_FLG : 
		/// </summary>
		public System.Decimal?		  CloseFlg = null;
		
		/// <summary>
		/// EMPLOYEE_NAME : 
		/// </summary>
		public System.String		  EmployeeName = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		private ScBuilding _scBuildingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScBuilding"/>.
		/// </summary>
		/// <value>The source ScBuilding for ScBuildingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScBuilding ScBuildingIdSource
      	{
            get { return this._scBuildingIdSource; }
            set { this._scBuildingIdSource = value; }
      	}
		private SeUser _seUserIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeUser SeUserIdSource
      	{
            get { return this._seUserIdSource; }
            set { this._seUserIdSource = value; }
      	}
		private SvCdeLocker _svCdeLockerIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SvCdeLocker"/>.
		/// </summary>
		/// <value>The source SvCdeLocker for SvCdeLockerId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SvCdeLocker SvCdeLockerIdSource
      	{
            get { return this._svCdeLockerIdSource; }
            set { this._svCdeLockerIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SvStudLockerReqEntityData _tmp = new SvStudLockerReqEntityData();
						
			_tmp.SvStudLockerReqId = this.SvStudLockerReqId;
			_tmp.OriginalSvStudLockerReqId = this.OriginalSvStudLockerReqId;
			
			_tmp.SvCdeLockerId = this.SvCdeLockerId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.ReqDate = this.ReqDate;
			_tmp.KeyNo = this.KeyNo;
			_tmp.RecptNo = this.RecptNo;
			_tmp.ReturnDate = this.ReturnDate;
			_tmp.ReturnReason = this.ReturnReason;
			_tmp.SeUserId = this.SeUserId;
			_tmp.ScBuildingId = this.ScBuildingId;
			_tmp.CloseFlg = this.CloseFlg;
			_tmp.EmployeeName = this.EmployeeName;
			
			#region Source Parent Composite Entities
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			if (this.ScBuildingIdSource != null)
				_tmp.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource) as ScBuilding;
			if (this.SeUserIdSource != null)
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource) as SeUser;
			if (this.SvCdeLockerIdSource != null)
				_tmp.SvCdeLockerIdSource = MakeCopyOf(this.SvCdeLockerIdSource) as SvCdeLocker;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SvStudLockerReqEntityData _tmp = new SvStudLockerReqEntityData();
						
			_tmp.SvStudLockerReqId = this.SvStudLockerReqId;
			_tmp.OriginalSvStudLockerReqId = this.OriginalSvStudLockerReqId;
			
			_tmp.SvCdeLockerId = this.SvCdeLockerId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.ReqDate = this.ReqDate;
			_tmp.KeyNo = this.KeyNo;
			_tmp.RecptNo = this.RecptNo;
			_tmp.ReturnDate = this.ReturnDate;
			_tmp.ReturnReason = this.ReturnReason;
			_tmp.SeUserId = this.SeUserId;
			_tmp.ScBuildingId = this.ScBuildingId;
			_tmp.CloseFlg = this.CloseFlg;
			_tmp.EmployeeName = this.EmployeeName;
			
			#region Source Parent Composite Entities
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.ScBuildingIdSource != null && existingCopies.Contains(this.ScBuildingIdSource))
				_tmp.ScBuildingIdSource = existingCopies[this.ScBuildingIdSource] as ScBuilding;
			else
				_tmp.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource, existingCopies) as ScBuilding;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				_tmp.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			if (this.SvCdeLockerIdSource != null && existingCopies.Contains(this.SvCdeLockerIdSource))
				_tmp.SvCdeLockerIdSource = existingCopies[this.SvCdeLockerIdSource] as SvCdeLocker;
			else
				_tmp.SvCdeLockerIdSource = MakeCopyOf(this.SvCdeLockerIdSource, existingCopies) as SvCdeLocker;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvStudLockerReqColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SvStudLockerReqColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvStudLockerReqColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SvStudLockerReqColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvStudLockerReqColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SvStudLockerReqColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SvStudLockerReqEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SvStudLockerReqEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvStudLockerReqColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SvStudLockerReqColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SvStudLockerReqEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SvStudLockerReqEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SvStudLockerReqEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SvStudLockerReq"/> object.
	/// </remarks>
	public class SvStudLockerReqEventArgs : System.EventArgs
	{
		private SvStudLockerReqColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SvStudLockerReqEventArgs class.
		///</summary>
		public SvStudLockerReqEventArgs(SvStudLockerReqColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SvStudLockerReqEventArgs class.
		///</summary>
		public SvStudLockerReqEventArgs(SvStudLockerReqColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SvStudLockerReqColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SvStudLockerReqColumn" />
		public SvStudLockerReqColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SvStudLockerReq related events.
	///</summary>
	public delegate void SvStudLockerReqEventHandler(object sender, SvStudLockerReqEventArgs e);
	
	#region SvStudLockerReqComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SvStudLockerReqComparer : System.Collections.Generic.IComparer<SvStudLockerReq>
	{
		SvStudLockerReqColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SvStudLockerReqComparer"/> class.
        /// </summary>
		public SvStudLockerReqComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SvStudLockerReqComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SvStudLockerReqComparer(SvStudLockerReqColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SvStudLockerReq"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SvStudLockerReq"/> to compare.</param>
        /// <param name="b">The second <c>SvStudLockerReq</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SvStudLockerReq a, SvStudLockerReq b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SvStudLockerReq entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SvStudLockerReq a, SvStudLockerReq b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SvStudLockerReqColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SvStudLockerReqKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SvStudLockerReq"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SvStudLockerReqKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SvStudLockerReqKey class.
		/// </summary>
		public SvStudLockerReqKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SvStudLockerReqKey class.
		/// </summary>
		public SvStudLockerReqKey(SvStudLockerReqBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SvStudLockerReqId = entity.SvStudLockerReqId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SvStudLockerReqKey class.
		/// </summary>
		public SvStudLockerReqKey(System.Decimal _svStudLockerReqId)
		{
			#region Init Properties

			this.SvStudLockerReqId = _svStudLockerReqId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SvStudLockerReqBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SvStudLockerReqBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SvStudLockerReqId property
		private System.Decimal _svStudLockerReqId;
		
		/// <summary>
		/// Gets or sets the SvStudLockerReqId property.
		/// </summary>
		public System.Decimal SvStudLockerReqId
		{
			get { return _svStudLockerReqId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SvStudLockerReqId = value;
				
				_svStudLockerReqId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SvStudLockerReqId = ( values["SvStudLockerReqId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SvStudLockerReqId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SvStudLockerReqId", SvStudLockerReqId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SvStudLockerReqId: {0}{1}",
								SvStudLockerReqId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SvStudLockerReqColumn Enum
	
	/// <summary>
	/// Enumerate the SvStudLockerReq columns.
	/// </summary>
	[Serializable]
	public enum SvStudLockerReqColumn : int
	{
		/// <summary>
		/// SvStudLockerReqId : 
		/// </summary>
		[EnumTextValue("SV_STUD_LOCKER_REQ_ID")]
		[ColumnEnum("SV_STUD_LOCKER_REQ_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SvStudLockerReqId = 1,
		/// <summary>
		/// SvCdeLockerId : 
		/// </summary>
		[EnumTextValue("SV_CDE_LOCKER_ID")]
		[ColumnEnum("SV_CDE_LOCKER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SvCdeLockerId = 2,
		/// <summary>
		/// EdStudId : 
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudId = 3,
		/// <summary>
		/// ReqDate : 
		/// </summary>
		[EnumTextValue("REQ_DATE")]
		[ColumnEnum("REQ_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ReqDate = 4,
		/// <summary>
		/// KeyNo : 
		/// </summary>
		[EnumTextValue("KEY_NO")]
		[ColumnEnum("KEY_NO", typeof(System.String), System.Data.DbType.String, false, false, true, 5)]
		KeyNo = 5,
		/// <summary>
		/// RecptNo : 
		/// </summary>
		[EnumTextValue("RECPT_NO")]
		[ColumnEnum("RECPT_NO", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		RecptNo = 6,
		/// <summary>
		/// ReturnDate : 
		/// </summary>
		[EnumTextValue("RETURN_DATE")]
		[ColumnEnum("RETURN_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ReturnDate = 7,
		/// <summary>
		/// ReturnReason : 
		/// </summary>
		[EnumTextValue("RETURN_REASON")]
		[ColumnEnum("RETURN_REASON", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		ReturnReason = 8,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 9,
		/// <summary>
		/// ScBuildingId : 
		/// </summary>
		[EnumTextValue("SC_BUILDING_ID")]
		[ColumnEnum("SC_BUILDING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScBuildingId = 10,
		/// <summary>
		/// CloseFlg : 
		/// </summary>
		[EnumTextValue("CLOSE_FLG")]
		[ColumnEnum("CLOSE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CloseFlg = 11,
		/// <summary>
		/// EmployeeName : 
		/// </summary>
		[EnumTextValue("EMPLOYEE_NAME")]
		[ColumnEnum("EMPLOYEE_NAME", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		EmployeeName = 12
	}//End enum

	#endregion SvStudLockerReqColumn Enum

} // end namespace
