
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SeAccnt.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SE_ACCNT' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SeAccntBase : EntityBase, ISeAccnt, IEntityId<SeAccntKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SeAccntEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SeAccntEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SeAccntEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SeAccnt> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SeAccntEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SeAccntEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SeAccntBase"/> instance.
		///</summary>
		public SeAccntBase()
		{
			this.entityData = new SeAccntEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SeAccntBase"/> instance.
		///</summary>
		///<param name="_seAccntId"></param>
		///<param name="_descAr"></param>
		///<param name="_descEn"></param>
		///<param name="_templateFlg"></param>
		///<param name="_adAccntGuid"></param>
		///<param name="_adAccntName"></param>
		///<param name="_seCodeUserTypeId"></param>
		///<param name="_lastDate"></param>
		///<param name="_seUserLstId"></param>
		public SeAccntBase(System.Decimal _seAccntId, System.String _descAr, System.String _descEn, 
			System.Decimal? _templateFlg, System.String _adAccntGuid, System.String _adAccntName, System.Decimal _seCodeUserTypeId, 
			System.DateTime? _lastDate, System.Decimal? _seUserLstId)
		{
			this.entityData = new SeAccntEntityData();
			this.backupData = null;

			this.SeAccntId = _seAccntId;
			this.DescAr = _descAr;
			this.DescEn = _descEn;
			this.TemplateFlg = _templateFlg;
			this.AdAccntGuid = _adAccntGuid;
			this.AdAccntName = _adAccntName;
			this.SeCodeUserTypeId = _seCodeUserTypeId;
			this.LastDate = _lastDate;
			this.SeUserLstId = _seUserLstId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SeAccnt"/> instance.
		///</summary>
		///<param name="_seAccntId"></param>
		///<param name="_descAr"></param>
		///<param name="_descEn"></param>
		///<param name="_templateFlg"></param>
		///<param name="_adAccntGuid"></param>
		///<param name="_adAccntName"></param>
		///<param name="_seCodeUserTypeId"></param>
		///<param name="_lastDate"></param>
		///<param name="_seUserLstId"></param>
		public static SeAccnt CreateSeAccnt(System.Decimal _seAccntId, System.String _descAr, System.String _descEn, 
			System.Decimal? _templateFlg, System.String _adAccntGuid, System.String _adAccntName, System.Decimal _seCodeUserTypeId, 
			System.DateTime? _lastDate, System.Decimal? _seUserLstId)
		{
			SeAccnt newSeAccnt = new SeAccnt();
			newSeAccnt.SeAccntId = _seAccntId;
			newSeAccnt.DescAr = _descAr;
			newSeAccnt.DescEn = _descEn;
			newSeAccnt.TemplateFlg = _templateFlg;
			newSeAccnt.AdAccntGuid = _adAccntGuid;
			newSeAccnt.AdAccntName = _adAccntName;
			newSeAccnt.SeCodeUserTypeId = _seCodeUserTypeId;
			newSeAccnt.LastDate = _lastDate;
			newSeAccnt.SeUserLstId = _seUserLstId;
			return newSeAccnt;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SeAccntId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SeAccntId
		{
			get
			{
				return this.entityData.SeAccntId; 
			}
			
			set
			{
				if (this.entityData.SeAccntId == value)
					return;
					
				OnColumnChanging(SeAccntColumn.SeAccntId, this.entityData.SeAccntId);
				this.entityData.SeAccntId = value;
				this.EntityId.SeAccntId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeAccntColumn.SeAccntId, this.entityData.SeAccntId);
				OnPropertyChanged("SeAccntId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SE_ACCNT_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SE_ACCNT_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSeAccntId
		{
			get { return this.entityData.OriginalSeAccntId; }
			set { this.entityData.OriginalSeAccntId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the DescAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String DescAr
		{
			get
			{
				return this.entityData.DescAr; 
			}
			
			set
			{
				if (this.entityData.DescAr == value)
					return;
					
				OnColumnChanging(SeAccntColumn.DescAr, this.entityData.DescAr);
				this.entityData.DescAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeAccntColumn.DescAr, this.entityData.DescAr);
				OnPropertyChanged("DescAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String DescEn
		{
			get
			{
				return this.entityData.DescEn; 
			}
			
			set
			{
				if (this.entityData.DescEn == value)
					return;
					
				OnColumnChanging(SeAccntColumn.DescEn, this.entityData.DescEn);
				this.entityData.DescEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeAccntColumn.DescEn, this.entityData.DescEn);
				OnPropertyChanged("DescEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TemplateFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTemplateFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TemplateFlg
		{
			get
			{
				return this.entityData.TemplateFlg; 
			}
			
			set
			{
				if (this.entityData.TemplateFlg == value)
					return;
					
				OnColumnChanging(SeAccntColumn.TemplateFlg, this.entityData.TemplateFlg);
				this.entityData.TemplateFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeAccntColumn.TemplateFlg, this.entityData.TemplateFlg);
				OnPropertyChanged("TemplateFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdAccntGuid property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String AdAccntGuid
		{
			get
			{
				return this.entityData.AdAccntGuid; 
			}
			
			set
			{
				if (this.entityData.AdAccntGuid == value)
					return;
					
				OnColumnChanging(SeAccntColumn.AdAccntGuid, this.entityData.AdAccntGuid);
				this.entityData.AdAccntGuid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeAccntColumn.AdAccntGuid, this.entityData.AdAccntGuid);
				OnPropertyChanged("AdAccntGuid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdAccntName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String AdAccntName
		{
			get
			{
				return this.entityData.AdAccntName; 
			}
			
			set
			{
				if (this.entityData.AdAccntName == value)
					return;
					
				OnColumnChanging(SeAccntColumn.AdAccntName, this.entityData.AdAccntName);
				this.entityData.AdAccntName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeAccntColumn.AdAccntName, this.entityData.AdAccntName);
				OnPropertyChanged("AdAccntName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeCodeUserTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SeCodeUserTypeId
		{
			get
			{
				return this.entityData.SeCodeUserTypeId; 
			}
			
			set
			{
				if (this.entityData.SeCodeUserTypeId == value)
					return;
					
				OnColumnChanging(SeAccntColumn.SeCodeUserTypeId, this.entityData.SeCodeUserTypeId);
				this.entityData.SeCodeUserTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeAccntColumn.SeCodeUserTypeId, this.entityData.SeCodeUserTypeId);
				OnPropertyChanged("SeCodeUserTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(SeAccntColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeAccntColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserLstId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserLstIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserLstId
		{
			get
			{
				return this.entityData.SeUserLstId; 
			}
			
			set
			{
				if (this.entityData.SeUserLstId == value)
					return;
					
				OnColumnChanging(SeAccntColumn.SeUserLstId, this.entityData.SeUserLstId);
				this.entityData.SeUserLstId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SeAccntColumn.SeUserLstId, this.entityData.SeUserLstId);
				OnPropertyChanged("SeUserLstId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="SeCodeUserType"/>.
		/// </summary>
		/// <value>The source SeCodeUserType for SeCodeUserTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeCodeUserType SeCodeUserTypeIdSource
      	{
            get { return entityData.SeCodeUserTypeIdSource; }
            set { entityData.SeCodeUserTypeIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of SeUserAccnt objects
		///	which are related to this object through the relation FK_AUTO_052e
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SeUserAccnt> SeUserAccntCollection
		{
			get { return entityData.SeUserAccntCollection; }
			set { entityData.SeUserAccntCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SeApplicationLog objects
		///	which are related to this object through the relation FK_SE_APPLICATION_LOG_SE_ACCNT
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SeApplicationLog> SeApplicationLogCollection
		{
			get { return entityData.SeApplicationLogCollection; }
			set { entityData.SeApplicationLogCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SeAccntControlDiff objects
		///	which are related to this object through the relation FK_SE_ACCNT_CONTROL_DIFF_SE_ACCNT
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SeAccntControlDiff> SeAccntControlDiffCollection
		{
			get { return entityData.SeAccntControlDiffCollection; }
			set { entityData.SeAccntControlDiffCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SeAccntFormDiff objects
		///	which are related to this object through the relation FK_SE_ACCNT_FORM_DIFF_SE_ACCNT
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SeAccntFormDiff> SeAccntFormDiffCollection
		{
			get { return entityData.SeAccntFormDiffCollection; }
			set { entityData.SeAccntFormDiffCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of UsrTopLink objects
		///	which are related to this object through the relation FK_USR_TOP_LINK_SE_ACCNT
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<UsrTopLink> UsrTopLinkCollection
		{
			get { return entityData.UsrTopLinkCollection; }
			set { entityData.UsrTopLinkCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DescAr", "Desc Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescAr", "Desc Ar", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescEn", "Desc En", 100));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("AdAccntGuid", "Ad Accnt Guid"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AdAccntGuid", "Ad Accnt Guid", 150));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("AdAccntName", "Ad Accnt Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AdAccntName", "Ad Accnt Name", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SE_ACCNT"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SE_ACCNT_ID", "DESC_AR", "DESC_EN", "TEMPLATE_FLG", "AD_ACCNT_GUID", "AD_ACCNT_NAME", "SE_CODE_USER_TYPE_ID", "LAST_DATE", "SE_USER_LST_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SeAccntEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SeAccnt) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SeAccnt>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SeAccnt);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SeAccnt Entity 
		///</summary>
		protected virtual SeAccnt Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SeAccnt copy = new SeAccnt();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SeAccntId = this.SeAccntId;
					copy.OriginalSeAccntId = this.OriginalSeAccntId;
				copy.DescAr = this.DescAr;
				copy.DescEn = this.DescEn;
				copy.TemplateFlg = this.TemplateFlg;
				copy.AdAccntGuid = this.AdAccntGuid;
				copy.AdAccntName = this.AdAccntName;
				copy.SeCodeUserTypeId = this.SeCodeUserTypeId;
				copy.LastDate = this.LastDate;
				copy.SeUserLstId = this.SeUserLstId;
			
			if (this.SeCodeUserTypeIdSource != null && existingCopies.Contains(this.SeCodeUserTypeIdSource))
				copy.SeCodeUserTypeIdSource = existingCopies[this.SeCodeUserTypeIdSource] as SeCodeUserType;
			else
				copy.SeCodeUserTypeIdSource = MakeCopyOf(this.SeCodeUserTypeIdSource, existingCopies) as SeCodeUserType;
		
			//deep copy nested objects
			copy.SeUserAccntCollection = (TList<SeUserAccnt>) MakeCopyOf(this.SeUserAccntCollection, existingCopies); 
			copy.SeApplicationLogCollection = (TList<SeApplicationLog>) MakeCopyOf(this.SeApplicationLogCollection, existingCopies); 
			copy.SeAccntControlDiffCollection = (TList<SeAccntControlDiff>) MakeCopyOf(this.SeAccntControlDiffCollection, existingCopies); 
			copy.SeAccntFormDiffCollection = (TList<SeAccntFormDiff>) MakeCopyOf(this.SeAccntFormDiffCollection, existingCopies); 
			copy.UsrTopLinkCollection = (TList<UsrTopLink>) MakeCopyOf(this.UsrTopLinkCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SeAccnt Entity 
		///</summary>
		public virtual SeAccnt Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SeAccnt Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SeAccnt DeepCopy()
		{
			return EntityHelper.Clone<SeAccnt>(this as SeAccnt);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SeAccntEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SeAccntEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SeAccntEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SeAccntColumn column)
		{
			switch(column)
			{
					case SeAccntColumn.SeAccntId:
					return entityData.SeAccntId != _originalData.SeAccntId;
					case SeAccntColumn.DescAr:
					return entityData.DescAr != _originalData.DescAr;
					case SeAccntColumn.DescEn:
					return entityData.DescEn != _originalData.DescEn;
					case SeAccntColumn.TemplateFlg:
					return entityData.TemplateFlg != _originalData.TemplateFlg;
					case SeAccntColumn.AdAccntGuid:
					return entityData.AdAccntGuid != _originalData.AdAccntGuid;
					case SeAccntColumn.AdAccntName:
					return entityData.AdAccntName != _originalData.AdAccntName;
					case SeAccntColumn.SeCodeUserTypeId:
					return entityData.SeCodeUserTypeId != _originalData.SeCodeUserTypeId;
					case SeAccntColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case SeAccntColumn.SeUserLstId:
					return entityData.SeUserLstId != _originalData.SeUserLstId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SeAccntColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SeAccntId != _originalData.SeAccntId;
			result = result || entityData.DescAr != _originalData.DescAr;
			result = result || entityData.DescEn != _originalData.DescEn;
			result = result || entityData.TemplateFlg != _originalData.TemplateFlg;
			result = result || entityData.AdAccntGuid != _originalData.AdAccntGuid;
			result = result || entityData.AdAccntName != _originalData.AdAccntName;
			result = result || entityData.SeCodeUserTypeId != _originalData.SeCodeUserTypeId;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.SeUserLstId != _originalData.SeUserLstId;
			return result;
		}	
		
		///<summary>
		///  Returns a SeAccnt Entity with the original data.
		///</summary>
		public SeAccnt GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSeAccnt(
				_originalData.SeAccntId,
				_originalData.DescAr,
				_originalData.DescEn,
				_originalData.TemplateFlg,
				_originalData.AdAccntGuid,
				_originalData.AdAccntName,
				_originalData.SeCodeUserTypeId,
				_originalData.LastDate,
				_originalData.SeUserLstId
				);
				
			return (SeAccnt)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SeAccntBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SeAccntBase)
				return ValueEquals(this, (SeAccntBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SeAccntBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SeAccntId.GetHashCode() ^ 
					this.DescAr.GetHashCode() ^ 
					((this.DescEn == null) ? string.Empty : this.DescEn.ToString()).GetHashCode() ^ 
					((this.TemplateFlg == null) ? string.Empty : this.TemplateFlg.ToString()).GetHashCode() ^ 
					this.AdAccntGuid.GetHashCode() ^ 
					this.AdAccntName.GetHashCode() ^ 
					this.SeCodeUserTypeId.GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.SeUserLstId == null) ? string.Empty : this.SeUserLstId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SeAccntBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SeAccntBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SeAccntBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SeAccntBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SeAccntBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SeAccntBase Object1, SeAccntBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SeAccntId != Object2.SeAccntId)
				equal = false;
			if (Object1.DescAr != Object2.DescAr)
				equal = false;
			if ( Object1.DescEn != null && Object2.DescEn != null )
			{
				if (Object1.DescEn != Object2.DescEn)
					equal = false;
			}
			else if (Object1.DescEn == null ^ Object2.DescEn == null )
			{
				equal = false;
			}
			if ( Object1.TemplateFlg != null && Object2.TemplateFlg != null )
			{
				if (Object1.TemplateFlg != Object2.TemplateFlg)
					equal = false;
			}
			else if (Object1.TemplateFlg == null ^ Object2.TemplateFlg == null )
			{
				equal = false;
			}
			if (Object1.AdAccntGuid != Object2.AdAccntGuid)
				equal = false;
			if (Object1.AdAccntName != Object2.AdAccntName)
				equal = false;
			if (Object1.SeCodeUserTypeId != Object2.SeCodeUserTypeId)
				equal = false;
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.SeUserLstId != null && Object2.SeUserLstId != null )
			{
				if (Object1.SeUserLstId != Object2.SeUserLstId)
					equal = false;
			}
			else if (Object1.SeUserLstId == null ^ Object2.SeUserLstId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SeAccntBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SeAccntComparer GetComparer()
        {
            return new SeAccntComparer();
        }
        */

        // Comparer delegates back to SeAccnt
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SeAccnt rhs, SeAccntColumn which)
        {
            switch (which)
            {
            	
            	
            	case SeAccntColumn.SeAccntId:
            		return this.SeAccntId.CompareTo(rhs.SeAccntId);
            		
            		                 
            	
            	
            	case SeAccntColumn.DescAr:
            		return this.DescAr.CompareTo(rhs.DescAr);
            		
            		                 
            	
            	
            	case SeAccntColumn.DescEn:
            		return this.DescEn.CompareTo(rhs.DescEn);
            		
            		                 
            	
            	
            	case SeAccntColumn.TemplateFlg:
            		return this.TemplateFlg.Value.CompareTo(rhs.TemplateFlg.Value);
            		
            		                 
            	
            	
            	case SeAccntColumn.AdAccntGuid:
            		return this.AdAccntGuid.CompareTo(rhs.AdAccntGuid);
            		
            		                 
            	
            	
            	case SeAccntColumn.AdAccntName:
            		return this.AdAccntName.CompareTo(rhs.AdAccntName);
            		
            		                 
            	
            	
            	case SeAccntColumn.SeCodeUserTypeId:
            		return this.SeCodeUserTypeId.CompareTo(rhs.SeCodeUserTypeId);
            		
            		                 
            	
            	
            	case SeAccntColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case SeAccntColumn.SeUserLstId:
            		return this.SeUserLstId.Value.CompareTo(rhs.SeUserLstId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SeAccntKey> Members
		
		// member variable for the EntityId property
		private SeAccntKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SeAccntKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SeAccntKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SeAccnt")
					.Append("|").Append( this.SeAccntId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- SeAccntId: {0}{9}- DescAr: {1}{9}- DescEn: {2}{9}- TemplateFlg: {3}{9}- AdAccntGuid: {4}{9}- AdAccntName: {5}{9}- SeCodeUserTypeId: {6}{9}- LastDate: {7}{9}- SeUserLstId: {8}{9}{11}", 
				this.SeAccntId,
				this.DescAr,
				(this.DescEn == null) ? string.Empty : this.DescEn.ToString(),
				(this.TemplateFlg == null) ? string.Empty : this.TemplateFlg.ToString(),
				this.AdAccntGuid,
				this.AdAccntName,
				this.SeCodeUserTypeId,
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.SeUserLstId == null) ? string.Empty : this.SeUserLstId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SE_ACCNT' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SeAccntEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SE_ACCNT_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SE_ACCNT"</remarks>
		public System.Decimal SeAccntId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSeAccntId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// DESC_AR : 
		/// </summary>
		public System.String		  DescAr = string.Empty;
		
		/// <summary>
		/// DESC_EN : 
		/// </summary>
		public System.String		  DescEn = null;
		
		/// <summary>
		/// TEMPLATE_FLG : 
		/// </summary>
		public System.Decimal?		  TemplateFlg = null;
		
		/// <summary>
		/// AD_ACCNT_GUID : 
		/// </summary>
		public System.String		  AdAccntGuid = string.Empty;
		
		/// <summary>
		/// AD_ACCNT_NAME : 
		/// </summary>
		public System.String		  AdAccntName = string.Empty;
		
		/// <summary>
		/// SE_CODE_USER_TYPE_ID : 
		/// </summary>
		public System.Decimal		  SeCodeUserTypeId = 0.0m;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// SE_USER_LST_ID : 
		/// </summary>
		public System.Decimal?		  SeUserLstId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private SeCodeUserType _seCodeUserTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeCodeUserType"/>.
		/// </summary>
		/// <value>The source SeCodeUserType for SeCodeUserTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeCodeUserType SeCodeUserTypeIdSource
      	{
            get { return this._seCodeUserTypeIdSource; }
            set { this._seCodeUserTypeIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region SeUserAccntCollection
		
		private TList<SeUserAccnt> _seUserAccntSeAccountId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _seUserAccntSeAccountId
		/// </summary>
		
		public TList<SeUserAccnt> SeUserAccntCollection
		{
			get
			{
				if (_seUserAccntSeAccountId == null)
				{
				_seUserAccntSeAccountId = new TList<SeUserAccnt>();
				}
	
				return _seUserAccntSeAccountId;
			}
			set { _seUserAccntSeAccountId = value; }
		}
		
		#endregion

		#region SeApplicationLogCollection
		
		private TList<SeApplicationLog> _seApplicationLogSeAccntId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _seApplicationLogSeAccntId
		/// </summary>
		
		public TList<SeApplicationLog> SeApplicationLogCollection
		{
			get
			{
				if (_seApplicationLogSeAccntId == null)
				{
				_seApplicationLogSeAccntId = new TList<SeApplicationLog>();
				}
	
				return _seApplicationLogSeAccntId;
			}
			set { _seApplicationLogSeAccntId = value; }
		}
		
		#endregion

		#region SeAccntControlDiffCollection
		
		private TList<SeAccntControlDiff> _seAccntControlDiffSeAccntId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _seAccntControlDiffSeAccntId
		/// </summary>
		
		public TList<SeAccntControlDiff> SeAccntControlDiffCollection
		{
			get
			{
				if (_seAccntControlDiffSeAccntId == null)
				{
				_seAccntControlDiffSeAccntId = new TList<SeAccntControlDiff>();
				}
	
				return _seAccntControlDiffSeAccntId;
			}
			set { _seAccntControlDiffSeAccntId = value; }
		}
		
		#endregion

		#region SeAccntFormDiffCollection
		
		private TList<SeAccntFormDiff> _seAccntFormDiffSeAccntId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _seAccntFormDiffSeAccntId
		/// </summary>
		
		public TList<SeAccntFormDiff> SeAccntFormDiffCollection
		{
			get
			{
				if (_seAccntFormDiffSeAccntId == null)
				{
				_seAccntFormDiffSeAccntId = new TList<SeAccntFormDiff>();
				}
	
				return _seAccntFormDiffSeAccntId;
			}
			set { _seAccntFormDiffSeAccntId = value; }
		}
		
		#endregion

		#region UsrTopLinkCollection
		
		private TList<UsrTopLink> _usrTopLinkSeAccntId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _usrTopLinkSeAccntId
		/// </summary>
		
		public TList<UsrTopLink> UsrTopLinkCollection
		{
			get
			{
				if (_usrTopLinkSeAccntId == null)
				{
				_usrTopLinkSeAccntId = new TList<UsrTopLink>();
				}
	
				return _usrTopLinkSeAccntId;
			}
			set { _usrTopLinkSeAccntId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SeAccntEntityData _tmp = new SeAccntEntityData();
						
			_tmp.SeAccntId = this.SeAccntId;
			_tmp.OriginalSeAccntId = this.OriginalSeAccntId;
			
			_tmp.DescAr = this.DescAr;
			_tmp.DescEn = this.DescEn;
			_tmp.TemplateFlg = this.TemplateFlg;
			_tmp.AdAccntGuid = this.AdAccntGuid;
			_tmp.AdAccntName = this.AdAccntName;
			_tmp.SeCodeUserTypeId = this.SeCodeUserTypeId;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserLstId = this.SeUserLstId;
			
			#region Source Parent Composite Entities
			if (this.SeCodeUserTypeIdSource != null)
				_tmp.SeCodeUserTypeIdSource = MakeCopyOf(this.SeCodeUserTypeIdSource) as SeCodeUserType;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._seUserAccntSeAccountId != null)
				_tmp.SeUserAccntCollection = (TList<SeUserAccnt>) MakeCopyOf(this.SeUserAccntCollection); 
			if (this._seApplicationLogSeAccntId != null)
				_tmp.SeApplicationLogCollection = (TList<SeApplicationLog>) MakeCopyOf(this.SeApplicationLogCollection); 
			if (this._seAccntControlDiffSeAccntId != null)
				_tmp.SeAccntControlDiffCollection = (TList<SeAccntControlDiff>) MakeCopyOf(this.SeAccntControlDiffCollection); 
			if (this._seAccntFormDiffSeAccntId != null)
				_tmp.SeAccntFormDiffCollection = (TList<SeAccntFormDiff>) MakeCopyOf(this.SeAccntFormDiffCollection); 
			if (this._usrTopLinkSeAccntId != null)
				_tmp.UsrTopLinkCollection = (TList<UsrTopLink>) MakeCopyOf(this.UsrTopLinkCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SeAccntEntityData _tmp = new SeAccntEntityData();
						
			_tmp.SeAccntId = this.SeAccntId;
			_tmp.OriginalSeAccntId = this.OriginalSeAccntId;
			
			_tmp.DescAr = this.DescAr;
			_tmp.DescEn = this.DescEn;
			_tmp.TemplateFlg = this.TemplateFlg;
			_tmp.AdAccntGuid = this.AdAccntGuid;
			_tmp.AdAccntName = this.AdAccntName;
			_tmp.SeCodeUserTypeId = this.SeCodeUserTypeId;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserLstId = this.SeUserLstId;
			
			#region Source Parent Composite Entities
			if (this.SeCodeUserTypeIdSource != null && existingCopies.Contains(this.SeCodeUserTypeIdSource))
				_tmp.SeCodeUserTypeIdSource = existingCopies[this.SeCodeUserTypeIdSource] as SeCodeUserType;
			else
				_tmp.SeCodeUserTypeIdSource = MakeCopyOf(this.SeCodeUserTypeIdSource, existingCopies) as SeCodeUserType;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.SeUserAccntCollection = (TList<SeUserAccnt>) MakeCopyOf(this.SeUserAccntCollection, existingCopies); 
			_tmp.SeApplicationLogCollection = (TList<SeApplicationLog>) MakeCopyOf(this.SeApplicationLogCollection, existingCopies); 
			_tmp.SeAccntControlDiffCollection = (TList<SeAccntControlDiff>) MakeCopyOf(this.SeAccntControlDiffCollection, existingCopies); 
			_tmp.SeAccntFormDiffCollection = (TList<SeAccntFormDiff>) MakeCopyOf(this.SeAccntFormDiffCollection, existingCopies); 
			_tmp.UsrTopLinkCollection = (TList<UsrTopLink>) MakeCopyOf(this.UsrTopLinkCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SeAccntColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SeAccntColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SeAccntColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SeAccntColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SeAccntColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SeAccntColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SeAccntEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SeAccntEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SeAccntColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SeAccntColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SeAccntEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SeAccntEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SeAccntEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SeAccnt"/> object.
	/// </remarks>
	public class SeAccntEventArgs : System.EventArgs
	{
		private SeAccntColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SeAccntEventArgs class.
		///</summary>
		public SeAccntEventArgs(SeAccntColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SeAccntEventArgs class.
		///</summary>
		public SeAccntEventArgs(SeAccntColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SeAccntColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SeAccntColumn" />
		public SeAccntColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SeAccnt related events.
	///</summary>
	public delegate void SeAccntEventHandler(object sender, SeAccntEventArgs e);
	
	#region SeAccntComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SeAccntComparer : System.Collections.Generic.IComparer<SeAccnt>
	{
		SeAccntColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SeAccntComparer"/> class.
        /// </summary>
		public SeAccntComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SeAccntComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SeAccntComparer(SeAccntColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SeAccnt"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SeAccnt"/> to compare.</param>
        /// <param name="b">The second <c>SeAccnt</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SeAccnt a, SeAccnt b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SeAccnt entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SeAccnt a, SeAccnt b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SeAccntColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SeAccntKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SeAccnt"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SeAccntKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SeAccntKey class.
		/// </summary>
		public SeAccntKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SeAccntKey class.
		/// </summary>
		public SeAccntKey(SeAccntBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SeAccntId = entity.SeAccntId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SeAccntKey class.
		/// </summary>
		public SeAccntKey(System.Decimal _seAccntId)
		{
			#region Init Properties

			this.SeAccntId = _seAccntId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SeAccntBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SeAccntBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SeAccntId property
		private System.Decimal _seAccntId;
		
		/// <summary>
		/// Gets or sets the SeAccntId property.
		/// </summary>
		public System.Decimal SeAccntId
		{
			get { return _seAccntId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SeAccntId = value;
				
				_seAccntId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SeAccntId = ( values["SeAccntId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SeAccntId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SeAccntId", SeAccntId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SeAccntId: {0}{1}",
								SeAccntId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SeAccntColumn Enum
	
	/// <summary>
	/// Enumerate the SeAccnt columns.
	/// </summary>
	[Serializable]
	public enum SeAccntColumn : int
	{
		/// <summary>
		/// SeAccntId : 
		/// </summary>
		[EnumTextValue("SE_ACCNT_ID")]
		[ColumnEnum("SE_ACCNT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SeAccntId = 1,
		/// <summary>
		/// DescAr : 
		/// </summary>
		[EnumTextValue("DESC_AR")]
		[ColumnEnum("DESC_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		DescAr = 2,
		/// <summary>
		/// DescEn : 
		/// </summary>
		[EnumTextValue("DESC_EN")]
		[ColumnEnum("DESC_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		DescEn = 3,
		/// <summary>
		/// TemplateFlg : 
		/// </summary>
		[EnumTextValue("TEMPLATE_FLG")]
		[ColumnEnum("TEMPLATE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TemplateFlg = 4,
		/// <summary>
		/// AdAccntGuid : 
		/// </summary>
		[EnumTextValue("AD_ACCNT_GUID")]
		[ColumnEnum("AD_ACCNT_GUID", typeof(System.String), System.Data.DbType.String, false, false, false, 150)]
		AdAccntGuid = 5,
		/// <summary>
		/// AdAccntName : 
		/// </summary>
		[EnumTextValue("AD_ACCNT_NAME")]
		[ColumnEnum("AD_ACCNT_NAME", typeof(System.String), System.Data.DbType.String, false, false, false, 150)]
		AdAccntName = 6,
		/// <summary>
		/// SeCodeUserTypeId : 
		/// </summary>
		[EnumTextValue("SE_CODE_USER_TYPE_ID")]
		[ColumnEnum("SE_CODE_USER_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SeCodeUserTypeId = 7,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 8,
		/// <summary>
		/// SeUserLstId : 
		/// </summary>
		[EnumTextValue("SE_USER_LST_ID")]
		[ColumnEnum("SE_USER_LST_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserLstId = 9
	}//End enum

	#endregion SeAccntColumn Enum

} // end namespace
