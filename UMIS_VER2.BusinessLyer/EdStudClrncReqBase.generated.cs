
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdStudClrncReq.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_STUD_CLRNC_REQ' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdStudClrncReqBase : EntityBase, IEdStudClrncReq, IEntityId<EdStudClrncReqKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdStudClrncReqEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdStudClrncReqEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdStudClrncReqEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdStudClrncReq> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudClrncReqEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudClrncReqEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdStudClrncReqBase"/> instance.
		///</summary>
		public EdStudClrncReqBase()
		{
			this.entityData = new EdStudClrncReqEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdStudClrncReqBase"/> instance.
		///</summary>
		///<param name="_edStudClrncReqId"></param>
		///<param name="_reqDate"></param>
		///<param name="_reqStatusDate"></param>
		///<param name="_edStudSemesterId"></param>
		///<param name="_gsCdeClrncReasonId"></param>
		///<param name="_gsCodeReqStatusId"></param>
		///<param name="_withdrawDate"></param>
		///<param name="_withdrawName"></param>
		///<param name="_notes"></param>
		public EdStudClrncReqBase(System.Decimal _edStudClrncReqId, System.DateTime? _reqDate, 
			System.DateTime? _reqStatusDate, System.Decimal? _edStudSemesterId, System.Decimal _gsCdeClrncReasonId, 
			System.Decimal _gsCodeReqStatusId, System.DateTime? _withdrawDate, System.String _withdrawName, 
			System.String _notes)
		{
			this.entityData = new EdStudClrncReqEntityData();
			this.backupData = null;

			this.EdStudClrncReqId = _edStudClrncReqId;
			this.ReqDate = _reqDate;
			this.ReqStatusDate = _reqStatusDate;
			this.EdStudSemesterId = _edStudSemesterId;
			this.GsCdeClrncReasonId = _gsCdeClrncReasonId;
			this.GsCodeReqStatusId = _gsCodeReqStatusId;
			this.WithdrawDate = _withdrawDate;
			this.WithdrawName = _withdrawName;
			this.Notes = _notes;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdStudClrncReq"/> instance.
		///</summary>
		///<param name="_edStudClrncReqId"></param>
		///<param name="_reqDate"></param>
		///<param name="_reqStatusDate"></param>
		///<param name="_edStudSemesterId"></param>
		///<param name="_gsCdeClrncReasonId"></param>
		///<param name="_gsCodeReqStatusId"></param>
		///<param name="_withdrawDate"></param>
		///<param name="_withdrawName"></param>
		///<param name="_notes"></param>
		public static EdStudClrncReq CreateEdStudClrncReq(System.Decimal _edStudClrncReqId, System.DateTime? _reqDate, 
			System.DateTime? _reqStatusDate, System.Decimal? _edStudSemesterId, System.Decimal _gsCdeClrncReasonId, 
			System.Decimal _gsCodeReqStatusId, System.DateTime? _withdrawDate, System.String _withdrawName, 
			System.String _notes)
		{
			EdStudClrncReq newEdStudClrncReq = new EdStudClrncReq();
			newEdStudClrncReq.EdStudClrncReqId = _edStudClrncReqId;
			newEdStudClrncReq.ReqDate = _reqDate;
			newEdStudClrncReq.ReqStatusDate = _reqStatusDate;
			newEdStudClrncReq.EdStudSemesterId = _edStudSemesterId;
			newEdStudClrncReq.GsCdeClrncReasonId = _gsCdeClrncReasonId;
			newEdStudClrncReq.GsCodeReqStatusId = _gsCodeReqStatusId;
			newEdStudClrncReq.WithdrawDate = _withdrawDate;
			newEdStudClrncReq.WithdrawName = _withdrawName;
			newEdStudClrncReq.Notes = _notes;
			return newEdStudClrncReq;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdStudClrncReqId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdStudClrncReqId
		{
			get
			{
				return this.entityData.EdStudClrncReqId; 
			}
			
			set
			{
				if (this.entityData.EdStudClrncReqId == value)
					return;
					
				OnColumnChanging(EdStudClrncReqColumn.EdStudClrncReqId, this.entityData.EdStudClrncReqId);
				this.entityData.EdStudClrncReqId = value;
				this.EntityId.EdStudClrncReqId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudClrncReqColumn.EdStudClrncReqId, this.entityData.EdStudClrncReqId);
				OnPropertyChanged("EdStudClrncReqId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_STUD_CLRNC_REQ_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ED_STUD_CLRNC_REQ_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdStudClrncReqId
		{
			get { return this.entityData.OriginalEdStudClrncReqId; }
			set { this.entityData.OriginalEdStudClrncReqId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the ReqDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsReqDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ReqDate
		{
			get
			{
				return this.entityData.ReqDate; 
			}
			
			set
			{
				if (this.entityData.ReqDate == value)
					return;
					
				OnColumnChanging(EdStudClrncReqColumn.ReqDate, this.entityData.ReqDate);
				this.entityData.ReqDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudClrncReqColumn.ReqDate, this.entityData.ReqDate);
				OnPropertyChanged("ReqDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReqStatusDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsReqStatusDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ReqStatusDate
		{
			get
			{
				return this.entityData.ReqStatusDate; 
			}
			
			set
			{
				if (this.entityData.ReqStatusDate == value)
					return;
					
				OnColumnChanging(EdStudClrncReqColumn.ReqStatusDate, this.entityData.ReqStatusDate);
				this.entityData.ReqStatusDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudClrncReqColumn.ReqStatusDate, this.entityData.ReqStatusDate);
				OnPropertyChanged("ReqStatusDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdStudSemesterIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdStudSemesterId
		{
			get
			{
				return this.entityData.EdStudSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdStudSemesterId == value)
					return;
					
				OnColumnChanging(EdStudClrncReqColumn.EdStudSemesterId, this.entityData.EdStudSemesterId);
				this.entityData.EdStudSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudClrncReqColumn.EdStudSemesterId, this.entityData.EdStudSemesterId);
				OnPropertyChanged("EdStudSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCdeClrncReasonId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsCdeClrncReasonId
		{
			get
			{
				return this.entityData.GsCdeClrncReasonId; 
			}
			
			set
			{
				if (this.entityData.GsCdeClrncReasonId == value)
					return;
					
				OnColumnChanging(EdStudClrncReqColumn.GsCdeClrncReasonId, this.entityData.GsCdeClrncReasonId);
				this.entityData.GsCdeClrncReasonId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudClrncReqColumn.GsCdeClrncReasonId, this.entityData.GsCdeClrncReasonId);
				OnPropertyChanged("GsCdeClrncReasonId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeReqStatusId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsCodeReqStatusId
		{
			get
			{
				return this.entityData.GsCodeReqStatusId; 
			}
			
			set
			{
				if (this.entityData.GsCodeReqStatusId == value)
					return;
					
				OnColumnChanging(EdStudClrncReqColumn.GsCodeReqStatusId, this.entityData.GsCodeReqStatusId);
				this.entityData.GsCodeReqStatusId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudClrncReqColumn.GsCodeReqStatusId, this.entityData.GsCodeReqStatusId);
				OnPropertyChanged("GsCodeReqStatusId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WithdrawDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsWithdrawDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? WithdrawDate
		{
			get
			{
				return this.entityData.WithdrawDate; 
			}
			
			set
			{
				if (this.entityData.WithdrawDate == value)
					return;
					
				OnColumnChanging(EdStudClrncReqColumn.WithdrawDate, this.entityData.WithdrawDate);
				this.entityData.WithdrawDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudClrncReqColumn.WithdrawDate, this.entityData.WithdrawDate);
				OnPropertyChanged("WithdrawDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WithdrawName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String WithdrawName
		{
			get
			{
				return this.entityData.WithdrawName; 
			}
			
			set
			{
				if (this.entityData.WithdrawName == value)
					return;
					
				OnColumnChanging(EdStudClrncReqColumn.WithdrawName, this.entityData.WithdrawName);
				this.entityData.WithdrawName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudClrncReqColumn.WithdrawName, this.entityData.WithdrawName);
				OnPropertyChanged("WithdrawName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 240)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(EdStudClrncReqColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudClrncReqColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdStudSemester"/>.
		/// </summary>
		/// <value>The source EdStudSemester for EdStudSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStudSemester EdStudSemesterIdSource
      	{
            get { return entityData.EdStudSemesterIdSource; }
            set { entityData.EdStudSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCdeClrncReason"/>.
		/// </summary>
		/// <value>The source GsCdeClrncReason for GsCdeClrncReasonId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCdeClrncReason GsCdeClrncReasonIdSource
      	{
            get { return entityData.GsCdeClrncReasonIdSource; }
            set { entityData.GsCdeClrncReasonIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeReqStatus"/>.
		/// </summary>
		/// <value>The source GsCodeReqStatus for GsCodeReqStatusId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeReqStatus GsCodeReqStatusIdSource
      	{
            get { return entityData.GsCodeReqStatusIdSource; }
            set { entityData.GsCodeReqStatusIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of GsAttchdDoc objects
		///	which are related to this object through the relation FK_GS_ATTCHD_DOC_ED_STUD_CLRNC_REQ
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GsAttchdDoc> GsAttchdDocCollection
		{
			get { return entityData.GsAttchdDocCollection; }
			set { entityData.GsAttchdDocCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudClrncItem objects
		///	which are related to this object through the relation FK_ED_STUD_CLRNC_ITEM_ED_STUD_CLRNC_REQ
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudClrncItem> EdStudClrncItemCollection
		{
			get { return entityData.EdStudClrncItemCollection; }
			set { entityData.EdStudClrncItemCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("WithdrawName", "Withdraw Name", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 240));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_STUD_CLRNC_REQ"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_STUD_CLRNC_REQ_ID", "REQ_DATE", "REQ_STATUS_DATE", "ED_STUD_SEMESTER_ID", "GS_CDE_CLRNC_REASON_ID", "GS_CODE_REQ_STATUS_ID", "WITHDRAW_DATE", "WITHDRAW_NAME", "NOTES"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdStudClrncReqEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdStudClrncReq) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdStudClrncReq>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdStudClrncReq);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdStudClrncReq Entity 
		///</summary>
		protected virtual EdStudClrncReq Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdStudClrncReq copy = new EdStudClrncReq();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdStudClrncReqId = this.EdStudClrncReqId;
					copy.OriginalEdStudClrncReqId = this.OriginalEdStudClrncReqId;
				copy.ReqDate = this.ReqDate;
				copy.ReqStatusDate = this.ReqStatusDate;
				copy.EdStudSemesterId = this.EdStudSemesterId;
				copy.GsCdeClrncReasonId = this.GsCdeClrncReasonId;
				copy.GsCodeReqStatusId = this.GsCodeReqStatusId;
				copy.WithdrawDate = this.WithdrawDate;
				copy.WithdrawName = this.WithdrawName;
				copy.Notes = this.Notes;
			
			if (this.EdStudSemesterIdSource != null && existingCopies.Contains(this.EdStudSemesterIdSource))
				copy.EdStudSemesterIdSource = existingCopies[this.EdStudSemesterIdSource] as EdStudSemester;
			else
				copy.EdStudSemesterIdSource = MakeCopyOf(this.EdStudSemesterIdSource, existingCopies) as EdStudSemester;
			if (this.GsCdeClrncReasonIdSource != null && existingCopies.Contains(this.GsCdeClrncReasonIdSource))
				copy.GsCdeClrncReasonIdSource = existingCopies[this.GsCdeClrncReasonIdSource] as GsCdeClrncReason;
			else
				copy.GsCdeClrncReasonIdSource = MakeCopyOf(this.GsCdeClrncReasonIdSource, existingCopies) as GsCdeClrncReason;
			if (this.GsCodeReqStatusIdSource != null && existingCopies.Contains(this.GsCodeReqStatusIdSource))
				copy.GsCodeReqStatusIdSource = existingCopies[this.GsCodeReqStatusIdSource] as GsCodeReqStatus;
			else
				copy.GsCodeReqStatusIdSource = MakeCopyOf(this.GsCodeReqStatusIdSource, existingCopies) as GsCodeReqStatus;
		
			//deep copy nested objects
			copy.GsAttchdDocCollection = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollection, existingCopies); 
			copy.EdStudClrncItemCollection = (TList<EdStudClrncItem>) MakeCopyOf(this.EdStudClrncItemCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdStudClrncReq Entity 
		///</summary>
		public virtual EdStudClrncReq Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdStudClrncReq Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdStudClrncReq DeepCopy()
		{
			return EntityHelper.Clone<EdStudClrncReq>(this as EdStudClrncReq);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdStudClrncReqEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdStudClrncReqEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdStudClrncReqEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdStudClrncReqColumn column)
		{
			switch(column)
			{
					case EdStudClrncReqColumn.EdStudClrncReqId:
					return entityData.EdStudClrncReqId != _originalData.EdStudClrncReqId;
					case EdStudClrncReqColumn.ReqDate:
					return entityData.ReqDate != _originalData.ReqDate;
					case EdStudClrncReqColumn.ReqStatusDate:
					return entityData.ReqStatusDate != _originalData.ReqStatusDate;
					case EdStudClrncReqColumn.EdStudSemesterId:
					return entityData.EdStudSemesterId != _originalData.EdStudSemesterId;
					case EdStudClrncReqColumn.GsCdeClrncReasonId:
					return entityData.GsCdeClrncReasonId != _originalData.GsCdeClrncReasonId;
					case EdStudClrncReqColumn.GsCodeReqStatusId:
					return entityData.GsCodeReqStatusId != _originalData.GsCodeReqStatusId;
					case EdStudClrncReqColumn.WithdrawDate:
					return entityData.WithdrawDate != _originalData.WithdrawDate;
					case EdStudClrncReqColumn.WithdrawName:
					return entityData.WithdrawName != _originalData.WithdrawName;
					case EdStudClrncReqColumn.Notes:
					return entityData.Notes != _originalData.Notes;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdStudClrncReqColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdStudClrncReqId != _originalData.EdStudClrncReqId;
			result = result || entityData.ReqDate != _originalData.ReqDate;
			result = result || entityData.ReqStatusDate != _originalData.ReqStatusDate;
			result = result || entityData.EdStudSemesterId != _originalData.EdStudSemesterId;
			result = result || entityData.GsCdeClrncReasonId != _originalData.GsCdeClrncReasonId;
			result = result || entityData.GsCodeReqStatusId != _originalData.GsCodeReqStatusId;
			result = result || entityData.WithdrawDate != _originalData.WithdrawDate;
			result = result || entityData.WithdrawName != _originalData.WithdrawName;
			result = result || entityData.Notes != _originalData.Notes;
			return result;
		}	
		
		///<summary>
		///  Returns a EdStudClrncReq Entity with the original data.
		///</summary>
		public EdStudClrncReq GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdStudClrncReq(
				_originalData.EdStudClrncReqId,
				_originalData.ReqDate,
				_originalData.ReqStatusDate,
				_originalData.EdStudSemesterId,
				_originalData.GsCdeClrncReasonId,
				_originalData.GsCodeReqStatusId,
				_originalData.WithdrawDate,
				_originalData.WithdrawName,
				_originalData.Notes
				);
				
			return (EdStudClrncReq)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdStudClrncReqBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdStudClrncReqBase)
				return ValueEquals(this, (EdStudClrncReqBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdStudClrncReqBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdStudClrncReqId.GetHashCode() ^ 
					((this.ReqDate == null) ? string.Empty : this.ReqDate.ToString()).GetHashCode() ^ 
					((this.ReqStatusDate == null) ? string.Empty : this.ReqStatusDate.ToString()).GetHashCode() ^ 
					((this.EdStudSemesterId == null) ? string.Empty : this.EdStudSemesterId.ToString()).GetHashCode() ^ 
					this.GsCdeClrncReasonId.GetHashCode() ^ 
					this.GsCodeReqStatusId.GetHashCode() ^ 
					((this.WithdrawDate == null) ? string.Empty : this.WithdrawDate.ToString()).GetHashCode() ^ 
					((this.WithdrawName == null) ? string.Empty : this.WithdrawName.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdStudClrncReqBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdStudClrncReqBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdStudClrncReqBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdStudClrncReqBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdStudClrncReqBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdStudClrncReqBase Object1, EdStudClrncReqBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdStudClrncReqId != Object2.EdStudClrncReqId)
				equal = false;
			if ( Object1.ReqDate != null && Object2.ReqDate != null )
			{
				if (Object1.ReqDate != Object2.ReqDate)
					equal = false;
			}
			else if (Object1.ReqDate == null ^ Object2.ReqDate == null )
			{
				equal = false;
			}
			if ( Object1.ReqStatusDate != null && Object2.ReqStatusDate != null )
			{
				if (Object1.ReqStatusDate != Object2.ReqStatusDate)
					equal = false;
			}
			else if (Object1.ReqStatusDate == null ^ Object2.ReqStatusDate == null )
			{
				equal = false;
			}
			if ( Object1.EdStudSemesterId != null && Object2.EdStudSemesterId != null )
			{
				if (Object1.EdStudSemesterId != Object2.EdStudSemesterId)
					equal = false;
			}
			else if (Object1.EdStudSemesterId == null ^ Object2.EdStudSemesterId == null )
			{
				equal = false;
			}
			if (Object1.GsCdeClrncReasonId != Object2.GsCdeClrncReasonId)
				equal = false;
			if (Object1.GsCodeReqStatusId != Object2.GsCodeReqStatusId)
				equal = false;
			if ( Object1.WithdrawDate != null && Object2.WithdrawDate != null )
			{
				if (Object1.WithdrawDate != Object2.WithdrawDate)
					equal = false;
			}
			else if (Object1.WithdrawDate == null ^ Object2.WithdrawDate == null )
			{
				equal = false;
			}
			if ( Object1.WithdrawName != null && Object2.WithdrawName != null )
			{
				if (Object1.WithdrawName != Object2.WithdrawName)
					equal = false;
			}
			else if (Object1.WithdrawName == null ^ Object2.WithdrawName == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdStudClrncReqBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdStudClrncReqComparer GetComparer()
        {
            return new EdStudClrncReqComparer();
        }
        */

        // Comparer delegates back to EdStudClrncReq
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdStudClrncReq rhs, EdStudClrncReqColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdStudClrncReqColumn.EdStudClrncReqId:
            		return this.EdStudClrncReqId.CompareTo(rhs.EdStudClrncReqId);
            		
            		                 
            	
            	
            	case EdStudClrncReqColumn.ReqDate:
            		return this.ReqDate.Value.CompareTo(rhs.ReqDate.Value);
            		
            		                 
            	
            	
            	case EdStudClrncReqColumn.ReqStatusDate:
            		return this.ReqStatusDate.Value.CompareTo(rhs.ReqStatusDate.Value);
            		
            		                 
            	
            	
            	case EdStudClrncReqColumn.EdStudSemesterId:
            		return this.EdStudSemesterId.Value.CompareTo(rhs.EdStudSemesterId.Value);
            		
            		                 
            	
            	
            	case EdStudClrncReqColumn.GsCdeClrncReasonId:
            		return this.GsCdeClrncReasonId.CompareTo(rhs.GsCdeClrncReasonId);
            		
            		                 
            	
            	
            	case EdStudClrncReqColumn.GsCodeReqStatusId:
            		return this.GsCodeReqStatusId.CompareTo(rhs.GsCodeReqStatusId);
            		
            		                 
            	
            	
            	case EdStudClrncReqColumn.WithdrawDate:
            		return this.WithdrawDate.Value.CompareTo(rhs.WithdrawDate.Value);
            		
            		                 
            	
            	
            	case EdStudClrncReqColumn.WithdrawName:
            		return this.WithdrawName.CompareTo(rhs.WithdrawName);
            		
            		                 
            	
            	
            	case EdStudClrncReqColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdStudClrncReqKey> Members
		
		// member variable for the EntityId property
		private EdStudClrncReqKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdStudClrncReqKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdStudClrncReqKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdStudClrncReq")
					.Append("|").Append( this.EdStudClrncReqId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- EdStudClrncReqId: {0}{9}- ReqDate: {1}{9}- ReqStatusDate: {2}{9}- EdStudSemesterId: {3}{9}- GsCdeClrncReasonId: {4}{9}- GsCodeReqStatusId: {5}{9}- WithdrawDate: {6}{9}- WithdrawName: {7}{9}- Notes: {8}{9}{11}", 
				this.EdStudClrncReqId,
				(this.ReqDate == null) ? string.Empty : this.ReqDate.ToString(),
				(this.ReqStatusDate == null) ? string.Empty : this.ReqStatusDate.ToString(),
				(this.EdStudSemesterId == null) ? string.Empty : this.EdStudSemesterId.ToString(),
				this.GsCdeClrncReasonId,
				this.GsCodeReqStatusId,
				(this.WithdrawDate == null) ? string.Empty : this.WithdrawDate.ToString(),
				(this.WithdrawName == null) ? string.Empty : this.WithdrawName.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_STUD_CLRNC_REQ' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdStudClrncReqEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_STUD_CLRNC_REQ_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_STUD_CLRNC_REQ"</remarks>
		public System.Decimal EdStudClrncReqId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdStudClrncReqId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// REQ_DATE : 
		/// </summary>
		public System.DateTime?		  ReqDate = null;
		
		/// <summary>
		/// REQ_STATUS_DATE : 
		/// </summary>
		public System.DateTime?		  ReqStatusDate = null;
		
		/// <summary>
		/// ED_STUD_SEMESTER_ID : 
		/// </summary>
		public System.Decimal?		  EdStudSemesterId = null;
		
		/// <summary>
		/// GS_CDE_CLRNC_REASON_ID : 
		/// </summary>
		public System.Decimal		  GsCdeClrncReasonId = 0.0m;
		
		/// <summary>
		/// GS_CODE_REQ_STATUS_ID : 
		/// </summary>
		public System.Decimal		  GsCodeReqStatusId = 0.0m;
		
		/// <summary>
		/// WITHDRAW_DATE : 
		/// </summary>
		public System.DateTime?		  WithdrawDate = null;
		
		/// <summary>
		/// WITHDRAW_NAME : 
		/// </summary>
		public System.String		  WithdrawName = null;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdStudSemester _edStudSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStudSemester"/>.
		/// </summary>
		/// <value>The source EdStudSemester for EdStudSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStudSemester EdStudSemesterIdSource
      	{
            get { return this._edStudSemesterIdSource; }
            set { this._edStudSemesterIdSource = value; }
      	}
		private GsCdeClrncReason _gsCdeClrncReasonIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCdeClrncReason"/>.
		/// </summary>
		/// <value>The source GsCdeClrncReason for GsCdeClrncReasonId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCdeClrncReason GsCdeClrncReasonIdSource
      	{
            get { return this._gsCdeClrncReasonIdSource; }
            set { this._gsCdeClrncReasonIdSource = value; }
      	}
		private GsCodeReqStatus _gsCodeReqStatusIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeReqStatus"/>.
		/// </summary>
		/// <value>The source GsCodeReqStatus for GsCodeReqStatusId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeReqStatus GsCodeReqStatusIdSource
      	{
            get { return this._gsCodeReqStatusIdSource; }
            set { this._gsCodeReqStatusIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region GsAttchdDocCollection
		
		private TList<GsAttchdDoc> _gsAttchdDocEdStudClrncReqId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _gsAttchdDocEdStudClrncReqId
		/// </summary>
		
		public TList<GsAttchdDoc> GsAttchdDocCollection
		{
			get
			{
				if (_gsAttchdDocEdStudClrncReqId == null)
				{
				_gsAttchdDocEdStudClrncReqId = new TList<GsAttchdDoc>();
				}
	
				return _gsAttchdDocEdStudClrncReqId;
			}
			set { _gsAttchdDocEdStudClrncReqId = value; }
		}
		
		#endregion

		#region EdStudClrncItemCollection
		
		private TList<EdStudClrncItem> _edStudClrncItemEdStudClrncReqId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudClrncItemEdStudClrncReqId
		/// </summary>
		
		public TList<EdStudClrncItem> EdStudClrncItemCollection
		{
			get
			{
				if (_edStudClrncItemEdStudClrncReqId == null)
				{
				_edStudClrncItemEdStudClrncReqId = new TList<EdStudClrncItem>();
				}
	
				return _edStudClrncItemEdStudClrncReqId;
			}
			set { _edStudClrncItemEdStudClrncReqId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdStudClrncReqEntityData _tmp = new EdStudClrncReqEntityData();
						
			_tmp.EdStudClrncReqId = this.EdStudClrncReqId;
			_tmp.OriginalEdStudClrncReqId = this.OriginalEdStudClrncReqId;
			
			_tmp.ReqDate = this.ReqDate;
			_tmp.ReqStatusDate = this.ReqStatusDate;
			_tmp.EdStudSemesterId = this.EdStudSemesterId;
			_tmp.GsCdeClrncReasonId = this.GsCdeClrncReasonId;
			_tmp.GsCodeReqStatusId = this.GsCodeReqStatusId;
			_tmp.WithdrawDate = this.WithdrawDate;
			_tmp.WithdrawName = this.WithdrawName;
			_tmp.Notes = this.Notes;
			
			#region Source Parent Composite Entities
			if (this.EdStudSemesterIdSource != null)
				_tmp.EdStudSemesterIdSource = MakeCopyOf(this.EdStudSemesterIdSource) as EdStudSemester;
			if (this.GsCdeClrncReasonIdSource != null)
				_tmp.GsCdeClrncReasonIdSource = MakeCopyOf(this.GsCdeClrncReasonIdSource) as GsCdeClrncReason;
			if (this.GsCodeReqStatusIdSource != null)
				_tmp.GsCodeReqStatusIdSource = MakeCopyOf(this.GsCodeReqStatusIdSource) as GsCodeReqStatus;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._gsAttchdDocEdStudClrncReqId != null)
				_tmp.GsAttchdDocCollection = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollection); 
			if (this._edStudClrncItemEdStudClrncReqId != null)
				_tmp.EdStudClrncItemCollection = (TList<EdStudClrncItem>) MakeCopyOf(this.EdStudClrncItemCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdStudClrncReqEntityData _tmp = new EdStudClrncReqEntityData();
						
			_tmp.EdStudClrncReqId = this.EdStudClrncReqId;
			_tmp.OriginalEdStudClrncReqId = this.OriginalEdStudClrncReqId;
			
			_tmp.ReqDate = this.ReqDate;
			_tmp.ReqStatusDate = this.ReqStatusDate;
			_tmp.EdStudSemesterId = this.EdStudSemesterId;
			_tmp.GsCdeClrncReasonId = this.GsCdeClrncReasonId;
			_tmp.GsCodeReqStatusId = this.GsCodeReqStatusId;
			_tmp.WithdrawDate = this.WithdrawDate;
			_tmp.WithdrawName = this.WithdrawName;
			_tmp.Notes = this.Notes;
			
			#region Source Parent Composite Entities
			if (this.EdStudSemesterIdSource != null && existingCopies.Contains(this.EdStudSemesterIdSource))
				_tmp.EdStudSemesterIdSource = existingCopies[this.EdStudSemesterIdSource] as EdStudSemester;
			else
				_tmp.EdStudSemesterIdSource = MakeCopyOf(this.EdStudSemesterIdSource, existingCopies) as EdStudSemester;
			if (this.GsCdeClrncReasonIdSource != null && existingCopies.Contains(this.GsCdeClrncReasonIdSource))
				_tmp.GsCdeClrncReasonIdSource = existingCopies[this.GsCdeClrncReasonIdSource] as GsCdeClrncReason;
			else
				_tmp.GsCdeClrncReasonIdSource = MakeCopyOf(this.GsCdeClrncReasonIdSource, existingCopies) as GsCdeClrncReason;
			if (this.GsCodeReqStatusIdSource != null && existingCopies.Contains(this.GsCodeReqStatusIdSource))
				_tmp.GsCodeReqStatusIdSource = existingCopies[this.GsCodeReqStatusIdSource] as GsCodeReqStatus;
			else
				_tmp.GsCodeReqStatusIdSource = MakeCopyOf(this.GsCodeReqStatusIdSource, existingCopies) as GsCodeReqStatus;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.GsAttchdDocCollection = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollection, existingCopies); 
			_tmp.EdStudClrncItemCollection = (TList<EdStudClrncItem>) MakeCopyOf(this.EdStudClrncItemCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudClrncReqColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdStudClrncReqColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudClrncReqColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdStudClrncReqColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudClrncReqColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdStudClrncReqColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdStudClrncReqEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdStudClrncReqEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudClrncReqColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdStudClrncReqColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdStudClrncReqEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdStudClrncReqEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdStudClrncReqEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdStudClrncReq"/> object.
	/// </remarks>
	public class EdStudClrncReqEventArgs : System.EventArgs
	{
		private EdStudClrncReqColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdStudClrncReqEventArgs class.
		///</summary>
		public EdStudClrncReqEventArgs(EdStudClrncReqColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdStudClrncReqEventArgs class.
		///</summary>
		public EdStudClrncReqEventArgs(EdStudClrncReqColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdStudClrncReqColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdStudClrncReqColumn" />
		public EdStudClrncReqColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdStudClrncReq related events.
	///</summary>
	public delegate void EdStudClrncReqEventHandler(object sender, EdStudClrncReqEventArgs e);
	
	#region EdStudClrncReqComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdStudClrncReqComparer : System.Collections.Generic.IComparer<EdStudClrncReq>
	{
		EdStudClrncReqColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudClrncReqComparer"/> class.
        /// </summary>
		public EdStudClrncReqComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudClrncReqComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdStudClrncReqComparer(EdStudClrncReqColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdStudClrncReq"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdStudClrncReq"/> to compare.</param>
        /// <param name="b">The second <c>EdStudClrncReq</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdStudClrncReq a, EdStudClrncReq b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdStudClrncReq entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdStudClrncReq a, EdStudClrncReq b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdStudClrncReqColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdStudClrncReqKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdStudClrncReq"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdStudClrncReqKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdStudClrncReqKey class.
		/// </summary>
		public EdStudClrncReqKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudClrncReqKey class.
		/// </summary>
		public EdStudClrncReqKey(EdStudClrncReqBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdStudClrncReqId = entity.EdStudClrncReqId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudClrncReqKey class.
		/// </summary>
		public EdStudClrncReqKey(System.Decimal _edStudClrncReqId)
		{
			#region Init Properties

			this.EdStudClrncReqId = _edStudClrncReqId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdStudClrncReqBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdStudClrncReqBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdStudClrncReqId property
		private System.Decimal _edStudClrncReqId;
		
		/// <summary>
		/// Gets or sets the EdStudClrncReqId property.
		/// </summary>
		public System.Decimal EdStudClrncReqId
		{
			get { return _edStudClrncReqId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdStudClrncReqId = value;
				
				_edStudClrncReqId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdStudClrncReqId = ( values["EdStudClrncReqId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdStudClrncReqId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdStudClrncReqId", EdStudClrncReqId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdStudClrncReqId: {0}{1}",
								EdStudClrncReqId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdStudClrncReqColumn Enum
	
	/// <summary>
	/// Enumerate the EdStudClrncReq columns.
	/// </summary>
	[Serializable]
	public enum EdStudClrncReqColumn : int
	{
		/// <summary>
		/// EdStudClrncReqId : 
		/// </summary>
		[EnumTextValue("ED_STUD_CLRNC_REQ_ID")]
		[ColumnEnum("ED_STUD_CLRNC_REQ_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdStudClrncReqId = 1,
		/// <summary>
		/// ReqDate : 
		/// </summary>
		[EnumTextValue("REQ_DATE")]
		[ColumnEnum("REQ_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		ReqDate = 2,
		/// <summary>
		/// ReqStatusDate : 
		/// </summary>
		[EnumTextValue("REQ_STATUS_DATE")]
		[ColumnEnum("REQ_STATUS_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		ReqStatusDate = 3,
		/// <summary>
		/// EdStudSemesterId : 
		/// </summary>
		[EnumTextValue("ED_STUD_SEMESTER_ID")]
		[ColumnEnum("ED_STUD_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdStudSemesterId = 4,
		/// <summary>
		/// GsCdeClrncReasonId : 
		/// </summary>
		[EnumTextValue("GS_CDE_CLRNC_REASON_ID")]
		[ColumnEnum("GS_CDE_CLRNC_REASON_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsCdeClrncReasonId = 5,
		/// <summary>
		/// GsCodeReqStatusId : 
		/// </summary>
		[EnumTextValue("GS_CODE_REQ_STATUS_ID")]
		[ColumnEnum("GS_CODE_REQ_STATUS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsCodeReqStatusId = 6,
		/// <summary>
		/// WithdrawDate : 
		/// </summary>
		[EnumTextValue("WITHDRAW_DATE")]
		[ColumnEnum("WITHDRAW_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		WithdrawDate = 7,
		/// <summary>
		/// WithdrawName : 
		/// </summary>
		[EnumTextValue("WITHDRAW_NAME")]
		[ColumnEnum("WITHDRAW_NAME", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		WithdrawName = 8,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 240)]
		Notes = 9
	}//End enum

	#endregion EdStudClrncReqColumn Enum

} // end namespace
