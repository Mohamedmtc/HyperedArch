
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AdmCdePlacementExam.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ADM_CDE_PLACEMENT_EXAM' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AdmCdePlacementExamBase : EntityBase, IAdmCdePlacementExam, IEntityId<AdmCdePlacementExamKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AdmCdePlacementExamEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AdmCdePlacementExamEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AdmCdePlacementExamEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AdmCdePlacementExam> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmCdePlacementExamEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmCdePlacementExamEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AdmCdePlacementExamBase"/> instance.
		///</summary>
		public AdmCdePlacementExamBase()
		{
			this.entityData = new AdmCdePlacementExamEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AdmCdePlacementExamBase"/> instance.
		///</summary>
		///<param name="_admCdePlacementExamId"></param>
		///<param name="_entMainId"></param>
		///<param name="_descrAr">Interviewe</param>
		///<param name="_descrEn"></param>
		///<param name="_delFlg"></param>
		///<param name="_examTypeFlg">0:passfail-1:mark-2:Grades</param>
		///<param name="_gsCdeOperator"></param>
		///<param name="_autoloadFlg">NU=0,ejust=0</param>
		///<param name="_maxMark"></param>
		///<param name="_minMark"></param>
		///<param name="_asCodeDegreeClassId">UG/PG</param>
		///<param name="_asCodeDegreeId"></param>
		///<param name="_crsFlg">مرتبط بمقررات تحميل</param>
		///<param name="_admExamGrdngPkgId"></param>
		///<param name="_admCdeExamMinGrdngId"></param>
		///<param name="_outFlg">XXNU-Exam Out of faculty-applicant enter score and ceetf direct -no exam dattime</param>
		///<param name="_engFlg">exam related to group english</param>
		///<param name="_mainFlg">XXXTOEFL/IELTS/ENGPLACE</param>
		///<param name="_subFlg">TOEFL/IELTS/ENGPLACE</param>
		///<param name="_admCdePlacExamPrntId">NU:English>TOEFL/IELTS/ENGPLACE>MARK/WRITING or SCORE</param>
		///<param name="_exemptFlg">مرتبط بمقررات اعفاء</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_foreignFlg">Ejust  (International Yes/No) to specify that this Exam for International applicants only</param>
		///<param name="_failRejectFlg">if applicant fail with approve be rejected</param>
		///<param name="_comptativeRateFlg">depend on result of ADM_APP_REG_HISTORY.COMPTATIVE_RATE</param>
		///<param name="_interviewFlg">exam related to group english</param>
		///<param name="_onlineFlg">exam related to group english</param>
		///<param name="_prepayFlg">1- دفع قبل توزيع على موعد امتحان
		/// 		/// 2-دفع قبل رصد النتيجة
		/// 		/// default=0</param>
		///<param name="_chalngFlg"></param>
		///<param name="_leadToChalng"></param>
		///<param name="_chlangExamId"></param>
		public AdmCdePlacementExamBase(System.Decimal _admCdePlacementExamId, System.Decimal _entMainId, 
			System.String _descrAr, System.String _descrEn, System.Decimal? _delFlg, 
			System.Decimal _examTypeFlg, System.String _gsCdeOperator, System.Decimal _autoloadFlg, 
			System.Decimal? _maxMark, System.Decimal? _minMark, System.Decimal? _asCodeDegreeClassId, 
			System.Decimal? _asCodeDegreeId, System.Decimal? _crsFlg, System.Decimal? _admExamGrdngPkgId, 
			System.Decimal? _admCdeExamMinGrdngId, System.Boolean? _outFlg, System.Boolean? _engFlg, 
			System.Boolean? _mainFlg, System.Boolean? _subFlg, System.Decimal? _admCdePlacExamPrntId, 
			System.Boolean? _exemptFlg, System.Decimal? _seUserId, System.DateTime? _lastDate, 
			System.Decimal? _foreignFlg, System.Boolean? _failRejectFlg, System.Boolean? _comptativeRateFlg, 
			System.Boolean? _interviewFlg, System.Boolean? _onlineFlg, System.Int16? _prepayFlg, 
			System.Boolean? _chalngFlg, System.Boolean? _leadToChalng, System.Decimal? _chlangExamId)
		{
			this.entityData = new AdmCdePlacementExamEntityData();
			this.backupData = null;

			this.AdmCdePlacementExamId = _admCdePlacementExamId;
			this.EntMainId = _entMainId;
			this.DescrAr = _descrAr;
			this.DescrEn = _descrEn;
			this.DelFlg = _delFlg;
			this.ExamTypeFlg = _examTypeFlg;
			this.GsCdeOperator = _gsCdeOperator;
			this.AutoloadFlg = _autoloadFlg;
			this.MaxMark = _maxMark;
			this.MinMark = _minMark;
			this.AsCodeDegreeClassId = _asCodeDegreeClassId;
			this.AsCodeDegreeId = _asCodeDegreeId;
			this.CrsFlg = _crsFlg;
			this.AdmExamGrdngPkgId = _admExamGrdngPkgId;
			this.AdmCdeExamMinGrdngId = _admCdeExamMinGrdngId;
			this.OutFlg = _outFlg;
			this.EngFlg = _engFlg;
			this.MainFlg = _mainFlg;
			this.SubFlg = _subFlg;
			this.AdmCdePlacExamPrntId = _admCdePlacExamPrntId;
			this.ExemptFlg = _exemptFlg;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
			this.ForeignFlg = _foreignFlg;
			this.FailRejectFlg = _failRejectFlg;
			this.ComptativeRateFlg = _comptativeRateFlg;
			this.InterviewFlg = _interviewFlg;
			this.OnlineFlg = _onlineFlg;
			this.PrepayFlg = _prepayFlg;
			this.ChalngFlg = _chalngFlg;
			this.LeadToChalng = _leadToChalng;
			this.ChlangExamId = _chlangExamId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AdmCdePlacementExam"/> instance.
		///</summary>
		///<param name="_admCdePlacementExamId"></param>
		///<param name="_entMainId"></param>
		///<param name="_descrAr">Interviewe</param>
		///<param name="_descrEn"></param>
		///<param name="_delFlg"></param>
		///<param name="_examTypeFlg">0:passfail-1:mark-2:Grades</param>
		///<param name="_gsCdeOperator"></param>
		///<param name="_autoloadFlg">NU=0,ejust=0</param>
		///<param name="_maxMark"></param>
		///<param name="_minMark"></param>
		///<param name="_asCodeDegreeClassId">UG/PG</param>
		///<param name="_asCodeDegreeId"></param>
		///<param name="_crsFlg">مرتبط بمقررات تحميل</param>
		///<param name="_admExamGrdngPkgId"></param>
		///<param name="_admCdeExamMinGrdngId"></param>
		///<param name="_outFlg">XXNU-Exam Out of faculty-applicant enter score and ceetf direct -no exam dattime</param>
		///<param name="_engFlg">exam related to group english</param>
		///<param name="_mainFlg">XXXTOEFL/IELTS/ENGPLACE</param>
		///<param name="_subFlg">TOEFL/IELTS/ENGPLACE</param>
		///<param name="_admCdePlacExamPrntId">NU:English>TOEFL/IELTS/ENGPLACE>MARK/WRITING or SCORE</param>
		///<param name="_exemptFlg">مرتبط بمقررات اعفاء</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_foreignFlg">Ejust  (International Yes/No) to specify that this Exam for International applicants only</param>
		///<param name="_failRejectFlg">if applicant fail with approve be rejected</param>
		///<param name="_comptativeRateFlg">depend on result of ADM_APP_REG_HISTORY.COMPTATIVE_RATE</param>
		///<param name="_interviewFlg">exam related to group english</param>
		///<param name="_onlineFlg">exam related to group english</param>
		///<param name="_prepayFlg">1- دفع قبل توزيع على موعد امتحان
		/// 		/// 2-دفع قبل رصد النتيجة
		/// 		/// default=0</param>
		///<param name="_chalngFlg"></param>
		///<param name="_leadToChalng"></param>
		///<param name="_chlangExamId"></param>
		public static AdmCdePlacementExam CreateAdmCdePlacementExam(System.Decimal _admCdePlacementExamId, System.Decimal _entMainId, 
			System.String _descrAr, System.String _descrEn, System.Decimal? _delFlg, 
			System.Decimal _examTypeFlg, System.String _gsCdeOperator, System.Decimal _autoloadFlg, 
			System.Decimal? _maxMark, System.Decimal? _minMark, System.Decimal? _asCodeDegreeClassId, 
			System.Decimal? _asCodeDegreeId, System.Decimal? _crsFlg, System.Decimal? _admExamGrdngPkgId, 
			System.Decimal? _admCdeExamMinGrdngId, System.Boolean? _outFlg, System.Boolean? _engFlg, 
			System.Boolean? _mainFlg, System.Boolean? _subFlg, System.Decimal? _admCdePlacExamPrntId, 
			System.Boolean? _exemptFlg, System.Decimal? _seUserId, System.DateTime? _lastDate, 
			System.Decimal? _foreignFlg, System.Boolean? _failRejectFlg, System.Boolean? _comptativeRateFlg, 
			System.Boolean? _interviewFlg, System.Boolean? _onlineFlg, System.Int16? _prepayFlg, 
			System.Boolean? _chalngFlg, System.Boolean? _leadToChalng, System.Decimal? _chlangExamId)
		{
			AdmCdePlacementExam newAdmCdePlacementExam = new AdmCdePlacementExam();
			newAdmCdePlacementExam.AdmCdePlacementExamId = _admCdePlacementExamId;
			newAdmCdePlacementExam.EntMainId = _entMainId;
			newAdmCdePlacementExam.DescrAr = _descrAr;
			newAdmCdePlacementExam.DescrEn = _descrEn;
			newAdmCdePlacementExam.DelFlg = _delFlg;
			newAdmCdePlacementExam.ExamTypeFlg = _examTypeFlg;
			newAdmCdePlacementExam.GsCdeOperator = _gsCdeOperator;
			newAdmCdePlacementExam.AutoloadFlg = _autoloadFlg;
			newAdmCdePlacementExam.MaxMark = _maxMark;
			newAdmCdePlacementExam.MinMark = _minMark;
			newAdmCdePlacementExam.AsCodeDegreeClassId = _asCodeDegreeClassId;
			newAdmCdePlacementExam.AsCodeDegreeId = _asCodeDegreeId;
			newAdmCdePlacementExam.CrsFlg = _crsFlg;
			newAdmCdePlacementExam.AdmExamGrdngPkgId = _admExamGrdngPkgId;
			newAdmCdePlacementExam.AdmCdeExamMinGrdngId = _admCdeExamMinGrdngId;
			newAdmCdePlacementExam.OutFlg = _outFlg;
			newAdmCdePlacementExam.EngFlg = _engFlg;
			newAdmCdePlacementExam.MainFlg = _mainFlg;
			newAdmCdePlacementExam.SubFlg = _subFlg;
			newAdmCdePlacementExam.AdmCdePlacExamPrntId = _admCdePlacExamPrntId;
			newAdmCdePlacementExam.ExemptFlg = _exemptFlg;
			newAdmCdePlacementExam.SeUserId = _seUserId;
			newAdmCdePlacementExam.LastDate = _lastDate;
			newAdmCdePlacementExam.ForeignFlg = _foreignFlg;
			newAdmCdePlacementExam.FailRejectFlg = _failRejectFlg;
			newAdmCdePlacementExam.ComptativeRateFlg = _comptativeRateFlg;
			newAdmCdePlacementExam.InterviewFlg = _interviewFlg;
			newAdmCdePlacementExam.OnlineFlg = _onlineFlg;
			newAdmCdePlacementExam.PrepayFlg = _prepayFlg;
			newAdmCdePlacementExam.ChalngFlg = _chalngFlg;
			newAdmCdePlacementExam.LeadToChalng = _leadToChalng;
			newAdmCdePlacementExam.ChlangExamId = _chlangExamId;
			return newAdmCdePlacementExam;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AdmCdePlacementExamId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal AdmCdePlacementExamId
		{
			get
			{
				return this.entityData.AdmCdePlacementExamId; 
			}
			
			set
			{
				if (this.entityData.AdmCdePlacementExamId == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.AdmCdePlacementExamId, this.entityData.AdmCdePlacementExamId);
				this.entityData.AdmCdePlacementExamId = value;
				this.EntityId.AdmCdePlacementExamId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.AdmCdePlacementExamId, this.entityData.AdmCdePlacementExamId);
				OnPropertyChanged("AdmCdePlacementExamId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ADM_CDE_PLACEMENT_EXAM_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ADM_CDE_PLACEMENT_EXAM_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalAdmCdePlacementExamId
		{
			get { return this.entityData.OriginalAdmCdePlacementExamId; }
			set { this.entityData.OriginalAdmCdePlacementExamId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EntMainId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EntMainId
		{
			get
			{
				return this.entityData.EntMainId; 
			}
			
			set
			{
				if (this.entityData.EntMainId == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.EntMainId, this.entityData.EntMainId);
				this.entityData.EntMainId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.EntMainId, this.entityData.EntMainId);
				OnPropertyChanged("EntMainId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescrAr property. 
		///		Interviewe
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Interviewe"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String DescrAr
		{
			get
			{
				return this.entityData.DescrAr; 
			}
			
			set
			{
				if (this.entityData.DescrAr == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.DescrAr, this.entityData.DescrAr);
				this.entityData.DescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.DescrAr, this.entityData.DescrAr);
				OnPropertyChanged("DescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String DescrEn
		{
			get
			{
				return this.entityData.DescrEn; 
			}
			
			set
			{
				if (this.entityData.DescrEn == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.DescrEn, this.entityData.DescrEn);
				this.entityData.DescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.DescrEn, this.entityData.DescrEn);
				OnPropertyChanged("DescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DelFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDelFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DelFlg
		{
			get
			{
				return this.entityData.DelFlg; 
			}
			
			set
			{
				if (this.entityData.DelFlg == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.DelFlg, this.entityData.DelFlg);
				this.entityData.DelFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.DelFlg, this.entityData.DelFlg);
				OnPropertyChanged("DelFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExamTypeFlg property. 
		///		0:passfail-1:mark-2:Grades
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"0:passfail-1:mark-2:Grades"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ExamTypeFlg
		{
			get
			{
				return this.entityData.ExamTypeFlg; 
			}
			
			set
			{
				if (this.entityData.ExamTypeFlg == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.ExamTypeFlg, this.entityData.ExamTypeFlg);
				this.entityData.ExamTypeFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.ExamTypeFlg, this.entityData.ExamTypeFlg);
				OnPropertyChanged("ExamTypeFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCdeOperator property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 2)]
		public virtual System.String GsCdeOperator
		{
			get
			{
				return this.entityData.GsCdeOperator; 
			}
			
			set
			{
				if (this.entityData.GsCdeOperator == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.GsCdeOperator, this.entityData.GsCdeOperator);
				this.entityData.GsCdeOperator = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.GsCdeOperator, this.entityData.GsCdeOperator);
				OnPropertyChanged("GsCdeOperator");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AutoloadFlg property. 
		///		NU=0,ejust=0
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"NU=0,ejust=0"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AutoloadFlg
		{
			get
			{
				return this.entityData.AutoloadFlg; 
			}
			
			set
			{
				if (this.entityData.AutoloadFlg == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.AutoloadFlg, this.entityData.AutoloadFlg);
				this.entityData.AutoloadFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.AutoloadFlg, this.entityData.AutoloadFlg);
				OnPropertyChanged("AutoloadFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaxMark property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMaxMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MaxMark
		{
			get
			{
				return this.entityData.MaxMark; 
			}
			
			set
			{
				if (this.entityData.MaxMark == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.MaxMark, this.entityData.MaxMark);
				this.entityData.MaxMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.MaxMark, this.entityData.MaxMark);
				OnPropertyChanged("MaxMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MinMark property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMinMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MinMark
		{
			get
			{
				return this.entityData.MinMark; 
			}
			
			set
			{
				if (this.entityData.MinMark == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.MinMark, this.entityData.MinMark);
				this.entityData.MinMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.MinMark, this.entityData.MinMark);
				OnPropertyChanged("MinMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeClassId property. 
		///		UG/PG
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeClassIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"UG/PG"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeClassId
		{
			get
			{
				return this.entityData.AsCodeDegreeClassId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeClassId == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				this.entityData.AsCodeDegreeClassId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				OnPropertyChanged("AsCodeDegreeClassId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeId
		{
			get
			{
				return this.entityData.AsCodeDegreeId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeId == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				this.entityData.AsCodeDegreeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				OnPropertyChanged("AsCodeDegreeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CrsFlg property. 
		///		مرتبط بمقررات تحميل
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCrsFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مرتبط بمقررات تحميل"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CrsFlg
		{
			get
			{
				return this.entityData.CrsFlg; 
			}
			
			set
			{
				if (this.entityData.CrsFlg == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.CrsFlg, this.entityData.CrsFlg);
				this.entityData.CrsFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.CrsFlg, this.entityData.CrsFlg);
				OnPropertyChanged("CrsFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmExamGrdngPkgId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmExamGrdngPkgIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmExamGrdngPkgId
		{
			get
			{
				return this.entityData.AdmExamGrdngPkgId; 
			}
			
			set
			{
				if (this.entityData.AdmExamGrdngPkgId == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.AdmExamGrdngPkgId, this.entityData.AdmExamGrdngPkgId);
				this.entityData.AdmExamGrdngPkgId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.AdmExamGrdngPkgId, this.entityData.AdmExamGrdngPkgId);
				OnPropertyChanged("AdmExamGrdngPkgId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmCdeExamMinGrdngId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmCdeExamMinGrdngIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmCdeExamMinGrdngId
		{
			get
			{
				return this.entityData.AdmCdeExamMinGrdngId; 
			}
			
			set
			{
				if (this.entityData.AdmCdeExamMinGrdngId == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.AdmCdeExamMinGrdngId, this.entityData.AdmCdeExamMinGrdngId);
				this.entityData.AdmCdeExamMinGrdngId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.AdmCdeExamMinGrdngId, this.entityData.AdmCdeExamMinGrdngId);
				OnPropertyChanged("AdmCdeExamMinGrdngId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OutFlg property. 
		///		XXNU-Exam Out of faculty-applicant enter score and ceetf direct -no exam dattime
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsOutFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XXNU-Exam Out of faculty-applicant enter score and ceetf direct -no exam dattime"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? OutFlg
		{
			get
			{
				return this.entityData.OutFlg; 
			}
			
			set
			{
				if (this.entityData.OutFlg == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.OutFlg, this.entityData.OutFlg);
				this.entityData.OutFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.OutFlg, this.entityData.OutFlg);
				OnPropertyChanged("OutFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EngFlg property. 
		///		exam related to group english
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsEngFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"exam related to group english"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? EngFlg
		{
			get
			{
				return this.entityData.EngFlg; 
			}
			
			set
			{
				if (this.entityData.EngFlg == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.EngFlg, this.entityData.EngFlg);
				this.entityData.EngFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.EngFlg, this.entityData.EngFlg);
				OnPropertyChanged("EngFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MainFlg property. 
		///		XXXTOEFL/IELTS/ENGPLACE
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsMainFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XXXTOEFL/IELTS/ENGPLACE"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? MainFlg
		{
			get
			{
				return this.entityData.MainFlg; 
			}
			
			set
			{
				if (this.entityData.MainFlg == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.MainFlg, this.entityData.MainFlg);
				this.entityData.MainFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.MainFlg, this.entityData.MainFlg);
				OnPropertyChanged("MainFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SubFlg property. 
		///		TOEFL/IELTS/ENGPLACE
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsSubFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"TOEFL/IELTS/ENGPLACE"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? SubFlg
		{
			get
			{
				return this.entityData.SubFlg; 
			}
			
			set
			{
				if (this.entityData.SubFlg == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.SubFlg, this.entityData.SubFlg);
				this.entityData.SubFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.SubFlg, this.entityData.SubFlg);
				OnPropertyChanged("SubFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmCdePlacExamPrntId property. 
		///		NU:English>TOEFL/IELTS/ENGPLACE>MARK/WRITING or SCORE
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmCdePlacExamPrntIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"NU:English>TOEFL/IELTS/ENGPLACE>MARK/WRITING or SCORE"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmCdePlacExamPrntId
		{
			get
			{
				return this.entityData.AdmCdePlacExamPrntId; 
			}
			
			set
			{
				if (this.entityData.AdmCdePlacExamPrntId == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.AdmCdePlacExamPrntId, this.entityData.AdmCdePlacExamPrntId);
				this.entityData.AdmCdePlacExamPrntId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.AdmCdePlacExamPrntId, this.entityData.AdmCdePlacExamPrntId);
				OnPropertyChanged("AdmCdePlacExamPrntId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExemptFlg property. 
		///		مرتبط بمقررات اعفاء
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsExemptFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مرتبط بمقررات اعفاء"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ExemptFlg
		{
			get
			{
				return this.entityData.ExemptFlg; 
			}
			
			set
			{
				if (this.entityData.ExemptFlg == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.ExemptFlg, this.entityData.ExemptFlg);
				this.entityData.ExemptFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.ExemptFlg, this.entityData.ExemptFlg);
				OnPropertyChanged("ExemptFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ForeignFlg property. 
		///		Ejust  (International Yes/No) to specify that this Exam for International applicants only
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsForeignFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Ejust  (International Yes/No) to specify that this Exam for International applicants only"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ForeignFlg
		{
			get
			{
				return this.entityData.ForeignFlg; 
			}
			
			set
			{
				if (this.entityData.ForeignFlg == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.ForeignFlg, this.entityData.ForeignFlg);
				this.entityData.ForeignFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.ForeignFlg, this.entityData.ForeignFlg);
				OnPropertyChanged("ForeignFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FailRejectFlg property. 
		///		if applicant fail with approve be rejected
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsFailRejectFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"if applicant fail with approve be rejected"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? FailRejectFlg
		{
			get
			{
				return this.entityData.FailRejectFlg; 
			}
			
			set
			{
				if (this.entityData.FailRejectFlg == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.FailRejectFlg, this.entityData.FailRejectFlg);
				this.entityData.FailRejectFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.FailRejectFlg, this.entityData.FailRejectFlg);
				OnPropertyChanged("FailRejectFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ComptativeRateFlg property. 
		///		depend on result of ADM_APP_REG_HISTORY.COMPTATIVE_RATE
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsComptativeRateFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"depend on result of ADM_APP_REG_HISTORY.COMPTATIVE_RATE"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ComptativeRateFlg
		{
			get
			{
				return this.entityData.ComptativeRateFlg; 
			}
			
			set
			{
				if (this.entityData.ComptativeRateFlg == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.ComptativeRateFlg, this.entityData.ComptativeRateFlg);
				this.entityData.ComptativeRateFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.ComptativeRateFlg, this.entityData.ComptativeRateFlg);
				OnPropertyChanged("ComptativeRateFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InterviewFlg property. 
		///		exam related to group english
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsInterviewFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"exam related to group english"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? InterviewFlg
		{
			get
			{
				return this.entityData.InterviewFlg; 
			}
			
			set
			{
				if (this.entityData.InterviewFlg == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.InterviewFlg, this.entityData.InterviewFlg);
				this.entityData.InterviewFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.InterviewFlg, this.entityData.InterviewFlg);
				OnPropertyChanged("InterviewFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OnlineFlg property. 
		///		exam related to group english
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsOnlineFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"exam related to group english"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? OnlineFlg
		{
			get
			{
				return this.entityData.OnlineFlg; 
			}
			
			set
			{
				if (this.entityData.OnlineFlg == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.OnlineFlg, this.entityData.OnlineFlg);
				this.entityData.OnlineFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.OnlineFlg, this.entityData.OnlineFlg);
				OnPropertyChanged("OnlineFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrepayFlg property. 
		///		1- دفع قبل توزيع على موعد امتحان
		/// 		/// 2-دفع قبل رصد النتيجة
		/// 		/// default=0
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsPrepayFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"1- دفع قبل توزيع على موعد امتحان 2-دفع قبل رصد النتيجة default=0"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? PrepayFlg
		{
			get
			{
				return this.entityData.PrepayFlg; 
			}
			
			set
			{
				if (this.entityData.PrepayFlg == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.PrepayFlg, this.entityData.PrepayFlg);
				this.entityData.PrepayFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.PrepayFlg, this.entityData.PrepayFlg);
				OnPropertyChanged("PrepayFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ChalngFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsChalngFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ChalngFlg
		{
			get
			{
				return this.entityData.ChalngFlg; 
			}
			
			set
			{
				if (this.entityData.ChalngFlg == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.ChalngFlg, this.entityData.ChalngFlg);
				this.entityData.ChalngFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.ChalngFlg, this.entityData.ChalngFlg);
				OnPropertyChanged("ChalngFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LeadToChalng property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsLeadToChalngNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? LeadToChalng
		{
			get
			{
				return this.entityData.LeadToChalng; 
			}
			
			set
			{
				if (this.entityData.LeadToChalng == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.LeadToChalng, this.entityData.LeadToChalng);
				this.entityData.LeadToChalng = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.LeadToChalng, this.entityData.LeadToChalng);
				OnPropertyChanged("LeadToChalng");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ChlangExamId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsChlangExamIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ChlangExamId
		{
			get
			{
				return this.entityData.ChlangExamId; 
			}
			
			set
			{
				if (this.entityData.ChlangExamId == value)
					return;
					
				OnColumnChanging(AdmCdePlacementExamColumn.ChlangExamId, this.entityData.ChlangExamId);
				this.entityData.ChlangExamId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmCdePlacementExamColumn.ChlangExamId, this.entityData.ChlangExamId);
				OnPropertyChanged("ChlangExamId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdeExamGrdng"/>.
		/// </summary>
		/// <value>The source AdmCdeExamGrdng for AdmCdeExamMinGrdngId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmCdeExamGrdng AdmCdeExamMinGrdngIdSource
      	{
            get { return entityData.AdmCdeExamMinGrdngIdSource; }
            set { entityData.AdmCdeExamMinGrdngIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdePlacementExam"/>.
		/// </summary>
		/// <value>The source AdmCdePlacementExam for AdmCdePlacExamPrntId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmCdePlacementExam AdmCdePlacExamPrntIdSource
      	{
            get { return entityData.AdmCdePlacExamPrntIdSource; }
            set { entityData.AdmCdePlacExamPrntIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdePlacementExam"/>.
		/// </summary>
		/// <value>The source AdmCdePlacementExam for ChlangExamId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmCdePlacementExam ChlangExamIdSource
      	{
            get { return entityData.ChlangExamIdSource; }
            set { entityData.ChlangExamIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdmExamGrdngPkg"/>.
		/// </summary>
		/// <value>The source AdmExamGrdngPkg for AdmExamGrdngPkgId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmExamGrdngPkg AdmExamGrdngPkgIdSource
      	{
            get { return entityData.AdmExamGrdngPkgIdSource; }
            set { entityData.AdmExamGrdngPkgIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return entityData.AsCodeDegreeIdSource; }
            set { entityData.AsCodeDegreeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return entityData.AsCodeDegreeClassIdSource; }
            set { entityData.AsCodeDegreeClassIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return entityData.EntMainIdSource; }
            set { entityData.EntMainIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of AdmCdePlacementExam objects
		///	which are related to this object through the relation FK_ADM_CDE_PLACEMENT_EXAM_ADM_CDE_PLACEMENT_EXAM1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmCdePlacementExam> AdmCdePlacementExamCollectionGetByChlangExamId
		{
			get { return entityData.AdmCdePlacementExamCollectionGetByChlangExamId; }
			set { entityData.AdmCdePlacementExamCollectionGetByChlangExamId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmPlaceExamCourse objects
		///	which are related to this object through the relation FK_ADM_PLACE_EXAM_COURSE_ADM_CDE_PLACEMENT_EXAM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmPlaceExamCourse> AdmPlaceExamCourseCollection
		{
			get { return entityData.AdmPlaceExamCourseCollection; }
			set { entityData.AdmPlaceExamCourseCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmPlaceExamDatetime objects
		///	which are related to this object through the relation FK_ADM_PLACE_EXAM_DATETIME_ADM_CDE_PLACEMENT_EXAM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmPlaceExamDatetime> AdmPlaceExamDatetimeCollection
		{
			get { return entityData.AdmPlaceExamDatetimeCollection; }
			set { entityData.AdmPlaceExamDatetimeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmCompetitiveAvg objects
		///	which are related to this object through the relation FK_ADM_COMPETITIVE_AVG_ADM_CDE_PLACEMENT_EXAM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmCompetitiveAvg> AdmCompetitiveAvgCollection
		{
			get { return entityData.AdmCompetitiveAvgCollection; }
			set { entityData.AdmCompetitiveAvgCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmAppInterviewExam objects
		///	which are related to this object through the relation FK_ADM_APP_INTERVIEW_EXAM_ADM_CDE_PLACEMENT_EXAM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppInterviewExam> AdmAppInterviewExamCollection
		{
			get { return entityData.AdmAppInterviewExamCollection; }
			set { entityData.AdmAppInterviewExamCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmCodeEngTest objects
		///	which are related to this object through the relation FK_ADM_CODE_ENG_TEST_ADM_CDE_PLACEMENT_EXAM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmCodeEngTest> AdmCodeEngTestCollection
		{
			get { return entityData.AdmCodeEngTestCollection; }
			set { entityData.AdmCodeEngTestCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmAppPlacementExam objects
		///	which are related to this object through the relation FK_ADM_APP_PLACEMENT_EXAM_ADM_CDE_PLACEMENT_EXAM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppPlacementExam> AdmAppPlacementExamCollection
		{
			get { return entityData.AdmAppPlacementExamCollection; }
			set { entityData.AdmAppPlacementExamCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmCdePlacementExam objects
		///	which are related to this object through the relation FK_ADM_CDE_PLACEMENT_EXAM_ADM_CDE_PLACEMENT_EXAM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmCdePlacementExam> AdmCdePlacementExamCollectionGetByAdmCdePlacExamPrntId
		{
			get { return entityData.AdmCdePlacementExamCollectionGetByAdmCdePlacExamPrntId; }
			set { entityData.AdmCdePlacementExamCollectionGetByAdmCdePlacExamPrntId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmCdeFee objects
		///	which are related to this object through the relation FK_ADM_CDE_FEE_ADM_CDE_PLACEMENT_EXAM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmCdeFee> AdmCdeFeeCollection
		{
			get { return entityData.AdmCdeFeeCollection; }
			set { entityData.AdmCdeFeeCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrAr", "Descr Ar", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrEn", "Descr En", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GsCdeOperator", "Gs Cde Operator", 2));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ADM_CDE_PLACEMENT_EXAM"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ADM_CDE_PLACEMENT_EXAM_ID", "ENT_MAIN_ID", "DESCR_AR", "DESCR_EN", "DEL_FLG", "EXAM_TYPE_FLG", "GS_CDE_OPERATOR", "AUTOLOAD_FLG", "MAX_MARK", "MIN_MARK", "AS_CODE_DEGREE_CLASS_ID", "AS_CODE_DEGREE_ID", "CRS_FLG", "ADM_EXAM_GRDNG_PKG_ID", "ADM_CDE_EXAM_MIN_GRDNG_ID", "OUT_FLG", "ENG_FLG", "MAIN_FLG", "SUB_FLG", "ADM_CDE_PLAC_EXAM_PRNT_ID", "EXEMPT_FLG", "SE_USER_ID", "LAST_DATE", "FOREIGN_FLG", "FAIL_REJECT_FLG", "COMPTATIVE_RATE_FLG", "INTERVIEW_FLG", "ONLINE_FLG", "PREPAY_FLG", "CHALNG_FLG", "LEAD_TO_CHALNG", "CHLANG_EXAM_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AdmCdePlacementExamEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AdmCdePlacementExam) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AdmCdePlacementExam>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AdmCdePlacementExam);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AdmCdePlacementExam Entity 
		///</summary>
		protected virtual AdmCdePlacementExam Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AdmCdePlacementExam copy = new AdmCdePlacementExam();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AdmCdePlacementExamId = this.AdmCdePlacementExamId;
					copy.OriginalAdmCdePlacementExamId = this.OriginalAdmCdePlacementExamId;
				copy.EntMainId = this.EntMainId;
				copy.DescrAr = this.DescrAr;
				copy.DescrEn = this.DescrEn;
				copy.DelFlg = this.DelFlg;
				copy.ExamTypeFlg = this.ExamTypeFlg;
				copy.GsCdeOperator = this.GsCdeOperator;
				copy.AutoloadFlg = this.AutoloadFlg;
				copy.MaxMark = this.MaxMark;
				copy.MinMark = this.MinMark;
				copy.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
				copy.AsCodeDegreeId = this.AsCodeDegreeId;
				copy.CrsFlg = this.CrsFlg;
				copy.AdmExamGrdngPkgId = this.AdmExamGrdngPkgId;
				copy.AdmCdeExamMinGrdngId = this.AdmCdeExamMinGrdngId;
				copy.OutFlg = this.OutFlg;
				copy.EngFlg = this.EngFlg;
				copy.MainFlg = this.MainFlg;
				copy.SubFlg = this.SubFlg;
				copy.AdmCdePlacExamPrntId = this.AdmCdePlacExamPrntId;
				copy.ExemptFlg = this.ExemptFlg;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
				copy.ForeignFlg = this.ForeignFlg;
				copy.FailRejectFlg = this.FailRejectFlg;
				copy.ComptativeRateFlg = this.ComptativeRateFlg;
				copy.InterviewFlg = this.InterviewFlg;
				copy.OnlineFlg = this.OnlineFlg;
				copy.PrepayFlg = this.PrepayFlg;
				copy.ChalngFlg = this.ChalngFlg;
				copy.LeadToChalng = this.LeadToChalng;
				copy.ChlangExamId = this.ChlangExamId;
			
			if (this.AdmCdeExamMinGrdngIdSource != null && existingCopies.Contains(this.AdmCdeExamMinGrdngIdSource))
				copy.AdmCdeExamMinGrdngIdSource = existingCopies[this.AdmCdeExamMinGrdngIdSource] as AdmCdeExamGrdng;
			else
				copy.AdmCdeExamMinGrdngIdSource = MakeCopyOf(this.AdmCdeExamMinGrdngIdSource, existingCopies) as AdmCdeExamGrdng;
			if (this.AdmCdePlacExamPrntIdSource != null && existingCopies.Contains(this.AdmCdePlacExamPrntIdSource))
				copy.AdmCdePlacExamPrntIdSource = existingCopies[this.AdmCdePlacExamPrntIdSource] as AdmCdePlacementExam;
			else
				copy.AdmCdePlacExamPrntIdSource = MakeCopyOf(this.AdmCdePlacExamPrntIdSource, existingCopies) as AdmCdePlacementExam;
			if (this.ChlangExamIdSource != null && existingCopies.Contains(this.ChlangExamIdSource))
				copy.ChlangExamIdSource = existingCopies[this.ChlangExamIdSource] as AdmCdePlacementExam;
			else
				copy.ChlangExamIdSource = MakeCopyOf(this.ChlangExamIdSource, existingCopies) as AdmCdePlacementExam;
			if (this.AdmExamGrdngPkgIdSource != null && existingCopies.Contains(this.AdmExamGrdngPkgIdSource))
				copy.AdmExamGrdngPkgIdSource = existingCopies[this.AdmExamGrdngPkgIdSource] as AdmExamGrdngPkg;
			else
				copy.AdmExamGrdngPkgIdSource = MakeCopyOf(this.AdmExamGrdngPkgIdSource, existingCopies) as AdmExamGrdngPkg;
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				copy.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				copy.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				copy.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				copy.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				copy.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				copy.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
		
			//deep copy nested objects
			copy.AdmCdePlacementExamCollectionGetByChlangExamId = (TList<AdmCdePlacementExam>) MakeCopyOf(this.AdmCdePlacementExamCollectionGetByChlangExamId, existingCopies); 
			copy.AdmPlaceExamCourseCollection = (TList<AdmPlaceExamCourse>) MakeCopyOf(this.AdmPlaceExamCourseCollection, existingCopies); 
			copy.AdmPlaceExamDatetimeCollection = (TList<AdmPlaceExamDatetime>) MakeCopyOf(this.AdmPlaceExamDatetimeCollection, existingCopies); 
			copy.AdmCompetitiveAvgCollection = (TList<AdmCompetitiveAvg>) MakeCopyOf(this.AdmCompetitiveAvgCollection, existingCopies); 
			copy.AdmAppInterviewExamCollection = (TList<AdmAppInterviewExam>) MakeCopyOf(this.AdmAppInterviewExamCollection, existingCopies); 
			copy.AdmCodeEngTestCollection = (TList<AdmCodeEngTest>) MakeCopyOf(this.AdmCodeEngTestCollection, existingCopies); 
			copy.AdmAppPlacementExamCollection = (TList<AdmAppPlacementExam>) MakeCopyOf(this.AdmAppPlacementExamCollection, existingCopies); 
			copy.AdmCdePlacementExamCollectionGetByAdmCdePlacExamPrntId = (TList<AdmCdePlacementExam>) MakeCopyOf(this.AdmCdePlacementExamCollectionGetByAdmCdePlacExamPrntId, existingCopies); 
			copy.AdmCdeFeeCollection = (TList<AdmCdeFee>) MakeCopyOf(this.AdmCdeFeeCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AdmCdePlacementExam Entity 
		///</summary>
		public virtual AdmCdePlacementExam Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AdmCdePlacementExam Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AdmCdePlacementExam DeepCopy()
		{
			return EntityHelper.Clone<AdmCdePlacementExam>(this as AdmCdePlacementExam);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AdmCdePlacementExamEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AdmCdePlacementExamEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AdmCdePlacementExamEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AdmCdePlacementExamColumn column)
		{
			switch(column)
			{
					case AdmCdePlacementExamColumn.AdmCdePlacementExamId:
					return entityData.AdmCdePlacementExamId != _originalData.AdmCdePlacementExamId;
					case AdmCdePlacementExamColumn.EntMainId:
					return entityData.EntMainId != _originalData.EntMainId;
					case AdmCdePlacementExamColumn.DescrAr:
					return entityData.DescrAr != _originalData.DescrAr;
					case AdmCdePlacementExamColumn.DescrEn:
					return entityData.DescrEn != _originalData.DescrEn;
					case AdmCdePlacementExamColumn.DelFlg:
					return entityData.DelFlg != _originalData.DelFlg;
					case AdmCdePlacementExamColumn.ExamTypeFlg:
					return entityData.ExamTypeFlg != _originalData.ExamTypeFlg;
					case AdmCdePlacementExamColumn.GsCdeOperator:
					return entityData.GsCdeOperator != _originalData.GsCdeOperator;
					case AdmCdePlacementExamColumn.AutoloadFlg:
					return entityData.AutoloadFlg != _originalData.AutoloadFlg;
					case AdmCdePlacementExamColumn.MaxMark:
					return entityData.MaxMark != _originalData.MaxMark;
					case AdmCdePlacementExamColumn.MinMark:
					return entityData.MinMark != _originalData.MinMark;
					case AdmCdePlacementExamColumn.AsCodeDegreeClassId:
					return entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
					case AdmCdePlacementExamColumn.AsCodeDegreeId:
					return entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
					case AdmCdePlacementExamColumn.CrsFlg:
					return entityData.CrsFlg != _originalData.CrsFlg;
					case AdmCdePlacementExamColumn.AdmExamGrdngPkgId:
					return entityData.AdmExamGrdngPkgId != _originalData.AdmExamGrdngPkgId;
					case AdmCdePlacementExamColumn.AdmCdeExamMinGrdngId:
					return entityData.AdmCdeExamMinGrdngId != _originalData.AdmCdeExamMinGrdngId;
					case AdmCdePlacementExamColumn.OutFlg:
					return entityData.OutFlg != _originalData.OutFlg;
					case AdmCdePlacementExamColumn.EngFlg:
					return entityData.EngFlg != _originalData.EngFlg;
					case AdmCdePlacementExamColumn.MainFlg:
					return entityData.MainFlg != _originalData.MainFlg;
					case AdmCdePlacementExamColumn.SubFlg:
					return entityData.SubFlg != _originalData.SubFlg;
					case AdmCdePlacementExamColumn.AdmCdePlacExamPrntId:
					return entityData.AdmCdePlacExamPrntId != _originalData.AdmCdePlacExamPrntId;
					case AdmCdePlacementExamColumn.ExemptFlg:
					return entityData.ExemptFlg != _originalData.ExemptFlg;
					case AdmCdePlacementExamColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case AdmCdePlacementExamColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case AdmCdePlacementExamColumn.ForeignFlg:
					return entityData.ForeignFlg != _originalData.ForeignFlg;
					case AdmCdePlacementExamColumn.FailRejectFlg:
					return entityData.FailRejectFlg != _originalData.FailRejectFlg;
					case AdmCdePlacementExamColumn.ComptativeRateFlg:
					return entityData.ComptativeRateFlg != _originalData.ComptativeRateFlg;
					case AdmCdePlacementExamColumn.InterviewFlg:
					return entityData.InterviewFlg != _originalData.InterviewFlg;
					case AdmCdePlacementExamColumn.OnlineFlg:
					return entityData.OnlineFlg != _originalData.OnlineFlg;
					case AdmCdePlacementExamColumn.PrepayFlg:
					return entityData.PrepayFlg != _originalData.PrepayFlg;
					case AdmCdePlacementExamColumn.ChalngFlg:
					return entityData.ChalngFlg != _originalData.ChalngFlg;
					case AdmCdePlacementExamColumn.LeadToChalng:
					return entityData.LeadToChalng != _originalData.LeadToChalng;
					case AdmCdePlacementExamColumn.ChlangExamId:
					return entityData.ChlangExamId != _originalData.ChlangExamId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AdmCdePlacementExamColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AdmCdePlacementExamId != _originalData.AdmCdePlacementExamId;
			result = result || entityData.EntMainId != _originalData.EntMainId;
			result = result || entityData.DescrAr != _originalData.DescrAr;
			result = result || entityData.DescrEn != _originalData.DescrEn;
			result = result || entityData.DelFlg != _originalData.DelFlg;
			result = result || entityData.ExamTypeFlg != _originalData.ExamTypeFlg;
			result = result || entityData.GsCdeOperator != _originalData.GsCdeOperator;
			result = result || entityData.AutoloadFlg != _originalData.AutoloadFlg;
			result = result || entityData.MaxMark != _originalData.MaxMark;
			result = result || entityData.MinMark != _originalData.MinMark;
			result = result || entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
			result = result || entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
			result = result || entityData.CrsFlg != _originalData.CrsFlg;
			result = result || entityData.AdmExamGrdngPkgId != _originalData.AdmExamGrdngPkgId;
			result = result || entityData.AdmCdeExamMinGrdngId != _originalData.AdmCdeExamMinGrdngId;
			result = result || entityData.OutFlg != _originalData.OutFlg;
			result = result || entityData.EngFlg != _originalData.EngFlg;
			result = result || entityData.MainFlg != _originalData.MainFlg;
			result = result || entityData.SubFlg != _originalData.SubFlg;
			result = result || entityData.AdmCdePlacExamPrntId != _originalData.AdmCdePlacExamPrntId;
			result = result || entityData.ExemptFlg != _originalData.ExemptFlg;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.ForeignFlg != _originalData.ForeignFlg;
			result = result || entityData.FailRejectFlg != _originalData.FailRejectFlg;
			result = result || entityData.ComptativeRateFlg != _originalData.ComptativeRateFlg;
			result = result || entityData.InterviewFlg != _originalData.InterviewFlg;
			result = result || entityData.OnlineFlg != _originalData.OnlineFlg;
			result = result || entityData.PrepayFlg != _originalData.PrepayFlg;
			result = result || entityData.ChalngFlg != _originalData.ChalngFlg;
			result = result || entityData.LeadToChalng != _originalData.LeadToChalng;
			result = result || entityData.ChlangExamId != _originalData.ChlangExamId;
			return result;
		}	
		
		///<summary>
		///  Returns a AdmCdePlacementExam Entity with the original data.
		///</summary>
		public AdmCdePlacementExam GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAdmCdePlacementExam(
				_originalData.AdmCdePlacementExamId,
				_originalData.EntMainId,
				_originalData.DescrAr,
				_originalData.DescrEn,
				_originalData.DelFlg,
				_originalData.ExamTypeFlg,
				_originalData.GsCdeOperator,
				_originalData.AutoloadFlg,
				_originalData.MaxMark,
				_originalData.MinMark,
				_originalData.AsCodeDegreeClassId,
				_originalData.AsCodeDegreeId,
				_originalData.CrsFlg,
				_originalData.AdmExamGrdngPkgId,
				_originalData.AdmCdeExamMinGrdngId,
				_originalData.OutFlg,
				_originalData.EngFlg,
				_originalData.MainFlg,
				_originalData.SubFlg,
				_originalData.AdmCdePlacExamPrntId,
				_originalData.ExemptFlg,
				_originalData.SeUserId,
				_originalData.LastDate,
				_originalData.ForeignFlg,
				_originalData.FailRejectFlg,
				_originalData.ComptativeRateFlg,
				_originalData.InterviewFlg,
				_originalData.OnlineFlg,
				_originalData.PrepayFlg,
				_originalData.ChalngFlg,
				_originalData.LeadToChalng,
				_originalData.ChlangExamId
				);
				
			return (AdmCdePlacementExam)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AdmCdePlacementExamBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AdmCdePlacementExamBase)
				return ValueEquals(this, (AdmCdePlacementExamBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AdmCdePlacementExamBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AdmCdePlacementExamId.GetHashCode() ^ 
					this.EntMainId.GetHashCode() ^ 
					((this.DescrAr == null) ? string.Empty : this.DescrAr.ToString()).GetHashCode() ^ 
					((this.DescrEn == null) ? string.Empty : this.DescrEn.ToString()).GetHashCode() ^ 
					((this.DelFlg == null) ? string.Empty : this.DelFlg.ToString()).GetHashCode() ^ 
					this.ExamTypeFlg.GetHashCode() ^ 
					((this.GsCdeOperator == null) ? string.Empty : this.GsCdeOperator.ToString()).GetHashCode() ^ 
					this.AutoloadFlg.GetHashCode() ^ 
					((this.MaxMark == null) ? string.Empty : this.MaxMark.ToString()).GetHashCode() ^ 
					((this.MinMark == null) ? string.Empty : this.MinMark.ToString()).GetHashCode() ^ 
					((this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString()).GetHashCode() ^ 
					((this.AsCodeDegreeId == null) ? string.Empty : this.AsCodeDegreeId.ToString()).GetHashCode() ^ 
					((this.CrsFlg == null) ? string.Empty : this.CrsFlg.ToString()).GetHashCode() ^ 
					((this.AdmExamGrdngPkgId == null) ? string.Empty : this.AdmExamGrdngPkgId.ToString()).GetHashCode() ^ 
					((this.AdmCdeExamMinGrdngId == null) ? string.Empty : this.AdmCdeExamMinGrdngId.ToString()).GetHashCode() ^ 
					((this.OutFlg == null) ? string.Empty : this.OutFlg.ToString()).GetHashCode() ^ 
					((this.EngFlg == null) ? string.Empty : this.EngFlg.ToString()).GetHashCode() ^ 
					((this.MainFlg == null) ? string.Empty : this.MainFlg.ToString()).GetHashCode() ^ 
					((this.SubFlg == null) ? string.Empty : this.SubFlg.ToString()).GetHashCode() ^ 
					((this.AdmCdePlacExamPrntId == null) ? string.Empty : this.AdmCdePlacExamPrntId.ToString()).GetHashCode() ^ 
					((this.ExemptFlg == null) ? string.Empty : this.ExemptFlg.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.ForeignFlg == null) ? string.Empty : this.ForeignFlg.ToString()).GetHashCode() ^ 
					((this.FailRejectFlg == null) ? string.Empty : this.FailRejectFlg.ToString()).GetHashCode() ^ 
					((this.ComptativeRateFlg == null) ? string.Empty : this.ComptativeRateFlg.ToString()).GetHashCode() ^ 
					((this.InterviewFlg == null) ? string.Empty : this.InterviewFlg.ToString()).GetHashCode() ^ 
					((this.OnlineFlg == null) ? string.Empty : this.OnlineFlg.ToString()).GetHashCode() ^ 
					((this.PrepayFlg == null) ? string.Empty : this.PrepayFlg.ToString()).GetHashCode() ^ 
					((this.ChalngFlg == null) ? string.Empty : this.ChalngFlg.ToString()).GetHashCode() ^ 
					((this.LeadToChalng == null) ? string.Empty : this.LeadToChalng.ToString()).GetHashCode() ^ 
					((this.ChlangExamId == null) ? string.Empty : this.ChlangExamId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AdmCdePlacementExamBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AdmCdePlacementExamBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AdmCdePlacementExamBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AdmCdePlacementExamBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AdmCdePlacementExamBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AdmCdePlacementExamBase Object1, AdmCdePlacementExamBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AdmCdePlacementExamId != Object2.AdmCdePlacementExamId)
				equal = false;
			if (Object1.EntMainId != Object2.EntMainId)
				equal = false;
			if ( Object1.DescrAr != null && Object2.DescrAr != null )
			{
				if (Object1.DescrAr != Object2.DescrAr)
					equal = false;
			}
			else if (Object1.DescrAr == null ^ Object2.DescrAr == null )
			{
				equal = false;
			}
			if ( Object1.DescrEn != null && Object2.DescrEn != null )
			{
				if (Object1.DescrEn != Object2.DescrEn)
					equal = false;
			}
			else if (Object1.DescrEn == null ^ Object2.DescrEn == null )
			{
				equal = false;
			}
			if ( Object1.DelFlg != null && Object2.DelFlg != null )
			{
				if (Object1.DelFlg != Object2.DelFlg)
					equal = false;
			}
			else if (Object1.DelFlg == null ^ Object2.DelFlg == null )
			{
				equal = false;
			}
			if (Object1.ExamTypeFlg != Object2.ExamTypeFlg)
				equal = false;
			if ( Object1.GsCdeOperator != null && Object2.GsCdeOperator != null )
			{
				if (Object1.GsCdeOperator != Object2.GsCdeOperator)
					equal = false;
			}
			else if (Object1.GsCdeOperator == null ^ Object2.GsCdeOperator == null )
			{
				equal = false;
			}
			if (Object1.AutoloadFlg != Object2.AutoloadFlg)
				equal = false;
			if ( Object1.MaxMark != null && Object2.MaxMark != null )
			{
				if (Object1.MaxMark != Object2.MaxMark)
					equal = false;
			}
			else if (Object1.MaxMark == null ^ Object2.MaxMark == null )
			{
				equal = false;
			}
			if ( Object1.MinMark != null && Object2.MinMark != null )
			{
				if (Object1.MinMark != Object2.MinMark)
					equal = false;
			}
			else if (Object1.MinMark == null ^ Object2.MinMark == null )
			{
				equal = false;
			}
			if ( Object1.AsCodeDegreeClassId != null && Object2.AsCodeDegreeClassId != null )
			{
				if (Object1.AsCodeDegreeClassId != Object2.AsCodeDegreeClassId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeClassId == null ^ Object2.AsCodeDegreeClassId == null )
			{
				equal = false;
			}
			if ( Object1.AsCodeDegreeId != null && Object2.AsCodeDegreeId != null )
			{
				if (Object1.AsCodeDegreeId != Object2.AsCodeDegreeId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeId == null ^ Object2.AsCodeDegreeId == null )
			{
				equal = false;
			}
			if ( Object1.CrsFlg != null && Object2.CrsFlg != null )
			{
				if (Object1.CrsFlg != Object2.CrsFlg)
					equal = false;
			}
			else if (Object1.CrsFlg == null ^ Object2.CrsFlg == null )
			{
				equal = false;
			}
			if ( Object1.AdmExamGrdngPkgId != null && Object2.AdmExamGrdngPkgId != null )
			{
				if (Object1.AdmExamGrdngPkgId != Object2.AdmExamGrdngPkgId)
					equal = false;
			}
			else if (Object1.AdmExamGrdngPkgId == null ^ Object2.AdmExamGrdngPkgId == null )
			{
				equal = false;
			}
			if ( Object1.AdmCdeExamMinGrdngId != null && Object2.AdmCdeExamMinGrdngId != null )
			{
				if (Object1.AdmCdeExamMinGrdngId != Object2.AdmCdeExamMinGrdngId)
					equal = false;
			}
			else if (Object1.AdmCdeExamMinGrdngId == null ^ Object2.AdmCdeExamMinGrdngId == null )
			{
				equal = false;
			}
			if ( Object1.OutFlg != null && Object2.OutFlg != null )
			{
				if (Object1.OutFlg != Object2.OutFlg)
					equal = false;
			}
			else if (Object1.OutFlg == null ^ Object2.OutFlg == null )
			{
				equal = false;
			}
			if ( Object1.EngFlg != null && Object2.EngFlg != null )
			{
				if (Object1.EngFlg != Object2.EngFlg)
					equal = false;
			}
			else if (Object1.EngFlg == null ^ Object2.EngFlg == null )
			{
				equal = false;
			}
			if ( Object1.MainFlg != null && Object2.MainFlg != null )
			{
				if (Object1.MainFlg != Object2.MainFlg)
					equal = false;
			}
			else if (Object1.MainFlg == null ^ Object2.MainFlg == null )
			{
				equal = false;
			}
			if ( Object1.SubFlg != null && Object2.SubFlg != null )
			{
				if (Object1.SubFlg != Object2.SubFlg)
					equal = false;
			}
			else if (Object1.SubFlg == null ^ Object2.SubFlg == null )
			{
				equal = false;
			}
			if ( Object1.AdmCdePlacExamPrntId != null && Object2.AdmCdePlacExamPrntId != null )
			{
				if (Object1.AdmCdePlacExamPrntId != Object2.AdmCdePlacExamPrntId)
					equal = false;
			}
			else if (Object1.AdmCdePlacExamPrntId == null ^ Object2.AdmCdePlacExamPrntId == null )
			{
				equal = false;
			}
			if ( Object1.ExemptFlg != null && Object2.ExemptFlg != null )
			{
				if (Object1.ExemptFlg != Object2.ExemptFlg)
					equal = false;
			}
			else if (Object1.ExemptFlg == null ^ Object2.ExemptFlg == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.ForeignFlg != null && Object2.ForeignFlg != null )
			{
				if (Object1.ForeignFlg != Object2.ForeignFlg)
					equal = false;
			}
			else if (Object1.ForeignFlg == null ^ Object2.ForeignFlg == null )
			{
				equal = false;
			}
			if ( Object1.FailRejectFlg != null && Object2.FailRejectFlg != null )
			{
				if (Object1.FailRejectFlg != Object2.FailRejectFlg)
					equal = false;
			}
			else if (Object1.FailRejectFlg == null ^ Object2.FailRejectFlg == null )
			{
				equal = false;
			}
			if ( Object1.ComptativeRateFlg != null && Object2.ComptativeRateFlg != null )
			{
				if (Object1.ComptativeRateFlg != Object2.ComptativeRateFlg)
					equal = false;
			}
			else if (Object1.ComptativeRateFlg == null ^ Object2.ComptativeRateFlg == null )
			{
				equal = false;
			}
			if ( Object1.InterviewFlg != null && Object2.InterviewFlg != null )
			{
				if (Object1.InterviewFlg != Object2.InterviewFlg)
					equal = false;
			}
			else if (Object1.InterviewFlg == null ^ Object2.InterviewFlg == null )
			{
				equal = false;
			}
			if ( Object1.OnlineFlg != null && Object2.OnlineFlg != null )
			{
				if (Object1.OnlineFlg != Object2.OnlineFlg)
					equal = false;
			}
			else if (Object1.OnlineFlg == null ^ Object2.OnlineFlg == null )
			{
				equal = false;
			}
			if ( Object1.PrepayFlg != null && Object2.PrepayFlg != null )
			{
				if (Object1.PrepayFlg != Object2.PrepayFlg)
					equal = false;
			}
			else if (Object1.PrepayFlg == null ^ Object2.PrepayFlg == null )
			{
				equal = false;
			}
			if ( Object1.ChalngFlg != null && Object2.ChalngFlg != null )
			{
				if (Object1.ChalngFlg != Object2.ChalngFlg)
					equal = false;
			}
			else if (Object1.ChalngFlg == null ^ Object2.ChalngFlg == null )
			{
				equal = false;
			}
			if ( Object1.LeadToChalng != null && Object2.LeadToChalng != null )
			{
				if (Object1.LeadToChalng != Object2.LeadToChalng)
					equal = false;
			}
			else if (Object1.LeadToChalng == null ^ Object2.LeadToChalng == null )
			{
				equal = false;
			}
			if ( Object1.ChlangExamId != null && Object2.ChlangExamId != null )
			{
				if (Object1.ChlangExamId != Object2.ChlangExamId)
					equal = false;
			}
			else if (Object1.ChlangExamId == null ^ Object2.ChlangExamId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AdmCdePlacementExamBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AdmCdePlacementExamComparer GetComparer()
        {
            return new AdmCdePlacementExamComparer();
        }
        */

        // Comparer delegates back to AdmCdePlacementExam
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AdmCdePlacementExam rhs, AdmCdePlacementExamColumn which)
        {
            switch (which)
            {
            	
            	
            	case AdmCdePlacementExamColumn.AdmCdePlacementExamId:
            		return this.AdmCdePlacementExamId.CompareTo(rhs.AdmCdePlacementExamId);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.EntMainId:
            		return this.EntMainId.CompareTo(rhs.EntMainId);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.DescrAr:
            		return this.DescrAr.CompareTo(rhs.DescrAr);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.DescrEn:
            		return this.DescrEn.CompareTo(rhs.DescrEn);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.DelFlg:
            		return this.DelFlg.Value.CompareTo(rhs.DelFlg.Value);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.ExamTypeFlg:
            		return this.ExamTypeFlg.CompareTo(rhs.ExamTypeFlg);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.GsCdeOperator:
            		return this.GsCdeOperator.CompareTo(rhs.GsCdeOperator);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.AutoloadFlg:
            		return this.AutoloadFlg.CompareTo(rhs.AutoloadFlg);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.MaxMark:
            		return this.MaxMark.Value.CompareTo(rhs.MaxMark.Value);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.MinMark:
            		return this.MinMark.Value.CompareTo(rhs.MinMark.Value);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.AsCodeDegreeClassId:
            		return this.AsCodeDegreeClassId.Value.CompareTo(rhs.AsCodeDegreeClassId.Value);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.AsCodeDegreeId:
            		return this.AsCodeDegreeId.Value.CompareTo(rhs.AsCodeDegreeId.Value);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.CrsFlg:
            		return this.CrsFlg.Value.CompareTo(rhs.CrsFlg.Value);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.AdmExamGrdngPkgId:
            		return this.AdmExamGrdngPkgId.Value.CompareTo(rhs.AdmExamGrdngPkgId.Value);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.AdmCdeExamMinGrdngId:
            		return this.AdmCdeExamMinGrdngId.Value.CompareTo(rhs.AdmCdeExamMinGrdngId.Value);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.OutFlg:
            		return this.OutFlg.Value.CompareTo(rhs.OutFlg.Value);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.EngFlg:
            		return this.EngFlg.Value.CompareTo(rhs.EngFlg.Value);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.MainFlg:
            		return this.MainFlg.Value.CompareTo(rhs.MainFlg.Value);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.SubFlg:
            		return this.SubFlg.Value.CompareTo(rhs.SubFlg.Value);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.AdmCdePlacExamPrntId:
            		return this.AdmCdePlacExamPrntId.Value.CompareTo(rhs.AdmCdePlacExamPrntId.Value);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.ExemptFlg:
            		return this.ExemptFlg.Value.CompareTo(rhs.ExemptFlg.Value);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.ForeignFlg:
            		return this.ForeignFlg.Value.CompareTo(rhs.ForeignFlg.Value);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.FailRejectFlg:
            		return this.FailRejectFlg.Value.CompareTo(rhs.FailRejectFlg.Value);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.ComptativeRateFlg:
            		return this.ComptativeRateFlg.Value.CompareTo(rhs.ComptativeRateFlg.Value);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.InterviewFlg:
            		return this.InterviewFlg.Value.CompareTo(rhs.InterviewFlg.Value);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.OnlineFlg:
            		return this.OnlineFlg.Value.CompareTo(rhs.OnlineFlg.Value);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.PrepayFlg:
            		return this.PrepayFlg.Value.CompareTo(rhs.PrepayFlg.Value);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.ChalngFlg:
            		return this.ChalngFlg.Value.CompareTo(rhs.ChalngFlg.Value);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.LeadToChalng:
            		return this.LeadToChalng.Value.CompareTo(rhs.LeadToChalng.Value);
            		
            		                 
            	
            	
            	case AdmCdePlacementExamColumn.ChlangExamId:
            		return this.ChlangExamId.Value.CompareTo(rhs.ChlangExamId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AdmCdePlacementExamKey> Members
		
		// member variable for the EntityId property
		private AdmCdePlacementExamKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AdmCdePlacementExamKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AdmCdePlacementExamKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AdmCdePlacementExam")
					.Append("|").Append( this.AdmCdePlacementExamId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{33}{32}- AdmCdePlacementExamId: {0}{32}- EntMainId: {1}{32}- DescrAr: {2}{32}- DescrEn: {3}{32}- DelFlg: {4}{32}- ExamTypeFlg: {5}{32}- GsCdeOperator: {6}{32}- AutoloadFlg: {7}{32}- MaxMark: {8}{32}- MinMark: {9}{32}- AsCodeDegreeClassId: {10}{32}- AsCodeDegreeId: {11}{32}- CrsFlg: {12}{32}- AdmExamGrdngPkgId: {13}{32}- AdmCdeExamMinGrdngId: {14}{32}- OutFlg: {15}{32}- EngFlg: {16}{32}- MainFlg: {17}{32}- SubFlg: {18}{32}- AdmCdePlacExamPrntId: {19}{32}- ExemptFlg: {20}{32}- SeUserId: {21}{32}- LastDate: {22}{32}- ForeignFlg: {23}{32}- FailRejectFlg: {24}{32}- ComptativeRateFlg: {25}{32}- InterviewFlg: {26}{32}- OnlineFlg: {27}{32}- PrepayFlg: {28}{32}- ChalngFlg: {29}{32}- LeadToChalng: {30}{32}- ChlangExamId: {31}{32}{34}", 
				this.AdmCdePlacementExamId,
				this.EntMainId,
				(this.DescrAr == null) ? string.Empty : this.DescrAr.ToString(),
				(this.DescrEn == null) ? string.Empty : this.DescrEn.ToString(),
				(this.DelFlg == null) ? string.Empty : this.DelFlg.ToString(),
				this.ExamTypeFlg,
				(this.GsCdeOperator == null) ? string.Empty : this.GsCdeOperator.ToString(),
				this.AutoloadFlg,
				(this.MaxMark == null) ? string.Empty : this.MaxMark.ToString(),
				(this.MinMark == null) ? string.Empty : this.MinMark.ToString(),
				(this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString(),
				(this.AsCodeDegreeId == null) ? string.Empty : this.AsCodeDegreeId.ToString(),
				(this.CrsFlg == null) ? string.Empty : this.CrsFlg.ToString(),
				(this.AdmExamGrdngPkgId == null) ? string.Empty : this.AdmExamGrdngPkgId.ToString(),
				(this.AdmCdeExamMinGrdngId == null) ? string.Empty : this.AdmCdeExamMinGrdngId.ToString(),
				(this.OutFlg == null) ? string.Empty : this.OutFlg.ToString(),
				(this.EngFlg == null) ? string.Empty : this.EngFlg.ToString(),
				(this.MainFlg == null) ? string.Empty : this.MainFlg.ToString(),
				(this.SubFlg == null) ? string.Empty : this.SubFlg.ToString(),
				(this.AdmCdePlacExamPrntId == null) ? string.Empty : this.AdmCdePlacExamPrntId.ToString(),
				(this.ExemptFlg == null) ? string.Empty : this.ExemptFlg.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.ForeignFlg == null) ? string.Empty : this.ForeignFlg.ToString(),
				(this.FailRejectFlg == null) ? string.Empty : this.FailRejectFlg.ToString(),
				(this.ComptativeRateFlg == null) ? string.Empty : this.ComptativeRateFlg.ToString(),
				(this.InterviewFlg == null) ? string.Empty : this.InterviewFlg.ToString(),
				(this.OnlineFlg == null) ? string.Empty : this.OnlineFlg.ToString(),
				(this.PrepayFlg == null) ? string.Empty : this.PrepayFlg.ToString(),
				(this.ChalngFlg == null) ? string.Empty : this.ChalngFlg.ToString(),
				(this.LeadToChalng == null) ? string.Empty : this.LeadToChalng.ToString(),
				(this.ChlangExamId == null) ? string.Empty : this.ChlangExamId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ADM_CDE_PLACEMENT_EXAM' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AdmCdePlacementExamEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ADM_CDE_PLACEMENT_EXAM_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ADM_CDE_PLACEMENT_EXAM"</remarks>
		public System.Decimal AdmCdePlacementExamId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalAdmCdePlacementExamId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ENT_MAIN_ID : 
		/// </summary>
		public System.Decimal		  EntMainId = 0.0m;
		
		/// <summary>
		/// DESCR_AR : Interviewe
		/// </summary>
		public System.String		  DescrAr = null;
		
		/// <summary>
		/// DESCR_EN : 
		/// </summary>
		public System.String		  DescrEn = null;
		
		/// <summary>
		/// DEL_FLG : 
		/// </summary>
		public System.Decimal?		  DelFlg = null;
		
		/// <summary>
		/// EXAM_TYPE_FLG : 0:passfail-1:mark-2:Grades
		/// </summary>
		public System.Decimal		  ExamTypeFlg = 0.0m;
		
		/// <summary>
		/// GS_CDE_OPERATOR : 
		/// </summary>
		public System.String		  GsCdeOperator = null;
		
		/// <summary>
		/// AUTOLOAD_FLG : NU=0,ejust=0
		/// </summary>
		public System.Decimal		  AutoloadFlg = 0.0m;
		
		/// <summary>
		/// MAX_MARK : 
		/// </summary>
		public System.Decimal?		  MaxMark = null;
		
		/// <summary>
		/// MIN_MARK : 
		/// </summary>
		public System.Decimal?		  MinMark = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_CLASS_ID : UG/PG
		/// </summary>
		public System.Decimal?		  AsCodeDegreeClassId = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_ID : 
		/// </summary>
		public System.Decimal?		  AsCodeDegreeId = null;
		
		/// <summary>
		/// CRS_FLG : مرتبط بمقررات تحميل
		/// </summary>
		public System.Decimal?		  CrsFlg = null;
		
		/// <summary>
		/// ADM_EXAM_GRDNG_PKG_ID : 
		/// </summary>
		public System.Decimal?		  AdmExamGrdngPkgId = null;
		
		/// <summary>
		/// ADM_CDE_EXAM_MIN_GRDNG_ID : 
		/// </summary>
		public System.Decimal?		  AdmCdeExamMinGrdngId = null;
		
		/// <summary>
		/// OUT_FLG : XXNU-Exam Out of faculty-applicant enter score and ceetf direct -no exam dattime
		/// </summary>
		public System.Boolean?		  OutFlg = null;
		
		/// <summary>
		/// ENG_FLG : exam related to group english
		/// </summary>
		public System.Boolean?		  EngFlg = null;
		
		/// <summary>
		/// MAIN_FLG : XXXTOEFL/IELTS/ENGPLACE
		/// </summary>
		public System.Boolean?		  MainFlg = null;
		
		/// <summary>
		/// SUB_FLG : TOEFL/IELTS/ENGPLACE
		/// </summary>
		public System.Boolean?		  SubFlg = null;
		
		/// <summary>
		/// ADM_CDE_PLAC_EXAM_PRNT_ID : NU:English>TOEFL/IELTS/ENGPLACE>MARK/WRITING or SCORE
		/// </summary>
		public System.Decimal?		  AdmCdePlacExamPrntId = null;
		
		/// <summary>
		/// EXEMPT_FLG : مرتبط بمقررات اعفاء
		/// </summary>
		public System.Boolean?		  ExemptFlg = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// FOREIGN_FLG : Ejust  (International Yes/No) to specify that this Exam for International applicants only
		/// </summary>
		public System.Decimal?		  ForeignFlg = null;
		
		/// <summary>
		/// FAIL_REJECT_FLG : if applicant fail with approve be rejected
		/// </summary>
		public System.Boolean?		  FailRejectFlg = null;
		
		/// <summary>
		/// COMPTATIVE_RATE_FLG : depend on result of ADM_APP_REG_HISTORY.COMPTATIVE_RATE
		/// </summary>
		public System.Boolean?		  ComptativeRateFlg = null;
		
		/// <summary>
		/// INTERVIEW_FLG : exam related to group english
		/// </summary>
		public System.Boolean?		  InterviewFlg = null;
		
		/// <summary>
		/// ONLINE_FLG : exam related to group english
		/// </summary>
		public System.Boolean?		  OnlineFlg = null;
		
		/// <summary>
		/// PREPAY_FLG : 1- دفع قبل توزيع على موعد امتحان
		/// 		/// 2-دفع قبل رصد النتيجة
		/// 		/// default=0
		/// </summary>
		public System.Int16?		  PrepayFlg = null;
		
		/// <summary>
		/// CHALNG_FLG : 
		/// </summary>
		public System.Boolean?		  ChalngFlg = null;
		
		/// <summary>
		/// LEAD_TO_CHALNG : 
		/// </summary>
		public System.Boolean?		  LeadToChalng = null;
		
		/// <summary>
		/// CHLANG_EXAM_ID : 
		/// </summary>
		public System.Decimal?		  ChlangExamId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdmCdeExamGrdng _admCdeExamMinGrdngIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdeExamGrdng"/>.
		/// </summary>
		/// <value>The source AdmCdeExamGrdng for AdmCdeExamMinGrdngId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmCdeExamGrdng AdmCdeExamMinGrdngIdSource
      	{
            get { return this._admCdeExamMinGrdngIdSource; }
            set { this._admCdeExamMinGrdngIdSource = value; }
      	}
		private AdmCdePlacementExam _admCdePlacExamPrntIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdePlacementExam"/>.
		/// </summary>
		/// <value>The source AdmCdePlacementExam for AdmCdePlacExamPrntId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmCdePlacementExam AdmCdePlacExamPrntIdSource
      	{
            get { return this._admCdePlacExamPrntIdSource; }
            set { this._admCdePlacExamPrntIdSource = value; }
      	}
		private AdmCdePlacementExam _chlangExamIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdePlacementExam"/>.
		/// </summary>
		/// <value>The source AdmCdePlacementExam for ChlangExamId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmCdePlacementExam ChlangExamIdSource
      	{
            get { return this._chlangExamIdSource; }
            set { this._chlangExamIdSource = value; }
      	}
		private AdmExamGrdngPkg _admExamGrdngPkgIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmExamGrdngPkg"/>.
		/// </summary>
		/// <value>The source AdmExamGrdngPkg for AdmExamGrdngPkgId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmExamGrdngPkg AdmExamGrdngPkgIdSource
      	{
            get { return this._admExamGrdngPkgIdSource; }
            set { this._admExamGrdngPkgIdSource = value; }
      	}
		private AsCodeDegree _asCodeDegreeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return this._asCodeDegreeIdSource; }
            set { this._asCodeDegreeIdSource = value; }
      	}
		private AsCodeDegreeClass _asCodeDegreeClassIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return this._asCodeDegreeClassIdSource; }
            set { this._asCodeDegreeClassIdSource = value; }
      	}
		private EntityMain _entMainIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return this._entMainIdSource; }
            set { this._entMainIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region AdmCdePlacementExamCollectionGetByChlangExamId
		
		private TList<AdmCdePlacementExam> _admCdePlacementExamChlangExamIdGetByChlangExamId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admCdePlacementExamChlangExamIdGetByChlangExamId
		/// </summary>
		
		public TList<AdmCdePlacementExam> AdmCdePlacementExamCollectionGetByChlangExamId
		{
			get
			{
				if (_admCdePlacementExamChlangExamIdGetByChlangExamId == null)
				{
				_admCdePlacementExamChlangExamIdGetByChlangExamId = new TList<AdmCdePlacementExam>();
				}
	
				return _admCdePlacementExamChlangExamIdGetByChlangExamId;
			}
			set { _admCdePlacementExamChlangExamIdGetByChlangExamId = value; }
		}
		
		#endregion

		#region AdmPlaceExamCourseCollection
		
		private TList<AdmPlaceExamCourse> _admPlaceExamCourseAdmCdePlacementExamId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admPlaceExamCourseAdmCdePlacementExamId
		/// </summary>
		
		public TList<AdmPlaceExamCourse> AdmPlaceExamCourseCollection
		{
			get
			{
				if (_admPlaceExamCourseAdmCdePlacementExamId == null)
				{
				_admPlaceExamCourseAdmCdePlacementExamId = new TList<AdmPlaceExamCourse>();
				}
	
				return _admPlaceExamCourseAdmCdePlacementExamId;
			}
			set { _admPlaceExamCourseAdmCdePlacementExamId = value; }
		}
		
		#endregion

		#region AdmPlaceExamDatetimeCollection
		
		private TList<AdmPlaceExamDatetime> _admPlaceExamDatetimeAdmCdePlacementExamId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admPlaceExamDatetimeAdmCdePlacementExamId
		/// </summary>
		
		public TList<AdmPlaceExamDatetime> AdmPlaceExamDatetimeCollection
		{
			get
			{
				if (_admPlaceExamDatetimeAdmCdePlacementExamId == null)
				{
				_admPlaceExamDatetimeAdmCdePlacementExamId = new TList<AdmPlaceExamDatetime>();
				}
	
				return _admPlaceExamDatetimeAdmCdePlacementExamId;
			}
			set { _admPlaceExamDatetimeAdmCdePlacementExamId = value; }
		}
		
		#endregion

		#region AdmCompetitiveAvgCollection
		
		private TList<AdmCompetitiveAvg> _admCompetitiveAvgAdmCdePlacementExamId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admCompetitiveAvgAdmCdePlacementExamId
		/// </summary>
		
		public TList<AdmCompetitiveAvg> AdmCompetitiveAvgCollection
		{
			get
			{
				if (_admCompetitiveAvgAdmCdePlacementExamId == null)
				{
				_admCompetitiveAvgAdmCdePlacementExamId = new TList<AdmCompetitiveAvg>();
				}
	
				return _admCompetitiveAvgAdmCdePlacementExamId;
			}
			set { _admCompetitiveAvgAdmCdePlacementExamId = value; }
		}
		
		#endregion

		#region AdmAppInterviewExamCollection
		
		private TList<AdmAppInterviewExam> _admAppInterviewExamAdmCdePlacementExamId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppInterviewExamAdmCdePlacementExamId
		/// </summary>
		
		public TList<AdmAppInterviewExam> AdmAppInterviewExamCollection
		{
			get
			{
				if (_admAppInterviewExamAdmCdePlacementExamId == null)
				{
				_admAppInterviewExamAdmCdePlacementExamId = new TList<AdmAppInterviewExam>();
				}
	
				return _admAppInterviewExamAdmCdePlacementExamId;
			}
			set { _admAppInterviewExamAdmCdePlacementExamId = value; }
		}
		
		#endregion

		#region AdmCodeEngTestCollection
		
		private TList<AdmCodeEngTest> _admCodeEngTestAdmCdePlacementExamId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admCodeEngTestAdmCdePlacementExamId
		/// </summary>
		
		public TList<AdmCodeEngTest> AdmCodeEngTestCollection
		{
			get
			{
				if (_admCodeEngTestAdmCdePlacementExamId == null)
				{
				_admCodeEngTestAdmCdePlacementExamId = new TList<AdmCodeEngTest>();
				}
	
				return _admCodeEngTestAdmCdePlacementExamId;
			}
			set { _admCodeEngTestAdmCdePlacementExamId = value; }
		}
		
		#endregion

		#region AdmAppPlacementExamCollection
		
		private TList<AdmAppPlacementExam> _admAppPlacementExamAdmCdePlacementExamId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppPlacementExamAdmCdePlacementExamId
		/// </summary>
		
		public TList<AdmAppPlacementExam> AdmAppPlacementExamCollection
		{
			get
			{
				if (_admAppPlacementExamAdmCdePlacementExamId == null)
				{
				_admAppPlacementExamAdmCdePlacementExamId = new TList<AdmAppPlacementExam>();
				}
	
				return _admAppPlacementExamAdmCdePlacementExamId;
			}
			set { _admAppPlacementExamAdmCdePlacementExamId = value; }
		}
		
		#endregion

		#region AdmCdePlacementExamCollectionGetByAdmCdePlacExamPrntId
		
		private TList<AdmCdePlacementExam> _admCdePlacementExamChlangExamIdGetByAdmCdePlacExamPrntId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admCdePlacementExamChlangExamIdGetByAdmCdePlacExamPrntId
		/// </summary>
		
		public TList<AdmCdePlacementExam> AdmCdePlacementExamCollectionGetByAdmCdePlacExamPrntId
		{
			get
			{
				if (_admCdePlacementExamChlangExamIdGetByAdmCdePlacExamPrntId == null)
				{
				_admCdePlacementExamChlangExamIdGetByAdmCdePlacExamPrntId = new TList<AdmCdePlacementExam>();
				}
	
				return _admCdePlacementExamChlangExamIdGetByAdmCdePlacExamPrntId;
			}
			set { _admCdePlacementExamChlangExamIdGetByAdmCdePlacExamPrntId = value; }
		}
		
		#endregion

		#region AdmCdeFeeCollection
		
		private TList<AdmCdeFee> _admCdeFeeAdmCdePlacementExamId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admCdeFeeAdmCdePlacementExamId
		/// </summary>
		
		public TList<AdmCdeFee> AdmCdeFeeCollection
		{
			get
			{
				if (_admCdeFeeAdmCdePlacementExamId == null)
				{
				_admCdeFeeAdmCdePlacementExamId = new TList<AdmCdeFee>();
				}
	
				return _admCdeFeeAdmCdePlacementExamId;
			}
			set { _admCdeFeeAdmCdePlacementExamId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AdmCdePlacementExamEntityData _tmp = new AdmCdePlacementExamEntityData();
						
			_tmp.AdmCdePlacementExamId = this.AdmCdePlacementExamId;
			_tmp.OriginalAdmCdePlacementExamId = this.OriginalAdmCdePlacementExamId;
			
			_tmp.EntMainId = this.EntMainId;
			_tmp.DescrAr = this.DescrAr;
			_tmp.DescrEn = this.DescrEn;
			_tmp.DelFlg = this.DelFlg;
			_tmp.ExamTypeFlg = this.ExamTypeFlg;
			_tmp.GsCdeOperator = this.GsCdeOperator;
			_tmp.AutoloadFlg = this.AutoloadFlg;
			_tmp.MaxMark = this.MaxMark;
			_tmp.MinMark = this.MinMark;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.CrsFlg = this.CrsFlg;
			_tmp.AdmExamGrdngPkgId = this.AdmExamGrdngPkgId;
			_tmp.AdmCdeExamMinGrdngId = this.AdmCdeExamMinGrdngId;
			_tmp.OutFlg = this.OutFlg;
			_tmp.EngFlg = this.EngFlg;
			_tmp.MainFlg = this.MainFlg;
			_tmp.SubFlg = this.SubFlg;
			_tmp.AdmCdePlacExamPrntId = this.AdmCdePlacExamPrntId;
			_tmp.ExemptFlg = this.ExemptFlg;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.ForeignFlg = this.ForeignFlg;
			_tmp.FailRejectFlg = this.FailRejectFlg;
			_tmp.ComptativeRateFlg = this.ComptativeRateFlg;
			_tmp.InterviewFlg = this.InterviewFlg;
			_tmp.OnlineFlg = this.OnlineFlg;
			_tmp.PrepayFlg = this.PrepayFlg;
			_tmp.ChalngFlg = this.ChalngFlg;
			_tmp.LeadToChalng = this.LeadToChalng;
			_tmp.ChlangExamId = this.ChlangExamId;
			
			#region Source Parent Composite Entities
			if (this.AdmCdeExamMinGrdngIdSource != null)
				_tmp.AdmCdeExamMinGrdngIdSource = MakeCopyOf(this.AdmCdeExamMinGrdngIdSource) as AdmCdeExamGrdng;
			if (this.AdmCdePlacExamPrntIdSource != null)
				_tmp.AdmCdePlacExamPrntIdSource = MakeCopyOf(this.AdmCdePlacExamPrntIdSource) as AdmCdePlacementExam;
			if (this.ChlangExamIdSource != null)
				_tmp.ChlangExamIdSource = MakeCopyOf(this.ChlangExamIdSource) as AdmCdePlacementExam;
			if (this.AdmExamGrdngPkgIdSource != null)
				_tmp.AdmExamGrdngPkgIdSource = MakeCopyOf(this.AdmExamGrdngPkgIdSource) as AdmExamGrdngPkg;
			if (this.AsCodeDegreeIdSource != null)
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null)
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource) as AsCodeDegreeClass;
			if (this.EntMainIdSource != null)
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource) as EntityMain;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._admCdePlacementExamChlangExamIdGetByChlangExamId != null)
				_tmp.AdmCdePlacementExamCollectionGetByChlangExamId = (TList<AdmCdePlacementExam>) MakeCopyOf(this.AdmCdePlacementExamCollectionGetByChlangExamId); 
			if (this._admPlaceExamCourseAdmCdePlacementExamId != null)
				_tmp.AdmPlaceExamCourseCollection = (TList<AdmPlaceExamCourse>) MakeCopyOf(this.AdmPlaceExamCourseCollection); 
			if (this._admPlaceExamDatetimeAdmCdePlacementExamId != null)
				_tmp.AdmPlaceExamDatetimeCollection = (TList<AdmPlaceExamDatetime>) MakeCopyOf(this.AdmPlaceExamDatetimeCollection); 
			if (this._admCompetitiveAvgAdmCdePlacementExamId != null)
				_tmp.AdmCompetitiveAvgCollection = (TList<AdmCompetitiveAvg>) MakeCopyOf(this.AdmCompetitiveAvgCollection); 
			if (this._admAppInterviewExamAdmCdePlacementExamId != null)
				_tmp.AdmAppInterviewExamCollection = (TList<AdmAppInterviewExam>) MakeCopyOf(this.AdmAppInterviewExamCollection); 
			if (this._admCodeEngTestAdmCdePlacementExamId != null)
				_tmp.AdmCodeEngTestCollection = (TList<AdmCodeEngTest>) MakeCopyOf(this.AdmCodeEngTestCollection); 
			if (this._admAppPlacementExamAdmCdePlacementExamId != null)
				_tmp.AdmAppPlacementExamCollection = (TList<AdmAppPlacementExam>) MakeCopyOf(this.AdmAppPlacementExamCollection); 
			if (this._admCdePlacementExamChlangExamIdGetByAdmCdePlacExamPrntId != null)
				_tmp.AdmCdePlacementExamCollectionGetByAdmCdePlacExamPrntId = (TList<AdmCdePlacementExam>) MakeCopyOf(this.AdmCdePlacementExamCollectionGetByAdmCdePlacExamPrntId); 
			if (this._admCdeFeeAdmCdePlacementExamId != null)
				_tmp.AdmCdeFeeCollection = (TList<AdmCdeFee>) MakeCopyOf(this.AdmCdeFeeCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AdmCdePlacementExamEntityData _tmp = new AdmCdePlacementExamEntityData();
						
			_tmp.AdmCdePlacementExamId = this.AdmCdePlacementExamId;
			_tmp.OriginalAdmCdePlacementExamId = this.OriginalAdmCdePlacementExamId;
			
			_tmp.EntMainId = this.EntMainId;
			_tmp.DescrAr = this.DescrAr;
			_tmp.DescrEn = this.DescrEn;
			_tmp.DelFlg = this.DelFlg;
			_tmp.ExamTypeFlg = this.ExamTypeFlg;
			_tmp.GsCdeOperator = this.GsCdeOperator;
			_tmp.AutoloadFlg = this.AutoloadFlg;
			_tmp.MaxMark = this.MaxMark;
			_tmp.MinMark = this.MinMark;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.CrsFlg = this.CrsFlg;
			_tmp.AdmExamGrdngPkgId = this.AdmExamGrdngPkgId;
			_tmp.AdmCdeExamMinGrdngId = this.AdmCdeExamMinGrdngId;
			_tmp.OutFlg = this.OutFlg;
			_tmp.EngFlg = this.EngFlg;
			_tmp.MainFlg = this.MainFlg;
			_tmp.SubFlg = this.SubFlg;
			_tmp.AdmCdePlacExamPrntId = this.AdmCdePlacExamPrntId;
			_tmp.ExemptFlg = this.ExemptFlg;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.ForeignFlg = this.ForeignFlg;
			_tmp.FailRejectFlg = this.FailRejectFlg;
			_tmp.ComptativeRateFlg = this.ComptativeRateFlg;
			_tmp.InterviewFlg = this.InterviewFlg;
			_tmp.OnlineFlg = this.OnlineFlg;
			_tmp.PrepayFlg = this.PrepayFlg;
			_tmp.ChalngFlg = this.ChalngFlg;
			_tmp.LeadToChalng = this.LeadToChalng;
			_tmp.ChlangExamId = this.ChlangExamId;
			
			#region Source Parent Composite Entities
			if (this.AdmCdeExamMinGrdngIdSource != null && existingCopies.Contains(this.AdmCdeExamMinGrdngIdSource))
				_tmp.AdmCdeExamMinGrdngIdSource = existingCopies[this.AdmCdeExamMinGrdngIdSource] as AdmCdeExamGrdng;
			else
				_tmp.AdmCdeExamMinGrdngIdSource = MakeCopyOf(this.AdmCdeExamMinGrdngIdSource, existingCopies) as AdmCdeExamGrdng;
			if (this.AdmCdePlacExamPrntIdSource != null && existingCopies.Contains(this.AdmCdePlacExamPrntIdSource))
				_tmp.AdmCdePlacExamPrntIdSource = existingCopies[this.AdmCdePlacExamPrntIdSource] as AdmCdePlacementExam;
			else
				_tmp.AdmCdePlacExamPrntIdSource = MakeCopyOf(this.AdmCdePlacExamPrntIdSource, existingCopies) as AdmCdePlacementExam;
			if (this.ChlangExamIdSource != null && existingCopies.Contains(this.ChlangExamIdSource))
				_tmp.ChlangExamIdSource = existingCopies[this.ChlangExamIdSource] as AdmCdePlacementExam;
			else
				_tmp.ChlangExamIdSource = MakeCopyOf(this.ChlangExamIdSource, existingCopies) as AdmCdePlacementExam;
			if (this.AdmExamGrdngPkgIdSource != null && existingCopies.Contains(this.AdmExamGrdngPkgIdSource))
				_tmp.AdmExamGrdngPkgIdSource = existingCopies[this.AdmExamGrdngPkgIdSource] as AdmExamGrdngPkg;
			else
				_tmp.AdmExamGrdngPkgIdSource = MakeCopyOf(this.AdmExamGrdngPkgIdSource, existingCopies) as AdmExamGrdngPkg;
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				_tmp.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				_tmp.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				_tmp.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.AdmCdePlacementExamCollectionGetByChlangExamId = (TList<AdmCdePlacementExam>) MakeCopyOf(this.AdmCdePlacementExamCollectionGetByChlangExamId, existingCopies); 
			_tmp.AdmPlaceExamCourseCollection = (TList<AdmPlaceExamCourse>) MakeCopyOf(this.AdmPlaceExamCourseCollection, existingCopies); 
			_tmp.AdmPlaceExamDatetimeCollection = (TList<AdmPlaceExamDatetime>) MakeCopyOf(this.AdmPlaceExamDatetimeCollection, existingCopies); 
			_tmp.AdmCompetitiveAvgCollection = (TList<AdmCompetitiveAvg>) MakeCopyOf(this.AdmCompetitiveAvgCollection, existingCopies); 
			_tmp.AdmAppInterviewExamCollection = (TList<AdmAppInterviewExam>) MakeCopyOf(this.AdmAppInterviewExamCollection, existingCopies); 
			_tmp.AdmCodeEngTestCollection = (TList<AdmCodeEngTest>) MakeCopyOf(this.AdmCodeEngTestCollection, existingCopies); 
			_tmp.AdmAppPlacementExamCollection = (TList<AdmAppPlacementExam>) MakeCopyOf(this.AdmAppPlacementExamCollection, existingCopies); 
			_tmp.AdmCdePlacementExamCollectionGetByAdmCdePlacExamPrntId = (TList<AdmCdePlacementExam>) MakeCopyOf(this.AdmCdePlacementExamCollectionGetByAdmCdePlacExamPrntId, existingCopies); 
			_tmp.AdmCdeFeeCollection = (TList<AdmCdeFee>) MakeCopyOf(this.AdmCdeFeeCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmCdePlacementExamColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AdmCdePlacementExamColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmCdePlacementExamColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AdmCdePlacementExamColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmCdePlacementExamColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AdmCdePlacementExamColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AdmCdePlacementExamEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AdmCdePlacementExamEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmCdePlacementExamColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AdmCdePlacementExamColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AdmCdePlacementExamEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AdmCdePlacementExamEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AdmCdePlacementExamEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AdmCdePlacementExam"/> object.
	/// </remarks>
	public class AdmCdePlacementExamEventArgs : System.EventArgs
	{
		private AdmCdePlacementExamColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AdmCdePlacementExamEventArgs class.
		///</summary>
		public AdmCdePlacementExamEventArgs(AdmCdePlacementExamColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AdmCdePlacementExamEventArgs class.
		///</summary>
		public AdmCdePlacementExamEventArgs(AdmCdePlacementExamColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AdmCdePlacementExamColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AdmCdePlacementExamColumn" />
		public AdmCdePlacementExamColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AdmCdePlacementExam related events.
	///</summary>
	public delegate void AdmCdePlacementExamEventHandler(object sender, AdmCdePlacementExamEventArgs e);
	
	#region AdmCdePlacementExamComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AdmCdePlacementExamComparer : System.Collections.Generic.IComparer<AdmCdePlacementExam>
	{
		AdmCdePlacementExamColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AdmCdePlacementExamComparer"/> class.
        /// </summary>
		public AdmCdePlacementExamComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AdmCdePlacementExamComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AdmCdePlacementExamComparer(AdmCdePlacementExamColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AdmCdePlacementExam"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AdmCdePlacementExam"/> to compare.</param>
        /// <param name="b">The second <c>AdmCdePlacementExam</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AdmCdePlacementExam a, AdmCdePlacementExam b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AdmCdePlacementExam entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AdmCdePlacementExam a, AdmCdePlacementExam b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AdmCdePlacementExamColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AdmCdePlacementExamKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AdmCdePlacementExam"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AdmCdePlacementExamKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AdmCdePlacementExamKey class.
		/// </summary>
		public AdmCdePlacementExamKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmCdePlacementExamKey class.
		/// </summary>
		public AdmCdePlacementExamKey(AdmCdePlacementExamBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AdmCdePlacementExamId = entity.AdmCdePlacementExamId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmCdePlacementExamKey class.
		/// </summary>
		public AdmCdePlacementExamKey(System.Decimal _admCdePlacementExamId)
		{
			#region Init Properties

			this.AdmCdePlacementExamId = _admCdePlacementExamId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AdmCdePlacementExamBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AdmCdePlacementExamBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AdmCdePlacementExamId property
		private System.Decimal _admCdePlacementExamId;
		
		/// <summary>
		/// Gets or sets the AdmCdePlacementExamId property.
		/// </summary>
		public System.Decimal AdmCdePlacementExamId
		{
			get { return _admCdePlacementExamId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AdmCdePlacementExamId = value;
				
				_admCdePlacementExamId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AdmCdePlacementExamId = ( values["AdmCdePlacementExamId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["AdmCdePlacementExamId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AdmCdePlacementExamId", AdmCdePlacementExamId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AdmCdePlacementExamId: {0}{1}",
								AdmCdePlacementExamId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AdmCdePlacementExamColumn Enum
	
	/// <summary>
	/// Enumerate the AdmCdePlacementExam columns.
	/// </summary>
	[Serializable]
	public enum AdmCdePlacementExamColumn : int
	{
		/// <summary>
		/// AdmCdePlacementExamId : 
		/// </summary>
		[EnumTextValue("ADM_CDE_PLACEMENT_EXAM_ID")]
		[ColumnEnum("ADM_CDE_PLACEMENT_EXAM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		AdmCdePlacementExamId = 1,
		/// <summary>
		/// EntMainId : 
		/// </summary>
		[EnumTextValue("ENT_MAIN_ID")]
		[ColumnEnum("ENT_MAIN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EntMainId = 2,
		/// <summary>
		/// DescrAr : Interviewe
		/// </summary>
		[EnumTextValue("DESCR_AR")]
		[ColumnEnum("DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		DescrAr = 3,
		/// <summary>
		/// DescrEn : 
		/// </summary>
		[EnumTextValue("DESCR_EN")]
		[ColumnEnum("DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		DescrEn = 4,
		/// <summary>
		/// DelFlg : 
		/// </summary>
		[EnumTextValue("DEL_FLG")]
		[ColumnEnum("DEL_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DelFlg = 5,
		/// <summary>
		/// ExamTypeFlg : 0:passfail-1:mark-2:Grades
		/// </summary>
		[EnumTextValue("EXAM_TYPE_FLG")]
		[ColumnEnum("EXAM_TYPE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ExamTypeFlg = 6,
		/// <summary>
		/// GsCdeOperator : 
		/// </summary>
		[EnumTextValue("GS_CDE_OPERATOR")]
		[ColumnEnum("GS_CDE_OPERATOR", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 2)]
		GsCdeOperator = 7,
		/// <summary>
		/// AutoloadFlg : NU=0,ejust=0
		/// </summary>
		[EnumTextValue("AUTOLOAD_FLG")]
		[ColumnEnum("AUTOLOAD_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AutoloadFlg = 8,
		/// <summary>
		/// MaxMark : 
		/// </summary>
		[EnumTextValue("MAX_MARK")]
		[ColumnEnum("MAX_MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MaxMark = 9,
		/// <summary>
		/// MinMark : 
		/// </summary>
		[EnumTextValue("MIN_MARK")]
		[ColumnEnum("MIN_MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MinMark = 10,
		/// <summary>
		/// AsCodeDegreeClassId : UG/PG
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_CLASS_ID")]
		[ColumnEnum("AS_CODE_DEGREE_CLASS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeClassId = 11,
		/// <summary>
		/// AsCodeDegreeId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_ID")]
		[ColumnEnum("AS_CODE_DEGREE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeId = 12,
		/// <summary>
		/// CrsFlg : مرتبط بمقررات تحميل
		/// </summary>
		[EnumTextValue("CRS_FLG")]
		[ColumnEnum("CRS_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CrsFlg = 13,
		/// <summary>
		/// AdmExamGrdngPkgId : 
		/// </summary>
		[EnumTextValue("ADM_EXAM_GRDNG_PKG_ID")]
		[ColumnEnum("ADM_EXAM_GRDNG_PKG_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmExamGrdngPkgId = 14,
		/// <summary>
		/// AdmCdeExamMinGrdngId : 
		/// </summary>
		[EnumTextValue("ADM_CDE_EXAM_MIN_GRDNG_ID")]
		[ColumnEnum("ADM_CDE_EXAM_MIN_GRDNG_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmCdeExamMinGrdngId = 15,
		/// <summary>
		/// OutFlg : XXNU-Exam Out of faculty-applicant enter score and ceetf direct -no exam dattime
		/// </summary>
		[EnumTextValue("OUT_FLG")]
		[ColumnEnum("OUT_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		OutFlg = 16,
		/// <summary>
		/// EngFlg : exam related to group english
		/// </summary>
		[EnumTextValue("ENG_FLG")]
		[ColumnEnum("ENG_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		EngFlg = 17,
		/// <summary>
		/// MainFlg : XXXTOEFL/IELTS/ENGPLACE
		/// </summary>
		[EnumTextValue("MAIN_FLG")]
		[ColumnEnum("MAIN_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		MainFlg = 18,
		/// <summary>
		/// SubFlg : TOEFL/IELTS/ENGPLACE
		/// </summary>
		[EnumTextValue("SUB_FLG")]
		[ColumnEnum("SUB_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		SubFlg = 19,
		/// <summary>
		/// AdmCdePlacExamPrntId : NU:English>TOEFL/IELTS/ENGPLACE>MARK/WRITING or SCORE
		/// </summary>
		[EnumTextValue("ADM_CDE_PLAC_EXAM_PRNT_ID")]
		[ColumnEnum("ADM_CDE_PLAC_EXAM_PRNT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmCdePlacExamPrntId = 20,
		/// <summary>
		/// ExemptFlg : مرتبط بمقررات اعفاء
		/// </summary>
		[EnumTextValue("EXEMPT_FLG")]
		[ColumnEnum("EXEMPT_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ExemptFlg = 21,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 22,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 23,
		/// <summary>
		/// ForeignFlg : Ejust  (International Yes/No) to specify that this Exam for International applicants only
		/// </summary>
		[EnumTextValue("FOREIGN_FLG")]
		[ColumnEnum("FOREIGN_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ForeignFlg = 24,
		/// <summary>
		/// FailRejectFlg : if applicant fail with approve be rejected
		/// </summary>
		[EnumTextValue("FAIL_REJECT_FLG")]
		[ColumnEnum("FAIL_REJECT_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		FailRejectFlg = 25,
		/// <summary>
		/// ComptativeRateFlg : depend on result of ADM_APP_REG_HISTORY.COMPTATIVE_RATE
		/// </summary>
		[EnumTextValue("COMPTATIVE_RATE_FLG")]
		[ColumnEnum("COMPTATIVE_RATE_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ComptativeRateFlg = 26,
		/// <summary>
		/// InterviewFlg : exam related to group english
		/// </summary>
		[EnumTextValue("INTERVIEW_FLG")]
		[ColumnEnum("INTERVIEW_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		InterviewFlg = 27,
		/// <summary>
		/// OnlineFlg : exam related to group english
		/// </summary>
		[EnumTextValue("ONLINE_FLG")]
		[ColumnEnum("ONLINE_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		OnlineFlg = 28,
		/// <summary>
		/// PrepayFlg : 1- دفع قبل توزيع على موعد امتحان
		/// 		/// 2-دفع قبل رصد النتيجة
		/// 		/// default=0
		/// </summary>
		[EnumTextValue("PREPAY_FLG")]
		[ColumnEnum("PREPAY_FLG", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		PrepayFlg = 29,
		/// <summary>
		/// ChalngFlg : 
		/// </summary>
		[EnumTextValue("CHALNG_FLG")]
		[ColumnEnum("CHALNG_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ChalngFlg = 30,
		/// <summary>
		/// LeadToChalng : 
		/// </summary>
		[EnumTextValue("LEAD_TO_CHALNG")]
		[ColumnEnum("LEAD_TO_CHALNG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		LeadToChalng = 31,
		/// <summary>
		/// ChlangExamId : 
		/// </summary>
		[EnumTextValue("CHLANG_EXAM_ID")]
		[ColumnEnum("CHLANG_EXAM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ChlangExamId = 32
	}//End enum

	#endregion AdmCdePlacementExamColumn Enum

} // end namespace
