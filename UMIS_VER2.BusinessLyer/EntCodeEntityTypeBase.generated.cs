
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EntCodeEntityType.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ENT_CODE_ENTITY_TYPE' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EntCodeEntityTypeBase : EntityBase, IEntCodeEntityType, IEntityId<EntCodeEntityTypeKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EntCodeEntityTypeEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EntCodeEntityTypeEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EntCodeEntityTypeEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EntCodeEntityType> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EntCodeEntityTypeEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EntCodeEntityTypeEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EntCodeEntityTypeBase"/> instance.
		///</summary>
		public EntCodeEntityTypeBase()
		{
			this.entityData = new EntCodeEntityTypeEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EntCodeEntityTypeBase"/> instance.
		///</summary>
		///<param name="_entCodeEntityTypeId"></param>
		///<param name="_entTypeDscrAr"></param>
		///<param name="_entTypeDscrEn"></param>
		///<param name="_stateAbbrvAr"></param>
		///<param name="_stateAbbrvEn"></param>
		///<param name="_bylawRltdFlg"></param>
		///<param name="_subMnuIntroduction"></param>
		///<param name="_subMnuPrecondition"></param>
		///<param name="_subMnuFullfilment"></param>
		///<param name="_subMnuPolicies">مؤشر لائحة السياسات</param>
		///<param name="_subMnuGrading">XXXXXX</param>
		///<param name="_subMnuCoursePackage"></param>
		///<param name="_subMnuAcadPlan"></param>
		///<param name="_subMnuBylaw"></param>
		public EntCodeEntityTypeBase(System.Decimal _entCodeEntityTypeId, System.String _entTypeDscrAr, 
			System.String _entTypeDscrEn, System.String _stateAbbrvAr, System.String _stateAbbrvEn, 
			System.Decimal _bylawRltdFlg, System.Decimal _subMnuIntroduction, System.Decimal _subMnuPrecondition, 
			System.Decimal _subMnuFullfilment, System.Decimal _subMnuPolicies, System.Decimal _subMnuGrading, 
			System.Decimal _subMnuCoursePackage, System.Decimal _subMnuAcadPlan, System.Decimal _subMnuBylaw)
		{
			this.entityData = new EntCodeEntityTypeEntityData();
			this.backupData = null;

			this.EntCodeEntityTypeId = _entCodeEntityTypeId;
			this.EntTypeDscrAr = _entTypeDscrAr;
			this.EntTypeDscrEn = _entTypeDscrEn;
			this.StateAbbrvAr = _stateAbbrvAr;
			this.StateAbbrvEn = _stateAbbrvEn;
			this.BylawRltdFlg = _bylawRltdFlg;
			this.SubMnuIntroduction = _subMnuIntroduction;
			this.SubMnuPrecondition = _subMnuPrecondition;
			this.SubMnuFullfilment = _subMnuFullfilment;
			this.SubMnuPolicies = _subMnuPolicies;
			this.SubMnuGrading = _subMnuGrading;
			this.SubMnuCoursePackage = _subMnuCoursePackage;
			this.SubMnuAcadPlan = _subMnuAcadPlan;
			this.SubMnuBylaw = _subMnuBylaw;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EntCodeEntityType"/> instance.
		///</summary>
		///<param name="_entCodeEntityTypeId"></param>
		///<param name="_entTypeDscrAr"></param>
		///<param name="_entTypeDscrEn"></param>
		///<param name="_stateAbbrvAr"></param>
		///<param name="_stateAbbrvEn"></param>
		///<param name="_bylawRltdFlg"></param>
		///<param name="_subMnuIntroduction"></param>
		///<param name="_subMnuPrecondition"></param>
		///<param name="_subMnuFullfilment"></param>
		///<param name="_subMnuPolicies">مؤشر لائحة السياسات</param>
		///<param name="_subMnuGrading">XXXXXX</param>
		///<param name="_subMnuCoursePackage"></param>
		///<param name="_subMnuAcadPlan"></param>
		///<param name="_subMnuBylaw"></param>
		public static EntCodeEntityType CreateEntCodeEntityType(System.Decimal _entCodeEntityTypeId, System.String _entTypeDscrAr, 
			System.String _entTypeDscrEn, System.String _stateAbbrvAr, System.String _stateAbbrvEn, 
			System.Decimal _bylawRltdFlg, System.Decimal _subMnuIntroduction, System.Decimal _subMnuPrecondition, 
			System.Decimal _subMnuFullfilment, System.Decimal _subMnuPolicies, System.Decimal _subMnuGrading, 
			System.Decimal _subMnuCoursePackage, System.Decimal _subMnuAcadPlan, System.Decimal _subMnuBylaw)
		{
			EntCodeEntityType newEntCodeEntityType = new EntCodeEntityType();
			newEntCodeEntityType.EntCodeEntityTypeId = _entCodeEntityTypeId;
			newEntCodeEntityType.EntTypeDscrAr = _entTypeDscrAr;
			newEntCodeEntityType.EntTypeDscrEn = _entTypeDscrEn;
			newEntCodeEntityType.StateAbbrvAr = _stateAbbrvAr;
			newEntCodeEntityType.StateAbbrvEn = _stateAbbrvEn;
			newEntCodeEntityType.BylawRltdFlg = _bylawRltdFlg;
			newEntCodeEntityType.SubMnuIntroduction = _subMnuIntroduction;
			newEntCodeEntityType.SubMnuPrecondition = _subMnuPrecondition;
			newEntCodeEntityType.SubMnuFullfilment = _subMnuFullfilment;
			newEntCodeEntityType.SubMnuPolicies = _subMnuPolicies;
			newEntCodeEntityType.SubMnuGrading = _subMnuGrading;
			newEntCodeEntityType.SubMnuCoursePackage = _subMnuCoursePackage;
			newEntCodeEntityType.SubMnuAcadPlan = _subMnuAcadPlan;
			newEntCodeEntityType.SubMnuBylaw = _subMnuBylaw;
			return newEntCodeEntityType;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EntCodeEntityTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EntCodeEntityTypeId
		{
			get
			{
				return this.entityData.EntCodeEntityTypeId; 
			}
			
			set
			{
				if (this.entityData.EntCodeEntityTypeId == value)
					return;
					
				OnColumnChanging(EntCodeEntityTypeColumn.EntCodeEntityTypeId, this.entityData.EntCodeEntityTypeId);
				this.entityData.EntCodeEntityTypeId = value;
				this.EntityId.EntCodeEntityTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCodeEntityTypeColumn.EntCodeEntityTypeId, this.entityData.EntCodeEntityTypeId);
				OnPropertyChanged("EntCodeEntityTypeId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ENT_CODE_ENTITY_TYPE_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ENT_CODE_ENTITY_TYPE_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEntCodeEntityTypeId
		{
			get { return this.entityData.OriginalEntCodeEntityTypeId; }
			set { this.entityData.OriginalEntCodeEntityTypeId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EntTypeDscrAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String EntTypeDscrAr
		{
			get
			{
				return this.entityData.EntTypeDscrAr; 
			}
			
			set
			{
				if (this.entityData.EntTypeDscrAr == value)
					return;
					
				OnColumnChanging(EntCodeEntityTypeColumn.EntTypeDscrAr, this.entityData.EntTypeDscrAr);
				this.entityData.EntTypeDscrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCodeEntityTypeColumn.EntTypeDscrAr, this.entityData.EntTypeDscrAr);
				OnPropertyChanged("EntTypeDscrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntTypeDscrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String EntTypeDscrEn
		{
			get
			{
				return this.entityData.EntTypeDscrEn; 
			}
			
			set
			{
				if (this.entityData.EntTypeDscrEn == value)
					return;
					
				OnColumnChanging(EntCodeEntityTypeColumn.EntTypeDscrEn, this.entityData.EntTypeDscrEn);
				this.entityData.EntTypeDscrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCodeEntityTypeColumn.EntTypeDscrEn, this.entityData.EntTypeDscrEn);
				OnPropertyChanged("EntTypeDscrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StateAbbrvAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String StateAbbrvAr
		{
			get
			{
				return this.entityData.StateAbbrvAr; 
			}
			
			set
			{
				if (this.entityData.StateAbbrvAr == value)
					return;
					
				OnColumnChanging(EntCodeEntityTypeColumn.StateAbbrvAr, this.entityData.StateAbbrvAr);
				this.entityData.StateAbbrvAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCodeEntityTypeColumn.StateAbbrvAr, this.entityData.StateAbbrvAr);
				OnPropertyChanged("StateAbbrvAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StateAbbrvEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String StateAbbrvEn
		{
			get
			{
				return this.entityData.StateAbbrvEn; 
			}
			
			set
			{
				if (this.entityData.StateAbbrvEn == value)
					return;
					
				OnColumnChanging(EntCodeEntityTypeColumn.StateAbbrvEn, this.entityData.StateAbbrvEn);
				this.entityData.StateAbbrvEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCodeEntityTypeColumn.StateAbbrvEn, this.entityData.StateAbbrvEn);
				OnPropertyChanged("StateAbbrvEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BylawRltdFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal BylawRltdFlg
		{
			get
			{
				return this.entityData.BylawRltdFlg; 
			}
			
			set
			{
				if (this.entityData.BylawRltdFlg == value)
					return;
					
				OnColumnChanging(EntCodeEntityTypeColumn.BylawRltdFlg, this.entityData.BylawRltdFlg);
				this.entityData.BylawRltdFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCodeEntityTypeColumn.BylawRltdFlg, this.entityData.BylawRltdFlg);
				OnPropertyChanged("BylawRltdFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SubMnuIntroduction property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SubMnuIntroduction
		{
			get
			{
				return this.entityData.SubMnuIntroduction; 
			}
			
			set
			{
				if (this.entityData.SubMnuIntroduction == value)
					return;
					
				OnColumnChanging(EntCodeEntityTypeColumn.SubMnuIntroduction, this.entityData.SubMnuIntroduction);
				this.entityData.SubMnuIntroduction = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCodeEntityTypeColumn.SubMnuIntroduction, this.entityData.SubMnuIntroduction);
				OnPropertyChanged("SubMnuIntroduction");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SubMnuPrecondition property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SubMnuPrecondition
		{
			get
			{
				return this.entityData.SubMnuPrecondition; 
			}
			
			set
			{
				if (this.entityData.SubMnuPrecondition == value)
					return;
					
				OnColumnChanging(EntCodeEntityTypeColumn.SubMnuPrecondition, this.entityData.SubMnuPrecondition);
				this.entityData.SubMnuPrecondition = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCodeEntityTypeColumn.SubMnuPrecondition, this.entityData.SubMnuPrecondition);
				OnPropertyChanged("SubMnuPrecondition");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SubMnuFullfilment property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SubMnuFullfilment
		{
			get
			{
				return this.entityData.SubMnuFullfilment; 
			}
			
			set
			{
				if (this.entityData.SubMnuFullfilment == value)
					return;
					
				OnColumnChanging(EntCodeEntityTypeColumn.SubMnuFullfilment, this.entityData.SubMnuFullfilment);
				this.entityData.SubMnuFullfilment = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCodeEntityTypeColumn.SubMnuFullfilment, this.entityData.SubMnuFullfilment);
				OnPropertyChanged("SubMnuFullfilment");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SubMnuPolicies property. 
		///		مؤشر لائحة السياسات
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"مؤشر لائحة السياسات"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SubMnuPolicies
		{
			get
			{
				return this.entityData.SubMnuPolicies; 
			}
			
			set
			{
				if (this.entityData.SubMnuPolicies == value)
					return;
					
				OnColumnChanging(EntCodeEntityTypeColumn.SubMnuPolicies, this.entityData.SubMnuPolicies);
				this.entityData.SubMnuPolicies = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCodeEntityTypeColumn.SubMnuPolicies, this.entityData.SubMnuPolicies);
				OnPropertyChanged("SubMnuPolicies");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SubMnuGrading property. 
		///		XXXXXX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"XXXXXX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SubMnuGrading
		{
			get
			{
				return this.entityData.SubMnuGrading; 
			}
			
			set
			{
				if (this.entityData.SubMnuGrading == value)
					return;
					
				OnColumnChanging(EntCodeEntityTypeColumn.SubMnuGrading, this.entityData.SubMnuGrading);
				this.entityData.SubMnuGrading = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCodeEntityTypeColumn.SubMnuGrading, this.entityData.SubMnuGrading);
				OnPropertyChanged("SubMnuGrading");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SubMnuCoursePackage property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SubMnuCoursePackage
		{
			get
			{
				return this.entityData.SubMnuCoursePackage; 
			}
			
			set
			{
				if (this.entityData.SubMnuCoursePackage == value)
					return;
					
				OnColumnChanging(EntCodeEntityTypeColumn.SubMnuCoursePackage, this.entityData.SubMnuCoursePackage);
				this.entityData.SubMnuCoursePackage = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCodeEntityTypeColumn.SubMnuCoursePackage, this.entityData.SubMnuCoursePackage);
				OnPropertyChanged("SubMnuCoursePackage");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SubMnuAcadPlan property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SubMnuAcadPlan
		{
			get
			{
				return this.entityData.SubMnuAcadPlan; 
			}
			
			set
			{
				if (this.entityData.SubMnuAcadPlan == value)
					return;
					
				OnColumnChanging(EntCodeEntityTypeColumn.SubMnuAcadPlan, this.entityData.SubMnuAcadPlan);
				this.entityData.SubMnuAcadPlan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCodeEntityTypeColumn.SubMnuAcadPlan, this.entityData.SubMnuAcadPlan);
				OnPropertyChanged("SubMnuAcadPlan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SubMnuBylaw property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SubMnuBylaw
		{
			get
			{
				return this.entityData.SubMnuBylaw; 
			}
			
			set
			{
				if (this.entityData.SubMnuBylaw == value)
					return;
					
				OnColumnChanging(EntCodeEntityTypeColumn.SubMnuBylaw, this.entityData.SubMnuBylaw);
				this.entityData.SubMnuBylaw = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntCodeEntityTypeColumn.SubMnuBylaw, this.entityData.SubMnuBylaw);
				OnPropertyChanged("SubMnuBylaw");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EdStudState objects
		///	which are related to this object through the relation FK_ED_STUD_STATE_ENT_CODE_ENTITY_TYPE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudState> EdStudStateCollection
		{
			get { return entityData.EdStudStateCollection; }
			set { entityData.EdStudStateCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntAvailPrntType objects
		///	which are related to this object through the relation FK_ENT_AVAIL_PRNT_TYPE_ENTITY_TYPE1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntAvailPrntType> EntAvailPrntTypeCollectionGetByEntCodeEntityTypePrntId
		{
			get { return entityData.EntAvailPrntTypeCollectionGetByEntCodeEntityTypePrntId; }
			set { entityData.EntAvailPrntTypeCollectionGetByEntCodeEntityTypePrntId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntIntroducMetadata objects
		///	which are related to this object through the relation FK_ENT_INTRODUC_METADATA_ENTITY_TYPE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntIntroducMetadata> EntIntroducMetadataCollection
		{
			get { return entityData.EntIntroducMetadataCollection; }
			set { entityData.EntIntroducMetadataCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntAvailPrntType objects
		///	which are related to this object through the relation FK_ENT_AVAIL_PRNT_TYPE_ENTITY_TYPE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntAvailPrntType> EntAvailPrntTypeCollectionGetByEntCodeEntityTypeId
		{
			get { return entityData.EntAvailPrntTypeCollectionGetByEntCodeEntityTypeId; }
			set { entityData.EntAvailPrntTypeCollectionGetByEntCodeEntityTypeId = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPolicyMetadata objects
		///	which are related to this object through the relation FK_ENT_POLICY_REQ_METADATA_ENTITY_TYPE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolicyMetadata> EntPolicyMetadataCollection
		{
			get { return entityData.EntPolicyMetadataCollection; }
			set { entityData.EntPolicyMetadataCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntityMain objects
		///	which are related to this object through the relation FK_ENTITY_MAIN_ENT_CODE_ENTITY_TYPE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntityMain> EntityMainCollection
		{
			get { return entityData.EntityMainCollection; }
			set { entityData.EntityMainCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPrecondMetadata objects
		///	which are related to this object through the relation FK_ENT_PRECOND_METADATA_ENTITY_TYPE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPrecondMetadata> EntPrecondMetadataCollection
		{
			get { return entityData.EntPrecondMetadataCollection; }
			set { entityData.EntPrecondMetadataCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntFullfillMetadata objects
		///	which are related to this object through the relation FK_ENT_FULLFILL_METADATA_ENTITY_TYPE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntFullfillMetadata> EntFullfillMetadataCollection
		{
			get { return entityData.EntFullfillMetadataCollection; }
			set { entityData.EntFullfillMetadataCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudStateTemp objects
		///	which are related to this object through the relation FK_ED_STUD_STATE_TEMP_ENT_CODE_ENTITY_TYPE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudStateTemp> EdStudStateTempCollection
		{
			get { return entityData.EdStudStateTempCollection; }
			set { entityData.EdStudStateTempCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntGradingMetadata objects
		///	which are related to this object through the relation FK_ENT_GRADING_METADATA_ENTITY_TYPE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntGradingMetadata> EntGradingMetadataCollection
		{
			get { return entityData.EntGradingMetadataCollection; }
			set { entityData.EntGradingMetadataCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("EntTypeDscrAr", "Ent Type Dscr Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EntTypeDscrAr", "Ent Type Dscr Ar", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EntTypeDscrEn", "Ent Type Dscr En", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("StateAbbrvAr", "State Abbrv Ar", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("StateAbbrvEn", "State Abbrv En", 10));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ENT_CODE_ENTITY_TYPE"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ENT_CODE_ENTITY_TYPE_ID", "ENT_TYPE_DSCR_AR", "ENT_TYPE_DSCR_EN", "STATE_ABBRV_AR", "STATE_ABBRV_EN", "BYLAW_RLTD_FLG", "SUB_MNU_INTRODUCTION", "SUB_MNU_PRECONDITION", "SUB_MNU_FULLFILMENT", "SUB_MNU_POLICIES", "SUB_MNU_GRADING", "SUB_MNU_COURSE_PACKAGE", "SUB_MNU_ACAD_PLAN", "SUB_MNU_BYLAW"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EntCodeEntityTypeEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EntCodeEntityType) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EntCodeEntityType>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EntCodeEntityType);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EntCodeEntityType Entity 
		///</summary>
		protected virtual EntCodeEntityType Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EntCodeEntityType copy = new EntCodeEntityType();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EntCodeEntityTypeId = this.EntCodeEntityTypeId;
					copy.OriginalEntCodeEntityTypeId = this.OriginalEntCodeEntityTypeId;
				copy.EntTypeDscrAr = this.EntTypeDscrAr;
				copy.EntTypeDscrEn = this.EntTypeDscrEn;
				copy.StateAbbrvAr = this.StateAbbrvAr;
				copy.StateAbbrvEn = this.StateAbbrvEn;
				copy.BylawRltdFlg = this.BylawRltdFlg;
				copy.SubMnuIntroduction = this.SubMnuIntroduction;
				copy.SubMnuPrecondition = this.SubMnuPrecondition;
				copy.SubMnuFullfilment = this.SubMnuFullfilment;
				copy.SubMnuPolicies = this.SubMnuPolicies;
				copy.SubMnuGrading = this.SubMnuGrading;
				copy.SubMnuCoursePackage = this.SubMnuCoursePackage;
				copy.SubMnuAcadPlan = this.SubMnuAcadPlan;
				copy.SubMnuBylaw = this.SubMnuBylaw;
			
		
			//deep copy nested objects
			copy.EdStudStateCollection = (TList<EdStudState>) MakeCopyOf(this.EdStudStateCollection, existingCopies); 
			copy.EntAvailPrntTypeCollectionGetByEntCodeEntityTypePrntId = (TList<EntAvailPrntType>) MakeCopyOf(this.EntAvailPrntTypeCollectionGetByEntCodeEntityTypePrntId, existingCopies); 
			copy.EntIntroducMetadataCollection = (TList<EntIntroducMetadata>) MakeCopyOf(this.EntIntroducMetadataCollection, existingCopies); 
			copy.EntAvailPrntTypeCollectionGetByEntCodeEntityTypeId = (TList<EntAvailPrntType>) MakeCopyOf(this.EntAvailPrntTypeCollectionGetByEntCodeEntityTypeId, existingCopies); 
			copy.EntPolicyMetadataCollection = (TList<EntPolicyMetadata>) MakeCopyOf(this.EntPolicyMetadataCollection, existingCopies); 
			copy.EntityMainCollection = (TList<EntityMain>) MakeCopyOf(this.EntityMainCollection, existingCopies); 
			copy.EntPrecondMetadataCollection = (TList<EntPrecondMetadata>) MakeCopyOf(this.EntPrecondMetadataCollection, existingCopies); 
			copy.EntFullfillMetadataCollection = (TList<EntFullfillMetadata>) MakeCopyOf(this.EntFullfillMetadataCollection, existingCopies); 
			copy.EdStudStateTempCollection = (TList<EdStudStateTemp>) MakeCopyOf(this.EdStudStateTempCollection, existingCopies); 
			copy.EntGradingMetadataCollection = (TList<EntGradingMetadata>) MakeCopyOf(this.EntGradingMetadataCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EntCodeEntityType Entity 
		///</summary>
		public virtual EntCodeEntityType Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EntCodeEntityType Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EntCodeEntityType DeepCopy()
		{
			return EntityHelper.Clone<EntCodeEntityType>(this as EntCodeEntityType);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EntCodeEntityTypeEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EntCodeEntityTypeEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EntCodeEntityTypeEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EntCodeEntityTypeColumn column)
		{
			switch(column)
			{
					case EntCodeEntityTypeColumn.EntCodeEntityTypeId:
					return entityData.EntCodeEntityTypeId != _originalData.EntCodeEntityTypeId;
					case EntCodeEntityTypeColumn.EntTypeDscrAr:
					return entityData.EntTypeDscrAr != _originalData.EntTypeDscrAr;
					case EntCodeEntityTypeColumn.EntTypeDscrEn:
					return entityData.EntTypeDscrEn != _originalData.EntTypeDscrEn;
					case EntCodeEntityTypeColumn.StateAbbrvAr:
					return entityData.StateAbbrvAr != _originalData.StateAbbrvAr;
					case EntCodeEntityTypeColumn.StateAbbrvEn:
					return entityData.StateAbbrvEn != _originalData.StateAbbrvEn;
					case EntCodeEntityTypeColumn.BylawRltdFlg:
					return entityData.BylawRltdFlg != _originalData.BylawRltdFlg;
					case EntCodeEntityTypeColumn.SubMnuIntroduction:
					return entityData.SubMnuIntroduction != _originalData.SubMnuIntroduction;
					case EntCodeEntityTypeColumn.SubMnuPrecondition:
					return entityData.SubMnuPrecondition != _originalData.SubMnuPrecondition;
					case EntCodeEntityTypeColumn.SubMnuFullfilment:
					return entityData.SubMnuFullfilment != _originalData.SubMnuFullfilment;
					case EntCodeEntityTypeColumn.SubMnuPolicies:
					return entityData.SubMnuPolicies != _originalData.SubMnuPolicies;
					case EntCodeEntityTypeColumn.SubMnuGrading:
					return entityData.SubMnuGrading != _originalData.SubMnuGrading;
					case EntCodeEntityTypeColumn.SubMnuCoursePackage:
					return entityData.SubMnuCoursePackage != _originalData.SubMnuCoursePackage;
					case EntCodeEntityTypeColumn.SubMnuAcadPlan:
					return entityData.SubMnuAcadPlan != _originalData.SubMnuAcadPlan;
					case EntCodeEntityTypeColumn.SubMnuBylaw:
					return entityData.SubMnuBylaw != _originalData.SubMnuBylaw;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EntCodeEntityTypeColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EntCodeEntityTypeId != _originalData.EntCodeEntityTypeId;
			result = result || entityData.EntTypeDscrAr != _originalData.EntTypeDscrAr;
			result = result || entityData.EntTypeDscrEn != _originalData.EntTypeDscrEn;
			result = result || entityData.StateAbbrvAr != _originalData.StateAbbrvAr;
			result = result || entityData.StateAbbrvEn != _originalData.StateAbbrvEn;
			result = result || entityData.BylawRltdFlg != _originalData.BylawRltdFlg;
			result = result || entityData.SubMnuIntroduction != _originalData.SubMnuIntroduction;
			result = result || entityData.SubMnuPrecondition != _originalData.SubMnuPrecondition;
			result = result || entityData.SubMnuFullfilment != _originalData.SubMnuFullfilment;
			result = result || entityData.SubMnuPolicies != _originalData.SubMnuPolicies;
			result = result || entityData.SubMnuGrading != _originalData.SubMnuGrading;
			result = result || entityData.SubMnuCoursePackage != _originalData.SubMnuCoursePackage;
			result = result || entityData.SubMnuAcadPlan != _originalData.SubMnuAcadPlan;
			result = result || entityData.SubMnuBylaw != _originalData.SubMnuBylaw;
			return result;
		}	
		
		///<summary>
		///  Returns a EntCodeEntityType Entity with the original data.
		///</summary>
		public EntCodeEntityType GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEntCodeEntityType(
				_originalData.EntCodeEntityTypeId,
				_originalData.EntTypeDscrAr,
				_originalData.EntTypeDscrEn,
				_originalData.StateAbbrvAr,
				_originalData.StateAbbrvEn,
				_originalData.BylawRltdFlg,
				_originalData.SubMnuIntroduction,
				_originalData.SubMnuPrecondition,
				_originalData.SubMnuFullfilment,
				_originalData.SubMnuPolicies,
				_originalData.SubMnuGrading,
				_originalData.SubMnuCoursePackage,
				_originalData.SubMnuAcadPlan,
				_originalData.SubMnuBylaw
				);
				
			return (EntCodeEntityType)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EntCodeEntityTypeBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EntCodeEntityTypeBase)
				return ValueEquals(this, (EntCodeEntityTypeBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EntCodeEntityTypeBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EntCodeEntityTypeId.GetHashCode() ^ 
					this.EntTypeDscrAr.GetHashCode() ^ 
					((this.EntTypeDscrEn == null) ? string.Empty : this.EntTypeDscrEn.ToString()).GetHashCode() ^ 
					((this.StateAbbrvAr == null) ? string.Empty : this.StateAbbrvAr.ToString()).GetHashCode() ^ 
					((this.StateAbbrvEn == null) ? string.Empty : this.StateAbbrvEn.ToString()).GetHashCode() ^ 
					this.BylawRltdFlg.GetHashCode() ^ 
					this.SubMnuIntroduction.GetHashCode() ^ 
					this.SubMnuPrecondition.GetHashCode() ^ 
					this.SubMnuFullfilment.GetHashCode() ^ 
					this.SubMnuPolicies.GetHashCode() ^ 
					this.SubMnuGrading.GetHashCode() ^ 
					this.SubMnuCoursePackage.GetHashCode() ^ 
					this.SubMnuAcadPlan.GetHashCode() ^ 
					this.SubMnuBylaw.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EntCodeEntityTypeBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EntCodeEntityTypeBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EntCodeEntityTypeBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EntCodeEntityTypeBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EntCodeEntityTypeBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EntCodeEntityTypeBase Object1, EntCodeEntityTypeBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EntCodeEntityTypeId != Object2.EntCodeEntityTypeId)
				equal = false;
			if (Object1.EntTypeDscrAr != Object2.EntTypeDscrAr)
				equal = false;
			if ( Object1.EntTypeDscrEn != null && Object2.EntTypeDscrEn != null )
			{
				if (Object1.EntTypeDscrEn != Object2.EntTypeDscrEn)
					equal = false;
			}
			else if (Object1.EntTypeDscrEn == null ^ Object2.EntTypeDscrEn == null )
			{
				equal = false;
			}
			if ( Object1.StateAbbrvAr != null && Object2.StateAbbrvAr != null )
			{
				if (Object1.StateAbbrvAr != Object2.StateAbbrvAr)
					equal = false;
			}
			else if (Object1.StateAbbrvAr == null ^ Object2.StateAbbrvAr == null )
			{
				equal = false;
			}
			if ( Object1.StateAbbrvEn != null && Object2.StateAbbrvEn != null )
			{
				if (Object1.StateAbbrvEn != Object2.StateAbbrvEn)
					equal = false;
			}
			else if (Object1.StateAbbrvEn == null ^ Object2.StateAbbrvEn == null )
			{
				equal = false;
			}
			if (Object1.BylawRltdFlg != Object2.BylawRltdFlg)
				equal = false;
			if (Object1.SubMnuIntroduction != Object2.SubMnuIntroduction)
				equal = false;
			if (Object1.SubMnuPrecondition != Object2.SubMnuPrecondition)
				equal = false;
			if (Object1.SubMnuFullfilment != Object2.SubMnuFullfilment)
				equal = false;
			if (Object1.SubMnuPolicies != Object2.SubMnuPolicies)
				equal = false;
			if (Object1.SubMnuGrading != Object2.SubMnuGrading)
				equal = false;
			if (Object1.SubMnuCoursePackage != Object2.SubMnuCoursePackage)
				equal = false;
			if (Object1.SubMnuAcadPlan != Object2.SubMnuAcadPlan)
				equal = false;
			if (Object1.SubMnuBylaw != Object2.SubMnuBylaw)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EntCodeEntityTypeBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EntCodeEntityTypeComparer GetComparer()
        {
            return new EntCodeEntityTypeComparer();
        }
        */

        // Comparer delegates back to EntCodeEntityType
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EntCodeEntityType rhs, EntCodeEntityTypeColumn which)
        {
            switch (which)
            {
            	
            	
            	case EntCodeEntityTypeColumn.EntCodeEntityTypeId:
            		return this.EntCodeEntityTypeId.CompareTo(rhs.EntCodeEntityTypeId);
            		
            		                 
            	
            	
            	case EntCodeEntityTypeColumn.EntTypeDscrAr:
            		return this.EntTypeDscrAr.CompareTo(rhs.EntTypeDscrAr);
            		
            		                 
            	
            	
            	case EntCodeEntityTypeColumn.EntTypeDscrEn:
            		return this.EntTypeDscrEn.CompareTo(rhs.EntTypeDscrEn);
            		
            		                 
            	
            	
            	case EntCodeEntityTypeColumn.StateAbbrvAr:
            		return this.StateAbbrvAr.CompareTo(rhs.StateAbbrvAr);
            		
            		                 
            	
            	
            	case EntCodeEntityTypeColumn.StateAbbrvEn:
            		return this.StateAbbrvEn.CompareTo(rhs.StateAbbrvEn);
            		
            		                 
            	
            	
            	case EntCodeEntityTypeColumn.BylawRltdFlg:
            		return this.BylawRltdFlg.CompareTo(rhs.BylawRltdFlg);
            		
            		                 
            	
            	
            	case EntCodeEntityTypeColumn.SubMnuIntroduction:
            		return this.SubMnuIntroduction.CompareTo(rhs.SubMnuIntroduction);
            		
            		                 
            	
            	
            	case EntCodeEntityTypeColumn.SubMnuPrecondition:
            		return this.SubMnuPrecondition.CompareTo(rhs.SubMnuPrecondition);
            		
            		                 
            	
            	
            	case EntCodeEntityTypeColumn.SubMnuFullfilment:
            		return this.SubMnuFullfilment.CompareTo(rhs.SubMnuFullfilment);
            		
            		                 
            	
            	
            	case EntCodeEntityTypeColumn.SubMnuPolicies:
            		return this.SubMnuPolicies.CompareTo(rhs.SubMnuPolicies);
            		
            		                 
            	
            	
            	case EntCodeEntityTypeColumn.SubMnuGrading:
            		return this.SubMnuGrading.CompareTo(rhs.SubMnuGrading);
            		
            		                 
            	
            	
            	case EntCodeEntityTypeColumn.SubMnuCoursePackage:
            		return this.SubMnuCoursePackage.CompareTo(rhs.SubMnuCoursePackage);
            		
            		                 
            	
            	
            	case EntCodeEntityTypeColumn.SubMnuAcadPlan:
            		return this.SubMnuAcadPlan.CompareTo(rhs.SubMnuAcadPlan);
            		
            		                 
            	
            	
            	case EntCodeEntityTypeColumn.SubMnuBylaw:
            		return this.SubMnuBylaw.CompareTo(rhs.SubMnuBylaw);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EntCodeEntityTypeKey> Members
		
		// member variable for the EntityId property
		private EntCodeEntityTypeKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EntCodeEntityTypeKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EntCodeEntityTypeKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EntCodeEntityType")
					.Append("|").Append( this.EntCodeEntityTypeId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{15}{14}- EntCodeEntityTypeId: {0}{14}- EntTypeDscrAr: {1}{14}- EntTypeDscrEn: {2}{14}- StateAbbrvAr: {3}{14}- StateAbbrvEn: {4}{14}- BylawRltdFlg: {5}{14}- SubMnuIntroduction: {6}{14}- SubMnuPrecondition: {7}{14}- SubMnuFullfilment: {8}{14}- SubMnuPolicies: {9}{14}- SubMnuGrading: {10}{14}- SubMnuCoursePackage: {11}{14}- SubMnuAcadPlan: {12}{14}- SubMnuBylaw: {13}{14}{16}", 
				this.EntCodeEntityTypeId,
				this.EntTypeDscrAr,
				(this.EntTypeDscrEn == null) ? string.Empty : this.EntTypeDscrEn.ToString(),
				(this.StateAbbrvAr == null) ? string.Empty : this.StateAbbrvAr.ToString(),
				(this.StateAbbrvEn == null) ? string.Empty : this.StateAbbrvEn.ToString(),
				this.BylawRltdFlg,
				this.SubMnuIntroduction,
				this.SubMnuPrecondition,
				this.SubMnuFullfilment,
				this.SubMnuPolicies,
				this.SubMnuGrading,
				this.SubMnuCoursePackage,
				this.SubMnuAcadPlan,
				this.SubMnuBylaw,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ENT_CODE_ENTITY_TYPE' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EntCodeEntityTypeEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ENT_CODE_ENTITY_TYPE_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ENT_CODE_ENTITY_TYPE"</remarks>
		public System.Decimal EntCodeEntityTypeId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEntCodeEntityTypeId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ENT_TYPE_DSCR_AR : 
		/// </summary>
		public System.String		  EntTypeDscrAr = string.Empty;
		
		/// <summary>
		/// ENT_TYPE_DSCR_EN : 
		/// </summary>
		public System.String		  EntTypeDscrEn = null;
		
		/// <summary>
		/// STATE_ABBRV_AR : 
		/// </summary>
		public System.String		  StateAbbrvAr = null;
		
		/// <summary>
		/// STATE_ABBRV_EN : 
		/// </summary>
		public System.String		  StateAbbrvEn = null;
		
		/// <summary>
		/// BYLAW_RLTD_FLG : 
		/// </summary>
		public System.Decimal		  BylawRltdFlg = 0.0m;
		
		/// <summary>
		/// SUB_MNU_INTRODUCTION : 
		/// </summary>
		public System.Decimal		  SubMnuIntroduction = 0.0m;
		
		/// <summary>
		/// SUB_MNU_PRECONDITION : 
		/// </summary>
		public System.Decimal		  SubMnuPrecondition = 0.0m;
		
		/// <summary>
		/// SUB_MNU_FULLFILMENT : 
		/// </summary>
		public System.Decimal		  SubMnuFullfilment = 0.0m;
		
		/// <summary>
		/// SUB_MNU_POLICIES : مؤشر لائحة السياسات
		/// </summary>
		public System.Decimal		  SubMnuPolicies = 0.0m;
		
		/// <summary>
		/// SUB_MNU_GRADING : XXXXXX
		/// </summary>
		public System.Decimal		  SubMnuGrading = 0.0m;
		
		/// <summary>
		/// SUB_MNU_COURSE_PACKAGE : 
		/// </summary>
		public System.Decimal		  SubMnuCoursePackage = 0.0m;
		
		/// <summary>
		/// SUB_MNU_ACAD_PLAN : 
		/// </summary>
		public System.Decimal		  SubMnuAcadPlan = 0.0m;
		
		/// <summary>
		/// SUB_MNU_BYLAW : 
		/// </summary>
		public System.Decimal		  SubMnuBylaw = 0.0m;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EdStudStateCollection
		
		private TList<EdStudState> _edStudStateEntCodeEntityTypeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudStateEntCodeEntityTypeId
		/// </summary>
		
		public TList<EdStudState> EdStudStateCollection
		{
			get
			{
				if (_edStudStateEntCodeEntityTypeId == null)
				{
				_edStudStateEntCodeEntityTypeId = new TList<EdStudState>();
				}
	
				return _edStudStateEntCodeEntityTypeId;
			}
			set { _edStudStateEntCodeEntityTypeId = value; }
		}
		
		#endregion

		#region EntAvailPrntTypeCollectionGetByEntCodeEntityTypePrntId
		
		private TList<EntAvailPrntType> _entAvailPrntTypeEntCodeEntityTypePrntIdGetByEntCodeEntityTypePrntId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entAvailPrntTypeEntCodeEntityTypePrntIdGetByEntCodeEntityTypePrntId
		/// </summary>
		
		public TList<EntAvailPrntType> EntAvailPrntTypeCollectionGetByEntCodeEntityTypePrntId
		{
			get
			{
				if (_entAvailPrntTypeEntCodeEntityTypePrntIdGetByEntCodeEntityTypePrntId == null)
				{
				_entAvailPrntTypeEntCodeEntityTypePrntIdGetByEntCodeEntityTypePrntId = new TList<EntAvailPrntType>();
				}
	
				return _entAvailPrntTypeEntCodeEntityTypePrntIdGetByEntCodeEntityTypePrntId;
			}
			set { _entAvailPrntTypeEntCodeEntityTypePrntIdGetByEntCodeEntityTypePrntId = value; }
		}
		
		#endregion

		#region EntIntroducMetadataCollection
		
		private TList<EntIntroducMetadata> _entIntroducMetadataEntCodeEntityTypeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entIntroducMetadataEntCodeEntityTypeId
		/// </summary>
		
		public TList<EntIntroducMetadata> EntIntroducMetadataCollection
		{
			get
			{
				if (_entIntroducMetadataEntCodeEntityTypeId == null)
				{
				_entIntroducMetadataEntCodeEntityTypeId = new TList<EntIntroducMetadata>();
				}
	
				return _entIntroducMetadataEntCodeEntityTypeId;
			}
			set { _entIntroducMetadataEntCodeEntityTypeId = value; }
		}
		
		#endregion

		#region EntAvailPrntTypeCollectionGetByEntCodeEntityTypeId
		
		private TList<EntAvailPrntType> _entAvailPrntTypeEntCodeEntityTypePrntIdGetByEntCodeEntityTypeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entAvailPrntTypeEntCodeEntityTypePrntIdGetByEntCodeEntityTypeId
		/// </summary>
		
		public TList<EntAvailPrntType> EntAvailPrntTypeCollectionGetByEntCodeEntityTypeId
		{
			get
			{
				if (_entAvailPrntTypeEntCodeEntityTypePrntIdGetByEntCodeEntityTypeId == null)
				{
				_entAvailPrntTypeEntCodeEntityTypePrntIdGetByEntCodeEntityTypeId = new TList<EntAvailPrntType>();
				}
	
				return _entAvailPrntTypeEntCodeEntityTypePrntIdGetByEntCodeEntityTypeId;
			}
			set { _entAvailPrntTypeEntCodeEntityTypePrntIdGetByEntCodeEntityTypeId = value; }
		}
		
		#endregion

		#region EntPolicyMetadataCollection
		
		private TList<EntPolicyMetadata> _entPolicyMetadataEntCodeEntityTypeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolicyMetadataEntCodeEntityTypeId
		/// </summary>
		
		public TList<EntPolicyMetadata> EntPolicyMetadataCollection
		{
			get
			{
				if (_entPolicyMetadataEntCodeEntityTypeId == null)
				{
				_entPolicyMetadataEntCodeEntityTypeId = new TList<EntPolicyMetadata>();
				}
	
				return _entPolicyMetadataEntCodeEntityTypeId;
			}
			set { _entPolicyMetadataEntCodeEntityTypeId = value; }
		}
		
		#endregion

		#region EntityMainCollection
		
		private TList<EntityMain> _entityMainEntCodeEntityTypeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entityMainEntCodeEntityTypeId
		/// </summary>
		
		public TList<EntityMain> EntityMainCollection
		{
			get
			{
				if (_entityMainEntCodeEntityTypeId == null)
				{
				_entityMainEntCodeEntityTypeId = new TList<EntityMain>();
				}
	
				return _entityMainEntCodeEntityTypeId;
			}
			set { _entityMainEntCodeEntityTypeId = value; }
		}
		
		#endregion

		#region EntPrecondMetadataCollection
		
		private TList<EntPrecondMetadata> _entPrecondMetadataEntCodeEntityTypeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPrecondMetadataEntCodeEntityTypeId
		/// </summary>
		
		public TList<EntPrecondMetadata> EntPrecondMetadataCollection
		{
			get
			{
				if (_entPrecondMetadataEntCodeEntityTypeId == null)
				{
				_entPrecondMetadataEntCodeEntityTypeId = new TList<EntPrecondMetadata>();
				}
	
				return _entPrecondMetadataEntCodeEntityTypeId;
			}
			set { _entPrecondMetadataEntCodeEntityTypeId = value; }
		}
		
		#endregion

		#region EntFullfillMetadataCollection
		
		private TList<EntFullfillMetadata> _entFullfillMetadataEntCodeEntityTypeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entFullfillMetadataEntCodeEntityTypeId
		/// </summary>
		
		public TList<EntFullfillMetadata> EntFullfillMetadataCollection
		{
			get
			{
				if (_entFullfillMetadataEntCodeEntityTypeId == null)
				{
				_entFullfillMetadataEntCodeEntityTypeId = new TList<EntFullfillMetadata>();
				}
	
				return _entFullfillMetadataEntCodeEntityTypeId;
			}
			set { _entFullfillMetadataEntCodeEntityTypeId = value; }
		}
		
		#endregion

		#region EdStudStateTempCollection
		
		private TList<EdStudStateTemp> _edStudStateTempEntCodeEntityTypeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudStateTempEntCodeEntityTypeId
		/// </summary>
		
		public TList<EdStudStateTemp> EdStudStateTempCollection
		{
			get
			{
				if (_edStudStateTempEntCodeEntityTypeId == null)
				{
				_edStudStateTempEntCodeEntityTypeId = new TList<EdStudStateTemp>();
				}
	
				return _edStudStateTempEntCodeEntityTypeId;
			}
			set { _edStudStateTempEntCodeEntityTypeId = value; }
		}
		
		#endregion

		#region EntGradingMetadataCollection
		
		private TList<EntGradingMetadata> _entGradingMetadataEntCodeEntityTypeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entGradingMetadataEntCodeEntityTypeId
		/// </summary>
		
		public TList<EntGradingMetadata> EntGradingMetadataCollection
		{
			get
			{
				if (_entGradingMetadataEntCodeEntityTypeId == null)
				{
				_entGradingMetadataEntCodeEntityTypeId = new TList<EntGradingMetadata>();
				}
	
				return _entGradingMetadataEntCodeEntityTypeId;
			}
			set { _entGradingMetadataEntCodeEntityTypeId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EntCodeEntityTypeEntityData _tmp = new EntCodeEntityTypeEntityData();
						
			_tmp.EntCodeEntityTypeId = this.EntCodeEntityTypeId;
			_tmp.OriginalEntCodeEntityTypeId = this.OriginalEntCodeEntityTypeId;
			
			_tmp.EntTypeDscrAr = this.EntTypeDscrAr;
			_tmp.EntTypeDscrEn = this.EntTypeDscrEn;
			_tmp.StateAbbrvAr = this.StateAbbrvAr;
			_tmp.StateAbbrvEn = this.StateAbbrvEn;
			_tmp.BylawRltdFlg = this.BylawRltdFlg;
			_tmp.SubMnuIntroduction = this.SubMnuIntroduction;
			_tmp.SubMnuPrecondition = this.SubMnuPrecondition;
			_tmp.SubMnuFullfilment = this.SubMnuFullfilment;
			_tmp.SubMnuPolicies = this.SubMnuPolicies;
			_tmp.SubMnuGrading = this.SubMnuGrading;
			_tmp.SubMnuCoursePackage = this.SubMnuCoursePackage;
			_tmp.SubMnuAcadPlan = this.SubMnuAcadPlan;
			_tmp.SubMnuBylaw = this.SubMnuBylaw;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._edStudStateEntCodeEntityTypeId != null)
				_tmp.EdStudStateCollection = (TList<EdStudState>) MakeCopyOf(this.EdStudStateCollection); 
			if (this._entAvailPrntTypeEntCodeEntityTypePrntIdGetByEntCodeEntityTypePrntId != null)
				_tmp.EntAvailPrntTypeCollectionGetByEntCodeEntityTypePrntId = (TList<EntAvailPrntType>) MakeCopyOf(this.EntAvailPrntTypeCollectionGetByEntCodeEntityTypePrntId); 
			if (this._entIntroducMetadataEntCodeEntityTypeId != null)
				_tmp.EntIntroducMetadataCollection = (TList<EntIntroducMetadata>) MakeCopyOf(this.EntIntroducMetadataCollection); 
			if (this._entAvailPrntTypeEntCodeEntityTypePrntIdGetByEntCodeEntityTypeId != null)
				_tmp.EntAvailPrntTypeCollectionGetByEntCodeEntityTypeId = (TList<EntAvailPrntType>) MakeCopyOf(this.EntAvailPrntTypeCollectionGetByEntCodeEntityTypeId); 
			if (this._entPolicyMetadataEntCodeEntityTypeId != null)
				_tmp.EntPolicyMetadataCollection = (TList<EntPolicyMetadata>) MakeCopyOf(this.EntPolicyMetadataCollection); 
			if (this._entityMainEntCodeEntityTypeId != null)
				_tmp.EntityMainCollection = (TList<EntityMain>) MakeCopyOf(this.EntityMainCollection); 
			if (this._entPrecondMetadataEntCodeEntityTypeId != null)
				_tmp.EntPrecondMetadataCollection = (TList<EntPrecondMetadata>) MakeCopyOf(this.EntPrecondMetadataCollection); 
			if (this._entFullfillMetadataEntCodeEntityTypeId != null)
				_tmp.EntFullfillMetadataCollection = (TList<EntFullfillMetadata>) MakeCopyOf(this.EntFullfillMetadataCollection); 
			if (this._edStudStateTempEntCodeEntityTypeId != null)
				_tmp.EdStudStateTempCollection = (TList<EdStudStateTemp>) MakeCopyOf(this.EdStudStateTempCollection); 
			if (this._entGradingMetadataEntCodeEntityTypeId != null)
				_tmp.EntGradingMetadataCollection = (TList<EntGradingMetadata>) MakeCopyOf(this.EntGradingMetadataCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EntCodeEntityTypeEntityData _tmp = new EntCodeEntityTypeEntityData();
						
			_tmp.EntCodeEntityTypeId = this.EntCodeEntityTypeId;
			_tmp.OriginalEntCodeEntityTypeId = this.OriginalEntCodeEntityTypeId;
			
			_tmp.EntTypeDscrAr = this.EntTypeDscrAr;
			_tmp.EntTypeDscrEn = this.EntTypeDscrEn;
			_tmp.StateAbbrvAr = this.StateAbbrvAr;
			_tmp.StateAbbrvEn = this.StateAbbrvEn;
			_tmp.BylawRltdFlg = this.BylawRltdFlg;
			_tmp.SubMnuIntroduction = this.SubMnuIntroduction;
			_tmp.SubMnuPrecondition = this.SubMnuPrecondition;
			_tmp.SubMnuFullfilment = this.SubMnuFullfilment;
			_tmp.SubMnuPolicies = this.SubMnuPolicies;
			_tmp.SubMnuGrading = this.SubMnuGrading;
			_tmp.SubMnuCoursePackage = this.SubMnuCoursePackage;
			_tmp.SubMnuAcadPlan = this.SubMnuAcadPlan;
			_tmp.SubMnuBylaw = this.SubMnuBylaw;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EdStudStateCollection = (TList<EdStudState>) MakeCopyOf(this.EdStudStateCollection, existingCopies); 
			_tmp.EntAvailPrntTypeCollectionGetByEntCodeEntityTypePrntId = (TList<EntAvailPrntType>) MakeCopyOf(this.EntAvailPrntTypeCollectionGetByEntCodeEntityTypePrntId, existingCopies); 
			_tmp.EntIntroducMetadataCollection = (TList<EntIntroducMetadata>) MakeCopyOf(this.EntIntroducMetadataCollection, existingCopies); 
			_tmp.EntAvailPrntTypeCollectionGetByEntCodeEntityTypeId = (TList<EntAvailPrntType>) MakeCopyOf(this.EntAvailPrntTypeCollectionGetByEntCodeEntityTypeId, existingCopies); 
			_tmp.EntPolicyMetadataCollection = (TList<EntPolicyMetadata>) MakeCopyOf(this.EntPolicyMetadataCollection, existingCopies); 
			_tmp.EntityMainCollection = (TList<EntityMain>) MakeCopyOf(this.EntityMainCollection, existingCopies); 
			_tmp.EntPrecondMetadataCollection = (TList<EntPrecondMetadata>) MakeCopyOf(this.EntPrecondMetadataCollection, existingCopies); 
			_tmp.EntFullfillMetadataCollection = (TList<EntFullfillMetadata>) MakeCopyOf(this.EntFullfillMetadataCollection, existingCopies); 
			_tmp.EdStudStateTempCollection = (TList<EdStudStateTemp>) MakeCopyOf(this.EdStudStateTempCollection, existingCopies); 
			_tmp.EntGradingMetadataCollection = (TList<EntGradingMetadata>) MakeCopyOf(this.EntGradingMetadataCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntCodeEntityTypeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EntCodeEntityTypeColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntCodeEntityTypeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EntCodeEntityTypeColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntCodeEntityTypeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EntCodeEntityTypeColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EntCodeEntityTypeEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EntCodeEntityTypeEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntCodeEntityTypeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EntCodeEntityTypeColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EntCodeEntityTypeEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EntCodeEntityTypeEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EntCodeEntityTypeEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EntCodeEntityType"/> object.
	/// </remarks>
	public class EntCodeEntityTypeEventArgs : System.EventArgs
	{
		private EntCodeEntityTypeColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EntCodeEntityTypeEventArgs class.
		///</summary>
		public EntCodeEntityTypeEventArgs(EntCodeEntityTypeColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EntCodeEntityTypeEventArgs class.
		///</summary>
		public EntCodeEntityTypeEventArgs(EntCodeEntityTypeColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EntCodeEntityTypeColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EntCodeEntityTypeColumn" />
		public EntCodeEntityTypeColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EntCodeEntityType related events.
	///</summary>
	public delegate void EntCodeEntityTypeEventHandler(object sender, EntCodeEntityTypeEventArgs e);
	
	#region EntCodeEntityTypeComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EntCodeEntityTypeComparer : System.Collections.Generic.IComparer<EntCodeEntityType>
	{
		EntCodeEntityTypeColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EntCodeEntityTypeComparer"/> class.
        /// </summary>
		public EntCodeEntityTypeComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EntCodeEntityTypeComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EntCodeEntityTypeComparer(EntCodeEntityTypeColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EntCodeEntityType"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EntCodeEntityType"/> to compare.</param>
        /// <param name="b">The second <c>EntCodeEntityType</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EntCodeEntityType a, EntCodeEntityType b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EntCodeEntityType entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EntCodeEntityType a, EntCodeEntityType b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EntCodeEntityTypeColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EntCodeEntityTypeKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EntCodeEntityType"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EntCodeEntityTypeKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EntCodeEntityTypeKey class.
		/// </summary>
		public EntCodeEntityTypeKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EntCodeEntityTypeKey class.
		/// </summary>
		public EntCodeEntityTypeKey(EntCodeEntityTypeBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EntCodeEntityTypeId = entity.EntCodeEntityTypeId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EntCodeEntityTypeKey class.
		/// </summary>
		public EntCodeEntityTypeKey(System.Decimal _entCodeEntityTypeId)
		{
			#region Init Properties

			this.EntCodeEntityTypeId = _entCodeEntityTypeId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EntCodeEntityTypeBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EntCodeEntityTypeBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EntCodeEntityTypeId property
		private System.Decimal _entCodeEntityTypeId;
		
		/// <summary>
		/// Gets or sets the EntCodeEntityTypeId property.
		/// </summary>
		public System.Decimal EntCodeEntityTypeId
		{
			get { return _entCodeEntityTypeId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EntCodeEntityTypeId = value;
				
				_entCodeEntityTypeId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EntCodeEntityTypeId = ( values["EntCodeEntityTypeId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EntCodeEntityTypeId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EntCodeEntityTypeId", EntCodeEntityTypeId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EntCodeEntityTypeId: {0}{1}",
								EntCodeEntityTypeId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EntCodeEntityTypeColumn Enum
	
	/// <summary>
	/// Enumerate the EntCodeEntityType columns.
	/// </summary>
	[Serializable]
	public enum EntCodeEntityTypeColumn : int
	{
		/// <summary>
		/// EntCodeEntityTypeId : 
		/// </summary>
		[EnumTextValue("ENT_CODE_ENTITY_TYPE_ID")]
		[ColumnEnum("ENT_CODE_ENTITY_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EntCodeEntityTypeId = 1,
		/// <summary>
		/// EntTypeDscrAr : 
		/// </summary>
		[EnumTextValue("ENT_TYPE_DSCR_AR")]
		[ColumnEnum("ENT_TYPE_DSCR_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		EntTypeDscrAr = 2,
		/// <summary>
		/// EntTypeDscrEn : 
		/// </summary>
		[EnumTextValue("ENT_TYPE_DSCR_EN")]
		[ColumnEnum("ENT_TYPE_DSCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		EntTypeDscrEn = 3,
		/// <summary>
		/// StateAbbrvAr : 
		/// </summary>
		[EnumTextValue("STATE_ABBRV_AR")]
		[ColumnEnum("STATE_ABBRV_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 10)]
		StateAbbrvAr = 4,
		/// <summary>
		/// StateAbbrvEn : 
		/// </summary>
		[EnumTextValue("STATE_ABBRV_EN")]
		[ColumnEnum("STATE_ABBRV_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 10)]
		StateAbbrvEn = 5,
		/// <summary>
		/// BylawRltdFlg : 
		/// </summary>
		[EnumTextValue("BYLAW_RLTD_FLG")]
		[ColumnEnum("BYLAW_RLTD_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		BylawRltdFlg = 6,
		/// <summary>
		/// SubMnuIntroduction : 
		/// </summary>
		[EnumTextValue("SUB_MNU_INTRODUCTION")]
		[ColumnEnum("SUB_MNU_INTRODUCTION", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SubMnuIntroduction = 7,
		/// <summary>
		/// SubMnuPrecondition : 
		/// </summary>
		[EnumTextValue("SUB_MNU_PRECONDITION")]
		[ColumnEnum("SUB_MNU_PRECONDITION", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SubMnuPrecondition = 8,
		/// <summary>
		/// SubMnuFullfilment : 
		/// </summary>
		[EnumTextValue("SUB_MNU_FULLFILMENT")]
		[ColumnEnum("SUB_MNU_FULLFILMENT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SubMnuFullfilment = 9,
		/// <summary>
		/// SubMnuPolicies : مؤشر لائحة السياسات
		/// </summary>
		[EnumTextValue("SUB_MNU_POLICIES")]
		[ColumnEnum("SUB_MNU_POLICIES", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SubMnuPolicies = 10,
		/// <summary>
		/// SubMnuGrading : XXXXXX
		/// </summary>
		[EnumTextValue("SUB_MNU_GRADING")]
		[ColumnEnum("SUB_MNU_GRADING", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SubMnuGrading = 11,
		/// <summary>
		/// SubMnuCoursePackage : 
		/// </summary>
		[EnumTextValue("SUB_MNU_COURSE_PACKAGE")]
		[ColumnEnum("SUB_MNU_COURSE_PACKAGE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SubMnuCoursePackage = 12,
		/// <summary>
		/// SubMnuAcadPlan : 
		/// </summary>
		[EnumTextValue("SUB_MNU_ACAD_PLAN")]
		[ColumnEnum("SUB_MNU_ACAD_PLAN", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SubMnuAcadPlan = 13,
		/// <summary>
		/// SubMnuBylaw : 
		/// </summary>
		[EnumTextValue("SUB_MNU_BYLAW")]
		[ColumnEnum("SUB_MNU_BYLAW", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SubMnuBylaw = 14
	}//End enum

	#endregion EntCodeEntityTypeColumn Enum

} // end namespace
