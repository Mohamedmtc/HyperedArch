
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdStudCourseRegAssess.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_STUD_COURSE_REG_ASSESS' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdStudCourseRegAssessBase : EntityBase, IEdStudCourseRegAssess, IEntityId<EdStudCourseRegAssessKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdStudCourseRegAssessEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdStudCourseRegAssessEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdStudCourseRegAssessEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdStudCourseRegAssess> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudCourseRegAssessEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudCourseRegAssessEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdStudCourseRegAssessBase"/> instance.
		///</summary>
		public EdStudCourseRegAssessBase()
		{
			this.entityData = new EdStudCourseRegAssessEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdStudCourseRegAssessBase"/> instance.
		///</summary>
		///<param name="_edStudCourseRegAssessId"></param>
		///<param name="_edStudCourseRegId"></param>
		///<param name="_edCodeCourseAssessId"></param>
		///<param name="_assessDeg"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_edCodeCourseStatusId"></param>
		///<param name="_entPolicyAssessHdrId"></param>
		///<param name="_lastDate"></param>
		///<param name="_seFormId"></param>
		///<param name="_seUserId"></param>
		///<param name="_assessRaiseMark">الدرجة المرفوعه</param>
		///<param name="_approveFlg"></param>
		///<param name="_approveDate"></param>
		public EdStudCourseRegAssessBase(System.Decimal _edStudCourseRegAssessId, System.Decimal _edStudCourseRegId, 
			System.Decimal _edCodeCourseAssessId, System.Decimal? _assessDeg, System.Decimal? _asFacultyInfoId, 
			System.Decimal? _edCodeCourseStatusId, System.Decimal? _entPolicyAssessHdrId, 
			System.DateTime? _lastDate, System.Decimal? _seFormId, System.Decimal? _seUserId, 
			System.Decimal? _assessRaiseMark, System.Boolean? _approveFlg, System.DateTime? _approveDate)
		{
			this.entityData = new EdStudCourseRegAssessEntityData();
			this.backupData = null;

			this.EdStudCourseRegAssessId = _edStudCourseRegAssessId;
			this.EdStudCourseRegId = _edStudCourseRegId;
			this.EdCodeCourseAssessId = _edCodeCourseAssessId;
			this.AssessDeg = _assessDeg;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.EdCodeCourseStatusId = _edCodeCourseStatusId;
			this.EntPolicyAssessHdrId = _entPolicyAssessHdrId;
			this.LastDate = _lastDate;
			this.SeFormId = _seFormId;
			this.SeUserId = _seUserId;
			this.AssessRaiseMark = _assessRaiseMark;
			this.ApproveFlg = _approveFlg;
			this.ApproveDate = _approveDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdStudCourseRegAssess"/> instance.
		///</summary>
		///<param name="_edStudCourseRegAssessId"></param>
		///<param name="_edStudCourseRegId"></param>
		///<param name="_edCodeCourseAssessId"></param>
		///<param name="_assessDeg"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_edCodeCourseStatusId"></param>
		///<param name="_entPolicyAssessHdrId"></param>
		///<param name="_lastDate"></param>
		///<param name="_seFormId"></param>
		///<param name="_seUserId"></param>
		///<param name="_assessRaiseMark">الدرجة المرفوعه</param>
		///<param name="_approveFlg"></param>
		///<param name="_approveDate"></param>
		public static EdStudCourseRegAssess CreateEdStudCourseRegAssess(System.Decimal _edStudCourseRegAssessId, System.Decimal _edStudCourseRegId, 
			System.Decimal _edCodeCourseAssessId, System.Decimal? _assessDeg, System.Decimal? _asFacultyInfoId, 
			System.Decimal? _edCodeCourseStatusId, System.Decimal? _entPolicyAssessHdrId, 
			System.DateTime? _lastDate, System.Decimal? _seFormId, System.Decimal? _seUserId, 
			System.Decimal? _assessRaiseMark, System.Boolean? _approveFlg, System.DateTime? _approveDate)
		{
			EdStudCourseRegAssess newEdStudCourseRegAssess = new EdStudCourseRegAssess();
			newEdStudCourseRegAssess.EdStudCourseRegAssessId = _edStudCourseRegAssessId;
			newEdStudCourseRegAssess.EdStudCourseRegId = _edStudCourseRegId;
			newEdStudCourseRegAssess.EdCodeCourseAssessId = _edCodeCourseAssessId;
			newEdStudCourseRegAssess.AssessDeg = _assessDeg;
			newEdStudCourseRegAssess.AsFacultyInfoId = _asFacultyInfoId;
			newEdStudCourseRegAssess.EdCodeCourseStatusId = _edCodeCourseStatusId;
			newEdStudCourseRegAssess.EntPolicyAssessHdrId = _entPolicyAssessHdrId;
			newEdStudCourseRegAssess.LastDate = _lastDate;
			newEdStudCourseRegAssess.SeFormId = _seFormId;
			newEdStudCourseRegAssess.SeUserId = _seUserId;
			newEdStudCourseRegAssess.AssessRaiseMark = _assessRaiseMark;
			newEdStudCourseRegAssess.ApproveFlg = _approveFlg;
			newEdStudCourseRegAssess.ApproveDate = _approveDate;
			return newEdStudCourseRegAssess;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdStudCourseRegAssessId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdStudCourseRegAssessId
		{
			get
			{
				return this.entityData.EdStudCourseRegAssessId; 
			}
			
			set
			{
				if (this.entityData.EdStudCourseRegAssessId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAssessColumn.EdStudCourseRegAssessId, this.entityData.EdStudCourseRegAssessId);
				this.entityData.EdStudCourseRegAssessId = value;
				this.EntityId.EdStudCourseRegAssessId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAssessColumn.EdStudCourseRegAssessId, this.entityData.EdStudCourseRegAssessId);
				OnPropertyChanged("EdStudCourseRegAssessId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_STUD_COURSE_REG_ASSESS_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ED_STUD_COURSE_REG_ASSESS_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdStudCourseRegAssessId
		{
			get { return this.entityData.OriginalEdStudCourseRegAssessId; }
			set { this.entityData.OriginalEdStudCourseRegAssessId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudCourseRegId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudCourseRegId
		{
			get
			{
				return this.entityData.EdStudCourseRegId; 
			}
			
			set
			{
				if (this.entityData.EdStudCourseRegId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAssessColumn.EdStudCourseRegId, this.entityData.EdStudCourseRegId);
				this.entityData.EdStudCourseRegId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAssessColumn.EdStudCourseRegId, this.entityData.EdStudCourseRegId);
				OnPropertyChanged("EdStudCourseRegId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeCourseAssessId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeCourseAssessId
		{
			get
			{
				return this.entityData.EdCodeCourseAssessId; 
			}
			
			set
			{
				if (this.entityData.EdCodeCourseAssessId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAssessColumn.EdCodeCourseAssessId, this.entityData.EdCodeCourseAssessId);
				this.entityData.EdCodeCourseAssessId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAssessColumn.EdCodeCourseAssessId, this.entityData.EdCodeCourseAssessId);
				OnPropertyChanged("EdCodeCourseAssessId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AssessDeg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAssessDegNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AssessDeg
		{
			get
			{
				return this.entityData.AssessDeg; 
			}
			
			set
			{
				if (this.entityData.AssessDeg == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAssessColumn.AssessDeg, this.entityData.AssessDeg);
				this.entityData.AssessDeg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAssessColumn.AssessDeg, this.entityData.AssessDeg);
				OnPropertyChanged("AssessDeg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAssessColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAssessColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeCourseStatusId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeCourseStatusIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeCourseStatusId
		{
			get
			{
				return this.entityData.EdCodeCourseStatusId; 
			}
			
			set
			{
				if (this.entityData.EdCodeCourseStatusId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAssessColumn.EdCodeCourseStatusId, this.entityData.EdCodeCourseStatusId);
				this.entityData.EdCodeCourseStatusId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAssessColumn.EdCodeCourseStatusId, this.entityData.EdCodeCourseStatusId);
				OnPropertyChanged("EdCodeCourseStatusId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntPolicyAssessHdrId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntPolicyAssessHdrIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntPolicyAssessHdrId
		{
			get
			{
				return this.entityData.EntPolicyAssessHdrId; 
			}
			
			set
			{
				if (this.entityData.EntPolicyAssessHdrId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAssessColumn.EntPolicyAssessHdrId, this.entityData.EntPolicyAssessHdrId);
				this.entityData.EntPolicyAssessHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAssessColumn.EntPolicyAssessHdrId, this.entityData.EntPolicyAssessHdrId);
				OnPropertyChanged("EntPolicyAssessHdrId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAssessColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAssessColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeFormId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeFormIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeFormId
		{
			get
			{
				return this.entityData.SeFormId; 
			}
			
			set
			{
				if (this.entityData.SeFormId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAssessColumn.SeFormId, this.entityData.SeFormId);
				this.entityData.SeFormId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAssessColumn.SeFormId, this.entityData.SeFormId);
				OnPropertyChanged("SeFormId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAssessColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAssessColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AssessRaiseMark property. 
		///		الدرجة المرفوعه
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAssessRaiseMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"الدرجة المرفوعه"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AssessRaiseMark
		{
			get
			{
				return this.entityData.AssessRaiseMark; 
			}
			
			set
			{
				if (this.entityData.AssessRaiseMark == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAssessColumn.AssessRaiseMark, this.entityData.AssessRaiseMark);
				this.entityData.AssessRaiseMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAssessColumn.AssessRaiseMark, this.entityData.AssessRaiseMark);
				OnPropertyChanged("AssessRaiseMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApproveFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsApproveFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ApproveFlg
		{
			get
			{
				return this.entityData.ApproveFlg; 
			}
			
			set
			{
				if (this.entityData.ApproveFlg == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAssessColumn.ApproveFlg, this.entityData.ApproveFlg);
				this.entityData.ApproveFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAssessColumn.ApproveFlg, this.entityData.ApproveFlg);
				OnPropertyChanged("ApproveFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApproveDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsApproveDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ApproveDate
		{
			get
			{
				return this.entityData.ApproveDate; 
			}
			
			set
			{
				if (this.entityData.ApproveDate == value)
					return;
					
				OnColumnChanging(EdStudCourseRegAssessColumn.ApproveDate, this.entityData.ApproveDate);
				this.entityData.ApproveDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegAssessColumn.ApproveDate, this.entityData.ApproveDate);
				OnPropertyChanged("ApproveDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseStatus"/>.
		/// </summary>
		/// <value>The source EdCodeCourseStatus for EdCodeCourseStatusId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeCourseStatus EdCodeCourseStatusIdSource
      	{
            get { return entityData.EdCodeCourseStatusIdSource; }
            set { entityData.EdCodeCourseStatusIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntPolicyAssessHdr"/>.
		/// </summary>
		/// <value>The source EntPolicyAssessHdr for EntPolicyAssessHdrId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntPolicyAssessHdr EntPolicyAssessHdrIdSource
      	{
            get { return entityData.EntPolicyAssessHdrIdSource; }
            set { entityData.EntPolicyAssessHdrIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeForm"/>.
		/// </summary>
		/// <value>The source SeForm for SeFormId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeForm SeFormIdSource
      	{
            get { return entityData.SeFormIdSource; }
            set { entityData.SeFormIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeUser SeUserIdSource
      	{
            get { return entityData.SeUserIdSource; }
            set { entityData.SeUserIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseAssess"/>.
		/// </summary>
		/// <value>The source EdCodeCourseAssess for EdCodeCourseAssessId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeCourseAssess EdCodeCourseAssessIdSource
      	{
            get { return entityData.EdCodeCourseAssessIdSource; }
            set { entityData.EdCodeCourseAssessIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStudCourseReg"/>.
		/// </summary>
		/// <value>The source EdStudCourseReg for EdStudCourseRegId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStudCourseReg EdStudCourseRegIdSource
      	{
            get { return entityData.EdStudCourseRegIdSource; }
            set { entityData.EdStudCourseRegIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_STUD_COURSE_REG_ASSESS"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_STUD_COURSE_REG_ASSESS_ID", "ED_STUD_COURSE_REG_ID", "ED_CODE_COURSE_ASSESS_ID", "ASSESS_DEG", "AS_FACULTY_INFO_ID", "ED_CODE_COURSE_STATUS_ID", "ENT_POLICY_ASSESS_HDR_ID", "LAST_DATE", "SE_FORM_ID", "SE_USER_ID", "ASSESS_RAISE_MARK", "Approve_Flg", "Approve_Date"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdStudCourseRegAssessEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdStudCourseRegAssess) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdStudCourseRegAssess>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdStudCourseRegAssess);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdStudCourseRegAssess Entity 
		///</summary>
		protected virtual EdStudCourseRegAssess Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdStudCourseRegAssess copy = new EdStudCourseRegAssess();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdStudCourseRegAssessId = this.EdStudCourseRegAssessId;
					copy.OriginalEdStudCourseRegAssessId = this.OriginalEdStudCourseRegAssessId;
				copy.EdStudCourseRegId = this.EdStudCourseRegId;
				copy.EdCodeCourseAssessId = this.EdCodeCourseAssessId;
				copy.AssessDeg = this.AssessDeg;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.EdCodeCourseStatusId = this.EdCodeCourseStatusId;
				copy.EntPolicyAssessHdrId = this.EntPolicyAssessHdrId;
				copy.LastDate = this.LastDate;
				copy.SeFormId = this.SeFormId;
				copy.SeUserId = this.SeUserId;
				copy.AssessRaiseMark = this.AssessRaiseMark;
				copy.ApproveFlg = this.ApproveFlg;
				copy.ApproveDate = this.ApproveDate;
			
			if (this.EdCodeCourseStatusIdSource != null && existingCopies.Contains(this.EdCodeCourseStatusIdSource))
				copy.EdCodeCourseStatusIdSource = existingCopies[this.EdCodeCourseStatusIdSource] as EdCodeCourseStatus;
			else
				copy.EdCodeCourseStatusIdSource = MakeCopyOf(this.EdCodeCourseStatusIdSource, existingCopies) as EdCodeCourseStatus;
			if (this.EntPolicyAssessHdrIdSource != null && existingCopies.Contains(this.EntPolicyAssessHdrIdSource))
				copy.EntPolicyAssessHdrIdSource = existingCopies[this.EntPolicyAssessHdrIdSource] as EntPolicyAssessHdr;
			else
				copy.EntPolicyAssessHdrIdSource = MakeCopyOf(this.EntPolicyAssessHdrIdSource, existingCopies) as EntPolicyAssessHdr;
			if (this.SeFormIdSource != null && existingCopies.Contains(this.SeFormIdSource))
				copy.SeFormIdSource = existingCopies[this.SeFormIdSource] as SeForm;
			else
				copy.SeFormIdSource = MakeCopyOf(this.SeFormIdSource, existingCopies) as SeForm;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				copy.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				copy.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdCodeCourseAssessIdSource != null && existingCopies.Contains(this.EdCodeCourseAssessIdSource))
				copy.EdCodeCourseAssessIdSource = existingCopies[this.EdCodeCourseAssessIdSource] as EdCodeCourseAssess;
			else
				copy.EdCodeCourseAssessIdSource = MakeCopyOf(this.EdCodeCourseAssessIdSource, existingCopies) as EdCodeCourseAssess;
			if (this.EdStudCourseRegIdSource != null && existingCopies.Contains(this.EdStudCourseRegIdSource))
				copy.EdStudCourseRegIdSource = existingCopies[this.EdStudCourseRegIdSource] as EdStudCourseReg;
			else
				copy.EdStudCourseRegIdSource = MakeCopyOf(this.EdStudCourseRegIdSource, existingCopies) as EdStudCourseReg;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdStudCourseRegAssess Entity 
		///</summary>
		public virtual EdStudCourseRegAssess Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdStudCourseRegAssess Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdStudCourseRegAssess DeepCopy()
		{
			return EntityHelper.Clone<EdStudCourseRegAssess>(this as EdStudCourseRegAssess);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdStudCourseRegAssessEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdStudCourseRegAssessEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdStudCourseRegAssessEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdStudCourseRegAssessColumn column)
		{
			switch(column)
			{
					case EdStudCourseRegAssessColumn.EdStudCourseRegAssessId:
					return entityData.EdStudCourseRegAssessId != _originalData.EdStudCourseRegAssessId;
					case EdStudCourseRegAssessColumn.EdStudCourseRegId:
					return entityData.EdStudCourseRegId != _originalData.EdStudCourseRegId;
					case EdStudCourseRegAssessColumn.EdCodeCourseAssessId:
					return entityData.EdCodeCourseAssessId != _originalData.EdCodeCourseAssessId;
					case EdStudCourseRegAssessColumn.AssessDeg:
					return entityData.AssessDeg != _originalData.AssessDeg;
					case EdStudCourseRegAssessColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case EdStudCourseRegAssessColumn.EdCodeCourseStatusId:
					return entityData.EdCodeCourseStatusId != _originalData.EdCodeCourseStatusId;
					case EdStudCourseRegAssessColumn.EntPolicyAssessHdrId:
					return entityData.EntPolicyAssessHdrId != _originalData.EntPolicyAssessHdrId;
					case EdStudCourseRegAssessColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case EdStudCourseRegAssessColumn.SeFormId:
					return entityData.SeFormId != _originalData.SeFormId;
					case EdStudCourseRegAssessColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case EdStudCourseRegAssessColumn.AssessRaiseMark:
					return entityData.AssessRaiseMark != _originalData.AssessRaiseMark;
					case EdStudCourseRegAssessColumn.ApproveFlg:
					return entityData.ApproveFlg != _originalData.ApproveFlg;
					case EdStudCourseRegAssessColumn.ApproveDate:
					return entityData.ApproveDate != _originalData.ApproveDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdStudCourseRegAssessColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdStudCourseRegAssessId != _originalData.EdStudCourseRegAssessId;
			result = result || entityData.EdStudCourseRegId != _originalData.EdStudCourseRegId;
			result = result || entityData.EdCodeCourseAssessId != _originalData.EdCodeCourseAssessId;
			result = result || entityData.AssessDeg != _originalData.AssessDeg;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.EdCodeCourseStatusId != _originalData.EdCodeCourseStatusId;
			result = result || entityData.EntPolicyAssessHdrId != _originalData.EntPolicyAssessHdrId;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.SeFormId != _originalData.SeFormId;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.AssessRaiseMark != _originalData.AssessRaiseMark;
			result = result || entityData.ApproveFlg != _originalData.ApproveFlg;
			result = result || entityData.ApproveDate != _originalData.ApproveDate;
			return result;
		}	
		
		///<summary>
		///  Returns a EdStudCourseRegAssess Entity with the original data.
		///</summary>
		public EdStudCourseRegAssess GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdStudCourseRegAssess(
				_originalData.EdStudCourseRegAssessId,
				_originalData.EdStudCourseRegId,
				_originalData.EdCodeCourseAssessId,
				_originalData.AssessDeg,
				_originalData.AsFacultyInfoId,
				_originalData.EdCodeCourseStatusId,
				_originalData.EntPolicyAssessHdrId,
				_originalData.LastDate,
				_originalData.SeFormId,
				_originalData.SeUserId,
				_originalData.AssessRaiseMark,
				_originalData.ApproveFlg,
				_originalData.ApproveDate
				);
				
			return (EdStudCourseRegAssess)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdStudCourseRegAssessBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdStudCourseRegAssessBase)
				return ValueEquals(this, (EdStudCourseRegAssessBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdStudCourseRegAssessBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdStudCourseRegAssessId.GetHashCode() ^ 
					this.EdStudCourseRegId.GetHashCode() ^ 
					this.EdCodeCourseAssessId.GetHashCode() ^ 
					((this.AssessDeg == null) ? string.Empty : this.AssessDeg.ToString()).GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					((this.EdCodeCourseStatusId == null) ? string.Empty : this.EdCodeCourseStatusId.ToString()).GetHashCode() ^ 
					((this.EntPolicyAssessHdrId == null) ? string.Empty : this.EntPolicyAssessHdrId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.SeFormId == null) ? string.Empty : this.SeFormId.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.AssessRaiseMark == null) ? string.Empty : this.AssessRaiseMark.ToString()).GetHashCode() ^ 
					((this.ApproveFlg == null) ? string.Empty : this.ApproveFlg.ToString()).GetHashCode() ^ 
					((this.ApproveDate == null) ? string.Empty : this.ApproveDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdStudCourseRegAssessBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdStudCourseRegAssessBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdStudCourseRegAssessBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdStudCourseRegAssessBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdStudCourseRegAssessBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdStudCourseRegAssessBase Object1, EdStudCourseRegAssessBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdStudCourseRegAssessId != Object2.EdStudCourseRegAssessId)
				equal = false;
			if (Object1.EdStudCourseRegId != Object2.EdStudCourseRegId)
				equal = false;
			if (Object1.EdCodeCourseAssessId != Object2.EdCodeCourseAssessId)
				equal = false;
			if ( Object1.AssessDeg != null && Object2.AssessDeg != null )
			{
				if (Object1.AssessDeg != Object2.AssessDeg)
					equal = false;
			}
			else if (Object1.AssessDeg == null ^ Object2.AssessDeg == null )
			{
				equal = false;
			}
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeCourseStatusId != null && Object2.EdCodeCourseStatusId != null )
			{
				if (Object1.EdCodeCourseStatusId != Object2.EdCodeCourseStatusId)
					equal = false;
			}
			else if (Object1.EdCodeCourseStatusId == null ^ Object2.EdCodeCourseStatusId == null )
			{
				equal = false;
			}
			if ( Object1.EntPolicyAssessHdrId != null && Object2.EntPolicyAssessHdrId != null )
			{
				if (Object1.EntPolicyAssessHdrId != Object2.EntPolicyAssessHdrId)
					equal = false;
			}
			else if (Object1.EntPolicyAssessHdrId == null ^ Object2.EntPolicyAssessHdrId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.SeFormId != null && Object2.SeFormId != null )
			{
				if (Object1.SeFormId != Object2.SeFormId)
					equal = false;
			}
			else if (Object1.SeFormId == null ^ Object2.SeFormId == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.AssessRaiseMark != null && Object2.AssessRaiseMark != null )
			{
				if (Object1.AssessRaiseMark != Object2.AssessRaiseMark)
					equal = false;
			}
			else if (Object1.AssessRaiseMark == null ^ Object2.AssessRaiseMark == null )
			{
				equal = false;
			}
			if ( Object1.ApproveFlg != null && Object2.ApproveFlg != null )
			{
				if (Object1.ApproveFlg != Object2.ApproveFlg)
					equal = false;
			}
			else if (Object1.ApproveFlg == null ^ Object2.ApproveFlg == null )
			{
				equal = false;
			}
			if ( Object1.ApproveDate != null && Object2.ApproveDate != null )
			{
				if (Object1.ApproveDate != Object2.ApproveDate)
					equal = false;
			}
			else if (Object1.ApproveDate == null ^ Object2.ApproveDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdStudCourseRegAssessBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdStudCourseRegAssessComparer GetComparer()
        {
            return new EdStudCourseRegAssessComparer();
        }
        */

        // Comparer delegates back to EdStudCourseRegAssess
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdStudCourseRegAssess rhs, EdStudCourseRegAssessColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdStudCourseRegAssessColumn.EdStudCourseRegAssessId:
            		return this.EdStudCourseRegAssessId.CompareTo(rhs.EdStudCourseRegAssessId);
            		
            		                 
            	
            	
            	case EdStudCourseRegAssessColumn.EdStudCourseRegId:
            		return this.EdStudCourseRegId.CompareTo(rhs.EdStudCourseRegId);
            		
            		                 
            	
            	
            	case EdStudCourseRegAssessColumn.EdCodeCourseAssessId:
            		return this.EdCodeCourseAssessId.CompareTo(rhs.EdCodeCourseAssessId);
            		
            		                 
            	
            	
            	case EdStudCourseRegAssessColumn.AssessDeg:
            		return this.AssessDeg.Value.CompareTo(rhs.AssessDeg.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegAssessColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegAssessColumn.EdCodeCourseStatusId:
            		return this.EdCodeCourseStatusId.Value.CompareTo(rhs.EdCodeCourseStatusId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegAssessColumn.EntPolicyAssessHdrId:
            		return this.EntPolicyAssessHdrId.Value.CompareTo(rhs.EntPolicyAssessHdrId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegAssessColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegAssessColumn.SeFormId:
            		return this.SeFormId.Value.CompareTo(rhs.SeFormId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegAssessColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegAssessColumn.AssessRaiseMark:
            		return this.AssessRaiseMark.Value.CompareTo(rhs.AssessRaiseMark.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegAssessColumn.ApproveFlg:
            		return this.ApproveFlg.Value.CompareTo(rhs.ApproveFlg.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegAssessColumn.ApproveDate:
            		return this.ApproveDate.Value.CompareTo(rhs.ApproveDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdStudCourseRegAssessKey> Members
		
		// member variable for the EntityId property
		private EdStudCourseRegAssessKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdStudCourseRegAssessKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdStudCourseRegAssessKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdStudCourseRegAssess")
					.Append("|").Append( this.EdStudCourseRegAssessId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{14}{13}- EdStudCourseRegAssessId: {0}{13}- EdStudCourseRegId: {1}{13}- EdCodeCourseAssessId: {2}{13}- AssessDeg: {3}{13}- AsFacultyInfoId: {4}{13}- EdCodeCourseStatusId: {5}{13}- EntPolicyAssessHdrId: {6}{13}- LastDate: {7}{13}- SeFormId: {8}{13}- SeUserId: {9}{13}- AssessRaiseMark: {10}{13}- ApproveFlg: {11}{13}- ApproveDate: {12}{13}{15}", 
				this.EdStudCourseRegAssessId,
				this.EdStudCourseRegId,
				this.EdCodeCourseAssessId,
				(this.AssessDeg == null) ? string.Empty : this.AssessDeg.ToString(),
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				(this.EdCodeCourseStatusId == null) ? string.Empty : this.EdCodeCourseStatusId.ToString(),
				(this.EntPolicyAssessHdrId == null) ? string.Empty : this.EntPolicyAssessHdrId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.SeFormId == null) ? string.Empty : this.SeFormId.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.AssessRaiseMark == null) ? string.Empty : this.AssessRaiseMark.ToString(),
				(this.ApproveFlg == null) ? string.Empty : this.ApproveFlg.ToString(),
				(this.ApproveDate == null) ? string.Empty : this.ApproveDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_STUD_COURSE_REG_ASSESS' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdStudCourseRegAssessEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_STUD_COURSE_REG_ASSESS_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_STUD_COURSE_REG_ASSESS"</remarks>
		public System.Decimal EdStudCourseRegAssessId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdStudCourseRegAssessId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_STUD_COURSE_REG_ID : 
		/// </summary>
		public System.Decimal		  EdStudCourseRegId = 0.0m;
		
		/// <summary>
		/// ED_CODE_COURSE_ASSESS_ID : 
		/// </summary>
		public System.Decimal		  EdCodeCourseAssessId = 0.0m;
		
		/// <summary>
		/// ASSESS_DEG : 
		/// </summary>
		public System.Decimal?		  AssessDeg = null;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// ED_CODE_COURSE_STATUS_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeCourseStatusId = null;
		
		/// <summary>
		/// ENT_POLICY_ASSESS_HDR_ID : 
		/// </summary>
		public System.Decimal?		  EntPolicyAssessHdrId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// SE_FORM_ID : 
		/// </summary>
		public System.Decimal?		  SeFormId = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// ASSESS_RAISE_MARK : الدرجة المرفوعه
		/// </summary>
		public System.Decimal?		  AssessRaiseMark = null;
		
		/// <summary>
		/// Approve_Flg : 
		/// </summary>
		public System.Boolean?		  ApproveFlg = null;
		
		/// <summary>
		/// Approve_Date : 
		/// </summary>
		public System.DateTime?		  ApproveDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdCodeCourseStatus _edCodeCourseStatusIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseStatus"/>.
		/// </summary>
		/// <value>The source EdCodeCourseStatus for EdCodeCourseStatusId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeCourseStatus EdCodeCourseStatusIdSource
      	{
            get { return this._edCodeCourseStatusIdSource; }
            set { this._edCodeCourseStatusIdSource = value; }
      	}
		private EntPolicyAssessHdr _entPolicyAssessHdrIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntPolicyAssessHdr"/>.
		/// </summary>
		/// <value>The source EntPolicyAssessHdr for EntPolicyAssessHdrId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntPolicyAssessHdr EntPolicyAssessHdrIdSource
      	{
            get { return this._entPolicyAssessHdrIdSource; }
            set { this._entPolicyAssessHdrIdSource = value; }
      	}
		private SeForm _seFormIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeForm"/>.
		/// </summary>
		/// <value>The source SeForm for SeFormId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeForm SeFormIdSource
      	{
            get { return this._seFormIdSource; }
            set { this._seFormIdSource = value; }
      	}
		private SeUser _seUserIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeUser SeUserIdSource
      	{
            get { return this._seUserIdSource; }
            set { this._seUserIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdCodeCourseAssess _edCodeCourseAssessIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseAssess"/>.
		/// </summary>
		/// <value>The source EdCodeCourseAssess for EdCodeCourseAssessId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeCourseAssess EdCodeCourseAssessIdSource
      	{
            get { return this._edCodeCourseAssessIdSource; }
            set { this._edCodeCourseAssessIdSource = value; }
      	}
		private EdStudCourseReg _edStudCourseRegIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStudCourseReg"/>.
		/// </summary>
		/// <value>The source EdStudCourseReg for EdStudCourseRegId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStudCourseReg EdStudCourseRegIdSource
      	{
            get { return this._edStudCourseRegIdSource; }
            set { this._edStudCourseRegIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdStudCourseRegAssessEntityData _tmp = new EdStudCourseRegAssessEntityData();
						
			_tmp.EdStudCourseRegAssessId = this.EdStudCourseRegAssessId;
			_tmp.OriginalEdStudCourseRegAssessId = this.OriginalEdStudCourseRegAssessId;
			
			_tmp.EdStudCourseRegId = this.EdStudCourseRegId;
			_tmp.EdCodeCourseAssessId = this.EdCodeCourseAssessId;
			_tmp.AssessDeg = this.AssessDeg;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdCodeCourseStatusId = this.EdCodeCourseStatusId;
			_tmp.EntPolicyAssessHdrId = this.EntPolicyAssessHdrId;
			_tmp.LastDate = this.LastDate;
			_tmp.SeFormId = this.SeFormId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.AssessRaiseMark = this.AssessRaiseMark;
			_tmp.ApproveFlg = this.ApproveFlg;
			_tmp.ApproveDate = this.ApproveDate;
			
			#region Source Parent Composite Entities
			if (this.EdCodeCourseStatusIdSource != null)
				_tmp.EdCodeCourseStatusIdSource = MakeCopyOf(this.EdCodeCourseStatusIdSource) as EdCodeCourseStatus;
			if (this.EntPolicyAssessHdrIdSource != null)
				_tmp.EntPolicyAssessHdrIdSource = MakeCopyOf(this.EntPolicyAssessHdrIdSource) as EntPolicyAssessHdr;
			if (this.SeFormIdSource != null)
				_tmp.SeFormIdSource = MakeCopyOf(this.SeFormIdSource) as SeForm;
			if (this.SeUserIdSource != null)
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource) as SeUser;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdCodeCourseAssessIdSource != null)
				_tmp.EdCodeCourseAssessIdSource = MakeCopyOf(this.EdCodeCourseAssessIdSource) as EdCodeCourseAssess;
			if (this.EdStudCourseRegIdSource != null)
				_tmp.EdStudCourseRegIdSource = MakeCopyOf(this.EdStudCourseRegIdSource) as EdStudCourseReg;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdStudCourseRegAssessEntityData _tmp = new EdStudCourseRegAssessEntityData();
						
			_tmp.EdStudCourseRegAssessId = this.EdStudCourseRegAssessId;
			_tmp.OriginalEdStudCourseRegAssessId = this.OriginalEdStudCourseRegAssessId;
			
			_tmp.EdStudCourseRegId = this.EdStudCourseRegId;
			_tmp.EdCodeCourseAssessId = this.EdCodeCourseAssessId;
			_tmp.AssessDeg = this.AssessDeg;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdCodeCourseStatusId = this.EdCodeCourseStatusId;
			_tmp.EntPolicyAssessHdrId = this.EntPolicyAssessHdrId;
			_tmp.LastDate = this.LastDate;
			_tmp.SeFormId = this.SeFormId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.AssessRaiseMark = this.AssessRaiseMark;
			_tmp.ApproveFlg = this.ApproveFlg;
			_tmp.ApproveDate = this.ApproveDate;
			
			#region Source Parent Composite Entities
			if (this.EdCodeCourseStatusIdSource != null && existingCopies.Contains(this.EdCodeCourseStatusIdSource))
				_tmp.EdCodeCourseStatusIdSource = existingCopies[this.EdCodeCourseStatusIdSource] as EdCodeCourseStatus;
			else
				_tmp.EdCodeCourseStatusIdSource = MakeCopyOf(this.EdCodeCourseStatusIdSource, existingCopies) as EdCodeCourseStatus;
			if (this.EntPolicyAssessHdrIdSource != null && existingCopies.Contains(this.EntPolicyAssessHdrIdSource))
				_tmp.EntPolicyAssessHdrIdSource = existingCopies[this.EntPolicyAssessHdrIdSource] as EntPolicyAssessHdr;
			else
				_tmp.EntPolicyAssessHdrIdSource = MakeCopyOf(this.EntPolicyAssessHdrIdSource, existingCopies) as EntPolicyAssessHdr;
			if (this.SeFormIdSource != null && existingCopies.Contains(this.SeFormIdSource))
				_tmp.SeFormIdSource = existingCopies[this.SeFormIdSource] as SeForm;
			else
				_tmp.SeFormIdSource = MakeCopyOf(this.SeFormIdSource, existingCopies) as SeForm;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				_tmp.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdCodeCourseAssessIdSource != null && existingCopies.Contains(this.EdCodeCourseAssessIdSource))
				_tmp.EdCodeCourseAssessIdSource = existingCopies[this.EdCodeCourseAssessIdSource] as EdCodeCourseAssess;
			else
				_tmp.EdCodeCourseAssessIdSource = MakeCopyOf(this.EdCodeCourseAssessIdSource, existingCopies) as EdCodeCourseAssess;
			if (this.EdStudCourseRegIdSource != null && existingCopies.Contains(this.EdStudCourseRegIdSource))
				_tmp.EdStudCourseRegIdSource = existingCopies[this.EdStudCourseRegIdSource] as EdStudCourseReg;
			else
				_tmp.EdStudCourseRegIdSource = MakeCopyOf(this.EdStudCourseRegIdSource, existingCopies) as EdStudCourseReg;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudCourseRegAssessColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdStudCourseRegAssessColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudCourseRegAssessColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdStudCourseRegAssessColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudCourseRegAssessColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdStudCourseRegAssessColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdStudCourseRegAssessEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdStudCourseRegAssessEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudCourseRegAssessColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdStudCourseRegAssessColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdStudCourseRegAssessEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdStudCourseRegAssessEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdStudCourseRegAssessEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdStudCourseRegAssess"/> object.
	/// </remarks>
	public class EdStudCourseRegAssessEventArgs : System.EventArgs
	{
		private EdStudCourseRegAssessColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdStudCourseRegAssessEventArgs class.
		///</summary>
		public EdStudCourseRegAssessEventArgs(EdStudCourseRegAssessColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdStudCourseRegAssessEventArgs class.
		///</summary>
		public EdStudCourseRegAssessEventArgs(EdStudCourseRegAssessColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdStudCourseRegAssessColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdStudCourseRegAssessColumn" />
		public EdStudCourseRegAssessColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdStudCourseRegAssess related events.
	///</summary>
	public delegate void EdStudCourseRegAssessEventHandler(object sender, EdStudCourseRegAssessEventArgs e);
	
	#region EdStudCourseRegAssessComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdStudCourseRegAssessComparer : System.Collections.Generic.IComparer<EdStudCourseRegAssess>
	{
		EdStudCourseRegAssessColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudCourseRegAssessComparer"/> class.
        /// </summary>
		public EdStudCourseRegAssessComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudCourseRegAssessComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdStudCourseRegAssessComparer(EdStudCourseRegAssessColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdStudCourseRegAssess"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdStudCourseRegAssess"/> to compare.</param>
        /// <param name="b">The second <c>EdStudCourseRegAssess</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdStudCourseRegAssess a, EdStudCourseRegAssess b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdStudCourseRegAssess entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdStudCourseRegAssess a, EdStudCourseRegAssess b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdStudCourseRegAssessColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdStudCourseRegAssessKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdStudCourseRegAssess"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdStudCourseRegAssessKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegAssessKey class.
		/// </summary>
		public EdStudCourseRegAssessKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegAssessKey class.
		/// </summary>
		public EdStudCourseRegAssessKey(EdStudCourseRegAssessBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdStudCourseRegAssessId = entity.EdStudCourseRegAssessId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegAssessKey class.
		/// </summary>
		public EdStudCourseRegAssessKey(System.Decimal _edStudCourseRegAssessId)
		{
			#region Init Properties

			this.EdStudCourseRegAssessId = _edStudCourseRegAssessId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdStudCourseRegAssessBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdStudCourseRegAssessBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdStudCourseRegAssessId property
		private System.Decimal _edStudCourseRegAssessId;
		
		/// <summary>
		/// Gets or sets the EdStudCourseRegAssessId property.
		/// </summary>
		public System.Decimal EdStudCourseRegAssessId
		{
			get { return _edStudCourseRegAssessId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdStudCourseRegAssessId = value;
				
				_edStudCourseRegAssessId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdStudCourseRegAssessId = ( values["EdStudCourseRegAssessId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdStudCourseRegAssessId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdStudCourseRegAssessId", EdStudCourseRegAssessId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdStudCourseRegAssessId: {0}{1}",
								EdStudCourseRegAssessId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdStudCourseRegAssessColumn Enum
	
	/// <summary>
	/// Enumerate the EdStudCourseRegAssess columns.
	/// </summary>
	[Serializable]
	public enum EdStudCourseRegAssessColumn : int
	{
		/// <summary>
		/// EdStudCourseRegAssessId : 
		/// </summary>
		[EnumTextValue("ED_STUD_COURSE_REG_ASSESS_ID")]
		[ColumnEnum("ED_STUD_COURSE_REG_ASSESS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdStudCourseRegAssessId = 1,
		/// <summary>
		/// EdStudCourseRegId : 
		/// </summary>
		[EnumTextValue("ED_STUD_COURSE_REG_ID")]
		[ColumnEnum("ED_STUD_COURSE_REG_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudCourseRegId = 2,
		/// <summary>
		/// EdCodeCourseAssessId : 
		/// </summary>
		[EnumTextValue("ED_CODE_COURSE_ASSESS_ID")]
		[ColumnEnum("ED_CODE_COURSE_ASSESS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeCourseAssessId = 3,
		/// <summary>
		/// AssessDeg : 
		/// </summary>
		[EnumTextValue("ASSESS_DEG")]
		[ColumnEnum("ASSESS_DEG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AssessDeg = 4,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 5,
		/// <summary>
		/// EdCodeCourseStatusId : 
		/// </summary>
		[EnumTextValue("ED_CODE_COURSE_STATUS_ID")]
		[ColumnEnum("ED_CODE_COURSE_STATUS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeCourseStatusId = 6,
		/// <summary>
		/// EntPolicyAssessHdrId : 
		/// </summary>
		[EnumTextValue("ENT_POLICY_ASSESS_HDR_ID")]
		[ColumnEnum("ENT_POLICY_ASSESS_HDR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntPolicyAssessHdrId = 7,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 8,
		/// <summary>
		/// SeFormId : 
		/// </summary>
		[EnumTextValue("SE_FORM_ID")]
		[ColumnEnum("SE_FORM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeFormId = 9,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 10,
		/// <summary>
		/// AssessRaiseMark : الدرجة المرفوعه
		/// </summary>
		[EnumTextValue("ASSESS_RAISE_MARK")]
		[ColumnEnum("ASSESS_RAISE_MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AssessRaiseMark = 11,
		/// <summary>
		/// ApproveFlg : 
		/// </summary>
		[EnumTextValue("Approve_Flg")]
		[ColumnEnum("Approve_Flg", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ApproveFlg = 12,
		/// <summary>
		/// ApproveDate : 
		/// </summary>
		[EnumTextValue("Approve_Date")]
		[ColumnEnum("Approve_Date", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ApproveDate = 13
	}//End enum

	#endregion EdStudCourseRegAssessColumn Enum

} // end namespace
