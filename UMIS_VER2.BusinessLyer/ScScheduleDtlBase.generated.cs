
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ScScheduleDtl.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SC_SCHEDULE_DTL' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ScScheduleDtlBase : EntityBase, IScScheduleDtl, IEntityId<ScScheduleDtlKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ScScheduleDtlEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ScScheduleDtlEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ScScheduleDtlEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ScScheduleDtl> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ScScheduleDtlEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ScScheduleDtlEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ScScheduleDtlBase"/> instance.
		///</summary>
		public ScScheduleDtlBase()
		{
			this.entityData = new ScScheduleDtlEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ScScheduleDtlBase"/> instance.
		///</summary>
		///<param name="_scScheduleDtlId"></param>
		///<param name="_scScheduleHdrId"></param>
		///<param name="_groupDescrAr"></param>
		///<param name="_groupDescrEn"></param>
		///<param name="_groupOrder"></param>
		///<param name="_gsCodeGenderId"></param>
		///<param name="_notes"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_isResultApproved"></param>
		///<param name="_seUserRsultApproveId"></param>
		///<param name="_rsultApproveDate"></param>
		///<param name="_noStudents"></param>
		///<param name="_noStudWait"></param>
		///<param name="_onlineFlg"></param>
		///<param name="_isClosed"></param>
		///<param name="_notesEmp"></param>
		///<param name="_noStudMax"></param>
		///<param name="_internalFlg"></param>
		///<param name="_waitlistFlg"></param>
		///<param name="_gsCodeLanguageId"></param>
		///<param name="_cnclFlg"></param>
		///<param name="_partTimeFlg"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public ScScheduleDtlBase(System.Decimal _scScheduleDtlId, System.Decimal _scScheduleHdrId, 
			System.String _groupDescrAr, System.String _groupDescrEn, System.Decimal? _groupOrder, 
			System.Decimal? _gsCodeGenderId, System.String _notes, System.Decimal? _asFacultyInfoId, 
			System.Decimal _isResultApproved, System.Decimal? _seUserRsultApproveId, System.DateTime? _rsultApproveDate, 
			System.Decimal? _noStudents, System.Decimal? _noStudWait, System.Decimal _onlineFlg, 
			System.Decimal? _isClosed, System.String _notesEmp, System.Decimal? _noStudMax, 
			System.Decimal _internalFlg, System.Decimal? _waitlistFlg, System.Decimal? _gsCodeLanguageId, 
			System.Decimal? _cnclFlg, System.Int32? _partTimeFlg, System.Decimal? _seUserId, 
			System.DateTime? _lastDate)
		{
			this.entityData = new ScScheduleDtlEntityData();
			this.backupData = null;

			this.ScScheduleDtlId = _scScheduleDtlId;
			this.ScScheduleHdrId = _scScheduleHdrId;
			this.GroupDescrAr = _groupDescrAr;
			this.GroupDescrEn = _groupDescrEn;
			this.GroupOrder = _groupOrder;
			this.GsCodeGenderId = _gsCodeGenderId;
			this.Notes = _notes;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.IsResultApproved = _isResultApproved;
			this.SeUserRsultApproveId = _seUserRsultApproveId;
			this.RsultApproveDate = _rsultApproveDate;
			this.NoStudents = _noStudents;
			this.NoStudWait = _noStudWait;
			this.OnlineFlg = _onlineFlg;
			this.IsClosed = _isClosed;
			this.NotesEmp = _notesEmp;
			this.NoStudMax = _noStudMax;
			this.InternalFlg = _internalFlg;
			this.WaitlistFlg = _waitlistFlg;
			this.GsCodeLanguageId = _gsCodeLanguageId;
			this.CnclFlg = _cnclFlg;
			this.PartTimeFlg = _partTimeFlg;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ScScheduleDtl"/> instance.
		///</summary>
		///<param name="_scScheduleDtlId"></param>
		///<param name="_scScheduleHdrId"></param>
		///<param name="_groupDescrAr"></param>
		///<param name="_groupDescrEn"></param>
		///<param name="_groupOrder"></param>
		///<param name="_gsCodeGenderId"></param>
		///<param name="_notes"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_isResultApproved"></param>
		///<param name="_seUserRsultApproveId"></param>
		///<param name="_rsultApproveDate"></param>
		///<param name="_noStudents"></param>
		///<param name="_noStudWait"></param>
		///<param name="_onlineFlg"></param>
		///<param name="_isClosed"></param>
		///<param name="_notesEmp"></param>
		///<param name="_noStudMax"></param>
		///<param name="_internalFlg"></param>
		///<param name="_waitlistFlg"></param>
		///<param name="_gsCodeLanguageId"></param>
		///<param name="_cnclFlg"></param>
		///<param name="_partTimeFlg"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static ScScheduleDtl CreateScScheduleDtl(System.Decimal _scScheduleDtlId, System.Decimal _scScheduleHdrId, 
			System.String _groupDescrAr, System.String _groupDescrEn, System.Decimal? _groupOrder, 
			System.Decimal? _gsCodeGenderId, System.String _notes, System.Decimal? _asFacultyInfoId, 
			System.Decimal _isResultApproved, System.Decimal? _seUserRsultApproveId, System.DateTime? _rsultApproveDate, 
			System.Decimal? _noStudents, System.Decimal? _noStudWait, System.Decimal _onlineFlg, 
			System.Decimal? _isClosed, System.String _notesEmp, System.Decimal? _noStudMax, 
			System.Decimal _internalFlg, System.Decimal? _waitlistFlg, System.Decimal? _gsCodeLanguageId, 
			System.Decimal? _cnclFlg, System.Int32? _partTimeFlg, System.Decimal? _seUserId, 
			System.DateTime? _lastDate)
		{
			ScScheduleDtl newScScheduleDtl = new ScScheduleDtl();
			newScScheduleDtl.ScScheduleDtlId = _scScheduleDtlId;
			newScScheduleDtl.ScScheduleHdrId = _scScheduleHdrId;
			newScScheduleDtl.GroupDescrAr = _groupDescrAr;
			newScScheduleDtl.GroupDescrEn = _groupDescrEn;
			newScScheduleDtl.GroupOrder = _groupOrder;
			newScScheduleDtl.GsCodeGenderId = _gsCodeGenderId;
			newScScheduleDtl.Notes = _notes;
			newScScheduleDtl.AsFacultyInfoId = _asFacultyInfoId;
			newScScheduleDtl.IsResultApproved = _isResultApproved;
			newScScheduleDtl.SeUserRsultApproveId = _seUserRsultApproveId;
			newScScheduleDtl.RsultApproveDate = _rsultApproveDate;
			newScScheduleDtl.NoStudents = _noStudents;
			newScScheduleDtl.NoStudWait = _noStudWait;
			newScScheduleDtl.OnlineFlg = _onlineFlg;
			newScScheduleDtl.IsClosed = _isClosed;
			newScScheduleDtl.NotesEmp = _notesEmp;
			newScScheduleDtl.NoStudMax = _noStudMax;
			newScScheduleDtl.InternalFlg = _internalFlg;
			newScScheduleDtl.WaitlistFlg = _waitlistFlg;
			newScScheduleDtl.GsCodeLanguageId = _gsCodeLanguageId;
			newScScheduleDtl.CnclFlg = _cnclFlg;
			newScScheduleDtl.PartTimeFlg = _partTimeFlg;
			newScScheduleDtl.SeUserId = _seUserId;
			newScScheduleDtl.LastDate = _lastDate;
			return newScScheduleDtl;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the ScScheduleDtlId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal ScScheduleDtlId
		{
			get
			{
				return this.entityData.ScScheduleDtlId; 
			}
			
			set
			{
				if (this.entityData.ScScheduleDtlId == value)
					return;
					
				OnColumnChanging(ScScheduleDtlColumn.ScScheduleDtlId, this.entityData.ScScheduleDtlId);
				this.entityData.ScScheduleDtlId = value;
				this.EntityId.ScScheduleDtlId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlColumn.ScScheduleDtlId, this.entityData.ScScheduleDtlId);
				OnPropertyChanged("ScScheduleDtlId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SC_SCHEDULE_DTL_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SC_SCHEDULE_DTL_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalScScheduleDtlId
		{
			get { return this.entityData.OriginalScScheduleDtlId; }
			set { this.entityData.OriginalScScheduleDtlId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the ScScheduleHdrId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal ScScheduleHdrId
		{
			get
			{
				return this.entityData.ScScheduleHdrId; 
			}
			
			set
			{
				if (this.entityData.ScScheduleHdrId == value)
					return;
					
				OnColumnChanging(ScScheduleDtlColumn.ScScheduleHdrId, this.entityData.ScScheduleHdrId);
				this.entityData.ScScheduleHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlColumn.ScScheduleHdrId, this.entityData.ScScheduleHdrId);
				OnPropertyChanged("ScScheduleHdrId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GroupDescrAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String GroupDescrAr
		{
			get
			{
				return this.entityData.GroupDescrAr; 
			}
			
			set
			{
				if (this.entityData.GroupDescrAr == value)
					return;
					
				OnColumnChanging(ScScheduleDtlColumn.GroupDescrAr, this.entityData.GroupDescrAr);
				this.entityData.GroupDescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlColumn.GroupDescrAr, this.entityData.GroupDescrAr);
				OnPropertyChanged("GroupDescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GroupDescrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String GroupDescrEn
		{
			get
			{
				return this.entityData.GroupDescrEn; 
			}
			
			set
			{
				if (this.entityData.GroupDescrEn == value)
					return;
					
				OnColumnChanging(ScScheduleDtlColumn.GroupDescrEn, this.entityData.GroupDescrEn);
				this.entityData.GroupDescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlColumn.GroupDescrEn, this.entityData.GroupDescrEn);
				OnPropertyChanged("GroupDescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GroupOrder property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGroupOrderNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GroupOrder
		{
			get
			{
				return this.entityData.GroupOrder; 
			}
			
			set
			{
				if (this.entityData.GroupOrder == value)
					return;
					
				OnColumnChanging(ScScheduleDtlColumn.GroupOrder, this.entityData.GroupOrder);
				this.entityData.GroupOrder = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlColumn.GroupOrder, this.entityData.GroupOrder);
				OnPropertyChanged("GroupOrder");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeGenderId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCodeGenderIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCodeGenderId
		{
			get
			{
				return this.entityData.GsCodeGenderId; 
			}
			
			set
			{
				if (this.entityData.GsCodeGenderId == value)
					return;
					
				OnColumnChanging(ScScheduleDtlColumn.GsCodeGenderId, this.entityData.GsCodeGenderId);
				this.entityData.GsCodeGenderId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlColumn.GsCodeGenderId, this.entityData.GsCodeGenderId);
				OnPropertyChanged("GsCodeGenderId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(ScScheduleDtlColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(ScScheduleDtlColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsResultApproved property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsResultApproved
		{
			get
			{
				return this.entityData.IsResultApproved; 
			}
			
			set
			{
				if (this.entityData.IsResultApproved == value)
					return;
					
				OnColumnChanging(ScScheduleDtlColumn.IsResultApproved, this.entityData.IsResultApproved);
				this.entityData.IsResultApproved = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlColumn.IsResultApproved, this.entityData.IsResultApproved);
				OnPropertyChanged("IsResultApproved");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserRsultApproveId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserRsultApproveIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserRsultApproveId
		{
			get
			{
				return this.entityData.SeUserRsultApproveId; 
			}
			
			set
			{
				if (this.entityData.SeUserRsultApproveId == value)
					return;
					
				OnColumnChanging(ScScheduleDtlColumn.SeUserRsultApproveId, this.entityData.SeUserRsultApproveId);
				this.entityData.SeUserRsultApproveId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlColumn.SeUserRsultApproveId, this.entityData.SeUserRsultApproveId);
				OnPropertyChanged("SeUserRsultApproveId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RsultApproveDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsRsultApproveDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? RsultApproveDate
		{
			get
			{
				return this.entityData.RsultApproveDate; 
			}
			
			set
			{
				if (this.entityData.RsultApproveDate == value)
					return;
					
				OnColumnChanging(ScScheduleDtlColumn.RsultApproveDate, this.entityData.RsultApproveDate);
				this.entityData.RsultApproveDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlColumn.RsultApproveDate, this.entityData.RsultApproveDate);
				OnPropertyChanged("RsultApproveDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NoStudents property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsNoStudentsNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? NoStudents
		{
			get
			{
				return this.entityData.NoStudents; 
			}
			
			set
			{
				if (this.entityData.NoStudents == value)
					return;
					
				OnColumnChanging(ScScheduleDtlColumn.NoStudents, this.entityData.NoStudents);
				this.entityData.NoStudents = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlColumn.NoStudents, this.entityData.NoStudents);
				OnPropertyChanged("NoStudents");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NoStudWait property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsNoStudWaitNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? NoStudWait
		{
			get
			{
				return this.entityData.NoStudWait; 
			}
			
			set
			{
				if (this.entityData.NoStudWait == value)
					return;
					
				OnColumnChanging(ScScheduleDtlColumn.NoStudWait, this.entityData.NoStudWait);
				this.entityData.NoStudWait = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlColumn.NoStudWait, this.entityData.NoStudWait);
				OnPropertyChanged("NoStudWait");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OnlineFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal OnlineFlg
		{
			get
			{
				return this.entityData.OnlineFlg; 
			}
			
			set
			{
				if (this.entityData.OnlineFlg == value)
					return;
					
				OnColumnChanging(ScScheduleDtlColumn.OnlineFlg, this.entityData.OnlineFlg);
				this.entityData.OnlineFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlColumn.OnlineFlg, this.entityData.OnlineFlg);
				OnPropertyChanged("OnlineFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsClosed property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsIsClosedNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? IsClosed
		{
			get
			{
				return this.entityData.IsClosed; 
			}
			
			set
			{
				if (this.entityData.IsClosed == value)
					return;
					
				OnColumnChanging(ScScheduleDtlColumn.IsClosed, this.entityData.IsClosed);
				this.entityData.IsClosed = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlColumn.IsClosed, this.entityData.IsClosed);
				OnPropertyChanged("IsClosed");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NotesEmp property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String NotesEmp
		{
			get
			{
				return this.entityData.NotesEmp; 
			}
			
			set
			{
				if (this.entityData.NotesEmp == value)
					return;
					
				OnColumnChanging(ScScheduleDtlColumn.NotesEmp, this.entityData.NotesEmp);
				this.entityData.NotesEmp = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlColumn.NotesEmp, this.entityData.NotesEmp);
				OnPropertyChanged("NotesEmp");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NoStudMax property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsNoStudMaxNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? NoStudMax
		{
			get
			{
				return this.entityData.NoStudMax; 
			}
			
			set
			{
				if (this.entityData.NoStudMax == value)
					return;
					
				OnColumnChanging(ScScheduleDtlColumn.NoStudMax, this.entityData.NoStudMax);
				this.entityData.NoStudMax = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlColumn.NoStudMax, this.entityData.NoStudMax);
				OnPropertyChanged("NoStudMax");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InternalFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal InternalFlg
		{
			get
			{
				return this.entityData.InternalFlg; 
			}
			
			set
			{
				if (this.entityData.InternalFlg == value)
					return;
					
				OnColumnChanging(ScScheduleDtlColumn.InternalFlg, this.entityData.InternalFlg);
				this.entityData.InternalFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlColumn.InternalFlg, this.entityData.InternalFlg);
				OnPropertyChanged("InternalFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WaitlistFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWaitlistFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WaitlistFlg
		{
			get
			{
				return this.entityData.WaitlistFlg; 
			}
			
			set
			{
				if (this.entityData.WaitlistFlg == value)
					return;
					
				OnColumnChanging(ScScheduleDtlColumn.WaitlistFlg, this.entityData.WaitlistFlg);
				this.entityData.WaitlistFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlColumn.WaitlistFlg, this.entityData.WaitlistFlg);
				OnPropertyChanged("WaitlistFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeLanguageId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCodeLanguageIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCodeLanguageId
		{
			get
			{
				return this.entityData.GsCodeLanguageId; 
			}
			
			set
			{
				if (this.entityData.GsCodeLanguageId == value)
					return;
					
				OnColumnChanging(ScScheduleDtlColumn.GsCodeLanguageId, this.entityData.GsCodeLanguageId);
				this.entityData.GsCodeLanguageId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlColumn.GsCodeLanguageId, this.entityData.GsCodeLanguageId);
				OnPropertyChanged("GsCodeLanguageId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CnclFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCnclFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CnclFlg
		{
			get
			{
				return this.entityData.CnclFlg; 
			}
			
			set
			{
				if (this.entityData.CnclFlg == value)
					return;
					
				OnColumnChanging(ScScheduleDtlColumn.CnclFlg, this.entityData.CnclFlg);
				this.entityData.CnclFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlColumn.CnclFlg, this.entityData.CnclFlg);
				OnPropertyChanged("CnclFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PartTimeFlg property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPartTimeFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PartTimeFlg
		{
			get
			{
				return this.entityData.PartTimeFlg; 
			}
			
			set
			{
				if (this.entityData.PartTimeFlg == value)
					return;
					
				OnColumnChanging(ScScheduleDtlColumn.PartTimeFlg, this.entityData.PartTimeFlg);
				this.entityData.PartTimeFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlColumn.PartTimeFlg, this.entityData.PartTimeFlg);
				OnPropertyChanged("PartTimeFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(ScScheduleDtlColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(ScScheduleDtlColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ScScheduleDtlColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="ScScheduleHdr"/>.
		/// </summary>
		/// <value>The source ScScheduleHdr for ScScheduleHdrId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScScheduleHdr ScScheduleHdrIdSource
      	{
            get { return entityData.ScScheduleHdrIdSource; }
            set { entityData.ScScheduleHdrIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeGender"/>.
		/// </summary>
		/// <value>The source GsCodeGender for GsCodeGenderId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeGender GsCodeGenderIdSource
      	{
            get { return entityData.GsCodeGenderIdSource; }
            set { entityData.GsCodeGenderIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeLanguage"/>.
		/// </summary>
		/// <value>The source GsCodeLanguage for GsCodeLanguageId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeLanguage GsCodeLanguageIdSource
      	{
            get { return entityData.GsCodeLanguageIdSource; }
            set { entityData.GsCodeLanguageIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserRsultApproveId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeUser SeUserRsultApproveIdSource
      	{
            get { return entityData.SeUserRsultApproveIdSource; }
            set { entityData.SeUserRsultApproveIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of ScScheduleCrossList objects
		///	which are related to this object through the relation FK_SC_SCHEDULE_CROSS_LIST_SC_SCHEDULE_DTL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScScheduleCrossList> ScScheduleCrossListCollectionGetByScScheduleDtlId1
		{
			get { return entityData.ScScheduleCrossListCollectionGetByScScheduleDtlId1; }
			set { entityData.ScScheduleCrossListCollectionGetByScScheduleDtlId1 = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdExamSuprvsor objects
		///	which are related to this object through the relation FK_ED_EXAM_SUPRVSOR_SC_SCHEDULE_DTL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdExamSuprvsor> EdExamSuprvsorCollection
		{
			get { return entityData.EdExamSuprvsorCollection; }
			set { entityData.EdExamSuprvsorCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SvLecNote objects
		///	which are related to this object through the relation FK_SV_LEC_NOTE_SC_SCHEDULE_DTL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SvLecNote> SvLecNoteCollection
		{
			get { return entityData.SvLecNoteCollection; }
			set { entityData.SvLecNoteCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdCourseInstance objects
		///	which are related to this object through the relation FK_ED_COURSE_INSTANCE_SC_SCHEDULE_DTL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdCourseInstance> EdCourseInstanceCollection
		{
			get { return entityData.EdCourseInstanceCollection; }
			set { entityData.EdCourseInstanceCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of WfCrsRsltApprove objects
		///	which are related to this object through the relation FK_WF_CRS_RSLT_APPROVE_SC_SCHEDULE_DTL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<WfCrsRsltApprove> WfCrsRsltApproveCollection
		{
			get { return entityData.WfCrsRsltApproveCollection; }
			set { entityData.WfCrsRsltApproveCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CoExamSchdlPlace objects
		///	which are related to this object through the relation FK_CO_EXAM_SCHDL_PLACE_SC_SCHEDULE_DTL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CoExamSchdlPlace> CoExamSchdlPlaceCollection
		{
			get { return entityData.CoExamSchdlPlaceCollection; }
			set { entityData.CoExamSchdlPlaceCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ScSectionGroupDtl objects
		///	which are related to this object through the relation FK_SC_SECTION_GROUP_DTL_SC_SCHEDULE_DTL1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScSectionGroupDtl> ScSectionGroupDtlCollection
		{
			get { return entityData.ScSectionGroupDtlCollection; }
			set { entityData.ScSectionGroupDtlCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudGroupPre objects
		///	which are related to this object through the relation FK_RD_STUD_GROUP_PRE_SC_SCHEDULE_DTL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudGroupPre> EdStudGroupPreCollection
		{
			get { return entityData.EdStudGroupPreCollection; }
			set { entityData.EdStudGroupPreCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SvPollHdr objects
		///	which are related to this object through the relation FK_SV_POLL_HDR_SC_SCHEDULE_DTL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SvPollHdr> SvPollHdrCollection
		{
			get { return entityData.SvPollHdrCollection; }
			set { entityData.SvPollHdrCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ScScheduleCrossList objects
		///	which are related to this object through the relation FK_SC_SCHEDULE_CROSS_LIST_SC_SCHEDULE_DTL1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScScheduleCrossList> ScScheduleCrossListCollectionGetByScScheduleDtlId2
		{
			get { return entityData.ScScheduleCrossListCollectionGetByScScheduleDtlId2; }
			set { entityData.ScScheduleCrossListCollectionGetByScScheduleDtlId2 = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ScScheduleDtlDay objects
		///	which are related to this object through the relation FK_SC_SCHEDULE_DTL_DAY_SC_SCHEDULE_DTL1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScScheduleDtlDay> ScScheduleDtlDayCollection
		{
			get { return entityData.ScScheduleDtlDayCollection; }
			set { entityData.ScScheduleDtlDayCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudCourseWait objects
		///	which are related to this object through the relation FK_ED_STUD_COURSE_WAIT_SC_SCHEDULE_DTL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCourseWait> EdStudCourseWaitCollection
		{
			get { return entityData.EdStudCourseWaitCollection; }
			set { entityData.EdStudCourseWaitCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudGroup objects
		///	which are related to this object through the relation FK_AUTO_0004
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudGroup> EdStudGroupCollection
		{
			get { return entityData.EdStudGroupCollection; }
			set { entityData.EdStudGroupCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ScScheduleRsrv objects
		///	which are related to this object through the relation FK_SC_SCHEDULE_RSRV_SC_SCHEDULE_DTL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScScheduleRsrv> ScScheduleRsrvCollection
		{
			get { return entityData.ScScheduleRsrvCollection; }
			set { entityData.ScScheduleRsrvCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ScScheduleDtlExtStf objects
		///	which are related to this object through the relation FK_SC_SCHEDULE_DTL_EXT_STF_SC_SCHEDULE_DTL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScScheduleDtlExtStf> ScScheduleDtlExtStfCollection
		{
			get { return entityData.ScScheduleDtlExtStfCollection; }
			set { entityData.ScScheduleDtlExtStfCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SeBlockTrans objects
		///	which are related to this object through the relation FK_SE_BLOCK_TRANS_SC_SCHEDULE_DTL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SeBlockTrans> SeBlockTransCollection
		{
			get { return entityData.SeBlockTransCollection; }
			set { entityData.SeBlockTransCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("GroupDescrAr", "Group Descr Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GroupDescrAr", "Group Descr Ar", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("GroupDescrEn", "Group Descr En"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GroupDescrEn", "Group Descr En", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NotesEmp", "Notes Emp", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SC_SCHEDULE_DTL"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SC_SCHEDULE_DTL_ID", "SC_SCHEDULE_HDR_ID", "GROUP_DESCR_AR", "GROUP_DESCR_EN", "GROUP_ORDER", "GS_CODE_GENDER_ID", "NOTES", "AS_FACULTY_INFO_ID", "IS_RESULT_APPROVED", "SE_USER_RSULT_APPROVE_ID", "RSULT_APPROVE_DATE", "NO_STUDENTS", "NO_STUD_WAIT", "ONLINE_FLG", "IS_CLOSED", "NOTES_EMP", "NO_STUD_MAX", "INTERNAL_FLG", "WAITLIST_FLG", "GS_CODE_LANGUAGE_ID", "CNCL_FLG", "PART_TIME_FLG", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ScScheduleDtlEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ScScheduleDtl) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ScScheduleDtl>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ScScheduleDtl);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ScScheduleDtl Entity 
		///</summary>
		protected virtual ScScheduleDtl Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ScScheduleDtl copy = new ScScheduleDtl();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.ScScheduleDtlId = this.ScScheduleDtlId;
					copy.OriginalScScheduleDtlId = this.OriginalScScheduleDtlId;
				copy.ScScheduleHdrId = this.ScScheduleHdrId;
				copy.GroupDescrAr = this.GroupDescrAr;
				copy.GroupDescrEn = this.GroupDescrEn;
				copy.GroupOrder = this.GroupOrder;
				copy.GsCodeGenderId = this.GsCodeGenderId;
				copy.Notes = this.Notes;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.IsResultApproved = this.IsResultApproved;
				copy.SeUserRsultApproveId = this.SeUserRsultApproveId;
				copy.RsultApproveDate = this.RsultApproveDate;
				copy.NoStudents = this.NoStudents;
				copy.NoStudWait = this.NoStudWait;
				copy.OnlineFlg = this.OnlineFlg;
				copy.IsClosed = this.IsClosed;
				copy.NotesEmp = this.NotesEmp;
				copy.NoStudMax = this.NoStudMax;
				copy.InternalFlg = this.InternalFlg;
				copy.WaitlistFlg = this.WaitlistFlg;
				copy.GsCodeLanguageId = this.GsCodeLanguageId;
				copy.CnclFlg = this.CnclFlg;
				copy.PartTimeFlg = this.PartTimeFlg;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.ScScheduleHdrIdSource != null && existingCopies.Contains(this.ScScheduleHdrIdSource))
				copy.ScScheduleHdrIdSource = existingCopies[this.ScScheduleHdrIdSource] as ScScheduleHdr;
			else
				copy.ScScheduleHdrIdSource = MakeCopyOf(this.ScScheduleHdrIdSource, existingCopies) as ScScheduleHdr;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.GsCodeGenderIdSource != null && existingCopies.Contains(this.GsCodeGenderIdSource))
				copy.GsCodeGenderIdSource = existingCopies[this.GsCodeGenderIdSource] as GsCodeGender;
			else
				copy.GsCodeGenderIdSource = MakeCopyOf(this.GsCodeGenderIdSource, existingCopies) as GsCodeGender;
			if (this.GsCodeLanguageIdSource != null && existingCopies.Contains(this.GsCodeLanguageIdSource))
				copy.GsCodeLanguageIdSource = existingCopies[this.GsCodeLanguageIdSource] as GsCodeLanguage;
			else
				copy.GsCodeLanguageIdSource = MakeCopyOf(this.GsCodeLanguageIdSource, existingCopies) as GsCodeLanguage;
			if (this.SeUserRsultApproveIdSource != null && existingCopies.Contains(this.SeUserRsultApproveIdSource))
				copy.SeUserRsultApproveIdSource = existingCopies[this.SeUserRsultApproveIdSource] as SeUser;
			else
				copy.SeUserRsultApproveIdSource = MakeCopyOf(this.SeUserRsultApproveIdSource, existingCopies) as SeUser;
		
			//deep copy nested objects
			copy.ScScheduleCrossListCollectionGetByScScheduleDtlId1 = (TList<ScScheduleCrossList>) MakeCopyOf(this.ScScheduleCrossListCollectionGetByScScheduleDtlId1, existingCopies); 
			copy.EdExamSuprvsorCollection = (TList<EdExamSuprvsor>) MakeCopyOf(this.EdExamSuprvsorCollection, existingCopies); 
			copy.SvLecNoteCollection = (TList<SvLecNote>) MakeCopyOf(this.SvLecNoteCollection, existingCopies); 
			copy.EdCourseInstanceCollection = (TList<EdCourseInstance>) MakeCopyOf(this.EdCourseInstanceCollection, existingCopies); 
			copy.WfCrsRsltApproveCollection = (TList<WfCrsRsltApprove>) MakeCopyOf(this.WfCrsRsltApproveCollection, existingCopies); 
			copy.CoExamSchdlPlaceCollection = (TList<CoExamSchdlPlace>) MakeCopyOf(this.CoExamSchdlPlaceCollection, existingCopies); 
			copy.ScSectionGroupDtlCollection = (TList<ScSectionGroupDtl>) MakeCopyOf(this.ScSectionGroupDtlCollection, existingCopies); 
			copy.EdStudGroupPreCollection = (TList<EdStudGroupPre>) MakeCopyOf(this.EdStudGroupPreCollection, existingCopies); 
			copy.SvPollHdrCollection = (TList<SvPollHdr>) MakeCopyOf(this.SvPollHdrCollection, existingCopies); 
			copy.ScScheduleCrossListCollectionGetByScScheduleDtlId2 = (TList<ScScheduleCrossList>) MakeCopyOf(this.ScScheduleCrossListCollectionGetByScScheduleDtlId2, existingCopies); 
			copy.ScScheduleDtlDayCollection = (TList<ScScheduleDtlDay>) MakeCopyOf(this.ScScheduleDtlDayCollection, existingCopies); 
			copy.EdStudCourseWaitCollection = (TList<EdStudCourseWait>) MakeCopyOf(this.EdStudCourseWaitCollection, existingCopies); 
			copy.EdStudGroupCollection = (TList<EdStudGroup>) MakeCopyOf(this.EdStudGroupCollection, existingCopies); 
			copy.ScScheduleRsrvCollection = (TList<ScScheduleRsrv>) MakeCopyOf(this.ScScheduleRsrvCollection, existingCopies); 
			copy.ScScheduleDtlExtStfCollection = (TList<ScScheduleDtlExtStf>) MakeCopyOf(this.ScScheduleDtlExtStfCollection, existingCopies); 
			copy.SeBlockTransCollection = (TList<SeBlockTrans>) MakeCopyOf(this.SeBlockTransCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ScScheduleDtl Entity 
		///</summary>
		public virtual ScScheduleDtl Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ScScheduleDtl Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ScScheduleDtl DeepCopy()
		{
			return EntityHelper.Clone<ScScheduleDtl>(this as ScScheduleDtl);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ScScheduleDtlEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ScScheduleDtlEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ScScheduleDtlEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ScScheduleDtlColumn column)
		{
			switch(column)
			{
					case ScScheduleDtlColumn.ScScheduleDtlId:
					return entityData.ScScheduleDtlId != _originalData.ScScheduleDtlId;
					case ScScheduleDtlColumn.ScScheduleHdrId:
					return entityData.ScScheduleHdrId != _originalData.ScScheduleHdrId;
					case ScScheduleDtlColumn.GroupDescrAr:
					return entityData.GroupDescrAr != _originalData.GroupDescrAr;
					case ScScheduleDtlColumn.GroupDescrEn:
					return entityData.GroupDescrEn != _originalData.GroupDescrEn;
					case ScScheduleDtlColumn.GroupOrder:
					return entityData.GroupOrder != _originalData.GroupOrder;
					case ScScheduleDtlColumn.GsCodeGenderId:
					return entityData.GsCodeGenderId != _originalData.GsCodeGenderId;
					case ScScheduleDtlColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case ScScheduleDtlColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case ScScheduleDtlColumn.IsResultApproved:
					return entityData.IsResultApproved != _originalData.IsResultApproved;
					case ScScheduleDtlColumn.SeUserRsultApproveId:
					return entityData.SeUserRsultApproveId != _originalData.SeUserRsultApproveId;
					case ScScheduleDtlColumn.RsultApproveDate:
					return entityData.RsultApproveDate != _originalData.RsultApproveDate;
					case ScScheduleDtlColumn.NoStudents:
					return entityData.NoStudents != _originalData.NoStudents;
					case ScScheduleDtlColumn.NoStudWait:
					return entityData.NoStudWait != _originalData.NoStudWait;
					case ScScheduleDtlColumn.OnlineFlg:
					return entityData.OnlineFlg != _originalData.OnlineFlg;
					case ScScheduleDtlColumn.IsClosed:
					return entityData.IsClosed != _originalData.IsClosed;
					case ScScheduleDtlColumn.NotesEmp:
					return entityData.NotesEmp != _originalData.NotesEmp;
					case ScScheduleDtlColumn.NoStudMax:
					return entityData.NoStudMax != _originalData.NoStudMax;
					case ScScheduleDtlColumn.InternalFlg:
					return entityData.InternalFlg != _originalData.InternalFlg;
					case ScScheduleDtlColumn.WaitlistFlg:
					return entityData.WaitlistFlg != _originalData.WaitlistFlg;
					case ScScheduleDtlColumn.GsCodeLanguageId:
					return entityData.GsCodeLanguageId != _originalData.GsCodeLanguageId;
					case ScScheduleDtlColumn.CnclFlg:
					return entityData.CnclFlg != _originalData.CnclFlg;
					case ScScheduleDtlColumn.PartTimeFlg:
					return entityData.PartTimeFlg != _originalData.PartTimeFlg;
					case ScScheduleDtlColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case ScScheduleDtlColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ScScheduleDtlColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.ScScheduleDtlId != _originalData.ScScheduleDtlId;
			result = result || entityData.ScScheduleHdrId != _originalData.ScScheduleHdrId;
			result = result || entityData.GroupDescrAr != _originalData.GroupDescrAr;
			result = result || entityData.GroupDescrEn != _originalData.GroupDescrEn;
			result = result || entityData.GroupOrder != _originalData.GroupOrder;
			result = result || entityData.GsCodeGenderId != _originalData.GsCodeGenderId;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.IsResultApproved != _originalData.IsResultApproved;
			result = result || entityData.SeUserRsultApproveId != _originalData.SeUserRsultApproveId;
			result = result || entityData.RsultApproveDate != _originalData.RsultApproveDate;
			result = result || entityData.NoStudents != _originalData.NoStudents;
			result = result || entityData.NoStudWait != _originalData.NoStudWait;
			result = result || entityData.OnlineFlg != _originalData.OnlineFlg;
			result = result || entityData.IsClosed != _originalData.IsClosed;
			result = result || entityData.NotesEmp != _originalData.NotesEmp;
			result = result || entityData.NoStudMax != _originalData.NoStudMax;
			result = result || entityData.InternalFlg != _originalData.InternalFlg;
			result = result || entityData.WaitlistFlg != _originalData.WaitlistFlg;
			result = result || entityData.GsCodeLanguageId != _originalData.GsCodeLanguageId;
			result = result || entityData.CnclFlg != _originalData.CnclFlg;
			result = result || entityData.PartTimeFlg != _originalData.PartTimeFlg;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a ScScheduleDtl Entity with the original data.
		///</summary>
		public ScScheduleDtl GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateScScheduleDtl(
				_originalData.ScScheduleDtlId,
				_originalData.ScScheduleHdrId,
				_originalData.GroupDescrAr,
				_originalData.GroupDescrEn,
				_originalData.GroupOrder,
				_originalData.GsCodeGenderId,
				_originalData.Notes,
				_originalData.AsFacultyInfoId,
				_originalData.IsResultApproved,
				_originalData.SeUserRsultApproveId,
				_originalData.RsultApproveDate,
				_originalData.NoStudents,
				_originalData.NoStudWait,
				_originalData.OnlineFlg,
				_originalData.IsClosed,
				_originalData.NotesEmp,
				_originalData.NoStudMax,
				_originalData.InternalFlg,
				_originalData.WaitlistFlg,
				_originalData.GsCodeLanguageId,
				_originalData.CnclFlg,
				_originalData.PartTimeFlg,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (ScScheduleDtl)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ScScheduleDtlBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ScScheduleDtlBase)
				return ValueEquals(this, (ScScheduleDtlBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ScScheduleDtlBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.ScScheduleDtlId.GetHashCode() ^ 
					this.ScScheduleHdrId.GetHashCode() ^ 
					this.GroupDescrAr.GetHashCode() ^ 
					this.GroupDescrEn.GetHashCode() ^ 
					((this.GroupOrder == null) ? string.Empty : this.GroupOrder.ToString()).GetHashCode() ^ 
					((this.GsCodeGenderId == null) ? string.Empty : this.GsCodeGenderId.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					this.IsResultApproved.GetHashCode() ^ 
					((this.SeUserRsultApproveId == null) ? string.Empty : this.SeUserRsultApproveId.ToString()).GetHashCode() ^ 
					((this.RsultApproveDate == null) ? string.Empty : this.RsultApproveDate.ToString()).GetHashCode() ^ 
					((this.NoStudents == null) ? string.Empty : this.NoStudents.ToString()).GetHashCode() ^ 
					((this.NoStudWait == null) ? string.Empty : this.NoStudWait.ToString()).GetHashCode() ^ 
					this.OnlineFlg.GetHashCode() ^ 
					((this.IsClosed == null) ? string.Empty : this.IsClosed.ToString()).GetHashCode() ^ 
					((this.NotesEmp == null) ? string.Empty : this.NotesEmp.ToString()).GetHashCode() ^ 
					((this.NoStudMax == null) ? string.Empty : this.NoStudMax.ToString()).GetHashCode() ^ 
					this.InternalFlg.GetHashCode() ^ 
					((this.WaitlistFlg == null) ? string.Empty : this.WaitlistFlg.ToString()).GetHashCode() ^ 
					((this.GsCodeLanguageId == null) ? string.Empty : this.GsCodeLanguageId.ToString()).GetHashCode() ^ 
					((this.CnclFlg == null) ? string.Empty : this.CnclFlg.ToString()).GetHashCode() ^ 
					((this.PartTimeFlg == null) ? string.Empty : this.PartTimeFlg.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ScScheduleDtlBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ScScheduleDtlBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ScScheduleDtlBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ScScheduleDtlBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ScScheduleDtlBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ScScheduleDtlBase Object1, ScScheduleDtlBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ScScheduleDtlId != Object2.ScScheduleDtlId)
				equal = false;
			if (Object1.ScScheduleHdrId != Object2.ScScheduleHdrId)
				equal = false;
			if (Object1.GroupDescrAr != Object2.GroupDescrAr)
				equal = false;
			if (Object1.GroupDescrEn != Object2.GroupDescrEn)
				equal = false;
			if ( Object1.GroupOrder != null && Object2.GroupOrder != null )
			{
				if (Object1.GroupOrder != Object2.GroupOrder)
					equal = false;
			}
			else if (Object1.GroupOrder == null ^ Object2.GroupOrder == null )
			{
				equal = false;
			}
			if ( Object1.GsCodeGenderId != null && Object2.GsCodeGenderId != null )
			{
				if (Object1.GsCodeGenderId != Object2.GsCodeGenderId)
					equal = false;
			}
			else if (Object1.GsCodeGenderId == null ^ Object2.GsCodeGenderId == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if (Object1.IsResultApproved != Object2.IsResultApproved)
				equal = false;
			if ( Object1.SeUserRsultApproveId != null && Object2.SeUserRsultApproveId != null )
			{
				if (Object1.SeUserRsultApproveId != Object2.SeUserRsultApproveId)
					equal = false;
			}
			else if (Object1.SeUserRsultApproveId == null ^ Object2.SeUserRsultApproveId == null )
			{
				equal = false;
			}
			if ( Object1.RsultApproveDate != null && Object2.RsultApproveDate != null )
			{
				if (Object1.RsultApproveDate != Object2.RsultApproveDate)
					equal = false;
			}
			else if (Object1.RsultApproveDate == null ^ Object2.RsultApproveDate == null )
			{
				equal = false;
			}
			if ( Object1.NoStudents != null && Object2.NoStudents != null )
			{
				if (Object1.NoStudents != Object2.NoStudents)
					equal = false;
			}
			else if (Object1.NoStudents == null ^ Object2.NoStudents == null )
			{
				equal = false;
			}
			if ( Object1.NoStudWait != null && Object2.NoStudWait != null )
			{
				if (Object1.NoStudWait != Object2.NoStudWait)
					equal = false;
			}
			else if (Object1.NoStudWait == null ^ Object2.NoStudWait == null )
			{
				equal = false;
			}
			if (Object1.OnlineFlg != Object2.OnlineFlg)
				equal = false;
			if ( Object1.IsClosed != null && Object2.IsClosed != null )
			{
				if (Object1.IsClosed != Object2.IsClosed)
					equal = false;
			}
			else if (Object1.IsClosed == null ^ Object2.IsClosed == null )
			{
				equal = false;
			}
			if ( Object1.NotesEmp != null && Object2.NotesEmp != null )
			{
				if (Object1.NotesEmp != Object2.NotesEmp)
					equal = false;
			}
			else if (Object1.NotesEmp == null ^ Object2.NotesEmp == null )
			{
				equal = false;
			}
			if ( Object1.NoStudMax != null && Object2.NoStudMax != null )
			{
				if (Object1.NoStudMax != Object2.NoStudMax)
					equal = false;
			}
			else if (Object1.NoStudMax == null ^ Object2.NoStudMax == null )
			{
				equal = false;
			}
			if (Object1.InternalFlg != Object2.InternalFlg)
				equal = false;
			if ( Object1.WaitlistFlg != null && Object2.WaitlistFlg != null )
			{
				if (Object1.WaitlistFlg != Object2.WaitlistFlg)
					equal = false;
			}
			else if (Object1.WaitlistFlg == null ^ Object2.WaitlistFlg == null )
			{
				equal = false;
			}
			if ( Object1.GsCodeLanguageId != null && Object2.GsCodeLanguageId != null )
			{
				if (Object1.GsCodeLanguageId != Object2.GsCodeLanguageId)
					equal = false;
			}
			else if (Object1.GsCodeLanguageId == null ^ Object2.GsCodeLanguageId == null )
			{
				equal = false;
			}
			if ( Object1.CnclFlg != null && Object2.CnclFlg != null )
			{
				if (Object1.CnclFlg != Object2.CnclFlg)
					equal = false;
			}
			else if (Object1.CnclFlg == null ^ Object2.CnclFlg == null )
			{
				equal = false;
			}
			if ( Object1.PartTimeFlg != null && Object2.PartTimeFlg != null )
			{
				if (Object1.PartTimeFlg != Object2.PartTimeFlg)
					equal = false;
			}
			else if (Object1.PartTimeFlg == null ^ Object2.PartTimeFlg == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ScScheduleDtlBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ScScheduleDtlComparer GetComparer()
        {
            return new ScScheduleDtlComparer();
        }
        */

        // Comparer delegates back to ScScheduleDtl
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ScScheduleDtl rhs, ScScheduleDtlColumn which)
        {
            switch (which)
            {
            	
            	
            	case ScScheduleDtlColumn.ScScheduleDtlId:
            		return this.ScScheduleDtlId.CompareTo(rhs.ScScheduleDtlId);
            		
            		                 
            	
            	
            	case ScScheduleDtlColumn.ScScheduleHdrId:
            		return this.ScScheduleHdrId.CompareTo(rhs.ScScheduleHdrId);
            		
            		                 
            	
            	
            	case ScScheduleDtlColumn.GroupDescrAr:
            		return this.GroupDescrAr.CompareTo(rhs.GroupDescrAr);
            		
            		                 
            	
            	
            	case ScScheduleDtlColumn.GroupDescrEn:
            		return this.GroupDescrEn.CompareTo(rhs.GroupDescrEn);
            		
            		                 
            	
            	
            	case ScScheduleDtlColumn.GroupOrder:
            		return this.GroupOrder.Value.CompareTo(rhs.GroupOrder.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlColumn.GsCodeGenderId:
            		return this.GsCodeGenderId.Value.CompareTo(rhs.GsCodeGenderId.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case ScScheduleDtlColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlColumn.IsResultApproved:
            		return this.IsResultApproved.CompareTo(rhs.IsResultApproved);
            		
            		                 
            	
            	
            	case ScScheduleDtlColumn.SeUserRsultApproveId:
            		return this.SeUserRsultApproveId.Value.CompareTo(rhs.SeUserRsultApproveId.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlColumn.RsultApproveDate:
            		return this.RsultApproveDate.Value.CompareTo(rhs.RsultApproveDate.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlColumn.NoStudents:
            		return this.NoStudents.Value.CompareTo(rhs.NoStudents.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlColumn.NoStudWait:
            		return this.NoStudWait.Value.CompareTo(rhs.NoStudWait.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlColumn.OnlineFlg:
            		return this.OnlineFlg.CompareTo(rhs.OnlineFlg);
            		
            		                 
            	
            	
            	case ScScheduleDtlColumn.IsClosed:
            		return this.IsClosed.Value.CompareTo(rhs.IsClosed.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlColumn.NotesEmp:
            		return this.NotesEmp.CompareTo(rhs.NotesEmp);
            		
            		                 
            	
            	
            	case ScScheduleDtlColumn.NoStudMax:
            		return this.NoStudMax.Value.CompareTo(rhs.NoStudMax.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlColumn.InternalFlg:
            		return this.InternalFlg.CompareTo(rhs.InternalFlg);
            		
            		                 
            	
            	
            	case ScScheduleDtlColumn.WaitlistFlg:
            		return this.WaitlistFlg.Value.CompareTo(rhs.WaitlistFlg.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlColumn.GsCodeLanguageId:
            		return this.GsCodeLanguageId.Value.CompareTo(rhs.GsCodeLanguageId.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlColumn.CnclFlg:
            		return this.CnclFlg.Value.CompareTo(rhs.CnclFlg.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlColumn.PartTimeFlg:
            		return this.PartTimeFlg.Value.CompareTo(rhs.PartTimeFlg.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case ScScheduleDtlColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ScScheduleDtlKey> Members
		
		// member variable for the EntityId property
		private ScScheduleDtlKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ScScheduleDtlKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ScScheduleDtlKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ScScheduleDtl")
					.Append("|").Append( this.ScScheduleDtlId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{25}{24}- ScScheduleDtlId: {0}{24}- ScScheduleHdrId: {1}{24}- GroupDescrAr: {2}{24}- GroupDescrEn: {3}{24}- GroupOrder: {4}{24}- GsCodeGenderId: {5}{24}- Notes: {6}{24}- AsFacultyInfoId: {7}{24}- IsResultApproved: {8}{24}- SeUserRsultApproveId: {9}{24}- RsultApproveDate: {10}{24}- NoStudents: {11}{24}- NoStudWait: {12}{24}- OnlineFlg: {13}{24}- IsClosed: {14}{24}- NotesEmp: {15}{24}- NoStudMax: {16}{24}- InternalFlg: {17}{24}- WaitlistFlg: {18}{24}- GsCodeLanguageId: {19}{24}- CnclFlg: {20}{24}- PartTimeFlg: {21}{24}- SeUserId: {22}{24}- LastDate: {23}{24}{26}", 
				this.ScScheduleDtlId,
				this.ScScheduleHdrId,
				this.GroupDescrAr,
				this.GroupDescrEn,
				(this.GroupOrder == null) ? string.Empty : this.GroupOrder.ToString(),
				(this.GsCodeGenderId == null) ? string.Empty : this.GsCodeGenderId.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				this.IsResultApproved,
				(this.SeUserRsultApproveId == null) ? string.Empty : this.SeUserRsultApproveId.ToString(),
				(this.RsultApproveDate == null) ? string.Empty : this.RsultApproveDate.ToString(),
				(this.NoStudents == null) ? string.Empty : this.NoStudents.ToString(),
				(this.NoStudWait == null) ? string.Empty : this.NoStudWait.ToString(),
				this.OnlineFlg,
				(this.IsClosed == null) ? string.Empty : this.IsClosed.ToString(),
				(this.NotesEmp == null) ? string.Empty : this.NotesEmp.ToString(),
				(this.NoStudMax == null) ? string.Empty : this.NoStudMax.ToString(),
				this.InternalFlg,
				(this.WaitlistFlg == null) ? string.Empty : this.WaitlistFlg.ToString(),
				(this.GsCodeLanguageId == null) ? string.Empty : this.GsCodeLanguageId.ToString(),
				(this.CnclFlg == null) ? string.Empty : this.CnclFlg.ToString(),
				(this.PartTimeFlg == null) ? string.Empty : this.PartTimeFlg.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SC_SCHEDULE_DTL' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ScScheduleDtlEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SC_SCHEDULE_DTL_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SC_SCHEDULE_DTL"</remarks>
		public System.Decimal ScScheduleDtlId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalScScheduleDtlId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SC_SCHEDULE_HDR_ID : 
		/// </summary>
		public System.Decimal		  ScScheduleHdrId = 0.0m;
		
		/// <summary>
		/// GROUP_DESCR_AR : 
		/// </summary>
		public System.String		  GroupDescrAr = string.Empty;
		
		/// <summary>
		/// GROUP_DESCR_EN : 
		/// </summary>
		public System.String		  GroupDescrEn = string.Empty;
		
		/// <summary>
		/// GROUP_ORDER : 
		/// </summary>
		public System.Decimal?		  GroupOrder = null;
		
		/// <summary>
		/// GS_CODE_GENDER_ID : 
		/// </summary>
		public System.Decimal?		  GsCodeGenderId = null;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// IS_RESULT_APPROVED : 
		/// </summary>
		public System.Decimal		  IsResultApproved = 0.0m;
		
		/// <summary>
		/// SE_USER_RSULT_APPROVE_ID : 
		/// </summary>
		public System.Decimal?		  SeUserRsultApproveId = null;
		
		/// <summary>
		/// RSULT_APPROVE_DATE : 
		/// </summary>
		public System.DateTime?		  RsultApproveDate = null;
		
		/// <summary>
		/// NO_STUDENTS : 
		/// </summary>
		public System.Decimal?		  NoStudents = null;
		
		/// <summary>
		/// NO_STUD_WAIT : 
		/// </summary>
		public System.Decimal?		  NoStudWait = null;
		
		/// <summary>
		/// ONLINE_FLG : 
		/// </summary>
		public System.Decimal		  OnlineFlg = 0.0m;
		
		/// <summary>
		/// IS_CLOSED : 
		/// </summary>
		public System.Decimal?		  IsClosed = null;
		
		/// <summary>
		/// NOTES_EMP : 
		/// </summary>
		public System.String		  NotesEmp = null;
		
		/// <summary>
		/// NO_STUD_MAX : 
		/// </summary>
		public System.Decimal?		  NoStudMax = null;
		
		/// <summary>
		/// INTERNAL_FLG : 
		/// </summary>
		public System.Decimal		  InternalFlg = 0.0m;
		
		/// <summary>
		/// WAITLIST_FLG : 
		/// </summary>
		public System.Decimal?		  WaitlistFlg = null;
		
		/// <summary>
		/// GS_CODE_LANGUAGE_ID : 
		/// </summary>
		public System.Decimal?		  GsCodeLanguageId = null;
		
		/// <summary>
		/// CNCL_FLG : 
		/// </summary>
		public System.Decimal?		  CnclFlg = null;
		
		/// <summary>
		/// PART_TIME_FLG : 
		/// </summary>
		public System.Int32?		  PartTimeFlg = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private ScScheduleHdr _scScheduleHdrIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScScheduleHdr"/>.
		/// </summary>
		/// <value>The source ScScheduleHdr for ScScheduleHdrId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScScheduleHdr ScScheduleHdrIdSource
      	{
            get { return this._scScheduleHdrIdSource; }
            set { this._scScheduleHdrIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private GsCodeGender _gsCodeGenderIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeGender"/>.
		/// </summary>
		/// <value>The source GsCodeGender for GsCodeGenderId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeGender GsCodeGenderIdSource
      	{
            get { return this._gsCodeGenderIdSource; }
            set { this._gsCodeGenderIdSource = value; }
      	}
		private GsCodeLanguage _gsCodeLanguageIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeLanguage"/>.
		/// </summary>
		/// <value>The source GsCodeLanguage for GsCodeLanguageId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeLanguage GsCodeLanguageIdSource
      	{
            get { return this._gsCodeLanguageIdSource; }
            set { this._gsCodeLanguageIdSource = value; }
      	}
		private SeUser _seUserRsultApproveIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserRsultApproveId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeUser SeUserRsultApproveIdSource
      	{
            get { return this._seUserRsultApproveIdSource; }
            set { this._seUserRsultApproveIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region ScScheduleCrossListCollectionGetByScScheduleDtlId1
		
		private TList<ScScheduleCrossList> _scScheduleCrossListScScheduleDtlId2GetByScScheduleDtlId1;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scScheduleCrossListScScheduleDtlId2GetByScScheduleDtlId1
		/// </summary>
		
		public TList<ScScheduleCrossList> ScScheduleCrossListCollectionGetByScScheduleDtlId1
		{
			get
			{
				if (_scScheduleCrossListScScheduleDtlId2GetByScScheduleDtlId1 == null)
				{
				_scScheduleCrossListScScheduleDtlId2GetByScScheduleDtlId1 = new TList<ScScheduleCrossList>();
				}
	
				return _scScheduleCrossListScScheduleDtlId2GetByScScheduleDtlId1;
			}
			set { _scScheduleCrossListScScheduleDtlId2GetByScScheduleDtlId1 = value; }
		}
		
		#endregion

		#region EdExamSuprvsorCollection
		
		private TList<EdExamSuprvsor> _edExamSuprvsorScScheduleDtlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edExamSuprvsorScScheduleDtlId
		/// </summary>
		
		public TList<EdExamSuprvsor> EdExamSuprvsorCollection
		{
			get
			{
				if (_edExamSuprvsorScScheduleDtlId == null)
				{
				_edExamSuprvsorScScheduleDtlId = new TList<EdExamSuprvsor>();
				}
	
				return _edExamSuprvsorScScheduleDtlId;
			}
			set { _edExamSuprvsorScScheduleDtlId = value; }
		}
		
		#endregion

		#region SvLecNoteCollection
		
		private TList<SvLecNote> _svLecNoteScScheduleDtlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _svLecNoteScScheduleDtlId
		/// </summary>
		
		public TList<SvLecNote> SvLecNoteCollection
		{
			get
			{
				if (_svLecNoteScScheduleDtlId == null)
				{
				_svLecNoteScScheduleDtlId = new TList<SvLecNote>();
				}
	
				return _svLecNoteScScheduleDtlId;
			}
			set { _svLecNoteScScheduleDtlId = value; }
		}
		
		#endregion

		#region EdCourseInstanceCollection
		
		private TList<EdCourseInstance> _edCourseInstanceScScheduleDtlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edCourseInstanceScScheduleDtlId
		/// </summary>
		
		public TList<EdCourseInstance> EdCourseInstanceCollection
		{
			get
			{
				if (_edCourseInstanceScScheduleDtlId == null)
				{
				_edCourseInstanceScScheduleDtlId = new TList<EdCourseInstance>();
				}
	
				return _edCourseInstanceScScheduleDtlId;
			}
			set { _edCourseInstanceScScheduleDtlId = value; }
		}
		
		#endregion

		#region WfCrsRsltApproveCollection
		
		private TList<WfCrsRsltApprove> _wfCrsRsltApproveScScheduleDtlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _wfCrsRsltApproveScScheduleDtlId
		/// </summary>
		
		public TList<WfCrsRsltApprove> WfCrsRsltApproveCollection
		{
			get
			{
				if (_wfCrsRsltApproveScScheduleDtlId == null)
				{
				_wfCrsRsltApproveScScheduleDtlId = new TList<WfCrsRsltApprove>();
				}
	
				return _wfCrsRsltApproveScScheduleDtlId;
			}
			set { _wfCrsRsltApproveScScheduleDtlId = value; }
		}
		
		#endregion

		#region CoExamSchdlPlaceCollection
		
		private TList<CoExamSchdlPlace> _coExamSchdlPlaceScScheduleDtlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _coExamSchdlPlaceScScheduleDtlId
		/// </summary>
		
		public TList<CoExamSchdlPlace> CoExamSchdlPlaceCollection
		{
			get
			{
				if (_coExamSchdlPlaceScScheduleDtlId == null)
				{
				_coExamSchdlPlaceScScheduleDtlId = new TList<CoExamSchdlPlace>();
				}
	
				return _coExamSchdlPlaceScScheduleDtlId;
			}
			set { _coExamSchdlPlaceScScheduleDtlId = value; }
		}
		
		#endregion

		#region ScSectionGroupDtlCollection
		
		private TList<ScSectionGroupDtl> _scSectionGroupDtlScScheduleDtlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scSectionGroupDtlScScheduleDtlId
		/// </summary>
		
		public TList<ScSectionGroupDtl> ScSectionGroupDtlCollection
		{
			get
			{
				if (_scSectionGroupDtlScScheduleDtlId == null)
				{
				_scSectionGroupDtlScScheduleDtlId = new TList<ScSectionGroupDtl>();
				}
	
				return _scSectionGroupDtlScScheduleDtlId;
			}
			set { _scSectionGroupDtlScScheduleDtlId = value; }
		}
		
		#endregion

		#region EdStudGroupPreCollection
		
		private TList<EdStudGroupPre> _edStudGroupPreScScheduleDtlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudGroupPreScScheduleDtlId
		/// </summary>
		
		public TList<EdStudGroupPre> EdStudGroupPreCollection
		{
			get
			{
				if (_edStudGroupPreScScheduleDtlId == null)
				{
				_edStudGroupPreScScheduleDtlId = new TList<EdStudGroupPre>();
				}
	
				return _edStudGroupPreScScheduleDtlId;
			}
			set { _edStudGroupPreScScheduleDtlId = value; }
		}
		
		#endregion

		#region SvPollHdrCollection
		
		private TList<SvPollHdr> _svPollHdrScScheduleDtlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _svPollHdrScScheduleDtlId
		/// </summary>
		
		public TList<SvPollHdr> SvPollHdrCollection
		{
			get
			{
				if (_svPollHdrScScheduleDtlId == null)
				{
				_svPollHdrScScheduleDtlId = new TList<SvPollHdr>();
				}
	
				return _svPollHdrScScheduleDtlId;
			}
			set { _svPollHdrScScheduleDtlId = value; }
		}
		
		#endregion

		#region ScScheduleCrossListCollectionGetByScScheduleDtlId2
		
		private TList<ScScheduleCrossList> _scScheduleCrossListScScheduleDtlId2GetByScScheduleDtlId2;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scScheduleCrossListScScheduleDtlId2GetByScScheduleDtlId2
		/// </summary>
		
		public TList<ScScheduleCrossList> ScScheduleCrossListCollectionGetByScScheduleDtlId2
		{
			get
			{
				if (_scScheduleCrossListScScheduleDtlId2GetByScScheduleDtlId2 == null)
				{
				_scScheduleCrossListScScheduleDtlId2GetByScScheduleDtlId2 = new TList<ScScheduleCrossList>();
				}
	
				return _scScheduleCrossListScScheduleDtlId2GetByScScheduleDtlId2;
			}
			set { _scScheduleCrossListScScheduleDtlId2GetByScScheduleDtlId2 = value; }
		}
		
		#endregion

		#region ScScheduleDtlDayCollection
		
		private TList<ScScheduleDtlDay> _scScheduleDtlDayScScheduleDtlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scScheduleDtlDayScScheduleDtlId
		/// </summary>
		
		public TList<ScScheduleDtlDay> ScScheduleDtlDayCollection
		{
			get
			{
				if (_scScheduleDtlDayScScheduleDtlId == null)
				{
				_scScheduleDtlDayScScheduleDtlId = new TList<ScScheduleDtlDay>();
				}
	
				return _scScheduleDtlDayScScheduleDtlId;
			}
			set { _scScheduleDtlDayScScheduleDtlId = value; }
		}
		
		#endregion

		#region EdStudCourseWaitCollection
		
		private TList<EdStudCourseWait> _edStudCourseWaitScScheduleDtlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCourseWaitScScheduleDtlId
		/// </summary>
		
		public TList<EdStudCourseWait> EdStudCourseWaitCollection
		{
			get
			{
				if (_edStudCourseWaitScScheduleDtlId == null)
				{
				_edStudCourseWaitScScheduleDtlId = new TList<EdStudCourseWait>();
				}
	
				return _edStudCourseWaitScScheduleDtlId;
			}
			set { _edStudCourseWaitScScheduleDtlId = value; }
		}
		
		#endregion

		#region EdStudGroupCollection
		
		private TList<EdStudGroup> _edStudGroupScScheduleDtlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudGroupScScheduleDtlId
		/// </summary>
		
		public TList<EdStudGroup> EdStudGroupCollection
		{
			get
			{
				if (_edStudGroupScScheduleDtlId == null)
				{
				_edStudGroupScScheduleDtlId = new TList<EdStudGroup>();
				}
	
				return _edStudGroupScScheduleDtlId;
			}
			set { _edStudGroupScScheduleDtlId = value; }
		}
		
		#endregion

		#region ScScheduleRsrvCollection
		
		private TList<ScScheduleRsrv> _scScheduleRsrvScScheduleDtlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scScheduleRsrvScScheduleDtlId
		/// </summary>
		
		public TList<ScScheduleRsrv> ScScheduleRsrvCollection
		{
			get
			{
				if (_scScheduleRsrvScScheduleDtlId == null)
				{
				_scScheduleRsrvScScheduleDtlId = new TList<ScScheduleRsrv>();
				}
	
				return _scScheduleRsrvScScheduleDtlId;
			}
			set { _scScheduleRsrvScScheduleDtlId = value; }
		}
		
		#endregion

		#region ScScheduleDtlExtStfCollection
		
		private TList<ScScheduleDtlExtStf> _scScheduleDtlExtStfScScheduleDtlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scScheduleDtlExtStfScScheduleDtlId
		/// </summary>
		
		public TList<ScScheduleDtlExtStf> ScScheduleDtlExtStfCollection
		{
			get
			{
				if (_scScheduleDtlExtStfScScheduleDtlId == null)
				{
				_scScheduleDtlExtStfScScheduleDtlId = new TList<ScScheduleDtlExtStf>();
				}
	
				return _scScheduleDtlExtStfScScheduleDtlId;
			}
			set { _scScheduleDtlExtStfScScheduleDtlId = value; }
		}
		
		#endregion

		#region SeBlockTransCollection
		
		private TList<SeBlockTrans> _seBlockTransScScheduleDtlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _seBlockTransScScheduleDtlId
		/// </summary>
		
		public TList<SeBlockTrans> SeBlockTransCollection
		{
			get
			{
				if (_seBlockTransScScheduleDtlId == null)
				{
				_seBlockTransScScheduleDtlId = new TList<SeBlockTrans>();
				}
	
				return _seBlockTransScScheduleDtlId;
			}
			set { _seBlockTransScScheduleDtlId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ScScheduleDtlEntityData _tmp = new ScScheduleDtlEntityData();
						
			_tmp.ScScheduleDtlId = this.ScScheduleDtlId;
			_tmp.OriginalScScheduleDtlId = this.OriginalScScheduleDtlId;
			
			_tmp.ScScheduleHdrId = this.ScScheduleHdrId;
			_tmp.GroupDescrAr = this.GroupDescrAr;
			_tmp.GroupDescrEn = this.GroupDescrEn;
			_tmp.GroupOrder = this.GroupOrder;
			_tmp.GsCodeGenderId = this.GsCodeGenderId;
			_tmp.Notes = this.Notes;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.IsResultApproved = this.IsResultApproved;
			_tmp.SeUserRsultApproveId = this.SeUserRsultApproveId;
			_tmp.RsultApproveDate = this.RsultApproveDate;
			_tmp.NoStudents = this.NoStudents;
			_tmp.NoStudWait = this.NoStudWait;
			_tmp.OnlineFlg = this.OnlineFlg;
			_tmp.IsClosed = this.IsClosed;
			_tmp.NotesEmp = this.NotesEmp;
			_tmp.NoStudMax = this.NoStudMax;
			_tmp.InternalFlg = this.InternalFlg;
			_tmp.WaitlistFlg = this.WaitlistFlg;
			_tmp.GsCodeLanguageId = this.GsCodeLanguageId;
			_tmp.CnclFlg = this.CnclFlg;
			_tmp.PartTimeFlg = this.PartTimeFlg;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.ScScheduleHdrIdSource != null)
				_tmp.ScScheduleHdrIdSource = MakeCopyOf(this.ScScheduleHdrIdSource) as ScScheduleHdr;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.GsCodeGenderIdSource != null)
				_tmp.GsCodeGenderIdSource = MakeCopyOf(this.GsCodeGenderIdSource) as GsCodeGender;
			if (this.GsCodeLanguageIdSource != null)
				_tmp.GsCodeLanguageIdSource = MakeCopyOf(this.GsCodeLanguageIdSource) as GsCodeLanguage;
			if (this.SeUserRsultApproveIdSource != null)
				_tmp.SeUserRsultApproveIdSource = MakeCopyOf(this.SeUserRsultApproveIdSource) as SeUser;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._scScheduleCrossListScScheduleDtlId2GetByScScheduleDtlId1 != null)
				_tmp.ScScheduleCrossListCollectionGetByScScheduleDtlId1 = (TList<ScScheduleCrossList>) MakeCopyOf(this.ScScheduleCrossListCollectionGetByScScheduleDtlId1); 
			if (this._edExamSuprvsorScScheduleDtlId != null)
				_tmp.EdExamSuprvsorCollection = (TList<EdExamSuprvsor>) MakeCopyOf(this.EdExamSuprvsorCollection); 
			if (this._svLecNoteScScheduleDtlId != null)
				_tmp.SvLecNoteCollection = (TList<SvLecNote>) MakeCopyOf(this.SvLecNoteCollection); 
			if (this._edCourseInstanceScScheduleDtlId != null)
				_tmp.EdCourseInstanceCollection = (TList<EdCourseInstance>) MakeCopyOf(this.EdCourseInstanceCollection); 
			if (this._wfCrsRsltApproveScScheduleDtlId != null)
				_tmp.WfCrsRsltApproveCollection = (TList<WfCrsRsltApprove>) MakeCopyOf(this.WfCrsRsltApproveCollection); 
			if (this._coExamSchdlPlaceScScheduleDtlId != null)
				_tmp.CoExamSchdlPlaceCollection = (TList<CoExamSchdlPlace>) MakeCopyOf(this.CoExamSchdlPlaceCollection); 
			if (this._scSectionGroupDtlScScheduleDtlId != null)
				_tmp.ScSectionGroupDtlCollection = (TList<ScSectionGroupDtl>) MakeCopyOf(this.ScSectionGroupDtlCollection); 
			if (this._edStudGroupPreScScheduleDtlId != null)
				_tmp.EdStudGroupPreCollection = (TList<EdStudGroupPre>) MakeCopyOf(this.EdStudGroupPreCollection); 
			if (this._svPollHdrScScheduleDtlId != null)
				_tmp.SvPollHdrCollection = (TList<SvPollHdr>) MakeCopyOf(this.SvPollHdrCollection); 
			if (this._scScheduleCrossListScScheduleDtlId2GetByScScheduleDtlId2 != null)
				_tmp.ScScheduleCrossListCollectionGetByScScheduleDtlId2 = (TList<ScScheduleCrossList>) MakeCopyOf(this.ScScheduleCrossListCollectionGetByScScheduleDtlId2); 
			if (this._scScheduleDtlDayScScheduleDtlId != null)
				_tmp.ScScheduleDtlDayCollection = (TList<ScScheduleDtlDay>) MakeCopyOf(this.ScScheduleDtlDayCollection); 
			if (this._edStudCourseWaitScScheduleDtlId != null)
				_tmp.EdStudCourseWaitCollection = (TList<EdStudCourseWait>) MakeCopyOf(this.EdStudCourseWaitCollection); 
			if (this._edStudGroupScScheduleDtlId != null)
				_tmp.EdStudGroupCollection = (TList<EdStudGroup>) MakeCopyOf(this.EdStudGroupCollection); 
			if (this._scScheduleRsrvScScheduleDtlId != null)
				_tmp.ScScheduleRsrvCollection = (TList<ScScheduleRsrv>) MakeCopyOf(this.ScScheduleRsrvCollection); 
			if (this._scScheduleDtlExtStfScScheduleDtlId != null)
				_tmp.ScScheduleDtlExtStfCollection = (TList<ScScheduleDtlExtStf>) MakeCopyOf(this.ScScheduleDtlExtStfCollection); 
			if (this._seBlockTransScScheduleDtlId != null)
				_tmp.SeBlockTransCollection = (TList<SeBlockTrans>) MakeCopyOf(this.SeBlockTransCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ScScheduleDtlEntityData _tmp = new ScScheduleDtlEntityData();
						
			_tmp.ScScheduleDtlId = this.ScScheduleDtlId;
			_tmp.OriginalScScheduleDtlId = this.OriginalScScheduleDtlId;
			
			_tmp.ScScheduleHdrId = this.ScScheduleHdrId;
			_tmp.GroupDescrAr = this.GroupDescrAr;
			_tmp.GroupDescrEn = this.GroupDescrEn;
			_tmp.GroupOrder = this.GroupOrder;
			_tmp.GsCodeGenderId = this.GsCodeGenderId;
			_tmp.Notes = this.Notes;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.IsResultApproved = this.IsResultApproved;
			_tmp.SeUserRsultApproveId = this.SeUserRsultApproveId;
			_tmp.RsultApproveDate = this.RsultApproveDate;
			_tmp.NoStudents = this.NoStudents;
			_tmp.NoStudWait = this.NoStudWait;
			_tmp.OnlineFlg = this.OnlineFlg;
			_tmp.IsClosed = this.IsClosed;
			_tmp.NotesEmp = this.NotesEmp;
			_tmp.NoStudMax = this.NoStudMax;
			_tmp.InternalFlg = this.InternalFlg;
			_tmp.WaitlistFlg = this.WaitlistFlg;
			_tmp.GsCodeLanguageId = this.GsCodeLanguageId;
			_tmp.CnclFlg = this.CnclFlg;
			_tmp.PartTimeFlg = this.PartTimeFlg;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.ScScheduleHdrIdSource != null && existingCopies.Contains(this.ScScheduleHdrIdSource))
				_tmp.ScScheduleHdrIdSource = existingCopies[this.ScScheduleHdrIdSource] as ScScheduleHdr;
			else
				_tmp.ScScheduleHdrIdSource = MakeCopyOf(this.ScScheduleHdrIdSource, existingCopies) as ScScheduleHdr;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.GsCodeGenderIdSource != null && existingCopies.Contains(this.GsCodeGenderIdSource))
				_tmp.GsCodeGenderIdSource = existingCopies[this.GsCodeGenderIdSource] as GsCodeGender;
			else
				_tmp.GsCodeGenderIdSource = MakeCopyOf(this.GsCodeGenderIdSource, existingCopies) as GsCodeGender;
			if (this.GsCodeLanguageIdSource != null && existingCopies.Contains(this.GsCodeLanguageIdSource))
				_tmp.GsCodeLanguageIdSource = existingCopies[this.GsCodeLanguageIdSource] as GsCodeLanguage;
			else
				_tmp.GsCodeLanguageIdSource = MakeCopyOf(this.GsCodeLanguageIdSource, existingCopies) as GsCodeLanguage;
			if (this.SeUserRsultApproveIdSource != null && existingCopies.Contains(this.SeUserRsultApproveIdSource))
				_tmp.SeUserRsultApproveIdSource = existingCopies[this.SeUserRsultApproveIdSource] as SeUser;
			else
				_tmp.SeUserRsultApproveIdSource = MakeCopyOf(this.SeUserRsultApproveIdSource, existingCopies) as SeUser;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.ScScheduleCrossListCollectionGetByScScheduleDtlId1 = (TList<ScScheduleCrossList>) MakeCopyOf(this.ScScheduleCrossListCollectionGetByScScheduleDtlId1, existingCopies); 
			_tmp.EdExamSuprvsorCollection = (TList<EdExamSuprvsor>) MakeCopyOf(this.EdExamSuprvsorCollection, existingCopies); 
			_tmp.SvLecNoteCollection = (TList<SvLecNote>) MakeCopyOf(this.SvLecNoteCollection, existingCopies); 
			_tmp.EdCourseInstanceCollection = (TList<EdCourseInstance>) MakeCopyOf(this.EdCourseInstanceCollection, existingCopies); 
			_tmp.WfCrsRsltApproveCollection = (TList<WfCrsRsltApprove>) MakeCopyOf(this.WfCrsRsltApproveCollection, existingCopies); 
			_tmp.CoExamSchdlPlaceCollection = (TList<CoExamSchdlPlace>) MakeCopyOf(this.CoExamSchdlPlaceCollection, existingCopies); 
			_tmp.ScSectionGroupDtlCollection = (TList<ScSectionGroupDtl>) MakeCopyOf(this.ScSectionGroupDtlCollection, existingCopies); 
			_tmp.EdStudGroupPreCollection = (TList<EdStudGroupPre>) MakeCopyOf(this.EdStudGroupPreCollection, existingCopies); 
			_tmp.SvPollHdrCollection = (TList<SvPollHdr>) MakeCopyOf(this.SvPollHdrCollection, existingCopies); 
			_tmp.ScScheduleCrossListCollectionGetByScScheduleDtlId2 = (TList<ScScheduleCrossList>) MakeCopyOf(this.ScScheduleCrossListCollectionGetByScScheduleDtlId2, existingCopies); 
			_tmp.ScScheduleDtlDayCollection = (TList<ScScheduleDtlDay>) MakeCopyOf(this.ScScheduleDtlDayCollection, existingCopies); 
			_tmp.EdStudCourseWaitCollection = (TList<EdStudCourseWait>) MakeCopyOf(this.EdStudCourseWaitCollection, existingCopies); 
			_tmp.EdStudGroupCollection = (TList<EdStudGroup>) MakeCopyOf(this.EdStudGroupCollection, existingCopies); 
			_tmp.ScScheduleRsrvCollection = (TList<ScScheduleRsrv>) MakeCopyOf(this.ScScheduleRsrvCollection, existingCopies); 
			_tmp.ScScheduleDtlExtStfCollection = (TList<ScScheduleDtlExtStf>) MakeCopyOf(this.ScScheduleDtlExtStfCollection, existingCopies); 
			_tmp.SeBlockTransCollection = (TList<SeBlockTrans>) MakeCopyOf(this.SeBlockTransCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScScheduleDtlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ScScheduleDtlColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScScheduleDtlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ScScheduleDtlColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScScheduleDtlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ScScheduleDtlColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ScScheduleDtlEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ScScheduleDtlEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ScScheduleDtlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ScScheduleDtlColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ScScheduleDtlEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ScScheduleDtlEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ScScheduleDtlEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ScScheduleDtl"/> object.
	/// </remarks>
	public class ScScheduleDtlEventArgs : System.EventArgs
	{
		private ScScheduleDtlColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ScScheduleDtlEventArgs class.
		///</summary>
		public ScScheduleDtlEventArgs(ScScheduleDtlColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ScScheduleDtlEventArgs class.
		///</summary>
		public ScScheduleDtlEventArgs(ScScheduleDtlColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ScScheduleDtlColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ScScheduleDtlColumn" />
		public ScScheduleDtlColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ScScheduleDtl related events.
	///</summary>
	public delegate void ScScheduleDtlEventHandler(object sender, ScScheduleDtlEventArgs e);
	
	#region ScScheduleDtlComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ScScheduleDtlComparer : System.Collections.Generic.IComparer<ScScheduleDtl>
	{
		ScScheduleDtlColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ScScheduleDtlComparer"/> class.
        /// </summary>
		public ScScheduleDtlComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ScScheduleDtlComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ScScheduleDtlComparer(ScScheduleDtlColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="ScScheduleDtl"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="ScScheduleDtl"/> to compare.</param>
        /// <param name="b">The second <c>ScScheduleDtl</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ScScheduleDtl a, ScScheduleDtl b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ScScheduleDtl entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ScScheduleDtl a, ScScheduleDtl b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ScScheduleDtlColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ScScheduleDtlKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ScScheduleDtl"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ScScheduleDtlKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlKey class.
		/// </summary>
		public ScScheduleDtlKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlKey class.
		/// </summary>
		public ScScheduleDtlKey(ScScheduleDtlBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.ScScheduleDtlId = entity.ScScheduleDtlId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ScScheduleDtlKey class.
		/// </summary>
		public ScScheduleDtlKey(System.Decimal _scScheduleDtlId)
		{
			#region Init Properties

			this.ScScheduleDtlId = _scScheduleDtlId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ScScheduleDtlBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ScScheduleDtlBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ScScheduleDtlId property
		private System.Decimal _scScheduleDtlId;
		
		/// <summary>
		/// Gets or sets the ScScheduleDtlId property.
		/// </summary>
		public System.Decimal ScScheduleDtlId
		{
			get { return _scScheduleDtlId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ScScheduleDtlId = value;
				
				_scScheduleDtlId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ScScheduleDtlId = ( values["ScScheduleDtlId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["ScScheduleDtlId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ScScheduleDtlId", ScScheduleDtlId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ScScheduleDtlId: {0}{1}",
								ScScheduleDtlId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ScScheduleDtlColumn Enum
	
	/// <summary>
	/// Enumerate the ScScheduleDtl columns.
	/// </summary>
	[Serializable]
	public enum ScScheduleDtlColumn : int
	{
		/// <summary>
		/// ScScheduleDtlId : 
		/// </summary>
		[EnumTextValue("SC_SCHEDULE_DTL_ID")]
		[ColumnEnum("SC_SCHEDULE_DTL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		ScScheduleDtlId = 1,
		/// <summary>
		/// ScScheduleHdrId : 
		/// </summary>
		[EnumTextValue("SC_SCHEDULE_HDR_ID")]
		[ColumnEnum("SC_SCHEDULE_HDR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		ScScheduleHdrId = 2,
		/// <summary>
		/// GroupDescrAr : 
		/// </summary>
		[EnumTextValue("GROUP_DESCR_AR")]
		[ColumnEnum("GROUP_DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		GroupDescrAr = 3,
		/// <summary>
		/// GroupDescrEn : 
		/// </summary>
		[EnumTextValue("GROUP_DESCR_EN")]
		[ColumnEnum("GROUP_DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		GroupDescrEn = 4,
		/// <summary>
		/// GroupOrder : 
		/// </summary>
		[EnumTextValue("GROUP_ORDER")]
		[ColumnEnum("GROUP_ORDER", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GroupOrder = 5,
		/// <summary>
		/// GsCodeGenderId : 
		/// </summary>
		[EnumTextValue("GS_CODE_GENDER_ID")]
		[ColumnEnum("GS_CODE_GENDER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCodeGenderId = 6,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		Notes = 7,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 8,
		/// <summary>
		/// IsResultApproved : 
		/// </summary>
		[EnumTextValue("IS_RESULT_APPROVED")]
		[ColumnEnum("IS_RESULT_APPROVED", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsResultApproved = 9,
		/// <summary>
		/// SeUserRsultApproveId : 
		/// </summary>
		[EnumTextValue("SE_USER_RSULT_APPROVE_ID")]
		[ColumnEnum("SE_USER_RSULT_APPROVE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserRsultApproveId = 10,
		/// <summary>
		/// RsultApproveDate : 
		/// </summary>
		[EnumTextValue("RSULT_APPROVE_DATE")]
		[ColumnEnum("RSULT_APPROVE_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		RsultApproveDate = 11,
		/// <summary>
		/// NoStudents : 
		/// </summary>
		[EnumTextValue("NO_STUDENTS")]
		[ColumnEnum("NO_STUDENTS", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		NoStudents = 12,
		/// <summary>
		/// NoStudWait : 
		/// </summary>
		[EnumTextValue("NO_STUD_WAIT")]
		[ColumnEnum("NO_STUD_WAIT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		NoStudWait = 13,
		/// <summary>
		/// OnlineFlg : 
		/// </summary>
		[EnumTextValue("ONLINE_FLG")]
		[ColumnEnum("ONLINE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		OnlineFlg = 14,
		/// <summary>
		/// IsClosed : 
		/// </summary>
		[EnumTextValue("IS_CLOSED")]
		[ColumnEnum("IS_CLOSED", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		IsClosed = 15,
		/// <summary>
		/// NotesEmp : 
		/// </summary>
		[EnumTextValue("NOTES_EMP")]
		[ColumnEnum("NOTES_EMP", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		NotesEmp = 16,
		/// <summary>
		/// NoStudMax : 
		/// </summary>
		[EnumTextValue("NO_STUD_MAX")]
		[ColumnEnum("NO_STUD_MAX", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		NoStudMax = 17,
		/// <summary>
		/// InternalFlg : 
		/// </summary>
		[EnumTextValue("INTERNAL_FLG")]
		[ColumnEnum("INTERNAL_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		InternalFlg = 18,
		/// <summary>
		/// WaitlistFlg : 
		/// </summary>
		[EnumTextValue("WAITLIST_FLG")]
		[ColumnEnum("WAITLIST_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WaitlistFlg = 19,
		/// <summary>
		/// GsCodeLanguageId : 
		/// </summary>
		[EnumTextValue("GS_CODE_LANGUAGE_ID")]
		[ColumnEnum("GS_CODE_LANGUAGE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCodeLanguageId = 20,
		/// <summary>
		/// CnclFlg : 
		/// </summary>
		[EnumTextValue("CNCL_FLG")]
		[ColumnEnum("CNCL_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CnclFlg = 21,
		/// <summary>
		/// PartTimeFlg : 
		/// </summary>
		[EnumTextValue("PART_TIME_FLG")]
		[ColumnEnum("PART_TIME_FLG", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PartTimeFlg = 22,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 23,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 24
	}//End enum

	#endregion ScScheduleDtlColumn Enum

} // end namespace
