
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file TrnsStudCarStkr.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'TRNS_STUD_CAR_STKR' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class TrnsStudCarStkrBase : EntityBase, ITrnsStudCarStkr, IEntityId<TrnsStudCarStkrKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private TrnsStudCarStkrEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private TrnsStudCarStkrEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private TrnsStudCarStkrEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<TrnsStudCarStkr> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event TrnsStudCarStkrEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event TrnsStudCarStkrEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="TrnsStudCarStkrBase"/> instance.
		///</summary>
		public TrnsStudCarStkrBase()
		{
			this.entityData = new TrnsStudCarStkrEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="TrnsStudCarStkrBase"/> instance.
		///</summary>
		///<param name="_trnsStudCarStkrId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edStudId"></param>
		///<param name="_reqDate"></param>
		///<param name="_prntFlg"></param>
		///<param name="_trnsCdeColorId"></param>
		///<param name="_carNo"></param>
		///<param name="_ownerName"></param>
		///<param name="_seUserId"></param>
		///<param name="_padgeTypeFlg"></param>
		///<param name="_padgeCode"></param>
		///<param name="_gsCountryNodeId"></param>
		///<param name="_carModel"></param>
		///<param name="_employeeName"></param>
		public TrnsStudCarStkrBase(System.Decimal _trnsStudCarStkrId, System.Decimal _edAcadYearId, 
			System.Decimal _edStudId, System.DateTime _reqDate, System.Decimal _prntFlg, 
			System.Decimal? _trnsCdeColorId, System.String _carNo, System.String _ownerName, 
			System.Decimal? _seUserId, System.Decimal _padgeTypeFlg, System.String _padgeCode, 
			System.Decimal _gsCountryNodeId, System.String _carModel, System.String _employeeName)
		{
			this.entityData = new TrnsStudCarStkrEntityData();
			this.backupData = null;

			this.TrnsStudCarStkrId = _trnsStudCarStkrId;
			this.EdAcadYearId = _edAcadYearId;
			this.EdStudId = _edStudId;
			this.ReqDate = _reqDate;
			this.PrntFlg = _prntFlg;
			this.TrnsCdeColorId = _trnsCdeColorId;
			this.CarNo = _carNo;
			this.OwnerName = _ownerName;
			this.SeUserId = _seUserId;
			this.PadgeTypeFlg = _padgeTypeFlg;
			this.PadgeCode = _padgeCode;
			this.GsCountryNodeId = _gsCountryNodeId;
			this.CarModel = _carModel;
			this.EmployeeName = _employeeName;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="TrnsStudCarStkr"/> instance.
		///</summary>
		///<param name="_trnsStudCarStkrId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edStudId"></param>
		///<param name="_reqDate"></param>
		///<param name="_prntFlg"></param>
		///<param name="_trnsCdeColorId"></param>
		///<param name="_carNo"></param>
		///<param name="_ownerName"></param>
		///<param name="_seUserId"></param>
		///<param name="_padgeTypeFlg"></param>
		///<param name="_padgeCode"></param>
		///<param name="_gsCountryNodeId"></param>
		///<param name="_carModel"></param>
		///<param name="_employeeName"></param>
		public static TrnsStudCarStkr CreateTrnsStudCarStkr(System.Decimal _trnsStudCarStkrId, System.Decimal _edAcadYearId, 
			System.Decimal _edStudId, System.DateTime _reqDate, System.Decimal _prntFlg, 
			System.Decimal? _trnsCdeColorId, System.String _carNo, System.String _ownerName, 
			System.Decimal? _seUserId, System.Decimal _padgeTypeFlg, System.String _padgeCode, 
			System.Decimal _gsCountryNodeId, System.String _carModel, System.String _employeeName)
		{
			TrnsStudCarStkr newTrnsStudCarStkr = new TrnsStudCarStkr();
			newTrnsStudCarStkr.TrnsStudCarStkrId = _trnsStudCarStkrId;
			newTrnsStudCarStkr.EdAcadYearId = _edAcadYearId;
			newTrnsStudCarStkr.EdStudId = _edStudId;
			newTrnsStudCarStkr.ReqDate = _reqDate;
			newTrnsStudCarStkr.PrntFlg = _prntFlg;
			newTrnsStudCarStkr.TrnsCdeColorId = _trnsCdeColorId;
			newTrnsStudCarStkr.CarNo = _carNo;
			newTrnsStudCarStkr.OwnerName = _ownerName;
			newTrnsStudCarStkr.SeUserId = _seUserId;
			newTrnsStudCarStkr.PadgeTypeFlg = _padgeTypeFlg;
			newTrnsStudCarStkr.PadgeCode = _padgeCode;
			newTrnsStudCarStkr.GsCountryNodeId = _gsCountryNodeId;
			newTrnsStudCarStkr.CarModel = _carModel;
			newTrnsStudCarStkr.EmployeeName = _employeeName;
			return newTrnsStudCarStkr;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the TrnsStudCarStkrId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal TrnsStudCarStkrId
		{
			get
			{
				return this.entityData.TrnsStudCarStkrId; 
			}
			
			set
			{
				if (this.entityData.TrnsStudCarStkrId == value)
					return;
					
				OnColumnChanging(TrnsStudCarStkrColumn.TrnsStudCarStkrId, this.entityData.TrnsStudCarStkrId);
				this.entityData.TrnsStudCarStkrId = value;
				this.EntityId.TrnsStudCarStkrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrnsStudCarStkrColumn.TrnsStudCarStkrId, this.entityData.TrnsStudCarStkrId);
				OnPropertyChanged("TrnsStudCarStkrId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the TRNS_STUD_CAR_STKR_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the TRNS_STUD_CAR_STKR_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalTrnsStudCarStkrId
		{
			get { return this.entityData.OriginalTrnsStudCarStkrId; }
			set { this.entityData.OriginalTrnsStudCarStkrId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(TrnsStudCarStkrColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrnsStudCarStkrColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(TrnsStudCarStkrColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrnsStudCarStkrColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReqDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ReqDate
		{
			get
			{
				return this.entityData.ReqDate; 
			}
			
			set
			{
				if (this.entityData.ReqDate == value)
					return;
					
				OnColumnChanging(TrnsStudCarStkrColumn.ReqDate, this.entityData.ReqDate);
				this.entityData.ReqDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrnsStudCarStkrColumn.ReqDate, this.entityData.ReqDate);
				OnPropertyChanged("ReqDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrntFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal PrntFlg
		{
			get
			{
				return this.entityData.PrntFlg; 
			}
			
			set
			{
				if (this.entityData.PrntFlg == value)
					return;
					
				OnColumnChanging(TrnsStudCarStkrColumn.PrntFlg, this.entityData.PrntFlg);
				this.entityData.PrntFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrnsStudCarStkrColumn.PrntFlg, this.entityData.PrntFlg);
				OnPropertyChanged("PrntFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrnsCdeColorId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTrnsCdeColorIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TrnsCdeColorId
		{
			get
			{
				return this.entityData.TrnsCdeColorId; 
			}
			
			set
			{
				if (this.entityData.TrnsCdeColorId == value)
					return;
					
				OnColumnChanging(TrnsStudCarStkrColumn.TrnsCdeColorId, this.entityData.TrnsCdeColorId);
				this.entityData.TrnsCdeColorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrnsStudCarStkrColumn.TrnsCdeColorId, this.entityData.TrnsCdeColorId);
				OnPropertyChanged("TrnsCdeColorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CarNo property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String CarNo
		{
			get
			{
				return this.entityData.CarNo; 
			}
			
			set
			{
				if (this.entityData.CarNo == value)
					return;
					
				OnColumnChanging(TrnsStudCarStkrColumn.CarNo, this.entityData.CarNo);
				this.entityData.CarNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrnsStudCarStkrColumn.CarNo, this.entityData.CarNo);
				OnPropertyChanged("CarNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OwnerName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String OwnerName
		{
			get
			{
				return this.entityData.OwnerName; 
			}
			
			set
			{
				if (this.entityData.OwnerName == value)
					return;
					
				OnColumnChanging(TrnsStudCarStkrColumn.OwnerName, this.entityData.OwnerName);
				this.entityData.OwnerName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrnsStudCarStkrColumn.OwnerName, this.entityData.OwnerName);
				OnPropertyChanged("OwnerName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(TrnsStudCarStkrColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrnsStudCarStkrColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PadgeTypeFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal PadgeTypeFlg
		{
			get
			{
				return this.entityData.PadgeTypeFlg; 
			}
			
			set
			{
				if (this.entityData.PadgeTypeFlg == value)
					return;
					
				OnColumnChanging(TrnsStudCarStkrColumn.PadgeTypeFlg, this.entityData.PadgeTypeFlg);
				this.entityData.PadgeTypeFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrnsStudCarStkrColumn.PadgeTypeFlg, this.entityData.PadgeTypeFlg);
				OnPropertyChanged("PadgeTypeFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PadgeCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String PadgeCode
		{
			get
			{
				return this.entityData.PadgeCode; 
			}
			
			set
			{
				if (this.entityData.PadgeCode == value)
					return;
					
				OnColumnChanging(TrnsStudCarStkrColumn.PadgeCode, this.entityData.PadgeCode);
				this.entityData.PadgeCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrnsStudCarStkrColumn.PadgeCode, this.entityData.PadgeCode);
				OnPropertyChanged("PadgeCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCountryNodeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsCountryNodeId
		{
			get
			{
				return this.entityData.GsCountryNodeId; 
			}
			
			set
			{
				if (this.entityData.GsCountryNodeId == value)
					return;
					
				OnColumnChanging(TrnsStudCarStkrColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				this.entityData.GsCountryNodeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrnsStudCarStkrColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				OnPropertyChanged("GsCountryNodeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CarModel property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String CarModel
		{
			get
			{
				return this.entityData.CarModel; 
			}
			
			set
			{
				if (this.entityData.CarModel == value)
					return;
					
				OnColumnChanging(TrnsStudCarStkrColumn.CarModel, this.entityData.CarModel);
				this.entityData.CarModel = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrnsStudCarStkrColumn.CarModel, this.entityData.CarModel);
				OnPropertyChanged("CarModel");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmployeeName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String EmployeeName
		{
			get
			{
				return this.entityData.EmployeeName; 
			}
			
			set
			{
				if (this.entityData.EmployeeName == value)
					return;
					
				OnColumnChanging(TrnsStudCarStkrColumn.EmployeeName, this.entityData.EmployeeName);
				this.entityData.EmployeeName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrnsStudCarStkrColumn.EmployeeName, this.entityData.EmployeeName);
				OnPropertyChanged("EmployeeName");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCountryNode"/>.
		/// </summary>
		/// <value>The source GsCountryNode for GsCountryNodeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCountryNode GsCountryNodeIdSource
      	{
            get { return entityData.GsCountryNodeIdSource; }
            set { entityData.GsCountryNodeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeUser SeUserIdSource
      	{
            get { return entityData.SeUserIdSource; }
            set { entityData.SeUserIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="TrnsCdeColor"/>.
		/// </summary>
		/// <value>The source TrnsCdeColor for TrnsCdeColorId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TrnsCdeColor TrnsCdeColorIdSource
      	{
            get { return entityData.TrnsCdeColorIdSource; }
            set { entityData.TrnsCdeColorIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("CarNo", "Car No"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CarNo", "Car No", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("OwnerName", "Owner Name", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PadgeCode", "Padge Code", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CarModel", "Car Model", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EmployeeName", "Employee Name", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "TRNS_STUD_CAR_STKR"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"TRNS_STUD_CAR_STKR_ID", "ED_ACAD_YEAR_ID", "ED_STUD_ID", "REQ_DATE", "PRNT_FLG", "TRNS_CDE_COLOR_ID", "CAR_NO", "OWNER_NAME", "SE_USER_ID", "PADGE_TYPE_FLG", "PADGE_CODE", "GS_COUNTRY_NODE_ID", "CAR_Model", "EMPLOYEE_NAME"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as TrnsStudCarStkrEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (TrnsStudCarStkr) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<TrnsStudCarStkr>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as TrnsStudCarStkr);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed TrnsStudCarStkr Entity 
		///</summary>
		protected virtual TrnsStudCarStkr Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			TrnsStudCarStkr copy = new TrnsStudCarStkr();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.TrnsStudCarStkrId = this.TrnsStudCarStkrId;
					copy.OriginalTrnsStudCarStkrId = this.OriginalTrnsStudCarStkrId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdStudId = this.EdStudId;
				copy.ReqDate = this.ReqDate;
				copy.PrntFlg = this.PrntFlg;
				copy.TrnsCdeColorId = this.TrnsCdeColorId;
				copy.CarNo = this.CarNo;
				copy.OwnerName = this.OwnerName;
				copy.SeUserId = this.SeUserId;
				copy.PadgeTypeFlg = this.PadgeTypeFlg;
				copy.PadgeCode = this.PadgeCode;
				copy.GsCountryNodeId = this.GsCountryNodeId;
				copy.CarModel = this.CarModel;
				copy.EmployeeName = this.EmployeeName;
			
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.GsCountryNodeIdSource != null && existingCopies.Contains(this.GsCountryNodeIdSource))
				copy.GsCountryNodeIdSource = existingCopies[this.GsCountryNodeIdSource] as GsCountryNode;
			else
				copy.GsCountryNodeIdSource = MakeCopyOf(this.GsCountryNodeIdSource, existingCopies) as GsCountryNode;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				copy.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				copy.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			if (this.TrnsCdeColorIdSource != null && existingCopies.Contains(this.TrnsCdeColorIdSource))
				copy.TrnsCdeColorIdSource = existingCopies[this.TrnsCdeColorIdSource] as TrnsCdeColor;
			else
				copy.TrnsCdeColorIdSource = MakeCopyOf(this.TrnsCdeColorIdSource, existingCopies) as TrnsCdeColor;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed TrnsStudCarStkr Entity 
		///</summary>
		public virtual TrnsStudCarStkr Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed TrnsStudCarStkr Entity which is a deep copy of the current entity.
		///</summary>
		public virtual TrnsStudCarStkr DeepCopy()
		{
			return EntityHelper.Clone<TrnsStudCarStkr>(this as TrnsStudCarStkr);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as TrnsStudCarStkrEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new TrnsStudCarStkrEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as TrnsStudCarStkrEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(TrnsStudCarStkrColumn column)
		{
			switch(column)
			{
					case TrnsStudCarStkrColumn.TrnsStudCarStkrId:
					return entityData.TrnsStudCarStkrId != _originalData.TrnsStudCarStkrId;
					case TrnsStudCarStkrColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case TrnsStudCarStkrColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case TrnsStudCarStkrColumn.ReqDate:
					return entityData.ReqDate != _originalData.ReqDate;
					case TrnsStudCarStkrColumn.PrntFlg:
					return entityData.PrntFlg != _originalData.PrntFlg;
					case TrnsStudCarStkrColumn.TrnsCdeColorId:
					return entityData.TrnsCdeColorId != _originalData.TrnsCdeColorId;
					case TrnsStudCarStkrColumn.CarNo:
					return entityData.CarNo != _originalData.CarNo;
					case TrnsStudCarStkrColumn.OwnerName:
					return entityData.OwnerName != _originalData.OwnerName;
					case TrnsStudCarStkrColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case TrnsStudCarStkrColumn.PadgeTypeFlg:
					return entityData.PadgeTypeFlg != _originalData.PadgeTypeFlg;
					case TrnsStudCarStkrColumn.PadgeCode:
					return entityData.PadgeCode != _originalData.PadgeCode;
					case TrnsStudCarStkrColumn.GsCountryNodeId:
					return entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
					case TrnsStudCarStkrColumn.CarModel:
					return entityData.CarModel != _originalData.CarModel;
					case TrnsStudCarStkrColumn.EmployeeName:
					return entityData.EmployeeName != _originalData.EmployeeName;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< TrnsStudCarStkrColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.TrnsStudCarStkrId != _originalData.TrnsStudCarStkrId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.ReqDate != _originalData.ReqDate;
			result = result || entityData.PrntFlg != _originalData.PrntFlg;
			result = result || entityData.TrnsCdeColorId != _originalData.TrnsCdeColorId;
			result = result || entityData.CarNo != _originalData.CarNo;
			result = result || entityData.OwnerName != _originalData.OwnerName;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.PadgeTypeFlg != _originalData.PadgeTypeFlg;
			result = result || entityData.PadgeCode != _originalData.PadgeCode;
			result = result || entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
			result = result || entityData.CarModel != _originalData.CarModel;
			result = result || entityData.EmployeeName != _originalData.EmployeeName;
			return result;
		}	
		
		///<summary>
		///  Returns a TrnsStudCarStkr Entity with the original data.
		///</summary>
		public TrnsStudCarStkr GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateTrnsStudCarStkr(
				_originalData.TrnsStudCarStkrId,
				_originalData.EdAcadYearId,
				_originalData.EdStudId,
				_originalData.ReqDate,
				_originalData.PrntFlg,
				_originalData.TrnsCdeColorId,
				_originalData.CarNo,
				_originalData.OwnerName,
				_originalData.SeUserId,
				_originalData.PadgeTypeFlg,
				_originalData.PadgeCode,
				_originalData.GsCountryNodeId,
				_originalData.CarModel,
				_originalData.EmployeeName
				);
				
			return (TrnsStudCarStkr)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="TrnsStudCarStkrBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is TrnsStudCarStkrBase)
				return ValueEquals(this, (TrnsStudCarStkrBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="TrnsStudCarStkrBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.TrnsStudCarStkrId.GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					this.EdStudId.GetHashCode() ^ 
					this.ReqDate.GetHashCode() ^ 
					this.PrntFlg.GetHashCode() ^ 
					((this.TrnsCdeColorId == null) ? string.Empty : this.TrnsCdeColorId.ToString()).GetHashCode() ^ 
					this.CarNo.GetHashCode() ^ 
					((this.OwnerName == null) ? string.Empty : this.OwnerName.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					this.PadgeTypeFlg.GetHashCode() ^ 
					((this.PadgeCode == null) ? string.Empty : this.PadgeCode.ToString()).GetHashCode() ^ 
					this.GsCountryNodeId.GetHashCode() ^ 
					((this.CarModel == null) ? string.Empty : this.CarModel.ToString()).GetHashCode() ^ 
					((this.EmployeeName == null) ? string.Empty : this.EmployeeName.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="TrnsStudCarStkrBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(TrnsStudCarStkrBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="TrnsStudCarStkrBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="TrnsStudCarStkrBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="TrnsStudCarStkrBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(TrnsStudCarStkrBase Object1, TrnsStudCarStkrBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.TrnsStudCarStkrId != Object2.TrnsStudCarStkrId)
				equal = false;
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if (Object1.EdStudId != Object2.EdStudId)
				equal = false;
			if (Object1.ReqDate != Object2.ReqDate)
				equal = false;
			if (Object1.PrntFlg != Object2.PrntFlg)
				equal = false;
			if ( Object1.TrnsCdeColorId != null && Object2.TrnsCdeColorId != null )
			{
				if (Object1.TrnsCdeColorId != Object2.TrnsCdeColorId)
					equal = false;
			}
			else if (Object1.TrnsCdeColorId == null ^ Object2.TrnsCdeColorId == null )
			{
				equal = false;
			}
			if (Object1.CarNo != Object2.CarNo)
				equal = false;
			if ( Object1.OwnerName != null && Object2.OwnerName != null )
			{
				if (Object1.OwnerName != Object2.OwnerName)
					equal = false;
			}
			else if (Object1.OwnerName == null ^ Object2.OwnerName == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if (Object1.PadgeTypeFlg != Object2.PadgeTypeFlg)
				equal = false;
			if ( Object1.PadgeCode != null && Object2.PadgeCode != null )
			{
				if (Object1.PadgeCode != Object2.PadgeCode)
					equal = false;
			}
			else if (Object1.PadgeCode == null ^ Object2.PadgeCode == null )
			{
				equal = false;
			}
			if (Object1.GsCountryNodeId != Object2.GsCountryNodeId)
				equal = false;
			if ( Object1.CarModel != null && Object2.CarModel != null )
			{
				if (Object1.CarModel != Object2.CarModel)
					equal = false;
			}
			else if (Object1.CarModel == null ^ Object2.CarModel == null )
			{
				equal = false;
			}
			if ( Object1.EmployeeName != null && Object2.EmployeeName != null )
			{
				if (Object1.EmployeeName != Object2.EmployeeName)
					equal = false;
			}
			else if (Object1.EmployeeName == null ^ Object2.EmployeeName == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((TrnsStudCarStkrBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static TrnsStudCarStkrComparer GetComparer()
        {
            return new TrnsStudCarStkrComparer();
        }
        */

        // Comparer delegates back to TrnsStudCarStkr
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(TrnsStudCarStkr rhs, TrnsStudCarStkrColumn which)
        {
            switch (which)
            {
            	
            	
            	case TrnsStudCarStkrColumn.TrnsStudCarStkrId:
            		return this.TrnsStudCarStkrId.CompareTo(rhs.TrnsStudCarStkrId);
            		
            		                 
            	
            	
            	case TrnsStudCarStkrColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case TrnsStudCarStkrColumn.EdStudId:
            		return this.EdStudId.CompareTo(rhs.EdStudId);
            		
            		                 
            	
            	
            	case TrnsStudCarStkrColumn.ReqDate:
            		return this.ReqDate.CompareTo(rhs.ReqDate);
            		
            		                 
            	
            	
            	case TrnsStudCarStkrColumn.PrntFlg:
            		return this.PrntFlg.CompareTo(rhs.PrntFlg);
            		
            		                 
            	
            	
            	case TrnsStudCarStkrColumn.TrnsCdeColorId:
            		return this.TrnsCdeColorId.Value.CompareTo(rhs.TrnsCdeColorId.Value);
            		
            		                 
            	
            	
            	case TrnsStudCarStkrColumn.CarNo:
            		return this.CarNo.CompareTo(rhs.CarNo);
            		
            		                 
            	
            	
            	case TrnsStudCarStkrColumn.OwnerName:
            		return this.OwnerName.CompareTo(rhs.OwnerName);
            		
            		                 
            	
            	
            	case TrnsStudCarStkrColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case TrnsStudCarStkrColumn.PadgeTypeFlg:
            		return this.PadgeTypeFlg.CompareTo(rhs.PadgeTypeFlg);
            		
            		                 
            	
            	
            	case TrnsStudCarStkrColumn.PadgeCode:
            		return this.PadgeCode.CompareTo(rhs.PadgeCode);
            		
            		                 
            	
            	
            	case TrnsStudCarStkrColumn.GsCountryNodeId:
            		return this.GsCountryNodeId.CompareTo(rhs.GsCountryNodeId);
            		
            		                 
            	
            	
            	case TrnsStudCarStkrColumn.CarModel:
            		return this.CarModel.CompareTo(rhs.CarModel);
            		
            		                 
            	
            	
            	case TrnsStudCarStkrColumn.EmployeeName:
            		return this.EmployeeName.CompareTo(rhs.EmployeeName);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<TrnsStudCarStkrKey> Members
		
		// member variable for the EntityId property
		private TrnsStudCarStkrKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual TrnsStudCarStkrKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new TrnsStudCarStkrKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("TrnsStudCarStkr")
					.Append("|").Append( this.TrnsStudCarStkrId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{15}{14}- TrnsStudCarStkrId: {0}{14}- EdAcadYearId: {1}{14}- EdStudId: {2}{14}- ReqDate: {3}{14}- PrntFlg: {4}{14}- TrnsCdeColorId: {5}{14}- CarNo: {6}{14}- OwnerName: {7}{14}- SeUserId: {8}{14}- PadgeTypeFlg: {9}{14}- PadgeCode: {10}{14}- GsCountryNodeId: {11}{14}- CarModel: {12}{14}- EmployeeName: {13}{14}{16}", 
				this.TrnsStudCarStkrId,
				this.EdAcadYearId,
				this.EdStudId,
				this.ReqDate,
				this.PrntFlg,
				(this.TrnsCdeColorId == null) ? string.Empty : this.TrnsCdeColorId.ToString(),
				this.CarNo,
				(this.OwnerName == null) ? string.Empty : this.OwnerName.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				this.PadgeTypeFlg,
				(this.PadgeCode == null) ? string.Empty : this.PadgeCode.ToString(),
				this.GsCountryNodeId,
				(this.CarModel == null) ? string.Empty : this.CarModel.ToString(),
				(this.EmployeeName == null) ? string.Empty : this.EmployeeName.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'TRNS_STUD_CAR_STKR' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class TrnsStudCarStkrEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// TRNS_STUD_CAR_STKR_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "TRNS_STUD_CAR_STKR"</remarks>
		public System.Decimal TrnsStudCarStkrId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalTrnsStudCarStkrId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// ED_STUD_ID : 
		/// </summary>
		public System.Decimal		  EdStudId = 0.0m;
		
		/// <summary>
		/// REQ_DATE : 
		/// </summary>
		public System.DateTime		  ReqDate = DateTime.MinValue;
		
		/// <summary>
		/// PRNT_FLG : 
		/// </summary>
		public System.Decimal		  PrntFlg = 0.0m;
		
		/// <summary>
		/// TRNS_CDE_COLOR_ID : 
		/// </summary>
		public System.Decimal?		  TrnsCdeColorId = null;
		
		/// <summary>
		/// CAR_NO : 
		/// </summary>
		public System.String		  CarNo = string.Empty;
		
		/// <summary>
		/// OWNER_NAME : 
		/// </summary>
		public System.String		  OwnerName = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// PADGE_TYPE_FLG : 
		/// </summary>
		public System.Decimal		  PadgeTypeFlg = 0.0m;
		
		/// <summary>
		/// PADGE_CODE : 
		/// </summary>
		public System.String		  PadgeCode = null;
		
		/// <summary>
		/// GS_COUNTRY_NODE_ID : 
		/// </summary>
		public System.Decimal		  GsCountryNodeId = 0.0m;
		
		/// <summary>
		/// CAR_Model : 
		/// </summary>
		public System.String		  CarModel = null;
		
		/// <summary>
		/// EMPLOYEE_NAME : 
		/// </summary>
		public System.String		  EmployeeName = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		private GsCountryNode _gsCountryNodeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCountryNode"/>.
		/// </summary>
		/// <value>The source GsCountryNode for GsCountryNodeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCountryNode GsCountryNodeIdSource
      	{
            get { return this._gsCountryNodeIdSource; }
            set { this._gsCountryNodeIdSource = value; }
      	}
		private SeUser _seUserIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeUser SeUserIdSource
      	{
            get { return this._seUserIdSource; }
            set { this._seUserIdSource = value; }
      	}
		private TrnsCdeColor _trnsCdeColorIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="TrnsCdeColor"/>.
		/// </summary>
		/// <value>The source TrnsCdeColor for TrnsCdeColorId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual TrnsCdeColor TrnsCdeColorIdSource
      	{
            get { return this._trnsCdeColorIdSource; }
            set { this._trnsCdeColorIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			TrnsStudCarStkrEntityData _tmp = new TrnsStudCarStkrEntityData();
						
			_tmp.TrnsStudCarStkrId = this.TrnsStudCarStkrId;
			_tmp.OriginalTrnsStudCarStkrId = this.OriginalTrnsStudCarStkrId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.ReqDate = this.ReqDate;
			_tmp.PrntFlg = this.PrntFlg;
			_tmp.TrnsCdeColorId = this.TrnsCdeColorId;
			_tmp.CarNo = this.CarNo;
			_tmp.OwnerName = this.OwnerName;
			_tmp.SeUserId = this.SeUserId;
			_tmp.PadgeTypeFlg = this.PadgeTypeFlg;
			_tmp.PadgeCode = this.PadgeCode;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.CarModel = this.CarModel;
			_tmp.EmployeeName = this.EmployeeName;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			if (this.GsCountryNodeIdSource != null)
				_tmp.GsCountryNodeIdSource = MakeCopyOf(this.GsCountryNodeIdSource) as GsCountryNode;
			if (this.SeUserIdSource != null)
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource) as SeUser;
			if (this.TrnsCdeColorIdSource != null)
				_tmp.TrnsCdeColorIdSource = MakeCopyOf(this.TrnsCdeColorIdSource) as TrnsCdeColor;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			TrnsStudCarStkrEntityData _tmp = new TrnsStudCarStkrEntityData();
						
			_tmp.TrnsStudCarStkrId = this.TrnsStudCarStkrId;
			_tmp.OriginalTrnsStudCarStkrId = this.OriginalTrnsStudCarStkrId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.ReqDate = this.ReqDate;
			_tmp.PrntFlg = this.PrntFlg;
			_tmp.TrnsCdeColorId = this.TrnsCdeColorId;
			_tmp.CarNo = this.CarNo;
			_tmp.OwnerName = this.OwnerName;
			_tmp.SeUserId = this.SeUserId;
			_tmp.PadgeTypeFlg = this.PadgeTypeFlg;
			_tmp.PadgeCode = this.PadgeCode;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.CarModel = this.CarModel;
			_tmp.EmployeeName = this.EmployeeName;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.GsCountryNodeIdSource != null && existingCopies.Contains(this.GsCountryNodeIdSource))
				_tmp.GsCountryNodeIdSource = existingCopies[this.GsCountryNodeIdSource] as GsCountryNode;
			else
				_tmp.GsCountryNodeIdSource = MakeCopyOf(this.GsCountryNodeIdSource, existingCopies) as GsCountryNode;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				_tmp.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			if (this.TrnsCdeColorIdSource != null && existingCopies.Contains(this.TrnsCdeColorIdSource))
				_tmp.TrnsCdeColorIdSource = existingCopies[this.TrnsCdeColorIdSource] as TrnsCdeColor;
			else
				_tmp.TrnsCdeColorIdSource = MakeCopyOf(this.TrnsCdeColorIdSource, existingCopies) as TrnsCdeColor;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TrnsStudCarStkrColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(TrnsStudCarStkrColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TrnsStudCarStkrColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(TrnsStudCarStkrColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TrnsStudCarStkrColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(TrnsStudCarStkrColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				TrnsStudCarStkrEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new TrnsStudCarStkrEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TrnsStudCarStkrColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(TrnsStudCarStkrColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				TrnsStudCarStkrEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new TrnsStudCarStkrEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region TrnsStudCarStkrEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="TrnsStudCarStkr"/> object.
	/// </remarks>
	public class TrnsStudCarStkrEventArgs : System.EventArgs
	{
		private TrnsStudCarStkrColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the TrnsStudCarStkrEventArgs class.
		///</summary>
		public TrnsStudCarStkrEventArgs(TrnsStudCarStkrColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the TrnsStudCarStkrEventArgs class.
		///</summary>
		public TrnsStudCarStkrEventArgs(TrnsStudCarStkrColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The TrnsStudCarStkrColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="TrnsStudCarStkrColumn" />
		public TrnsStudCarStkrColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all TrnsStudCarStkr related events.
	///</summary>
	public delegate void TrnsStudCarStkrEventHandler(object sender, TrnsStudCarStkrEventArgs e);
	
	#region TrnsStudCarStkrComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class TrnsStudCarStkrComparer : System.Collections.Generic.IComparer<TrnsStudCarStkr>
	{
		TrnsStudCarStkrColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:TrnsStudCarStkrComparer"/> class.
        /// </summary>
		public TrnsStudCarStkrComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:TrnsStudCarStkrComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public TrnsStudCarStkrComparer(TrnsStudCarStkrColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="TrnsStudCarStkr"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="TrnsStudCarStkr"/> to compare.</param>
        /// <param name="b">The second <c>TrnsStudCarStkr</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(TrnsStudCarStkr a, TrnsStudCarStkr b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(TrnsStudCarStkr entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(TrnsStudCarStkr a, TrnsStudCarStkr b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public TrnsStudCarStkrColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region TrnsStudCarStkrKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="TrnsStudCarStkr"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class TrnsStudCarStkrKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the TrnsStudCarStkrKey class.
		/// </summary>
		public TrnsStudCarStkrKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the TrnsStudCarStkrKey class.
		/// </summary>
		public TrnsStudCarStkrKey(TrnsStudCarStkrBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.TrnsStudCarStkrId = entity.TrnsStudCarStkrId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the TrnsStudCarStkrKey class.
		/// </summary>
		public TrnsStudCarStkrKey(System.Decimal _trnsStudCarStkrId)
		{
			#region Init Properties

			this.TrnsStudCarStkrId = _trnsStudCarStkrId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private TrnsStudCarStkrBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public TrnsStudCarStkrBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the TrnsStudCarStkrId property
		private System.Decimal _trnsStudCarStkrId;
		
		/// <summary>
		/// Gets or sets the TrnsStudCarStkrId property.
		/// </summary>
		public System.Decimal TrnsStudCarStkrId
		{
			get { return _trnsStudCarStkrId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.TrnsStudCarStkrId = value;
				
				_trnsStudCarStkrId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				TrnsStudCarStkrId = ( values["TrnsStudCarStkrId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["TrnsStudCarStkrId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("TrnsStudCarStkrId", TrnsStudCarStkrId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("TrnsStudCarStkrId: {0}{1}",
								TrnsStudCarStkrId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region TrnsStudCarStkrColumn Enum
	
	/// <summary>
	/// Enumerate the TrnsStudCarStkr columns.
	/// </summary>
	[Serializable]
	public enum TrnsStudCarStkrColumn : int
	{
		/// <summary>
		/// TrnsStudCarStkrId : 
		/// </summary>
		[EnumTextValue("TRNS_STUD_CAR_STKR_ID")]
		[ColumnEnum("TRNS_STUD_CAR_STKR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		TrnsStudCarStkrId = 1,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 2,
		/// <summary>
		/// EdStudId : 
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudId = 3,
		/// <summary>
		/// ReqDate : 
		/// </summary>
		[EnumTextValue("REQ_DATE")]
		[ColumnEnum("REQ_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ReqDate = 4,
		/// <summary>
		/// PrntFlg : 
		/// </summary>
		[EnumTextValue("PRNT_FLG")]
		[ColumnEnum("PRNT_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		PrntFlg = 5,
		/// <summary>
		/// TrnsCdeColorId : 
		/// </summary>
		[EnumTextValue("TRNS_CDE_COLOR_ID")]
		[ColumnEnum("TRNS_CDE_COLOR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TrnsCdeColorId = 6,
		/// <summary>
		/// CarNo : 
		/// </summary>
		[EnumTextValue("CAR_NO")]
		[ColumnEnum("CAR_NO", typeof(System.String), System.Data.DbType.String, false, false, false, 20)]
		CarNo = 7,
		/// <summary>
		/// OwnerName : 
		/// </summary>
		[EnumTextValue("OWNER_NAME")]
		[ColumnEnum("OWNER_NAME", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		OwnerName = 8,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 9,
		/// <summary>
		/// PadgeTypeFlg : 
		/// </summary>
		[EnumTextValue("PADGE_TYPE_FLG")]
		[ColumnEnum("PADGE_TYPE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		PadgeTypeFlg = 10,
		/// <summary>
		/// PadgeCode : 
		/// </summary>
		[EnumTextValue("PADGE_CODE")]
		[ColumnEnum("PADGE_CODE", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		PadgeCode = 11,
		/// <summary>
		/// GsCountryNodeId : 
		/// </summary>
		[EnumTextValue("GS_COUNTRY_NODE_ID")]
		[ColumnEnum("GS_COUNTRY_NODE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsCountryNodeId = 12,
		/// <summary>
		/// CarModel : 
		/// </summary>
		[EnumTextValue("CAR_Model")]
		[ColumnEnum("CAR_Model", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		CarModel = 13,
		/// <summary>
		/// EmployeeName : 
		/// </summary>
		[EnumTextValue("EMPLOYEE_NAME")]
		[ColumnEnum("EMPLOYEE_NAME", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		EmployeeName = 14
	}//End enum

	#endregion TrnsStudCarStkrColumn Enum

} // end namespace
