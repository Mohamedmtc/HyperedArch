
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EntPlcyAcadWarn.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ENT_PLCY_ACAD_WARN' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EntPlcyAcadWarnBase : EntityBase, IEntPlcyAcadWarn, IEntityId<EntPlcyAcadWarnKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EntPlcyAcadWarnEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EntPlcyAcadWarnEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EntPlcyAcadWarnEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EntPlcyAcadWarn> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EntPlcyAcadWarnEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EntPlcyAcadWarnEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EntPlcyAcadWarnBase"/> instance.
		///</summary>
		public EntPlcyAcadWarnBase()
		{
			this.entityData = new EntPlcyAcadWarnEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EntPlcyAcadWarnBase"/> instance.
		///</summary>
		///<param name="_entPlcyAcadWarnId">قواعد  عامة على كل الانذارات الاكاديمية</param>
		///<param name="_edBylawId"></param>
		///<param name="_startSemCount"></param>
		///<param name="_startSemCountTrns"></param>
		///<param name="_optionalSemFlg">يدخل فى الحساب الفصل الصيفى</param>
		///<param name="_orientSemFlg">يدخل فى الحساب الفصل التمهيدى</param>
		///<param name="_maxAcadWarn">يتم فصل الطالب اذا تكرار انخفاض معدله التراكمى لمدة عدد فصول
		/// 		/// متصلة</param>
		///<param name="_maxAcadWarnSep">CSS اقصى عدد انذارات منفصلة قبل الفصل</param>
		///<param name="_chAchvPercent">يستثنى من الفصل الاكاديمى الطالب الذى انهى بنجاح نسبة
		/// 		/// % من الساعات المعتمدة المطلوبة للتخرج</param>
		///<param name="_cgpa">يستثنى من الفصل الاكاديمى الطالب الذى انهى بنجاح نسبة
		/// 		/// و  وحصل على معدل تراكمي  اكبر من</param>
		///<param name="_gpa">Later--يستثنى من الفصل الاكاديمى الطالب الذى انهى بنجاح نسبة
		/// 		/// و  وحصل على معدل فصلى اكبر من</param>
		///<param name="_regCh">CSS حالة تسجيل الطالب لمقررات دراسية بعدد ساعات معين اقل من عدد محدد من الساعات المعتمدة يتم استثناءه من الانذارات</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public EntPlcyAcadWarnBase(System.Decimal _entPlcyAcadWarnId, System.Decimal _edBylawId, 
			System.Decimal _startSemCount, System.Decimal _startSemCountTrns, System.Decimal _optionalSemFlg, 
			System.Decimal _orientSemFlg, System.Decimal? _maxAcadWarn, System.Decimal? _maxAcadWarnSep, 
			System.Decimal? _chAchvPercent, System.Decimal? _cgpa, System.Decimal? _gpa, 
			System.Int32? _regCh, System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			this.entityData = new EntPlcyAcadWarnEntityData();
			this.backupData = null;

			this.EntPlcyAcadWarnId = _entPlcyAcadWarnId;
			this.EdBylawId = _edBylawId;
			this.StartSemCount = _startSemCount;
			this.StartSemCountTrns = _startSemCountTrns;
			this.OptionalSemFlg = _optionalSemFlg;
			this.OrientSemFlg = _orientSemFlg;
			this.MaxAcadWarn = _maxAcadWarn;
			this.MaxAcadWarnSep = _maxAcadWarnSep;
			this.ChAchvPercent = _chAchvPercent;
			this.Cgpa = _cgpa;
			this.Gpa = _gpa;
			this.RegCh = _regCh;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EntPlcyAcadWarn"/> instance.
		///</summary>
		///<param name="_entPlcyAcadWarnId">قواعد  عامة على كل الانذارات الاكاديمية</param>
		///<param name="_edBylawId"></param>
		///<param name="_startSemCount"></param>
		///<param name="_startSemCountTrns"></param>
		///<param name="_optionalSemFlg">يدخل فى الحساب الفصل الصيفى</param>
		///<param name="_orientSemFlg">يدخل فى الحساب الفصل التمهيدى</param>
		///<param name="_maxAcadWarn">يتم فصل الطالب اذا تكرار انخفاض معدله التراكمى لمدة عدد فصول
		/// 		/// متصلة</param>
		///<param name="_maxAcadWarnSep">CSS اقصى عدد انذارات منفصلة قبل الفصل</param>
		///<param name="_chAchvPercent">يستثنى من الفصل الاكاديمى الطالب الذى انهى بنجاح نسبة
		/// 		/// % من الساعات المعتمدة المطلوبة للتخرج</param>
		///<param name="_cgpa">يستثنى من الفصل الاكاديمى الطالب الذى انهى بنجاح نسبة
		/// 		/// و  وحصل على معدل تراكمي  اكبر من</param>
		///<param name="_gpa">Later--يستثنى من الفصل الاكاديمى الطالب الذى انهى بنجاح نسبة
		/// 		/// و  وحصل على معدل فصلى اكبر من</param>
		///<param name="_regCh">CSS حالة تسجيل الطالب لمقررات دراسية بعدد ساعات معين اقل من عدد محدد من الساعات المعتمدة يتم استثناءه من الانذارات</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static EntPlcyAcadWarn CreateEntPlcyAcadWarn(System.Decimal _entPlcyAcadWarnId, System.Decimal _edBylawId, 
			System.Decimal _startSemCount, System.Decimal _startSemCountTrns, System.Decimal _optionalSemFlg, 
			System.Decimal _orientSemFlg, System.Decimal? _maxAcadWarn, System.Decimal? _maxAcadWarnSep, 
			System.Decimal? _chAchvPercent, System.Decimal? _cgpa, System.Decimal? _gpa, 
			System.Int32? _regCh, System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			EntPlcyAcadWarn newEntPlcyAcadWarn = new EntPlcyAcadWarn();
			newEntPlcyAcadWarn.EntPlcyAcadWarnId = _entPlcyAcadWarnId;
			newEntPlcyAcadWarn.EdBylawId = _edBylawId;
			newEntPlcyAcadWarn.StartSemCount = _startSemCount;
			newEntPlcyAcadWarn.StartSemCountTrns = _startSemCountTrns;
			newEntPlcyAcadWarn.OptionalSemFlg = _optionalSemFlg;
			newEntPlcyAcadWarn.OrientSemFlg = _orientSemFlg;
			newEntPlcyAcadWarn.MaxAcadWarn = _maxAcadWarn;
			newEntPlcyAcadWarn.MaxAcadWarnSep = _maxAcadWarnSep;
			newEntPlcyAcadWarn.ChAchvPercent = _chAchvPercent;
			newEntPlcyAcadWarn.Cgpa = _cgpa;
			newEntPlcyAcadWarn.Gpa = _gpa;
			newEntPlcyAcadWarn.RegCh = _regCh;
			newEntPlcyAcadWarn.SeUserId = _seUserId;
			newEntPlcyAcadWarn.LastDate = _lastDate;
			return newEntPlcyAcadWarn;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EntPlcyAcadWarnId property. 
		///		قواعد  عامة على كل الانذارات الاكاديمية
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"قواعد  عامة على كل الانذارات الاكاديمية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EntPlcyAcadWarnId
		{
			get
			{
				return this.entityData.EntPlcyAcadWarnId; 
			}
			
			set
			{
				if (this.entityData.EntPlcyAcadWarnId == value)
					return;
					
				OnColumnChanging(EntPlcyAcadWarnColumn.EntPlcyAcadWarnId, this.entityData.EntPlcyAcadWarnId);
				this.entityData.EntPlcyAcadWarnId = value;
				this.EntityId.EntPlcyAcadWarnId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPlcyAcadWarnColumn.EntPlcyAcadWarnId, this.entityData.EntPlcyAcadWarnId);
				OnPropertyChanged("EntPlcyAcadWarnId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ENT_PLCY_ACAD_WARN_ID property.
		///		قواعد  عامة على كل الانذارات الاكاديمية
		/// </summary>
		/// <remarks>This is the original value of the ENT_PLCY_ACAD_WARN_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEntPlcyAcadWarnId
		{
			get { return this.entityData.OriginalEntPlcyAcadWarnId; }
			set { this.entityData.OriginalEntPlcyAcadWarnId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdBylawId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdBylawId
		{
			get
			{
				return this.entityData.EdBylawId; 
			}
			
			set
			{
				if (this.entityData.EdBylawId == value)
					return;
					
				OnColumnChanging(EntPlcyAcadWarnColumn.EdBylawId, this.entityData.EdBylawId);
				this.entityData.EdBylawId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPlcyAcadWarnColumn.EdBylawId, this.entityData.EdBylawId);
				OnPropertyChanged("EdBylawId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StartSemCount property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal StartSemCount
		{
			get
			{
				return this.entityData.StartSemCount; 
			}
			
			set
			{
				if (this.entityData.StartSemCount == value)
					return;
					
				OnColumnChanging(EntPlcyAcadWarnColumn.StartSemCount, this.entityData.StartSemCount);
				this.entityData.StartSemCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPlcyAcadWarnColumn.StartSemCount, this.entityData.StartSemCount);
				OnPropertyChanged("StartSemCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StartSemCountTrns property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal StartSemCountTrns
		{
			get
			{
				return this.entityData.StartSemCountTrns; 
			}
			
			set
			{
				if (this.entityData.StartSemCountTrns == value)
					return;
					
				OnColumnChanging(EntPlcyAcadWarnColumn.StartSemCountTrns, this.entityData.StartSemCountTrns);
				this.entityData.StartSemCountTrns = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPlcyAcadWarnColumn.StartSemCountTrns, this.entityData.StartSemCountTrns);
				OnPropertyChanged("StartSemCountTrns");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OptionalSemFlg property. 
		///		يدخل فى الحساب الفصل الصيفى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"يدخل فى الحساب الفصل الصيفى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal OptionalSemFlg
		{
			get
			{
				return this.entityData.OptionalSemFlg; 
			}
			
			set
			{
				if (this.entityData.OptionalSemFlg == value)
					return;
					
				OnColumnChanging(EntPlcyAcadWarnColumn.OptionalSemFlg, this.entityData.OptionalSemFlg);
				this.entityData.OptionalSemFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPlcyAcadWarnColumn.OptionalSemFlg, this.entityData.OptionalSemFlg);
				OnPropertyChanged("OptionalSemFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrientSemFlg property. 
		///		يدخل فى الحساب الفصل التمهيدى
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"يدخل فى الحساب الفصل التمهيدى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal OrientSemFlg
		{
			get
			{
				return this.entityData.OrientSemFlg; 
			}
			
			set
			{
				if (this.entityData.OrientSemFlg == value)
					return;
					
				OnColumnChanging(EntPlcyAcadWarnColumn.OrientSemFlg, this.entityData.OrientSemFlg);
				this.entityData.OrientSemFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPlcyAcadWarnColumn.OrientSemFlg, this.entityData.OrientSemFlg);
				OnPropertyChanged("OrientSemFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaxAcadWarn property. 
		///		يتم فصل الطالب اذا تكرار انخفاض معدله التراكمى لمدة عدد فصول
		/// 		/// متصلة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMaxAcadWarnNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"يتم فصل الطالب اذا تكرار انخفاض معدله التراكمى لمدة عدد فصول متصلة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MaxAcadWarn
		{
			get
			{
				return this.entityData.MaxAcadWarn; 
			}
			
			set
			{
				if (this.entityData.MaxAcadWarn == value)
					return;
					
				OnColumnChanging(EntPlcyAcadWarnColumn.MaxAcadWarn, this.entityData.MaxAcadWarn);
				this.entityData.MaxAcadWarn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPlcyAcadWarnColumn.MaxAcadWarn, this.entityData.MaxAcadWarn);
				OnPropertyChanged("MaxAcadWarn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaxAcadWarnSep property. 
		///		CSS اقصى عدد انذارات منفصلة قبل الفصل
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMaxAcadWarnSepNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"CSS اقصى عدد انذارات منفصلة قبل الفصل"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MaxAcadWarnSep
		{
			get
			{
				return this.entityData.MaxAcadWarnSep; 
			}
			
			set
			{
				if (this.entityData.MaxAcadWarnSep == value)
					return;
					
				OnColumnChanging(EntPlcyAcadWarnColumn.MaxAcadWarnSep, this.entityData.MaxAcadWarnSep);
				this.entityData.MaxAcadWarnSep = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPlcyAcadWarnColumn.MaxAcadWarnSep, this.entityData.MaxAcadWarnSep);
				OnPropertyChanged("MaxAcadWarnSep");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ChAchvPercent property. 
		///		يستثنى من الفصل الاكاديمى الطالب الذى انهى بنجاح نسبة
		/// 		/// % من الساعات المعتمدة المطلوبة للتخرج
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsChAchvPercentNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"يستثنى من الفصل الاكاديمى الطالب الذى انهى بنجاح نسبة % من الساعات المعتمدة المطلوبة للتخرج"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ChAchvPercent
		{
			get
			{
				return this.entityData.ChAchvPercent; 
			}
			
			set
			{
				if (this.entityData.ChAchvPercent == value)
					return;
					
				OnColumnChanging(EntPlcyAcadWarnColumn.ChAchvPercent, this.entityData.ChAchvPercent);
				this.entityData.ChAchvPercent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPlcyAcadWarnColumn.ChAchvPercent, this.entityData.ChAchvPercent);
				OnPropertyChanged("ChAchvPercent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Cgpa property. 
		///		يستثنى من الفصل الاكاديمى الطالب الذى انهى بنجاح نسبة
		/// 		/// و  وحصل على معدل تراكمي  اكبر من
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCgpaNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"يستثنى من الفصل الاكاديمى الطالب الذى انهى بنجاح نسبة و  وحصل على معدل تراكمي  اكبر من"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Cgpa
		{
			get
			{
				return this.entityData.Cgpa; 
			}
			
			set
			{
				if (this.entityData.Cgpa == value)
					return;
					
				OnColumnChanging(EntPlcyAcadWarnColumn.Cgpa, this.entityData.Cgpa);
				this.entityData.Cgpa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPlcyAcadWarnColumn.Cgpa, this.entityData.Cgpa);
				OnPropertyChanged("Cgpa");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Gpa property. 
		///		Later--يستثنى من الفصل الاكاديمى الطالب الذى انهى بنجاح نسبة
		/// 		/// و  وحصل على معدل فصلى اكبر من
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGpaNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Later--يستثنى من الفصل الاكاديمى الطالب الذى انهى بنجاح نسبة و  وحصل على معدل فصلى اكبر من"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Gpa
		{
			get
			{
				return this.entityData.Gpa; 
			}
			
			set
			{
				if (this.entityData.Gpa == value)
					return;
					
				OnColumnChanging(EntPlcyAcadWarnColumn.Gpa, this.entityData.Gpa);
				this.entityData.Gpa = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPlcyAcadWarnColumn.Gpa, this.entityData.Gpa);
				OnPropertyChanged("Gpa");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RegCh property. 
		///		CSS حالة تسجيل الطالب لمقررات دراسية بعدد ساعات معين اقل من عدد محدد من الساعات المعتمدة يتم استثناءه من الانذارات
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsRegChNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"CSS حالة تسجيل الطالب لمقررات دراسية بعدد ساعات معين اقل من عدد محدد من الساعات المعتمدة يتم استثناءه من الانذارات"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? RegCh
		{
			get
			{
				return this.entityData.RegCh; 
			}
			
			set
			{
				if (this.entityData.RegCh == value)
					return;
					
				OnColumnChanging(EntPlcyAcadWarnColumn.RegCh, this.entityData.RegCh);
				this.entityData.RegCh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPlcyAcadWarnColumn.RegCh, this.entityData.RegCh);
				OnPropertyChanged("RegCh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(EntPlcyAcadWarnColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPlcyAcadWarnColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(EntPlcyAcadWarnColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPlcyAcadWarnColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdBylaw"/>.
		/// </summary>
		/// <value>The source EdBylaw for EdBylawId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdBylaw EdBylawIdSource
      	{
            get { return entityData.EdBylawIdSource; }
            set { entityData.EdBylawIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EntPlcyAcadWarnDtl objects
		///	which are related to this object through the relation FK_ENT_PLCY_ACAD_WARN_DTL_ENT_POLICY_ACAD_WARN
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPlcyAcadWarnDtl> EntPlcyAcadWarnDtlCollection
		{
			get { return entityData.EntPlcyAcadWarnDtlCollection; }
			set { entityData.EntPlcyAcadWarnDtlCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ENT_PLCY_ACAD_WARN"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ENT_PLCY_ACAD_WARN_ID", "ED_BYLAW_ID", "START_SEM_COUNT", "START_SEM_COUNT_TRNS", "OPTIONAL_SEM_FLG", "ORIENT_SEM_FLG", "MAX_ACAD_WARN", "MAX_ACAD_WARN_SEP", "CH_ACHV_PERCENT", "CGPA", "GPA", "REG_CH", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EntPlcyAcadWarnEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EntPlcyAcadWarn) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EntPlcyAcadWarn>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EntPlcyAcadWarn);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EntPlcyAcadWarn Entity 
		///</summary>
		protected virtual EntPlcyAcadWarn Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EntPlcyAcadWarn copy = new EntPlcyAcadWarn();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EntPlcyAcadWarnId = this.EntPlcyAcadWarnId;
					copy.OriginalEntPlcyAcadWarnId = this.OriginalEntPlcyAcadWarnId;
				copy.EdBylawId = this.EdBylawId;
				copy.StartSemCount = this.StartSemCount;
				copy.StartSemCountTrns = this.StartSemCountTrns;
				copy.OptionalSemFlg = this.OptionalSemFlg;
				copy.OrientSemFlg = this.OrientSemFlg;
				copy.MaxAcadWarn = this.MaxAcadWarn;
				copy.MaxAcadWarnSep = this.MaxAcadWarnSep;
				copy.ChAchvPercent = this.ChAchvPercent;
				copy.Cgpa = this.Cgpa;
				copy.Gpa = this.Gpa;
				copy.RegCh = this.RegCh;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.EdBylawIdSource != null && existingCopies.Contains(this.EdBylawIdSource))
				copy.EdBylawIdSource = existingCopies[this.EdBylawIdSource] as EdBylaw;
			else
				copy.EdBylawIdSource = MakeCopyOf(this.EdBylawIdSource, existingCopies) as EdBylaw;
		
			//deep copy nested objects
			copy.EntPlcyAcadWarnDtlCollection = (TList<EntPlcyAcadWarnDtl>) MakeCopyOf(this.EntPlcyAcadWarnDtlCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EntPlcyAcadWarn Entity 
		///</summary>
		public virtual EntPlcyAcadWarn Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EntPlcyAcadWarn Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EntPlcyAcadWarn DeepCopy()
		{
			return EntityHelper.Clone<EntPlcyAcadWarn>(this as EntPlcyAcadWarn);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EntPlcyAcadWarnEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EntPlcyAcadWarnEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EntPlcyAcadWarnEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EntPlcyAcadWarnColumn column)
		{
			switch(column)
			{
					case EntPlcyAcadWarnColumn.EntPlcyAcadWarnId:
					return entityData.EntPlcyAcadWarnId != _originalData.EntPlcyAcadWarnId;
					case EntPlcyAcadWarnColumn.EdBylawId:
					return entityData.EdBylawId != _originalData.EdBylawId;
					case EntPlcyAcadWarnColumn.StartSemCount:
					return entityData.StartSemCount != _originalData.StartSemCount;
					case EntPlcyAcadWarnColumn.StartSemCountTrns:
					return entityData.StartSemCountTrns != _originalData.StartSemCountTrns;
					case EntPlcyAcadWarnColumn.OptionalSemFlg:
					return entityData.OptionalSemFlg != _originalData.OptionalSemFlg;
					case EntPlcyAcadWarnColumn.OrientSemFlg:
					return entityData.OrientSemFlg != _originalData.OrientSemFlg;
					case EntPlcyAcadWarnColumn.MaxAcadWarn:
					return entityData.MaxAcadWarn != _originalData.MaxAcadWarn;
					case EntPlcyAcadWarnColumn.MaxAcadWarnSep:
					return entityData.MaxAcadWarnSep != _originalData.MaxAcadWarnSep;
					case EntPlcyAcadWarnColumn.ChAchvPercent:
					return entityData.ChAchvPercent != _originalData.ChAchvPercent;
					case EntPlcyAcadWarnColumn.Cgpa:
					return entityData.Cgpa != _originalData.Cgpa;
					case EntPlcyAcadWarnColumn.Gpa:
					return entityData.Gpa != _originalData.Gpa;
					case EntPlcyAcadWarnColumn.RegCh:
					return entityData.RegCh != _originalData.RegCh;
					case EntPlcyAcadWarnColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case EntPlcyAcadWarnColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EntPlcyAcadWarnColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EntPlcyAcadWarnId != _originalData.EntPlcyAcadWarnId;
			result = result || entityData.EdBylawId != _originalData.EdBylawId;
			result = result || entityData.StartSemCount != _originalData.StartSemCount;
			result = result || entityData.StartSemCountTrns != _originalData.StartSemCountTrns;
			result = result || entityData.OptionalSemFlg != _originalData.OptionalSemFlg;
			result = result || entityData.OrientSemFlg != _originalData.OrientSemFlg;
			result = result || entityData.MaxAcadWarn != _originalData.MaxAcadWarn;
			result = result || entityData.MaxAcadWarnSep != _originalData.MaxAcadWarnSep;
			result = result || entityData.ChAchvPercent != _originalData.ChAchvPercent;
			result = result || entityData.Cgpa != _originalData.Cgpa;
			result = result || entityData.Gpa != _originalData.Gpa;
			result = result || entityData.RegCh != _originalData.RegCh;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a EntPlcyAcadWarn Entity with the original data.
		///</summary>
		public EntPlcyAcadWarn GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEntPlcyAcadWarn(
				_originalData.EntPlcyAcadWarnId,
				_originalData.EdBylawId,
				_originalData.StartSemCount,
				_originalData.StartSemCountTrns,
				_originalData.OptionalSemFlg,
				_originalData.OrientSemFlg,
				_originalData.MaxAcadWarn,
				_originalData.MaxAcadWarnSep,
				_originalData.ChAchvPercent,
				_originalData.Cgpa,
				_originalData.Gpa,
				_originalData.RegCh,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (EntPlcyAcadWarn)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EntPlcyAcadWarnBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EntPlcyAcadWarnBase)
				return ValueEquals(this, (EntPlcyAcadWarnBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EntPlcyAcadWarnBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EntPlcyAcadWarnId.GetHashCode() ^ 
					this.EdBylawId.GetHashCode() ^ 
					this.StartSemCount.GetHashCode() ^ 
					this.StartSemCountTrns.GetHashCode() ^ 
					this.OptionalSemFlg.GetHashCode() ^ 
					this.OrientSemFlg.GetHashCode() ^ 
					((this.MaxAcadWarn == null) ? string.Empty : this.MaxAcadWarn.ToString()).GetHashCode() ^ 
					((this.MaxAcadWarnSep == null) ? string.Empty : this.MaxAcadWarnSep.ToString()).GetHashCode() ^ 
					((this.ChAchvPercent == null) ? string.Empty : this.ChAchvPercent.ToString()).GetHashCode() ^ 
					((this.Cgpa == null) ? string.Empty : this.Cgpa.ToString()).GetHashCode() ^ 
					((this.Gpa == null) ? string.Empty : this.Gpa.ToString()).GetHashCode() ^ 
					((this.RegCh == null) ? string.Empty : this.RegCh.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EntPlcyAcadWarnBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EntPlcyAcadWarnBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EntPlcyAcadWarnBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EntPlcyAcadWarnBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EntPlcyAcadWarnBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EntPlcyAcadWarnBase Object1, EntPlcyAcadWarnBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EntPlcyAcadWarnId != Object2.EntPlcyAcadWarnId)
				equal = false;
			if (Object1.EdBylawId != Object2.EdBylawId)
				equal = false;
			if (Object1.StartSemCount != Object2.StartSemCount)
				equal = false;
			if (Object1.StartSemCountTrns != Object2.StartSemCountTrns)
				equal = false;
			if (Object1.OptionalSemFlg != Object2.OptionalSemFlg)
				equal = false;
			if (Object1.OrientSemFlg != Object2.OrientSemFlg)
				equal = false;
			if ( Object1.MaxAcadWarn != null && Object2.MaxAcadWarn != null )
			{
				if (Object1.MaxAcadWarn != Object2.MaxAcadWarn)
					equal = false;
			}
			else if (Object1.MaxAcadWarn == null ^ Object2.MaxAcadWarn == null )
			{
				equal = false;
			}
			if ( Object1.MaxAcadWarnSep != null && Object2.MaxAcadWarnSep != null )
			{
				if (Object1.MaxAcadWarnSep != Object2.MaxAcadWarnSep)
					equal = false;
			}
			else if (Object1.MaxAcadWarnSep == null ^ Object2.MaxAcadWarnSep == null )
			{
				equal = false;
			}
			if ( Object1.ChAchvPercent != null && Object2.ChAchvPercent != null )
			{
				if (Object1.ChAchvPercent != Object2.ChAchvPercent)
					equal = false;
			}
			else if (Object1.ChAchvPercent == null ^ Object2.ChAchvPercent == null )
			{
				equal = false;
			}
			if ( Object1.Cgpa != null && Object2.Cgpa != null )
			{
				if (Object1.Cgpa != Object2.Cgpa)
					equal = false;
			}
			else if (Object1.Cgpa == null ^ Object2.Cgpa == null )
			{
				equal = false;
			}
			if ( Object1.Gpa != null && Object2.Gpa != null )
			{
				if (Object1.Gpa != Object2.Gpa)
					equal = false;
			}
			else if (Object1.Gpa == null ^ Object2.Gpa == null )
			{
				equal = false;
			}
			if ( Object1.RegCh != null && Object2.RegCh != null )
			{
				if (Object1.RegCh != Object2.RegCh)
					equal = false;
			}
			else if (Object1.RegCh == null ^ Object2.RegCh == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EntPlcyAcadWarnBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EntPlcyAcadWarnComparer GetComparer()
        {
            return new EntPlcyAcadWarnComparer();
        }
        */

        // Comparer delegates back to EntPlcyAcadWarn
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EntPlcyAcadWarn rhs, EntPlcyAcadWarnColumn which)
        {
            switch (which)
            {
            	
            	
            	case EntPlcyAcadWarnColumn.EntPlcyAcadWarnId:
            		return this.EntPlcyAcadWarnId.CompareTo(rhs.EntPlcyAcadWarnId);
            		
            		                 
            	
            	
            	case EntPlcyAcadWarnColumn.EdBylawId:
            		return this.EdBylawId.CompareTo(rhs.EdBylawId);
            		
            		                 
            	
            	
            	case EntPlcyAcadWarnColumn.StartSemCount:
            		return this.StartSemCount.CompareTo(rhs.StartSemCount);
            		
            		                 
            	
            	
            	case EntPlcyAcadWarnColumn.StartSemCountTrns:
            		return this.StartSemCountTrns.CompareTo(rhs.StartSemCountTrns);
            		
            		                 
            	
            	
            	case EntPlcyAcadWarnColumn.OptionalSemFlg:
            		return this.OptionalSemFlg.CompareTo(rhs.OptionalSemFlg);
            		
            		                 
            	
            	
            	case EntPlcyAcadWarnColumn.OrientSemFlg:
            		return this.OrientSemFlg.CompareTo(rhs.OrientSemFlg);
            		
            		                 
            	
            	
            	case EntPlcyAcadWarnColumn.MaxAcadWarn:
            		return this.MaxAcadWarn.Value.CompareTo(rhs.MaxAcadWarn.Value);
            		
            		                 
            	
            	
            	case EntPlcyAcadWarnColumn.MaxAcadWarnSep:
            		return this.MaxAcadWarnSep.Value.CompareTo(rhs.MaxAcadWarnSep.Value);
            		
            		                 
            	
            	
            	case EntPlcyAcadWarnColumn.ChAchvPercent:
            		return this.ChAchvPercent.Value.CompareTo(rhs.ChAchvPercent.Value);
            		
            		                 
            	
            	
            	case EntPlcyAcadWarnColumn.Cgpa:
            		return this.Cgpa.Value.CompareTo(rhs.Cgpa.Value);
            		
            		                 
            	
            	
            	case EntPlcyAcadWarnColumn.Gpa:
            		return this.Gpa.Value.CompareTo(rhs.Gpa.Value);
            		
            		                 
            	
            	
            	case EntPlcyAcadWarnColumn.RegCh:
            		return this.RegCh.Value.CompareTo(rhs.RegCh.Value);
            		
            		                 
            	
            	
            	case EntPlcyAcadWarnColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case EntPlcyAcadWarnColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EntPlcyAcadWarnKey> Members
		
		// member variable for the EntityId property
		private EntPlcyAcadWarnKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EntPlcyAcadWarnKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EntPlcyAcadWarnKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EntPlcyAcadWarn")
					.Append("|").Append( this.EntPlcyAcadWarnId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{15}{14}- EntPlcyAcadWarnId: {0}{14}- EdBylawId: {1}{14}- StartSemCount: {2}{14}- StartSemCountTrns: {3}{14}- OptionalSemFlg: {4}{14}- OrientSemFlg: {5}{14}- MaxAcadWarn: {6}{14}- MaxAcadWarnSep: {7}{14}- ChAchvPercent: {8}{14}- Cgpa: {9}{14}- Gpa: {10}{14}- RegCh: {11}{14}- SeUserId: {12}{14}- LastDate: {13}{14}{16}", 
				this.EntPlcyAcadWarnId,
				this.EdBylawId,
				this.StartSemCount,
				this.StartSemCountTrns,
				this.OptionalSemFlg,
				this.OrientSemFlg,
				(this.MaxAcadWarn == null) ? string.Empty : this.MaxAcadWarn.ToString(),
				(this.MaxAcadWarnSep == null) ? string.Empty : this.MaxAcadWarnSep.ToString(),
				(this.ChAchvPercent == null) ? string.Empty : this.ChAchvPercent.ToString(),
				(this.Cgpa == null) ? string.Empty : this.Cgpa.ToString(),
				(this.Gpa == null) ? string.Empty : this.Gpa.ToString(),
				(this.RegCh == null) ? string.Empty : this.RegCh.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ENT_PLCY_ACAD_WARN' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EntPlcyAcadWarnEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ENT_PLCY_ACAD_WARN_ID : قواعد  عامة على كل الانذارات الاكاديمية
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ENT_PLCY_ACAD_WARN"</remarks>
		public System.Decimal EntPlcyAcadWarnId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEntPlcyAcadWarnId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_BYLAW_ID : 
		/// </summary>
		public System.Decimal		  EdBylawId = 0.0m;
		
		/// <summary>
		/// START_SEM_COUNT : 
		/// </summary>
		public System.Decimal		  StartSemCount = 0.0m;
		
		/// <summary>
		/// START_SEM_COUNT_TRNS : 
		/// </summary>
		public System.Decimal		  StartSemCountTrns = 0.0m;
		
		/// <summary>
		/// OPTIONAL_SEM_FLG : يدخل فى الحساب الفصل الصيفى
		/// </summary>
		public System.Decimal		  OptionalSemFlg = 0.0m;
		
		/// <summary>
		/// ORIENT_SEM_FLG : يدخل فى الحساب الفصل التمهيدى
		/// </summary>
		public System.Decimal		  OrientSemFlg = 0.0m;
		
		/// <summary>
		/// MAX_ACAD_WARN : يتم فصل الطالب اذا تكرار انخفاض معدله التراكمى لمدة عدد فصول
		/// 		/// متصلة
		/// </summary>
		public System.Decimal?		  MaxAcadWarn = null;
		
		/// <summary>
		/// MAX_ACAD_WARN_SEP : CSS اقصى عدد انذارات منفصلة قبل الفصل
		/// </summary>
		public System.Decimal?		  MaxAcadWarnSep = null;
		
		/// <summary>
		/// CH_ACHV_PERCENT : يستثنى من الفصل الاكاديمى الطالب الذى انهى بنجاح نسبة
		/// 		/// % من الساعات المعتمدة المطلوبة للتخرج
		/// </summary>
		public System.Decimal?		  ChAchvPercent = null;
		
		/// <summary>
		/// CGPA : يستثنى من الفصل الاكاديمى الطالب الذى انهى بنجاح نسبة
		/// 		/// و  وحصل على معدل تراكمي  اكبر من
		/// </summary>
		public System.Decimal?		  Cgpa = null;
		
		/// <summary>
		/// GPA : Later--يستثنى من الفصل الاكاديمى الطالب الذى انهى بنجاح نسبة
		/// 		/// و  وحصل على معدل فصلى اكبر من
		/// </summary>
		public System.Decimal?		  Gpa = null;
		
		/// <summary>
		/// REG_CH : CSS حالة تسجيل الطالب لمقررات دراسية بعدد ساعات معين اقل من عدد محدد من الساعات المعتمدة يتم استثناءه من الانذارات
		/// </summary>
		public System.Int32?		  RegCh = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdBylaw _edBylawIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdBylaw"/>.
		/// </summary>
		/// <value>The source EdBylaw for EdBylawId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdBylaw EdBylawIdSource
      	{
            get { return this._edBylawIdSource; }
            set { this._edBylawIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EntPlcyAcadWarnDtlCollection
		
		private TList<EntPlcyAcadWarnDtl> _entPlcyAcadWarnDtlEntPlcyAcadWarnId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPlcyAcadWarnDtlEntPlcyAcadWarnId
		/// </summary>
		
		public TList<EntPlcyAcadWarnDtl> EntPlcyAcadWarnDtlCollection
		{
			get
			{
				if (_entPlcyAcadWarnDtlEntPlcyAcadWarnId == null)
				{
				_entPlcyAcadWarnDtlEntPlcyAcadWarnId = new TList<EntPlcyAcadWarnDtl>();
				}
	
				return _entPlcyAcadWarnDtlEntPlcyAcadWarnId;
			}
			set { _entPlcyAcadWarnDtlEntPlcyAcadWarnId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EntPlcyAcadWarnEntityData _tmp = new EntPlcyAcadWarnEntityData();
						
			_tmp.EntPlcyAcadWarnId = this.EntPlcyAcadWarnId;
			_tmp.OriginalEntPlcyAcadWarnId = this.OriginalEntPlcyAcadWarnId;
			
			_tmp.EdBylawId = this.EdBylawId;
			_tmp.StartSemCount = this.StartSemCount;
			_tmp.StartSemCountTrns = this.StartSemCountTrns;
			_tmp.OptionalSemFlg = this.OptionalSemFlg;
			_tmp.OrientSemFlg = this.OrientSemFlg;
			_tmp.MaxAcadWarn = this.MaxAcadWarn;
			_tmp.MaxAcadWarnSep = this.MaxAcadWarnSep;
			_tmp.ChAchvPercent = this.ChAchvPercent;
			_tmp.Cgpa = this.Cgpa;
			_tmp.Gpa = this.Gpa;
			_tmp.RegCh = this.RegCh;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdBylawIdSource != null)
				_tmp.EdBylawIdSource = MakeCopyOf(this.EdBylawIdSource) as EdBylaw;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._entPlcyAcadWarnDtlEntPlcyAcadWarnId != null)
				_tmp.EntPlcyAcadWarnDtlCollection = (TList<EntPlcyAcadWarnDtl>) MakeCopyOf(this.EntPlcyAcadWarnDtlCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EntPlcyAcadWarnEntityData _tmp = new EntPlcyAcadWarnEntityData();
						
			_tmp.EntPlcyAcadWarnId = this.EntPlcyAcadWarnId;
			_tmp.OriginalEntPlcyAcadWarnId = this.OriginalEntPlcyAcadWarnId;
			
			_tmp.EdBylawId = this.EdBylawId;
			_tmp.StartSemCount = this.StartSemCount;
			_tmp.StartSemCountTrns = this.StartSemCountTrns;
			_tmp.OptionalSemFlg = this.OptionalSemFlg;
			_tmp.OrientSemFlg = this.OrientSemFlg;
			_tmp.MaxAcadWarn = this.MaxAcadWarn;
			_tmp.MaxAcadWarnSep = this.MaxAcadWarnSep;
			_tmp.ChAchvPercent = this.ChAchvPercent;
			_tmp.Cgpa = this.Cgpa;
			_tmp.Gpa = this.Gpa;
			_tmp.RegCh = this.RegCh;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdBylawIdSource != null && existingCopies.Contains(this.EdBylawIdSource))
				_tmp.EdBylawIdSource = existingCopies[this.EdBylawIdSource] as EdBylaw;
			else
				_tmp.EdBylawIdSource = MakeCopyOf(this.EdBylawIdSource, existingCopies) as EdBylaw;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EntPlcyAcadWarnDtlCollection = (TList<EntPlcyAcadWarnDtl>) MakeCopyOf(this.EntPlcyAcadWarnDtlCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntPlcyAcadWarnColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EntPlcyAcadWarnColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntPlcyAcadWarnColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EntPlcyAcadWarnColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntPlcyAcadWarnColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EntPlcyAcadWarnColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EntPlcyAcadWarnEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EntPlcyAcadWarnEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntPlcyAcadWarnColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EntPlcyAcadWarnColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EntPlcyAcadWarnEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EntPlcyAcadWarnEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EntPlcyAcadWarnEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EntPlcyAcadWarn"/> object.
	/// </remarks>
	public class EntPlcyAcadWarnEventArgs : System.EventArgs
	{
		private EntPlcyAcadWarnColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EntPlcyAcadWarnEventArgs class.
		///</summary>
		public EntPlcyAcadWarnEventArgs(EntPlcyAcadWarnColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EntPlcyAcadWarnEventArgs class.
		///</summary>
		public EntPlcyAcadWarnEventArgs(EntPlcyAcadWarnColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EntPlcyAcadWarnColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EntPlcyAcadWarnColumn" />
		public EntPlcyAcadWarnColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EntPlcyAcadWarn related events.
	///</summary>
	public delegate void EntPlcyAcadWarnEventHandler(object sender, EntPlcyAcadWarnEventArgs e);
	
	#region EntPlcyAcadWarnComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EntPlcyAcadWarnComparer : System.Collections.Generic.IComparer<EntPlcyAcadWarn>
	{
		EntPlcyAcadWarnColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EntPlcyAcadWarnComparer"/> class.
        /// </summary>
		public EntPlcyAcadWarnComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EntPlcyAcadWarnComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EntPlcyAcadWarnComparer(EntPlcyAcadWarnColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EntPlcyAcadWarn"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EntPlcyAcadWarn"/> to compare.</param>
        /// <param name="b">The second <c>EntPlcyAcadWarn</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EntPlcyAcadWarn a, EntPlcyAcadWarn b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EntPlcyAcadWarn entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EntPlcyAcadWarn a, EntPlcyAcadWarn b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EntPlcyAcadWarnColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EntPlcyAcadWarnKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EntPlcyAcadWarn"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EntPlcyAcadWarnKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EntPlcyAcadWarnKey class.
		/// </summary>
		public EntPlcyAcadWarnKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EntPlcyAcadWarnKey class.
		/// </summary>
		public EntPlcyAcadWarnKey(EntPlcyAcadWarnBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EntPlcyAcadWarnId = entity.EntPlcyAcadWarnId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EntPlcyAcadWarnKey class.
		/// </summary>
		public EntPlcyAcadWarnKey(System.Decimal _entPlcyAcadWarnId)
		{
			#region Init Properties

			this.EntPlcyAcadWarnId = _entPlcyAcadWarnId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EntPlcyAcadWarnBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EntPlcyAcadWarnBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EntPlcyAcadWarnId property
		private System.Decimal _entPlcyAcadWarnId;
		
		/// <summary>
		/// Gets or sets the EntPlcyAcadWarnId property.
		/// </summary>
		public System.Decimal EntPlcyAcadWarnId
		{
			get { return _entPlcyAcadWarnId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EntPlcyAcadWarnId = value;
				
				_entPlcyAcadWarnId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EntPlcyAcadWarnId = ( values["EntPlcyAcadWarnId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EntPlcyAcadWarnId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EntPlcyAcadWarnId", EntPlcyAcadWarnId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EntPlcyAcadWarnId: {0}{1}",
								EntPlcyAcadWarnId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EntPlcyAcadWarnColumn Enum
	
	/// <summary>
	/// Enumerate the EntPlcyAcadWarn columns.
	/// </summary>
	[Serializable]
	public enum EntPlcyAcadWarnColumn : int
	{
		/// <summary>
		/// EntPlcyAcadWarnId : قواعد  عامة على كل الانذارات الاكاديمية
		/// </summary>
		[EnumTextValue("ENT_PLCY_ACAD_WARN_ID")]
		[ColumnEnum("ENT_PLCY_ACAD_WARN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EntPlcyAcadWarnId = 1,
		/// <summary>
		/// EdBylawId : 
		/// </summary>
		[EnumTextValue("ED_BYLAW_ID")]
		[ColumnEnum("ED_BYLAW_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdBylawId = 2,
		/// <summary>
		/// StartSemCount : 
		/// </summary>
		[EnumTextValue("START_SEM_COUNT")]
		[ColumnEnum("START_SEM_COUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		StartSemCount = 3,
		/// <summary>
		/// StartSemCountTrns : 
		/// </summary>
		[EnumTextValue("START_SEM_COUNT_TRNS")]
		[ColumnEnum("START_SEM_COUNT_TRNS", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		StartSemCountTrns = 4,
		/// <summary>
		/// OptionalSemFlg : يدخل فى الحساب الفصل الصيفى
		/// </summary>
		[EnumTextValue("OPTIONAL_SEM_FLG")]
		[ColumnEnum("OPTIONAL_SEM_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		OptionalSemFlg = 5,
		/// <summary>
		/// OrientSemFlg : يدخل فى الحساب الفصل التمهيدى
		/// </summary>
		[EnumTextValue("ORIENT_SEM_FLG")]
		[ColumnEnum("ORIENT_SEM_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		OrientSemFlg = 6,
		/// <summary>
		/// MaxAcadWarn : يتم فصل الطالب اذا تكرار انخفاض معدله التراكمى لمدة عدد فصول
		/// 		/// متصلة
		/// </summary>
		[EnumTextValue("MAX_ACAD_WARN")]
		[ColumnEnum("MAX_ACAD_WARN", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MaxAcadWarn = 7,
		/// <summary>
		/// MaxAcadWarnSep : CSS اقصى عدد انذارات منفصلة قبل الفصل
		/// </summary>
		[EnumTextValue("MAX_ACAD_WARN_SEP")]
		[ColumnEnum("MAX_ACAD_WARN_SEP", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MaxAcadWarnSep = 8,
		/// <summary>
		/// ChAchvPercent : يستثنى من الفصل الاكاديمى الطالب الذى انهى بنجاح نسبة
		/// 		/// % من الساعات المعتمدة المطلوبة للتخرج
		/// </summary>
		[EnumTextValue("CH_ACHV_PERCENT")]
		[ColumnEnum("CH_ACHV_PERCENT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ChAchvPercent = 9,
		/// <summary>
		/// Cgpa : يستثنى من الفصل الاكاديمى الطالب الذى انهى بنجاح نسبة
		/// 		/// و  وحصل على معدل تراكمي  اكبر من
		/// </summary>
		[EnumTextValue("CGPA")]
		[ColumnEnum("CGPA", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Cgpa = 10,
		/// <summary>
		/// Gpa : Later--يستثنى من الفصل الاكاديمى الطالب الذى انهى بنجاح نسبة
		/// 		/// و  وحصل على معدل فصلى اكبر من
		/// </summary>
		[EnumTextValue("GPA")]
		[ColumnEnum("GPA", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Gpa = 11,
		/// <summary>
		/// RegCh : CSS حالة تسجيل الطالب لمقررات دراسية بعدد ساعات معين اقل من عدد محدد من الساعات المعتمدة يتم استثناءه من الانذارات
		/// </summary>
		[EnumTextValue("REG_CH")]
		[ColumnEnum("REG_CH", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		RegCh = 12,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 13,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 14
	}//End enum

	#endregion EntPlcyAcadWarnColumn Enum

} // end namespace
