
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file FeeCdeInvocStatus.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'FEE_CDE_INVOC_STATUS' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class FeeCdeInvocStatusBase : EntityBase, IFeeCdeInvocStatus, IEntityId<FeeCdeInvocStatusKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private FeeCdeInvocStatusEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private FeeCdeInvocStatusEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private FeeCdeInvocStatusEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<FeeCdeInvocStatus> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeCdeInvocStatusEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeCdeInvocStatusEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="FeeCdeInvocStatusBase"/> instance.
		///</summary>
		public FeeCdeInvocStatusBase()
		{
			this.entityData = new FeeCdeInvocStatusEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="FeeCdeInvocStatusBase"/> instance.
		///</summary>
		///<param name="_feeCdeInvocStatusId">new-review-paied-cancel</param>
		///<param name="_invocStatusAr"></param>
		///<param name="_invocStatusEn"></param>
		public FeeCdeInvocStatusBase(System.Int32 _feeCdeInvocStatusId, System.String _invocStatusAr, 
			System.String _invocStatusEn)
		{
			this.entityData = new FeeCdeInvocStatusEntityData();
			this.backupData = null;

			this.FeeCdeInvocStatusId = _feeCdeInvocStatusId;
			this.InvocStatusAr = _invocStatusAr;
			this.InvocStatusEn = _invocStatusEn;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="FeeCdeInvocStatus"/> instance.
		///</summary>
		///<param name="_feeCdeInvocStatusId">new-review-paied-cancel</param>
		///<param name="_invocStatusAr"></param>
		///<param name="_invocStatusEn"></param>
		public static FeeCdeInvocStatus CreateFeeCdeInvocStatus(System.Int32 _feeCdeInvocStatusId, System.String _invocStatusAr, 
			System.String _invocStatusEn)
		{
			FeeCdeInvocStatus newFeeCdeInvocStatus = new FeeCdeInvocStatus();
			newFeeCdeInvocStatus.FeeCdeInvocStatusId = _feeCdeInvocStatusId;
			newFeeCdeInvocStatus.InvocStatusAr = _invocStatusAr;
			newFeeCdeInvocStatus.InvocStatusEn = _invocStatusEn;
			return newFeeCdeInvocStatus;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the FeeCdeInvocStatusId property. 
		///		new-review-paied-cancel
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"new-review-paied-cancel"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 FeeCdeInvocStatusId
		{
			get
			{
				return this.entityData.FeeCdeInvocStatusId; 
			}
			
			set
			{
				if (this.entityData.FeeCdeInvocStatusId == value)
					return;
					
				OnColumnChanging(FeeCdeInvocStatusColumn.FeeCdeInvocStatusId, this.entityData.FeeCdeInvocStatusId);
				this.entityData.FeeCdeInvocStatusId = value;
				this.EntityId.FeeCdeInvocStatusId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCdeInvocStatusColumn.FeeCdeInvocStatusId, this.entityData.FeeCdeInvocStatusId);
				OnPropertyChanged("FeeCdeInvocStatusId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the FEE_CDE_INVOC_STATUS_ID property.
		///		new-review-paied-cancel
		/// </summary>
		/// <remarks>This is the original value of the FEE_CDE_INVOC_STATUS_ID property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalFeeCdeInvocStatusId
		{
			get { return this.entityData.OriginalFeeCdeInvocStatusId; }
			set { this.entityData.OriginalFeeCdeInvocStatusId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the InvocStatusAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String InvocStatusAr
		{
			get
			{
				return this.entityData.InvocStatusAr; 
			}
			
			set
			{
				if (this.entityData.InvocStatusAr == value)
					return;
					
				OnColumnChanging(FeeCdeInvocStatusColumn.InvocStatusAr, this.entityData.InvocStatusAr);
				this.entityData.InvocStatusAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCdeInvocStatusColumn.InvocStatusAr, this.entityData.InvocStatusAr);
				OnPropertyChanged("InvocStatusAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InvocStatusEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String InvocStatusEn
		{
			get
			{
				return this.entityData.InvocStatusEn; 
			}
			
			set
			{
				if (this.entityData.InvocStatusEn == value)
					return;
					
				OnColumnChanging(FeeCdeInvocStatusColumn.InvocStatusEn, this.entityData.InvocStatusEn);
				this.entityData.InvocStatusEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCdeInvocStatusColumn.InvocStatusEn, this.entityData.InvocStatusEn);
				OnPropertyChanged("InvocStatusEn");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of FeeInvoice objects
		///	which are related to this object through the relation FK_FEE_INVOICE_FEE_CDE_INVOC_STATUS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeInvoice> FeeInvoiceCollection
		{
			get { return entityData.FeeInvoiceCollection; }
			set { entityData.FeeInvoiceCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("InvocStatusAr", "Invoc Status Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("InvocStatusAr", "Invoc Status Ar", 150));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("InvocStatusEn", "Invoc Status En"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("InvocStatusEn", "Invoc Status En", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "FEE_CDE_INVOC_STATUS"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"FEE_CDE_INVOC_STATUS_ID", "INVOC_STATUS_AR", "INVOC_STATUS_EN"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as FeeCdeInvocStatusEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (FeeCdeInvocStatus) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<FeeCdeInvocStatus>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as FeeCdeInvocStatus);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed FeeCdeInvocStatus Entity 
		///</summary>
		protected virtual FeeCdeInvocStatus Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			FeeCdeInvocStatus copy = new FeeCdeInvocStatus();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.FeeCdeInvocStatusId = this.FeeCdeInvocStatusId;
					copy.OriginalFeeCdeInvocStatusId = this.OriginalFeeCdeInvocStatusId;
				copy.InvocStatusAr = this.InvocStatusAr;
				copy.InvocStatusEn = this.InvocStatusEn;
			
		
			//deep copy nested objects
			copy.FeeInvoiceCollection = (TList<FeeInvoice>) MakeCopyOf(this.FeeInvoiceCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed FeeCdeInvocStatus Entity 
		///</summary>
		public virtual FeeCdeInvocStatus Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed FeeCdeInvocStatus Entity which is a deep copy of the current entity.
		///</summary>
		public virtual FeeCdeInvocStatus DeepCopy()
		{
			return EntityHelper.Clone<FeeCdeInvocStatus>(this as FeeCdeInvocStatus);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as FeeCdeInvocStatusEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new FeeCdeInvocStatusEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as FeeCdeInvocStatusEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(FeeCdeInvocStatusColumn column)
		{
			switch(column)
			{
					case FeeCdeInvocStatusColumn.FeeCdeInvocStatusId:
					return entityData.FeeCdeInvocStatusId != _originalData.FeeCdeInvocStatusId;
					case FeeCdeInvocStatusColumn.InvocStatusAr:
					return entityData.InvocStatusAr != _originalData.InvocStatusAr;
					case FeeCdeInvocStatusColumn.InvocStatusEn:
					return entityData.InvocStatusEn != _originalData.InvocStatusEn;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< FeeCdeInvocStatusColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.FeeCdeInvocStatusId != _originalData.FeeCdeInvocStatusId;
			result = result || entityData.InvocStatusAr != _originalData.InvocStatusAr;
			result = result || entityData.InvocStatusEn != _originalData.InvocStatusEn;
			return result;
		}	
		
		///<summary>
		///  Returns a FeeCdeInvocStatus Entity with the original data.
		///</summary>
		public FeeCdeInvocStatus GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateFeeCdeInvocStatus(
				_originalData.FeeCdeInvocStatusId,
				_originalData.InvocStatusAr,
				_originalData.InvocStatusEn
				);
				
			return (FeeCdeInvocStatus)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="FeeCdeInvocStatusBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is FeeCdeInvocStatusBase)
				return ValueEquals(this, (FeeCdeInvocStatusBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="FeeCdeInvocStatusBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.FeeCdeInvocStatusId.GetHashCode() ^ 
					this.InvocStatusAr.GetHashCode() ^ 
					this.InvocStatusEn.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="FeeCdeInvocStatusBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(FeeCdeInvocStatusBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="FeeCdeInvocStatusBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="FeeCdeInvocStatusBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="FeeCdeInvocStatusBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(FeeCdeInvocStatusBase Object1, FeeCdeInvocStatusBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.FeeCdeInvocStatusId != Object2.FeeCdeInvocStatusId)
				equal = false;
			if (Object1.InvocStatusAr != Object2.InvocStatusAr)
				equal = false;
			if (Object1.InvocStatusEn != Object2.InvocStatusEn)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((FeeCdeInvocStatusBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static FeeCdeInvocStatusComparer GetComparer()
        {
            return new FeeCdeInvocStatusComparer();
        }
        */

        // Comparer delegates back to FeeCdeInvocStatus
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(FeeCdeInvocStatus rhs, FeeCdeInvocStatusColumn which)
        {
            switch (which)
            {
            	
            	
            	case FeeCdeInvocStatusColumn.FeeCdeInvocStatusId:
            		return this.FeeCdeInvocStatusId.CompareTo(rhs.FeeCdeInvocStatusId);
            		
            		                 
            	
            	
            	case FeeCdeInvocStatusColumn.InvocStatusAr:
            		return this.InvocStatusAr.CompareTo(rhs.InvocStatusAr);
            		
            		                 
            	
            	
            	case FeeCdeInvocStatusColumn.InvocStatusEn:
            		return this.InvocStatusEn.CompareTo(rhs.InvocStatusEn);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<FeeCdeInvocStatusKey> Members
		
		// member variable for the EntityId property
		private FeeCdeInvocStatusKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual FeeCdeInvocStatusKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new FeeCdeInvocStatusKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("FeeCdeInvocStatus")
					.Append("|").Append( this.FeeCdeInvocStatusId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{4}{3}- FeeCdeInvocStatusId: {0}{3}- InvocStatusAr: {1}{3}- InvocStatusEn: {2}{3}{5}", 
				this.FeeCdeInvocStatusId,
				this.InvocStatusAr,
				this.InvocStatusEn,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'FEE_CDE_INVOC_STATUS' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class FeeCdeInvocStatusEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// FEE_CDE_INVOC_STATUS_ID : new-review-paied-cancel
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "FEE_CDE_INVOC_STATUS"</remarks>
		public System.Int32 FeeCdeInvocStatusId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Int32 OriginalFeeCdeInvocStatusId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// INVOC_STATUS_AR : 
		/// </summary>
		public System.String		  InvocStatusAr = string.Empty;
		
		/// <summary>
		/// INVOC_STATUS_EN : 
		/// </summary>
		public System.String		  InvocStatusEn = string.Empty;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region FeeInvoiceCollection
		
		private TList<FeeInvoice> _feeInvoiceFeeCdeInvocStatusId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeInvoiceFeeCdeInvocStatusId
		/// </summary>
		
		public TList<FeeInvoice> FeeInvoiceCollection
		{
			get
			{
				if (_feeInvoiceFeeCdeInvocStatusId == null)
				{
				_feeInvoiceFeeCdeInvocStatusId = new TList<FeeInvoice>();
				}
	
				return _feeInvoiceFeeCdeInvocStatusId;
			}
			set { _feeInvoiceFeeCdeInvocStatusId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			FeeCdeInvocStatusEntityData _tmp = new FeeCdeInvocStatusEntityData();
						
			_tmp.FeeCdeInvocStatusId = this.FeeCdeInvocStatusId;
			_tmp.OriginalFeeCdeInvocStatusId = this.OriginalFeeCdeInvocStatusId;
			
			_tmp.InvocStatusAr = this.InvocStatusAr;
			_tmp.InvocStatusEn = this.InvocStatusEn;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._feeInvoiceFeeCdeInvocStatusId != null)
				_tmp.FeeInvoiceCollection = (TList<FeeInvoice>) MakeCopyOf(this.FeeInvoiceCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			FeeCdeInvocStatusEntityData _tmp = new FeeCdeInvocStatusEntityData();
						
			_tmp.FeeCdeInvocStatusId = this.FeeCdeInvocStatusId;
			_tmp.OriginalFeeCdeInvocStatusId = this.OriginalFeeCdeInvocStatusId;
			
			_tmp.InvocStatusAr = this.InvocStatusAr;
			_tmp.InvocStatusEn = this.InvocStatusEn;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.FeeInvoiceCollection = (TList<FeeInvoice>) MakeCopyOf(this.FeeInvoiceCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeCdeInvocStatusColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(FeeCdeInvocStatusColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeCdeInvocStatusColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(FeeCdeInvocStatusColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeCdeInvocStatusColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(FeeCdeInvocStatusColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				FeeCdeInvocStatusEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new FeeCdeInvocStatusEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeCdeInvocStatusColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(FeeCdeInvocStatusColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				FeeCdeInvocStatusEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new FeeCdeInvocStatusEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region FeeCdeInvocStatusEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="FeeCdeInvocStatus"/> object.
	/// </remarks>
	public class FeeCdeInvocStatusEventArgs : System.EventArgs
	{
		private FeeCdeInvocStatusColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the FeeCdeInvocStatusEventArgs class.
		///</summary>
		public FeeCdeInvocStatusEventArgs(FeeCdeInvocStatusColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the FeeCdeInvocStatusEventArgs class.
		///</summary>
		public FeeCdeInvocStatusEventArgs(FeeCdeInvocStatusColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The FeeCdeInvocStatusColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="FeeCdeInvocStatusColumn" />
		public FeeCdeInvocStatusColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all FeeCdeInvocStatus related events.
	///</summary>
	public delegate void FeeCdeInvocStatusEventHandler(object sender, FeeCdeInvocStatusEventArgs e);
	
	#region FeeCdeInvocStatusComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class FeeCdeInvocStatusComparer : System.Collections.Generic.IComparer<FeeCdeInvocStatus>
	{
		FeeCdeInvocStatusColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:FeeCdeInvocStatusComparer"/> class.
        /// </summary>
		public FeeCdeInvocStatusComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:FeeCdeInvocStatusComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public FeeCdeInvocStatusComparer(FeeCdeInvocStatusColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="FeeCdeInvocStatus"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="FeeCdeInvocStatus"/> to compare.</param>
        /// <param name="b">The second <c>FeeCdeInvocStatus</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(FeeCdeInvocStatus a, FeeCdeInvocStatus b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(FeeCdeInvocStatus entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(FeeCdeInvocStatus a, FeeCdeInvocStatus b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public FeeCdeInvocStatusColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region FeeCdeInvocStatusKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="FeeCdeInvocStatus"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class FeeCdeInvocStatusKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the FeeCdeInvocStatusKey class.
		/// </summary>
		public FeeCdeInvocStatusKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeCdeInvocStatusKey class.
		/// </summary>
		public FeeCdeInvocStatusKey(FeeCdeInvocStatusBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.FeeCdeInvocStatusId = entity.FeeCdeInvocStatusId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeCdeInvocStatusKey class.
		/// </summary>
		public FeeCdeInvocStatusKey(System.Int32 _feeCdeInvocStatusId)
		{
			#region Init Properties

			this.FeeCdeInvocStatusId = _feeCdeInvocStatusId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private FeeCdeInvocStatusBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public FeeCdeInvocStatusBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the FeeCdeInvocStatusId property
		private System.Int32 _feeCdeInvocStatusId;
		
		/// <summary>
		/// Gets or sets the FeeCdeInvocStatusId property.
		/// </summary>
		public System.Int32 FeeCdeInvocStatusId
		{
			get { return _feeCdeInvocStatusId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.FeeCdeInvocStatusId = value;
				
				_feeCdeInvocStatusId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				FeeCdeInvocStatusId = ( values["FeeCdeInvocStatusId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["FeeCdeInvocStatusId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("FeeCdeInvocStatusId", FeeCdeInvocStatusId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("FeeCdeInvocStatusId: {0}{1}",
								FeeCdeInvocStatusId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region FeeCdeInvocStatusColumn Enum
	
	/// <summary>
	/// Enumerate the FeeCdeInvocStatus columns.
	/// </summary>
	[Serializable]
	public enum FeeCdeInvocStatusColumn : int
	{
		/// <summary>
		/// FeeCdeInvocStatusId : new-review-paied-cancel
		/// </summary>
		[EnumTextValue("FEE_CDE_INVOC_STATUS_ID")]
		[ColumnEnum("FEE_CDE_INVOC_STATUS_ID", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		FeeCdeInvocStatusId = 1,
		/// <summary>
		/// InvocStatusAr : 
		/// </summary>
		[EnumTextValue("INVOC_STATUS_AR")]
		[ColumnEnum("INVOC_STATUS_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 150)]
		InvocStatusAr = 2,
		/// <summary>
		/// InvocStatusEn : 
		/// </summary>
		[EnumTextValue("INVOC_STATUS_EN")]
		[ColumnEnum("INVOC_STATUS_EN", typeof(System.String), System.Data.DbType.String, false, false, false, 150)]
		InvocStatusEn = 3
	}//End enum

	#endregion FeeCdeInvocStatusColumn Enum

} // end namespace
