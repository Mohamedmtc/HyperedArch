
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SaServTermin.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SA_SERV_TERMIN' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SaServTerminBase : EntityBase, ISaServTermin, IEntityId<SaServTerminKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SaServTerminEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SaServTerminEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SaServTerminEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SaServTermin> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaServTerminEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaServTerminEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SaServTerminBase"/> instance.
		///</summary>
		public SaServTerminBase()
		{
			this.entityData = new SaServTerminEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SaServTerminBase"/> instance.
		///</summary>
		///<param name="_saServTerminId"></param>
		///<param name="_empEndDate"></param>
		///<param name="_decisionNum"></param>
		///<param name="_decisionDate"></param>
		///<param name="_decisionSumm"></param>
		///<param name="_decisionExecDate"></param>
		///<param name="_isEmp"></param>
		///<param name="_rewardAmt"></param>
		///<param name="_isYearEnd"></param>
		///<param name="_coments"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_saCodeServTerminRsnId"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_gsApprovalHId"></param>
		///<param name="_doesAffectStaffStat"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_stfPensionPayPlace"></param>
		///<param name="_saTransferId"></param>
		///<param name="_saCodeScDegId"></param>
		///<param name="_saCodeScDegOldId"></param>
		///<param name="_saCodeJobStatusId"></param>
		public SaServTerminBase(System.Decimal _saServTerminId, System.DateTime _empEndDate, 
			System.String _decisionNum, System.DateTime _decisionDate, System.String _decisionSumm, 
			System.DateTime _decisionExecDate, System.Decimal _isEmp, System.Decimal? _rewardAmt, 
			System.Decimal _isYearEnd, System.String _coments, System.Decimal? _edAcadYearId, 
			System.Decimal _saCodeServTerminRsnId, System.Decimal _saStfMemberId, System.Decimal _gsApprovalHId, 
			System.Decimal? _doesAffectStaffStat, System.Decimal _asFacultyInfoId, System.String _stfPensionPayPlace, 
			System.Decimal? _saTransferId, System.Decimal? _saCodeScDegId, System.Decimal? _saCodeScDegOldId, 
			System.Decimal? _saCodeJobStatusId)
		{
			this.entityData = new SaServTerminEntityData();
			this.backupData = null;

			this.SaServTerminId = _saServTerminId;
			this.EmpEndDate = _empEndDate;
			this.DecisionNum = _decisionNum;
			this.DecisionDate = _decisionDate;
			this.DecisionSumm = _decisionSumm;
			this.DecisionExecDate = _decisionExecDate;
			this.IsEmp = _isEmp;
			this.RewardAmt = _rewardAmt;
			this.IsYearEnd = _isYearEnd;
			this.Coments = _coments;
			this.EdAcadYearId = _edAcadYearId;
			this.SaCodeServTerminRsnId = _saCodeServTerminRsnId;
			this.SaStfMemberId = _saStfMemberId;
			this.GsApprovalHId = _gsApprovalHId;
			this.DoesAffectStaffStat = _doesAffectStaffStat;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.StfPensionPayPlace = _stfPensionPayPlace;
			this.SaTransferId = _saTransferId;
			this.SaCodeScDegId = _saCodeScDegId;
			this.SaCodeScDegOldId = _saCodeScDegOldId;
			this.SaCodeJobStatusId = _saCodeJobStatusId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SaServTermin"/> instance.
		///</summary>
		///<param name="_saServTerminId"></param>
		///<param name="_empEndDate"></param>
		///<param name="_decisionNum"></param>
		///<param name="_decisionDate"></param>
		///<param name="_decisionSumm"></param>
		///<param name="_decisionExecDate"></param>
		///<param name="_isEmp"></param>
		///<param name="_rewardAmt"></param>
		///<param name="_isYearEnd"></param>
		///<param name="_coments"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_saCodeServTerminRsnId"></param>
		///<param name="_saStfMemberId"></param>
		///<param name="_gsApprovalHId"></param>
		///<param name="_doesAffectStaffStat"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_stfPensionPayPlace"></param>
		///<param name="_saTransferId"></param>
		///<param name="_saCodeScDegId"></param>
		///<param name="_saCodeScDegOldId"></param>
		///<param name="_saCodeJobStatusId"></param>
		public static SaServTermin CreateSaServTermin(System.Decimal _saServTerminId, System.DateTime _empEndDate, 
			System.String _decisionNum, System.DateTime _decisionDate, System.String _decisionSumm, 
			System.DateTime _decisionExecDate, System.Decimal _isEmp, System.Decimal? _rewardAmt, 
			System.Decimal _isYearEnd, System.String _coments, System.Decimal? _edAcadYearId, 
			System.Decimal _saCodeServTerminRsnId, System.Decimal _saStfMemberId, System.Decimal _gsApprovalHId, 
			System.Decimal? _doesAffectStaffStat, System.Decimal _asFacultyInfoId, System.String _stfPensionPayPlace, 
			System.Decimal? _saTransferId, System.Decimal? _saCodeScDegId, System.Decimal? _saCodeScDegOldId, 
			System.Decimal? _saCodeJobStatusId)
		{
			SaServTermin newSaServTermin = new SaServTermin();
			newSaServTermin.SaServTerminId = _saServTerminId;
			newSaServTermin.EmpEndDate = _empEndDate;
			newSaServTermin.DecisionNum = _decisionNum;
			newSaServTermin.DecisionDate = _decisionDate;
			newSaServTermin.DecisionSumm = _decisionSumm;
			newSaServTermin.DecisionExecDate = _decisionExecDate;
			newSaServTermin.IsEmp = _isEmp;
			newSaServTermin.RewardAmt = _rewardAmt;
			newSaServTermin.IsYearEnd = _isYearEnd;
			newSaServTermin.Coments = _coments;
			newSaServTermin.EdAcadYearId = _edAcadYearId;
			newSaServTermin.SaCodeServTerminRsnId = _saCodeServTerminRsnId;
			newSaServTermin.SaStfMemberId = _saStfMemberId;
			newSaServTermin.GsApprovalHId = _gsApprovalHId;
			newSaServTermin.DoesAffectStaffStat = _doesAffectStaffStat;
			newSaServTermin.AsFacultyInfoId = _asFacultyInfoId;
			newSaServTermin.StfPensionPayPlace = _stfPensionPayPlace;
			newSaServTermin.SaTransferId = _saTransferId;
			newSaServTermin.SaCodeScDegId = _saCodeScDegId;
			newSaServTermin.SaCodeScDegOldId = _saCodeScDegOldId;
			newSaServTermin.SaCodeJobStatusId = _saCodeJobStatusId;
			return newSaServTermin;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SaServTerminId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SaServTerminId
		{
			get
			{
				return this.entityData.SaServTerminId; 
			}
			
			set
			{
				if (this.entityData.SaServTerminId == value)
					return;
					
				OnColumnChanging(SaServTerminColumn.SaServTerminId, this.entityData.SaServTerminId);
				this.entityData.SaServTerminId = value;
				this.EntityId.SaServTerminId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaServTerminColumn.SaServTerminId, this.entityData.SaServTerminId);
				OnPropertyChanged("SaServTerminId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SA_SERV_TERMIN_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SA_SERV_TERMIN_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSaServTerminId
		{
			get { return this.entityData.OriginalSaServTerminId; }
			set { this.entityData.OriginalSaServTerminId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EmpEndDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime EmpEndDate
		{
			get
			{
				return this.entityData.EmpEndDate; 
			}
			
			set
			{
				if (this.entityData.EmpEndDate == value)
					return;
					
				OnColumnChanging(SaServTerminColumn.EmpEndDate, this.entityData.EmpEndDate);
				this.entityData.EmpEndDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaServTerminColumn.EmpEndDate, this.entityData.EmpEndDate);
				OnPropertyChanged("EmpEndDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DecisionNum property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String DecisionNum
		{
			get
			{
				return this.entityData.DecisionNum; 
			}
			
			set
			{
				if (this.entityData.DecisionNum == value)
					return;
					
				OnColumnChanging(SaServTerminColumn.DecisionNum, this.entityData.DecisionNum);
				this.entityData.DecisionNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaServTerminColumn.DecisionNum, this.entityData.DecisionNum);
				OnPropertyChanged("DecisionNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DecisionDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime DecisionDate
		{
			get
			{
				return this.entityData.DecisionDate; 
			}
			
			set
			{
				if (this.entityData.DecisionDate == value)
					return;
					
				OnColumnChanging(SaServTerminColumn.DecisionDate, this.entityData.DecisionDate);
				this.entityData.DecisionDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaServTerminColumn.DecisionDate, this.entityData.DecisionDate);
				OnPropertyChanged("DecisionDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DecisionSumm property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String DecisionSumm
		{
			get
			{
				return this.entityData.DecisionSumm; 
			}
			
			set
			{
				if (this.entityData.DecisionSumm == value)
					return;
					
				OnColumnChanging(SaServTerminColumn.DecisionSumm, this.entityData.DecisionSumm);
				this.entityData.DecisionSumm = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaServTerminColumn.DecisionSumm, this.entityData.DecisionSumm);
				OnPropertyChanged("DecisionSumm");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DecisionExecDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime DecisionExecDate
		{
			get
			{
				return this.entityData.DecisionExecDate; 
			}
			
			set
			{
				if (this.entityData.DecisionExecDate == value)
					return;
					
				OnColumnChanging(SaServTerminColumn.DecisionExecDate, this.entityData.DecisionExecDate);
				this.entityData.DecisionExecDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaServTerminColumn.DecisionExecDate, this.entityData.DecisionExecDate);
				OnPropertyChanged("DecisionExecDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsEmp property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsEmp
		{
			get
			{
				return this.entityData.IsEmp; 
			}
			
			set
			{
				if (this.entityData.IsEmp == value)
					return;
					
				OnColumnChanging(SaServTerminColumn.IsEmp, this.entityData.IsEmp);
				this.entityData.IsEmp = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaServTerminColumn.IsEmp, this.entityData.IsEmp);
				OnPropertyChanged("IsEmp");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RewardAmt property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRewardAmtNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RewardAmt
		{
			get
			{
				return this.entityData.RewardAmt; 
			}
			
			set
			{
				if (this.entityData.RewardAmt == value)
					return;
					
				OnColumnChanging(SaServTerminColumn.RewardAmt, this.entityData.RewardAmt);
				this.entityData.RewardAmt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaServTerminColumn.RewardAmt, this.entityData.RewardAmt);
				OnPropertyChanged("RewardAmt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsYearEnd property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsYearEnd
		{
			get
			{
				return this.entityData.IsYearEnd; 
			}
			
			set
			{
				if (this.entityData.IsYearEnd == value)
					return;
					
				OnColumnChanging(SaServTerminColumn.IsYearEnd, this.entityData.IsYearEnd);
				this.entityData.IsYearEnd = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaServTerminColumn.IsYearEnd, this.entityData.IsYearEnd);
				OnPropertyChanged("IsYearEnd");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Coments property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Coments
		{
			get
			{
				return this.entityData.Coments; 
			}
			
			set
			{
				if (this.entityData.Coments == value)
					return;
					
				OnColumnChanging(SaServTerminColumn.Coments, this.entityData.Coments);
				this.entityData.Coments = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaServTerminColumn.Coments, this.entityData.Coments);
				OnPropertyChanged("Coments");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdAcadYearIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(SaServTerminColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaServTerminColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaCodeServTerminRsnId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaCodeServTerminRsnId
		{
			get
			{
				return this.entityData.SaCodeServTerminRsnId; 
			}
			
			set
			{
				if (this.entityData.SaCodeServTerminRsnId == value)
					return;
					
				OnColumnChanging(SaServTerminColumn.SaCodeServTerminRsnId, this.entityData.SaCodeServTerminRsnId);
				this.entityData.SaCodeServTerminRsnId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaServTerminColumn.SaCodeServTerminRsnId, this.entityData.SaCodeServTerminRsnId);
				OnPropertyChanged("SaCodeServTerminRsnId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaStfMemberId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaStfMemberId
		{
			get
			{
				return this.entityData.SaStfMemberId; 
			}
			
			set
			{
				if (this.entityData.SaStfMemberId == value)
					return;
					
				OnColumnChanging(SaServTerminColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				this.entityData.SaStfMemberId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaServTerminColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				OnPropertyChanged("SaStfMemberId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsApprovalHId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsApprovalHId
		{
			get
			{
				return this.entityData.GsApprovalHId; 
			}
			
			set
			{
				if (this.entityData.GsApprovalHId == value)
					return;
					
				OnColumnChanging(SaServTerminColumn.GsApprovalHId, this.entityData.GsApprovalHId);
				this.entityData.GsApprovalHId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaServTerminColumn.GsApprovalHId, this.entityData.GsApprovalHId);
				OnPropertyChanged("GsApprovalHId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DoesAffectStaffStat property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDoesAffectStaffStatNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DoesAffectStaffStat
		{
			get
			{
				return this.entityData.DoesAffectStaffStat; 
			}
			
			set
			{
				if (this.entityData.DoesAffectStaffStat == value)
					return;
					
				OnColumnChanging(SaServTerminColumn.DoesAffectStaffStat, this.entityData.DoesAffectStaffStat);
				this.entityData.DoesAffectStaffStat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaServTerminColumn.DoesAffectStaffStat, this.entityData.DoesAffectStaffStat);
				OnPropertyChanged("DoesAffectStaffStat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(SaServTerminColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaServTerminColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StfPensionPayPlace property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String StfPensionPayPlace
		{
			get
			{
				return this.entityData.StfPensionPayPlace; 
			}
			
			set
			{
				if (this.entityData.StfPensionPayPlace == value)
					return;
					
				OnColumnChanging(SaServTerminColumn.StfPensionPayPlace, this.entityData.StfPensionPayPlace);
				this.entityData.StfPensionPayPlace = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaServTerminColumn.StfPensionPayPlace, this.entityData.StfPensionPayPlace);
				OnPropertyChanged("StfPensionPayPlace");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaTransferId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSaTransferIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SaTransferId
		{
			get
			{
				return this.entityData.SaTransferId; 
			}
			
			set
			{
				if (this.entityData.SaTransferId == value)
					return;
					
				OnColumnChanging(SaServTerminColumn.SaTransferId, this.entityData.SaTransferId);
				this.entityData.SaTransferId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaServTerminColumn.SaTransferId, this.entityData.SaTransferId);
				OnPropertyChanged("SaTransferId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaCodeScDegId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSaCodeScDegIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SaCodeScDegId
		{
			get
			{
				return this.entityData.SaCodeScDegId; 
			}
			
			set
			{
				if (this.entityData.SaCodeScDegId == value)
					return;
					
				OnColumnChanging(SaServTerminColumn.SaCodeScDegId, this.entityData.SaCodeScDegId);
				this.entityData.SaCodeScDegId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaServTerminColumn.SaCodeScDegId, this.entityData.SaCodeScDegId);
				OnPropertyChanged("SaCodeScDegId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaCodeScDegOldId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSaCodeScDegOldIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SaCodeScDegOldId
		{
			get
			{
				return this.entityData.SaCodeScDegOldId; 
			}
			
			set
			{
				if (this.entityData.SaCodeScDegOldId == value)
					return;
					
				OnColumnChanging(SaServTerminColumn.SaCodeScDegOldId, this.entityData.SaCodeScDegOldId);
				this.entityData.SaCodeScDegOldId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaServTerminColumn.SaCodeScDegOldId, this.entityData.SaCodeScDegOldId);
				OnPropertyChanged("SaCodeScDegOldId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaCodeJobStatusId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSaCodeJobStatusIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SaCodeJobStatusId
		{
			get
			{
				return this.entityData.SaCodeJobStatusId; 
			}
			
			set
			{
				if (this.entityData.SaCodeJobStatusId == value)
					return;
					
				OnColumnChanging(SaServTerminColumn.SaCodeJobStatusId, this.entityData.SaCodeJobStatusId);
				this.entityData.SaCodeJobStatusId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaServTerminColumn.SaCodeJobStatusId, this.entityData.SaCodeJobStatusId);
				OnPropertyChanged("SaCodeJobStatusId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="SaTransfer"/>.
		/// </summary>
		/// <value>The source SaTransfer for SaTransferId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaTransfer SaTransferIdSource
      	{
            get { return entityData.SaTransferIdSource; }
            set { entityData.SaTransferIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeServTerminRsn"/>.
		/// </summary>
		/// <value>The source SaCodeServTerminRsn for SaCodeServTerminRsnId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaCodeServTerminRsn SaCodeServTerminRsnIdSource
      	{
            get { return entityData.SaCodeServTerminRsnIdSource; }
            set { entityData.SaCodeServTerminRsnIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsApprovalH"/>.
		/// </summary>
		/// <value>The source GsApprovalH for GsApprovalHId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsApprovalH GsApprovalHIdSource
      	{
            get { return entityData.GsApprovalHIdSource; }
            set { entityData.GsApprovalHIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeJobStatus"/>.
		/// </summary>
		/// <value>The source SaCodeJobStatus for SaCodeJobStatusId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaCodeJobStatus SaCodeJobStatusIdSource
      	{
            get { return entityData.SaCodeJobStatusIdSource; }
            set { entityData.SaCodeJobStatusIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeScDeg"/>.
		/// </summary>
		/// <value>The source SaCodeScDeg for SaCodeScDegId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaCodeScDeg SaCodeScDegIdSource
      	{
            get { return entityData.SaCodeScDegIdSource; }
            set { entityData.SaCodeScDegIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeScDeg"/>.
		/// </summary>
		/// <value>The source SaCodeScDeg for SaCodeScDegOldId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaCodeScDeg SaCodeScDegOldIdSource
      	{
            get { return entityData.SaCodeScDegOldIdSource; }
            set { entityData.SaCodeScDegOldIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return entityData.SaStfMemberIdSource; }
            set { entityData.SaStfMemberIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DecisionNum", "Decision Num"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DecisionNum", "Decision Num", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DecisionSumm", "Decision Summ", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Coments", "Coments", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("StfPensionPayPlace", "Stf Pension Pay Place", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SA_SERV_TERMIN"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SA_SERV_TERMIN_ID", "EMP_END_DATE", "DECISION_NUM", "DECISION_DATE", "DECISION_SUMM", "DECISION_EXEC_DATE", "IS_EMP", "REWARD_AMT", "IS_YEAR_END", "COMENTS", "ED_ACAD_YEAR_ID", "SA_CODE_SERV_TERMIN_RSN_ID", "SA_STF_MEMBER_ID", "GS_APPROVAL_H_ID", "DOES_AFFECT_STAFF_STAT", "AS_FACULTY_INFO_ID", "STF_PENSION_PAY_PLACE", "SA_TRANSFER_ID", "SA_CODE_SC_DEG_ID", "SA_CODE_SC_DEG_OLD_ID", "SA_CODE_JOB_STATUS_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SaServTerminEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SaServTermin) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SaServTermin>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SaServTermin);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SaServTermin Entity 
		///</summary>
		protected virtual SaServTermin Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SaServTermin copy = new SaServTermin();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SaServTerminId = this.SaServTerminId;
					copy.OriginalSaServTerminId = this.OriginalSaServTerminId;
				copy.EmpEndDate = this.EmpEndDate;
				copy.DecisionNum = this.DecisionNum;
				copy.DecisionDate = this.DecisionDate;
				copy.DecisionSumm = this.DecisionSumm;
				copy.DecisionExecDate = this.DecisionExecDate;
				copy.IsEmp = this.IsEmp;
				copy.RewardAmt = this.RewardAmt;
				copy.IsYearEnd = this.IsYearEnd;
				copy.Coments = this.Coments;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.SaCodeServTerminRsnId = this.SaCodeServTerminRsnId;
				copy.SaStfMemberId = this.SaStfMemberId;
				copy.GsApprovalHId = this.GsApprovalHId;
				copy.DoesAffectStaffStat = this.DoesAffectStaffStat;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.StfPensionPayPlace = this.StfPensionPayPlace;
				copy.SaTransferId = this.SaTransferId;
				copy.SaCodeScDegId = this.SaCodeScDegId;
				copy.SaCodeScDegOldId = this.SaCodeScDegOldId;
				copy.SaCodeJobStatusId = this.SaCodeJobStatusId;
			
			if (this.SaTransferIdSource != null && existingCopies.Contains(this.SaTransferIdSource))
				copy.SaTransferIdSource = existingCopies[this.SaTransferIdSource] as SaTransfer;
			else
				copy.SaTransferIdSource = MakeCopyOf(this.SaTransferIdSource, existingCopies) as SaTransfer;
			if (this.SaCodeServTerminRsnIdSource != null && existingCopies.Contains(this.SaCodeServTerminRsnIdSource))
				copy.SaCodeServTerminRsnIdSource = existingCopies[this.SaCodeServTerminRsnIdSource] as SaCodeServTerminRsn;
			else
				copy.SaCodeServTerminRsnIdSource = MakeCopyOf(this.SaCodeServTerminRsnIdSource, existingCopies) as SaCodeServTerminRsn;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.GsApprovalHIdSource != null && existingCopies.Contains(this.GsApprovalHIdSource))
				copy.GsApprovalHIdSource = existingCopies[this.GsApprovalHIdSource] as GsApprovalH;
			else
				copy.GsApprovalHIdSource = MakeCopyOf(this.GsApprovalHIdSource, existingCopies) as GsApprovalH;
			if (this.SaCodeJobStatusIdSource != null && existingCopies.Contains(this.SaCodeJobStatusIdSource))
				copy.SaCodeJobStatusIdSource = existingCopies[this.SaCodeJobStatusIdSource] as SaCodeJobStatus;
			else
				copy.SaCodeJobStatusIdSource = MakeCopyOf(this.SaCodeJobStatusIdSource, existingCopies) as SaCodeJobStatus;
			if (this.SaCodeScDegIdSource != null && existingCopies.Contains(this.SaCodeScDegIdSource))
				copy.SaCodeScDegIdSource = existingCopies[this.SaCodeScDegIdSource] as SaCodeScDeg;
			else
				copy.SaCodeScDegIdSource = MakeCopyOf(this.SaCodeScDegIdSource, existingCopies) as SaCodeScDeg;
			if (this.SaCodeScDegOldIdSource != null && existingCopies.Contains(this.SaCodeScDegOldIdSource))
				copy.SaCodeScDegOldIdSource = existingCopies[this.SaCodeScDegOldIdSource] as SaCodeScDeg;
			else
				copy.SaCodeScDegOldIdSource = MakeCopyOf(this.SaCodeScDegOldIdSource, existingCopies) as SaCodeScDeg;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				copy.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				copy.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SaServTermin Entity 
		///</summary>
		public virtual SaServTermin Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SaServTermin Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SaServTermin DeepCopy()
		{
			return EntityHelper.Clone<SaServTermin>(this as SaServTermin);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SaServTerminEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SaServTerminEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SaServTerminEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SaServTerminColumn column)
		{
			switch(column)
			{
					case SaServTerminColumn.SaServTerminId:
					return entityData.SaServTerminId != _originalData.SaServTerminId;
					case SaServTerminColumn.EmpEndDate:
					return entityData.EmpEndDate != _originalData.EmpEndDate;
					case SaServTerminColumn.DecisionNum:
					return entityData.DecisionNum != _originalData.DecisionNum;
					case SaServTerminColumn.DecisionDate:
					return entityData.DecisionDate != _originalData.DecisionDate;
					case SaServTerminColumn.DecisionSumm:
					return entityData.DecisionSumm != _originalData.DecisionSumm;
					case SaServTerminColumn.DecisionExecDate:
					return entityData.DecisionExecDate != _originalData.DecisionExecDate;
					case SaServTerminColumn.IsEmp:
					return entityData.IsEmp != _originalData.IsEmp;
					case SaServTerminColumn.RewardAmt:
					return entityData.RewardAmt != _originalData.RewardAmt;
					case SaServTerminColumn.IsYearEnd:
					return entityData.IsYearEnd != _originalData.IsYearEnd;
					case SaServTerminColumn.Coments:
					return entityData.Coments != _originalData.Coments;
					case SaServTerminColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case SaServTerminColumn.SaCodeServTerminRsnId:
					return entityData.SaCodeServTerminRsnId != _originalData.SaCodeServTerminRsnId;
					case SaServTerminColumn.SaStfMemberId:
					return entityData.SaStfMemberId != _originalData.SaStfMemberId;
					case SaServTerminColumn.GsApprovalHId:
					return entityData.GsApprovalHId != _originalData.GsApprovalHId;
					case SaServTerminColumn.DoesAffectStaffStat:
					return entityData.DoesAffectStaffStat != _originalData.DoesAffectStaffStat;
					case SaServTerminColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case SaServTerminColumn.StfPensionPayPlace:
					return entityData.StfPensionPayPlace != _originalData.StfPensionPayPlace;
					case SaServTerminColumn.SaTransferId:
					return entityData.SaTransferId != _originalData.SaTransferId;
					case SaServTerminColumn.SaCodeScDegId:
					return entityData.SaCodeScDegId != _originalData.SaCodeScDegId;
					case SaServTerminColumn.SaCodeScDegOldId:
					return entityData.SaCodeScDegOldId != _originalData.SaCodeScDegOldId;
					case SaServTerminColumn.SaCodeJobStatusId:
					return entityData.SaCodeJobStatusId != _originalData.SaCodeJobStatusId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SaServTerminColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SaServTerminId != _originalData.SaServTerminId;
			result = result || entityData.EmpEndDate != _originalData.EmpEndDate;
			result = result || entityData.DecisionNum != _originalData.DecisionNum;
			result = result || entityData.DecisionDate != _originalData.DecisionDate;
			result = result || entityData.DecisionSumm != _originalData.DecisionSumm;
			result = result || entityData.DecisionExecDate != _originalData.DecisionExecDate;
			result = result || entityData.IsEmp != _originalData.IsEmp;
			result = result || entityData.RewardAmt != _originalData.RewardAmt;
			result = result || entityData.IsYearEnd != _originalData.IsYearEnd;
			result = result || entityData.Coments != _originalData.Coments;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.SaCodeServTerminRsnId != _originalData.SaCodeServTerminRsnId;
			result = result || entityData.SaStfMemberId != _originalData.SaStfMemberId;
			result = result || entityData.GsApprovalHId != _originalData.GsApprovalHId;
			result = result || entityData.DoesAffectStaffStat != _originalData.DoesAffectStaffStat;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.StfPensionPayPlace != _originalData.StfPensionPayPlace;
			result = result || entityData.SaTransferId != _originalData.SaTransferId;
			result = result || entityData.SaCodeScDegId != _originalData.SaCodeScDegId;
			result = result || entityData.SaCodeScDegOldId != _originalData.SaCodeScDegOldId;
			result = result || entityData.SaCodeJobStatusId != _originalData.SaCodeJobStatusId;
			return result;
		}	
		
		///<summary>
		///  Returns a SaServTermin Entity with the original data.
		///</summary>
		public SaServTermin GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSaServTermin(
				_originalData.SaServTerminId,
				_originalData.EmpEndDate,
				_originalData.DecisionNum,
				_originalData.DecisionDate,
				_originalData.DecisionSumm,
				_originalData.DecisionExecDate,
				_originalData.IsEmp,
				_originalData.RewardAmt,
				_originalData.IsYearEnd,
				_originalData.Coments,
				_originalData.EdAcadYearId,
				_originalData.SaCodeServTerminRsnId,
				_originalData.SaStfMemberId,
				_originalData.GsApprovalHId,
				_originalData.DoesAffectStaffStat,
				_originalData.AsFacultyInfoId,
				_originalData.StfPensionPayPlace,
				_originalData.SaTransferId,
				_originalData.SaCodeScDegId,
				_originalData.SaCodeScDegOldId,
				_originalData.SaCodeJobStatusId
				);
				
			return (SaServTermin)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SaServTerminBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SaServTerminBase)
				return ValueEquals(this, (SaServTerminBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SaServTerminBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SaServTerminId.GetHashCode() ^ 
					this.EmpEndDate.GetHashCode() ^ 
					this.DecisionNum.GetHashCode() ^ 
					this.DecisionDate.GetHashCode() ^ 
					((this.DecisionSumm == null) ? string.Empty : this.DecisionSumm.ToString()).GetHashCode() ^ 
					this.DecisionExecDate.GetHashCode() ^ 
					this.IsEmp.GetHashCode() ^ 
					((this.RewardAmt == null) ? string.Empty : this.RewardAmt.ToString()).GetHashCode() ^ 
					this.IsYearEnd.GetHashCode() ^ 
					((this.Coments == null) ? string.Empty : this.Coments.ToString()).GetHashCode() ^ 
					((this.EdAcadYearId == null) ? string.Empty : this.EdAcadYearId.ToString()).GetHashCode() ^ 
					this.SaCodeServTerminRsnId.GetHashCode() ^ 
					this.SaStfMemberId.GetHashCode() ^ 
					this.GsApprovalHId.GetHashCode() ^ 
					((this.DoesAffectStaffStat == null) ? string.Empty : this.DoesAffectStaffStat.ToString()).GetHashCode() ^ 
					this.AsFacultyInfoId.GetHashCode() ^ 
					((this.StfPensionPayPlace == null) ? string.Empty : this.StfPensionPayPlace.ToString()).GetHashCode() ^ 
					((this.SaTransferId == null) ? string.Empty : this.SaTransferId.ToString()).GetHashCode() ^ 
					((this.SaCodeScDegId == null) ? string.Empty : this.SaCodeScDegId.ToString()).GetHashCode() ^ 
					((this.SaCodeScDegOldId == null) ? string.Empty : this.SaCodeScDegOldId.ToString()).GetHashCode() ^ 
					((this.SaCodeJobStatusId == null) ? string.Empty : this.SaCodeJobStatusId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SaServTerminBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SaServTerminBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SaServTerminBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SaServTerminBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SaServTerminBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SaServTerminBase Object1, SaServTerminBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SaServTerminId != Object2.SaServTerminId)
				equal = false;
			if (Object1.EmpEndDate != Object2.EmpEndDate)
				equal = false;
			if (Object1.DecisionNum != Object2.DecisionNum)
				equal = false;
			if (Object1.DecisionDate != Object2.DecisionDate)
				equal = false;
			if ( Object1.DecisionSumm != null && Object2.DecisionSumm != null )
			{
				if (Object1.DecisionSumm != Object2.DecisionSumm)
					equal = false;
			}
			else if (Object1.DecisionSumm == null ^ Object2.DecisionSumm == null )
			{
				equal = false;
			}
			if (Object1.DecisionExecDate != Object2.DecisionExecDate)
				equal = false;
			if (Object1.IsEmp != Object2.IsEmp)
				equal = false;
			if ( Object1.RewardAmt != null && Object2.RewardAmt != null )
			{
				if (Object1.RewardAmt != Object2.RewardAmt)
					equal = false;
			}
			else if (Object1.RewardAmt == null ^ Object2.RewardAmt == null )
			{
				equal = false;
			}
			if (Object1.IsYearEnd != Object2.IsYearEnd)
				equal = false;
			if ( Object1.Coments != null && Object2.Coments != null )
			{
				if (Object1.Coments != Object2.Coments)
					equal = false;
			}
			else if (Object1.Coments == null ^ Object2.Coments == null )
			{
				equal = false;
			}
			if ( Object1.EdAcadYearId != null && Object2.EdAcadYearId != null )
			{
				if (Object1.EdAcadYearId != Object2.EdAcadYearId)
					equal = false;
			}
			else if (Object1.EdAcadYearId == null ^ Object2.EdAcadYearId == null )
			{
				equal = false;
			}
			if (Object1.SaCodeServTerminRsnId != Object2.SaCodeServTerminRsnId)
				equal = false;
			if (Object1.SaStfMemberId != Object2.SaStfMemberId)
				equal = false;
			if (Object1.GsApprovalHId != Object2.GsApprovalHId)
				equal = false;
			if ( Object1.DoesAffectStaffStat != null && Object2.DoesAffectStaffStat != null )
			{
				if (Object1.DoesAffectStaffStat != Object2.DoesAffectStaffStat)
					equal = false;
			}
			else if (Object1.DoesAffectStaffStat == null ^ Object2.DoesAffectStaffStat == null )
			{
				equal = false;
			}
			if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
				equal = false;
			if ( Object1.StfPensionPayPlace != null && Object2.StfPensionPayPlace != null )
			{
				if (Object1.StfPensionPayPlace != Object2.StfPensionPayPlace)
					equal = false;
			}
			else if (Object1.StfPensionPayPlace == null ^ Object2.StfPensionPayPlace == null )
			{
				equal = false;
			}
			if ( Object1.SaTransferId != null && Object2.SaTransferId != null )
			{
				if (Object1.SaTransferId != Object2.SaTransferId)
					equal = false;
			}
			else if (Object1.SaTransferId == null ^ Object2.SaTransferId == null )
			{
				equal = false;
			}
			if ( Object1.SaCodeScDegId != null && Object2.SaCodeScDegId != null )
			{
				if (Object1.SaCodeScDegId != Object2.SaCodeScDegId)
					equal = false;
			}
			else if (Object1.SaCodeScDegId == null ^ Object2.SaCodeScDegId == null )
			{
				equal = false;
			}
			if ( Object1.SaCodeScDegOldId != null && Object2.SaCodeScDegOldId != null )
			{
				if (Object1.SaCodeScDegOldId != Object2.SaCodeScDegOldId)
					equal = false;
			}
			else if (Object1.SaCodeScDegOldId == null ^ Object2.SaCodeScDegOldId == null )
			{
				equal = false;
			}
			if ( Object1.SaCodeJobStatusId != null && Object2.SaCodeJobStatusId != null )
			{
				if (Object1.SaCodeJobStatusId != Object2.SaCodeJobStatusId)
					equal = false;
			}
			else if (Object1.SaCodeJobStatusId == null ^ Object2.SaCodeJobStatusId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SaServTerminBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SaServTerminComparer GetComparer()
        {
            return new SaServTerminComparer();
        }
        */

        // Comparer delegates back to SaServTermin
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SaServTermin rhs, SaServTerminColumn which)
        {
            switch (which)
            {
            	
            	
            	case SaServTerminColumn.SaServTerminId:
            		return this.SaServTerminId.CompareTo(rhs.SaServTerminId);
            		
            		                 
            	
            	
            	case SaServTerminColumn.EmpEndDate:
            		return this.EmpEndDate.CompareTo(rhs.EmpEndDate);
            		
            		                 
            	
            	
            	case SaServTerminColumn.DecisionNum:
            		return this.DecisionNum.CompareTo(rhs.DecisionNum);
            		
            		                 
            	
            	
            	case SaServTerminColumn.DecisionDate:
            		return this.DecisionDate.CompareTo(rhs.DecisionDate);
            		
            		                 
            	
            	
            	case SaServTerminColumn.DecisionSumm:
            		return this.DecisionSumm.CompareTo(rhs.DecisionSumm);
            		
            		                 
            	
            	
            	case SaServTerminColumn.DecisionExecDate:
            		return this.DecisionExecDate.CompareTo(rhs.DecisionExecDate);
            		
            		                 
            	
            	
            	case SaServTerminColumn.IsEmp:
            		return this.IsEmp.CompareTo(rhs.IsEmp);
            		
            		                 
            	
            	
            	case SaServTerminColumn.RewardAmt:
            		return this.RewardAmt.Value.CompareTo(rhs.RewardAmt.Value);
            		
            		                 
            	
            	
            	case SaServTerminColumn.IsYearEnd:
            		return this.IsYearEnd.CompareTo(rhs.IsYearEnd);
            		
            		                 
            	
            	
            	case SaServTerminColumn.Coments:
            		return this.Coments.CompareTo(rhs.Coments);
            		
            		                 
            	
            	
            	case SaServTerminColumn.EdAcadYearId:
            		return this.EdAcadYearId.Value.CompareTo(rhs.EdAcadYearId.Value);
            		
            		                 
            	
            	
            	case SaServTerminColumn.SaCodeServTerminRsnId:
            		return this.SaCodeServTerminRsnId.CompareTo(rhs.SaCodeServTerminRsnId);
            		
            		                 
            	
            	
            	case SaServTerminColumn.SaStfMemberId:
            		return this.SaStfMemberId.CompareTo(rhs.SaStfMemberId);
            		
            		                 
            	
            	
            	case SaServTerminColumn.GsApprovalHId:
            		return this.GsApprovalHId.CompareTo(rhs.GsApprovalHId);
            		
            		                 
            	
            	
            	case SaServTerminColumn.DoesAffectStaffStat:
            		return this.DoesAffectStaffStat.Value.CompareTo(rhs.DoesAffectStaffStat.Value);
            		
            		                 
            	
            	
            	case SaServTerminColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.CompareTo(rhs.AsFacultyInfoId);
            		
            		                 
            	
            	
            	case SaServTerminColumn.StfPensionPayPlace:
            		return this.StfPensionPayPlace.CompareTo(rhs.StfPensionPayPlace);
            		
            		                 
            	
            	
            	case SaServTerminColumn.SaTransferId:
            		return this.SaTransferId.Value.CompareTo(rhs.SaTransferId.Value);
            		
            		                 
            	
            	
            	case SaServTerminColumn.SaCodeScDegId:
            		return this.SaCodeScDegId.Value.CompareTo(rhs.SaCodeScDegId.Value);
            		
            		                 
            	
            	
            	case SaServTerminColumn.SaCodeScDegOldId:
            		return this.SaCodeScDegOldId.Value.CompareTo(rhs.SaCodeScDegOldId.Value);
            		
            		                 
            	
            	
            	case SaServTerminColumn.SaCodeJobStatusId:
            		return this.SaCodeJobStatusId.Value.CompareTo(rhs.SaCodeJobStatusId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SaServTerminKey> Members
		
		// member variable for the EntityId property
		private SaServTerminKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SaServTerminKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SaServTerminKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SaServTermin")
					.Append("|").Append( this.SaServTerminId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{22}{21}- SaServTerminId: {0}{21}- EmpEndDate: {1}{21}- DecisionNum: {2}{21}- DecisionDate: {3}{21}- DecisionSumm: {4}{21}- DecisionExecDate: {5}{21}- IsEmp: {6}{21}- RewardAmt: {7}{21}- IsYearEnd: {8}{21}- Coments: {9}{21}- EdAcadYearId: {10}{21}- SaCodeServTerminRsnId: {11}{21}- SaStfMemberId: {12}{21}- GsApprovalHId: {13}{21}- DoesAffectStaffStat: {14}{21}- AsFacultyInfoId: {15}{21}- StfPensionPayPlace: {16}{21}- SaTransferId: {17}{21}- SaCodeScDegId: {18}{21}- SaCodeScDegOldId: {19}{21}- SaCodeJobStatusId: {20}{21}{23}", 
				this.SaServTerminId,
				this.EmpEndDate,
				this.DecisionNum,
				this.DecisionDate,
				(this.DecisionSumm == null) ? string.Empty : this.DecisionSumm.ToString(),
				this.DecisionExecDate,
				this.IsEmp,
				(this.RewardAmt == null) ? string.Empty : this.RewardAmt.ToString(),
				this.IsYearEnd,
				(this.Coments == null) ? string.Empty : this.Coments.ToString(),
				(this.EdAcadYearId == null) ? string.Empty : this.EdAcadYearId.ToString(),
				this.SaCodeServTerminRsnId,
				this.SaStfMemberId,
				this.GsApprovalHId,
				(this.DoesAffectStaffStat == null) ? string.Empty : this.DoesAffectStaffStat.ToString(),
				this.AsFacultyInfoId,
				(this.StfPensionPayPlace == null) ? string.Empty : this.StfPensionPayPlace.ToString(),
				(this.SaTransferId == null) ? string.Empty : this.SaTransferId.ToString(),
				(this.SaCodeScDegId == null) ? string.Empty : this.SaCodeScDegId.ToString(),
				(this.SaCodeScDegOldId == null) ? string.Empty : this.SaCodeScDegOldId.ToString(),
				(this.SaCodeJobStatusId == null) ? string.Empty : this.SaCodeJobStatusId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SA_SERV_TERMIN' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SaServTerminEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SA_SERV_TERMIN_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SA_SERV_TERMIN"</remarks>
		public System.Decimal SaServTerminId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSaServTerminId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// EMP_END_DATE : 
		/// </summary>
		public System.DateTime		  EmpEndDate = DateTime.MinValue;
		
		/// <summary>
		/// DECISION_NUM : 
		/// </summary>
		public System.String		  DecisionNum = string.Empty;
		
		/// <summary>
		/// DECISION_DATE : 
		/// </summary>
		public System.DateTime		  DecisionDate = DateTime.MinValue;
		
		/// <summary>
		/// DECISION_SUMM : 
		/// </summary>
		public System.String		  DecisionSumm = null;
		
		/// <summary>
		/// DECISION_EXEC_DATE : 
		/// </summary>
		public System.DateTime		  DecisionExecDate = DateTime.MinValue;
		
		/// <summary>
		/// IS_EMP : 
		/// </summary>
		public System.Decimal		  IsEmp = 0.0m;
		
		/// <summary>
		/// REWARD_AMT : 
		/// </summary>
		public System.Decimal?		  RewardAmt = null;
		
		/// <summary>
		/// IS_YEAR_END : 
		/// </summary>
		public System.Decimal		  IsYearEnd = 0.0m;
		
		/// <summary>
		/// COMENTS : 
		/// </summary>
		public System.String		  Coments = null;
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal?		  EdAcadYearId = null;
		
		/// <summary>
		/// SA_CODE_SERV_TERMIN_RSN_ID : 
		/// </summary>
		public System.Decimal		  SaCodeServTerminRsnId = 0.0m;
		
		/// <summary>
		/// SA_STF_MEMBER_ID : 
		/// </summary>
		public System.Decimal		  SaStfMemberId = 0.0m;
		
		/// <summary>
		/// GS_APPROVAL_H_ID : 
		/// </summary>
		public System.Decimal		  GsApprovalHId = 0.0m;
		
		/// <summary>
		/// DOES_AFFECT_STAFF_STAT : 
		/// </summary>
		public System.Decimal?		  DoesAffectStaffStat = null;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal		  AsFacultyInfoId = 0.0m;
		
		/// <summary>
		/// STF_PENSION_PAY_PLACE : 
		/// </summary>
		public System.String		  StfPensionPayPlace = null;
		
		/// <summary>
		/// SA_TRANSFER_ID : 
		/// </summary>
		public System.Decimal?		  SaTransferId = null;
		
		/// <summary>
		/// SA_CODE_SC_DEG_ID : 
		/// </summary>
		public System.Decimal?		  SaCodeScDegId = null;
		
		/// <summary>
		/// SA_CODE_SC_DEG_OLD_ID : 
		/// </summary>
		public System.Decimal?		  SaCodeScDegOldId = null;
		
		/// <summary>
		/// SA_CODE_JOB_STATUS_ID : 
		/// </summary>
		public System.Decimal?		  SaCodeJobStatusId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private SaTransfer _saTransferIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaTransfer"/>.
		/// </summary>
		/// <value>The source SaTransfer for SaTransferId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaTransfer SaTransferIdSource
      	{
            get { return this._saTransferIdSource; }
            set { this._saTransferIdSource = value; }
      	}
		private SaCodeServTerminRsn _saCodeServTerminRsnIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeServTerminRsn"/>.
		/// </summary>
		/// <value>The source SaCodeServTerminRsn for SaCodeServTerminRsnId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaCodeServTerminRsn SaCodeServTerminRsnIdSource
      	{
            get { return this._saCodeServTerminRsnIdSource; }
            set { this._saCodeServTerminRsnIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private GsApprovalH _gsApprovalHidSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsApprovalH"/>.
		/// </summary>
		/// <value>The source GsApprovalH for GsApprovalHId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsApprovalH GsApprovalHIdSource
      	{
            get { return this._gsApprovalHidSource; }
            set { this._gsApprovalHidSource = value; }
      	}
		private SaCodeJobStatus _saCodeJobStatusIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeJobStatus"/>.
		/// </summary>
		/// <value>The source SaCodeJobStatus for SaCodeJobStatusId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaCodeJobStatus SaCodeJobStatusIdSource
      	{
            get { return this._saCodeJobStatusIdSource; }
            set { this._saCodeJobStatusIdSource = value; }
      	}
		private SaCodeScDeg _saCodeScDegIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeScDeg"/>.
		/// </summary>
		/// <value>The source SaCodeScDeg for SaCodeScDegId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaCodeScDeg SaCodeScDegIdSource
      	{
            get { return this._saCodeScDegIdSource; }
            set { this._saCodeScDegIdSource = value; }
      	}
		private SaCodeScDeg _saCodeScDegOldIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaCodeScDeg"/>.
		/// </summary>
		/// <value>The source SaCodeScDeg for SaCodeScDegOldId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaCodeScDeg SaCodeScDegOldIdSource
      	{
            get { return this._saCodeScDegOldIdSource; }
            set { this._saCodeScDegOldIdSource = value; }
      	}
		private SaStfMember _saStfMemberIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return this._saStfMemberIdSource; }
            set { this._saStfMemberIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SaServTerminEntityData _tmp = new SaServTerminEntityData();
						
			_tmp.SaServTerminId = this.SaServTerminId;
			_tmp.OriginalSaServTerminId = this.OriginalSaServTerminId;
			
			_tmp.EmpEndDate = this.EmpEndDate;
			_tmp.DecisionNum = this.DecisionNum;
			_tmp.DecisionDate = this.DecisionDate;
			_tmp.DecisionSumm = this.DecisionSumm;
			_tmp.DecisionExecDate = this.DecisionExecDate;
			_tmp.IsEmp = this.IsEmp;
			_tmp.RewardAmt = this.RewardAmt;
			_tmp.IsYearEnd = this.IsYearEnd;
			_tmp.Coments = this.Coments;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.SaCodeServTerminRsnId = this.SaCodeServTerminRsnId;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.GsApprovalHId = this.GsApprovalHId;
			_tmp.DoesAffectStaffStat = this.DoesAffectStaffStat;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.StfPensionPayPlace = this.StfPensionPayPlace;
			_tmp.SaTransferId = this.SaTransferId;
			_tmp.SaCodeScDegId = this.SaCodeScDegId;
			_tmp.SaCodeScDegOldId = this.SaCodeScDegOldId;
			_tmp.SaCodeJobStatusId = this.SaCodeJobStatusId;
			
			#region Source Parent Composite Entities
			if (this.SaTransferIdSource != null)
				_tmp.SaTransferIdSource = MakeCopyOf(this.SaTransferIdSource) as SaTransfer;
			if (this.SaCodeServTerminRsnIdSource != null)
				_tmp.SaCodeServTerminRsnIdSource = MakeCopyOf(this.SaCodeServTerminRsnIdSource) as SaCodeServTerminRsn;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.GsApprovalHIdSource != null)
				_tmp.GsApprovalHIdSource = MakeCopyOf(this.GsApprovalHIdSource) as GsApprovalH;
			if (this.SaCodeJobStatusIdSource != null)
				_tmp.SaCodeJobStatusIdSource = MakeCopyOf(this.SaCodeJobStatusIdSource) as SaCodeJobStatus;
			if (this.SaCodeScDegIdSource != null)
				_tmp.SaCodeScDegIdSource = MakeCopyOf(this.SaCodeScDegIdSource) as SaCodeScDeg;
			if (this.SaCodeScDegOldIdSource != null)
				_tmp.SaCodeScDegOldIdSource = MakeCopyOf(this.SaCodeScDegOldIdSource) as SaCodeScDeg;
			if (this.SaStfMemberIdSource != null)
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource) as SaStfMember;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SaServTerminEntityData _tmp = new SaServTerminEntityData();
						
			_tmp.SaServTerminId = this.SaServTerminId;
			_tmp.OriginalSaServTerminId = this.OriginalSaServTerminId;
			
			_tmp.EmpEndDate = this.EmpEndDate;
			_tmp.DecisionNum = this.DecisionNum;
			_tmp.DecisionDate = this.DecisionDate;
			_tmp.DecisionSumm = this.DecisionSumm;
			_tmp.DecisionExecDate = this.DecisionExecDate;
			_tmp.IsEmp = this.IsEmp;
			_tmp.RewardAmt = this.RewardAmt;
			_tmp.IsYearEnd = this.IsYearEnd;
			_tmp.Coments = this.Coments;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.SaCodeServTerminRsnId = this.SaCodeServTerminRsnId;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.GsApprovalHId = this.GsApprovalHId;
			_tmp.DoesAffectStaffStat = this.DoesAffectStaffStat;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.StfPensionPayPlace = this.StfPensionPayPlace;
			_tmp.SaTransferId = this.SaTransferId;
			_tmp.SaCodeScDegId = this.SaCodeScDegId;
			_tmp.SaCodeScDegOldId = this.SaCodeScDegOldId;
			_tmp.SaCodeJobStatusId = this.SaCodeJobStatusId;
			
			#region Source Parent Composite Entities
			if (this.SaTransferIdSource != null && existingCopies.Contains(this.SaTransferIdSource))
				_tmp.SaTransferIdSource = existingCopies[this.SaTransferIdSource] as SaTransfer;
			else
				_tmp.SaTransferIdSource = MakeCopyOf(this.SaTransferIdSource, existingCopies) as SaTransfer;
			if (this.SaCodeServTerminRsnIdSource != null && existingCopies.Contains(this.SaCodeServTerminRsnIdSource))
				_tmp.SaCodeServTerminRsnIdSource = existingCopies[this.SaCodeServTerminRsnIdSource] as SaCodeServTerminRsn;
			else
				_tmp.SaCodeServTerminRsnIdSource = MakeCopyOf(this.SaCodeServTerminRsnIdSource, existingCopies) as SaCodeServTerminRsn;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.GsApprovalHIdSource != null && existingCopies.Contains(this.GsApprovalHIdSource))
				_tmp.GsApprovalHIdSource = existingCopies[this.GsApprovalHIdSource] as GsApprovalH;
			else
				_tmp.GsApprovalHIdSource = MakeCopyOf(this.GsApprovalHIdSource, existingCopies) as GsApprovalH;
			if (this.SaCodeJobStatusIdSource != null && existingCopies.Contains(this.SaCodeJobStatusIdSource))
				_tmp.SaCodeJobStatusIdSource = existingCopies[this.SaCodeJobStatusIdSource] as SaCodeJobStatus;
			else
				_tmp.SaCodeJobStatusIdSource = MakeCopyOf(this.SaCodeJobStatusIdSource, existingCopies) as SaCodeJobStatus;
			if (this.SaCodeScDegIdSource != null && existingCopies.Contains(this.SaCodeScDegIdSource))
				_tmp.SaCodeScDegIdSource = existingCopies[this.SaCodeScDegIdSource] as SaCodeScDeg;
			else
				_tmp.SaCodeScDegIdSource = MakeCopyOf(this.SaCodeScDegIdSource, existingCopies) as SaCodeScDeg;
			if (this.SaCodeScDegOldIdSource != null && existingCopies.Contains(this.SaCodeScDegOldIdSource))
				_tmp.SaCodeScDegOldIdSource = existingCopies[this.SaCodeScDegOldIdSource] as SaCodeScDeg;
			else
				_tmp.SaCodeScDegOldIdSource = MakeCopyOf(this.SaCodeScDegOldIdSource, existingCopies) as SaCodeScDeg;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				_tmp.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaServTerminColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SaServTerminColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaServTerminColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SaServTerminColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaServTerminColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SaServTerminColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SaServTerminEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SaServTerminEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaServTerminColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SaServTerminColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SaServTerminEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SaServTerminEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SaServTerminEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SaServTermin"/> object.
	/// </remarks>
	public class SaServTerminEventArgs : System.EventArgs
	{
		private SaServTerminColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SaServTerminEventArgs class.
		///</summary>
		public SaServTerminEventArgs(SaServTerminColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SaServTerminEventArgs class.
		///</summary>
		public SaServTerminEventArgs(SaServTerminColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SaServTerminColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SaServTerminColumn" />
		public SaServTerminColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SaServTermin related events.
	///</summary>
	public delegate void SaServTerminEventHandler(object sender, SaServTerminEventArgs e);
	
	#region SaServTerminComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SaServTerminComparer : System.Collections.Generic.IComparer<SaServTermin>
	{
		SaServTerminColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SaServTerminComparer"/> class.
        /// </summary>
		public SaServTerminComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SaServTerminComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SaServTerminComparer(SaServTerminColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SaServTermin"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SaServTermin"/> to compare.</param>
        /// <param name="b">The second <c>SaServTermin</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SaServTermin a, SaServTermin b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SaServTermin entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SaServTermin a, SaServTermin b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SaServTerminColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SaServTerminKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SaServTermin"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SaServTerminKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SaServTerminKey class.
		/// </summary>
		public SaServTerminKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SaServTerminKey class.
		/// </summary>
		public SaServTerminKey(SaServTerminBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SaServTerminId = entity.SaServTerminId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SaServTerminKey class.
		/// </summary>
		public SaServTerminKey(System.Decimal _saServTerminId)
		{
			#region Init Properties

			this.SaServTerminId = _saServTerminId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SaServTerminBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SaServTerminBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SaServTerminId property
		private System.Decimal _saServTerminId;
		
		/// <summary>
		/// Gets or sets the SaServTerminId property.
		/// </summary>
		public System.Decimal SaServTerminId
		{
			get { return _saServTerminId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SaServTerminId = value;
				
				_saServTerminId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SaServTerminId = ( values["SaServTerminId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SaServTerminId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SaServTerminId", SaServTerminId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SaServTerminId: {0}{1}",
								SaServTerminId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SaServTerminColumn Enum
	
	/// <summary>
	/// Enumerate the SaServTermin columns.
	/// </summary>
	[Serializable]
	public enum SaServTerminColumn : int
	{
		/// <summary>
		/// SaServTerminId : 
		/// </summary>
		[EnumTextValue("SA_SERV_TERMIN_ID")]
		[ColumnEnum("SA_SERV_TERMIN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SaServTerminId = 1,
		/// <summary>
		/// EmpEndDate : 
		/// </summary>
		[EnumTextValue("EMP_END_DATE")]
		[ColumnEnum("EMP_END_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		EmpEndDate = 2,
		/// <summary>
		/// DecisionNum : 
		/// </summary>
		[EnumTextValue("DECISION_NUM")]
		[ColumnEnum("DECISION_NUM", typeof(System.String), System.Data.DbType.String, false, false, false, 10)]
		DecisionNum = 3,
		/// <summary>
		/// DecisionDate : 
		/// </summary>
		[EnumTextValue("DECISION_DATE")]
		[ColumnEnum("DECISION_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		DecisionDate = 4,
		/// <summary>
		/// DecisionSumm : 
		/// </summary>
		[EnumTextValue("DECISION_SUMM")]
		[ColumnEnum("DECISION_SUMM", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		DecisionSumm = 5,
		/// <summary>
		/// DecisionExecDate : 
		/// </summary>
		[EnumTextValue("DECISION_EXEC_DATE")]
		[ColumnEnum("DECISION_EXEC_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		DecisionExecDate = 6,
		/// <summary>
		/// IsEmp : 
		/// </summary>
		[EnumTextValue("IS_EMP")]
		[ColumnEnum("IS_EMP", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsEmp = 7,
		/// <summary>
		/// RewardAmt : 
		/// </summary>
		[EnumTextValue("REWARD_AMT")]
		[ColumnEnum("REWARD_AMT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RewardAmt = 8,
		/// <summary>
		/// IsYearEnd : 
		/// </summary>
		[EnumTextValue("IS_YEAR_END")]
		[ColumnEnum("IS_YEAR_END", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsYearEnd = 9,
		/// <summary>
		/// Coments : 
		/// </summary>
		[EnumTextValue("COMENTS")]
		[ColumnEnum("COMENTS", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		Coments = 10,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdAcadYearId = 11,
		/// <summary>
		/// SaCodeServTerminRsnId : 
		/// </summary>
		[EnumTextValue("SA_CODE_SERV_TERMIN_RSN_ID")]
		[ColumnEnum("SA_CODE_SERV_TERMIN_RSN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaCodeServTerminRsnId = 12,
		/// <summary>
		/// SaStfMemberId : 
		/// </summary>
		[EnumTextValue("SA_STF_MEMBER_ID")]
		[ColumnEnum("SA_STF_MEMBER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaStfMemberId = 13,
		/// <summary>
		/// GsApprovalHId : 
		/// </summary>
		[EnumTextValue("GS_APPROVAL_H_ID")]
		[ColumnEnum("GS_APPROVAL_H_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsApprovalHId = 14,
		/// <summary>
		/// DoesAffectStaffStat : 
		/// </summary>
		[EnumTextValue("DOES_AFFECT_STAFF_STAT")]
		[ColumnEnum("DOES_AFFECT_STAFF_STAT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DoesAffectStaffStat = 15,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsFacultyInfoId = 16,
		/// <summary>
		/// StfPensionPayPlace : 
		/// </summary>
		[EnumTextValue("STF_PENSION_PAY_PLACE")]
		[ColumnEnum("STF_PENSION_PAY_PLACE", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		StfPensionPayPlace = 17,
		/// <summary>
		/// SaTransferId : 
		/// </summary>
		[EnumTextValue("SA_TRANSFER_ID")]
		[ColumnEnum("SA_TRANSFER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SaTransferId = 18,
		/// <summary>
		/// SaCodeScDegId : 
		/// </summary>
		[EnumTextValue("SA_CODE_SC_DEG_ID")]
		[ColumnEnum("SA_CODE_SC_DEG_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SaCodeScDegId = 19,
		/// <summary>
		/// SaCodeScDegOldId : 
		/// </summary>
		[EnumTextValue("SA_CODE_SC_DEG_OLD_ID")]
		[ColumnEnum("SA_CODE_SC_DEG_OLD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SaCodeScDegOldId = 20,
		/// <summary>
		/// SaCodeJobStatusId : 
		/// </summary>
		[EnumTextValue("SA_CODE_JOB_STATUS_ID")]
		[ColumnEnum("SA_CODE_JOB_STATUS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SaCodeJobStatusId = 21
	}//End enum

	#endregion SaServTerminColumn Enum

} // end namespace
