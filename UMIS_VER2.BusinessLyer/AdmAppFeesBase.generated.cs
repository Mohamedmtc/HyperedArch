
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AdmAppFees.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ADM_APP_FEES' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AdmAppFeesBase : EntityBase, IAdmAppFees, IEntityId<AdmAppFeesKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AdmAppFeesEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AdmAppFeesEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AdmAppFeesEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AdmAppFees> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmAppFeesEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmAppFeesEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AdmAppFeesBase"/> instance.
		///</summary>
		public AdmAppFeesBase()
		{
			this.entityData = new AdmAppFeesEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AdmAppFeesBase"/> instance.
		///</summary>
		///<param name="_admAppFeesId">Like FEE_STUD_FEE_ITEM XXسداد رسوم القبولXX</param>
		///<param name="_admCdeFeeId"></param>
		///<param name="_admApplicantId"></param>
		///<param name="_isPayed"></param>
		///<param name="_admOpenAcadSemesterId"></param>
		///<param name="_receiptNum">XXXXX payment in FEE_STUD_VOUCHER FEE_STUD_VOUCHER_ITEM</param>
		///<param name="_receiptDate">XXXX</param>
		///<param name="_gsCodeCurrencyId"></param>
		///<param name="_gsCodePayMethodId"></param>
		///<param name="_feeCodeBankId"></param>
		///<param name="_notes"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_cheqNum">رقم الشيك فى حالة دفع بالشيك</param>
		///<param name="_accntNum">رقم حساب البنك  فى حالة ايداع</param>
		///<param name="_attchdDoc">صورة الشيك او مرفق</param>
		///<param name="_userName"></param>
		///<param name="_feeAmount">ADM_CDE_FEE.AMOUNT FEE_STUD_VOUCHER</param>
		///<param name="_feeRemainAmount">remain on applicant</param>
		///<param name="_cancelFlg"></param>
		public AdmAppFeesBase(System.Decimal _admAppFeesId, System.Decimal _admCdeFeeId, 
			System.Decimal _admApplicantId, System.Decimal? _isPayed, System.Decimal? _admOpenAcadSemesterId, 
			System.String _receiptNum, System.DateTime? _receiptDate, System.Decimal _gsCodeCurrencyId, 
			System.Decimal? _gsCodePayMethodId, System.Decimal? _feeCodeBankId, System.String _notes, 
			System.Decimal? _seUserId, System.DateTime? _lastDate, System.String _cheqNum, System.String _accntNum, 
			System.String _attchdDoc, System.String _userName, System.Decimal? _feeAmount, System.Decimal? _feeRemainAmount, 
			System.Boolean? _cancelFlg)
		{
			this.entityData = new AdmAppFeesEntityData();
			this.backupData = null;

			this.AdmAppFeesId = _admAppFeesId;
			this.AdmCdeFeeId = _admCdeFeeId;
			this.AdmApplicantId = _admApplicantId;
			this.IsPayed = _isPayed;
			this.AdmOpenAcadSemesterId = _admOpenAcadSemesterId;
			this.ReceiptNum = _receiptNum;
			this.ReceiptDate = _receiptDate;
			this.GsCodeCurrencyId = _gsCodeCurrencyId;
			this.GsCodePayMethodId = _gsCodePayMethodId;
			this.FeeCodeBankId = _feeCodeBankId;
			this.Notes = _notes;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
			this.CheqNum = _cheqNum;
			this.AccntNum = _accntNum;
			this.AttchdDoc = _attchdDoc;
			this.UserName = _userName;
			this.FeeAmount = _feeAmount;
			this.FeeRemainAmount = _feeRemainAmount;
			this.CancelFlg = _cancelFlg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AdmAppFees"/> instance.
		///</summary>
		///<param name="_admAppFeesId">Like FEE_STUD_FEE_ITEM XXسداد رسوم القبولXX</param>
		///<param name="_admCdeFeeId"></param>
		///<param name="_admApplicantId"></param>
		///<param name="_isPayed"></param>
		///<param name="_admOpenAcadSemesterId"></param>
		///<param name="_receiptNum">XXXXX payment in FEE_STUD_VOUCHER FEE_STUD_VOUCHER_ITEM</param>
		///<param name="_receiptDate">XXXX</param>
		///<param name="_gsCodeCurrencyId"></param>
		///<param name="_gsCodePayMethodId"></param>
		///<param name="_feeCodeBankId"></param>
		///<param name="_notes"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_cheqNum">رقم الشيك فى حالة دفع بالشيك</param>
		///<param name="_accntNum">رقم حساب البنك  فى حالة ايداع</param>
		///<param name="_attchdDoc">صورة الشيك او مرفق</param>
		///<param name="_userName"></param>
		///<param name="_feeAmount">ADM_CDE_FEE.AMOUNT FEE_STUD_VOUCHER</param>
		///<param name="_feeRemainAmount">remain on applicant</param>
		///<param name="_cancelFlg"></param>
		public static AdmAppFees CreateAdmAppFees(System.Decimal _admAppFeesId, System.Decimal _admCdeFeeId, 
			System.Decimal _admApplicantId, System.Decimal? _isPayed, System.Decimal? _admOpenAcadSemesterId, 
			System.String _receiptNum, System.DateTime? _receiptDate, System.Decimal _gsCodeCurrencyId, 
			System.Decimal? _gsCodePayMethodId, System.Decimal? _feeCodeBankId, System.String _notes, 
			System.Decimal? _seUserId, System.DateTime? _lastDate, System.String _cheqNum, System.String _accntNum, 
			System.String _attchdDoc, System.String _userName, System.Decimal? _feeAmount, System.Decimal? _feeRemainAmount, 
			System.Boolean? _cancelFlg)
		{
			AdmAppFees newAdmAppFees = new AdmAppFees();
			newAdmAppFees.AdmAppFeesId = _admAppFeesId;
			newAdmAppFees.AdmCdeFeeId = _admCdeFeeId;
			newAdmAppFees.AdmApplicantId = _admApplicantId;
			newAdmAppFees.IsPayed = _isPayed;
			newAdmAppFees.AdmOpenAcadSemesterId = _admOpenAcadSemesterId;
			newAdmAppFees.ReceiptNum = _receiptNum;
			newAdmAppFees.ReceiptDate = _receiptDate;
			newAdmAppFees.GsCodeCurrencyId = _gsCodeCurrencyId;
			newAdmAppFees.GsCodePayMethodId = _gsCodePayMethodId;
			newAdmAppFees.FeeCodeBankId = _feeCodeBankId;
			newAdmAppFees.Notes = _notes;
			newAdmAppFees.SeUserId = _seUserId;
			newAdmAppFees.LastDate = _lastDate;
			newAdmAppFees.CheqNum = _cheqNum;
			newAdmAppFees.AccntNum = _accntNum;
			newAdmAppFees.AttchdDoc = _attchdDoc;
			newAdmAppFees.UserName = _userName;
			newAdmAppFees.FeeAmount = _feeAmount;
			newAdmAppFees.FeeRemainAmount = _feeRemainAmount;
			newAdmAppFees.CancelFlg = _cancelFlg;
			return newAdmAppFees;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AdmAppFeesId property. 
		///		Like FEE_STUD_FEE_ITEM XXسداد رسوم القبولXX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Like FEE_STUD_FEE_ITEM XXسداد رسوم القبولXX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal AdmAppFeesId
		{
			get
			{
				return this.entityData.AdmAppFeesId; 
			}
			
			set
			{
				if (this.entityData.AdmAppFeesId == value)
					return;
					
				OnColumnChanging(AdmAppFeesColumn.AdmAppFeesId, this.entityData.AdmAppFeesId);
				this.entityData.AdmAppFeesId = value;
				this.EntityId.AdmAppFeesId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppFeesColumn.AdmAppFeesId, this.entityData.AdmAppFeesId);
				OnPropertyChanged("AdmAppFeesId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ADM_APP_FEES_ID property.
		///		Like FEE_STUD_FEE_ITEM XXسداد رسوم القبولXX
		/// </summary>
		/// <remarks>This is the original value of the ADM_APP_FEES_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalAdmAppFeesId
		{
			get { return this.entityData.OriginalAdmAppFeesId; }
			set { this.entityData.OriginalAdmAppFeesId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the AdmCdeFeeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AdmCdeFeeId
		{
			get
			{
				return this.entityData.AdmCdeFeeId; 
			}
			
			set
			{
				if (this.entityData.AdmCdeFeeId == value)
					return;
					
				OnColumnChanging(AdmAppFeesColumn.AdmCdeFeeId, this.entityData.AdmCdeFeeId);
				this.entityData.AdmCdeFeeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppFeesColumn.AdmCdeFeeId, this.entityData.AdmCdeFeeId);
				OnPropertyChanged("AdmCdeFeeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmApplicantId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AdmApplicantId
		{
			get
			{
				return this.entityData.AdmApplicantId; 
			}
			
			set
			{
				if (this.entityData.AdmApplicantId == value)
					return;
					
				OnColumnChanging(AdmAppFeesColumn.AdmApplicantId, this.entityData.AdmApplicantId);
				this.entityData.AdmApplicantId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppFeesColumn.AdmApplicantId, this.entityData.AdmApplicantId);
				OnPropertyChanged("AdmApplicantId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsPayed property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsIsPayedNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? IsPayed
		{
			get
			{
				return this.entityData.IsPayed; 
			}
			
			set
			{
				if (this.entityData.IsPayed == value)
					return;
					
				OnColumnChanging(AdmAppFeesColumn.IsPayed, this.entityData.IsPayed);
				this.entityData.IsPayed = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppFeesColumn.IsPayed, this.entityData.IsPayed);
				OnPropertyChanged("IsPayed");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmOpenAcadSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmOpenAcadSemesterIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmOpenAcadSemesterId
		{
			get
			{
				return this.entityData.AdmOpenAcadSemesterId; 
			}
			
			set
			{
				if (this.entityData.AdmOpenAcadSemesterId == value)
					return;
					
				OnColumnChanging(AdmAppFeesColumn.AdmOpenAcadSemesterId, this.entityData.AdmOpenAcadSemesterId);
				this.entityData.AdmOpenAcadSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppFeesColumn.AdmOpenAcadSemesterId, this.entityData.AdmOpenAcadSemesterId);
				OnPropertyChanged("AdmOpenAcadSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReceiptNum property. 
		///		XXXXX payment in FEE_STUD_VOUCHER FEE_STUD_VOUCHER_ITEM
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"XXXXX payment in FEE_STUD_VOUCHER FEE_STUD_VOUCHER_ITEM"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String ReceiptNum
		{
			get
			{
				return this.entityData.ReceiptNum; 
			}
			
			set
			{
				if (this.entityData.ReceiptNum == value)
					return;
					
				OnColumnChanging(AdmAppFeesColumn.ReceiptNum, this.entityData.ReceiptNum);
				this.entityData.ReceiptNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppFeesColumn.ReceiptNum, this.entityData.ReceiptNum);
				OnPropertyChanged("ReceiptNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReceiptDate property. 
		///		XXXX
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsReceiptDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XXXX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ReceiptDate
		{
			get
			{
				return this.entityData.ReceiptDate; 
			}
			
			set
			{
				if (this.entityData.ReceiptDate == value)
					return;
					
				OnColumnChanging(AdmAppFeesColumn.ReceiptDate, this.entityData.ReceiptDate);
				this.entityData.ReceiptDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppFeesColumn.ReceiptDate, this.entityData.ReceiptDate);
				OnPropertyChanged("ReceiptDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeCurrencyId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsCodeCurrencyId
		{
			get
			{
				return this.entityData.GsCodeCurrencyId; 
			}
			
			set
			{
				if (this.entityData.GsCodeCurrencyId == value)
					return;
					
				OnColumnChanging(AdmAppFeesColumn.GsCodeCurrencyId, this.entityData.GsCodeCurrencyId);
				this.entityData.GsCodeCurrencyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppFeesColumn.GsCodeCurrencyId, this.entityData.GsCodeCurrencyId);
				OnPropertyChanged("GsCodeCurrencyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodePayMethodId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCodePayMethodIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCodePayMethodId
		{
			get
			{
				return this.entityData.GsCodePayMethodId; 
			}
			
			set
			{
				if (this.entityData.GsCodePayMethodId == value)
					return;
					
				OnColumnChanging(AdmAppFeesColumn.GsCodePayMethodId, this.entityData.GsCodePayMethodId);
				this.entityData.GsCodePayMethodId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppFeesColumn.GsCodePayMethodId, this.entityData.GsCodePayMethodId);
				OnPropertyChanged("GsCodePayMethodId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeCodeBankId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeCodeBankIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeeCodeBankId
		{
			get
			{
				return this.entityData.FeeCodeBankId; 
			}
			
			set
			{
				if (this.entityData.FeeCodeBankId == value)
					return;
					
				OnColumnChanging(AdmAppFeesColumn.FeeCodeBankId, this.entityData.FeeCodeBankId);
				this.entityData.FeeCodeBankId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppFeesColumn.FeeCodeBankId, this.entityData.FeeCodeBankId);
				OnPropertyChanged("FeeCodeBankId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(AdmAppFeesColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppFeesColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(AdmAppFeesColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppFeesColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(AdmAppFeesColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppFeesColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CheqNum property. 
		///		رقم الشيك فى حالة دفع بالشيك
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"رقم الشيك فى حالة دفع بالشيك"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String CheqNum
		{
			get
			{
				return this.entityData.CheqNum; 
			}
			
			set
			{
				if (this.entityData.CheqNum == value)
					return;
					
				OnColumnChanging(AdmAppFeesColumn.CheqNum, this.entityData.CheqNum);
				this.entityData.CheqNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppFeesColumn.CheqNum, this.entityData.CheqNum);
				OnPropertyChanged("CheqNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccntNum property. 
		///		رقم حساب البنك  فى حالة ايداع
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"رقم حساب البنك  فى حالة ايداع"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String AccntNum
		{
			get
			{
				return this.entityData.AccntNum; 
			}
			
			set
			{
				if (this.entityData.AccntNum == value)
					return;
					
				OnColumnChanging(AdmAppFeesColumn.AccntNum, this.entityData.AccntNum);
				this.entityData.AccntNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppFeesColumn.AccntNum, this.entityData.AccntNum);
				OnPropertyChanged("AccntNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AttchdDoc property. 
		///		صورة الشيك او مرفق
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"صورة الشيك او مرفق"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String AttchdDoc
		{
			get
			{
				return this.entityData.AttchdDoc; 
			}
			
			set
			{
				if (this.entityData.AttchdDoc == value)
					return;
					
				OnColumnChanging(AdmAppFeesColumn.AttchdDoc, this.entityData.AttchdDoc);
				this.entityData.AttchdDoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppFeesColumn.AttchdDoc, this.entityData.AttchdDoc);
				OnPropertyChanged("AttchdDoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String UserName
		{
			get
			{
				return this.entityData.UserName; 
			}
			
			set
			{
				if (this.entityData.UserName == value)
					return;
					
				OnColumnChanging(AdmAppFeesColumn.UserName, this.entityData.UserName);
				this.entityData.UserName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppFeesColumn.UserName, this.entityData.UserName);
				OnPropertyChanged("UserName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeAmount property. 
		///		ADM_CDE_FEE.AMOUNT FEE_STUD_VOUCHER
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeAmountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"ADM_CDE_FEE.AMOUNT FEE_STUD_VOUCHER"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeeAmount
		{
			get
			{
				return this.entityData.FeeAmount; 
			}
			
			set
			{
				if (this.entityData.FeeAmount == value)
					return;
					
				OnColumnChanging(AdmAppFeesColumn.FeeAmount, this.entityData.FeeAmount);
				this.entityData.FeeAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppFeesColumn.FeeAmount, this.entityData.FeeAmount);
				OnPropertyChanged("FeeAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeRemainAmount property. 
		///		remain on applicant
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeRemainAmountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"remain on applicant"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeeRemainAmount
		{
			get
			{
				return this.entityData.FeeRemainAmount; 
			}
			
			set
			{
				if (this.entityData.FeeRemainAmount == value)
					return;
					
				OnColumnChanging(AdmAppFeesColumn.FeeRemainAmount, this.entityData.FeeRemainAmount);
				this.entityData.FeeRemainAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppFeesColumn.FeeRemainAmount, this.entityData.FeeRemainAmount);
				OnPropertyChanged("FeeRemainAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CancelFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsCancelFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? CancelFlg
		{
			get
			{
				return this.entityData.CancelFlg; 
			}
			
			set
			{
				if (this.entityData.CancelFlg == value)
					return;
					
				OnColumnChanging(AdmAppFeesColumn.CancelFlg, this.entityData.CancelFlg);
				this.entityData.CancelFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppFeesColumn.CancelFlg, this.entityData.CancelFlg);
				OnPropertyChanged("CancelFlg");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdmApplicant"/>.
		/// </summary>
		/// <value>The source AdmApplicant for AdmApplicantId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmApplicant AdmApplicantIdSource
      	{
            get { return entityData.AdmApplicantIdSource; }
            set { entityData.AdmApplicantIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdeFee"/>.
		/// </summary>
		/// <value>The source AdmCdeFee for AdmCdeFeeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmCdeFee AdmCdeFeeIdSource
      	{
            get { return entityData.AdmCdeFeeIdSource; }
            set { entityData.AdmCdeFeeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdmOpenAcadSemester"/>.
		/// </summary>
		/// <value>The source AdmOpenAcadSemester for AdmOpenAcadSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmOpenAcadSemester AdmOpenAcadSemesterIdSource
      	{
            get { return entityData.AdmOpenAcadSemesterIdSource; }
            set { entityData.AdmOpenAcadSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeBanks"/>.
		/// </summary>
		/// <value>The source FeeCodeBanks for FeeCodeBankId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeCodeBanks FeeCodeBankIdSource
      	{
            get { return entityData.FeeCodeBankIdSource; }
            set { entityData.FeeCodeBankIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCurrency"/>.
		/// </summary>
		/// <value>The source GsCodeCurrency for GsCodeCurrencyId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeCurrency GsCodeCurrencyIdSource
      	{
            get { return entityData.GsCodeCurrencyIdSource; }
            set { entityData.GsCodeCurrencyIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodePayMethod"/>.
		/// </summary>
		/// <value>The source GsCodePayMethod for GsCodePayMethodId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodePayMethod GsCodePayMethodIdSource
      	{
            get { return entityData.GsCodePayMethodIdSource; }
            set { entityData.GsCodePayMethodIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeUser SeUserIdSource
      	{
            get { return entityData.SeUserIdSource; }
            set { entityData.SeUserIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of FeeStudVoucherItem objects
		///	which are related to this object through the relation FK_FEE_STUD_VOUCHER_ITEM_ADM_APP_FEES
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeStudVoucherItem> FeeStudVoucherItemCollection
		{
			get { return entityData.FeeStudVoucherItemCollection; }
			set { entityData.FeeStudVoucherItemCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeRefndStdDet objects
		///	which are related to this object through the relation FK_FEE_REFND_STD_DET_ADM_APP_FEES
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeRefndStdDet> FeeRefndStdDetCollection
		{
			get { return entityData.FeeRefndStdDetCollection; }
			set { entityData.FeeRefndStdDetCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ReceiptNum", "Receipt Num", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CheqNum", "Cheq Num", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AccntNum", "Accnt Num", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UserName", "User Name", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ADM_APP_FEES"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ADM_APP_FEES_ID", "ADM_CDE_FEE_ID", "ADM_APPLICANT_ID", "IS_PAYED", "ADM_OPEN_ACAD_SEMESTER_ID", "RECEIPT_NUM", "RECEIPT_DATE", "GS_CODE_CURRENCY_ID", "GS_CODE_PAY_METHOD_ID", "FEE_CODE_BANK_ID", "NOTES", "SE_USER_ID", "LAST_DATE", "CHEQ_NUM", "ACCNT_NUM", "ATTCHD_DOC", "User_Name", "FEE_AMOUNT", "FEE_REMAIN_AMOUNT", "CANCEL_FLG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AdmAppFeesEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AdmAppFees) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AdmAppFees>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AdmAppFees);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AdmAppFees Entity 
		///</summary>
		protected virtual AdmAppFees Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AdmAppFees copy = new AdmAppFees();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AdmAppFeesId = this.AdmAppFeesId;
					copy.OriginalAdmAppFeesId = this.OriginalAdmAppFeesId;
				copy.AdmCdeFeeId = this.AdmCdeFeeId;
				copy.AdmApplicantId = this.AdmApplicantId;
				copy.IsPayed = this.IsPayed;
				copy.AdmOpenAcadSemesterId = this.AdmOpenAcadSemesterId;
				copy.ReceiptNum = this.ReceiptNum;
				copy.ReceiptDate = this.ReceiptDate;
				copy.GsCodeCurrencyId = this.GsCodeCurrencyId;
				copy.GsCodePayMethodId = this.GsCodePayMethodId;
				copy.FeeCodeBankId = this.FeeCodeBankId;
				copy.Notes = this.Notes;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
				copy.CheqNum = this.CheqNum;
				copy.AccntNum = this.AccntNum;
				copy.AttchdDoc = this.AttchdDoc;
				copy.UserName = this.UserName;
				copy.FeeAmount = this.FeeAmount;
				copy.FeeRemainAmount = this.FeeRemainAmount;
				copy.CancelFlg = this.CancelFlg;
			
			if (this.AdmApplicantIdSource != null && existingCopies.Contains(this.AdmApplicantIdSource))
				copy.AdmApplicantIdSource = existingCopies[this.AdmApplicantIdSource] as AdmApplicant;
			else
				copy.AdmApplicantIdSource = MakeCopyOf(this.AdmApplicantIdSource, existingCopies) as AdmApplicant;
			if (this.AdmCdeFeeIdSource != null && existingCopies.Contains(this.AdmCdeFeeIdSource))
				copy.AdmCdeFeeIdSource = existingCopies[this.AdmCdeFeeIdSource] as AdmCdeFee;
			else
				copy.AdmCdeFeeIdSource = MakeCopyOf(this.AdmCdeFeeIdSource, existingCopies) as AdmCdeFee;
			if (this.AdmOpenAcadSemesterIdSource != null && existingCopies.Contains(this.AdmOpenAcadSemesterIdSource))
				copy.AdmOpenAcadSemesterIdSource = existingCopies[this.AdmOpenAcadSemesterIdSource] as AdmOpenAcadSemester;
			else
				copy.AdmOpenAcadSemesterIdSource = MakeCopyOf(this.AdmOpenAcadSemesterIdSource, existingCopies) as AdmOpenAcadSemester;
			if (this.FeeCodeBankIdSource != null && existingCopies.Contains(this.FeeCodeBankIdSource))
				copy.FeeCodeBankIdSource = existingCopies[this.FeeCodeBankIdSource] as FeeCodeBanks;
			else
				copy.FeeCodeBankIdSource = MakeCopyOf(this.FeeCodeBankIdSource, existingCopies) as FeeCodeBanks;
			if (this.GsCodeCurrencyIdSource != null && existingCopies.Contains(this.GsCodeCurrencyIdSource))
				copy.GsCodeCurrencyIdSource = existingCopies[this.GsCodeCurrencyIdSource] as GsCodeCurrency;
			else
				copy.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource, existingCopies) as GsCodeCurrency;
			if (this.GsCodePayMethodIdSource != null && existingCopies.Contains(this.GsCodePayMethodIdSource))
				copy.GsCodePayMethodIdSource = existingCopies[this.GsCodePayMethodIdSource] as GsCodePayMethod;
			else
				copy.GsCodePayMethodIdSource = MakeCopyOf(this.GsCodePayMethodIdSource, existingCopies) as GsCodePayMethod;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				copy.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				copy.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
		
			//deep copy nested objects
			copy.FeeStudVoucherItemCollection = (TList<FeeStudVoucherItem>) MakeCopyOf(this.FeeStudVoucherItemCollection, existingCopies); 
			copy.FeeRefndStdDetCollection = (TList<FeeRefndStdDet>) MakeCopyOf(this.FeeRefndStdDetCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AdmAppFees Entity 
		///</summary>
		public virtual AdmAppFees Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AdmAppFees Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AdmAppFees DeepCopy()
		{
			return EntityHelper.Clone<AdmAppFees>(this as AdmAppFees);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AdmAppFeesEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AdmAppFeesEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AdmAppFeesEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AdmAppFeesColumn column)
		{
			switch(column)
			{
					case AdmAppFeesColumn.AdmAppFeesId:
					return entityData.AdmAppFeesId != _originalData.AdmAppFeesId;
					case AdmAppFeesColumn.AdmCdeFeeId:
					return entityData.AdmCdeFeeId != _originalData.AdmCdeFeeId;
					case AdmAppFeesColumn.AdmApplicantId:
					return entityData.AdmApplicantId != _originalData.AdmApplicantId;
					case AdmAppFeesColumn.IsPayed:
					return entityData.IsPayed != _originalData.IsPayed;
					case AdmAppFeesColumn.AdmOpenAcadSemesterId:
					return entityData.AdmOpenAcadSemesterId != _originalData.AdmOpenAcadSemesterId;
					case AdmAppFeesColumn.ReceiptNum:
					return entityData.ReceiptNum != _originalData.ReceiptNum;
					case AdmAppFeesColumn.ReceiptDate:
					return entityData.ReceiptDate != _originalData.ReceiptDate;
					case AdmAppFeesColumn.GsCodeCurrencyId:
					return entityData.GsCodeCurrencyId != _originalData.GsCodeCurrencyId;
					case AdmAppFeesColumn.GsCodePayMethodId:
					return entityData.GsCodePayMethodId != _originalData.GsCodePayMethodId;
					case AdmAppFeesColumn.FeeCodeBankId:
					return entityData.FeeCodeBankId != _originalData.FeeCodeBankId;
					case AdmAppFeesColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case AdmAppFeesColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case AdmAppFeesColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case AdmAppFeesColumn.CheqNum:
					return entityData.CheqNum != _originalData.CheqNum;
					case AdmAppFeesColumn.AccntNum:
					return entityData.AccntNum != _originalData.AccntNum;
					case AdmAppFeesColumn.AttchdDoc:
					return entityData.AttchdDoc != _originalData.AttchdDoc;
					case AdmAppFeesColumn.UserName:
					return entityData.UserName != _originalData.UserName;
					case AdmAppFeesColumn.FeeAmount:
					return entityData.FeeAmount != _originalData.FeeAmount;
					case AdmAppFeesColumn.FeeRemainAmount:
					return entityData.FeeRemainAmount != _originalData.FeeRemainAmount;
					case AdmAppFeesColumn.CancelFlg:
					return entityData.CancelFlg != _originalData.CancelFlg;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AdmAppFeesColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AdmAppFeesId != _originalData.AdmAppFeesId;
			result = result || entityData.AdmCdeFeeId != _originalData.AdmCdeFeeId;
			result = result || entityData.AdmApplicantId != _originalData.AdmApplicantId;
			result = result || entityData.IsPayed != _originalData.IsPayed;
			result = result || entityData.AdmOpenAcadSemesterId != _originalData.AdmOpenAcadSemesterId;
			result = result || entityData.ReceiptNum != _originalData.ReceiptNum;
			result = result || entityData.ReceiptDate != _originalData.ReceiptDate;
			result = result || entityData.GsCodeCurrencyId != _originalData.GsCodeCurrencyId;
			result = result || entityData.GsCodePayMethodId != _originalData.GsCodePayMethodId;
			result = result || entityData.FeeCodeBankId != _originalData.FeeCodeBankId;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.CheqNum != _originalData.CheqNum;
			result = result || entityData.AccntNum != _originalData.AccntNum;
			result = result || entityData.AttchdDoc != _originalData.AttchdDoc;
			result = result || entityData.UserName != _originalData.UserName;
			result = result || entityData.FeeAmount != _originalData.FeeAmount;
			result = result || entityData.FeeRemainAmount != _originalData.FeeRemainAmount;
			result = result || entityData.CancelFlg != _originalData.CancelFlg;
			return result;
		}	
		
		///<summary>
		///  Returns a AdmAppFees Entity with the original data.
		///</summary>
		public AdmAppFees GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAdmAppFees(
				_originalData.AdmAppFeesId,
				_originalData.AdmCdeFeeId,
				_originalData.AdmApplicantId,
				_originalData.IsPayed,
				_originalData.AdmOpenAcadSemesterId,
				_originalData.ReceiptNum,
				_originalData.ReceiptDate,
				_originalData.GsCodeCurrencyId,
				_originalData.GsCodePayMethodId,
				_originalData.FeeCodeBankId,
				_originalData.Notes,
				_originalData.SeUserId,
				_originalData.LastDate,
				_originalData.CheqNum,
				_originalData.AccntNum,
				_originalData.AttchdDoc,
				_originalData.UserName,
				_originalData.FeeAmount,
				_originalData.FeeRemainAmount,
				_originalData.CancelFlg
				);
				
			return (AdmAppFees)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AdmAppFeesBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AdmAppFeesBase)
				return ValueEquals(this, (AdmAppFeesBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AdmAppFeesBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AdmAppFeesId.GetHashCode() ^ 
					this.AdmCdeFeeId.GetHashCode() ^ 
					this.AdmApplicantId.GetHashCode() ^ 
					((this.IsPayed == null) ? string.Empty : this.IsPayed.ToString()).GetHashCode() ^ 
					((this.AdmOpenAcadSemesterId == null) ? string.Empty : this.AdmOpenAcadSemesterId.ToString()).GetHashCode() ^ 
					((this.ReceiptNum == null) ? string.Empty : this.ReceiptNum.ToString()).GetHashCode() ^ 
					((this.ReceiptDate == null) ? string.Empty : this.ReceiptDate.ToString()).GetHashCode() ^ 
					this.GsCodeCurrencyId.GetHashCode() ^ 
					((this.GsCodePayMethodId == null) ? string.Empty : this.GsCodePayMethodId.ToString()).GetHashCode() ^ 
					((this.FeeCodeBankId == null) ? string.Empty : this.FeeCodeBankId.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.CheqNum == null) ? string.Empty : this.CheqNum.ToString()).GetHashCode() ^ 
					((this.AccntNum == null) ? string.Empty : this.AccntNum.ToString()).GetHashCode() ^ 
					((this.AttchdDoc == null) ? string.Empty : this.AttchdDoc.ToString()).GetHashCode() ^ 
					((this.UserName == null) ? string.Empty : this.UserName.ToString()).GetHashCode() ^ 
					((this.FeeAmount == null) ? string.Empty : this.FeeAmount.ToString()).GetHashCode() ^ 
					((this.FeeRemainAmount == null) ? string.Empty : this.FeeRemainAmount.ToString()).GetHashCode() ^ 
					((this.CancelFlg == null) ? string.Empty : this.CancelFlg.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AdmAppFeesBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AdmAppFeesBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AdmAppFeesBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AdmAppFeesBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AdmAppFeesBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AdmAppFeesBase Object1, AdmAppFeesBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AdmAppFeesId != Object2.AdmAppFeesId)
				equal = false;
			if (Object1.AdmCdeFeeId != Object2.AdmCdeFeeId)
				equal = false;
			if (Object1.AdmApplicantId != Object2.AdmApplicantId)
				equal = false;
			if ( Object1.IsPayed != null && Object2.IsPayed != null )
			{
				if (Object1.IsPayed != Object2.IsPayed)
					equal = false;
			}
			else if (Object1.IsPayed == null ^ Object2.IsPayed == null )
			{
				equal = false;
			}
			if ( Object1.AdmOpenAcadSemesterId != null && Object2.AdmOpenAcadSemesterId != null )
			{
				if (Object1.AdmOpenAcadSemesterId != Object2.AdmOpenAcadSemesterId)
					equal = false;
			}
			else if (Object1.AdmOpenAcadSemesterId == null ^ Object2.AdmOpenAcadSemesterId == null )
			{
				equal = false;
			}
			if ( Object1.ReceiptNum != null && Object2.ReceiptNum != null )
			{
				if (Object1.ReceiptNum != Object2.ReceiptNum)
					equal = false;
			}
			else if (Object1.ReceiptNum == null ^ Object2.ReceiptNum == null )
			{
				equal = false;
			}
			if ( Object1.ReceiptDate != null && Object2.ReceiptDate != null )
			{
				if (Object1.ReceiptDate != Object2.ReceiptDate)
					equal = false;
			}
			else if (Object1.ReceiptDate == null ^ Object2.ReceiptDate == null )
			{
				equal = false;
			}
			if (Object1.GsCodeCurrencyId != Object2.GsCodeCurrencyId)
				equal = false;
			if ( Object1.GsCodePayMethodId != null && Object2.GsCodePayMethodId != null )
			{
				if (Object1.GsCodePayMethodId != Object2.GsCodePayMethodId)
					equal = false;
			}
			else if (Object1.GsCodePayMethodId == null ^ Object2.GsCodePayMethodId == null )
			{
				equal = false;
			}
			if ( Object1.FeeCodeBankId != null && Object2.FeeCodeBankId != null )
			{
				if (Object1.FeeCodeBankId != Object2.FeeCodeBankId)
					equal = false;
			}
			else if (Object1.FeeCodeBankId == null ^ Object2.FeeCodeBankId == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.CheqNum != null && Object2.CheqNum != null )
			{
				if (Object1.CheqNum != Object2.CheqNum)
					equal = false;
			}
			else if (Object1.CheqNum == null ^ Object2.CheqNum == null )
			{
				equal = false;
			}
			if ( Object1.AccntNum != null && Object2.AccntNum != null )
			{
				if (Object1.AccntNum != Object2.AccntNum)
					equal = false;
			}
			else if (Object1.AccntNum == null ^ Object2.AccntNum == null )
			{
				equal = false;
			}
			if ( Object1.AttchdDoc != null && Object2.AttchdDoc != null )
			{
				if (Object1.AttchdDoc != Object2.AttchdDoc)
					equal = false;
			}
			else if (Object1.AttchdDoc == null ^ Object2.AttchdDoc == null )
			{
				equal = false;
			}
			if ( Object1.UserName != null && Object2.UserName != null )
			{
				if (Object1.UserName != Object2.UserName)
					equal = false;
			}
			else if (Object1.UserName == null ^ Object2.UserName == null )
			{
				equal = false;
			}
			if ( Object1.FeeAmount != null && Object2.FeeAmount != null )
			{
				if (Object1.FeeAmount != Object2.FeeAmount)
					equal = false;
			}
			else if (Object1.FeeAmount == null ^ Object2.FeeAmount == null )
			{
				equal = false;
			}
			if ( Object1.FeeRemainAmount != null && Object2.FeeRemainAmount != null )
			{
				if (Object1.FeeRemainAmount != Object2.FeeRemainAmount)
					equal = false;
			}
			else if (Object1.FeeRemainAmount == null ^ Object2.FeeRemainAmount == null )
			{
				equal = false;
			}
			if ( Object1.CancelFlg != null && Object2.CancelFlg != null )
			{
				if (Object1.CancelFlg != Object2.CancelFlg)
					equal = false;
			}
			else if (Object1.CancelFlg == null ^ Object2.CancelFlg == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AdmAppFeesBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AdmAppFeesComparer GetComparer()
        {
            return new AdmAppFeesComparer();
        }
        */

        // Comparer delegates back to AdmAppFees
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AdmAppFees rhs, AdmAppFeesColumn which)
        {
            switch (which)
            {
            	
            	
            	case AdmAppFeesColumn.AdmAppFeesId:
            		return this.AdmAppFeesId.CompareTo(rhs.AdmAppFeesId);
            		
            		                 
            	
            	
            	case AdmAppFeesColumn.AdmCdeFeeId:
            		return this.AdmCdeFeeId.CompareTo(rhs.AdmCdeFeeId);
            		
            		                 
            	
            	
            	case AdmAppFeesColumn.AdmApplicantId:
            		return this.AdmApplicantId.CompareTo(rhs.AdmApplicantId);
            		
            		                 
            	
            	
            	case AdmAppFeesColumn.IsPayed:
            		return this.IsPayed.Value.CompareTo(rhs.IsPayed.Value);
            		
            		                 
            	
            	
            	case AdmAppFeesColumn.AdmOpenAcadSemesterId:
            		return this.AdmOpenAcadSemesterId.Value.CompareTo(rhs.AdmOpenAcadSemesterId.Value);
            		
            		                 
            	
            	
            	case AdmAppFeesColumn.ReceiptNum:
            		return this.ReceiptNum.CompareTo(rhs.ReceiptNum);
            		
            		                 
            	
            	
            	case AdmAppFeesColumn.ReceiptDate:
            		return this.ReceiptDate.Value.CompareTo(rhs.ReceiptDate.Value);
            		
            		                 
            	
            	
            	case AdmAppFeesColumn.GsCodeCurrencyId:
            		return this.GsCodeCurrencyId.CompareTo(rhs.GsCodeCurrencyId);
            		
            		                 
            	
            	
            	case AdmAppFeesColumn.GsCodePayMethodId:
            		return this.GsCodePayMethodId.Value.CompareTo(rhs.GsCodePayMethodId.Value);
            		
            		                 
            	
            	
            	case AdmAppFeesColumn.FeeCodeBankId:
            		return this.FeeCodeBankId.Value.CompareTo(rhs.FeeCodeBankId.Value);
            		
            		                 
            	
            	
            	case AdmAppFeesColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case AdmAppFeesColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case AdmAppFeesColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case AdmAppFeesColumn.CheqNum:
            		return this.CheqNum.CompareTo(rhs.CheqNum);
            		
            		                 
            	
            	
            	case AdmAppFeesColumn.AccntNum:
            		return this.AccntNum.CompareTo(rhs.AccntNum);
            		
            		                 
            	
            	
            	case AdmAppFeesColumn.AttchdDoc:
            		return this.AttchdDoc.CompareTo(rhs.AttchdDoc);
            		
            		                 
            	
            	
            	case AdmAppFeesColumn.UserName:
            		return this.UserName.CompareTo(rhs.UserName);
            		
            		                 
            	
            	
            	case AdmAppFeesColumn.FeeAmount:
            		return this.FeeAmount.Value.CompareTo(rhs.FeeAmount.Value);
            		
            		                 
            	
            	
            	case AdmAppFeesColumn.FeeRemainAmount:
            		return this.FeeRemainAmount.Value.CompareTo(rhs.FeeRemainAmount.Value);
            		
            		                 
            	
            	
            	case AdmAppFeesColumn.CancelFlg:
            		return this.CancelFlg.Value.CompareTo(rhs.CancelFlg.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AdmAppFeesKey> Members
		
		// member variable for the EntityId property
		private AdmAppFeesKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AdmAppFeesKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AdmAppFeesKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AdmAppFees")
					.Append("|").Append( this.AdmAppFeesId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{21}{20}- AdmAppFeesId: {0}{20}- AdmCdeFeeId: {1}{20}- AdmApplicantId: {2}{20}- IsPayed: {3}{20}- AdmOpenAcadSemesterId: {4}{20}- ReceiptNum: {5}{20}- ReceiptDate: {6}{20}- GsCodeCurrencyId: {7}{20}- GsCodePayMethodId: {8}{20}- FeeCodeBankId: {9}{20}- Notes: {10}{20}- SeUserId: {11}{20}- LastDate: {12}{20}- CheqNum: {13}{20}- AccntNum: {14}{20}- AttchdDoc: {15}{20}- UserName: {16}{20}- FeeAmount: {17}{20}- FeeRemainAmount: {18}{20}- CancelFlg: {19}{20}{22}", 
				this.AdmAppFeesId,
				this.AdmCdeFeeId,
				this.AdmApplicantId,
				(this.IsPayed == null) ? string.Empty : this.IsPayed.ToString(),
				(this.AdmOpenAcadSemesterId == null) ? string.Empty : this.AdmOpenAcadSemesterId.ToString(),
				(this.ReceiptNum == null) ? string.Empty : this.ReceiptNum.ToString(),
				(this.ReceiptDate == null) ? string.Empty : this.ReceiptDate.ToString(),
				this.GsCodeCurrencyId,
				(this.GsCodePayMethodId == null) ? string.Empty : this.GsCodePayMethodId.ToString(),
				(this.FeeCodeBankId == null) ? string.Empty : this.FeeCodeBankId.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.CheqNum == null) ? string.Empty : this.CheqNum.ToString(),
				(this.AccntNum == null) ? string.Empty : this.AccntNum.ToString(),
				(this.AttchdDoc == null) ? string.Empty : this.AttchdDoc.ToString(),
				(this.UserName == null) ? string.Empty : this.UserName.ToString(),
				(this.FeeAmount == null) ? string.Empty : this.FeeAmount.ToString(),
				(this.FeeRemainAmount == null) ? string.Empty : this.FeeRemainAmount.ToString(),
				(this.CancelFlg == null) ? string.Empty : this.CancelFlg.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ADM_APP_FEES' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AdmAppFeesEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ADM_APP_FEES_ID : Like FEE_STUD_FEE_ITEM XXسداد رسوم القبولXX
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ADM_APP_FEES"</remarks>
		public System.Decimal AdmAppFeesId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalAdmAppFeesId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ADM_CDE_FEE_ID : 
		/// </summary>
		public System.Decimal		  AdmCdeFeeId = 0.0m;
		
		/// <summary>
		/// ADM_APPLICANT_ID : 
		/// </summary>
		public System.Decimal		  AdmApplicantId = 0.0m;
		
		/// <summary>
		/// IS_PAYED : 
		/// </summary>
		public System.Decimal?		  IsPayed = null;
		
		/// <summary>
		/// ADM_OPEN_ACAD_SEMESTER_ID : 
		/// </summary>
		public System.Decimal?		  AdmOpenAcadSemesterId = null;
		
		/// <summary>
		/// RECEIPT_NUM : XXXXX payment in FEE_STUD_VOUCHER FEE_STUD_VOUCHER_ITEM
		/// </summary>
		public System.String		  ReceiptNum = null;
		
		/// <summary>
		/// RECEIPT_DATE : XXXX
		/// </summary>
		public System.DateTime?		  ReceiptDate = null;
		
		/// <summary>
		/// GS_CODE_CURRENCY_ID : 
		/// </summary>
		public System.Decimal		  GsCodeCurrencyId = 0.0m;
		
		/// <summary>
		/// GS_CODE_PAY_METHOD_ID : 
		/// </summary>
		public System.Decimal?		  GsCodePayMethodId = null;
		
		/// <summary>
		/// FEE_CODE_BANK_ID : 
		/// </summary>
		public System.Decimal?		  FeeCodeBankId = null;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// CHEQ_NUM : رقم الشيك فى حالة دفع بالشيك
		/// </summary>
		public System.String		  CheqNum = null;
		
		/// <summary>
		/// ACCNT_NUM : رقم حساب البنك  فى حالة ايداع
		/// </summary>
		public System.String		  AccntNum = null;
		
		/// <summary>
		/// ATTCHD_DOC : صورة الشيك او مرفق
		/// </summary>
		public System.String		  AttchdDoc = null;
		
		/// <summary>
		/// User_Name : 
		/// </summary>
		public System.String		  UserName = null;
		
		/// <summary>
		/// FEE_AMOUNT : ADM_CDE_FEE.AMOUNT FEE_STUD_VOUCHER
		/// </summary>
		public System.Decimal?		  FeeAmount = null;
		
		/// <summary>
		/// FEE_REMAIN_AMOUNT : remain on applicant
		/// </summary>
		public System.Decimal?		  FeeRemainAmount = null;
		
		/// <summary>
		/// CANCEL_FLG : 
		/// </summary>
		public System.Boolean?		  CancelFlg = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdmApplicant _admApplicantIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmApplicant"/>.
		/// </summary>
		/// <value>The source AdmApplicant for AdmApplicantId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmApplicant AdmApplicantIdSource
      	{
            get { return this._admApplicantIdSource; }
            set { this._admApplicantIdSource = value; }
      	}
		private AdmCdeFee _admCdeFeeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdeFee"/>.
		/// </summary>
		/// <value>The source AdmCdeFee for AdmCdeFeeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmCdeFee AdmCdeFeeIdSource
      	{
            get { return this._admCdeFeeIdSource; }
            set { this._admCdeFeeIdSource = value; }
      	}
		private AdmOpenAcadSemester _admOpenAcadSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmOpenAcadSemester"/>.
		/// </summary>
		/// <value>The source AdmOpenAcadSemester for AdmOpenAcadSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmOpenAcadSemester AdmOpenAcadSemesterIdSource
      	{
            get { return this._admOpenAcadSemesterIdSource; }
            set { this._admOpenAcadSemesterIdSource = value; }
      	}
		private FeeCodeBanks _feeCodeBankIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeCodeBanks"/>.
		/// </summary>
		/// <value>The source FeeCodeBanks for FeeCodeBankId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeCodeBanks FeeCodeBankIdSource
      	{
            get { return this._feeCodeBankIdSource; }
            set { this._feeCodeBankIdSource = value; }
      	}
		private GsCodeCurrency _gsCodeCurrencyIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCurrency"/>.
		/// </summary>
		/// <value>The source GsCodeCurrency for GsCodeCurrencyId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeCurrency GsCodeCurrencyIdSource
      	{
            get { return this._gsCodeCurrencyIdSource; }
            set { this._gsCodeCurrencyIdSource = value; }
      	}
		private GsCodePayMethod _gsCodePayMethodIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodePayMethod"/>.
		/// </summary>
		/// <value>The source GsCodePayMethod for GsCodePayMethodId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodePayMethod GsCodePayMethodIdSource
      	{
            get { return this._gsCodePayMethodIdSource; }
            set { this._gsCodePayMethodIdSource = value; }
      	}
		private SeUser _seUserIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeUser SeUserIdSource
      	{
            get { return this._seUserIdSource; }
            set { this._seUserIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region FeeStudVoucherItemCollection
		
		private TList<FeeStudVoucherItem> _feeStudVoucherItemAdmAppFeesId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeStudVoucherItemAdmAppFeesId
		/// </summary>
		
		public TList<FeeStudVoucherItem> FeeStudVoucherItemCollection
		{
			get
			{
				if (_feeStudVoucherItemAdmAppFeesId == null)
				{
				_feeStudVoucherItemAdmAppFeesId = new TList<FeeStudVoucherItem>();
				}
	
				return _feeStudVoucherItemAdmAppFeesId;
			}
			set { _feeStudVoucherItemAdmAppFeesId = value; }
		}
		
		#endregion

		#region FeeRefndStdDetCollection
		
		private TList<FeeRefndStdDet> _feeRefndStdDetAdmAppFeesId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeRefndStdDetAdmAppFeesId
		/// </summary>
		
		public TList<FeeRefndStdDet> FeeRefndStdDetCollection
		{
			get
			{
				if (_feeRefndStdDetAdmAppFeesId == null)
				{
				_feeRefndStdDetAdmAppFeesId = new TList<FeeRefndStdDet>();
				}
	
				return _feeRefndStdDetAdmAppFeesId;
			}
			set { _feeRefndStdDetAdmAppFeesId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AdmAppFeesEntityData _tmp = new AdmAppFeesEntityData();
						
			_tmp.AdmAppFeesId = this.AdmAppFeesId;
			_tmp.OriginalAdmAppFeesId = this.OriginalAdmAppFeesId;
			
			_tmp.AdmCdeFeeId = this.AdmCdeFeeId;
			_tmp.AdmApplicantId = this.AdmApplicantId;
			_tmp.IsPayed = this.IsPayed;
			_tmp.AdmOpenAcadSemesterId = this.AdmOpenAcadSemesterId;
			_tmp.ReceiptNum = this.ReceiptNum;
			_tmp.ReceiptDate = this.ReceiptDate;
			_tmp.GsCodeCurrencyId = this.GsCodeCurrencyId;
			_tmp.GsCodePayMethodId = this.GsCodePayMethodId;
			_tmp.FeeCodeBankId = this.FeeCodeBankId;
			_tmp.Notes = this.Notes;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.CheqNum = this.CheqNum;
			_tmp.AccntNum = this.AccntNum;
			_tmp.AttchdDoc = this.AttchdDoc;
			_tmp.UserName = this.UserName;
			_tmp.FeeAmount = this.FeeAmount;
			_tmp.FeeRemainAmount = this.FeeRemainAmount;
			_tmp.CancelFlg = this.CancelFlg;
			
			#region Source Parent Composite Entities
			if (this.AdmApplicantIdSource != null)
				_tmp.AdmApplicantIdSource = MakeCopyOf(this.AdmApplicantIdSource) as AdmApplicant;
			if (this.AdmCdeFeeIdSource != null)
				_tmp.AdmCdeFeeIdSource = MakeCopyOf(this.AdmCdeFeeIdSource) as AdmCdeFee;
			if (this.AdmOpenAcadSemesterIdSource != null)
				_tmp.AdmOpenAcadSemesterIdSource = MakeCopyOf(this.AdmOpenAcadSemesterIdSource) as AdmOpenAcadSemester;
			if (this.FeeCodeBankIdSource != null)
				_tmp.FeeCodeBankIdSource = MakeCopyOf(this.FeeCodeBankIdSource) as FeeCodeBanks;
			if (this.GsCodeCurrencyIdSource != null)
				_tmp.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource) as GsCodeCurrency;
			if (this.GsCodePayMethodIdSource != null)
				_tmp.GsCodePayMethodIdSource = MakeCopyOf(this.GsCodePayMethodIdSource) as GsCodePayMethod;
			if (this.SeUserIdSource != null)
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource) as SeUser;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._feeStudVoucherItemAdmAppFeesId != null)
				_tmp.FeeStudVoucherItemCollection = (TList<FeeStudVoucherItem>) MakeCopyOf(this.FeeStudVoucherItemCollection); 
			if (this._feeRefndStdDetAdmAppFeesId != null)
				_tmp.FeeRefndStdDetCollection = (TList<FeeRefndStdDet>) MakeCopyOf(this.FeeRefndStdDetCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AdmAppFeesEntityData _tmp = new AdmAppFeesEntityData();
						
			_tmp.AdmAppFeesId = this.AdmAppFeesId;
			_tmp.OriginalAdmAppFeesId = this.OriginalAdmAppFeesId;
			
			_tmp.AdmCdeFeeId = this.AdmCdeFeeId;
			_tmp.AdmApplicantId = this.AdmApplicantId;
			_tmp.IsPayed = this.IsPayed;
			_tmp.AdmOpenAcadSemesterId = this.AdmOpenAcadSemesterId;
			_tmp.ReceiptNum = this.ReceiptNum;
			_tmp.ReceiptDate = this.ReceiptDate;
			_tmp.GsCodeCurrencyId = this.GsCodeCurrencyId;
			_tmp.GsCodePayMethodId = this.GsCodePayMethodId;
			_tmp.FeeCodeBankId = this.FeeCodeBankId;
			_tmp.Notes = this.Notes;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.CheqNum = this.CheqNum;
			_tmp.AccntNum = this.AccntNum;
			_tmp.AttchdDoc = this.AttchdDoc;
			_tmp.UserName = this.UserName;
			_tmp.FeeAmount = this.FeeAmount;
			_tmp.FeeRemainAmount = this.FeeRemainAmount;
			_tmp.CancelFlg = this.CancelFlg;
			
			#region Source Parent Composite Entities
			if (this.AdmApplicantIdSource != null && existingCopies.Contains(this.AdmApplicantIdSource))
				_tmp.AdmApplicantIdSource = existingCopies[this.AdmApplicantIdSource] as AdmApplicant;
			else
				_tmp.AdmApplicantIdSource = MakeCopyOf(this.AdmApplicantIdSource, existingCopies) as AdmApplicant;
			if (this.AdmCdeFeeIdSource != null && existingCopies.Contains(this.AdmCdeFeeIdSource))
				_tmp.AdmCdeFeeIdSource = existingCopies[this.AdmCdeFeeIdSource] as AdmCdeFee;
			else
				_tmp.AdmCdeFeeIdSource = MakeCopyOf(this.AdmCdeFeeIdSource, existingCopies) as AdmCdeFee;
			if (this.AdmOpenAcadSemesterIdSource != null && existingCopies.Contains(this.AdmOpenAcadSemesterIdSource))
				_tmp.AdmOpenAcadSemesterIdSource = existingCopies[this.AdmOpenAcadSemesterIdSource] as AdmOpenAcadSemester;
			else
				_tmp.AdmOpenAcadSemesterIdSource = MakeCopyOf(this.AdmOpenAcadSemesterIdSource, existingCopies) as AdmOpenAcadSemester;
			if (this.FeeCodeBankIdSource != null && existingCopies.Contains(this.FeeCodeBankIdSource))
				_tmp.FeeCodeBankIdSource = existingCopies[this.FeeCodeBankIdSource] as FeeCodeBanks;
			else
				_tmp.FeeCodeBankIdSource = MakeCopyOf(this.FeeCodeBankIdSource, existingCopies) as FeeCodeBanks;
			if (this.GsCodeCurrencyIdSource != null && existingCopies.Contains(this.GsCodeCurrencyIdSource))
				_tmp.GsCodeCurrencyIdSource = existingCopies[this.GsCodeCurrencyIdSource] as GsCodeCurrency;
			else
				_tmp.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource, existingCopies) as GsCodeCurrency;
			if (this.GsCodePayMethodIdSource != null && existingCopies.Contains(this.GsCodePayMethodIdSource))
				_tmp.GsCodePayMethodIdSource = existingCopies[this.GsCodePayMethodIdSource] as GsCodePayMethod;
			else
				_tmp.GsCodePayMethodIdSource = MakeCopyOf(this.GsCodePayMethodIdSource, existingCopies) as GsCodePayMethod;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				_tmp.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.FeeStudVoucherItemCollection = (TList<FeeStudVoucherItem>) MakeCopyOf(this.FeeStudVoucherItemCollection, existingCopies); 
			_tmp.FeeRefndStdDetCollection = (TList<FeeRefndStdDet>) MakeCopyOf(this.FeeRefndStdDetCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmAppFeesColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AdmAppFeesColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmAppFeesColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AdmAppFeesColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmAppFeesColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AdmAppFeesColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AdmAppFeesEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AdmAppFeesEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmAppFeesColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AdmAppFeesColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AdmAppFeesEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AdmAppFeesEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AdmAppFeesEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AdmAppFees"/> object.
	/// </remarks>
	public class AdmAppFeesEventArgs : System.EventArgs
	{
		private AdmAppFeesColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AdmAppFeesEventArgs class.
		///</summary>
		public AdmAppFeesEventArgs(AdmAppFeesColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AdmAppFeesEventArgs class.
		///</summary>
		public AdmAppFeesEventArgs(AdmAppFeesColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AdmAppFeesColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AdmAppFeesColumn" />
		public AdmAppFeesColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AdmAppFees related events.
	///</summary>
	public delegate void AdmAppFeesEventHandler(object sender, AdmAppFeesEventArgs e);
	
	#region AdmAppFeesComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AdmAppFeesComparer : System.Collections.Generic.IComparer<AdmAppFees>
	{
		AdmAppFeesColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AdmAppFeesComparer"/> class.
        /// </summary>
		public AdmAppFeesComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AdmAppFeesComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AdmAppFeesComparer(AdmAppFeesColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AdmAppFees"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AdmAppFees"/> to compare.</param>
        /// <param name="b">The second <c>AdmAppFees</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AdmAppFees a, AdmAppFees b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AdmAppFees entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AdmAppFees a, AdmAppFees b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AdmAppFeesColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AdmAppFeesKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AdmAppFees"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AdmAppFeesKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AdmAppFeesKey class.
		/// </summary>
		public AdmAppFeesKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmAppFeesKey class.
		/// </summary>
		public AdmAppFeesKey(AdmAppFeesBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AdmAppFeesId = entity.AdmAppFeesId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmAppFeesKey class.
		/// </summary>
		public AdmAppFeesKey(System.Decimal _admAppFeesId)
		{
			#region Init Properties

			this.AdmAppFeesId = _admAppFeesId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AdmAppFeesBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AdmAppFeesBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AdmAppFeesId property
		private System.Decimal _admAppFeesId;
		
		/// <summary>
		/// Gets or sets the AdmAppFeesId property.
		/// </summary>
		public System.Decimal AdmAppFeesId
		{
			get { return _admAppFeesId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AdmAppFeesId = value;
				
				_admAppFeesId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AdmAppFeesId = ( values["AdmAppFeesId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["AdmAppFeesId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AdmAppFeesId", AdmAppFeesId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AdmAppFeesId: {0}{1}",
								AdmAppFeesId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AdmAppFeesColumn Enum
	
	/// <summary>
	/// Enumerate the AdmAppFees columns.
	/// </summary>
	[Serializable]
	public enum AdmAppFeesColumn : int
	{
		/// <summary>
		/// AdmAppFeesId : Like FEE_STUD_FEE_ITEM XXسداد رسوم القبولXX
		/// </summary>
		[EnumTextValue("ADM_APP_FEES_ID")]
		[ColumnEnum("ADM_APP_FEES_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		AdmAppFeesId = 1,
		/// <summary>
		/// AdmCdeFeeId : 
		/// </summary>
		[EnumTextValue("ADM_CDE_FEE_ID")]
		[ColumnEnum("ADM_CDE_FEE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AdmCdeFeeId = 2,
		/// <summary>
		/// AdmApplicantId : 
		/// </summary>
		[EnumTextValue("ADM_APPLICANT_ID")]
		[ColumnEnum("ADM_APPLICANT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AdmApplicantId = 3,
		/// <summary>
		/// IsPayed : 
		/// </summary>
		[EnumTextValue("IS_PAYED")]
		[ColumnEnum("IS_PAYED", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		IsPayed = 4,
		/// <summary>
		/// AdmOpenAcadSemesterId : 
		/// </summary>
		[EnumTextValue("ADM_OPEN_ACAD_SEMESTER_ID")]
		[ColumnEnum("ADM_OPEN_ACAD_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmOpenAcadSemesterId = 5,
		/// <summary>
		/// ReceiptNum : XXXXX payment in FEE_STUD_VOUCHER FEE_STUD_VOUCHER_ITEM
		/// </summary>
		[EnumTextValue("RECEIPT_NUM")]
		[ColumnEnum("RECEIPT_NUM", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		ReceiptNum = 6,
		/// <summary>
		/// ReceiptDate : XXXX
		/// </summary>
		[EnumTextValue("RECEIPT_DATE")]
		[ColumnEnum("RECEIPT_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		ReceiptDate = 7,
		/// <summary>
		/// GsCodeCurrencyId : 
		/// </summary>
		[EnumTextValue("GS_CODE_CURRENCY_ID")]
		[ColumnEnum("GS_CODE_CURRENCY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsCodeCurrencyId = 8,
		/// <summary>
		/// GsCodePayMethodId : 
		/// </summary>
		[EnumTextValue("GS_CODE_PAY_METHOD_ID")]
		[ColumnEnum("GS_CODE_PAY_METHOD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCodePayMethodId = 9,
		/// <summary>
		/// FeeCodeBankId : 
		/// </summary>
		[EnumTextValue("FEE_CODE_BANK_ID")]
		[ColumnEnum("FEE_CODE_BANK_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeeCodeBankId = 10,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		Notes = 11,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 12,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 13,
		/// <summary>
		/// CheqNum : رقم الشيك فى حالة دفع بالشيك
		/// </summary>
		[EnumTextValue("CHEQ_NUM")]
		[ColumnEnum("CHEQ_NUM", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		CheqNum = 14,
		/// <summary>
		/// AccntNum : رقم حساب البنك  فى حالة ايداع
		/// </summary>
		[EnumTextValue("ACCNT_NUM")]
		[ColumnEnum("ACCNT_NUM", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		AccntNum = 15,
		/// <summary>
		/// AttchdDoc : صورة الشيك او مرفق
		/// </summary>
		[EnumTextValue("ATTCHD_DOC")]
		[ColumnEnum("ATTCHD_DOC", typeof(System.String), System.Data.DbType.String, false, false, true)]
		AttchdDoc = 16,
		/// <summary>
		/// UserName : 
		/// </summary>
		[EnumTextValue("User_Name")]
		[ColumnEnum("User_Name", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		UserName = 17,
		/// <summary>
		/// FeeAmount : ADM_CDE_FEE.AMOUNT FEE_STUD_VOUCHER
		/// </summary>
		[EnumTextValue("FEE_AMOUNT")]
		[ColumnEnum("FEE_AMOUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeeAmount = 18,
		/// <summary>
		/// FeeRemainAmount : remain on applicant
		/// </summary>
		[EnumTextValue("FEE_REMAIN_AMOUNT")]
		[ColumnEnum("FEE_REMAIN_AMOUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeeRemainAmount = 19,
		/// <summary>
		/// CancelFlg : 
		/// </summary>
		[EnumTextValue("CANCEL_FLG")]
		[ColumnEnum("CANCEL_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		CancelFlg = 20
	}//End enum

	#endregion AdmAppFeesColumn Enum

} // end namespace
