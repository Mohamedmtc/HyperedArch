
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdStudCheat.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_STUD_CHEAT' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdStudCheatBase : EntityBase, IEdStudCheat, IEntityId<EdStudCheatKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdStudCheatEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdStudCheatEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdStudCheatEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdStudCheat> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudCheatEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudCheatEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdStudCheatBase"/> instance.
		///</summary>
		public EdStudCheatBase()
		{
			this.entityData = new EdStudCheatEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdStudCheatBase"/> instance.
		///</summary>
		///<param name="_edStudCheatId">تسجيل وقائع الغش</param>
		///<param name="_scHallId"></param>
		///<param name="_scBuildingId"></param>
		///<param name="_cheatTime"></param>
		///<param name="_cheatDtl"></param>
		///<param name="_supervisorName"></param>
		///<param name="_edExamSchdlId"></param>
		///<param name="_edStudSemesterId"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_edCdeExamTypeId">نوع الامتحان: تكميلى- اعادة</param>
		public EdStudCheatBase(System.Decimal _edStudCheatId, System.Decimal? _scHallId, 
			System.Decimal? _scBuildingId, System.DateTime? _cheatTime, System.String _cheatDtl, 
			System.String _supervisorName, System.Decimal _edExamSchdlId, System.Decimal _edStudSemesterId, 
			System.Decimal? _seUserId, System.DateTime? _lastDate, System.Decimal _edCdeExamTypeId)
		{
			this.entityData = new EdStudCheatEntityData();
			this.backupData = null;

			this.EdStudCheatId = _edStudCheatId;
			this.ScHallId = _scHallId;
			this.ScBuildingId = _scBuildingId;
			this.CheatTime = _cheatTime;
			this.CheatDtl = _cheatDtl;
			this.SupervisorName = _supervisorName;
			this.EdExamSchdlId = _edExamSchdlId;
			this.EdStudSemesterId = _edStudSemesterId;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
			this.EdCdeExamTypeId = _edCdeExamTypeId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdStudCheat"/> instance.
		///</summary>
		///<param name="_edStudCheatId">تسجيل وقائع الغش</param>
		///<param name="_scHallId"></param>
		///<param name="_scBuildingId"></param>
		///<param name="_cheatTime"></param>
		///<param name="_cheatDtl"></param>
		///<param name="_supervisorName"></param>
		///<param name="_edExamSchdlId"></param>
		///<param name="_edStudSemesterId"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_edCdeExamTypeId">نوع الامتحان: تكميلى- اعادة</param>
		public static EdStudCheat CreateEdStudCheat(System.Decimal _edStudCheatId, System.Decimal? _scHallId, 
			System.Decimal? _scBuildingId, System.DateTime? _cheatTime, System.String _cheatDtl, 
			System.String _supervisorName, System.Decimal _edExamSchdlId, System.Decimal _edStudSemesterId, 
			System.Decimal? _seUserId, System.DateTime? _lastDate, System.Decimal _edCdeExamTypeId)
		{
			EdStudCheat newEdStudCheat = new EdStudCheat();
			newEdStudCheat.EdStudCheatId = _edStudCheatId;
			newEdStudCheat.ScHallId = _scHallId;
			newEdStudCheat.ScBuildingId = _scBuildingId;
			newEdStudCheat.CheatTime = _cheatTime;
			newEdStudCheat.CheatDtl = _cheatDtl;
			newEdStudCheat.SupervisorName = _supervisorName;
			newEdStudCheat.EdExamSchdlId = _edExamSchdlId;
			newEdStudCheat.EdStudSemesterId = _edStudSemesterId;
			newEdStudCheat.SeUserId = _seUserId;
			newEdStudCheat.LastDate = _lastDate;
			newEdStudCheat.EdCdeExamTypeId = _edCdeExamTypeId;
			return newEdStudCheat;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdStudCheatId property. 
		///		تسجيل وقائع الغش
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"تسجيل وقائع الغش"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdStudCheatId
		{
			get
			{
				return this.entityData.EdStudCheatId; 
			}
			
			set
			{
				if (this.entityData.EdStudCheatId == value)
					return;
					
				OnColumnChanging(EdStudCheatColumn.EdStudCheatId, this.entityData.EdStudCheatId);
				this.entityData.EdStudCheatId = value;
				this.EntityId.EdStudCheatId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCheatColumn.EdStudCheatId, this.entityData.EdStudCheatId);
				OnPropertyChanged("EdStudCheatId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_STUD_CHEAT_ID property.
		///		تسجيل وقائع الغش
		/// </summary>
		/// <remarks>This is the original value of the ED_STUD_CHEAT_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdStudCheatId
		{
			get { return this.entityData.OriginalEdStudCheatId; }
			set { this.entityData.OriginalEdStudCheatId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the ScHallId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScHallIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScHallId
		{
			get
			{
				return this.entityData.ScHallId; 
			}
			
			set
			{
				if (this.entityData.ScHallId == value)
					return;
					
				OnColumnChanging(EdStudCheatColumn.ScHallId, this.entityData.ScHallId);
				this.entityData.ScHallId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCheatColumn.ScHallId, this.entityData.ScHallId);
				OnPropertyChanged("ScHallId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScBuildingId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScBuildingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScBuildingId
		{
			get
			{
				return this.entityData.ScBuildingId; 
			}
			
			set
			{
				if (this.entityData.ScBuildingId == value)
					return;
					
				OnColumnChanging(EdStudCheatColumn.ScBuildingId, this.entityData.ScBuildingId);
				this.entityData.ScBuildingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCheatColumn.ScBuildingId, this.entityData.ScBuildingId);
				OnPropertyChanged("ScBuildingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CheatTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCheatTimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CheatTime
		{
			get
			{
				return this.entityData.CheatTime; 
			}
			
			set
			{
				if (this.entityData.CheatTime == value)
					return;
					
				OnColumnChanging(EdStudCheatColumn.CheatTime, this.entityData.CheatTime);
				this.entityData.CheatTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCheatColumn.CheatTime, this.entityData.CheatTime);
				OnPropertyChanged("CheatTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CheatDtl property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String CheatDtl
		{
			get
			{
				return this.entityData.CheatDtl; 
			}
			
			set
			{
				if (this.entityData.CheatDtl == value)
					return;
					
				OnColumnChanging(EdStudCheatColumn.CheatDtl, this.entityData.CheatDtl);
				this.entityData.CheatDtl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCheatColumn.CheatDtl, this.entityData.CheatDtl);
				OnPropertyChanged("CheatDtl");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SupervisorName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String SupervisorName
		{
			get
			{
				return this.entityData.SupervisorName; 
			}
			
			set
			{
				if (this.entityData.SupervisorName == value)
					return;
					
				OnColumnChanging(EdStudCheatColumn.SupervisorName, this.entityData.SupervisorName);
				this.entityData.SupervisorName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCheatColumn.SupervisorName, this.entityData.SupervisorName);
				OnPropertyChanged("SupervisorName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdExamSchdlId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdExamSchdlId
		{
			get
			{
				return this.entityData.EdExamSchdlId; 
			}
			
			set
			{
				if (this.entityData.EdExamSchdlId == value)
					return;
					
				OnColumnChanging(EdStudCheatColumn.EdExamSchdlId, this.entityData.EdExamSchdlId);
				this.entityData.EdExamSchdlId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCheatColumn.EdExamSchdlId, this.entityData.EdExamSchdlId);
				OnPropertyChanged("EdExamSchdlId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudSemesterId
		{
			get
			{
				return this.entityData.EdStudSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdStudSemesterId == value)
					return;
					
				OnColumnChanging(EdStudCheatColumn.EdStudSemesterId, this.entityData.EdStudSemesterId);
				this.entityData.EdStudSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCheatColumn.EdStudSemesterId, this.entityData.EdStudSemesterId);
				OnPropertyChanged("EdStudSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(EdStudCheatColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCheatColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(EdStudCheatColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCheatColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCdeExamTypeId property. 
		///		نوع الامتحان: تكميلى- اعادة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"نوع الامتحان: تكميلى- اعادة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCdeExamTypeId
		{
			get
			{
				return this.entityData.EdCdeExamTypeId; 
			}
			
			set
			{
				if (this.entityData.EdCdeExamTypeId == value)
					return;
					
				OnColumnChanging(EdStudCheatColumn.EdCdeExamTypeId, this.entityData.EdCdeExamTypeId);
				this.entityData.EdCdeExamTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCheatColumn.EdCdeExamTypeId, this.entityData.EdCdeExamTypeId);
				OnPropertyChanged("EdCdeExamTypeId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeExamType"/>.
		/// </summary>
		/// <value>The source EdCdeExamType for EdCdeExamTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCdeExamType EdCdeExamTypeIdSource
      	{
            get { return entityData.EdCdeExamTypeIdSource; }
            set { entityData.EdCdeExamTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdExamSchdl"/>.
		/// </summary>
		/// <value>The source EdExamSchdl for EdExamSchdlId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdExamSchdl EdExamSchdlIdSource
      	{
            get { return entityData.EdExamSchdlIdSource; }
            set { entityData.EdExamSchdlIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStudSemester"/>.
		/// </summary>
		/// <value>The source EdStudSemester for EdStudSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStudSemester EdStudSemesterIdSource
      	{
            get { return entityData.EdStudSemesterIdSource; }
            set { entityData.EdStudSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScBuilding"/>.
		/// </summary>
		/// <value>The source ScBuilding for ScBuildingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScBuilding ScBuildingIdSource
      	{
            get { return entityData.ScBuildingIdSource; }
            set { entityData.ScBuildingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScHall"/>.
		/// </summary>
		/// <value>The source ScHall for ScHallId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScHall ScHallIdSource
      	{
            get { return entityData.ScHallIdSource; }
            set { entityData.ScHallIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EdStudViol objects
		///	which are related to this object through the relation FK_ED_STUD_VIOL_ED_STUD_CHEAT
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudViol> EdStudViolCollection
		{
			get { return entityData.EdStudViolCollection; }
			set { entityData.EdStudViolCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of GsAttchdDoc objects
		///	which are related to this object through the relation FK_GS_ATTCHD_DOC_ED_STUD_CHEAT
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GsAttchdDoc> GsAttchdDocCollection
		{
			get { return entityData.GsAttchdDocCollection; }
			set { entityData.GsAttchdDocCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudCheatExec objects
		///	which are related to this object through the relation FK_ED_STUD_CHEAT_EXEC_ED_STUD_CHEAT
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCheatExec> EdStudCheatExecCollection
		{
			get { return entityData.EdStudCheatExecCollection; }
			set { entityData.EdStudCheatExecCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CheatDtl", "Cheat Dtl", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SupervisorName", "Supervisor Name", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_STUD_CHEAT"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_STUD_CHEAT_ID", "SC_HALL_ID", "SC_BUILDING_ID", "CHEAT_TIME", "CHEAT_DTL", "SUPERVISOR_NAME", "ED_EXAM_SCHDL_ID", "ED_STUD_SEMESTER_ID", "SE_USER_ID", "LAST_DATE", "ED_CDE_EXAM_TYPE_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdStudCheatEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdStudCheat) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdStudCheat>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdStudCheat);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdStudCheat Entity 
		///</summary>
		protected virtual EdStudCheat Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdStudCheat copy = new EdStudCheat();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdStudCheatId = this.EdStudCheatId;
					copy.OriginalEdStudCheatId = this.OriginalEdStudCheatId;
				copy.ScHallId = this.ScHallId;
				copy.ScBuildingId = this.ScBuildingId;
				copy.CheatTime = this.CheatTime;
				copy.CheatDtl = this.CheatDtl;
				copy.SupervisorName = this.SupervisorName;
				copy.EdExamSchdlId = this.EdExamSchdlId;
				copy.EdStudSemesterId = this.EdStudSemesterId;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
				copy.EdCdeExamTypeId = this.EdCdeExamTypeId;
			
			if (this.EdCdeExamTypeIdSource != null && existingCopies.Contains(this.EdCdeExamTypeIdSource))
				copy.EdCdeExamTypeIdSource = existingCopies[this.EdCdeExamTypeIdSource] as EdCdeExamType;
			else
				copy.EdCdeExamTypeIdSource = MakeCopyOf(this.EdCdeExamTypeIdSource, existingCopies) as EdCdeExamType;
			if (this.EdExamSchdlIdSource != null && existingCopies.Contains(this.EdExamSchdlIdSource))
				copy.EdExamSchdlIdSource = existingCopies[this.EdExamSchdlIdSource] as EdExamSchdl;
			else
				copy.EdExamSchdlIdSource = MakeCopyOf(this.EdExamSchdlIdSource, existingCopies) as EdExamSchdl;
			if (this.EdStudSemesterIdSource != null && existingCopies.Contains(this.EdStudSemesterIdSource))
				copy.EdStudSemesterIdSource = existingCopies[this.EdStudSemesterIdSource] as EdStudSemester;
			else
				copy.EdStudSemesterIdSource = MakeCopyOf(this.EdStudSemesterIdSource, existingCopies) as EdStudSemester;
			if (this.ScBuildingIdSource != null && existingCopies.Contains(this.ScBuildingIdSource))
				copy.ScBuildingIdSource = existingCopies[this.ScBuildingIdSource] as ScBuilding;
			else
				copy.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource, existingCopies) as ScBuilding;
			if (this.ScHallIdSource != null && existingCopies.Contains(this.ScHallIdSource))
				copy.ScHallIdSource = existingCopies[this.ScHallIdSource] as ScHall;
			else
				copy.ScHallIdSource = MakeCopyOf(this.ScHallIdSource, existingCopies) as ScHall;
		
			//deep copy nested objects
			copy.EdStudViolCollection = (TList<EdStudViol>) MakeCopyOf(this.EdStudViolCollection, existingCopies); 
			copy.GsAttchdDocCollection = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollection, existingCopies); 
			copy.EdStudCheatExecCollection = (TList<EdStudCheatExec>) MakeCopyOf(this.EdStudCheatExecCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdStudCheat Entity 
		///</summary>
		public virtual EdStudCheat Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdStudCheat Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdStudCheat DeepCopy()
		{
			return EntityHelper.Clone<EdStudCheat>(this as EdStudCheat);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdStudCheatEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdStudCheatEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdStudCheatEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdStudCheatColumn column)
		{
			switch(column)
			{
					case EdStudCheatColumn.EdStudCheatId:
					return entityData.EdStudCheatId != _originalData.EdStudCheatId;
					case EdStudCheatColumn.ScHallId:
					return entityData.ScHallId != _originalData.ScHallId;
					case EdStudCheatColumn.ScBuildingId:
					return entityData.ScBuildingId != _originalData.ScBuildingId;
					case EdStudCheatColumn.CheatTime:
					return entityData.CheatTime != _originalData.CheatTime;
					case EdStudCheatColumn.CheatDtl:
					return entityData.CheatDtl != _originalData.CheatDtl;
					case EdStudCheatColumn.SupervisorName:
					return entityData.SupervisorName != _originalData.SupervisorName;
					case EdStudCheatColumn.EdExamSchdlId:
					return entityData.EdExamSchdlId != _originalData.EdExamSchdlId;
					case EdStudCheatColumn.EdStudSemesterId:
					return entityData.EdStudSemesterId != _originalData.EdStudSemesterId;
					case EdStudCheatColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case EdStudCheatColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case EdStudCheatColumn.EdCdeExamTypeId:
					return entityData.EdCdeExamTypeId != _originalData.EdCdeExamTypeId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdStudCheatColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdStudCheatId != _originalData.EdStudCheatId;
			result = result || entityData.ScHallId != _originalData.ScHallId;
			result = result || entityData.ScBuildingId != _originalData.ScBuildingId;
			result = result || entityData.CheatTime != _originalData.CheatTime;
			result = result || entityData.CheatDtl != _originalData.CheatDtl;
			result = result || entityData.SupervisorName != _originalData.SupervisorName;
			result = result || entityData.EdExamSchdlId != _originalData.EdExamSchdlId;
			result = result || entityData.EdStudSemesterId != _originalData.EdStudSemesterId;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.EdCdeExamTypeId != _originalData.EdCdeExamTypeId;
			return result;
		}	
		
		///<summary>
		///  Returns a EdStudCheat Entity with the original data.
		///</summary>
		public EdStudCheat GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdStudCheat(
				_originalData.EdStudCheatId,
				_originalData.ScHallId,
				_originalData.ScBuildingId,
				_originalData.CheatTime,
				_originalData.CheatDtl,
				_originalData.SupervisorName,
				_originalData.EdExamSchdlId,
				_originalData.EdStudSemesterId,
				_originalData.SeUserId,
				_originalData.LastDate,
				_originalData.EdCdeExamTypeId
				);
				
			return (EdStudCheat)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdStudCheatBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdStudCheatBase)
				return ValueEquals(this, (EdStudCheatBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdStudCheatBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdStudCheatId.GetHashCode() ^ 
					((this.ScHallId == null) ? string.Empty : this.ScHallId.ToString()).GetHashCode() ^ 
					((this.ScBuildingId == null) ? string.Empty : this.ScBuildingId.ToString()).GetHashCode() ^ 
					((this.CheatTime == null) ? string.Empty : this.CheatTime.ToString()).GetHashCode() ^ 
					((this.CheatDtl == null) ? string.Empty : this.CheatDtl.ToString()).GetHashCode() ^ 
					((this.SupervisorName == null) ? string.Empty : this.SupervisorName.ToString()).GetHashCode() ^ 
					this.EdExamSchdlId.GetHashCode() ^ 
					this.EdStudSemesterId.GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					this.EdCdeExamTypeId.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdStudCheatBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdStudCheatBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdStudCheatBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdStudCheatBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdStudCheatBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdStudCheatBase Object1, EdStudCheatBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdStudCheatId != Object2.EdStudCheatId)
				equal = false;
			if ( Object1.ScHallId != null && Object2.ScHallId != null )
			{
				if (Object1.ScHallId != Object2.ScHallId)
					equal = false;
			}
			else if (Object1.ScHallId == null ^ Object2.ScHallId == null )
			{
				equal = false;
			}
			if ( Object1.ScBuildingId != null && Object2.ScBuildingId != null )
			{
				if (Object1.ScBuildingId != Object2.ScBuildingId)
					equal = false;
			}
			else if (Object1.ScBuildingId == null ^ Object2.ScBuildingId == null )
			{
				equal = false;
			}
			if ( Object1.CheatTime != null && Object2.CheatTime != null )
			{
				if (Object1.CheatTime != Object2.CheatTime)
					equal = false;
			}
			else if (Object1.CheatTime == null ^ Object2.CheatTime == null )
			{
				equal = false;
			}
			if ( Object1.CheatDtl != null && Object2.CheatDtl != null )
			{
				if (Object1.CheatDtl != Object2.CheatDtl)
					equal = false;
			}
			else if (Object1.CheatDtl == null ^ Object2.CheatDtl == null )
			{
				equal = false;
			}
			if ( Object1.SupervisorName != null && Object2.SupervisorName != null )
			{
				if (Object1.SupervisorName != Object2.SupervisorName)
					equal = false;
			}
			else if (Object1.SupervisorName == null ^ Object2.SupervisorName == null )
			{
				equal = false;
			}
			if (Object1.EdExamSchdlId != Object2.EdExamSchdlId)
				equal = false;
			if (Object1.EdStudSemesterId != Object2.EdStudSemesterId)
				equal = false;
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if (Object1.EdCdeExamTypeId != Object2.EdCdeExamTypeId)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdStudCheatBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdStudCheatComparer GetComparer()
        {
            return new EdStudCheatComparer();
        }
        */

        // Comparer delegates back to EdStudCheat
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdStudCheat rhs, EdStudCheatColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdStudCheatColumn.EdStudCheatId:
            		return this.EdStudCheatId.CompareTo(rhs.EdStudCheatId);
            		
            		                 
            	
            	
            	case EdStudCheatColumn.ScHallId:
            		return this.ScHallId.Value.CompareTo(rhs.ScHallId.Value);
            		
            		                 
            	
            	
            	case EdStudCheatColumn.ScBuildingId:
            		return this.ScBuildingId.Value.CompareTo(rhs.ScBuildingId.Value);
            		
            		                 
            	
            	
            	case EdStudCheatColumn.CheatTime:
            		return this.CheatTime.Value.CompareTo(rhs.CheatTime.Value);
            		
            		                 
            	
            	
            	case EdStudCheatColumn.CheatDtl:
            		return this.CheatDtl.CompareTo(rhs.CheatDtl);
            		
            		                 
            	
            	
            	case EdStudCheatColumn.SupervisorName:
            		return this.SupervisorName.CompareTo(rhs.SupervisorName);
            		
            		                 
            	
            	
            	case EdStudCheatColumn.EdExamSchdlId:
            		return this.EdExamSchdlId.CompareTo(rhs.EdExamSchdlId);
            		
            		                 
            	
            	
            	case EdStudCheatColumn.EdStudSemesterId:
            		return this.EdStudSemesterId.CompareTo(rhs.EdStudSemesterId);
            		
            		                 
            	
            	
            	case EdStudCheatColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case EdStudCheatColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case EdStudCheatColumn.EdCdeExamTypeId:
            		return this.EdCdeExamTypeId.CompareTo(rhs.EdCdeExamTypeId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdStudCheatKey> Members
		
		// member variable for the EntityId property
		private EdStudCheatKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdStudCheatKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdStudCheatKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdStudCheat")
					.Append("|").Append( this.EdStudCheatId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- EdStudCheatId: {0}{11}- ScHallId: {1}{11}- ScBuildingId: {2}{11}- CheatTime: {3}{11}- CheatDtl: {4}{11}- SupervisorName: {5}{11}- EdExamSchdlId: {6}{11}- EdStudSemesterId: {7}{11}- SeUserId: {8}{11}- LastDate: {9}{11}- EdCdeExamTypeId: {10}{11}{13}", 
				this.EdStudCheatId,
				(this.ScHallId == null) ? string.Empty : this.ScHallId.ToString(),
				(this.ScBuildingId == null) ? string.Empty : this.ScBuildingId.ToString(),
				(this.CheatTime == null) ? string.Empty : this.CheatTime.ToString(),
				(this.CheatDtl == null) ? string.Empty : this.CheatDtl.ToString(),
				(this.SupervisorName == null) ? string.Empty : this.SupervisorName.ToString(),
				this.EdExamSchdlId,
				this.EdStudSemesterId,
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				this.EdCdeExamTypeId,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_STUD_CHEAT' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdStudCheatEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_STUD_CHEAT_ID : تسجيل وقائع الغش
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_STUD_CHEAT"</remarks>
		public System.Decimal EdStudCheatId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdStudCheatId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SC_HALL_ID : 
		/// </summary>
		public System.Decimal?		  ScHallId = null;
		
		/// <summary>
		/// SC_BUILDING_ID : 
		/// </summary>
		public System.Decimal?		  ScBuildingId = null;
		
		/// <summary>
		/// CHEAT_TIME : 
		/// </summary>
		public System.DateTime?		  CheatTime = null;
		
		/// <summary>
		/// CHEAT_DTL : 
		/// </summary>
		public System.String		  CheatDtl = null;
		
		/// <summary>
		/// SUPERVISOR_NAME : 
		/// </summary>
		public System.String		  SupervisorName = null;
		
		/// <summary>
		/// ED_EXAM_SCHDL_ID : 
		/// </summary>
		public System.Decimal		  EdExamSchdlId = 0.0m;
		
		/// <summary>
		/// ED_STUD_SEMESTER_ID : 
		/// </summary>
		public System.Decimal		  EdStudSemesterId = 0.0m;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// ED_CDE_EXAM_TYPE_ID : نوع الامتحان: تكميلى- اعادة
		/// </summary>
		public System.Decimal		  EdCdeExamTypeId = 0.0m;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdCdeExamType _edCdeExamTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeExamType"/>.
		/// </summary>
		/// <value>The source EdCdeExamType for EdCdeExamTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCdeExamType EdCdeExamTypeIdSource
      	{
            get { return this._edCdeExamTypeIdSource; }
            set { this._edCdeExamTypeIdSource = value; }
      	}
		private EdExamSchdl _edExamSchdlIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdExamSchdl"/>.
		/// </summary>
		/// <value>The source EdExamSchdl for EdExamSchdlId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdExamSchdl EdExamSchdlIdSource
      	{
            get { return this._edExamSchdlIdSource; }
            set { this._edExamSchdlIdSource = value; }
      	}
		private EdStudSemester _edStudSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStudSemester"/>.
		/// </summary>
		/// <value>The source EdStudSemester for EdStudSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStudSemester EdStudSemesterIdSource
      	{
            get { return this._edStudSemesterIdSource; }
            set { this._edStudSemesterIdSource = value; }
      	}
		private ScBuilding _scBuildingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScBuilding"/>.
		/// </summary>
		/// <value>The source ScBuilding for ScBuildingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScBuilding ScBuildingIdSource
      	{
            get { return this._scBuildingIdSource; }
            set { this._scBuildingIdSource = value; }
      	}
		private ScHall _scHallIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScHall"/>.
		/// </summary>
		/// <value>The source ScHall for ScHallId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScHall ScHallIdSource
      	{
            get { return this._scHallIdSource; }
            set { this._scHallIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EdStudViolCollection
		
		private TList<EdStudViol> _edStudViolEdStudCheatId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudViolEdStudCheatId
		/// </summary>
		
		public TList<EdStudViol> EdStudViolCollection
		{
			get
			{
				if (_edStudViolEdStudCheatId == null)
				{
				_edStudViolEdStudCheatId = new TList<EdStudViol>();
				}
	
				return _edStudViolEdStudCheatId;
			}
			set { _edStudViolEdStudCheatId = value; }
		}
		
		#endregion

		#region GsAttchdDocCollection
		
		private TList<GsAttchdDoc> _gsAttchdDocEdStudCheatId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _gsAttchdDocEdStudCheatId
		/// </summary>
		
		public TList<GsAttchdDoc> GsAttchdDocCollection
		{
			get
			{
				if (_gsAttchdDocEdStudCheatId == null)
				{
				_gsAttchdDocEdStudCheatId = new TList<GsAttchdDoc>();
				}
	
				return _gsAttchdDocEdStudCheatId;
			}
			set { _gsAttchdDocEdStudCheatId = value; }
		}
		
		#endregion

		#region EdStudCheatExecCollection
		
		private TList<EdStudCheatExec> _edStudCheatExecEdStudCheatId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCheatExecEdStudCheatId
		/// </summary>
		
		public TList<EdStudCheatExec> EdStudCheatExecCollection
		{
			get
			{
				if (_edStudCheatExecEdStudCheatId == null)
				{
				_edStudCheatExecEdStudCheatId = new TList<EdStudCheatExec>();
				}
	
				return _edStudCheatExecEdStudCheatId;
			}
			set { _edStudCheatExecEdStudCheatId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdStudCheatEntityData _tmp = new EdStudCheatEntityData();
						
			_tmp.EdStudCheatId = this.EdStudCheatId;
			_tmp.OriginalEdStudCheatId = this.OriginalEdStudCheatId;
			
			_tmp.ScHallId = this.ScHallId;
			_tmp.ScBuildingId = this.ScBuildingId;
			_tmp.CheatTime = this.CheatTime;
			_tmp.CheatDtl = this.CheatDtl;
			_tmp.SupervisorName = this.SupervisorName;
			_tmp.EdExamSchdlId = this.EdExamSchdlId;
			_tmp.EdStudSemesterId = this.EdStudSemesterId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.EdCdeExamTypeId = this.EdCdeExamTypeId;
			
			#region Source Parent Composite Entities
			if (this.EdCdeExamTypeIdSource != null)
				_tmp.EdCdeExamTypeIdSource = MakeCopyOf(this.EdCdeExamTypeIdSource) as EdCdeExamType;
			if (this.EdExamSchdlIdSource != null)
				_tmp.EdExamSchdlIdSource = MakeCopyOf(this.EdExamSchdlIdSource) as EdExamSchdl;
			if (this.EdStudSemesterIdSource != null)
				_tmp.EdStudSemesterIdSource = MakeCopyOf(this.EdStudSemesterIdSource) as EdStudSemester;
			if (this.ScBuildingIdSource != null)
				_tmp.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource) as ScBuilding;
			if (this.ScHallIdSource != null)
				_tmp.ScHallIdSource = MakeCopyOf(this.ScHallIdSource) as ScHall;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._edStudViolEdStudCheatId != null)
				_tmp.EdStudViolCollection = (TList<EdStudViol>) MakeCopyOf(this.EdStudViolCollection); 
			if (this._gsAttchdDocEdStudCheatId != null)
				_tmp.GsAttchdDocCollection = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollection); 
			if (this._edStudCheatExecEdStudCheatId != null)
				_tmp.EdStudCheatExecCollection = (TList<EdStudCheatExec>) MakeCopyOf(this.EdStudCheatExecCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdStudCheatEntityData _tmp = new EdStudCheatEntityData();
						
			_tmp.EdStudCheatId = this.EdStudCheatId;
			_tmp.OriginalEdStudCheatId = this.OriginalEdStudCheatId;
			
			_tmp.ScHallId = this.ScHallId;
			_tmp.ScBuildingId = this.ScBuildingId;
			_tmp.CheatTime = this.CheatTime;
			_tmp.CheatDtl = this.CheatDtl;
			_tmp.SupervisorName = this.SupervisorName;
			_tmp.EdExamSchdlId = this.EdExamSchdlId;
			_tmp.EdStudSemesterId = this.EdStudSemesterId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.EdCdeExamTypeId = this.EdCdeExamTypeId;
			
			#region Source Parent Composite Entities
			if (this.EdCdeExamTypeIdSource != null && existingCopies.Contains(this.EdCdeExamTypeIdSource))
				_tmp.EdCdeExamTypeIdSource = existingCopies[this.EdCdeExamTypeIdSource] as EdCdeExamType;
			else
				_tmp.EdCdeExamTypeIdSource = MakeCopyOf(this.EdCdeExamTypeIdSource, existingCopies) as EdCdeExamType;
			if (this.EdExamSchdlIdSource != null && existingCopies.Contains(this.EdExamSchdlIdSource))
				_tmp.EdExamSchdlIdSource = existingCopies[this.EdExamSchdlIdSource] as EdExamSchdl;
			else
				_tmp.EdExamSchdlIdSource = MakeCopyOf(this.EdExamSchdlIdSource, existingCopies) as EdExamSchdl;
			if (this.EdStudSemesterIdSource != null && existingCopies.Contains(this.EdStudSemesterIdSource))
				_tmp.EdStudSemesterIdSource = existingCopies[this.EdStudSemesterIdSource] as EdStudSemester;
			else
				_tmp.EdStudSemesterIdSource = MakeCopyOf(this.EdStudSemesterIdSource, existingCopies) as EdStudSemester;
			if (this.ScBuildingIdSource != null && existingCopies.Contains(this.ScBuildingIdSource))
				_tmp.ScBuildingIdSource = existingCopies[this.ScBuildingIdSource] as ScBuilding;
			else
				_tmp.ScBuildingIdSource = MakeCopyOf(this.ScBuildingIdSource, existingCopies) as ScBuilding;
			if (this.ScHallIdSource != null && existingCopies.Contains(this.ScHallIdSource))
				_tmp.ScHallIdSource = existingCopies[this.ScHallIdSource] as ScHall;
			else
				_tmp.ScHallIdSource = MakeCopyOf(this.ScHallIdSource, existingCopies) as ScHall;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EdStudViolCollection = (TList<EdStudViol>) MakeCopyOf(this.EdStudViolCollection, existingCopies); 
			_tmp.GsAttchdDocCollection = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollection, existingCopies); 
			_tmp.EdStudCheatExecCollection = (TList<EdStudCheatExec>) MakeCopyOf(this.EdStudCheatExecCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudCheatColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdStudCheatColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudCheatColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdStudCheatColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudCheatColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdStudCheatColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdStudCheatEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdStudCheatEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudCheatColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdStudCheatColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdStudCheatEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdStudCheatEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdStudCheatEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdStudCheat"/> object.
	/// </remarks>
	public class EdStudCheatEventArgs : System.EventArgs
	{
		private EdStudCheatColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdStudCheatEventArgs class.
		///</summary>
		public EdStudCheatEventArgs(EdStudCheatColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdStudCheatEventArgs class.
		///</summary>
		public EdStudCheatEventArgs(EdStudCheatColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdStudCheatColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdStudCheatColumn" />
		public EdStudCheatColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdStudCheat related events.
	///</summary>
	public delegate void EdStudCheatEventHandler(object sender, EdStudCheatEventArgs e);
	
	#region EdStudCheatComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdStudCheatComparer : System.Collections.Generic.IComparer<EdStudCheat>
	{
		EdStudCheatColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudCheatComparer"/> class.
        /// </summary>
		public EdStudCheatComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudCheatComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdStudCheatComparer(EdStudCheatColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdStudCheat"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdStudCheat"/> to compare.</param>
        /// <param name="b">The second <c>EdStudCheat</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdStudCheat a, EdStudCheat b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdStudCheat entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdStudCheat a, EdStudCheat b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdStudCheatColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdStudCheatKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdStudCheat"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdStudCheatKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdStudCheatKey class.
		/// </summary>
		public EdStudCheatKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudCheatKey class.
		/// </summary>
		public EdStudCheatKey(EdStudCheatBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdStudCheatId = entity.EdStudCheatId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudCheatKey class.
		/// </summary>
		public EdStudCheatKey(System.Decimal _edStudCheatId)
		{
			#region Init Properties

			this.EdStudCheatId = _edStudCheatId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdStudCheatBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdStudCheatBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdStudCheatId property
		private System.Decimal _edStudCheatId;
		
		/// <summary>
		/// Gets or sets the EdStudCheatId property.
		/// </summary>
		public System.Decimal EdStudCheatId
		{
			get { return _edStudCheatId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdStudCheatId = value;
				
				_edStudCheatId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdStudCheatId = ( values["EdStudCheatId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdStudCheatId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdStudCheatId", EdStudCheatId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdStudCheatId: {0}{1}",
								EdStudCheatId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdStudCheatColumn Enum
	
	/// <summary>
	/// Enumerate the EdStudCheat columns.
	/// </summary>
	[Serializable]
	public enum EdStudCheatColumn : int
	{
		/// <summary>
		/// EdStudCheatId : تسجيل وقائع الغش
		/// </summary>
		[EnumTextValue("ED_STUD_CHEAT_ID")]
		[ColumnEnum("ED_STUD_CHEAT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdStudCheatId = 1,
		/// <summary>
		/// ScHallId : 
		/// </summary>
		[EnumTextValue("SC_HALL_ID")]
		[ColumnEnum("SC_HALL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScHallId = 2,
		/// <summary>
		/// ScBuildingId : 
		/// </summary>
		[EnumTextValue("SC_BUILDING_ID")]
		[ColumnEnum("SC_BUILDING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScBuildingId = 3,
		/// <summary>
		/// CheatTime : 
		/// </summary>
		[EnumTextValue("CHEAT_TIME")]
		[ColumnEnum("CHEAT_TIME", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CheatTime = 4,
		/// <summary>
		/// CheatDtl : 
		/// </summary>
		[EnumTextValue("CHEAT_DTL")]
		[ColumnEnum("CHEAT_DTL", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		CheatDtl = 5,
		/// <summary>
		/// SupervisorName : 
		/// </summary>
		[EnumTextValue("SUPERVISOR_NAME")]
		[ColumnEnum("SUPERVISOR_NAME", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		SupervisorName = 6,
		/// <summary>
		/// EdExamSchdlId : 
		/// </summary>
		[EnumTextValue("ED_EXAM_SCHDL_ID")]
		[ColumnEnum("ED_EXAM_SCHDL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdExamSchdlId = 7,
		/// <summary>
		/// EdStudSemesterId : 
		/// </summary>
		[EnumTextValue("ED_STUD_SEMESTER_ID")]
		[ColumnEnum("ED_STUD_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudSemesterId = 8,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 9,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 10,
		/// <summary>
		/// EdCdeExamTypeId : نوع الامتحان: تكميلى- اعادة
		/// </summary>
		[EnumTextValue("ED_CDE_EXAM_TYPE_ID")]
		[ColumnEnum("ED_CDE_EXAM_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCdeExamTypeId = 11
	}//End enum

	#endregion EdStudCheatColumn Enum

} // end namespace
