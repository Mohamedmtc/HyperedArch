
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file FeeRefndStdDet.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'FEE_REFND_STD_DET' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class FeeRefndStdDetBase : EntityBase, IFeeRefndStdDet, IEntityId<FeeRefndStdDetKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private FeeRefndStdDetEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private FeeRefndStdDetEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private FeeRefndStdDetEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<FeeRefndStdDet> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeRefndStdDetEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeRefndStdDetEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="FeeRefndStdDetBase"/> instance.
		///</summary>
		public FeeRefndStdDetBase()
		{
			this.entityData = new FeeRefndStdDetEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="FeeRefndStdDetBase"/> instance.
		///</summary>
		///<param name="_feeRefndStdDtlId"></param>
		///<param name="_feeRefndStdReqId"></param>
		///<param name="_feeRefundCodeId"></param>
		///<param name="_rfndValue"></param>
		///<param name="_feeStudFeeItemId"></param>
		///<param name="_admAppFeesId"></param>
		///<param name="_notes"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public FeeRefndStdDetBase(System.Decimal _feeRefndStdDtlId, System.Decimal _feeRefndStdReqId, 
			System.Decimal? _feeRefundCodeId, System.Decimal _rfndValue, System.Decimal? _feeStudFeeItemId, 
			System.Decimal? _admAppFeesId, System.String _notes, System.Decimal? _seUserId, 
			System.DateTime? _lastDate)
		{
			this.entityData = new FeeRefndStdDetEntityData();
			this.backupData = null;

			this.FeeRefndStdDtlId = _feeRefndStdDtlId;
			this.FeeRefndStdReqId = _feeRefndStdReqId;
			this.FeeRefundCodeId = _feeRefundCodeId;
			this.RfndValue = _rfndValue;
			this.FeeStudFeeItemId = _feeStudFeeItemId;
			this.AdmAppFeesId = _admAppFeesId;
			this.Notes = _notes;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="FeeRefndStdDet"/> instance.
		///</summary>
		///<param name="_feeRefndStdDtlId"></param>
		///<param name="_feeRefndStdReqId"></param>
		///<param name="_feeRefundCodeId"></param>
		///<param name="_rfndValue"></param>
		///<param name="_feeStudFeeItemId"></param>
		///<param name="_admAppFeesId"></param>
		///<param name="_notes"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static FeeRefndStdDet CreateFeeRefndStdDet(System.Decimal _feeRefndStdDtlId, System.Decimal _feeRefndStdReqId, 
			System.Decimal? _feeRefundCodeId, System.Decimal _rfndValue, System.Decimal? _feeStudFeeItemId, 
			System.Decimal? _admAppFeesId, System.String _notes, System.Decimal? _seUserId, 
			System.DateTime? _lastDate)
		{
			FeeRefndStdDet newFeeRefndStdDet = new FeeRefndStdDet();
			newFeeRefndStdDet.FeeRefndStdDtlId = _feeRefndStdDtlId;
			newFeeRefndStdDet.FeeRefndStdReqId = _feeRefndStdReqId;
			newFeeRefndStdDet.FeeRefundCodeId = _feeRefundCodeId;
			newFeeRefndStdDet.RfndValue = _rfndValue;
			newFeeRefndStdDet.FeeStudFeeItemId = _feeStudFeeItemId;
			newFeeRefndStdDet.AdmAppFeesId = _admAppFeesId;
			newFeeRefndStdDet.Notes = _notes;
			newFeeRefndStdDet.SeUserId = _seUserId;
			newFeeRefndStdDet.LastDate = _lastDate;
			return newFeeRefndStdDet;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the FeeRefndStdDtlId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal FeeRefndStdDtlId
		{
			get
			{
				return this.entityData.FeeRefndStdDtlId; 
			}
			
			set
			{
				if (this.entityData.FeeRefndStdDtlId == value)
					return;
					
				OnColumnChanging(FeeRefndStdDetColumn.FeeRefndStdDtlId, this.entityData.FeeRefndStdDtlId);
				this.entityData.FeeRefndStdDtlId = value;
				this.EntityId.FeeRefndStdDtlId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdDetColumn.FeeRefndStdDtlId, this.entityData.FeeRefndStdDtlId);
				OnPropertyChanged("FeeRefndStdDtlId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the FEE_REFND_STD_DTL_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the FEE_REFND_STD_DTL_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalFeeRefndStdDtlId
		{
			get { return this.entityData.OriginalFeeRefndStdDtlId; }
			set { this.entityData.OriginalFeeRefndStdDtlId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the FeeRefndStdReqId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal FeeRefndStdReqId
		{
			get
			{
				return this.entityData.FeeRefndStdReqId; 
			}
			
			set
			{
				if (this.entityData.FeeRefndStdReqId == value)
					return;
					
				OnColumnChanging(FeeRefndStdDetColumn.FeeRefndStdReqId, this.entityData.FeeRefndStdReqId);
				this.entityData.FeeRefndStdReqId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdDetColumn.FeeRefndStdReqId, this.entityData.FeeRefndStdReqId);
				OnPropertyChanged("FeeRefndStdReqId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeRefundCodeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeRefundCodeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeeRefundCodeId
		{
			get
			{
				return this.entityData.FeeRefundCodeId; 
			}
			
			set
			{
				if (this.entityData.FeeRefundCodeId == value)
					return;
					
				OnColumnChanging(FeeRefndStdDetColumn.FeeRefundCodeId, this.entityData.FeeRefundCodeId);
				this.entityData.FeeRefundCodeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdDetColumn.FeeRefundCodeId, this.entityData.FeeRefundCodeId);
				OnPropertyChanged("FeeRefundCodeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RfndValue property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal RfndValue
		{
			get
			{
				return this.entityData.RfndValue; 
			}
			
			set
			{
				if (this.entityData.RfndValue == value)
					return;
					
				OnColumnChanging(FeeRefndStdDetColumn.RfndValue, this.entityData.RfndValue);
				this.entityData.RfndValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdDetColumn.RfndValue, this.entityData.RfndValue);
				OnPropertyChanged("RfndValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeStudFeeItemId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeStudFeeItemIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeeStudFeeItemId
		{
			get
			{
				return this.entityData.FeeStudFeeItemId; 
			}
			
			set
			{
				if (this.entityData.FeeStudFeeItemId == value)
					return;
					
				OnColumnChanging(FeeRefndStdDetColumn.FeeStudFeeItemId, this.entityData.FeeStudFeeItemId);
				this.entityData.FeeStudFeeItemId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdDetColumn.FeeStudFeeItemId, this.entityData.FeeStudFeeItemId);
				OnPropertyChanged("FeeStudFeeItemId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmAppFeesId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmAppFeesIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmAppFeesId
		{
			get
			{
				return this.entityData.AdmAppFeesId; 
			}
			
			set
			{
				if (this.entityData.AdmAppFeesId == value)
					return;
					
				OnColumnChanging(FeeRefndStdDetColumn.AdmAppFeesId, this.entityData.AdmAppFeesId);
				this.entityData.AdmAppFeesId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdDetColumn.AdmAppFeesId, this.entityData.AdmAppFeesId);
				OnPropertyChanged("AdmAppFeesId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(FeeRefndStdDetColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdDetColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(FeeRefndStdDetColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdDetColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(FeeRefndStdDetColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeRefndStdDetColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdmAppFees"/>.
		/// </summary>
		/// <value>The source AdmAppFees for AdmAppFeesId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmAppFees AdmAppFeesIdSource
      	{
            get { return entityData.AdmAppFeesIdSource; }
            set { entityData.AdmAppFeesIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeStudFeeItem"/>.
		/// </summary>
		/// <value>The source FeeStudFeeItem for FeeStudFeeItemId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeStudFeeItem FeeStudFeeItemIdSource
      	{
            get { return entityData.FeeStudFeeItemIdSource; }
            set { entityData.FeeStudFeeItemIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeRefundCode"/>.
		/// </summary>
		/// <value>The source FeeRefundCode for FeeRefundCodeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeRefundCode FeeRefundCodeIdSource
      	{
            get { return entityData.FeeRefundCodeIdSource; }
            set { entityData.FeeRefundCodeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeRefndStdReq"/>.
		/// </summary>
		/// <value>The source FeeRefndStdReq for FeeRefndStdReqId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeRefndStdReq FeeRefndStdReqIdSource
      	{
            get { return entityData.FeeRefndStdReqIdSource; }
            set { entityData.FeeRefndStdReqIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "FEE_REFND_STD_DET"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"FEE_REFND_STD_DTL_ID", "FEE_REFND_STD_REQ_ID", "FEE_REFUND_CODE_ID", "RFND_VALUE", "FEE_STUD_FEE_ITEM_ID", "ADM_APP_FEES_ID", "NOTES", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as FeeRefndStdDetEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (FeeRefndStdDet) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<FeeRefndStdDet>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as FeeRefndStdDet);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed FeeRefndStdDet Entity 
		///</summary>
		protected virtual FeeRefndStdDet Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			FeeRefndStdDet copy = new FeeRefndStdDet();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.FeeRefndStdDtlId = this.FeeRefndStdDtlId;
					copy.OriginalFeeRefndStdDtlId = this.OriginalFeeRefndStdDtlId;
				copy.FeeRefndStdReqId = this.FeeRefndStdReqId;
				copy.FeeRefundCodeId = this.FeeRefundCodeId;
				copy.RfndValue = this.RfndValue;
				copy.FeeStudFeeItemId = this.FeeStudFeeItemId;
				copy.AdmAppFeesId = this.AdmAppFeesId;
				copy.Notes = this.Notes;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.AdmAppFeesIdSource != null && existingCopies.Contains(this.AdmAppFeesIdSource))
				copy.AdmAppFeesIdSource = existingCopies[this.AdmAppFeesIdSource] as AdmAppFees;
			else
				copy.AdmAppFeesIdSource = MakeCopyOf(this.AdmAppFeesIdSource, existingCopies) as AdmAppFees;
			if (this.FeeStudFeeItemIdSource != null && existingCopies.Contains(this.FeeStudFeeItemIdSource))
				copy.FeeStudFeeItemIdSource = existingCopies[this.FeeStudFeeItemIdSource] as FeeStudFeeItem;
			else
				copy.FeeStudFeeItemIdSource = MakeCopyOf(this.FeeStudFeeItemIdSource, existingCopies) as FeeStudFeeItem;
			if (this.FeeRefundCodeIdSource != null && existingCopies.Contains(this.FeeRefundCodeIdSource))
				copy.FeeRefundCodeIdSource = existingCopies[this.FeeRefundCodeIdSource] as FeeRefundCode;
			else
				copy.FeeRefundCodeIdSource = MakeCopyOf(this.FeeRefundCodeIdSource, existingCopies) as FeeRefundCode;
			if (this.FeeRefndStdReqIdSource != null && existingCopies.Contains(this.FeeRefndStdReqIdSource))
				copy.FeeRefndStdReqIdSource = existingCopies[this.FeeRefndStdReqIdSource] as FeeRefndStdReq;
			else
				copy.FeeRefndStdReqIdSource = MakeCopyOf(this.FeeRefndStdReqIdSource, existingCopies) as FeeRefndStdReq;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed FeeRefndStdDet Entity 
		///</summary>
		public virtual FeeRefndStdDet Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed FeeRefndStdDet Entity which is a deep copy of the current entity.
		///</summary>
		public virtual FeeRefndStdDet DeepCopy()
		{
			return EntityHelper.Clone<FeeRefndStdDet>(this as FeeRefndStdDet);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as FeeRefndStdDetEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new FeeRefndStdDetEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as FeeRefndStdDetEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(FeeRefndStdDetColumn column)
		{
			switch(column)
			{
					case FeeRefndStdDetColumn.FeeRefndStdDtlId:
					return entityData.FeeRefndStdDtlId != _originalData.FeeRefndStdDtlId;
					case FeeRefndStdDetColumn.FeeRefndStdReqId:
					return entityData.FeeRefndStdReqId != _originalData.FeeRefndStdReqId;
					case FeeRefndStdDetColumn.FeeRefundCodeId:
					return entityData.FeeRefundCodeId != _originalData.FeeRefundCodeId;
					case FeeRefndStdDetColumn.RfndValue:
					return entityData.RfndValue != _originalData.RfndValue;
					case FeeRefndStdDetColumn.FeeStudFeeItemId:
					return entityData.FeeStudFeeItemId != _originalData.FeeStudFeeItemId;
					case FeeRefndStdDetColumn.AdmAppFeesId:
					return entityData.AdmAppFeesId != _originalData.AdmAppFeesId;
					case FeeRefndStdDetColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case FeeRefndStdDetColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case FeeRefndStdDetColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< FeeRefndStdDetColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.FeeRefndStdDtlId != _originalData.FeeRefndStdDtlId;
			result = result || entityData.FeeRefndStdReqId != _originalData.FeeRefndStdReqId;
			result = result || entityData.FeeRefundCodeId != _originalData.FeeRefundCodeId;
			result = result || entityData.RfndValue != _originalData.RfndValue;
			result = result || entityData.FeeStudFeeItemId != _originalData.FeeStudFeeItemId;
			result = result || entityData.AdmAppFeesId != _originalData.AdmAppFeesId;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a FeeRefndStdDet Entity with the original data.
		///</summary>
		public FeeRefndStdDet GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateFeeRefndStdDet(
				_originalData.FeeRefndStdDtlId,
				_originalData.FeeRefndStdReqId,
				_originalData.FeeRefundCodeId,
				_originalData.RfndValue,
				_originalData.FeeStudFeeItemId,
				_originalData.AdmAppFeesId,
				_originalData.Notes,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (FeeRefndStdDet)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="FeeRefndStdDetBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is FeeRefndStdDetBase)
				return ValueEquals(this, (FeeRefndStdDetBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="FeeRefndStdDetBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.FeeRefndStdDtlId.GetHashCode() ^ 
					this.FeeRefndStdReqId.GetHashCode() ^ 
					((this.FeeRefundCodeId == null) ? string.Empty : this.FeeRefundCodeId.ToString()).GetHashCode() ^ 
					this.RfndValue.GetHashCode() ^ 
					((this.FeeStudFeeItemId == null) ? string.Empty : this.FeeStudFeeItemId.ToString()).GetHashCode() ^ 
					((this.AdmAppFeesId == null) ? string.Empty : this.AdmAppFeesId.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="FeeRefndStdDetBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(FeeRefndStdDetBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="FeeRefndStdDetBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="FeeRefndStdDetBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="FeeRefndStdDetBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(FeeRefndStdDetBase Object1, FeeRefndStdDetBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.FeeRefndStdDtlId != Object2.FeeRefndStdDtlId)
				equal = false;
			if (Object1.FeeRefndStdReqId != Object2.FeeRefndStdReqId)
				equal = false;
			if ( Object1.FeeRefundCodeId != null && Object2.FeeRefundCodeId != null )
			{
				if (Object1.FeeRefundCodeId != Object2.FeeRefundCodeId)
					equal = false;
			}
			else if (Object1.FeeRefundCodeId == null ^ Object2.FeeRefundCodeId == null )
			{
				equal = false;
			}
			if (Object1.RfndValue != Object2.RfndValue)
				equal = false;
			if ( Object1.FeeStudFeeItemId != null && Object2.FeeStudFeeItemId != null )
			{
				if (Object1.FeeStudFeeItemId != Object2.FeeStudFeeItemId)
					equal = false;
			}
			else if (Object1.FeeStudFeeItemId == null ^ Object2.FeeStudFeeItemId == null )
			{
				equal = false;
			}
			if ( Object1.AdmAppFeesId != null && Object2.AdmAppFeesId != null )
			{
				if (Object1.AdmAppFeesId != Object2.AdmAppFeesId)
					equal = false;
			}
			else if (Object1.AdmAppFeesId == null ^ Object2.AdmAppFeesId == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((FeeRefndStdDetBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static FeeRefndStdDetComparer GetComparer()
        {
            return new FeeRefndStdDetComparer();
        }
        */

        // Comparer delegates back to FeeRefndStdDet
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(FeeRefndStdDet rhs, FeeRefndStdDetColumn which)
        {
            switch (which)
            {
            	
            	
            	case FeeRefndStdDetColumn.FeeRefndStdDtlId:
            		return this.FeeRefndStdDtlId.CompareTo(rhs.FeeRefndStdDtlId);
            		
            		                 
            	
            	
            	case FeeRefndStdDetColumn.FeeRefndStdReqId:
            		return this.FeeRefndStdReqId.CompareTo(rhs.FeeRefndStdReqId);
            		
            		                 
            	
            	
            	case FeeRefndStdDetColumn.FeeRefundCodeId:
            		return this.FeeRefundCodeId.Value.CompareTo(rhs.FeeRefundCodeId.Value);
            		
            		                 
            	
            	
            	case FeeRefndStdDetColumn.RfndValue:
            		return this.RfndValue.CompareTo(rhs.RfndValue);
            		
            		                 
            	
            	
            	case FeeRefndStdDetColumn.FeeStudFeeItemId:
            		return this.FeeStudFeeItemId.Value.CompareTo(rhs.FeeStudFeeItemId.Value);
            		
            		                 
            	
            	
            	case FeeRefndStdDetColumn.AdmAppFeesId:
            		return this.AdmAppFeesId.Value.CompareTo(rhs.AdmAppFeesId.Value);
            		
            		                 
            	
            	
            	case FeeRefndStdDetColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case FeeRefndStdDetColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case FeeRefndStdDetColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<FeeRefndStdDetKey> Members
		
		// member variable for the EntityId property
		private FeeRefndStdDetKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual FeeRefndStdDetKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new FeeRefndStdDetKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("FeeRefndStdDet")
					.Append("|").Append( this.FeeRefndStdDtlId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- FeeRefndStdDtlId: {0}{9}- FeeRefndStdReqId: {1}{9}- FeeRefundCodeId: {2}{9}- RfndValue: {3}{9}- FeeStudFeeItemId: {4}{9}- AdmAppFeesId: {5}{9}- Notes: {6}{9}- SeUserId: {7}{9}- LastDate: {8}{9}{11}", 
				this.FeeRefndStdDtlId,
				this.FeeRefndStdReqId,
				(this.FeeRefundCodeId == null) ? string.Empty : this.FeeRefundCodeId.ToString(),
				this.RfndValue,
				(this.FeeStudFeeItemId == null) ? string.Empty : this.FeeStudFeeItemId.ToString(),
				(this.AdmAppFeesId == null) ? string.Empty : this.AdmAppFeesId.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'FEE_REFND_STD_DET' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class FeeRefndStdDetEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// FEE_REFND_STD_DTL_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "FEE_REFND_STD_DET"</remarks>
		public System.Decimal FeeRefndStdDtlId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalFeeRefndStdDtlId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// FEE_REFND_STD_REQ_ID : 
		/// </summary>
		public System.Decimal		  FeeRefndStdReqId = 0.0m;
		
		/// <summary>
		/// FEE_REFUND_CODE_ID : 
		/// </summary>
		public System.Decimal?		  FeeRefundCodeId = null;
		
		/// <summary>
		/// RFND_VALUE : 
		/// </summary>
		public System.Decimal		  RfndValue = 0.0m;
		
		/// <summary>
		/// FEE_STUD_FEE_ITEM_ID : 
		/// </summary>
		public System.Decimal?		  FeeStudFeeItemId = null;
		
		/// <summary>
		/// ADM_APP_FEES_ID : 
		/// </summary>
		public System.Decimal?		  AdmAppFeesId = null;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdmAppFees _admAppFeesIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmAppFees"/>.
		/// </summary>
		/// <value>The source AdmAppFees for AdmAppFeesId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmAppFees AdmAppFeesIdSource
      	{
            get { return this._admAppFeesIdSource; }
            set { this._admAppFeesIdSource = value; }
      	}
		private FeeStudFeeItem _feeStudFeeItemIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeStudFeeItem"/>.
		/// </summary>
		/// <value>The source FeeStudFeeItem for FeeStudFeeItemId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeStudFeeItem FeeStudFeeItemIdSource
      	{
            get { return this._feeStudFeeItemIdSource; }
            set { this._feeStudFeeItemIdSource = value; }
      	}
		private FeeRefundCode _feeRefundCodeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeRefundCode"/>.
		/// </summary>
		/// <value>The source FeeRefundCode for FeeRefundCodeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeRefundCode FeeRefundCodeIdSource
      	{
            get { return this._feeRefundCodeIdSource; }
            set { this._feeRefundCodeIdSource = value; }
      	}
		private FeeRefndStdReq _feeRefndStdReqIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeRefndStdReq"/>.
		/// </summary>
		/// <value>The source FeeRefndStdReq for FeeRefndStdReqId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeRefndStdReq FeeRefndStdReqIdSource
      	{
            get { return this._feeRefndStdReqIdSource; }
            set { this._feeRefndStdReqIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			FeeRefndStdDetEntityData _tmp = new FeeRefndStdDetEntityData();
						
			_tmp.FeeRefndStdDtlId = this.FeeRefndStdDtlId;
			_tmp.OriginalFeeRefndStdDtlId = this.OriginalFeeRefndStdDtlId;
			
			_tmp.FeeRefndStdReqId = this.FeeRefndStdReqId;
			_tmp.FeeRefundCodeId = this.FeeRefundCodeId;
			_tmp.RfndValue = this.RfndValue;
			_tmp.FeeStudFeeItemId = this.FeeStudFeeItemId;
			_tmp.AdmAppFeesId = this.AdmAppFeesId;
			_tmp.Notes = this.Notes;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.AdmAppFeesIdSource != null)
				_tmp.AdmAppFeesIdSource = MakeCopyOf(this.AdmAppFeesIdSource) as AdmAppFees;
			if (this.FeeStudFeeItemIdSource != null)
				_tmp.FeeStudFeeItemIdSource = MakeCopyOf(this.FeeStudFeeItemIdSource) as FeeStudFeeItem;
			if (this.FeeRefundCodeIdSource != null)
				_tmp.FeeRefundCodeIdSource = MakeCopyOf(this.FeeRefundCodeIdSource) as FeeRefundCode;
			if (this.FeeRefndStdReqIdSource != null)
				_tmp.FeeRefndStdReqIdSource = MakeCopyOf(this.FeeRefndStdReqIdSource) as FeeRefndStdReq;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			FeeRefndStdDetEntityData _tmp = new FeeRefndStdDetEntityData();
						
			_tmp.FeeRefndStdDtlId = this.FeeRefndStdDtlId;
			_tmp.OriginalFeeRefndStdDtlId = this.OriginalFeeRefndStdDtlId;
			
			_tmp.FeeRefndStdReqId = this.FeeRefndStdReqId;
			_tmp.FeeRefundCodeId = this.FeeRefundCodeId;
			_tmp.RfndValue = this.RfndValue;
			_tmp.FeeStudFeeItemId = this.FeeStudFeeItemId;
			_tmp.AdmAppFeesId = this.AdmAppFeesId;
			_tmp.Notes = this.Notes;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.AdmAppFeesIdSource != null && existingCopies.Contains(this.AdmAppFeesIdSource))
				_tmp.AdmAppFeesIdSource = existingCopies[this.AdmAppFeesIdSource] as AdmAppFees;
			else
				_tmp.AdmAppFeesIdSource = MakeCopyOf(this.AdmAppFeesIdSource, existingCopies) as AdmAppFees;
			if (this.FeeStudFeeItemIdSource != null && existingCopies.Contains(this.FeeStudFeeItemIdSource))
				_tmp.FeeStudFeeItemIdSource = existingCopies[this.FeeStudFeeItemIdSource] as FeeStudFeeItem;
			else
				_tmp.FeeStudFeeItemIdSource = MakeCopyOf(this.FeeStudFeeItemIdSource, existingCopies) as FeeStudFeeItem;
			if (this.FeeRefundCodeIdSource != null && existingCopies.Contains(this.FeeRefundCodeIdSource))
				_tmp.FeeRefundCodeIdSource = existingCopies[this.FeeRefundCodeIdSource] as FeeRefundCode;
			else
				_tmp.FeeRefundCodeIdSource = MakeCopyOf(this.FeeRefundCodeIdSource, existingCopies) as FeeRefundCode;
			if (this.FeeRefndStdReqIdSource != null && existingCopies.Contains(this.FeeRefndStdReqIdSource))
				_tmp.FeeRefndStdReqIdSource = existingCopies[this.FeeRefndStdReqIdSource] as FeeRefndStdReq;
			else
				_tmp.FeeRefndStdReqIdSource = MakeCopyOf(this.FeeRefndStdReqIdSource, existingCopies) as FeeRefndStdReq;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeRefndStdDetColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(FeeRefndStdDetColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeRefndStdDetColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(FeeRefndStdDetColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeRefndStdDetColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(FeeRefndStdDetColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				FeeRefndStdDetEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new FeeRefndStdDetEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeRefndStdDetColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(FeeRefndStdDetColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				FeeRefndStdDetEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new FeeRefndStdDetEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region FeeRefndStdDetEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="FeeRefndStdDet"/> object.
	/// </remarks>
	public class FeeRefndStdDetEventArgs : System.EventArgs
	{
		private FeeRefndStdDetColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the FeeRefndStdDetEventArgs class.
		///</summary>
		public FeeRefndStdDetEventArgs(FeeRefndStdDetColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the FeeRefndStdDetEventArgs class.
		///</summary>
		public FeeRefndStdDetEventArgs(FeeRefndStdDetColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The FeeRefndStdDetColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="FeeRefndStdDetColumn" />
		public FeeRefndStdDetColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all FeeRefndStdDet related events.
	///</summary>
	public delegate void FeeRefndStdDetEventHandler(object sender, FeeRefndStdDetEventArgs e);
	
	#region FeeRefndStdDetComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class FeeRefndStdDetComparer : System.Collections.Generic.IComparer<FeeRefndStdDet>
	{
		FeeRefndStdDetColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:FeeRefndStdDetComparer"/> class.
        /// </summary>
		public FeeRefndStdDetComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:FeeRefndStdDetComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public FeeRefndStdDetComparer(FeeRefndStdDetColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="FeeRefndStdDet"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="FeeRefndStdDet"/> to compare.</param>
        /// <param name="b">The second <c>FeeRefndStdDet</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(FeeRefndStdDet a, FeeRefndStdDet b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(FeeRefndStdDet entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(FeeRefndStdDet a, FeeRefndStdDet b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public FeeRefndStdDetColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region FeeRefndStdDetKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="FeeRefndStdDet"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class FeeRefndStdDetKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the FeeRefndStdDetKey class.
		/// </summary>
		public FeeRefndStdDetKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeRefndStdDetKey class.
		/// </summary>
		public FeeRefndStdDetKey(FeeRefndStdDetBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.FeeRefndStdDtlId = entity.FeeRefndStdDtlId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeRefndStdDetKey class.
		/// </summary>
		public FeeRefndStdDetKey(System.Decimal _feeRefndStdDtlId)
		{
			#region Init Properties

			this.FeeRefndStdDtlId = _feeRefndStdDtlId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private FeeRefndStdDetBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public FeeRefndStdDetBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the FeeRefndStdDtlId property
		private System.Decimal _feeRefndStdDtlId;
		
		/// <summary>
		/// Gets or sets the FeeRefndStdDtlId property.
		/// </summary>
		public System.Decimal FeeRefndStdDtlId
		{
			get { return _feeRefndStdDtlId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.FeeRefndStdDtlId = value;
				
				_feeRefndStdDtlId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				FeeRefndStdDtlId = ( values["FeeRefndStdDtlId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["FeeRefndStdDtlId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("FeeRefndStdDtlId", FeeRefndStdDtlId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("FeeRefndStdDtlId: {0}{1}",
								FeeRefndStdDtlId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region FeeRefndStdDetColumn Enum
	
	/// <summary>
	/// Enumerate the FeeRefndStdDet columns.
	/// </summary>
	[Serializable]
	public enum FeeRefndStdDetColumn : int
	{
		/// <summary>
		/// FeeRefndStdDtlId : 
		/// </summary>
		[EnumTextValue("FEE_REFND_STD_DTL_ID")]
		[ColumnEnum("FEE_REFND_STD_DTL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		FeeRefndStdDtlId = 1,
		/// <summary>
		/// FeeRefndStdReqId : 
		/// </summary>
		[EnumTextValue("FEE_REFND_STD_REQ_ID")]
		[ColumnEnum("FEE_REFND_STD_REQ_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		FeeRefndStdReqId = 2,
		/// <summary>
		/// FeeRefundCodeId : 
		/// </summary>
		[EnumTextValue("FEE_REFUND_CODE_ID")]
		[ColumnEnum("FEE_REFUND_CODE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeeRefundCodeId = 3,
		/// <summary>
		/// RfndValue : 
		/// </summary>
		[EnumTextValue("RFND_VALUE")]
		[ColumnEnum("RFND_VALUE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		RfndValue = 4,
		/// <summary>
		/// FeeStudFeeItemId : 
		/// </summary>
		[EnumTextValue("FEE_STUD_FEE_ITEM_ID")]
		[ColumnEnum("FEE_STUD_FEE_ITEM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeeStudFeeItemId = 5,
		/// <summary>
		/// AdmAppFeesId : 
		/// </summary>
		[EnumTextValue("ADM_APP_FEES_ID")]
		[ColumnEnum("ADM_APP_FEES_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmAppFeesId = 6,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		Notes = 7,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 8,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 9
	}//End enum

	#endregion FeeRefndStdDetColumn Enum

} // end namespace
