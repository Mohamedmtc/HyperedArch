
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file GsCdeHonor.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'GS_CDE_HONOR' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class GsCdeHonorBase : EntityBase, IGsCdeHonor, IEntityId<GsCdeHonorKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private GsCdeHonorEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private GsCdeHonorEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private GsCdeHonorEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<GsCdeHonor> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event GsCdeHonorEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event GsCdeHonorEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="GsCdeHonorBase"/> instance.
		///</summary>
		public GsCdeHonorBase()
		{
			this.entityData = new GsCdeHonorEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="GsCdeHonorBase"/> instance.
		///</summary>
		///<param name="_gsCdeHonorId"></param>
		///<param name="_honorCode"></param>
		///<param name="_honorAr"></param>
		///<param name="_honorEn"></param>
		public GsCdeHonorBase(System.Decimal _gsCdeHonorId, System.String _honorCode, System.String _honorAr, 
			System.String _honorEn)
		{
			this.entityData = new GsCdeHonorEntityData();
			this.backupData = null;

			this.GsCdeHonorId = _gsCdeHonorId;
			this.HonorCode = _honorCode;
			this.HonorAr = _honorAr;
			this.HonorEn = _honorEn;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="GsCdeHonor"/> instance.
		///</summary>
		///<param name="_gsCdeHonorId"></param>
		///<param name="_honorCode"></param>
		///<param name="_honorAr"></param>
		///<param name="_honorEn"></param>
		public static GsCdeHonor CreateGsCdeHonor(System.Decimal _gsCdeHonorId, System.String _honorCode, System.String _honorAr, 
			System.String _honorEn)
		{
			GsCdeHonor newGsCdeHonor = new GsCdeHonor();
			newGsCdeHonor.GsCdeHonorId = _gsCdeHonorId;
			newGsCdeHonor.HonorCode = _honorCode;
			newGsCdeHonor.HonorAr = _honorAr;
			newGsCdeHonor.HonorEn = _honorEn;
			return newGsCdeHonor;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the GsCdeHonorId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal GsCdeHonorId
		{
			get
			{
				return this.entityData.GsCdeHonorId; 
			}
			
			set
			{
				if (this.entityData.GsCdeHonorId == value)
					return;
					
				OnColumnChanging(GsCdeHonorColumn.GsCdeHonorId, this.entityData.GsCdeHonorId);
				this.entityData.GsCdeHonorId = value;
				this.EntityId.GsCdeHonorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCdeHonorColumn.GsCdeHonorId, this.entityData.GsCdeHonorId);
				OnPropertyChanged("GsCdeHonorId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the GS_CDE_HONOR_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the GS_CDE_HONOR_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalGsCdeHonorId
		{
			get { return this.entityData.OriginalGsCdeHonorId; }
			set { this.entityData.OriginalGsCdeHonorId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the HonorCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String HonorCode
		{
			get
			{
				return this.entityData.HonorCode; 
			}
			
			set
			{
				if (this.entityData.HonorCode == value)
					return;
					
				OnColumnChanging(GsCdeHonorColumn.HonorCode, this.entityData.HonorCode);
				this.entityData.HonorCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCdeHonorColumn.HonorCode, this.entityData.HonorCode);
				OnPropertyChanged("HonorCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HonorAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String HonorAr
		{
			get
			{
				return this.entityData.HonorAr; 
			}
			
			set
			{
				if (this.entityData.HonorAr == value)
					return;
					
				OnColumnChanging(GsCdeHonorColumn.HonorAr, this.entityData.HonorAr);
				this.entityData.HonorAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCdeHonorColumn.HonorAr, this.entityData.HonorAr);
				OnPropertyChanged("HonorAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HonorEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String HonorEn
		{
			get
			{
				return this.entityData.HonorEn; 
			}
			
			set
			{
				if (this.entityData.HonorEn == value)
					return;
					
				OnColumnChanging(GsCdeHonorColumn.HonorEn, this.entityData.HonorEn);
				this.entityData.HonorEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCdeHonorColumn.HonorEn, this.entityData.HonorEn);
				OnPropertyChanged("HonorEn");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of PgThesisGrantStud objects
		///	which are related to this object through the relation FK_PG_THESIS_GRANT_STUD_GS_CDE_HONOR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgThesisGrantStud> PgThesisGrantStudCollection
		{
			get { return entityData.PgThesisGrantStudCollection; }
			set { entityData.PgThesisGrantStudCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPolicySemHonor objects
		///	which are related to this object through the relation FK_ENT_POLICY_SEM_HONOR_GS_CDE_HONOR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolicySemHonor> EntPolicySemHonorCollection
		{
			get { return entityData.EntPolicySemHonorCollection; }
			set { entityData.EntPolicySemHonorCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPolicyAccumHonor objects
		///	which are related to this object through the relation FK_ENT_POLICY_ACCUM_HONOR_GS_CDE_HONOR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPolicyAccumHonor> EntPolicyAccumHonorCollection
		{
			get { return entityData.EntPolicyAccumHonorCollection; }
			set { entityData.EntPolicyAccumHonorCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudFaculty objects
		///	which are related to this object through the relation FK_ED_STUD_FACULTY_GS_CDE_HONOR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudFaculty> EdStudFacultyCollection
		{
			get { return entityData.EdStudFacultyCollection; }
			set { entityData.EdStudFacultyCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudSemester objects
		///	which are related to this object through the relation FK_ED_STUD_SEMESTER_GS_CDE_HONOR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudSemester> EdStudSemesterCollection
		{
			get { return entityData.EdStudSemesterCollection; }
			set { entityData.EdStudSemesterCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of PgThesisStud objects
		///	which are related to this object through the relation FK_PG_THESIS_STUD_GS_CDE_HONOR
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgThesisStud> PgThesisStudCollection
		{
			get { return entityData.PgThesisStudCollection; }
			set { entityData.PgThesisStudCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HonorCode", "Honor Code", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HonorAr", "Honor Ar", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HonorEn", "Honor En", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "GS_CDE_HONOR"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"GS_CDE_HONOR_ID", "HONOR_CODE", "HONOR_AR", "HONOR_EN"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as GsCdeHonorEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (GsCdeHonor) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<GsCdeHonor>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as GsCdeHonor);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed GsCdeHonor Entity 
		///</summary>
		protected virtual GsCdeHonor Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			GsCdeHonor copy = new GsCdeHonor();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.GsCdeHonorId = this.GsCdeHonorId;
					copy.OriginalGsCdeHonorId = this.OriginalGsCdeHonorId;
				copy.HonorCode = this.HonorCode;
				copy.HonorAr = this.HonorAr;
				copy.HonorEn = this.HonorEn;
			
		
			//deep copy nested objects
			copy.PgThesisGrantStudCollection = (TList<PgThesisGrantStud>) MakeCopyOf(this.PgThesisGrantStudCollection, existingCopies); 
			copy.EntPolicySemHonorCollection = (TList<EntPolicySemHonor>) MakeCopyOf(this.EntPolicySemHonorCollection, existingCopies); 
			copy.EntPolicyAccumHonorCollection = (TList<EntPolicyAccumHonor>) MakeCopyOf(this.EntPolicyAccumHonorCollection, existingCopies); 
			copy.EdStudFacultyCollection = (TList<EdStudFaculty>) MakeCopyOf(this.EdStudFacultyCollection, existingCopies); 
			copy.EdStudSemesterCollection = (TList<EdStudSemester>) MakeCopyOf(this.EdStudSemesterCollection, existingCopies); 
			copy.PgThesisStudCollection = (TList<PgThesisStud>) MakeCopyOf(this.PgThesisStudCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed GsCdeHonor Entity 
		///</summary>
		public virtual GsCdeHonor Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed GsCdeHonor Entity which is a deep copy of the current entity.
		///</summary>
		public virtual GsCdeHonor DeepCopy()
		{
			return EntityHelper.Clone<GsCdeHonor>(this as GsCdeHonor);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as GsCdeHonorEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new GsCdeHonorEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as GsCdeHonorEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(GsCdeHonorColumn column)
		{
			switch(column)
			{
					case GsCdeHonorColumn.GsCdeHonorId:
					return entityData.GsCdeHonorId != _originalData.GsCdeHonorId;
					case GsCdeHonorColumn.HonorCode:
					return entityData.HonorCode != _originalData.HonorCode;
					case GsCdeHonorColumn.HonorAr:
					return entityData.HonorAr != _originalData.HonorAr;
					case GsCdeHonorColumn.HonorEn:
					return entityData.HonorEn != _originalData.HonorEn;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< GsCdeHonorColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.GsCdeHonorId != _originalData.GsCdeHonorId;
			result = result || entityData.HonorCode != _originalData.HonorCode;
			result = result || entityData.HonorAr != _originalData.HonorAr;
			result = result || entityData.HonorEn != _originalData.HonorEn;
			return result;
		}	
		
		///<summary>
		///  Returns a GsCdeHonor Entity with the original data.
		///</summary>
		public GsCdeHonor GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateGsCdeHonor(
				_originalData.GsCdeHonorId,
				_originalData.HonorCode,
				_originalData.HonorAr,
				_originalData.HonorEn
				);
				
			return (GsCdeHonor)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="GsCdeHonorBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is GsCdeHonorBase)
				return ValueEquals(this, (GsCdeHonorBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="GsCdeHonorBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.GsCdeHonorId.GetHashCode() ^ 
					((this.HonorCode == null) ? string.Empty : this.HonorCode.ToString()).GetHashCode() ^ 
					((this.HonorAr == null) ? string.Empty : this.HonorAr.ToString()).GetHashCode() ^ 
					((this.HonorEn == null) ? string.Empty : this.HonorEn.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="GsCdeHonorBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(GsCdeHonorBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="GsCdeHonorBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="GsCdeHonorBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="GsCdeHonorBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(GsCdeHonorBase Object1, GsCdeHonorBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.GsCdeHonorId != Object2.GsCdeHonorId)
				equal = false;
			if ( Object1.HonorCode != null && Object2.HonorCode != null )
			{
				if (Object1.HonorCode != Object2.HonorCode)
					equal = false;
			}
			else if (Object1.HonorCode == null ^ Object2.HonorCode == null )
			{
				equal = false;
			}
			if ( Object1.HonorAr != null && Object2.HonorAr != null )
			{
				if (Object1.HonorAr != Object2.HonorAr)
					equal = false;
			}
			else if (Object1.HonorAr == null ^ Object2.HonorAr == null )
			{
				equal = false;
			}
			if ( Object1.HonorEn != null && Object2.HonorEn != null )
			{
				if (Object1.HonorEn != Object2.HonorEn)
					equal = false;
			}
			else if (Object1.HonorEn == null ^ Object2.HonorEn == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((GsCdeHonorBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static GsCdeHonorComparer GetComparer()
        {
            return new GsCdeHonorComparer();
        }
        */

        // Comparer delegates back to GsCdeHonor
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(GsCdeHonor rhs, GsCdeHonorColumn which)
        {
            switch (which)
            {
            	
            	
            	case GsCdeHonorColumn.GsCdeHonorId:
            		return this.GsCdeHonorId.CompareTo(rhs.GsCdeHonorId);
            		
            		                 
            	
            	
            	case GsCdeHonorColumn.HonorCode:
            		return this.HonorCode.CompareTo(rhs.HonorCode);
            		
            		                 
            	
            	
            	case GsCdeHonorColumn.HonorAr:
            		return this.HonorAr.CompareTo(rhs.HonorAr);
            		
            		                 
            	
            	
            	case GsCdeHonorColumn.HonorEn:
            		return this.HonorEn.CompareTo(rhs.HonorEn);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<GsCdeHonorKey> Members
		
		// member variable for the EntityId property
		private GsCdeHonorKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual GsCdeHonorKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new GsCdeHonorKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("GsCdeHonor")
					.Append("|").Append( this.GsCdeHonorId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{5}{4}- GsCdeHonorId: {0}{4}- HonorCode: {1}{4}- HonorAr: {2}{4}- HonorEn: {3}{4}{6}", 
				this.GsCdeHonorId,
				(this.HonorCode == null) ? string.Empty : this.HonorCode.ToString(),
				(this.HonorAr == null) ? string.Empty : this.HonorAr.ToString(),
				(this.HonorEn == null) ? string.Empty : this.HonorEn.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'GS_CDE_HONOR' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class GsCdeHonorEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// GS_CDE_HONOR_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "GS_CDE_HONOR"</remarks>
		public System.Decimal GsCdeHonorId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalGsCdeHonorId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// HONOR_CODE : 
		/// </summary>
		public System.String		  HonorCode = null;
		
		/// <summary>
		/// HONOR_AR : 
		/// </summary>
		public System.String		  HonorAr = null;
		
		/// <summary>
		/// HONOR_EN : 
		/// </summary>
		public System.String		  HonorEn = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region PgThesisGrantStudCollection
		
		private TList<PgThesisGrantStud> _pgThesisGrantStudGsCdeHonorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgThesisGrantStudGsCdeHonorId
		/// </summary>
		
		public TList<PgThesisGrantStud> PgThesisGrantStudCollection
		{
			get
			{
				if (_pgThesisGrantStudGsCdeHonorId == null)
				{
				_pgThesisGrantStudGsCdeHonorId = new TList<PgThesisGrantStud>();
				}
	
				return _pgThesisGrantStudGsCdeHonorId;
			}
			set { _pgThesisGrantStudGsCdeHonorId = value; }
		}
		
		#endregion

		#region EntPolicySemHonorCollection
		
		private TList<EntPolicySemHonor> _entPolicySemHonorGsCdeHonorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolicySemHonorGsCdeHonorId
		/// </summary>
		
		public TList<EntPolicySemHonor> EntPolicySemHonorCollection
		{
			get
			{
				if (_entPolicySemHonorGsCdeHonorId == null)
				{
				_entPolicySemHonorGsCdeHonorId = new TList<EntPolicySemHonor>();
				}
	
				return _entPolicySemHonorGsCdeHonorId;
			}
			set { _entPolicySemHonorGsCdeHonorId = value; }
		}
		
		#endregion

		#region EntPolicyAccumHonorCollection
		
		private TList<EntPolicyAccumHonor> _entPolicyAccumHonorGsCdeHonorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPolicyAccumHonorGsCdeHonorId
		/// </summary>
		
		public TList<EntPolicyAccumHonor> EntPolicyAccumHonorCollection
		{
			get
			{
				if (_entPolicyAccumHonorGsCdeHonorId == null)
				{
				_entPolicyAccumHonorGsCdeHonorId = new TList<EntPolicyAccumHonor>();
				}
	
				return _entPolicyAccumHonorGsCdeHonorId;
			}
			set { _entPolicyAccumHonorGsCdeHonorId = value; }
		}
		
		#endregion

		#region EdStudFacultyCollection
		
		private TList<EdStudFaculty> _edStudFacultyGsCdeHonorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudFacultyGsCdeHonorId
		/// </summary>
		
		public TList<EdStudFaculty> EdStudFacultyCollection
		{
			get
			{
				if (_edStudFacultyGsCdeHonorId == null)
				{
				_edStudFacultyGsCdeHonorId = new TList<EdStudFaculty>();
				}
	
				return _edStudFacultyGsCdeHonorId;
			}
			set { _edStudFacultyGsCdeHonorId = value; }
		}
		
		#endregion

		#region EdStudSemesterCollection
		
		private TList<EdStudSemester> _edStudSemesterGsCdeHonorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudSemesterGsCdeHonorId
		/// </summary>
		
		public TList<EdStudSemester> EdStudSemesterCollection
		{
			get
			{
				if (_edStudSemesterGsCdeHonorId == null)
				{
				_edStudSemesterGsCdeHonorId = new TList<EdStudSemester>();
				}
	
				return _edStudSemesterGsCdeHonorId;
			}
			set { _edStudSemesterGsCdeHonorId = value; }
		}
		
		#endregion

		#region PgThesisStudCollection
		
		private TList<PgThesisStud> _pgThesisStudGsCdeHonorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgThesisStudGsCdeHonorId
		/// </summary>
		
		public TList<PgThesisStud> PgThesisStudCollection
		{
			get
			{
				if (_pgThesisStudGsCdeHonorId == null)
				{
				_pgThesisStudGsCdeHonorId = new TList<PgThesisStud>();
				}
	
				return _pgThesisStudGsCdeHonorId;
			}
			set { _pgThesisStudGsCdeHonorId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			GsCdeHonorEntityData _tmp = new GsCdeHonorEntityData();
						
			_tmp.GsCdeHonorId = this.GsCdeHonorId;
			_tmp.OriginalGsCdeHonorId = this.OriginalGsCdeHonorId;
			
			_tmp.HonorCode = this.HonorCode;
			_tmp.HonorAr = this.HonorAr;
			_tmp.HonorEn = this.HonorEn;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._pgThesisGrantStudGsCdeHonorId != null)
				_tmp.PgThesisGrantStudCollection = (TList<PgThesisGrantStud>) MakeCopyOf(this.PgThesisGrantStudCollection); 
			if (this._entPolicySemHonorGsCdeHonorId != null)
				_tmp.EntPolicySemHonorCollection = (TList<EntPolicySemHonor>) MakeCopyOf(this.EntPolicySemHonorCollection); 
			if (this._entPolicyAccumHonorGsCdeHonorId != null)
				_tmp.EntPolicyAccumHonorCollection = (TList<EntPolicyAccumHonor>) MakeCopyOf(this.EntPolicyAccumHonorCollection); 
			if (this._edStudFacultyGsCdeHonorId != null)
				_tmp.EdStudFacultyCollection = (TList<EdStudFaculty>) MakeCopyOf(this.EdStudFacultyCollection); 
			if (this._edStudSemesterGsCdeHonorId != null)
				_tmp.EdStudSemesterCollection = (TList<EdStudSemester>) MakeCopyOf(this.EdStudSemesterCollection); 
			if (this._pgThesisStudGsCdeHonorId != null)
				_tmp.PgThesisStudCollection = (TList<PgThesisStud>) MakeCopyOf(this.PgThesisStudCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			GsCdeHonorEntityData _tmp = new GsCdeHonorEntityData();
						
			_tmp.GsCdeHonorId = this.GsCdeHonorId;
			_tmp.OriginalGsCdeHonorId = this.OriginalGsCdeHonorId;
			
			_tmp.HonorCode = this.HonorCode;
			_tmp.HonorAr = this.HonorAr;
			_tmp.HonorEn = this.HonorEn;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.PgThesisGrantStudCollection = (TList<PgThesisGrantStud>) MakeCopyOf(this.PgThesisGrantStudCollection, existingCopies); 
			_tmp.EntPolicySemHonorCollection = (TList<EntPolicySemHonor>) MakeCopyOf(this.EntPolicySemHonorCollection, existingCopies); 
			_tmp.EntPolicyAccumHonorCollection = (TList<EntPolicyAccumHonor>) MakeCopyOf(this.EntPolicyAccumHonorCollection, existingCopies); 
			_tmp.EdStudFacultyCollection = (TList<EdStudFaculty>) MakeCopyOf(this.EdStudFacultyCollection, existingCopies); 
			_tmp.EdStudSemesterCollection = (TList<EdStudSemester>) MakeCopyOf(this.EdStudSemesterCollection, existingCopies); 
			_tmp.PgThesisStudCollection = (TList<PgThesisStud>) MakeCopyOf(this.PgThesisStudCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCdeHonorColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(GsCdeHonorColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCdeHonorColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(GsCdeHonorColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCdeHonorColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(GsCdeHonorColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				GsCdeHonorEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new GsCdeHonorEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCdeHonorColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(GsCdeHonorColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				GsCdeHonorEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new GsCdeHonorEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region GsCdeHonorEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="GsCdeHonor"/> object.
	/// </remarks>
	public class GsCdeHonorEventArgs : System.EventArgs
	{
		private GsCdeHonorColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the GsCdeHonorEventArgs class.
		///</summary>
		public GsCdeHonorEventArgs(GsCdeHonorColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the GsCdeHonorEventArgs class.
		///</summary>
		public GsCdeHonorEventArgs(GsCdeHonorColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The GsCdeHonorColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="GsCdeHonorColumn" />
		public GsCdeHonorColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all GsCdeHonor related events.
	///</summary>
	public delegate void GsCdeHonorEventHandler(object sender, GsCdeHonorEventArgs e);
	
	#region GsCdeHonorComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class GsCdeHonorComparer : System.Collections.Generic.IComparer<GsCdeHonor>
	{
		GsCdeHonorColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:GsCdeHonorComparer"/> class.
        /// </summary>
		public GsCdeHonorComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:GsCdeHonorComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public GsCdeHonorComparer(GsCdeHonorColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="GsCdeHonor"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="GsCdeHonor"/> to compare.</param>
        /// <param name="b">The second <c>GsCdeHonor</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(GsCdeHonor a, GsCdeHonor b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(GsCdeHonor entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(GsCdeHonor a, GsCdeHonor b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public GsCdeHonorColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region GsCdeHonorKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="GsCdeHonor"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class GsCdeHonorKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the GsCdeHonorKey class.
		/// </summary>
		public GsCdeHonorKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the GsCdeHonorKey class.
		/// </summary>
		public GsCdeHonorKey(GsCdeHonorBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.GsCdeHonorId = entity.GsCdeHonorId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the GsCdeHonorKey class.
		/// </summary>
		public GsCdeHonorKey(System.Decimal _gsCdeHonorId)
		{
			#region Init Properties

			this.GsCdeHonorId = _gsCdeHonorId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private GsCdeHonorBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public GsCdeHonorBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the GsCdeHonorId property
		private System.Decimal _gsCdeHonorId;
		
		/// <summary>
		/// Gets or sets the GsCdeHonorId property.
		/// </summary>
		public System.Decimal GsCdeHonorId
		{
			get { return _gsCdeHonorId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.GsCdeHonorId = value;
				
				_gsCdeHonorId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				GsCdeHonorId = ( values["GsCdeHonorId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["GsCdeHonorId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("GsCdeHonorId", GsCdeHonorId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("GsCdeHonorId: {0}{1}",
								GsCdeHonorId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region GsCdeHonorColumn Enum
	
	/// <summary>
	/// Enumerate the GsCdeHonor columns.
	/// </summary>
	[Serializable]
	public enum GsCdeHonorColumn : int
	{
		/// <summary>
		/// GsCdeHonorId : 
		/// </summary>
		[EnumTextValue("GS_CDE_HONOR_ID")]
		[ColumnEnum("GS_CDE_HONOR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		GsCdeHonorId = 1,
		/// <summary>
		/// HonorCode : 
		/// </summary>
		[EnumTextValue("HONOR_CODE")]
		[ColumnEnum("HONOR_CODE", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		HonorCode = 2,
		/// <summary>
		/// HonorAr : 
		/// </summary>
		[EnumTextValue("HONOR_AR")]
		[ColumnEnum("HONOR_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		HonorAr = 3,
		/// <summary>
		/// HonorEn : 
		/// </summary>
		[EnumTextValue("HONOR_EN")]
		[ColumnEnum("HONOR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		HonorEn = 4
	}//End enum

	#endregion GsCdeHonorColumn Enum

} // end namespace
