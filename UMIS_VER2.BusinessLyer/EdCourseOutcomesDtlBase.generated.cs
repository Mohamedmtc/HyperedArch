
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdCourseOutcomesDtl.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_Course_Outcomes_DTL' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdCourseOutcomesDtlBase : EntityBase, IEdCourseOutcomesDtl, IEntityId<EdCourseOutcomesDtlKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdCourseOutcomesDtlEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdCourseOutcomesDtlEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdCourseOutcomesDtlEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdCourseOutcomesDtl> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdCourseOutcomesDtlEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdCourseOutcomesDtlEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdCourseOutcomesDtlBase"/> instance.
		///</summary>
		public EdCourseOutcomesDtlBase()
		{
			this.entityData = new EdCourseOutcomesDtlEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdCourseOutcomesDtlBase"/> instance.
		///</summary>
		///<param name="_edCourseOutcomesDtlId"></param>
		///<param name="_edCourseOutcomesTopicsId"></param>
		///<param name="_courseObjectives">اهداف المقرر</param>
		///<param name="_learningOutcomes">نواتج التعلم</param>
		///<param name="_knowledge">المعرفة</param>
		///<param name="_mental">الذهنية</param>
		///<param name="_professionalism">المهنية</param>
		///<param name="_general"></param>
		///<param name="_courseContent"></param>
		///<param name="_week"></param>
		///<param name="_pattern"></param>
		///<param name="_degree"></param>
		///<param name="_reference"></param>
		///<param name="_referenceType"></param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		public EdCourseOutcomesDtlBase(System.Decimal _edCourseOutcomesDtlId, System.Decimal _edCourseOutcomesTopicsId, 
			System.String _courseObjectives, System.String _learningOutcomes, System.String _knowledge, 
			System.String _mental, System.String _professionalism, System.String _general, 
			System.String _courseContent, System.String _week, System.String _pattern, 
			System.Decimal? _degree, System.String _reference, System.String _referenceType, 
			System.DateTime? _lastDate, System.Decimal _seUserId)
		{
			this.entityData = new EdCourseOutcomesDtlEntityData();
			this.backupData = null;

			this.EdCourseOutcomesDtlId = _edCourseOutcomesDtlId;
			this.EdCourseOutcomesTopicsId = _edCourseOutcomesTopicsId;
			this.CourseObjectives = _courseObjectives;
			this.LearningOutcomes = _learningOutcomes;
			this.Knowledge = _knowledge;
			this.Mental = _mental;
			this.Professionalism = _professionalism;
			this.General = _general;
			this.CourseContent = _courseContent;
			this.Week = _week;
			this.Pattern = _pattern;
			this.Degree = _degree;
			this.Reference = _reference;
			this.ReferenceType = _referenceType;
			this.LastDate = _lastDate;
			this.SeUserId = _seUserId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdCourseOutcomesDtl"/> instance.
		///</summary>
		///<param name="_edCourseOutcomesDtlId"></param>
		///<param name="_edCourseOutcomesTopicsId"></param>
		///<param name="_courseObjectives">اهداف المقرر</param>
		///<param name="_learningOutcomes">نواتج التعلم</param>
		///<param name="_knowledge">المعرفة</param>
		///<param name="_mental">الذهنية</param>
		///<param name="_professionalism">المهنية</param>
		///<param name="_general"></param>
		///<param name="_courseContent"></param>
		///<param name="_week"></param>
		///<param name="_pattern"></param>
		///<param name="_degree"></param>
		///<param name="_reference"></param>
		///<param name="_referenceType"></param>
		///<param name="_lastDate"></param>
		///<param name="_seUserId"></param>
		public static EdCourseOutcomesDtl CreateEdCourseOutcomesDtl(System.Decimal _edCourseOutcomesDtlId, System.Decimal _edCourseOutcomesTopicsId, 
			System.String _courseObjectives, System.String _learningOutcomes, System.String _knowledge, 
			System.String _mental, System.String _professionalism, System.String _general, 
			System.String _courseContent, System.String _week, System.String _pattern, 
			System.Decimal? _degree, System.String _reference, System.String _referenceType, 
			System.DateTime? _lastDate, System.Decimal _seUserId)
		{
			EdCourseOutcomesDtl newEdCourseOutcomesDtl = new EdCourseOutcomesDtl();
			newEdCourseOutcomesDtl.EdCourseOutcomesDtlId = _edCourseOutcomesDtlId;
			newEdCourseOutcomesDtl.EdCourseOutcomesTopicsId = _edCourseOutcomesTopicsId;
			newEdCourseOutcomesDtl.CourseObjectives = _courseObjectives;
			newEdCourseOutcomesDtl.LearningOutcomes = _learningOutcomes;
			newEdCourseOutcomesDtl.Knowledge = _knowledge;
			newEdCourseOutcomesDtl.Mental = _mental;
			newEdCourseOutcomesDtl.Professionalism = _professionalism;
			newEdCourseOutcomesDtl.General = _general;
			newEdCourseOutcomesDtl.CourseContent = _courseContent;
			newEdCourseOutcomesDtl.Week = _week;
			newEdCourseOutcomesDtl.Pattern = _pattern;
			newEdCourseOutcomesDtl.Degree = _degree;
			newEdCourseOutcomesDtl.Reference = _reference;
			newEdCourseOutcomesDtl.ReferenceType = _referenceType;
			newEdCourseOutcomesDtl.LastDate = _lastDate;
			newEdCourseOutcomesDtl.SeUserId = _seUserId;
			return newEdCourseOutcomesDtl;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdCourseOutcomesDtlId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdCourseOutcomesDtlId
		{
			get
			{
				return this.entityData.EdCourseOutcomesDtlId; 
			}
			
			set
			{
				if (this.entityData.EdCourseOutcomesDtlId == value)
					return;
					
				OnColumnChanging(EdCourseOutcomesDtlColumn.EdCourseOutcomesDtlId, this.entityData.EdCourseOutcomesDtlId);
				this.entityData.EdCourseOutcomesDtlId = value;
				this.EntityId.EdCourseOutcomesDtlId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseOutcomesDtlColumn.EdCourseOutcomesDtlId, this.entityData.EdCourseOutcomesDtlId);
				OnPropertyChanged("EdCourseOutcomesDtlId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_Course_Outcomes_DTL_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ED_Course_Outcomes_DTL_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdCourseOutcomesDtlId
		{
			get { return this.entityData.OriginalEdCourseOutcomesDtlId; }
			set { this.entityData.OriginalEdCourseOutcomesDtlId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseOutcomesTopicsId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCourseOutcomesTopicsId
		{
			get
			{
				return this.entityData.EdCourseOutcomesTopicsId; 
			}
			
			set
			{
				if (this.entityData.EdCourseOutcomesTopicsId == value)
					return;
					
				OnColumnChanging(EdCourseOutcomesDtlColumn.EdCourseOutcomesTopicsId, this.entityData.EdCourseOutcomesTopicsId);
				this.entityData.EdCourseOutcomesTopicsId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseOutcomesDtlColumn.EdCourseOutcomesTopicsId, this.entityData.EdCourseOutcomesTopicsId);
				OnPropertyChanged("EdCourseOutcomesTopicsId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CourseObjectives property. 
		///		اهداف المقرر
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"اهداف المقرر"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String CourseObjectives
		{
			get
			{
				return this.entityData.CourseObjectives; 
			}
			
			set
			{
				if (this.entityData.CourseObjectives == value)
					return;
					
				OnColumnChanging(EdCourseOutcomesDtlColumn.CourseObjectives, this.entityData.CourseObjectives);
				this.entityData.CourseObjectives = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseOutcomesDtlColumn.CourseObjectives, this.entityData.CourseObjectives);
				OnPropertyChanged("CourseObjectives");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LearningOutcomes property. 
		///		نواتج التعلم
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"نواتج التعلم"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String LearningOutcomes
		{
			get
			{
				return this.entityData.LearningOutcomes; 
			}
			
			set
			{
				if (this.entityData.LearningOutcomes == value)
					return;
					
				OnColumnChanging(EdCourseOutcomesDtlColumn.LearningOutcomes, this.entityData.LearningOutcomes);
				this.entityData.LearningOutcomes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseOutcomesDtlColumn.LearningOutcomes, this.entityData.LearningOutcomes);
				OnPropertyChanged("LearningOutcomes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Knowledge property. 
		///		المعرفة
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"المعرفة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Knowledge
		{
			get
			{
				return this.entityData.Knowledge; 
			}
			
			set
			{
				if (this.entityData.Knowledge == value)
					return;
					
				OnColumnChanging(EdCourseOutcomesDtlColumn.Knowledge, this.entityData.Knowledge);
				this.entityData.Knowledge = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseOutcomesDtlColumn.Knowledge, this.entityData.Knowledge);
				OnPropertyChanged("Knowledge");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Mental property. 
		///		الذهنية
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"الذهنية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Mental
		{
			get
			{
				return this.entityData.Mental; 
			}
			
			set
			{
				if (this.entityData.Mental == value)
					return;
					
				OnColumnChanging(EdCourseOutcomesDtlColumn.Mental, this.entityData.Mental);
				this.entityData.Mental = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseOutcomesDtlColumn.Mental, this.entityData.Mental);
				OnPropertyChanged("Mental");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Professionalism property. 
		///		المهنية
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"المهنية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Professionalism
		{
			get
			{
				return this.entityData.Professionalism; 
			}
			
			set
			{
				if (this.entityData.Professionalism == value)
					return;
					
				OnColumnChanging(EdCourseOutcomesDtlColumn.Professionalism, this.entityData.Professionalism);
				this.entityData.Professionalism = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseOutcomesDtlColumn.Professionalism, this.entityData.Professionalism);
				OnPropertyChanged("Professionalism");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the General property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String General
		{
			get
			{
				return this.entityData.General; 
			}
			
			set
			{
				if (this.entityData.General == value)
					return;
					
				OnColumnChanging(EdCourseOutcomesDtlColumn.General, this.entityData.General);
				this.entityData.General = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseOutcomesDtlColumn.General, this.entityData.General);
				OnPropertyChanged("General");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CourseContent property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String CourseContent
		{
			get
			{
				return this.entityData.CourseContent; 
			}
			
			set
			{
				if (this.entityData.CourseContent == value)
					return;
					
				OnColumnChanging(EdCourseOutcomesDtlColumn.CourseContent, this.entityData.CourseContent);
				this.entityData.CourseContent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseOutcomesDtlColumn.CourseContent, this.entityData.CourseContent);
				OnPropertyChanged("CourseContent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Week property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Week
		{
			get
			{
				return this.entityData.Week; 
			}
			
			set
			{
				if (this.entityData.Week == value)
					return;
					
				OnColumnChanging(EdCourseOutcomesDtlColumn.Week, this.entityData.Week);
				this.entityData.Week = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseOutcomesDtlColumn.Week, this.entityData.Week);
				OnPropertyChanged("Week");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Pattern property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Pattern
		{
			get
			{
				return this.entityData.Pattern; 
			}
			
			set
			{
				if (this.entityData.Pattern == value)
					return;
					
				OnColumnChanging(EdCourseOutcomesDtlColumn.Pattern, this.entityData.Pattern);
				this.entityData.Pattern = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseOutcomesDtlColumn.Pattern, this.entityData.Pattern);
				OnPropertyChanged("Pattern");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Degree property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDegreeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Degree
		{
			get
			{
				return this.entityData.Degree; 
			}
			
			set
			{
				if (this.entityData.Degree == value)
					return;
					
				OnColumnChanging(EdCourseOutcomesDtlColumn.Degree, this.entityData.Degree);
				this.entityData.Degree = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseOutcomesDtlColumn.Degree, this.entityData.Degree);
				OnPropertyChanged("Degree");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Reference property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String Reference
		{
			get
			{
				return this.entityData.Reference; 
			}
			
			set
			{
				if (this.entityData.Reference == value)
					return;
					
				OnColumnChanging(EdCourseOutcomesDtlColumn.Reference, this.entityData.Reference);
				this.entityData.Reference = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseOutcomesDtlColumn.Reference, this.entityData.Reference);
				OnPropertyChanged("Reference");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReferenceType property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String ReferenceType
		{
			get
			{
				return this.entityData.ReferenceType; 
			}
			
			set
			{
				if (this.entityData.ReferenceType == value)
					return;
					
				OnColumnChanging(EdCourseOutcomesDtlColumn.ReferenceType, this.entityData.ReferenceType);
				this.entityData.ReferenceType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseOutcomesDtlColumn.ReferenceType, this.entityData.ReferenceType);
				OnPropertyChanged("ReferenceType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(EdCourseOutcomesDtlColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseOutcomesDtlColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(EdCourseOutcomesDtlColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdCourseOutcomesDtlColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdCourseOutcomesTopics"/>.
		/// </summary>
		/// <value>The source EdCourseOutcomesTopics for EdCourseOutcomesTopicsId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCourseOutcomesTopics EdCourseOutcomesTopicsIdSource
      	{
            get { return entityData.EdCourseOutcomesTopicsIdSource; }
            set { entityData.EdCourseOutcomesTopicsIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeUser SeUserIdSource
      	{
            get { return entityData.SeUserIdSource; }
            set { entityData.SeUserIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Week", "Week", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Reference", "Reference", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ReferenceType", "Reference Type", 250));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_Course_Outcomes_DTL"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_Course_Outcomes_DTL_ID", "ED_Course_Outcomes_Topics_Id", "Course_Objectives", "learning_Outcomes", "Knowledge", "Mental", "Professionalism", "General", "Course_Content", "Week", "Pattern", "Degree", "Reference", "Reference_Type", "Last_Date", "SE_USER_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdCourseOutcomesDtlEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdCourseOutcomesDtl) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdCourseOutcomesDtl>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdCourseOutcomesDtl);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdCourseOutcomesDtl Entity 
		///</summary>
		protected virtual EdCourseOutcomesDtl Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdCourseOutcomesDtl copy = new EdCourseOutcomesDtl();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdCourseOutcomesDtlId = this.EdCourseOutcomesDtlId;
					copy.OriginalEdCourseOutcomesDtlId = this.OriginalEdCourseOutcomesDtlId;
				copy.EdCourseOutcomesTopicsId = this.EdCourseOutcomesTopicsId;
				copy.CourseObjectives = this.CourseObjectives;
				copy.LearningOutcomes = this.LearningOutcomes;
				copy.Knowledge = this.Knowledge;
				copy.Mental = this.Mental;
				copy.Professionalism = this.Professionalism;
				copy.General = this.General;
				copy.CourseContent = this.CourseContent;
				copy.Week = this.Week;
				copy.Pattern = this.Pattern;
				copy.Degree = this.Degree;
				copy.Reference = this.Reference;
				copy.ReferenceType = this.ReferenceType;
				copy.LastDate = this.LastDate;
				copy.SeUserId = this.SeUserId;
			
			if (this.EdCourseOutcomesTopicsIdSource != null && existingCopies.Contains(this.EdCourseOutcomesTopicsIdSource))
				copy.EdCourseOutcomesTopicsIdSource = existingCopies[this.EdCourseOutcomesTopicsIdSource] as EdCourseOutcomesTopics;
			else
				copy.EdCourseOutcomesTopicsIdSource = MakeCopyOf(this.EdCourseOutcomesTopicsIdSource, existingCopies) as EdCourseOutcomesTopics;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				copy.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				copy.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdCourseOutcomesDtl Entity 
		///</summary>
		public virtual EdCourseOutcomesDtl Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdCourseOutcomesDtl Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdCourseOutcomesDtl DeepCopy()
		{
			return EntityHelper.Clone<EdCourseOutcomesDtl>(this as EdCourseOutcomesDtl);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdCourseOutcomesDtlEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdCourseOutcomesDtlEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdCourseOutcomesDtlEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdCourseOutcomesDtlColumn column)
		{
			switch(column)
			{
					case EdCourseOutcomesDtlColumn.EdCourseOutcomesDtlId:
					return entityData.EdCourseOutcomesDtlId != _originalData.EdCourseOutcomesDtlId;
					case EdCourseOutcomesDtlColumn.EdCourseOutcomesTopicsId:
					return entityData.EdCourseOutcomesTopicsId != _originalData.EdCourseOutcomesTopicsId;
					case EdCourseOutcomesDtlColumn.CourseObjectives:
					return entityData.CourseObjectives != _originalData.CourseObjectives;
					case EdCourseOutcomesDtlColumn.LearningOutcomes:
					return entityData.LearningOutcomes != _originalData.LearningOutcomes;
					case EdCourseOutcomesDtlColumn.Knowledge:
					return entityData.Knowledge != _originalData.Knowledge;
					case EdCourseOutcomesDtlColumn.Mental:
					return entityData.Mental != _originalData.Mental;
					case EdCourseOutcomesDtlColumn.Professionalism:
					return entityData.Professionalism != _originalData.Professionalism;
					case EdCourseOutcomesDtlColumn.General:
					return entityData.General != _originalData.General;
					case EdCourseOutcomesDtlColumn.CourseContent:
					return entityData.CourseContent != _originalData.CourseContent;
					case EdCourseOutcomesDtlColumn.Week:
					return entityData.Week != _originalData.Week;
					case EdCourseOutcomesDtlColumn.Pattern:
					return entityData.Pattern != _originalData.Pattern;
					case EdCourseOutcomesDtlColumn.Degree:
					return entityData.Degree != _originalData.Degree;
					case EdCourseOutcomesDtlColumn.Reference:
					return entityData.Reference != _originalData.Reference;
					case EdCourseOutcomesDtlColumn.ReferenceType:
					return entityData.ReferenceType != _originalData.ReferenceType;
					case EdCourseOutcomesDtlColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case EdCourseOutcomesDtlColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdCourseOutcomesDtlColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdCourseOutcomesDtlId != _originalData.EdCourseOutcomesDtlId;
			result = result || entityData.EdCourseOutcomesTopicsId != _originalData.EdCourseOutcomesTopicsId;
			result = result || entityData.CourseObjectives != _originalData.CourseObjectives;
			result = result || entityData.LearningOutcomes != _originalData.LearningOutcomes;
			result = result || entityData.Knowledge != _originalData.Knowledge;
			result = result || entityData.Mental != _originalData.Mental;
			result = result || entityData.Professionalism != _originalData.Professionalism;
			result = result || entityData.General != _originalData.General;
			result = result || entityData.CourseContent != _originalData.CourseContent;
			result = result || entityData.Week != _originalData.Week;
			result = result || entityData.Pattern != _originalData.Pattern;
			result = result || entityData.Degree != _originalData.Degree;
			result = result || entityData.Reference != _originalData.Reference;
			result = result || entityData.ReferenceType != _originalData.ReferenceType;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			return result;
		}	
		
		///<summary>
		///  Returns a EdCourseOutcomesDtl Entity with the original data.
		///</summary>
		public EdCourseOutcomesDtl GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdCourseOutcomesDtl(
				_originalData.EdCourseOutcomesDtlId,
				_originalData.EdCourseOutcomesTopicsId,
				_originalData.CourseObjectives,
				_originalData.LearningOutcomes,
				_originalData.Knowledge,
				_originalData.Mental,
				_originalData.Professionalism,
				_originalData.General,
				_originalData.CourseContent,
				_originalData.Week,
				_originalData.Pattern,
				_originalData.Degree,
				_originalData.Reference,
				_originalData.ReferenceType,
				_originalData.LastDate,
				_originalData.SeUserId
				);
				
			return (EdCourseOutcomesDtl)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdCourseOutcomesDtlBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdCourseOutcomesDtlBase)
				return ValueEquals(this, (EdCourseOutcomesDtlBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdCourseOutcomesDtlBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdCourseOutcomesDtlId.GetHashCode() ^ 
					this.EdCourseOutcomesTopicsId.GetHashCode() ^ 
					((this.CourseObjectives == null) ? string.Empty : this.CourseObjectives.ToString()).GetHashCode() ^ 
					((this.LearningOutcomes == null) ? string.Empty : this.LearningOutcomes.ToString()).GetHashCode() ^ 
					((this.Knowledge == null) ? string.Empty : this.Knowledge.ToString()).GetHashCode() ^ 
					((this.Mental == null) ? string.Empty : this.Mental.ToString()).GetHashCode() ^ 
					((this.Professionalism == null) ? string.Empty : this.Professionalism.ToString()).GetHashCode() ^ 
					((this.General == null) ? string.Empty : this.General.ToString()).GetHashCode() ^ 
					((this.CourseContent == null) ? string.Empty : this.CourseContent.ToString()).GetHashCode() ^ 
					((this.Week == null) ? string.Empty : this.Week.ToString()).GetHashCode() ^ 
					((this.Pattern == null) ? string.Empty : this.Pattern.ToString()).GetHashCode() ^ 
					((this.Degree == null) ? string.Empty : this.Degree.ToString()).GetHashCode() ^ 
					((this.Reference == null) ? string.Empty : this.Reference.ToString()).GetHashCode() ^ 
					((this.ReferenceType == null) ? string.Empty : this.ReferenceType.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					this.SeUserId.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdCourseOutcomesDtlBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdCourseOutcomesDtlBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdCourseOutcomesDtlBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdCourseOutcomesDtlBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdCourseOutcomesDtlBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdCourseOutcomesDtlBase Object1, EdCourseOutcomesDtlBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdCourseOutcomesDtlId != Object2.EdCourseOutcomesDtlId)
				equal = false;
			if (Object1.EdCourseOutcomesTopicsId != Object2.EdCourseOutcomesTopicsId)
				equal = false;
			if ( Object1.CourseObjectives != null && Object2.CourseObjectives != null )
			{
				if (Object1.CourseObjectives != Object2.CourseObjectives)
					equal = false;
			}
			else if (Object1.CourseObjectives == null ^ Object2.CourseObjectives == null )
			{
				equal = false;
			}
			if ( Object1.LearningOutcomes != null && Object2.LearningOutcomes != null )
			{
				if (Object1.LearningOutcomes != Object2.LearningOutcomes)
					equal = false;
			}
			else if (Object1.LearningOutcomes == null ^ Object2.LearningOutcomes == null )
			{
				equal = false;
			}
			if ( Object1.Knowledge != null && Object2.Knowledge != null )
			{
				if (Object1.Knowledge != Object2.Knowledge)
					equal = false;
			}
			else if (Object1.Knowledge == null ^ Object2.Knowledge == null )
			{
				equal = false;
			}
			if ( Object1.Mental != null && Object2.Mental != null )
			{
				if (Object1.Mental != Object2.Mental)
					equal = false;
			}
			else if (Object1.Mental == null ^ Object2.Mental == null )
			{
				equal = false;
			}
			if ( Object1.Professionalism != null && Object2.Professionalism != null )
			{
				if (Object1.Professionalism != Object2.Professionalism)
					equal = false;
			}
			else if (Object1.Professionalism == null ^ Object2.Professionalism == null )
			{
				equal = false;
			}
			if ( Object1.General != null && Object2.General != null )
			{
				if (Object1.General != Object2.General)
					equal = false;
			}
			else if (Object1.General == null ^ Object2.General == null )
			{
				equal = false;
			}
			if ( Object1.CourseContent != null && Object2.CourseContent != null )
			{
				if (Object1.CourseContent != Object2.CourseContent)
					equal = false;
			}
			else if (Object1.CourseContent == null ^ Object2.CourseContent == null )
			{
				equal = false;
			}
			if ( Object1.Week != null && Object2.Week != null )
			{
				if (Object1.Week != Object2.Week)
					equal = false;
			}
			else if (Object1.Week == null ^ Object2.Week == null )
			{
				equal = false;
			}
			if ( Object1.Pattern != null && Object2.Pattern != null )
			{
				if (Object1.Pattern != Object2.Pattern)
					equal = false;
			}
			else if (Object1.Pattern == null ^ Object2.Pattern == null )
			{
				equal = false;
			}
			if ( Object1.Degree != null && Object2.Degree != null )
			{
				if (Object1.Degree != Object2.Degree)
					equal = false;
			}
			else if (Object1.Degree == null ^ Object2.Degree == null )
			{
				equal = false;
			}
			if ( Object1.Reference != null && Object2.Reference != null )
			{
				if (Object1.Reference != Object2.Reference)
					equal = false;
			}
			else if (Object1.Reference == null ^ Object2.Reference == null )
			{
				equal = false;
			}
			if ( Object1.ReferenceType != null && Object2.ReferenceType != null )
			{
				if (Object1.ReferenceType != Object2.ReferenceType)
					equal = false;
			}
			else if (Object1.ReferenceType == null ^ Object2.ReferenceType == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if (Object1.SeUserId != Object2.SeUserId)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdCourseOutcomesDtlBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdCourseOutcomesDtlComparer GetComparer()
        {
            return new EdCourseOutcomesDtlComparer();
        }
        */

        // Comparer delegates back to EdCourseOutcomesDtl
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdCourseOutcomesDtl rhs, EdCourseOutcomesDtlColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdCourseOutcomesDtlColumn.EdCourseOutcomesDtlId:
            		return this.EdCourseOutcomesDtlId.CompareTo(rhs.EdCourseOutcomesDtlId);
            		
            		                 
            	
            	
            	case EdCourseOutcomesDtlColumn.EdCourseOutcomesTopicsId:
            		return this.EdCourseOutcomesTopicsId.CompareTo(rhs.EdCourseOutcomesTopicsId);
            		
            		                 
            	
            	
            	case EdCourseOutcomesDtlColumn.CourseObjectives:
            		return this.CourseObjectives.CompareTo(rhs.CourseObjectives);
            		
            		                 
            	
            	
            	case EdCourseOutcomesDtlColumn.LearningOutcomes:
            		return this.LearningOutcomes.CompareTo(rhs.LearningOutcomes);
            		
            		                 
            	
            	
            	case EdCourseOutcomesDtlColumn.Knowledge:
            		return this.Knowledge.CompareTo(rhs.Knowledge);
            		
            		                 
            	
            	
            	case EdCourseOutcomesDtlColumn.Mental:
            		return this.Mental.CompareTo(rhs.Mental);
            		
            		                 
            	
            	
            	case EdCourseOutcomesDtlColumn.Professionalism:
            		return this.Professionalism.CompareTo(rhs.Professionalism);
            		
            		                 
            	
            	
            	case EdCourseOutcomesDtlColumn.General:
            		return this.General.CompareTo(rhs.General);
            		
            		                 
            	
            	
            	case EdCourseOutcomesDtlColumn.CourseContent:
            		return this.CourseContent.CompareTo(rhs.CourseContent);
            		
            		                 
            	
            	
            	case EdCourseOutcomesDtlColumn.Week:
            		return this.Week.CompareTo(rhs.Week);
            		
            		                 
            	
            	
            	case EdCourseOutcomesDtlColumn.Pattern:
            		return this.Pattern.CompareTo(rhs.Pattern);
            		
            		                 
            	
            	
            	case EdCourseOutcomesDtlColumn.Degree:
            		return this.Degree.Value.CompareTo(rhs.Degree.Value);
            		
            		                 
            	
            	
            	case EdCourseOutcomesDtlColumn.Reference:
            		return this.Reference.CompareTo(rhs.Reference);
            		
            		                 
            	
            	
            	case EdCourseOutcomesDtlColumn.ReferenceType:
            		return this.ReferenceType.CompareTo(rhs.ReferenceType);
            		
            		                 
            	
            	
            	case EdCourseOutcomesDtlColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case EdCourseOutcomesDtlColumn.SeUserId:
            		return this.SeUserId.CompareTo(rhs.SeUserId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdCourseOutcomesDtlKey> Members
		
		// member variable for the EntityId property
		private EdCourseOutcomesDtlKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdCourseOutcomesDtlKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdCourseOutcomesDtlKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdCourseOutcomesDtl")
					.Append("|").Append( this.EdCourseOutcomesDtlId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{17}{16}- EdCourseOutcomesDtlId: {0}{16}- EdCourseOutcomesTopicsId: {1}{16}- CourseObjectives: {2}{16}- LearningOutcomes: {3}{16}- Knowledge: {4}{16}- Mental: {5}{16}- Professionalism: {6}{16}- General: {7}{16}- CourseContent: {8}{16}- Week: {9}{16}- Pattern: {10}{16}- Degree: {11}{16}- Reference: {12}{16}- ReferenceType: {13}{16}- LastDate: {14}{16}- SeUserId: {15}{16}{18}", 
				this.EdCourseOutcomesDtlId,
				this.EdCourseOutcomesTopicsId,
				(this.CourseObjectives == null) ? string.Empty : this.CourseObjectives.ToString(),
				(this.LearningOutcomes == null) ? string.Empty : this.LearningOutcomes.ToString(),
				(this.Knowledge == null) ? string.Empty : this.Knowledge.ToString(),
				(this.Mental == null) ? string.Empty : this.Mental.ToString(),
				(this.Professionalism == null) ? string.Empty : this.Professionalism.ToString(),
				(this.General == null) ? string.Empty : this.General.ToString(),
				(this.CourseContent == null) ? string.Empty : this.CourseContent.ToString(),
				(this.Week == null) ? string.Empty : this.Week.ToString(),
				(this.Pattern == null) ? string.Empty : this.Pattern.ToString(),
				(this.Degree == null) ? string.Empty : this.Degree.ToString(),
				(this.Reference == null) ? string.Empty : this.Reference.ToString(),
				(this.ReferenceType == null) ? string.Empty : this.ReferenceType.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				this.SeUserId,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_Course_Outcomes_DTL' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdCourseOutcomesDtlEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_Course_Outcomes_DTL_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_Course_Outcomes_DTL"</remarks>
		public System.Decimal EdCourseOutcomesDtlId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdCourseOutcomesDtlId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_Course_Outcomes_Topics_Id : 
		/// </summary>
		public System.Decimal		  EdCourseOutcomesTopicsId = 0.0m;
		
		/// <summary>
		/// Course_Objectives : اهداف المقرر
		/// </summary>
		public System.String		  CourseObjectives = null;
		
		/// <summary>
		/// learning_Outcomes : نواتج التعلم
		/// </summary>
		public System.String		  LearningOutcomes = null;
		
		/// <summary>
		/// Knowledge : المعرفة
		/// </summary>
		public System.String		  Knowledge = null;
		
		/// <summary>
		/// Mental : الذهنية
		/// </summary>
		public System.String		  Mental = null;
		
		/// <summary>
		/// Professionalism : المهنية
		/// </summary>
		public System.String		  Professionalism = null;
		
		/// <summary>
		/// General : 
		/// </summary>
		public System.String		  General = null;
		
		/// <summary>
		/// Course_Content : 
		/// </summary>
		public System.String		  CourseContent = null;
		
		/// <summary>
		/// Week : 
		/// </summary>
		public System.String		  Week = null;
		
		/// <summary>
		/// Pattern : 
		/// </summary>
		public System.String		  Pattern = null;
		
		/// <summary>
		/// Degree : 
		/// </summary>
		public System.Decimal?		  Degree = null;
		
		/// <summary>
		/// Reference : 
		/// </summary>
		public System.String		  Reference = null;
		
		/// <summary>
		/// Reference_Type : 
		/// </summary>
		public System.String		  ReferenceType = null;
		
		/// <summary>
		/// Last_Date : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal		  SeUserId = 0.0m;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdCourseOutcomesTopics _edCourseOutcomesTopicsIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCourseOutcomesTopics"/>.
		/// </summary>
		/// <value>The source EdCourseOutcomesTopics for EdCourseOutcomesTopicsId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCourseOutcomesTopics EdCourseOutcomesTopicsIdSource
      	{
            get { return this._edCourseOutcomesTopicsIdSource; }
            set { this._edCourseOutcomesTopicsIdSource = value; }
      	}
		private SeUser _seUserIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeUser SeUserIdSource
      	{
            get { return this._seUserIdSource; }
            set { this._seUserIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdCourseOutcomesDtlEntityData _tmp = new EdCourseOutcomesDtlEntityData();
						
			_tmp.EdCourseOutcomesDtlId = this.EdCourseOutcomesDtlId;
			_tmp.OriginalEdCourseOutcomesDtlId = this.OriginalEdCourseOutcomesDtlId;
			
			_tmp.EdCourseOutcomesTopicsId = this.EdCourseOutcomesTopicsId;
			_tmp.CourseObjectives = this.CourseObjectives;
			_tmp.LearningOutcomes = this.LearningOutcomes;
			_tmp.Knowledge = this.Knowledge;
			_tmp.Mental = this.Mental;
			_tmp.Professionalism = this.Professionalism;
			_tmp.General = this.General;
			_tmp.CourseContent = this.CourseContent;
			_tmp.Week = this.Week;
			_tmp.Pattern = this.Pattern;
			_tmp.Degree = this.Degree;
			_tmp.Reference = this.Reference;
			_tmp.ReferenceType = this.ReferenceType;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			
			#region Source Parent Composite Entities
			if (this.EdCourseOutcomesTopicsIdSource != null)
				_tmp.EdCourseOutcomesTopicsIdSource = MakeCopyOf(this.EdCourseOutcomesTopicsIdSource) as EdCourseOutcomesTopics;
			if (this.SeUserIdSource != null)
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource) as SeUser;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdCourseOutcomesDtlEntityData _tmp = new EdCourseOutcomesDtlEntityData();
						
			_tmp.EdCourseOutcomesDtlId = this.EdCourseOutcomesDtlId;
			_tmp.OriginalEdCourseOutcomesDtlId = this.OriginalEdCourseOutcomesDtlId;
			
			_tmp.EdCourseOutcomesTopicsId = this.EdCourseOutcomesTopicsId;
			_tmp.CourseObjectives = this.CourseObjectives;
			_tmp.LearningOutcomes = this.LearningOutcomes;
			_tmp.Knowledge = this.Knowledge;
			_tmp.Mental = this.Mental;
			_tmp.Professionalism = this.Professionalism;
			_tmp.General = this.General;
			_tmp.CourseContent = this.CourseContent;
			_tmp.Week = this.Week;
			_tmp.Pattern = this.Pattern;
			_tmp.Degree = this.Degree;
			_tmp.Reference = this.Reference;
			_tmp.ReferenceType = this.ReferenceType;
			_tmp.LastDate = this.LastDate;
			_tmp.SeUserId = this.SeUserId;
			
			#region Source Parent Composite Entities
			if (this.EdCourseOutcomesTopicsIdSource != null && existingCopies.Contains(this.EdCourseOutcomesTopicsIdSource))
				_tmp.EdCourseOutcomesTopicsIdSource = existingCopies[this.EdCourseOutcomesTopicsIdSource] as EdCourseOutcomesTopics;
			else
				_tmp.EdCourseOutcomesTopicsIdSource = MakeCopyOf(this.EdCourseOutcomesTopicsIdSource, existingCopies) as EdCourseOutcomesTopics;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				_tmp.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCourseOutcomesDtlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdCourseOutcomesDtlColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCourseOutcomesDtlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdCourseOutcomesDtlColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCourseOutcomesDtlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdCourseOutcomesDtlColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdCourseOutcomesDtlEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdCourseOutcomesDtlEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdCourseOutcomesDtlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdCourseOutcomesDtlColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdCourseOutcomesDtlEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdCourseOutcomesDtlEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdCourseOutcomesDtlEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdCourseOutcomesDtl"/> object.
	/// </remarks>
	public class EdCourseOutcomesDtlEventArgs : System.EventArgs
	{
		private EdCourseOutcomesDtlColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdCourseOutcomesDtlEventArgs class.
		///</summary>
		public EdCourseOutcomesDtlEventArgs(EdCourseOutcomesDtlColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdCourseOutcomesDtlEventArgs class.
		///</summary>
		public EdCourseOutcomesDtlEventArgs(EdCourseOutcomesDtlColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdCourseOutcomesDtlColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdCourseOutcomesDtlColumn" />
		public EdCourseOutcomesDtlColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdCourseOutcomesDtl related events.
	///</summary>
	public delegate void EdCourseOutcomesDtlEventHandler(object sender, EdCourseOutcomesDtlEventArgs e);
	
	#region EdCourseOutcomesDtlComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdCourseOutcomesDtlComparer : System.Collections.Generic.IComparer<EdCourseOutcomesDtl>
	{
		EdCourseOutcomesDtlColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdCourseOutcomesDtlComparer"/> class.
        /// </summary>
		public EdCourseOutcomesDtlComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdCourseOutcomesDtlComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdCourseOutcomesDtlComparer(EdCourseOutcomesDtlColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdCourseOutcomesDtl"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdCourseOutcomesDtl"/> to compare.</param>
        /// <param name="b">The second <c>EdCourseOutcomesDtl</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdCourseOutcomesDtl a, EdCourseOutcomesDtl b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdCourseOutcomesDtl entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdCourseOutcomesDtl a, EdCourseOutcomesDtl b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdCourseOutcomesDtlColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdCourseOutcomesDtlKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdCourseOutcomesDtl"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdCourseOutcomesDtlKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdCourseOutcomesDtlKey class.
		/// </summary>
		public EdCourseOutcomesDtlKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdCourseOutcomesDtlKey class.
		/// </summary>
		public EdCourseOutcomesDtlKey(EdCourseOutcomesDtlBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdCourseOutcomesDtlId = entity.EdCourseOutcomesDtlId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdCourseOutcomesDtlKey class.
		/// </summary>
		public EdCourseOutcomesDtlKey(System.Decimal _edCourseOutcomesDtlId)
		{
			#region Init Properties

			this.EdCourseOutcomesDtlId = _edCourseOutcomesDtlId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdCourseOutcomesDtlBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdCourseOutcomesDtlBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdCourseOutcomesDtlId property
		private System.Decimal _edCourseOutcomesDtlId;
		
		/// <summary>
		/// Gets or sets the EdCourseOutcomesDtlId property.
		/// </summary>
		public System.Decimal EdCourseOutcomesDtlId
		{
			get { return _edCourseOutcomesDtlId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdCourseOutcomesDtlId = value;
				
				_edCourseOutcomesDtlId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdCourseOutcomesDtlId = ( values["EdCourseOutcomesDtlId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdCourseOutcomesDtlId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdCourseOutcomesDtlId", EdCourseOutcomesDtlId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdCourseOutcomesDtlId: {0}{1}",
								EdCourseOutcomesDtlId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdCourseOutcomesDtlColumn Enum
	
	/// <summary>
	/// Enumerate the EdCourseOutcomesDtl columns.
	/// </summary>
	[Serializable]
	public enum EdCourseOutcomesDtlColumn : int
	{
		/// <summary>
		/// EdCourseOutcomesDtlId : 
		/// </summary>
		[EnumTextValue("ED_Course_Outcomes_DTL_ID")]
		[ColumnEnum("ED_Course_Outcomes_DTL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdCourseOutcomesDtlId = 1,
		/// <summary>
		/// EdCourseOutcomesTopicsId : 
		/// </summary>
		[EnumTextValue("ED_Course_Outcomes_Topics_Id")]
		[ColumnEnum("ED_Course_Outcomes_Topics_Id", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCourseOutcomesTopicsId = 2,
		/// <summary>
		/// CourseObjectives : اهداف المقرر
		/// </summary>
		[EnumTextValue("Course_Objectives")]
		[ColumnEnum("Course_Objectives", typeof(System.String), System.Data.DbType.String, false, false, true)]
		CourseObjectives = 3,
		/// <summary>
		/// LearningOutcomes : نواتج التعلم
		/// </summary>
		[EnumTextValue("learning_Outcomes")]
		[ColumnEnum("learning_Outcomes", typeof(System.String), System.Data.DbType.String, false, false, true)]
		LearningOutcomes = 4,
		/// <summary>
		/// Knowledge : المعرفة
		/// </summary>
		[EnumTextValue("Knowledge")]
		[ColumnEnum("Knowledge", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Knowledge = 5,
		/// <summary>
		/// Mental : الذهنية
		/// </summary>
		[EnumTextValue("Mental")]
		[ColumnEnum("Mental", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Mental = 6,
		/// <summary>
		/// Professionalism : المهنية
		/// </summary>
		[EnumTextValue("Professionalism")]
		[ColumnEnum("Professionalism", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Professionalism = 7,
		/// <summary>
		/// General : 
		/// </summary>
		[EnumTextValue("General")]
		[ColumnEnum("General", typeof(System.String), System.Data.DbType.String, false, false, true)]
		General = 8,
		/// <summary>
		/// CourseContent : 
		/// </summary>
		[EnumTextValue("Course_Content")]
		[ColumnEnum("Course_Content", typeof(System.String), System.Data.DbType.String, false, false, true)]
		CourseContent = 9,
		/// <summary>
		/// Week : 
		/// </summary>
		[EnumTextValue("Week")]
		[ColumnEnum("Week", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Week = 10,
		/// <summary>
		/// Pattern : 
		/// </summary>
		[EnumTextValue("Pattern")]
		[ColumnEnum("Pattern", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Pattern = 11,
		/// <summary>
		/// Degree : 
		/// </summary>
		[EnumTextValue("Degree")]
		[ColumnEnum("Degree", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Degree = 12,
		/// <summary>
		/// Reference : 
		/// </summary>
		[EnumTextValue("Reference")]
		[ColumnEnum("Reference", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		Reference = 13,
		/// <summary>
		/// ReferenceType : 
		/// </summary>
		[EnumTextValue("Reference_Type")]
		[ColumnEnum("Reference_Type", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		ReferenceType = 14,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("Last_Date")]
		[ColumnEnum("Last_Date", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 15,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SeUserId = 16
	}//End enum

	#endregion EdCourseOutcomesDtlColumn Enum

} // end namespace
