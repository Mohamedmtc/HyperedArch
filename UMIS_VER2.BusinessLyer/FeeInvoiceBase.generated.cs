
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file FeeInvoice.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'FEE_INVOICE' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class FeeInvoiceBase : EntityBase, IFeeInvoice, IEntityId<FeeInvoiceKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private FeeInvoiceEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private FeeInvoiceEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private FeeInvoiceEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<FeeInvoice> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeInvoiceEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeInvoiceEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="FeeInvoiceBase"/> instance.
		///</summary>
		public FeeInvoiceBase()
		{
			this.entityData = new FeeInvoiceEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="FeeInvoiceBase"/> instance.
		///</summary>
		///<param name="_feeInvoiceId">فاتورة كفيل- or credit memo</param>
		///<param name="_spoSponsorId">XXORGANIZATION_ID</param>
		///<param name="_edStudId">later on</param>
		///<param name="_invocDate">تاريخ  الفاتورة</param>
		///<param name="_invocNum">Inovice serial - credit memo serial:CM000</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_totInvocAmnt">اجمالى القيم المسددة</param>
		///<param name="_totRemainAmnt">اجمالى المتبقى من الفاتورة</param>
		///<param name="_discTypeId">1: amount  2:percentXX</param>
		///<param name="_discAmount">XXX  replaced by FEE_STUD_VOUCHER.DISC_AMOUNT  usednot affect items</param>
		///<param name="_notes">بيان الفاتورة</param>
		///<param name="_dueDate">تاريخ الاستحقاق</param>
		///<param name="_feeCdeInvocStatusId">new-review-paied-cancel</param>
		///<param name="_invocTypeId">1=invoc -- 2=Crdit Memo -3 down payment</param>
		///<param name="_feeInvoicePrntId">in case of Credit memo record type_id=2</param>
		///<param name="_attchdDocPath">صورة</param>
		///<param name="_gsCodeCurrencyId">عملة</param>
		///<param name="_userName">=web if online</param>
		///<param name="_cancelFlg">شرطفاتورة غير مدفعوعة</param>
		///<param name="_cancelDate"></param>
		///<param name="_seUserCnclId"></param>
		public FeeInvoiceBase(System.Decimal _feeInvoiceId, System.Decimal? _spoSponsorId, 
			System.Decimal? _edStudId, System.DateTime _invocDate, System.String _invocNum, System.Decimal? _seUserId, 
			System.DateTime? _lastDate, System.Decimal _totInvocAmnt, System.Decimal _totRemainAmnt, 
			System.Int32? _discTypeId, System.Decimal? _discAmount, System.String _notes, System.DateTime? _dueDate, 
			System.Int32 _feeCdeInvocStatusId, System.Int32 _invocTypeId, System.Decimal? _feeInvoicePrntId, 
			System.String _attchdDocPath, System.Decimal _gsCodeCurrencyId, System.String _userName, 
			System.Boolean? _cancelFlg, System.DateTime? _cancelDate, System.Decimal? _seUserCnclId)
		{
			this.entityData = new FeeInvoiceEntityData();
			this.backupData = null;

			this.FeeInvoiceId = _feeInvoiceId;
			this.SpoSponsorId = _spoSponsorId;
			this.EdStudId = _edStudId;
			this.InvocDate = _invocDate;
			this.InvocNum = _invocNum;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
			this.TotInvocAmnt = _totInvocAmnt;
			this.TotRemainAmnt = _totRemainAmnt;
			this.DiscTypeId = _discTypeId;
			this.DiscAmount = _discAmount;
			this.Notes = _notes;
			this.DueDate = _dueDate;
			this.FeeCdeInvocStatusId = _feeCdeInvocStatusId;
			this.InvocTypeId = _invocTypeId;
			this.FeeInvoicePrntId = _feeInvoicePrntId;
			this.AttchdDocPath = _attchdDocPath;
			this.GsCodeCurrencyId = _gsCodeCurrencyId;
			this.UserName = _userName;
			this.CancelFlg = _cancelFlg;
			this.CancelDate = _cancelDate;
			this.SeUserCnclId = _seUserCnclId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="FeeInvoice"/> instance.
		///</summary>
		///<param name="_feeInvoiceId">فاتورة كفيل- or credit memo</param>
		///<param name="_spoSponsorId">XXORGANIZATION_ID</param>
		///<param name="_edStudId">later on</param>
		///<param name="_invocDate">تاريخ  الفاتورة</param>
		///<param name="_invocNum">Inovice serial - credit memo serial:CM000</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_totInvocAmnt">اجمالى القيم المسددة</param>
		///<param name="_totRemainAmnt">اجمالى المتبقى من الفاتورة</param>
		///<param name="_discTypeId">1: amount  2:percentXX</param>
		///<param name="_discAmount">XXX  replaced by FEE_STUD_VOUCHER.DISC_AMOUNT  usednot affect items</param>
		///<param name="_notes">بيان الفاتورة</param>
		///<param name="_dueDate">تاريخ الاستحقاق</param>
		///<param name="_feeCdeInvocStatusId">new-review-paied-cancel</param>
		///<param name="_invocTypeId">1=invoc -- 2=Crdit Memo -3 down payment</param>
		///<param name="_feeInvoicePrntId">in case of Credit memo record type_id=2</param>
		///<param name="_attchdDocPath">صورة</param>
		///<param name="_gsCodeCurrencyId">عملة</param>
		///<param name="_userName">=web if online</param>
		///<param name="_cancelFlg">شرطفاتورة غير مدفعوعة</param>
		///<param name="_cancelDate"></param>
		///<param name="_seUserCnclId"></param>
		public static FeeInvoice CreateFeeInvoice(System.Decimal _feeInvoiceId, System.Decimal? _spoSponsorId, 
			System.Decimal? _edStudId, System.DateTime _invocDate, System.String _invocNum, System.Decimal? _seUserId, 
			System.DateTime? _lastDate, System.Decimal _totInvocAmnt, System.Decimal _totRemainAmnt, 
			System.Int32? _discTypeId, System.Decimal? _discAmount, System.String _notes, System.DateTime? _dueDate, 
			System.Int32 _feeCdeInvocStatusId, System.Int32 _invocTypeId, System.Decimal? _feeInvoicePrntId, 
			System.String _attchdDocPath, System.Decimal _gsCodeCurrencyId, System.String _userName, 
			System.Boolean? _cancelFlg, System.DateTime? _cancelDate, System.Decimal? _seUserCnclId)
		{
			FeeInvoice newFeeInvoice = new FeeInvoice();
			newFeeInvoice.FeeInvoiceId = _feeInvoiceId;
			newFeeInvoice.SpoSponsorId = _spoSponsorId;
			newFeeInvoice.EdStudId = _edStudId;
			newFeeInvoice.InvocDate = _invocDate;
			newFeeInvoice.InvocNum = _invocNum;
			newFeeInvoice.SeUserId = _seUserId;
			newFeeInvoice.LastDate = _lastDate;
			newFeeInvoice.TotInvocAmnt = _totInvocAmnt;
			newFeeInvoice.TotRemainAmnt = _totRemainAmnt;
			newFeeInvoice.DiscTypeId = _discTypeId;
			newFeeInvoice.DiscAmount = _discAmount;
			newFeeInvoice.Notes = _notes;
			newFeeInvoice.DueDate = _dueDate;
			newFeeInvoice.FeeCdeInvocStatusId = _feeCdeInvocStatusId;
			newFeeInvoice.InvocTypeId = _invocTypeId;
			newFeeInvoice.FeeInvoicePrntId = _feeInvoicePrntId;
			newFeeInvoice.AttchdDocPath = _attchdDocPath;
			newFeeInvoice.GsCodeCurrencyId = _gsCodeCurrencyId;
			newFeeInvoice.UserName = _userName;
			newFeeInvoice.CancelFlg = _cancelFlg;
			newFeeInvoice.CancelDate = _cancelDate;
			newFeeInvoice.SeUserCnclId = _seUserCnclId;
			return newFeeInvoice;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the FeeInvoiceId property. 
		///		فاتورة كفيل- or credit memo
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"فاتورة كفيل- or credit memo"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal FeeInvoiceId
		{
			get
			{
				return this.entityData.FeeInvoiceId; 
			}
			
			set
			{
				if (this.entityData.FeeInvoiceId == value)
					return;
					
				OnColumnChanging(FeeInvoiceColumn.FeeInvoiceId, this.entityData.FeeInvoiceId);
				this.entityData.FeeInvoiceId = value;
				this.EntityId.FeeInvoiceId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeInvoiceColumn.FeeInvoiceId, this.entityData.FeeInvoiceId);
				OnPropertyChanged("FeeInvoiceId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the FEE_INVOICE_ID property.
		///		فاتورة كفيل- or credit memo
		/// </summary>
		/// <remarks>This is the original value of the FEE_INVOICE_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalFeeInvoiceId
		{
			get { return this.entityData.OriginalFeeInvoiceId; }
			set { this.entityData.OriginalFeeInvoiceId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the SpoSponsorId property. 
		///		XXORGANIZATION_ID
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSpoSponsorIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XXORGANIZATION_ID"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SpoSponsorId
		{
			get
			{
				return this.entityData.SpoSponsorId; 
			}
			
			set
			{
				if (this.entityData.SpoSponsorId == value)
					return;
					
				OnColumnChanging(FeeInvoiceColumn.SpoSponsorId, this.entityData.SpoSponsorId);
				this.entityData.SpoSponsorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeInvoiceColumn.SpoSponsorId, this.entityData.SpoSponsorId);
				OnPropertyChanged("SpoSponsorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		later on
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdStudIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"later on"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(FeeInvoiceColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeInvoiceColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InvocDate property. 
		///		تاريخ  الفاتورة
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"تاريخ  الفاتورة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime InvocDate
		{
			get
			{
				return this.entityData.InvocDate; 
			}
			
			set
			{
				if (this.entityData.InvocDate == value)
					return;
					
				OnColumnChanging(FeeInvoiceColumn.InvocDate, this.entityData.InvocDate);
				this.entityData.InvocDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeInvoiceColumn.InvocDate, this.entityData.InvocDate);
				OnPropertyChanged("InvocDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InvocNum property. 
		///		Inovice serial - credit memo serial:CM000
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Inovice serial - credit memo serial:CM000"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String InvocNum
		{
			get
			{
				return this.entityData.InvocNum; 
			}
			
			set
			{
				if (this.entityData.InvocNum == value)
					return;
					
				OnColumnChanging(FeeInvoiceColumn.InvocNum, this.entityData.InvocNum);
				this.entityData.InvocNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeInvoiceColumn.InvocNum, this.entityData.InvocNum);
				OnPropertyChanged("InvocNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(FeeInvoiceColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeInvoiceColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(FeeInvoiceColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeInvoiceColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotInvocAmnt property. 
		///		اجمالى القيم المسددة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"اجمالى القيم المسددة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal TotInvocAmnt
		{
			get
			{
				return this.entityData.TotInvocAmnt; 
			}
			
			set
			{
				if (this.entityData.TotInvocAmnt == value)
					return;
					
				OnColumnChanging(FeeInvoiceColumn.TotInvocAmnt, this.entityData.TotInvocAmnt);
				this.entityData.TotInvocAmnt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeInvoiceColumn.TotInvocAmnt, this.entityData.TotInvocAmnt);
				OnPropertyChanged("TotInvocAmnt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotRemainAmnt property. 
		///		اجمالى المتبقى من الفاتورة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"اجمالى المتبقى من الفاتورة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal TotRemainAmnt
		{
			get
			{
				return this.entityData.TotRemainAmnt; 
			}
			
			set
			{
				if (this.entityData.TotRemainAmnt == value)
					return;
					
				OnColumnChanging(FeeInvoiceColumn.TotRemainAmnt, this.entityData.TotRemainAmnt);
				this.entityData.TotRemainAmnt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeInvoiceColumn.TotRemainAmnt, this.entityData.TotRemainAmnt);
				OnPropertyChanged("TotRemainAmnt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DiscTypeId property. 
		///		1: amount  2:percentXX
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDiscTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"1: amount  2:percentXX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DiscTypeId
		{
			get
			{
				return this.entityData.DiscTypeId; 
			}
			
			set
			{
				if (this.entityData.DiscTypeId == value)
					return;
					
				OnColumnChanging(FeeInvoiceColumn.DiscTypeId, this.entityData.DiscTypeId);
				this.entityData.DiscTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeInvoiceColumn.DiscTypeId, this.entityData.DiscTypeId);
				OnPropertyChanged("DiscTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DiscAmount property. 
		///		XXX  replaced by FEE_STUD_VOUCHER.DISC_AMOUNT  usednot affect items
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDiscAmountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XXX  replaced by FEE_STUD_VOUCHER.DISC_AMOUNT  usednot affect items"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DiscAmount
		{
			get
			{
				return this.entityData.DiscAmount; 
			}
			
			set
			{
				if (this.entityData.DiscAmount == value)
					return;
					
				OnColumnChanging(FeeInvoiceColumn.DiscAmount, this.entityData.DiscAmount);
				this.entityData.DiscAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeInvoiceColumn.DiscAmount, this.entityData.DiscAmount);
				OnPropertyChanged("DiscAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		بيان الفاتورة
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"بيان الفاتورة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1000)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(FeeInvoiceColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeInvoiceColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DueDate property. 
		///		تاريخ الاستحقاق
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsDueDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ الاستحقاق"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DueDate
		{
			get
			{
				return this.entityData.DueDate; 
			}
			
			set
			{
				if (this.entityData.DueDate == value)
					return;
					
				OnColumnChanging(FeeInvoiceColumn.DueDate, this.entityData.DueDate);
				this.entityData.DueDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeInvoiceColumn.DueDate, this.entityData.DueDate);
				OnPropertyChanged("DueDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeCdeInvocStatusId property. 
		///		new-review-paied-cancel
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"new-review-paied-cancel"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 FeeCdeInvocStatusId
		{
			get
			{
				return this.entityData.FeeCdeInvocStatusId; 
			}
			
			set
			{
				if (this.entityData.FeeCdeInvocStatusId == value)
					return;
					
				OnColumnChanging(FeeInvoiceColumn.FeeCdeInvocStatusId, this.entityData.FeeCdeInvocStatusId);
				this.entityData.FeeCdeInvocStatusId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeInvoiceColumn.FeeCdeInvocStatusId, this.entityData.FeeCdeInvocStatusId);
				OnPropertyChanged("FeeCdeInvocStatusId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InvocTypeId property. 
		///		1=invoc -- 2=Crdit Memo -3 down payment
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"1=invoc -- 2=Crdit Memo -3 down payment"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 InvocTypeId
		{
			get
			{
				return this.entityData.InvocTypeId; 
			}
			
			set
			{
				if (this.entityData.InvocTypeId == value)
					return;
					
				OnColumnChanging(FeeInvoiceColumn.InvocTypeId, this.entityData.InvocTypeId);
				this.entityData.InvocTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeInvoiceColumn.InvocTypeId, this.entityData.InvocTypeId);
				OnPropertyChanged("InvocTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeInvoicePrntId property. 
		///		in case of Credit memo record type_id=2
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeInvoicePrntIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"in case of Credit memo record type_id=2"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FeeInvoicePrntId
		{
			get
			{
				return this.entityData.FeeInvoicePrntId; 
			}
			
			set
			{
				if (this.entityData.FeeInvoicePrntId == value)
					return;
					
				OnColumnChanging(FeeInvoiceColumn.FeeInvoicePrntId, this.entityData.FeeInvoicePrntId);
				this.entityData.FeeInvoicePrntId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeInvoiceColumn.FeeInvoicePrntId, this.entityData.FeeInvoicePrntId);
				OnPropertyChanged("FeeInvoicePrntId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AttchdDocPath property. 
		///		صورة
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"صورة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String AttchdDocPath
		{
			get
			{
				return this.entityData.AttchdDocPath; 
			}
			
			set
			{
				if (this.entityData.AttchdDocPath == value)
					return;
					
				OnColumnChanging(FeeInvoiceColumn.AttchdDocPath, this.entityData.AttchdDocPath);
				this.entityData.AttchdDocPath = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeInvoiceColumn.AttchdDocPath, this.entityData.AttchdDocPath);
				OnPropertyChanged("AttchdDocPath");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodeCurrencyId property. 
		///		عملة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"عملة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsCodeCurrencyId
		{
			get
			{
				return this.entityData.GsCodeCurrencyId; 
			}
			
			set
			{
				if (this.entityData.GsCodeCurrencyId == value)
					return;
					
				OnColumnChanging(FeeInvoiceColumn.GsCodeCurrencyId, this.entityData.GsCodeCurrencyId);
				this.entityData.GsCodeCurrencyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeInvoiceColumn.GsCodeCurrencyId, this.entityData.GsCodeCurrencyId);
				OnPropertyChanged("GsCodeCurrencyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserName property. 
		///		=web if online
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"=web if online"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String UserName
		{
			get
			{
				return this.entityData.UserName; 
			}
			
			set
			{
				if (this.entityData.UserName == value)
					return;
					
				OnColumnChanging(FeeInvoiceColumn.UserName, this.entityData.UserName);
				this.entityData.UserName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeInvoiceColumn.UserName, this.entityData.UserName);
				OnPropertyChanged("UserName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CancelFlg property. 
		///		شرطفاتورة غير مدفعوعة
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsCancelFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"شرطفاتورة غير مدفعوعة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? CancelFlg
		{
			get
			{
				return this.entityData.CancelFlg; 
			}
			
			set
			{
				if (this.entityData.CancelFlg == value)
					return;
					
				OnColumnChanging(FeeInvoiceColumn.CancelFlg, this.entityData.CancelFlg);
				this.entityData.CancelFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeInvoiceColumn.CancelFlg, this.entityData.CancelFlg);
				OnPropertyChanged("CancelFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CancelDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCancelDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CancelDate
		{
			get
			{
				return this.entityData.CancelDate; 
			}
			
			set
			{
				if (this.entityData.CancelDate == value)
					return;
					
				OnColumnChanging(FeeInvoiceColumn.CancelDate, this.entityData.CancelDate);
				this.entityData.CancelDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeInvoiceColumn.CancelDate, this.entityData.CancelDate);
				OnPropertyChanged("CancelDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserCnclId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserCnclIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserCnclId
		{
			get
			{
				return this.entityData.SeUserCnclId; 
			}
			
			set
			{
				if (this.entityData.SeUserCnclId == value)
					return;
					
				OnColumnChanging(FeeInvoiceColumn.SeUserCnclId, this.entityData.SeUserCnclId);
				this.entityData.SeUserCnclId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeInvoiceColumn.SeUserCnclId, this.entityData.SeUserCnclId);
				OnPropertyChanged("SeUserCnclId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeCdeInvocStatus"/>.
		/// </summary>
		/// <value>The source FeeCdeInvocStatus for FeeCdeInvocStatusId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeCdeInvocStatus FeeCdeInvocStatusIdSource
      	{
            get { return entityData.FeeCdeInvocStatusIdSource; }
            set { entityData.FeeCdeInvocStatusIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeInvoice"/>.
		/// </summary>
		/// <value>The source FeeInvoice for FeeInvoicePrntId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeInvoice FeeInvoicePrntIdSource
      	{
            get { return entityData.FeeInvoicePrntIdSource; }
            set { entityData.FeeInvoicePrntIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCurrency"/>.
		/// </summary>
		/// <value>The source GsCodeCurrency for GsCodeCurrencyId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodeCurrency GsCodeCurrencyIdSource
      	{
            get { return entityData.GsCodeCurrencyIdSource; }
            set { entityData.GsCodeCurrencyIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SpoSponsor"/>.
		/// </summary>
		/// <value>The source SpoSponsor for SpoSponsorId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SpoSponsor SpoSponsorIdSource
      	{
            get { return entityData.SpoSponsorIdSource; }
            set { entityData.SpoSponsorIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of FeeStudVoucherItem objects
		///	which are related to this object through the relation FK_FEE_STUD_VOUCHER_ITEM_FEE_INVOICE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeStudVoucherItem> FeeStudVoucherItemCollection
		{
			get { return entityData.FeeStudVoucherItemCollection; }
			set { entityData.FeeStudVoucherItemCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeInvoiceItem objects
		///	which are related to this object through the relation FK_FEE_INVOICE_ITEM_FEE_INVOICE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeInvoiceItem> FeeInvoiceItemCollection
		{
			get { return entityData.FeeInvoiceItemCollection; }
			set { entityData.FeeInvoiceItemCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeVoucherInvoc objects
		///	which are related to this object through the relation FK_FEE_VOUCHER_INVOC_FEE_INVOICE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeVoucherInvoc> FeeVoucherInvocCollection
		{
			get { return entityData.FeeVoucherInvocCollection; }
			set { entityData.FeeVoucherInvocCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeInvoice objects
		///	which are related to this object through the relation FK_FEE_INVOICE_FEE_INVOICE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeInvoice> FeeInvoiceCollection
		{
			get { return entityData.FeeInvoiceCollection; }
			set { entityData.FeeInvoiceCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("InvocNum", "Invoc Num"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("InvocNum", "Invoc Num", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 1000));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UserName", "User Name", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "FEE_INVOICE"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"FEE_INVOICE_ID", "SPO_SPONSOR_ID", "ED_STUD_ID", "INVOC_DATE", "INVOC_NUM", "SE_USER_ID", "LAST_DATE", "TOT_INVOC_AMNT", "TOT_REMAIN_AMNT", "DISC_TYPE_ID", "DISC_AMOUNT", "NOTES", "DUE_DATE", "FEE_CDE_INVOC_STATUS_ID", "INVOC_TYPE_ID", "FEE_INVOICE_PRNT_ID", "ATTCHD_DOC_PATH", "GS_CODE_CURRENCY_ID", "User_Name", "CANCEL_FLG", "CANCEL_DATE", "SE_USER_CNCL_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as FeeInvoiceEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (FeeInvoice) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<FeeInvoice>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as FeeInvoice);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed FeeInvoice Entity 
		///</summary>
		protected virtual FeeInvoice Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			FeeInvoice copy = new FeeInvoice();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.FeeInvoiceId = this.FeeInvoiceId;
					copy.OriginalFeeInvoiceId = this.OriginalFeeInvoiceId;
				copy.SpoSponsorId = this.SpoSponsorId;
				copy.EdStudId = this.EdStudId;
				copy.InvocDate = this.InvocDate;
				copy.InvocNum = this.InvocNum;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
				copy.TotInvocAmnt = this.TotInvocAmnt;
				copy.TotRemainAmnt = this.TotRemainAmnt;
				copy.DiscTypeId = this.DiscTypeId;
				copy.DiscAmount = this.DiscAmount;
				copy.Notes = this.Notes;
				copy.DueDate = this.DueDate;
				copy.FeeCdeInvocStatusId = this.FeeCdeInvocStatusId;
				copy.InvocTypeId = this.InvocTypeId;
				copy.FeeInvoicePrntId = this.FeeInvoicePrntId;
				copy.AttchdDocPath = this.AttchdDocPath;
				copy.GsCodeCurrencyId = this.GsCodeCurrencyId;
				copy.UserName = this.UserName;
				copy.CancelFlg = this.CancelFlg;
				copy.CancelDate = this.CancelDate;
				copy.SeUserCnclId = this.SeUserCnclId;
			
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.FeeCdeInvocStatusIdSource != null && existingCopies.Contains(this.FeeCdeInvocStatusIdSource))
				copy.FeeCdeInvocStatusIdSource = existingCopies[this.FeeCdeInvocStatusIdSource] as FeeCdeInvocStatus;
			else
				copy.FeeCdeInvocStatusIdSource = MakeCopyOf(this.FeeCdeInvocStatusIdSource, existingCopies) as FeeCdeInvocStatus;
			if (this.FeeInvoicePrntIdSource != null && existingCopies.Contains(this.FeeInvoicePrntIdSource))
				copy.FeeInvoicePrntIdSource = existingCopies[this.FeeInvoicePrntIdSource] as FeeInvoice;
			else
				copy.FeeInvoicePrntIdSource = MakeCopyOf(this.FeeInvoicePrntIdSource, existingCopies) as FeeInvoice;
			if (this.GsCodeCurrencyIdSource != null && existingCopies.Contains(this.GsCodeCurrencyIdSource))
				copy.GsCodeCurrencyIdSource = existingCopies[this.GsCodeCurrencyIdSource] as GsCodeCurrency;
			else
				copy.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource, existingCopies) as GsCodeCurrency;
			if (this.SpoSponsorIdSource != null && existingCopies.Contains(this.SpoSponsorIdSource))
				copy.SpoSponsorIdSource = existingCopies[this.SpoSponsorIdSource] as SpoSponsor;
			else
				copy.SpoSponsorIdSource = MakeCopyOf(this.SpoSponsorIdSource, existingCopies) as SpoSponsor;
		
			//deep copy nested objects
			copy.FeeStudVoucherItemCollection = (TList<FeeStudVoucherItem>) MakeCopyOf(this.FeeStudVoucherItemCollection, existingCopies); 
			copy.FeeInvoiceItemCollection = (TList<FeeInvoiceItem>) MakeCopyOf(this.FeeInvoiceItemCollection, existingCopies); 
			copy.FeeVoucherInvocCollection = (TList<FeeVoucherInvoc>) MakeCopyOf(this.FeeVoucherInvocCollection, existingCopies); 
			copy.FeeInvoiceCollection = (TList<FeeInvoice>) MakeCopyOf(this.FeeInvoiceCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed FeeInvoice Entity 
		///</summary>
		public virtual FeeInvoice Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed FeeInvoice Entity which is a deep copy of the current entity.
		///</summary>
		public virtual FeeInvoice DeepCopy()
		{
			return EntityHelper.Clone<FeeInvoice>(this as FeeInvoice);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as FeeInvoiceEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new FeeInvoiceEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as FeeInvoiceEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(FeeInvoiceColumn column)
		{
			switch(column)
			{
					case FeeInvoiceColumn.FeeInvoiceId:
					return entityData.FeeInvoiceId != _originalData.FeeInvoiceId;
					case FeeInvoiceColumn.SpoSponsorId:
					return entityData.SpoSponsorId != _originalData.SpoSponsorId;
					case FeeInvoiceColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case FeeInvoiceColumn.InvocDate:
					return entityData.InvocDate != _originalData.InvocDate;
					case FeeInvoiceColumn.InvocNum:
					return entityData.InvocNum != _originalData.InvocNum;
					case FeeInvoiceColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case FeeInvoiceColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case FeeInvoiceColumn.TotInvocAmnt:
					return entityData.TotInvocAmnt != _originalData.TotInvocAmnt;
					case FeeInvoiceColumn.TotRemainAmnt:
					return entityData.TotRemainAmnt != _originalData.TotRemainAmnt;
					case FeeInvoiceColumn.DiscTypeId:
					return entityData.DiscTypeId != _originalData.DiscTypeId;
					case FeeInvoiceColumn.DiscAmount:
					return entityData.DiscAmount != _originalData.DiscAmount;
					case FeeInvoiceColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case FeeInvoiceColumn.DueDate:
					return entityData.DueDate != _originalData.DueDate;
					case FeeInvoiceColumn.FeeCdeInvocStatusId:
					return entityData.FeeCdeInvocStatusId != _originalData.FeeCdeInvocStatusId;
					case FeeInvoiceColumn.InvocTypeId:
					return entityData.InvocTypeId != _originalData.InvocTypeId;
					case FeeInvoiceColumn.FeeInvoicePrntId:
					return entityData.FeeInvoicePrntId != _originalData.FeeInvoicePrntId;
					case FeeInvoiceColumn.AttchdDocPath:
					return entityData.AttchdDocPath != _originalData.AttchdDocPath;
					case FeeInvoiceColumn.GsCodeCurrencyId:
					return entityData.GsCodeCurrencyId != _originalData.GsCodeCurrencyId;
					case FeeInvoiceColumn.UserName:
					return entityData.UserName != _originalData.UserName;
					case FeeInvoiceColumn.CancelFlg:
					return entityData.CancelFlg != _originalData.CancelFlg;
					case FeeInvoiceColumn.CancelDate:
					return entityData.CancelDate != _originalData.CancelDate;
					case FeeInvoiceColumn.SeUserCnclId:
					return entityData.SeUserCnclId != _originalData.SeUserCnclId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< FeeInvoiceColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.FeeInvoiceId != _originalData.FeeInvoiceId;
			result = result || entityData.SpoSponsorId != _originalData.SpoSponsorId;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.InvocDate != _originalData.InvocDate;
			result = result || entityData.InvocNum != _originalData.InvocNum;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.TotInvocAmnt != _originalData.TotInvocAmnt;
			result = result || entityData.TotRemainAmnt != _originalData.TotRemainAmnt;
			result = result || entityData.DiscTypeId != _originalData.DiscTypeId;
			result = result || entityData.DiscAmount != _originalData.DiscAmount;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.DueDate != _originalData.DueDate;
			result = result || entityData.FeeCdeInvocStatusId != _originalData.FeeCdeInvocStatusId;
			result = result || entityData.InvocTypeId != _originalData.InvocTypeId;
			result = result || entityData.FeeInvoicePrntId != _originalData.FeeInvoicePrntId;
			result = result || entityData.AttchdDocPath != _originalData.AttchdDocPath;
			result = result || entityData.GsCodeCurrencyId != _originalData.GsCodeCurrencyId;
			result = result || entityData.UserName != _originalData.UserName;
			result = result || entityData.CancelFlg != _originalData.CancelFlg;
			result = result || entityData.CancelDate != _originalData.CancelDate;
			result = result || entityData.SeUserCnclId != _originalData.SeUserCnclId;
			return result;
		}	
		
		///<summary>
		///  Returns a FeeInvoice Entity with the original data.
		///</summary>
		public FeeInvoice GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateFeeInvoice(
				_originalData.FeeInvoiceId,
				_originalData.SpoSponsorId,
				_originalData.EdStudId,
				_originalData.InvocDate,
				_originalData.InvocNum,
				_originalData.SeUserId,
				_originalData.LastDate,
				_originalData.TotInvocAmnt,
				_originalData.TotRemainAmnt,
				_originalData.DiscTypeId,
				_originalData.DiscAmount,
				_originalData.Notes,
				_originalData.DueDate,
				_originalData.FeeCdeInvocStatusId,
				_originalData.InvocTypeId,
				_originalData.FeeInvoicePrntId,
				_originalData.AttchdDocPath,
				_originalData.GsCodeCurrencyId,
				_originalData.UserName,
				_originalData.CancelFlg,
				_originalData.CancelDate,
				_originalData.SeUserCnclId
				);
				
			return (FeeInvoice)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="FeeInvoiceBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is FeeInvoiceBase)
				return ValueEquals(this, (FeeInvoiceBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="FeeInvoiceBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.FeeInvoiceId.GetHashCode() ^ 
					((this.SpoSponsorId == null) ? string.Empty : this.SpoSponsorId.ToString()).GetHashCode() ^ 
					((this.EdStudId == null) ? string.Empty : this.EdStudId.ToString()).GetHashCode() ^ 
					this.InvocDate.GetHashCode() ^ 
					this.InvocNum.GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					this.TotInvocAmnt.GetHashCode() ^ 
					this.TotRemainAmnt.GetHashCode() ^ 
					((this.DiscTypeId == null) ? string.Empty : this.DiscTypeId.ToString()).GetHashCode() ^ 
					((this.DiscAmount == null) ? string.Empty : this.DiscAmount.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.DueDate == null) ? string.Empty : this.DueDate.ToString()).GetHashCode() ^ 
					this.FeeCdeInvocStatusId.GetHashCode() ^ 
					this.InvocTypeId.GetHashCode() ^ 
					((this.FeeInvoicePrntId == null) ? string.Empty : this.FeeInvoicePrntId.ToString()).GetHashCode() ^ 
					((this.AttchdDocPath == null) ? string.Empty : this.AttchdDocPath.ToString()).GetHashCode() ^ 
					this.GsCodeCurrencyId.GetHashCode() ^ 
					((this.UserName == null) ? string.Empty : this.UserName.ToString()).GetHashCode() ^ 
					((this.CancelFlg == null) ? string.Empty : this.CancelFlg.ToString()).GetHashCode() ^ 
					((this.CancelDate == null) ? string.Empty : this.CancelDate.ToString()).GetHashCode() ^ 
					((this.SeUserCnclId == null) ? string.Empty : this.SeUserCnclId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="FeeInvoiceBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(FeeInvoiceBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="FeeInvoiceBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="FeeInvoiceBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="FeeInvoiceBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(FeeInvoiceBase Object1, FeeInvoiceBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.FeeInvoiceId != Object2.FeeInvoiceId)
				equal = false;
			if ( Object1.SpoSponsorId != null && Object2.SpoSponsorId != null )
			{
				if (Object1.SpoSponsorId != Object2.SpoSponsorId)
					equal = false;
			}
			else if (Object1.SpoSponsorId == null ^ Object2.SpoSponsorId == null )
			{
				equal = false;
			}
			if ( Object1.EdStudId != null && Object2.EdStudId != null )
			{
				if (Object1.EdStudId != Object2.EdStudId)
					equal = false;
			}
			else if (Object1.EdStudId == null ^ Object2.EdStudId == null )
			{
				equal = false;
			}
			if (Object1.InvocDate != Object2.InvocDate)
				equal = false;
			if (Object1.InvocNum != Object2.InvocNum)
				equal = false;
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if (Object1.TotInvocAmnt != Object2.TotInvocAmnt)
				equal = false;
			if (Object1.TotRemainAmnt != Object2.TotRemainAmnt)
				equal = false;
			if ( Object1.DiscTypeId != null && Object2.DiscTypeId != null )
			{
				if (Object1.DiscTypeId != Object2.DiscTypeId)
					equal = false;
			}
			else if (Object1.DiscTypeId == null ^ Object2.DiscTypeId == null )
			{
				equal = false;
			}
			if ( Object1.DiscAmount != null && Object2.DiscAmount != null )
			{
				if (Object1.DiscAmount != Object2.DiscAmount)
					equal = false;
			}
			else if (Object1.DiscAmount == null ^ Object2.DiscAmount == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.DueDate != null && Object2.DueDate != null )
			{
				if (Object1.DueDate != Object2.DueDate)
					equal = false;
			}
			else if (Object1.DueDate == null ^ Object2.DueDate == null )
			{
				equal = false;
			}
			if (Object1.FeeCdeInvocStatusId != Object2.FeeCdeInvocStatusId)
				equal = false;
			if (Object1.InvocTypeId != Object2.InvocTypeId)
				equal = false;
			if ( Object1.FeeInvoicePrntId != null && Object2.FeeInvoicePrntId != null )
			{
				if (Object1.FeeInvoicePrntId != Object2.FeeInvoicePrntId)
					equal = false;
			}
			else if (Object1.FeeInvoicePrntId == null ^ Object2.FeeInvoicePrntId == null )
			{
				equal = false;
			}
			if ( Object1.AttchdDocPath != null && Object2.AttchdDocPath != null )
			{
				if (Object1.AttchdDocPath != Object2.AttchdDocPath)
					equal = false;
			}
			else if (Object1.AttchdDocPath == null ^ Object2.AttchdDocPath == null )
			{
				equal = false;
			}
			if (Object1.GsCodeCurrencyId != Object2.GsCodeCurrencyId)
				equal = false;
			if ( Object1.UserName != null && Object2.UserName != null )
			{
				if (Object1.UserName != Object2.UserName)
					equal = false;
			}
			else if (Object1.UserName == null ^ Object2.UserName == null )
			{
				equal = false;
			}
			if ( Object1.CancelFlg != null && Object2.CancelFlg != null )
			{
				if (Object1.CancelFlg != Object2.CancelFlg)
					equal = false;
			}
			else if (Object1.CancelFlg == null ^ Object2.CancelFlg == null )
			{
				equal = false;
			}
			if ( Object1.CancelDate != null && Object2.CancelDate != null )
			{
				if (Object1.CancelDate != Object2.CancelDate)
					equal = false;
			}
			else if (Object1.CancelDate == null ^ Object2.CancelDate == null )
			{
				equal = false;
			}
			if ( Object1.SeUserCnclId != null && Object2.SeUserCnclId != null )
			{
				if (Object1.SeUserCnclId != Object2.SeUserCnclId)
					equal = false;
			}
			else if (Object1.SeUserCnclId == null ^ Object2.SeUserCnclId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((FeeInvoiceBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static FeeInvoiceComparer GetComparer()
        {
            return new FeeInvoiceComparer();
        }
        */

        // Comparer delegates back to FeeInvoice
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(FeeInvoice rhs, FeeInvoiceColumn which)
        {
            switch (which)
            {
            	
            	
            	case FeeInvoiceColumn.FeeInvoiceId:
            		return this.FeeInvoiceId.CompareTo(rhs.FeeInvoiceId);
            		
            		                 
            	
            	
            	case FeeInvoiceColumn.SpoSponsorId:
            		return this.SpoSponsorId.Value.CompareTo(rhs.SpoSponsorId.Value);
            		
            		                 
            	
            	
            	case FeeInvoiceColumn.EdStudId:
            		return this.EdStudId.Value.CompareTo(rhs.EdStudId.Value);
            		
            		                 
            	
            	
            	case FeeInvoiceColumn.InvocDate:
            		return this.InvocDate.CompareTo(rhs.InvocDate);
            		
            		                 
            	
            	
            	case FeeInvoiceColumn.InvocNum:
            		return this.InvocNum.CompareTo(rhs.InvocNum);
            		
            		                 
            	
            	
            	case FeeInvoiceColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case FeeInvoiceColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case FeeInvoiceColumn.TotInvocAmnt:
            		return this.TotInvocAmnt.CompareTo(rhs.TotInvocAmnt);
            		
            		                 
            	
            	
            	case FeeInvoiceColumn.TotRemainAmnt:
            		return this.TotRemainAmnt.CompareTo(rhs.TotRemainAmnt);
            		
            		                 
            	
            	
            	case FeeInvoiceColumn.DiscTypeId:
            		return this.DiscTypeId.Value.CompareTo(rhs.DiscTypeId.Value);
            		
            		                 
            	
            	
            	case FeeInvoiceColumn.DiscAmount:
            		return this.DiscAmount.Value.CompareTo(rhs.DiscAmount.Value);
            		
            		                 
            	
            	
            	case FeeInvoiceColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case FeeInvoiceColumn.DueDate:
            		return this.DueDate.Value.CompareTo(rhs.DueDate.Value);
            		
            		                 
            	
            	
            	case FeeInvoiceColumn.FeeCdeInvocStatusId:
            		return this.FeeCdeInvocStatusId.CompareTo(rhs.FeeCdeInvocStatusId);
            		
            		                 
            	
            	
            	case FeeInvoiceColumn.InvocTypeId:
            		return this.InvocTypeId.CompareTo(rhs.InvocTypeId);
            		
            		                 
            	
            	
            	case FeeInvoiceColumn.FeeInvoicePrntId:
            		return this.FeeInvoicePrntId.Value.CompareTo(rhs.FeeInvoicePrntId.Value);
            		
            		                 
            	
            	
            	case FeeInvoiceColumn.AttchdDocPath:
            		return this.AttchdDocPath.CompareTo(rhs.AttchdDocPath);
            		
            		                 
            	
            	
            	case FeeInvoiceColumn.GsCodeCurrencyId:
            		return this.GsCodeCurrencyId.CompareTo(rhs.GsCodeCurrencyId);
            		
            		                 
            	
            	
            	case FeeInvoiceColumn.UserName:
            		return this.UserName.CompareTo(rhs.UserName);
            		
            		                 
            	
            	
            	case FeeInvoiceColumn.CancelFlg:
            		return this.CancelFlg.Value.CompareTo(rhs.CancelFlg.Value);
            		
            		                 
            	
            	
            	case FeeInvoiceColumn.CancelDate:
            		return this.CancelDate.Value.CompareTo(rhs.CancelDate.Value);
            		
            		                 
            	
            	
            	case FeeInvoiceColumn.SeUserCnclId:
            		return this.SeUserCnclId.Value.CompareTo(rhs.SeUserCnclId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<FeeInvoiceKey> Members
		
		// member variable for the EntityId property
		private FeeInvoiceKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual FeeInvoiceKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new FeeInvoiceKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("FeeInvoice")
					.Append("|").Append( this.FeeInvoiceId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{23}{22}- FeeInvoiceId: {0}{22}- SpoSponsorId: {1}{22}- EdStudId: {2}{22}- InvocDate: {3}{22}- InvocNum: {4}{22}- SeUserId: {5}{22}- LastDate: {6}{22}- TotInvocAmnt: {7}{22}- TotRemainAmnt: {8}{22}- DiscTypeId: {9}{22}- DiscAmount: {10}{22}- Notes: {11}{22}- DueDate: {12}{22}- FeeCdeInvocStatusId: {13}{22}- InvocTypeId: {14}{22}- FeeInvoicePrntId: {15}{22}- AttchdDocPath: {16}{22}- GsCodeCurrencyId: {17}{22}- UserName: {18}{22}- CancelFlg: {19}{22}- CancelDate: {20}{22}- SeUserCnclId: {21}{22}{24}", 
				this.FeeInvoiceId,
				(this.SpoSponsorId == null) ? string.Empty : this.SpoSponsorId.ToString(),
				(this.EdStudId == null) ? string.Empty : this.EdStudId.ToString(),
				this.InvocDate,
				this.InvocNum,
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				this.TotInvocAmnt,
				this.TotRemainAmnt,
				(this.DiscTypeId == null) ? string.Empty : this.DiscTypeId.ToString(),
				(this.DiscAmount == null) ? string.Empty : this.DiscAmount.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.DueDate == null) ? string.Empty : this.DueDate.ToString(),
				this.FeeCdeInvocStatusId,
				this.InvocTypeId,
				(this.FeeInvoicePrntId == null) ? string.Empty : this.FeeInvoicePrntId.ToString(),
				(this.AttchdDocPath == null) ? string.Empty : this.AttchdDocPath.ToString(),
				this.GsCodeCurrencyId,
				(this.UserName == null) ? string.Empty : this.UserName.ToString(),
				(this.CancelFlg == null) ? string.Empty : this.CancelFlg.ToString(),
				(this.CancelDate == null) ? string.Empty : this.CancelDate.ToString(),
				(this.SeUserCnclId == null) ? string.Empty : this.SeUserCnclId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'FEE_INVOICE' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class FeeInvoiceEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// FEE_INVOICE_ID : فاتورة كفيل- or credit memo
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "FEE_INVOICE"</remarks>
		public System.Decimal FeeInvoiceId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalFeeInvoiceId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SPO_SPONSOR_ID : XXORGANIZATION_ID
		/// </summary>
		public System.Decimal?		  SpoSponsorId = null;
		
		/// <summary>
		/// ED_STUD_ID : later on
		/// </summary>
		public System.Decimal?		  EdStudId = null;
		
		/// <summary>
		/// INVOC_DATE : تاريخ  الفاتورة
		/// </summary>
		public System.DateTime		  InvocDate = DateTime.MinValue;
		
		/// <summary>
		/// INVOC_NUM : Inovice serial - credit memo serial:CM000
		/// </summary>
		public System.String		  InvocNum = string.Empty;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// TOT_INVOC_AMNT : اجمالى القيم المسددة
		/// </summary>
		public System.Decimal		  TotInvocAmnt = 0.0m;
		
		/// <summary>
		/// TOT_REMAIN_AMNT : اجمالى المتبقى من الفاتورة
		/// </summary>
		public System.Decimal		  TotRemainAmnt = 0.0m;
		
		/// <summary>
		/// DISC_TYPE_ID : 1: amount  2:percentXX
		/// </summary>
		public System.Int32?		  DiscTypeId = null;
		
		/// <summary>
		/// DISC_AMOUNT : XXX  replaced by FEE_STUD_VOUCHER.DISC_AMOUNT  usednot affect items
		/// </summary>
		public System.Decimal?		  DiscAmount = null;
		
		/// <summary>
		/// NOTES : بيان الفاتورة
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// DUE_DATE : تاريخ الاستحقاق
		/// </summary>
		public System.DateTime?		  DueDate = null;
		
		/// <summary>
		/// FEE_CDE_INVOC_STATUS_ID : new-review-paied-cancel
		/// </summary>
		public System.Int32		  FeeCdeInvocStatusId = (int)0;
		
		/// <summary>
		/// INVOC_TYPE_ID : 1=invoc -- 2=Crdit Memo -3 down payment
		/// </summary>
		public System.Int32		  InvocTypeId = (int)0;
		
		/// <summary>
		/// FEE_INVOICE_PRNT_ID : in case of Credit memo record type_id=2
		/// </summary>
		public System.Decimal?		  FeeInvoicePrntId = null;
		
		/// <summary>
		/// ATTCHD_DOC_PATH : صورة
		/// </summary>
		public System.String		  AttchdDocPath = null;
		
		/// <summary>
		/// GS_CODE_CURRENCY_ID : عملة
		/// </summary>
		public System.Decimal		  GsCodeCurrencyId = 0.0m;
		
		/// <summary>
		/// User_Name : =web if online
		/// </summary>
		public System.String		  UserName = null;
		
		/// <summary>
		/// CANCEL_FLG : شرطفاتورة غير مدفعوعة
		/// </summary>
		public System.Boolean?		  CancelFlg = null;
		
		/// <summary>
		/// CANCEL_DATE : 
		/// </summary>
		public System.DateTime?		  CancelDate = null;
		
		/// <summary>
		/// SE_USER_CNCL_ID : 
		/// </summary>
		public System.Decimal?		  SeUserCnclId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		private FeeCdeInvocStatus _feeCdeInvocStatusIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeCdeInvocStatus"/>.
		/// </summary>
		/// <value>The source FeeCdeInvocStatus for FeeCdeInvocStatusId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeCdeInvocStatus FeeCdeInvocStatusIdSource
      	{
            get { return this._feeCdeInvocStatusIdSource; }
            set { this._feeCdeInvocStatusIdSource = value; }
      	}
		private FeeInvoice _feeInvoicePrntIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeInvoice"/>.
		/// </summary>
		/// <value>The source FeeInvoice for FeeInvoicePrntId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeInvoice FeeInvoicePrntIdSource
      	{
            get { return this._feeInvoicePrntIdSource; }
            set { this._feeInvoicePrntIdSource = value; }
      	}
		private GsCodeCurrency _gsCodeCurrencyIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodeCurrency"/>.
		/// </summary>
		/// <value>The source GsCodeCurrency for GsCodeCurrencyId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodeCurrency GsCodeCurrencyIdSource
      	{
            get { return this._gsCodeCurrencyIdSource; }
            set { this._gsCodeCurrencyIdSource = value; }
      	}
		private SpoSponsor _spoSponsorIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SpoSponsor"/>.
		/// </summary>
		/// <value>The source SpoSponsor for SpoSponsorId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SpoSponsor SpoSponsorIdSource
      	{
            get { return this._spoSponsorIdSource; }
            set { this._spoSponsorIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region FeeStudVoucherItemCollection
		
		private TList<FeeStudVoucherItem> _feeStudVoucherItemFeeInvoiceId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeStudVoucherItemFeeInvoiceId
		/// </summary>
		
		public TList<FeeStudVoucherItem> FeeStudVoucherItemCollection
		{
			get
			{
				if (_feeStudVoucherItemFeeInvoiceId == null)
				{
				_feeStudVoucherItemFeeInvoiceId = new TList<FeeStudVoucherItem>();
				}
	
				return _feeStudVoucherItemFeeInvoiceId;
			}
			set { _feeStudVoucherItemFeeInvoiceId = value; }
		}
		
		#endregion

		#region FeeInvoiceItemCollection
		
		private TList<FeeInvoiceItem> _feeInvoiceItemFeeInvoiceId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeInvoiceItemFeeInvoiceId
		/// </summary>
		
		public TList<FeeInvoiceItem> FeeInvoiceItemCollection
		{
			get
			{
				if (_feeInvoiceItemFeeInvoiceId == null)
				{
				_feeInvoiceItemFeeInvoiceId = new TList<FeeInvoiceItem>();
				}
	
				return _feeInvoiceItemFeeInvoiceId;
			}
			set { _feeInvoiceItemFeeInvoiceId = value; }
		}
		
		#endregion

		#region FeeVoucherInvocCollection
		
		private TList<FeeVoucherInvoc> _feeVoucherInvocFeeInvoiceId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeVoucherInvocFeeInvoiceId
		/// </summary>
		
		public TList<FeeVoucherInvoc> FeeVoucherInvocCollection
		{
			get
			{
				if (_feeVoucherInvocFeeInvoiceId == null)
				{
				_feeVoucherInvocFeeInvoiceId = new TList<FeeVoucherInvoc>();
				}
	
				return _feeVoucherInvocFeeInvoiceId;
			}
			set { _feeVoucherInvocFeeInvoiceId = value; }
		}
		
		#endregion

		#region FeeInvoiceCollection
		
		private TList<FeeInvoice> _feeInvoiceFeeInvoicePrntId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeInvoiceFeeInvoicePrntId
		/// </summary>
		
		public TList<FeeInvoice> FeeInvoiceCollection
		{
			get
			{
				if (_feeInvoiceFeeInvoicePrntId == null)
				{
				_feeInvoiceFeeInvoicePrntId = new TList<FeeInvoice>();
				}
	
				return _feeInvoiceFeeInvoicePrntId;
			}
			set { _feeInvoiceFeeInvoicePrntId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			FeeInvoiceEntityData _tmp = new FeeInvoiceEntityData();
						
			_tmp.FeeInvoiceId = this.FeeInvoiceId;
			_tmp.OriginalFeeInvoiceId = this.OriginalFeeInvoiceId;
			
			_tmp.SpoSponsorId = this.SpoSponsorId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.InvocDate = this.InvocDate;
			_tmp.InvocNum = this.InvocNum;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.TotInvocAmnt = this.TotInvocAmnt;
			_tmp.TotRemainAmnt = this.TotRemainAmnt;
			_tmp.DiscTypeId = this.DiscTypeId;
			_tmp.DiscAmount = this.DiscAmount;
			_tmp.Notes = this.Notes;
			_tmp.DueDate = this.DueDate;
			_tmp.FeeCdeInvocStatusId = this.FeeCdeInvocStatusId;
			_tmp.InvocTypeId = this.InvocTypeId;
			_tmp.FeeInvoicePrntId = this.FeeInvoicePrntId;
			_tmp.AttchdDocPath = this.AttchdDocPath;
			_tmp.GsCodeCurrencyId = this.GsCodeCurrencyId;
			_tmp.UserName = this.UserName;
			_tmp.CancelFlg = this.CancelFlg;
			_tmp.CancelDate = this.CancelDate;
			_tmp.SeUserCnclId = this.SeUserCnclId;
			
			#region Source Parent Composite Entities
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			if (this.FeeCdeInvocStatusIdSource != null)
				_tmp.FeeCdeInvocStatusIdSource = MakeCopyOf(this.FeeCdeInvocStatusIdSource) as FeeCdeInvocStatus;
			if (this.FeeInvoicePrntIdSource != null)
				_tmp.FeeInvoicePrntIdSource = MakeCopyOf(this.FeeInvoicePrntIdSource) as FeeInvoice;
			if (this.GsCodeCurrencyIdSource != null)
				_tmp.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource) as GsCodeCurrency;
			if (this.SpoSponsorIdSource != null)
				_tmp.SpoSponsorIdSource = MakeCopyOf(this.SpoSponsorIdSource) as SpoSponsor;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._feeStudVoucherItemFeeInvoiceId != null)
				_tmp.FeeStudVoucherItemCollection = (TList<FeeStudVoucherItem>) MakeCopyOf(this.FeeStudVoucherItemCollection); 
			if (this._feeInvoiceItemFeeInvoiceId != null)
				_tmp.FeeInvoiceItemCollection = (TList<FeeInvoiceItem>) MakeCopyOf(this.FeeInvoiceItemCollection); 
			if (this._feeVoucherInvocFeeInvoiceId != null)
				_tmp.FeeVoucherInvocCollection = (TList<FeeVoucherInvoc>) MakeCopyOf(this.FeeVoucherInvocCollection); 
			if (this._feeInvoiceFeeInvoicePrntId != null)
				_tmp.FeeInvoiceCollection = (TList<FeeInvoice>) MakeCopyOf(this.FeeInvoiceCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			FeeInvoiceEntityData _tmp = new FeeInvoiceEntityData();
						
			_tmp.FeeInvoiceId = this.FeeInvoiceId;
			_tmp.OriginalFeeInvoiceId = this.OriginalFeeInvoiceId;
			
			_tmp.SpoSponsorId = this.SpoSponsorId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.InvocDate = this.InvocDate;
			_tmp.InvocNum = this.InvocNum;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.TotInvocAmnt = this.TotInvocAmnt;
			_tmp.TotRemainAmnt = this.TotRemainAmnt;
			_tmp.DiscTypeId = this.DiscTypeId;
			_tmp.DiscAmount = this.DiscAmount;
			_tmp.Notes = this.Notes;
			_tmp.DueDate = this.DueDate;
			_tmp.FeeCdeInvocStatusId = this.FeeCdeInvocStatusId;
			_tmp.InvocTypeId = this.InvocTypeId;
			_tmp.FeeInvoicePrntId = this.FeeInvoicePrntId;
			_tmp.AttchdDocPath = this.AttchdDocPath;
			_tmp.GsCodeCurrencyId = this.GsCodeCurrencyId;
			_tmp.UserName = this.UserName;
			_tmp.CancelFlg = this.CancelFlg;
			_tmp.CancelDate = this.CancelDate;
			_tmp.SeUserCnclId = this.SeUserCnclId;
			
			#region Source Parent Composite Entities
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.FeeCdeInvocStatusIdSource != null && existingCopies.Contains(this.FeeCdeInvocStatusIdSource))
				_tmp.FeeCdeInvocStatusIdSource = existingCopies[this.FeeCdeInvocStatusIdSource] as FeeCdeInvocStatus;
			else
				_tmp.FeeCdeInvocStatusIdSource = MakeCopyOf(this.FeeCdeInvocStatusIdSource, existingCopies) as FeeCdeInvocStatus;
			if (this.FeeInvoicePrntIdSource != null && existingCopies.Contains(this.FeeInvoicePrntIdSource))
				_tmp.FeeInvoicePrntIdSource = existingCopies[this.FeeInvoicePrntIdSource] as FeeInvoice;
			else
				_tmp.FeeInvoicePrntIdSource = MakeCopyOf(this.FeeInvoicePrntIdSource, existingCopies) as FeeInvoice;
			if (this.GsCodeCurrencyIdSource != null && existingCopies.Contains(this.GsCodeCurrencyIdSource))
				_tmp.GsCodeCurrencyIdSource = existingCopies[this.GsCodeCurrencyIdSource] as GsCodeCurrency;
			else
				_tmp.GsCodeCurrencyIdSource = MakeCopyOf(this.GsCodeCurrencyIdSource, existingCopies) as GsCodeCurrency;
			if (this.SpoSponsorIdSource != null && existingCopies.Contains(this.SpoSponsorIdSource))
				_tmp.SpoSponsorIdSource = existingCopies[this.SpoSponsorIdSource] as SpoSponsor;
			else
				_tmp.SpoSponsorIdSource = MakeCopyOf(this.SpoSponsorIdSource, existingCopies) as SpoSponsor;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.FeeStudVoucherItemCollection = (TList<FeeStudVoucherItem>) MakeCopyOf(this.FeeStudVoucherItemCollection, existingCopies); 
			_tmp.FeeInvoiceItemCollection = (TList<FeeInvoiceItem>) MakeCopyOf(this.FeeInvoiceItemCollection, existingCopies); 
			_tmp.FeeVoucherInvocCollection = (TList<FeeVoucherInvoc>) MakeCopyOf(this.FeeVoucherInvocCollection, existingCopies); 
			_tmp.FeeInvoiceCollection = (TList<FeeInvoice>) MakeCopyOf(this.FeeInvoiceCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeInvoiceColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(FeeInvoiceColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeInvoiceColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(FeeInvoiceColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeInvoiceColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(FeeInvoiceColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				FeeInvoiceEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new FeeInvoiceEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeInvoiceColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(FeeInvoiceColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				FeeInvoiceEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new FeeInvoiceEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region FeeInvoiceEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="FeeInvoice"/> object.
	/// </remarks>
	public class FeeInvoiceEventArgs : System.EventArgs
	{
		private FeeInvoiceColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the FeeInvoiceEventArgs class.
		///</summary>
		public FeeInvoiceEventArgs(FeeInvoiceColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the FeeInvoiceEventArgs class.
		///</summary>
		public FeeInvoiceEventArgs(FeeInvoiceColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The FeeInvoiceColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="FeeInvoiceColumn" />
		public FeeInvoiceColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all FeeInvoice related events.
	///</summary>
	public delegate void FeeInvoiceEventHandler(object sender, FeeInvoiceEventArgs e);
	
	#region FeeInvoiceComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class FeeInvoiceComparer : System.Collections.Generic.IComparer<FeeInvoice>
	{
		FeeInvoiceColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:FeeInvoiceComparer"/> class.
        /// </summary>
		public FeeInvoiceComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:FeeInvoiceComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public FeeInvoiceComparer(FeeInvoiceColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="FeeInvoice"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="FeeInvoice"/> to compare.</param>
        /// <param name="b">The second <c>FeeInvoice</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(FeeInvoice a, FeeInvoice b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(FeeInvoice entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(FeeInvoice a, FeeInvoice b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public FeeInvoiceColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region FeeInvoiceKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="FeeInvoice"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class FeeInvoiceKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the FeeInvoiceKey class.
		/// </summary>
		public FeeInvoiceKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeInvoiceKey class.
		/// </summary>
		public FeeInvoiceKey(FeeInvoiceBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.FeeInvoiceId = entity.FeeInvoiceId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeInvoiceKey class.
		/// </summary>
		public FeeInvoiceKey(System.Decimal _feeInvoiceId)
		{
			#region Init Properties

			this.FeeInvoiceId = _feeInvoiceId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private FeeInvoiceBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public FeeInvoiceBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the FeeInvoiceId property
		private System.Decimal _feeInvoiceId;
		
		/// <summary>
		/// Gets or sets the FeeInvoiceId property.
		/// </summary>
		public System.Decimal FeeInvoiceId
		{
			get { return _feeInvoiceId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.FeeInvoiceId = value;
				
				_feeInvoiceId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				FeeInvoiceId = ( values["FeeInvoiceId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["FeeInvoiceId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("FeeInvoiceId", FeeInvoiceId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("FeeInvoiceId: {0}{1}",
								FeeInvoiceId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region FeeInvoiceColumn Enum
	
	/// <summary>
	/// Enumerate the FeeInvoice columns.
	/// </summary>
	[Serializable]
	public enum FeeInvoiceColumn : int
	{
		/// <summary>
		/// FeeInvoiceId : فاتورة كفيل- or credit memo
		/// </summary>
		[EnumTextValue("FEE_INVOICE_ID")]
		[ColumnEnum("FEE_INVOICE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		FeeInvoiceId = 1,
		/// <summary>
		/// SpoSponsorId : XXORGANIZATION_ID
		/// </summary>
		[EnumTextValue("SPO_SPONSOR_ID")]
		[ColumnEnum("SPO_SPONSOR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SpoSponsorId = 2,
		/// <summary>
		/// EdStudId : later on
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdStudId = 3,
		/// <summary>
		/// InvocDate : تاريخ  الفاتورة
		/// </summary>
		[EnumTextValue("INVOC_DATE")]
		[ColumnEnum("INVOC_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		InvocDate = 4,
		/// <summary>
		/// InvocNum : Inovice serial - credit memo serial:CM000
		/// </summary>
		[EnumTextValue("INVOC_NUM")]
		[ColumnEnum("INVOC_NUM", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		InvocNum = 5,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 6,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 7,
		/// <summary>
		/// TotInvocAmnt : اجمالى القيم المسددة
		/// </summary>
		[EnumTextValue("TOT_INVOC_AMNT")]
		[ColumnEnum("TOT_INVOC_AMNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		TotInvocAmnt = 8,
		/// <summary>
		/// TotRemainAmnt : اجمالى المتبقى من الفاتورة
		/// </summary>
		[EnumTextValue("TOT_REMAIN_AMNT")]
		[ColumnEnum("TOT_REMAIN_AMNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		TotRemainAmnt = 9,
		/// <summary>
		/// DiscTypeId : 1: amount  2:percentXX
		/// </summary>
		[EnumTextValue("DISC_TYPE_ID")]
		[ColumnEnum("DISC_TYPE_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DiscTypeId = 10,
		/// <summary>
		/// DiscAmount : XXX  replaced by FEE_STUD_VOUCHER.DISC_AMOUNT  usednot affect items
		/// </summary>
		[EnumTextValue("DISC_AMOUNT")]
		[ColumnEnum("DISC_AMOUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DiscAmount = 11,
		/// <summary>
		/// Notes : بيان الفاتورة
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 1000)]
		Notes = 12,
		/// <summary>
		/// DueDate : تاريخ الاستحقاق
		/// </summary>
		[EnumTextValue("DUE_DATE")]
		[ColumnEnum("DUE_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DueDate = 13,
		/// <summary>
		/// FeeCdeInvocStatusId : new-review-paied-cancel
		/// </summary>
		[EnumTextValue("FEE_CDE_INVOC_STATUS_ID")]
		[ColumnEnum("FEE_CDE_INVOC_STATUS_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		FeeCdeInvocStatusId = 14,
		/// <summary>
		/// InvocTypeId : 1=invoc -- 2=Crdit Memo -3 down payment
		/// </summary>
		[EnumTextValue("INVOC_TYPE_ID")]
		[ColumnEnum("INVOC_TYPE_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		InvocTypeId = 15,
		/// <summary>
		/// FeeInvoicePrntId : in case of Credit memo record type_id=2
		/// </summary>
		[EnumTextValue("FEE_INVOICE_PRNT_ID")]
		[ColumnEnum("FEE_INVOICE_PRNT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FeeInvoicePrntId = 16,
		/// <summary>
		/// AttchdDocPath : صورة
		/// </summary>
		[EnumTextValue("ATTCHD_DOC_PATH")]
		[ColumnEnum("ATTCHD_DOC_PATH", typeof(System.String), System.Data.DbType.String, false, false, true)]
		AttchdDocPath = 17,
		/// <summary>
		/// GsCodeCurrencyId : عملة
		/// </summary>
		[EnumTextValue("GS_CODE_CURRENCY_ID")]
		[ColumnEnum("GS_CODE_CURRENCY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsCodeCurrencyId = 18,
		/// <summary>
		/// UserName : =web if online
		/// </summary>
		[EnumTextValue("User_Name")]
		[ColumnEnum("User_Name", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		UserName = 19,
		/// <summary>
		/// CancelFlg : شرطفاتورة غير مدفعوعة
		/// </summary>
		[EnumTextValue("CANCEL_FLG")]
		[ColumnEnum("CANCEL_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		CancelFlg = 20,
		/// <summary>
		/// CancelDate : 
		/// </summary>
		[EnumTextValue("CANCEL_DATE")]
		[ColumnEnum("CANCEL_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CancelDate = 21,
		/// <summary>
		/// SeUserCnclId : 
		/// </summary>
		[EnumTextValue("SE_USER_CNCL_ID")]
		[ColumnEnum("SE_USER_CNCL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserCnclId = 22
	}//End enum

	#endregion FeeInvoiceColumn Enum

} // end namespace
