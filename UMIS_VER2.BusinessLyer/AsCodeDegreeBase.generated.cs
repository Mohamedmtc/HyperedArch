
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AsCodeDegree.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'AS_CODE_DEGREE' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AsCodeDegreeBase : EntityBase, IAsCodeDegree, IEntityId<AsCodeDegreeKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AsCodeDegreeEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AsCodeDegreeEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AsCodeDegreeEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AsCodeDegree> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AsCodeDegreeEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AsCodeDegreeEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AsCodeDegreeBase"/> instance.
		///</summary>
		public AsCodeDegreeBase()
		{
			this.entityData = new AsCodeDegreeEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AsCodeDegreeBase"/> instance.
		///</summary>
		///<param name="_asCodeDegreeId">مسلسل الدرجة العلمية</param>
		///<param name="_asCodeDegreeClassId">مسلسل نوع الدرجة العلمية</param>
		///<param name="_degreeDescrAr"></param>
		///<param name="_degreeDescrEn"></param>
		///<param name="_degreeCode"></param>
		///<param name="_linkDegreeId">KU 1,2</param>
		///<param name="_notation"></param>
		///<param name="_admHint"></param>
		public AsCodeDegreeBase(System.Decimal _asCodeDegreeId, System.Decimal _asCodeDegreeClassId, 
			System.String _degreeDescrAr, System.String _degreeDescrEn, System.String _degreeCode, 
			System.Int32? _linkDegreeId, System.Int32? _notation, System.String _admHint)
		{
			this.entityData = new AsCodeDegreeEntityData();
			this.backupData = null;

			this.AsCodeDegreeId = _asCodeDegreeId;
			this.AsCodeDegreeClassId = _asCodeDegreeClassId;
			this.DegreeDescrAr = _degreeDescrAr;
			this.DegreeDescrEn = _degreeDescrEn;
			this.DegreeCode = _degreeCode;
			this.LinkDegreeId = _linkDegreeId;
			this.Notation = _notation;
			this.AdmHint = _admHint;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AsCodeDegree"/> instance.
		///</summary>
		///<param name="_asCodeDegreeId">مسلسل الدرجة العلمية</param>
		///<param name="_asCodeDegreeClassId">مسلسل نوع الدرجة العلمية</param>
		///<param name="_degreeDescrAr"></param>
		///<param name="_degreeDescrEn"></param>
		///<param name="_degreeCode"></param>
		///<param name="_linkDegreeId">KU 1,2</param>
		///<param name="_notation"></param>
		///<param name="_admHint"></param>
		public static AsCodeDegree CreateAsCodeDegree(System.Decimal _asCodeDegreeId, System.Decimal _asCodeDegreeClassId, 
			System.String _degreeDescrAr, System.String _degreeDescrEn, System.String _degreeCode, 
			System.Int32? _linkDegreeId, System.Int32? _notation, System.String _admHint)
		{
			AsCodeDegree newAsCodeDegree = new AsCodeDegree();
			newAsCodeDegree.AsCodeDegreeId = _asCodeDegreeId;
			newAsCodeDegree.AsCodeDegreeClassId = _asCodeDegreeClassId;
			newAsCodeDegree.DegreeDescrAr = _degreeDescrAr;
			newAsCodeDegree.DegreeDescrEn = _degreeDescrEn;
			newAsCodeDegree.DegreeCode = _degreeCode;
			newAsCodeDegree.LinkDegreeId = _linkDegreeId;
			newAsCodeDegree.Notation = _notation;
			newAsCodeDegree.AdmHint = _admHint;
			return newAsCodeDegree;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeId property. 
		///		مسلسل الدرجة العلمية
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"مسلسل الدرجة العلمية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal AsCodeDegreeId
		{
			get
			{
				return this.entityData.AsCodeDegreeId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeId == value)
					return;
					
				OnColumnChanging(AsCodeDegreeColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				this.entityData.AsCodeDegreeId = value;
				this.EntityId.AsCodeDegreeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AsCodeDegreeColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				OnPropertyChanged("AsCodeDegreeId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the AS_CODE_DEGREE_ID property.
		///		مسلسل الدرجة العلمية
		/// </summary>
		/// <remarks>This is the original value of the AS_CODE_DEGREE_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalAsCodeDegreeId
		{
			get { return this.entityData.OriginalAsCodeDegreeId; }
			set { this.entityData.OriginalAsCodeDegreeId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeClassId property. 
		///		مسلسل نوع الدرجة العلمية
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"مسلسل نوع الدرجة العلمية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsCodeDegreeClassId
		{
			get
			{
				return this.entityData.AsCodeDegreeClassId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeClassId == value)
					return;
					
				OnColumnChanging(AsCodeDegreeColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				this.entityData.AsCodeDegreeClassId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AsCodeDegreeColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				OnPropertyChanged("AsCodeDegreeClassId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DegreeDescrAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 150)]
		public virtual System.String DegreeDescrAr
		{
			get
			{
				return this.entityData.DegreeDescrAr; 
			}
			
			set
			{
				if (this.entityData.DegreeDescrAr == value)
					return;
					
				OnColumnChanging(AsCodeDegreeColumn.DegreeDescrAr, this.entityData.DegreeDescrAr);
				this.entityData.DegreeDescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AsCodeDegreeColumn.DegreeDescrAr, this.entityData.DegreeDescrAr);
				OnPropertyChanged("DegreeDescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DegreeDescrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String DegreeDescrEn
		{
			get
			{
				return this.entityData.DegreeDescrEn; 
			}
			
			set
			{
				if (this.entityData.DegreeDescrEn == value)
					return;
					
				OnColumnChanging(AsCodeDegreeColumn.DegreeDescrEn, this.entityData.DegreeDescrEn);
				this.entityData.DegreeDescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AsCodeDegreeColumn.DegreeDescrEn, this.entityData.DegreeDescrEn);
				OnPropertyChanged("DegreeDescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DegreeCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String DegreeCode
		{
			get
			{
				return this.entityData.DegreeCode; 
			}
			
			set
			{
				if (this.entityData.DegreeCode == value)
					return;
					
				OnColumnChanging(AsCodeDegreeColumn.DegreeCode, this.entityData.DegreeCode);
				this.entityData.DegreeCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AsCodeDegreeColumn.DegreeCode, this.entityData.DegreeCode);
				OnPropertyChanged("DegreeCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LinkDegreeId property. 
		///		KU 1,2
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLinkDegreeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"KU 1,2"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LinkDegreeId
		{
			get
			{
				return this.entityData.LinkDegreeId; 
			}
			
			set
			{
				if (this.entityData.LinkDegreeId == value)
					return;
					
				OnColumnChanging(AsCodeDegreeColumn.LinkDegreeId, this.entityData.LinkDegreeId);
				this.entityData.LinkDegreeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AsCodeDegreeColumn.LinkDegreeId, this.entityData.LinkDegreeId);
				OnPropertyChanged("LinkDegreeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notation property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsNotationNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Notation
		{
			get
			{
				return this.entityData.Notation; 
			}
			
			set
			{
				if (this.entityData.Notation == value)
					return;
					
				OnColumnChanging(AsCodeDegreeColumn.Notation, this.entityData.Notation);
				this.entityData.Notation = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AsCodeDegreeColumn.Notation, this.entityData.Notation);
				OnPropertyChanged("Notation");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmHint property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String AdmHint
		{
			get
			{
				return this.entityData.AdmHint; 
			}
			
			set
			{
				if (this.entityData.AdmHint == value)
					return;
					
				OnColumnChanging(AsCodeDegreeColumn.AdmHint, this.entityData.AdmHint);
				this.entityData.AdmHint = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AsCodeDegreeColumn.AdmHint, this.entityData.AdmHint);
				OnPropertyChanged("AdmHint");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return entityData.AsCodeDegreeClassIdSource; }
            set { entityData.AsCodeDegreeClassIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of AdmAppRegHistory objects
		///	which are related to this object through the relation FK_ADM_APP_REG_HISTORY_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppRegHistory> AdmAppRegHistoryCollection
		{
			get { return entityData.AdmAppRegHistoryCollection; }
			set { entityData.AdmAppRegHistoryCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmReqDoc objects
		///	which are related to this object through the relation FK_ADM_REQ_DOC_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmReqDoc> AdmReqDocCollection
		{
			get { return entityData.AdmReqDocCollection; }
			set { entityData.AdmReqDocCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudSemester objects
		///	which are related to this object through the relation FK_ED_STUD_SEMESTER_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudSemester> EdStudSemesterCollection
		{
			get { return entityData.EdStudSemesterCollection; }
			set { entityData.EdStudSemesterCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeFundRule objects
		///	which are related to this object through the relation FK_FEE_FUND_RULE_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeFundRule> FeeFundRuleCollection
		{
			get { return entityData.FeeFundRuleCollection; }
			set { entityData.FeeFundRuleCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SaScQual objects
		///	which are related to this object through the relation FK_SA_SC_QUAL_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SaScQual> SaScQualCollection
		{
			get { return entityData.SaScQualCollection; }
			set { entityData.SaScQualCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of PgThesisGrantDegree objects
		///	which are related to this object through the relation FK_PG_THESIS_GRANT_DEGREE_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgThesisGrantDegree> PgThesisGrantDegreeCollection
		{
			get { return entityData.PgThesisGrantDegreeCollection; }
			set { entityData.PgThesisGrantDegreeCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SeUserAccntDeg objects
		///	which are related to this object through the relation FK_SE_USER_ACCNT_DEG_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SeUserAccntDeg> SeUserAccntDegCollection
		{
			get { return entityData.SeUserAccntDegCollection; }
			set { entityData.SeUserAccntDegCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeInstlmntRule objects
		///	which are related to this object through the relation FK_FEE_INSTLMNT_RULE_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeInstlmntRule> FeeInstlmntRuleCollection
		{
			get { return entityData.FeeInstlmntRuleCollection; }
			set { entityData.FeeInstlmntRuleCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudFaculty objects
		///	which are related to this object through the relation FK_ED_STUD_FACULTY_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudFaculty> EdStudFacultyCollection
		{
			get { return entityData.EdStudFacultyCollection; }
			set { entityData.EdStudFacultyCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntityMain objects
		///	which are related to this object through the relation FK_ENTITY_MAIN_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntityMain> EntityMainCollection
		{
			get { return entityData.EntityMainCollection; }
			set { entityData.EntityMainCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EntPlcyAcadWarnDtl objects
		///	which are related to this object through the relation FK_ENT_PLCY_ACAD_WARN_DTL_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EntPlcyAcadWarnDtl> EntPlcyAcadWarnDtlCollection
		{
			get { return entityData.EntPlcyAcadWarnDtlCollection; }
			set { entityData.EntPlcyAcadWarnDtlCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeAllowanceRule objects
		///	which are related to this object through the relation FK_FEE_ALLOWANCE_RULE_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeAllowanceRule> FeeAllowanceRuleCollection
		{
			get { return entityData.FeeAllowanceRuleCollection; }
			set { entityData.FeeAllowanceRuleCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdBylaw objects
		///	which are related to this object through the relation FK_ED_BYLAW_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdBylaw> EdBylawCollection
		{
			get { return entityData.EdBylawCollection; }
			set { entityData.EdBylawCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeFacultyInstallment objects
		///	which are related to this object through the relation FK_FEE_FACULTY_INSTALLMENT_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeFacultyInstallment> FeeFacultyInstallmentCollection
		{
			get { return entityData.FeeFacultyInstallmentCollection; }
			set { entityData.FeeFacultyInstallmentCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmPrecondQual objects
		///	which are related to this object through the relation FK_ADM_PRECOND_QUAL_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmPrecondQual> AdmPrecondQualCollection
		{
			get { return entityData.AdmPrecondQualCollection; }
			set { entityData.AdmPrecondQualCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdCdeQualCat objects
		///	which are related to this object through the relation FK_ED_CDE_QUAL_CAT_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdCdeQualCat> EdCdeQualCatCollection
		{
			get { return entityData.EdCdeQualCatCollection; }
			set { entityData.EdCdeQualCatCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmRatingParametersMajors objects
		///	which are related to this object through the relation FK_ADM_RATING_PARAMETERS_MAJORS_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmRatingParametersMajors> AdmRatingParametersMajorsCollection
		{
			get { return entityData.AdmRatingParametersMajorsCollection; }
			set { entityData.AdmRatingParametersMajorsCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ScScheduleRsrv objects
		///	which are related to this object through the relation FK_SC_SCHEDULE_RSRV_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScScheduleRsrv> ScScheduleRsrvCollection
		{
			get { return entityData.ScScheduleRsrvCollection; }
			set { entityData.ScScheduleRsrvCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmAcceptanceCategory objects
		///	which are related to this object through the relation FK_ADM_ACCEPTANCE_CATEGORY_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAcceptanceCategory> AdmAcceptanceCategoryCollection
		{
			get { return entityData.AdmAcceptanceCategoryCollection; }
			set { entityData.AdmAcceptanceCategoryCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmTransAcceptanceCategory objects
		///	which are related to this object through the relation FK_ADM_TRANS_ACCEPTANCE_CATEGORY_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmTransAcceptanceCategory> AdmTransAcceptanceCategoryCollection
		{
			get { return entityData.AdmTransAcceptanceCategoryCollection; }
			set { entityData.AdmTransAcceptanceCategoryCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdResultApprove objects
		///	which are related to this object through the relation FK_ED_RESULT_APPROVE_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdResultApprove> EdResultApproveCollection
		{
			get { return entityData.EdResultApproveCollection; }
			set { entityData.EdResultApproveCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmCdePlacementExam objects
		///	which are related to this object through the relation FK_ADM_CDE_PLACEMENT_EXAM_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmCdePlacementExam> AdmCdePlacementExamCollection
		{
			get { return entityData.AdmCdePlacementExamCollection; }
			set { entityData.AdmCdePlacementExamCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeLimitRule objects
		///	which are related to this object through the relation FK_FEE_LIMIT_RULE_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeLimitRule> FeeLimitRuleCollection
		{
			get { return entityData.FeeLimitRuleCollection; }
			set { entityData.FeeLimitRuleCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdSemesterAgenda objects
		///	which are related to this object through the relation FK_ED_SEMESTER_AGENDA_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdSemesterAgenda> EdSemesterAgendaCollection
		{
			get { return entityData.EdSemesterAgendaCollection; }
			set { entityData.EdSemesterAgendaCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeCodeItem objects
		///	which are related to this object through the relation FK_FEE_CODE_ITEM_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeCodeItem> FeeCodeItemCollection
		{
			get { return entityData.FeeCodeItemCollection; }
			set { entityData.FeeCodeItemCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmCompetitiveAvg objects
		///	which are related to this object through the relation FK_ADM_COMPETITIVE_AVG_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmCompetitiveAvg> AdmCompetitiveAvgCollection
		{
			get { return entityData.AdmCompetitiveAvgCollection; }
			set { entityData.AdmCompetitiveAvgCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmTansikCodes objects
		///	which are related to this object through the relation FK_ADM_Tansik_Codes_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmTansikCodes> AdmTansikCodesCollection
		{
			get { return entityData.AdmTansikCodesCollection; }
			set { entityData.AdmTansikCodesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeFacultyRule objects
		///	which are related to this object through the relation FK_FEE_FACULTY_RULE_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeFacultyRule> FeeFacultyRuleCollection
		{
			get { return entityData.FeeFacultyRuleCollection; }
			set { entityData.FeeFacultyRuleCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmCodeEngTest objects
		///	which are related to this object through the relation FK_ADM_CODE_ENG_TEST_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmCodeEngTest> AdmCodeEngTestCollection
		{
			get { return entityData.AdmCodeEngTestCollection; }
			set { entityData.AdmCodeEngTestCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdGraduationAward objects
		///	which are related to this object through the relation FK_ED_GRADUATION_AWARD_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdGraduationAward> EdGraduationAwardCollection
		{
			get { return entityData.EdGraduationAwardCollection; }
			set { entityData.EdGraduationAwardCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmCdeFee objects
		///	which are related to this object through the relation FK_ADM_CDE_FEE_AS_CODE_DEGREE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmCdeFee> AdmCdeFeeCollection
		{
			get { return entityData.AdmCdeFeeCollection; }
			set { entityData.AdmCdeFeeCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DegreeDescrAr", "Degree Descr Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DegreeDescrAr", "Degree Descr Ar", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DegreeDescrEn", "Degree Descr En", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DegreeCode", "Degree Code", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AdmHint", "Adm Hint", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "AS_CODE_DEGREE"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"AS_CODE_DEGREE_ID", "AS_CODE_DEGREE_CLASS_ID", "DEGREE_DESCR_AR", "DEGREE_DESCR_EN", "DEGREE_CODE", "LINK_DEGREE_ID", "NOTATION", "ADM_HINT"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AsCodeDegreeEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AsCodeDegree) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AsCodeDegree>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AsCodeDegree);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AsCodeDegree Entity 
		///</summary>
		protected virtual AsCodeDegree Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AsCodeDegree copy = new AsCodeDegree();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AsCodeDegreeId = this.AsCodeDegreeId;
					copy.OriginalAsCodeDegreeId = this.OriginalAsCodeDegreeId;
				copy.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
				copy.DegreeDescrAr = this.DegreeDescrAr;
				copy.DegreeDescrEn = this.DegreeDescrEn;
				copy.DegreeCode = this.DegreeCode;
				copy.LinkDegreeId = this.LinkDegreeId;
				copy.Notation = this.Notation;
				copy.AdmHint = this.AdmHint;
			
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				copy.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				copy.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
		
			//deep copy nested objects
			copy.AdmAppRegHistoryCollection = (TList<AdmAppRegHistory>) MakeCopyOf(this.AdmAppRegHistoryCollection, existingCopies); 
			copy.AdmReqDocCollection = (TList<AdmReqDoc>) MakeCopyOf(this.AdmReqDocCollection, existingCopies); 
			copy.EdStudSemesterCollection = (TList<EdStudSemester>) MakeCopyOf(this.EdStudSemesterCollection, existingCopies); 
			copy.FeeFundRuleCollection = (TList<FeeFundRule>) MakeCopyOf(this.FeeFundRuleCollection, existingCopies); 
			copy.SaScQualCollection = (TList<SaScQual>) MakeCopyOf(this.SaScQualCollection, existingCopies); 
			copy.PgThesisGrantDegreeCollection = (TList<PgThesisGrantDegree>) MakeCopyOf(this.PgThesisGrantDegreeCollection, existingCopies); 
			copy.SeUserAccntDegCollection = (TList<SeUserAccntDeg>) MakeCopyOf(this.SeUserAccntDegCollection, existingCopies); 
			copy.FeeInstlmntRuleCollection = (TList<FeeInstlmntRule>) MakeCopyOf(this.FeeInstlmntRuleCollection, existingCopies); 
			copy.EdStudFacultyCollection = (TList<EdStudFaculty>) MakeCopyOf(this.EdStudFacultyCollection, existingCopies); 
			copy.EntityMainCollection = (TList<EntityMain>) MakeCopyOf(this.EntityMainCollection, existingCopies); 
			copy.EntPlcyAcadWarnDtlCollection = (TList<EntPlcyAcadWarnDtl>) MakeCopyOf(this.EntPlcyAcadWarnDtlCollection, existingCopies); 
			copy.FeeAllowanceRuleCollection = (TList<FeeAllowanceRule>) MakeCopyOf(this.FeeAllowanceRuleCollection, existingCopies); 
			copy.EdBylawCollection = (TList<EdBylaw>) MakeCopyOf(this.EdBylawCollection, existingCopies); 
			copy.FeeFacultyInstallmentCollection = (TList<FeeFacultyInstallment>) MakeCopyOf(this.FeeFacultyInstallmentCollection, existingCopies); 
			copy.AdmPrecondQualCollection = (TList<AdmPrecondQual>) MakeCopyOf(this.AdmPrecondQualCollection, existingCopies); 
			copy.EdCdeQualCatCollection = (TList<EdCdeQualCat>) MakeCopyOf(this.EdCdeQualCatCollection, existingCopies); 
			copy.AdmRatingParametersMajorsCollection = (TList<AdmRatingParametersMajors>) MakeCopyOf(this.AdmRatingParametersMajorsCollection, existingCopies); 
			copy.ScScheduleRsrvCollection = (TList<ScScheduleRsrv>) MakeCopyOf(this.ScScheduleRsrvCollection, existingCopies); 
			copy.AdmAcceptanceCategoryCollection = (TList<AdmAcceptanceCategory>) MakeCopyOf(this.AdmAcceptanceCategoryCollection, existingCopies); 
			copy.AdmTransAcceptanceCategoryCollection = (TList<AdmTransAcceptanceCategory>) MakeCopyOf(this.AdmTransAcceptanceCategoryCollection, existingCopies); 
			copy.EdResultApproveCollection = (TList<EdResultApprove>) MakeCopyOf(this.EdResultApproveCollection, existingCopies); 
			copy.AdmCdePlacementExamCollection = (TList<AdmCdePlacementExam>) MakeCopyOf(this.AdmCdePlacementExamCollection, existingCopies); 
			copy.FeeLimitRuleCollection = (TList<FeeLimitRule>) MakeCopyOf(this.FeeLimitRuleCollection, existingCopies); 
			copy.EdSemesterAgendaCollection = (TList<EdSemesterAgenda>) MakeCopyOf(this.EdSemesterAgendaCollection, existingCopies); 
			copy.FeeCodeItemCollection = (TList<FeeCodeItem>) MakeCopyOf(this.FeeCodeItemCollection, existingCopies); 
			copy.AdmCompetitiveAvgCollection = (TList<AdmCompetitiveAvg>) MakeCopyOf(this.AdmCompetitiveAvgCollection, existingCopies); 
			copy.AdmTansikCodesCollection = (TList<AdmTansikCodes>) MakeCopyOf(this.AdmTansikCodesCollection, existingCopies); 
			copy.FeeFacultyRuleCollection = (TList<FeeFacultyRule>) MakeCopyOf(this.FeeFacultyRuleCollection, existingCopies); 
			copy.AdmCodeEngTestCollection = (TList<AdmCodeEngTest>) MakeCopyOf(this.AdmCodeEngTestCollection, existingCopies); 
			copy.EdGraduationAwardCollection = (TList<EdGraduationAward>) MakeCopyOf(this.EdGraduationAwardCollection, existingCopies); 
			copy.AdmCdeFeeCollection = (TList<AdmCdeFee>) MakeCopyOf(this.AdmCdeFeeCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AsCodeDegree Entity 
		///</summary>
		public virtual AsCodeDegree Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AsCodeDegree Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AsCodeDegree DeepCopy()
		{
			return EntityHelper.Clone<AsCodeDegree>(this as AsCodeDegree);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AsCodeDegreeEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AsCodeDegreeEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AsCodeDegreeEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AsCodeDegreeColumn column)
		{
			switch(column)
			{
					case AsCodeDegreeColumn.AsCodeDegreeId:
					return entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
					case AsCodeDegreeColumn.AsCodeDegreeClassId:
					return entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
					case AsCodeDegreeColumn.DegreeDescrAr:
					return entityData.DegreeDescrAr != _originalData.DegreeDescrAr;
					case AsCodeDegreeColumn.DegreeDescrEn:
					return entityData.DegreeDescrEn != _originalData.DegreeDescrEn;
					case AsCodeDegreeColumn.DegreeCode:
					return entityData.DegreeCode != _originalData.DegreeCode;
					case AsCodeDegreeColumn.LinkDegreeId:
					return entityData.LinkDegreeId != _originalData.LinkDegreeId;
					case AsCodeDegreeColumn.Notation:
					return entityData.Notation != _originalData.Notation;
					case AsCodeDegreeColumn.AdmHint:
					return entityData.AdmHint != _originalData.AdmHint;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AsCodeDegreeColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
			result = result || entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
			result = result || entityData.DegreeDescrAr != _originalData.DegreeDescrAr;
			result = result || entityData.DegreeDescrEn != _originalData.DegreeDescrEn;
			result = result || entityData.DegreeCode != _originalData.DegreeCode;
			result = result || entityData.LinkDegreeId != _originalData.LinkDegreeId;
			result = result || entityData.Notation != _originalData.Notation;
			result = result || entityData.AdmHint != _originalData.AdmHint;
			return result;
		}	
		
		///<summary>
		///  Returns a AsCodeDegree Entity with the original data.
		///</summary>
		public AsCodeDegree GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAsCodeDegree(
				_originalData.AsCodeDegreeId,
				_originalData.AsCodeDegreeClassId,
				_originalData.DegreeDescrAr,
				_originalData.DegreeDescrEn,
				_originalData.DegreeCode,
				_originalData.LinkDegreeId,
				_originalData.Notation,
				_originalData.AdmHint
				);
				
			return (AsCodeDegree)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AsCodeDegreeBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AsCodeDegreeBase)
				return ValueEquals(this, (AsCodeDegreeBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AsCodeDegreeBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AsCodeDegreeId.GetHashCode() ^ 
					this.AsCodeDegreeClassId.GetHashCode() ^ 
					this.DegreeDescrAr.GetHashCode() ^ 
					((this.DegreeDescrEn == null) ? string.Empty : this.DegreeDescrEn.ToString()).GetHashCode() ^ 
					((this.DegreeCode == null) ? string.Empty : this.DegreeCode.ToString()).GetHashCode() ^ 
					((this.LinkDegreeId == null) ? string.Empty : this.LinkDegreeId.ToString()).GetHashCode() ^ 
					((this.Notation == null) ? string.Empty : this.Notation.ToString()).GetHashCode() ^ 
					((this.AdmHint == null) ? string.Empty : this.AdmHint.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AsCodeDegreeBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AsCodeDegreeBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AsCodeDegreeBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AsCodeDegreeBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AsCodeDegreeBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AsCodeDegreeBase Object1, AsCodeDegreeBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AsCodeDegreeId != Object2.AsCodeDegreeId)
				equal = false;
			if (Object1.AsCodeDegreeClassId != Object2.AsCodeDegreeClassId)
				equal = false;
			if (Object1.DegreeDescrAr != Object2.DegreeDescrAr)
				equal = false;
			if ( Object1.DegreeDescrEn != null && Object2.DegreeDescrEn != null )
			{
				if (Object1.DegreeDescrEn != Object2.DegreeDescrEn)
					equal = false;
			}
			else if (Object1.DegreeDescrEn == null ^ Object2.DegreeDescrEn == null )
			{
				equal = false;
			}
			if ( Object1.DegreeCode != null && Object2.DegreeCode != null )
			{
				if (Object1.DegreeCode != Object2.DegreeCode)
					equal = false;
			}
			else if (Object1.DegreeCode == null ^ Object2.DegreeCode == null )
			{
				equal = false;
			}
			if ( Object1.LinkDegreeId != null && Object2.LinkDegreeId != null )
			{
				if (Object1.LinkDegreeId != Object2.LinkDegreeId)
					equal = false;
			}
			else if (Object1.LinkDegreeId == null ^ Object2.LinkDegreeId == null )
			{
				equal = false;
			}
			if ( Object1.Notation != null && Object2.Notation != null )
			{
				if (Object1.Notation != Object2.Notation)
					equal = false;
			}
			else if (Object1.Notation == null ^ Object2.Notation == null )
			{
				equal = false;
			}
			if ( Object1.AdmHint != null && Object2.AdmHint != null )
			{
				if (Object1.AdmHint != Object2.AdmHint)
					equal = false;
			}
			else if (Object1.AdmHint == null ^ Object2.AdmHint == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AsCodeDegreeBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AsCodeDegreeComparer GetComparer()
        {
            return new AsCodeDegreeComparer();
        }
        */

        // Comparer delegates back to AsCodeDegree
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AsCodeDegree rhs, AsCodeDegreeColumn which)
        {
            switch (which)
            {
            	
            	
            	case AsCodeDegreeColumn.AsCodeDegreeId:
            		return this.AsCodeDegreeId.CompareTo(rhs.AsCodeDegreeId);
            		
            		                 
            	
            	
            	case AsCodeDegreeColumn.AsCodeDegreeClassId:
            		return this.AsCodeDegreeClassId.CompareTo(rhs.AsCodeDegreeClassId);
            		
            		                 
            	
            	
            	case AsCodeDegreeColumn.DegreeDescrAr:
            		return this.DegreeDescrAr.CompareTo(rhs.DegreeDescrAr);
            		
            		                 
            	
            	
            	case AsCodeDegreeColumn.DegreeDescrEn:
            		return this.DegreeDescrEn.CompareTo(rhs.DegreeDescrEn);
            		
            		                 
            	
            	
            	case AsCodeDegreeColumn.DegreeCode:
            		return this.DegreeCode.CompareTo(rhs.DegreeCode);
            		
            		                 
            	
            	
            	case AsCodeDegreeColumn.LinkDegreeId:
            		return this.LinkDegreeId.Value.CompareTo(rhs.LinkDegreeId.Value);
            		
            		                 
            	
            	
            	case AsCodeDegreeColumn.Notation:
            		return this.Notation.Value.CompareTo(rhs.Notation.Value);
            		
            		                 
            	
            	
            	case AsCodeDegreeColumn.AdmHint:
            		return this.AdmHint.CompareTo(rhs.AdmHint);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AsCodeDegreeKey> Members
		
		// member variable for the EntityId property
		private AsCodeDegreeKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AsCodeDegreeKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AsCodeDegreeKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AsCodeDegree")
					.Append("|").Append( this.AsCodeDegreeId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{9}{8}- AsCodeDegreeId: {0}{8}- AsCodeDegreeClassId: {1}{8}- DegreeDescrAr: {2}{8}- DegreeDescrEn: {3}{8}- DegreeCode: {4}{8}- LinkDegreeId: {5}{8}- Notation: {6}{8}- AdmHint: {7}{8}{10}", 
				this.AsCodeDegreeId,
				this.AsCodeDegreeClassId,
				this.DegreeDescrAr,
				(this.DegreeDescrEn == null) ? string.Empty : this.DegreeDescrEn.ToString(),
				(this.DegreeCode == null) ? string.Empty : this.DegreeCode.ToString(),
				(this.LinkDegreeId == null) ? string.Empty : this.LinkDegreeId.ToString(),
				(this.Notation == null) ? string.Empty : this.Notation.ToString(),
				(this.AdmHint == null) ? string.Empty : this.AdmHint.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'AS_CODE_DEGREE' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AsCodeDegreeEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// AS_CODE_DEGREE_ID : مسلسل الدرجة العلمية
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "AS_CODE_DEGREE"</remarks>
		public System.Decimal AsCodeDegreeId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalAsCodeDegreeId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// AS_CODE_DEGREE_CLASS_ID : مسلسل نوع الدرجة العلمية
		/// </summary>
		public System.Decimal		  AsCodeDegreeClassId = 0.0m;
		
		/// <summary>
		/// DEGREE_DESCR_AR : 
		/// </summary>
		public System.String		  DegreeDescrAr = string.Empty;
		
		/// <summary>
		/// DEGREE_DESCR_EN : 
		/// </summary>
		public System.String		  DegreeDescrEn = null;
		
		/// <summary>
		/// DEGREE_CODE : 
		/// </summary>
		public System.String		  DegreeCode = null;
		
		/// <summary>
		/// LINK_DEGREE_ID : KU 1,2
		/// </summary>
		public System.Int32?		  LinkDegreeId = null;
		
		/// <summary>
		/// NOTATION : 
		/// </summary>
		public System.Int32?		  Notation = null;
		
		/// <summary>
		/// ADM_HINT : 
		/// </summary>
		public System.String		  AdmHint = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsCodeDegreeClass _asCodeDegreeClassIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return this._asCodeDegreeClassIdSource; }
            set { this._asCodeDegreeClassIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region AdmAppRegHistoryCollection
		
		private TList<AdmAppRegHistory> _admAppRegHistoryAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppRegHistoryAsCodeDegreeId
		/// </summary>
		
		public TList<AdmAppRegHistory> AdmAppRegHistoryCollection
		{
			get
			{
				if (_admAppRegHistoryAsCodeDegreeId == null)
				{
				_admAppRegHistoryAsCodeDegreeId = new TList<AdmAppRegHistory>();
				}
	
				return _admAppRegHistoryAsCodeDegreeId;
			}
			set { _admAppRegHistoryAsCodeDegreeId = value; }
		}
		
		#endregion

		#region AdmReqDocCollection
		
		private TList<AdmReqDoc> _admReqDocAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admReqDocAsCodeDegreeId
		/// </summary>
		
		public TList<AdmReqDoc> AdmReqDocCollection
		{
			get
			{
				if (_admReqDocAsCodeDegreeId == null)
				{
				_admReqDocAsCodeDegreeId = new TList<AdmReqDoc>();
				}
	
				return _admReqDocAsCodeDegreeId;
			}
			set { _admReqDocAsCodeDegreeId = value; }
		}
		
		#endregion

		#region EdStudSemesterCollection
		
		private TList<EdStudSemester> _edStudSemesterAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudSemesterAsCodeDegreeId
		/// </summary>
		
		public TList<EdStudSemester> EdStudSemesterCollection
		{
			get
			{
				if (_edStudSemesterAsCodeDegreeId == null)
				{
				_edStudSemesterAsCodeDegreeId = new TList<EdStudSemester>();
				}
	
				return _edStudSemesterAsCodeDegreeId;
			}
			set { _edStudSemesterAsCodeDegreeId = value; }
		}
		
		#endregion

		#region FeeFundRuleCollection
		
		private TList<FeeFundRule> _feeFundRuleAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeFundRuleAsCodeDegreeId
		/// </summary>
		
		public TList<FeeFundRule> FeeFundRuleCollection
		{
			get
			{
				if (_feeFundRuleAsCodeDegreeId == null)
				{
				_feeFundRuleAsCodeDegreeId = new TList<FeeFundRule>();
				}
	
				return _feeFundRuleAsCodeDegreeId;
			}
			set { _feeFundRuleAsCodeDegreeId = value; }
		}
		
		#endregion

		#region SaScQualCollection
		
		private TList<SaScQual> _saScQualAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _saScQualAsCodeDegreeId
		/// </summary>
		
		public TList<SaScQual> SaScQualCollection
		{
			get
			{
				if (_saScQualAsCodeDegreeId == null)
				{
				_saScQualAsCodeDegreeId = new TList<SaScQual>();
				}
	
				return _saScQualAsCodeDegreeId;
			}
			set { _saScQualAsCodeDegreeId = value; }
		}
		
		#endregion

		#region PgThesisGrantDegreeCollection
		
		private TList<PgThesisGrantDegree> _pgThesisGrantDegreeAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgThesisGrantDegreeAsCodeDegreeId
		/// </summary>
		
		public TList<PgThesisGrantDegree> PgThesisGrantDegreeCollection
		{
			get
			{
				if (_pgThesisGrantDegreeAsCodeDegreeId == null)
				{
				_pgThesisGrantDegreeAsCodeDegreeId = new TList<PgThesisGrantDegree>();
				}
	
				return _pgThesisGrantDegreeAsCodeDegreeId;
			}
			set { _pgThesisGrantDegreeAsCodeDegreeId = value; }
		}
		
		#endregion

		#region SeUserAccntDegCollection
		
		private TList<SeUserAccntDeg> _seUserAccntDegAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _seUserAccntDegAsCodeDegreeId
		/// </summary>
		
		public TList<SeUserAccntDeg> SeUserAccntDegCollection
		{
			get
			{
				if (_seUserAccntDegAsCodeDegreeId == null)
				{
				_seUserAccntDegAsCodeDegreeId = new TList<SeUserAccntDeg>();
				}
	
				return _seUserAccntDegAsCodeDegreeId;
			}
			set { _seUserAccntDegAsCodeDegreeId = value; }
		}
		
		#endregion

		#region FeeInstlmntRuleCollection
		
		private TList<FeeInstlmntRule> _feeInstlmntRuleAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeInstlmntRuleAsCodeDegreeId
		/// </summary>
		
		public TList<FeeInstlmntRule> FeeInstlmntRuleCollection
		{
			get
			{
				if (_feeInstlmntRuleAsCodeDegreeId == null)
				{
				_feeInstlmntRuleAsCodeDegreeId = new TList<FeeInstlmntRule>();
				}
	
				return _feeInstlmntRuleAsCodeDegreeId;
			}
			set { _feeInstlmntRuleAsCodeDegreeId = value; }
		}
		
		#endregion

		#region EdStudFacultyCollection
		
		private TList<EdStudFaculty> _edStudFacultyAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudFacultyAsCodeDegreeId
		/// </summary>
		
		public TList<EdStudFaculty> EdStudFacultyCollection
		{
			get
			{
				if (_edStudFacultyAsCodeDegreeId == null)
				{
				_edStudFacultyAsCodeDegreeId = new TList<EdStudFaculty>();
				}
	
				return _edStudFacultyAsCodeDegreeId;
			}
			set { _edStudFacultyAsCodeDegreeId = value; }
		}
		
		#endregion

		#region EntityMainCollection
		
		private TList<EntityMain> _entityMainAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entityMainAsCodeDegreeId
		/// </summary>
		
		public TList<EntityMain> EntityMainCollection
		{
			get
			{
				if (_entityMainAsCodeDegreeId == null)
				{
				_entityMainAsCodeDegreeId = new TList<EntityMain>();
				}
	
				return _entityMainAsCodeDegreeId;
			}
			set { _entityMainAsCodeDegreeId = value; }
		}
		
		#endregion

		#region EntPlcyAcadWarnDtlCollection
		
		private TList<EntPlcyAcadWarnDtl> _entPlcyAcadWarnDtlAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _entPlcyAcadWarnDtlAsCodeDegreeId
		/// </summary>
		
		public TList<EntPlcyAcadWarnDtl> EntPlcyAcadWarnDtlCollection
		{
			get
			{
				if (_entPlcyAcadWarnDtlAsCodeDegreeId == null)
				{
				_entPlcyAcadWarnDtlAsCodeDegreeId = new TList<EntPlcyAcadWarnDtl>();
				}
	
				return _entPlcyAcadWarnDtlAsCodeDegreeId;
			}
			set { _entPlcyAcadWarnDtlAsCodeDegreeId = value; }
		}
		
		#endregion

		#region FeeAllowanceRuleCollection
		
		private TList<FeeAllowanceRule> _feeAllowanceRuleAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeAllowanceRuleAsCodeDegreeId
		/// </summary>
		
		public TList<FeeAllowanceRule> FeeAllowanceRuleCollection
		{
			get
			{
				if (_feeAllowanceRuleAsCodeDegreeId == null)
				{
				_feeAllowanceRuleAsCodeDegreeId = new TList<FeeAllowanceRule>();
				}
	
				return _feeAllowanceRuleAsCodeDegreeId;
			}
			set { _feeAllowanceRuleAsCodeDegreeId = value; }
		}
		
		#endregion

		#region EdBylawCollection
		
		private TList<EdBylaw> _edBylawAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edBylawAsCodeDegreeId
		/// </summary>
		
		public TList<EdBylaw> EdBylawCollection
		{
			get
			{
				if (_edBylawAsCodeDegreeId == null)
				{
				_edBylawAsCodeDegreeId = new TList<EdBylaw>();
				}
	
				return _edBylawAsCodeDegreeId;
			}
			set { _edBylawAsCodeDegreeId = value; }
		}
		
		#endregion

		#region FeeFacultyInstallmentCollection
		
		private TList<FeeFacultyInstallment> _feeFacultyInstallmentAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeFacultyInstallmentAsCodeDegreeId
		/// </summary>
		
		public TList<FeeFacultyInstallment> FeeFacultyInstallmentCollection
		{
			get
			{
				if (_feeFacultyInstallmentAsCodeDegreeId == null)
				{
				_feeFacultyInstallmentAsCodeDegreeId = new TList<FeeFacultyInstallment>();
				}
	
				return _feeFacultyInstallmentAsCodeDegreeId;
			}
			set { _feeFacultyInstallmentAsCodeDegreeId = value; }
		}
		
		#endregion

		#region AdmPrecondQualCollection
		
		private TList<AdmPrecondQual> _admPrecondQualAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admPrecondQualAsCodeDegreeId
		/// </summary>
		
		public TList<AdmPrecondQual> AdmPrecondQualCollection
		{
			get
			{
				if (_admPrecondQualAsCodeDegreeId == null)
				{
				_admPrecondQualAsCodeDegreeId = new TList<AdmPrecondQual>();
				}
	
				return _admPrecondQualAsCodeDegreeId;
			}
			set { _admPrecondQualAsCodeDegreeId = value; }
		}
		
		#endregion

		#region EdCdeQualCatCollection
		
		private TList<EdCdeQualCat> _edCdeQualCatAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edCdeQualCatAsCodeDegreeId
		/// </summary>
		
		public TList<EdCdeQualCat> EdCdeQualCatCollection
		{
			get
			{
				if (_edCdeQualCatAsCodeDegreeId == null)
				{
				_edCdeQualCatAsCodeDegreeId = new TList<EdCdeQualCat>();
				}
	
				return _edCdeQualCatAsCodeDegreeId;
			}
			set { _edCdeQualCatAsCodeDegreeId = value; }
		}
		
		#endregion

		#region AdmRatingParametersMajorsCollection
		
		private TList<AdmRatingParametersMajors> _admRatingParametersMajorsAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admRatingParametersMajorsAsCodeDegreeId
		/// </summary>
		
		public TList<AdmRatingParametersMajors> AdmRatingParametersMajorsCollection
		{
			get
			{
				if (_admRatingParametersMajorsAsCodeDegreeId == null)
				{
				_admRatingParametersMajorsAsCodeDegreeId = new TList<AdmRatingParametersMajors>();
				}
	
				return _admRatingParametersMajorsAsCodeDegreeId;
			}
			set { _admRatingParametersMajorsAsCodeDegreeId = value; }
		}
		
		#endregion

		#region ScScheduleRsrvCollection
		
		private TList<ScScheduleRsrv> _scScheduleRsrvAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scScheduleRsrvAsCodeDegreeId
		/// </summary>
		
		public TList<ScScheduleRsrv> ScScheduleRsrvCollection
		{
			get
			{
				if (_scScheduleRsrvAsCodeDegreeId == null)
				{
				_scScheduleRsrvAsCodeDegreeId = new TList<ScScheduleRsrv>();
				}
	
				return _scScheduleRsrvAsCodeDegreeId;
			}
			set { _scScheduleRsrvAsCodeDegreeId = value; }
		}
		
		#endregion

		#region AdmAcceptanceCategoryCollection
		
		private TList<AdmAcceptanceCategory> _admAcceptanceCategoryAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAcceptanceCategoryAsCodeDegreeId
		/// </summary>
		
		public TList<AdmAcceptanceCategory> AdmAcceptanceCategoryCollection
		{
			get
			{
				if (_admAcceptanceCategoryAsCodeDegreeId == null)
				{
				_admAcceptanceCategoryAsCodeDegreeId = new TList<AdmAcceptanceCategory>();
				}
	
				return _admAcceptanceCategoryAsCodeDegreeId;
			}
			set { _admAcceptanceCategoryAsCodeDegreeId = value; }
		}
		
		#endregion

		#region AdmTransAcceptanceCategoryCollection
		
		private TList<AdmTransAcceptanceCategory> _admTransAcceptanceCategoryAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admTransAcceptanceCategoryAsCodeDegreeId
		/// </summary>
		
		public TList<AdmTransAcceptanceCategory> AdmTransAcceptanceCategoryCollection
		{
			get
			{
				if (_admTransAcceptanceCategoryAsCodeDegreeId == null)
				{
				_admTransAcceptanceCategoryAsCodeDegreeId = new TList<AdmTransAcceptanceCategory>();
				}
	
				return _admTransAcceptanceCategoryAsCodeDegreeId;
			}
			set { _admTransAcceptanceCategoryAsCodeDegreeId = value; }
		}
		
		#endregion

		#region EdResultApproveCollection
		
		private TList<EdResultApprove> _edResultApproveAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edResultApproveAsCodeDegreeId
		/// </summary>
		
		public TList<EdResultApprove> EdResultApproveCollection
		{
			get
			{
				if (_edResultApproveAsCodeDegreeId == null)
				{
				_edResultApproveAsCodeDegreeId = new TList<EdResultApprove>();
				}
	
				return _edResultApproveAsCodeDegreeId;
			}
			set { _edResultApproveAsCodeDegreeId = value; }
		}
		
		#endregion

		#region AdmCdePlacementExamCollection
		
		private TList<AdmCdePlacementExam> _admCdePlacementExamAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admCdePlacementExamAsCodeDegreeId
		/// </summary>
		
		public TList<AdmCdePlacementExam> AdmCdePlacementExamCollection
		{
			get
			{
				if (_admCdePlacementExamAsCodeDegreeId == null)
				{
				_admCdePlacementExamAsCodeDegreeId = new TList<AdmCdePlacementExam>();
				}
	
				return _admCdePlacementExamAsCodeDegreeId;
			}
			set { _admCdePlacementExamAsCodeDegreeId = value; }
		}
		
		#endregion

		#region FeeLimitRuleCollection
		
		private TList<FeeLimitRule> _feeLimitRuleAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeLimitRuleAsCodeDegreeId
		/// </summary>
		
		public TList<FeeLimitRule> FeeLimitRuleCollection
		{
			get
			{
				if (_feeLimitRuleAsCodeDegreeId == null)
				{
				_feeLimitRuleAsCodeDegreeId = new TList<FeeLimitRule>();
				}
	
				return _feeLimitRuleAsCodeDegreeId;
			}
			set { _feeLimitRuleAsCodeDegreeId = value; }
		}
		
		#endregion

		#region EdSemesterAgendaCollection
		
		private TList<EdSemesterAgenda> _edSemesterAgendaAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edSemesterAgendaAsCodeDegreeId
		/// </summary>
		
		public TList<EdSemesterAgenda> EdSemesterAgendaCollection
		{
			get
			{
				if (_edSemesterAgendaAsCodeDegreeId == null)
				{
				_edSemesterAgendaAsCodeDegreeId = new TList<EdSemesterAgenda>();
				}
	
				return _edSemesterAgendaAsCodeDegreeId;
			}
			set { _edSemesterAgendaAsCodeDegreeId = value; }
		}
		
		#endregion

		#region FeeCodeItemCollection
		
		private TList<FeeCodeItem> _feeCodeItemAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeCodeItemAsCodeDegreeId
		/// </summary>
		
		public TList<FeeCodeItem> FeeCodeItemCollection
		{
			get
			{
				if (_feeCodeItemAsCodeDegreeId == null)
				{
				_feeCodeItemAsCodeDegreeId = new TList<FeeCodeItem>();
				}
	
				return _feeCodeItemAsCodeDegreeId;
			}
			set { _feeCodeItemAsCodeDegreeId = value; }
		}
		
		#endregion

		#region AdmCompetitiveAvgCollection
		
		private TList<AdmCompetitiveAvg> _admCompetitiveAvgAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admCompetitiveAvgAsCodeDegreeId
		/// </summary>
		
		public TList<AdmCompetitiveAvg> AdmCompetitiveAvgCollection
		{
			get
			{
				if (_admCompetitiveAvgAsCodeDegreeId == null)
				{
				_admCompetitiveAvgAsCodeDegreeId = new TList<AdmCompetitiveAvg>();
				}
	
				return _admCompetitiveAvgAsCodeDegreeId;
			}
			set { _admCompetitiveAvgAsCodeDegreeId = value; }
		}
		
		#endregion

		#region AdmTansikCodesCollection
		
		private TList<AdmTansikCodes> _admTansikCodesAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admTansikCodesAsCodeDegreeId
		/// </summary>
		
		public TList<AdmTansikCodes> AdmTansikCodesCollection
		{
			get
			{
				if (_admTansikCodesAsCodeDegreeId == null)
				{
				_admTansikCodesAsCodeDegreeId = new TList<AdmTansikCodes>();
				}
	
				return _admTansikCodesAsCodeDegreeId;
			}
			set { _admTansikCodesAsCodeDegreeId = value; }
		}
		
		#endregion

		#region FeeFacultyRuleCollection
		
		private TList<FeeFacultyRule> _feeFacultyRuleAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeFacultyRuleAsCodeDegreeId
		/// </summary>
		
		public TList<FeeFacultyRule> FeeFacultyRuleCollection
		{
			get
			{
				if (_feeFacultyRuleAsCodeDegreeId == null)
				{
				_feeFacultyRuleAsCodeDegreeId = new TList<FeeFacultyRule>();
				}
	
				return _feeFacultyRuleAsCodeDegreeId;
			}
			set { _feeFacultyRuleAsCodeDegreeId = value; }
		}
		
		#endregion

		#region AdmCodeEngTestCollection
		
		private TList<AdmCodeEngTest> _admCodeEngTestAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admCodeEngTestAsCodeDegreeId
		/// </summary>
		
		public TList<AdmCodeEngTest> AdmCodeEngTestCollection
		{
			get
			{
				if (_admCodeEngTestAsCodeDegreeId == null)
				{
				_admCodeEngTestAsCodeDegreeId = new TList<AdmCodeEngTest>();
				}
	
				return _admCodeEngTestAsCodeDegreeId;
			}
			set { _admCodeEngTestAsCodeDegreeId = value; }
		}
		
		#endregion

		#region EdGraduationAwardCollection
		
		private TList<EdGraduationAward> _edGraduationAwardAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edGraduationAwardAsCodeDegreeId
		/// </summary>
		
		public TList<EdGraduationAward> EdGraduationAwardCollection
		{
			get
			{
				if (_edGraduationAwardAsCodeDegreeId == null)
				{
				_edGraduationAwardAsCodeDegreeId = new TList<EdGraduationAward>();
				}
	
				return _edGraduationAwardAsCodeDegreeId;
			}
			set { _edGraduationAwardAsCodeDegreeId = value; }
		}
		
		#endregion

		#region AdmCdeFeeCollection
		
		private TList<AdmCdeFee> _admCdeFeeAsCodeDegreeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admCdeFeeAsCodeDegreeId
		/// </summary>
		
		public TList<AdmCdeFee> AdmCdeFeeCollection
		{
			get
			{
				if (_admCdeFeeAsCodeDegreeId == null)
				{
				_admCdeFeeAsCodeDegreeId = new TList<AdmCdeFee>();
				}
	
				return _admCdeFeeAsCodeDegreeId;
			}
			set { _admCdeFeeAsCodeDegreeId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AsCodeDegreeEntityData _tmp = new AsCodeDegreeEntityData();
						
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.OriginalAsCodeDegreeId = this.OriginalAsCodeDegreeId;
			
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.DegreeDescrAr = this.DegreeDescrAr;
			_tmp.DegreeDescrEn = this.DegreeDescrEn;
			_tmp.DegreeCode = this.DegreeCode;
			_tmp.LinkDegreeId = this.LinkDegreeId;
			_tmp.Notation = this.Notation;
			_tmp.AdmHint = this.AdmHint;
			
			#region Source Parent Composite Entities
			if (this.AsCodeDegreeClassIdSource != null)
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource) as AsCodeDegreeClass;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._admAppRegHistoryAsCodeDegreeId != null)
				_tmp.AdmAppRegHistoryCollection = (TList<AdmAppRegHistory>) MakeCopyOf(this.AdmAppRegHistoryCollection); 
			if (this._admReqDocAsCodeDegreeId != null)
				_tmp.AdmReqDocCollection = (TList<AdmReqDoc>) MakeCopyOf(this.AdmReqDocCollection); 
			if (this._edStudSemesterAsCodeDegreeId != null)
				_tmp.EdStudSemesterCollection = (TList<EdStudSemester>) MakeCopyOf(this.EdStudSemesterCollection); 
			if (this._feeFundRuleAsCodeDegreeId != null)
				_tmp.FeeFundRuleCollection = (TList<FeeFundRule>) MakeCopyOf(this.FeeFundRuleCollection); 
			if (this._saScQualAsCodeDegreeId != null)
				_tmp.SaScQualCollection = (TList<SaScQual>) MakeCopyOf(this.SaScQualCollection); 
			if (this._pgThesisGrantDegreeAsCodeDegreeId != null)
				_tmp.PgThesisGrantDegreeCollection = (TList<PgThesisGrantDegree>) MakeCopyOf(this.PgThesisGrantDegreeCollection); 
			if (this._seUserAccntDegAsCodeDegreeId != null)
				_tmp.SeUserAccntDegCollection = (TList<SeUserAccntDeg>) MakeCopyOf(this.SeUserAccntDegCollection); 
			if (this._feeInstlmntRuleAsCodeDegreeId != null)
				_tmp.FeeInstlmntRuleCollection = (TList<FeeInstlmntRule>) MakeCopyOf(this.FeeInstlmntRuleCollection); 
			if (this._edStudFacultyAsCodeDegreeId != null)
				_tmp.EdStudFacultyCollection = (TList<EdStudFaculty>) MakeCopyOf(this.EdStudFacultyCollection); 
			if (this._entityMainAsCodeDegreeId != null)
				_tmp.EntityMainCollection = (TList<EntityMain>) MakeCopyOf(this.EntityMainCollection); 
			if (this._entPlcyAcadWarnDtlAsCodeDegreeId != null)
				_tmp.EntPlcyAcadWarnDtlCollection = (TList<EntPlcyAcadWarnDtl>) MakeCopyOf(this.EntPlcyAcadWarnDtlCollection); 
			if (this._feeAllowanceRuleAsCodeDegreeId != null)
				_tmp.FeeAllowanceRuleCollection = (TList<FeeAllowanceRule>) MakeCopyOf(this.FeeAllowanceRuleCollection); 
			if (this._edBylawAsCodeDegreeId != null)
				_tmp.EdBylawCollection = (TList<EdBylaw>) MakeCopyOf(this.EdBylawCollection); 
			if (this._feeFacultyInstallmentAsCodeDegreeId != null)
				_tmp.FeeFacultyInstallmentCollection = (TList<FeeFacultyInstallment>) MakeCopyOf(this.FeeFacultyInstallmentCollection); 
			if (this._admPrecondQualAsCodeDegreeId != null)
				_tmp.AdmPrecondQualCollection = (TList<AdmPrecondQual>) MakeCopyOf(this.AdmPrecondQualCollection); 
			if (this._edCdeQualCatAsCodeDegreeId != null)
				_tmp.EdCdeQualCatCollection = (TList<EdCdeQualCat>) MakeCopyOf(this.EdCdeQualCatCollection); 
			if (this._admRatingParametersMajorsAsCodeDegreeId != null)
				_tmp.AdmRatingParametersMajorsCollection = (TList<AdmRatingParametersMajors>) MakeCopyOf(this.AdmRatingParametersMajorsCollection); 
			if (this._scScheduleRsrvAsCodeDegreeId != null)
				_tmp.ScScheduleRsrvCollection = (TList<ScScheduleRsrv>) MakeCopyOf(this.ScScheduleRsrvCollection); 
			if (this._admAcceptanceCategoryAsCodeDegreeId != null)
				_tmp.AdmAcceptanceCategoryCollection = (TList<AdmAcceptanceCategory>) MakeCopyOf(this.AdmAcceptanceCategoryCollection); 
			if (this._admTransAcceptanceCategoryAsCodeDegreeId != null)
				_tmp.AdmTransAcceptanceCategoryCollection = (TList<AdmTransAcceptanceCategory>) MakeCopyOf(this.AdmTransAcceptanceCategoryCollection); 
			if (this._edResultApproveAsCodeDegreeId != null)
				_tmp.EdResultApproveCollection = (TList<EdResultApprove>) MakeCopyOf(this.EdResultApproveCollection); 
			if (this._admCdePlacementExamAsCodeDegreeId != null)
				_tmp.AdmCdePlacementExamCollection = (TList<AdmCdePlacementExam>) MakeCopyOf(this.AdmCdePlacementExamCollection); 
			if (this._feeLimitRuleAsCodeDegreeId != null)
				_tmp.FeeLimitRuleCollection = (TList<FeeLimitRule>) MakeCopyOf(this.FeeLimitRuleCollection); 
			if (this._edSemesterAgendaAsCodeDegreeId != null)
				_tmp.EdSemesterAgendaCollection = (TList<EdSemesterAgenda>) MakeCopyOf(this.EdSemesterAgendaCollection); 
			if (this._feeCodeItemAsCodeDegreeId != null)
				_tmp.FeeCodeItemCollection = (TList<FeeCodeItem>) MakeCopyOf(this.FeeCodeItemCollection); 
			if (this._admCompetitiveAvgAsCodeDegreeId != null)
				_tmp.AdmCompetitiveAvgCollection = (TList<AdmCompetitiveAvg>) MakeCopyOf(this.AdmCompetitiveAvgCollection); 
			if (this._admTansikCodesAsCodeDegreeId != null)
				_tmp.AdmTansikCodesCollection = (TList<AdmTansikCodes>) MakeCopyOf(this.AdmTansikCodesCollection); 
			if (this._feeFacultyRuleAsCodeDegreeId != null)
				_tmp.FeeFacultyRuleCollection = (TList<FeeFacultyRule>) MakeCopyOf(this.FeeFacultyRuleCollection); 
			if (this._admCodeEngTestAsCodeDegreeId != null)
				_tmp.AdmCodeEngTestCollection = (TList<AdmCodeEngTest>) MakeCopyOf(this.AdmCodeEngTestCollection); 
			if (this._edGraduationAwardAsCodeDegreeId != null)
				_tmp.EdGraduationAwardCollection = (TList<EdGraduationAward>) MakeCopyOf(this.EdGraduationAwardCollection); 
			if (this._admCdeFeeAsCodeDegreeId != null)
				_tmp.AdmCdeFeeCollection = (TList<AdmCdeFee>) MakeCopyOf(this.AdmCdeFeeCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AsCodeDegreeEntityData _tmp = new AsCodeDegreeEntityData();
						
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.OriginalAsCodeDegreeId = this.OriginalAsCodeDegreeId;
			
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.DegreeDescrAr = this.DegreeDescrAr;
			_tmp.DegreeDescrEn = this.DegreeDescrEn;
			_tmp.DegreeCode = this.DegreeCode;
			_tmp.LinkDegreeId = this.LinkDegreeId;
			_tmp.Notation = this.Notation;
			_tmp.AdmHint = this.AdmHint;
			
			#region Source Parent Composite Entities
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				_tmp.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.AdmAppRegHistoryCollection = (TList<AdmAppRegHistory>) MakeCopyOf(this.AdmAppRegHistoryCollection, existingCopies); 
			_tmp.AdmReqDocCollection = (TList<AdmReqDoc>) MakeCopyOf(this.AdmReqDocCollection, existingCopies); 
			_tmp.EdStudSemesterCollection = (TList<EdStudSemester>) MakeCopyOf(this.EdStudSemesterCollection, existingCopies); 
			_tmp.FeeFundRuleCollection = (TList<FeeFundRule>) MakeCopyOf(this.FeeFundRuleCollection, existingCopies); 
			_tmp.SaScQualCollection = (TList<SaScQual>) MakeCopyOf(this.SaScQualCollection, existingCopies); 
			_tmp.PgThesisGrantDegreeCollection = (TList<PgThesisGrantDegree>) MakeCopyOf(this.PgThesisGrantDegreeCollection, existingCopies); 
			_tmp.SeUserAccntDegCollection = (TList<SeUserAccntDeg>) MakeCopyOf(this.SeUserAccntDegCollection, existingCopies); 
			_tmp.FeeInstlmntRuleCollection = (TList<FeeInstlmntRule>) MakeCopyOf(this.FeeInstlmntRuleCollection, existingCopies); 
			_tmp.EdStudFacultyCollection = (TList<EdStudFaculty>) MakeCopyOf(this.EdStudFacultyCollection, existingCopies); 
			_tmp.EntityMainCollection = (TList<EntityMain>) MakeCopyOf(this.EntityMainCollection, existingCopies); 
			_tmp.EntPlcyAcadWarnDtlCollection = (TList<EntPlcyAcadWarnDtl>) MakeCopyOf(this.EntPlcyAcadWarnDtlCollection, existingCopies); 
			_tmp.FeeAllowanceRuleCollection = (TList<FeeAllowanceRule>) MakeCopyOf(this.FeeAllowanceRuleCollection, existingCopies); 
			_tmp.EdBylawCollection = (TList<EdBylaw>) MakeCopyOf(this.EdBylawCollection, existingCopies); 
			_tmp.FeeFacultyInstallmentCollection = (TList<FeeFacultyInstallment>) MakeCopyOf(this.FeeFacultyInstallmentCollection, existingCopies); 
			_tmp.AdmPrecondQualCollection = (TList<AdmPrecondQual>) MakeCopyOf(this.AdmPrecondQualCollection, existingCopies); 
			_tmp.EdCdeQualCatCollection = (TList<EdCdeQualCat>) MakeCopyOf(this.EdCdeQualCatCollection, existingCopies); 
			_tmp.AdmRatingParametersMajorsCollection = (TList<AdmRatingParametersMajors>) MakeCopyOf(this.AdmRatingParametersMajorsCollection, existingCopies); 
			_tmp.ScScheduleRsrvCollection = (TList<ScScheduleRsrv>) MakeCopyOf(this.ScScheduleRsrvCollection, existingCopies); 
			_tmp.AdmAcceptanceCategoryCollection = (TList<AdmAcceptanceCategory>) MakeCopyOf(this.AdmAcceptanceCategoryCollection, existingCopies); 
			_tmp.AdmTransAcceptanceCategoryCollection = (TList<AdmTransAcceptanceCategory>) MakeCopyOf(this.AdmTransAcceptanceCategoryCollection, existingCopies); 
			_tmp.EdResultApproveCollection = (TList<EdResultApprove>) MakeCopyOf(this.EdResultApproveCollection, existingCopies); 
			_tmp.AdmCdePlacementExamCollection = (TList<AdmCdePlacementExam>) MakeCopyOf(this.AdmCdePlacementExamCollection, existingCopies); 
			_tmp.FeeLimitRuleCollection = (TList<FeeLimitRule>) MakeCopyOf(this.FeeLimitRuleCollection, existingCopies); 
			_tmp.EdSemesterAgendaCollection = (TList<EdSemesterAgenda>) MakeCopyOf(this.EdSemesterAgendaCollection, existingCopies); 
			_tmp.FeeCodeItemCollection = (TList<FeeCodeItem>) MakeCopyOf(this.FeeCodeItemCollection, existingCopies); 
			_tmp.AdmCompetitiveAvgCollection = (TList<AdmCompetitiveAvg>) MakeCopyOf(this.AdmCompetitiveAvgCollection, existingCopies); 
			_tmp.AdmTansikCodesCollection = (TList<AdmTansikCodes>) MakeCopyOf(this.AdmTansikCodesCollection, existingCopies); 
			_tmp.FeeFacultyRuleCollection = (TList<FeeFacultyRule>) MakeCopyOf(this.FeeFacultyRuleCollection, existingCopies); 
			_tmp.AdmCodeEngTestCollection = (TList<AdmCodeEngTest>) MakeCopyOf(this.AdmCodeEngTestCollection, existingCopies); 
			_tmp.EdGraduationAwardCollection = (TList<EdGraduationAward>) MakeCopyOf(this.EdGraduationAwardCollection, existingCopies); 
			_tmp.AdmCdeFeeCollection = (TList<AdmCdeFee>) MakeCopyOf(this.AdmCdeFeeCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AsCodeDegreeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AsCodeDegreeColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AsCodeDegreeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AsCodeDegreeColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AsCodeDegreeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AsCodeDegreeColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AsCodeDegreeEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AsCodeDegreeEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AsCodeDegreeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AsCodeDegreeColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AsCodeDegreeEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AsCodeDegreeEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AsCodeDegreeEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AsCodeDegree"/> object.
	/// </remarks>
	public class AsCodeDegreeEventArgs : System.EventArgs
	{
		private AsCodeDegreeColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AsCodeDegreeEventArgs class.
		///</summary>
		public AsCodeDegreeEventArgs(AsCodeDegreeColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AsCodeDegreeEventArgs class.
		///</summary>
		public AsCodeDegreeEventArgs(AsCodeDegreeColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AsCodeDegreeColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AsCodeDegreeColumn" />
		public AsCodeDegreeColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AsCodeDegree related events.
	///</summary>
	public delegate void AsCodeDegreeEventHandler(object sender, AsCodeDegreeEventArgs e);
	
	#region AsCodeDegreeComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AsCodeDegreeComparer : System.Collections.Generic.IComparer<AsCodeDegree>
	{
		AsCodeDegreeColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AsCodeDegreeComparer"/> class.
        /// </summary>
		public AsCodeDegreeComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AsCodeDegreeComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AsCodeDegreeComparer(AsCodeDegreeColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AsCodeDegree"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AsCodeDegree"/> to compare.</param>
        /// <param name="b">The second <c>AsCodeDegree</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AsCodeDegree a, AsCodeDegree b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AsCodeDegree entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AsCodeDegree a, AsCodeDegree b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AsCodeDegreeColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AsCodeDegreeKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AsCodeDegree"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AsCodeDegreeKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AsCodeDegreeKey class.
		/// </summary>
		public AsCodeDegreeKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AsCodeDegreeKey class.
		/// </summary>
		public AsCodeDegreeKey(AsCodeDegreeBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AsCodeDegreeId = entity.AsCodeDegreeId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AsCodeDegreeKey class.
		/// </summary>
		public AsCodeDegreeKey(System.Decimal _asCodeDegreeId)
		{
			#region Init Properties

			this.AsCodeDegreeId = _asCodeDegreeId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AsCodeDegreeBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AsCodeDegreeBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AsCodeDegreeId property
		private System.Decimal _asCodeDegreeId;
		
		/// <summary>
		/// Gets or sets the AsCodeDegreeId property.
		/// </summary>
		public System.Decimal AsCodeDegreeId
		{
			get { return _asCodeDegreeId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AsCodeDegreeId = value;
				
				_asCodeDegreeId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AsCodeDegreeId = ( values["AsCodeDegreeId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["AsCodeDegreeId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AsCodeDegreeId", AsCodeDegreeId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AsCodeDegreeId: {0}{1}",
								AsCodeDegreeId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AsCodeDegreeColumn Enum
	
	/// <summary>
	/// Enumerate the AsCodeDegree columns.
	/// </summary>
	[Serializable]
	public enum AsCodeDegreeColumn : int
	{
		/// <summary>
		/// AsCodeDegreeId : مسلسل الدرجة العلمية
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_ID")]
		[ColumnEnum("AS_CODE_DEGREE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		AsCodeDegreeId = 1,
		/// <summary>
		/// AsCodeDegreeClassId : مسلسل نوع الدرجة العلمية
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_CLASS_ID")]
		[ColumnEnum("AS_CODE_DEGREE_CLASS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsCodeDegreeClassId = 2,
		/// <summary>
		/// DegreeDescrAr : 
		/// </summary>
		[EnumTextValue("DEGREE_DESCR_AR")]
		[ColumnEnum("DEGREE_DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 150)]
		DegreeDescrAr = 3,
		/// <summary>
		/// DegreeDescrEn : 
		/// </summary>
		[EnumTextValue("DEGREE_DESCR_EN")]
		[ColumnEnum("DEGREE_DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		DegreeDescrEn = 4,
		/// <summary>
		/// DegreeCode : 
		/// </summary>
		[EnumTextValue("DEGREE_CODE")]
		[ColumnEnum("DEGREE_CODE", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		DegreeCode = 5,
		/// <summary>
		/// LinkDegreeId : KU 1,2
		/// </summary>
		[EnumTextValue("LINK_DEGREE_ID")]
		[ColumnEnum("LINK_DEGREE_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LinkDegreeId = 6,
		/// <summary>
		/// Notation : 
		/// </summary>
		[EnumTextValue("NOTATION")]
		[ColumnEnum("NOTATION", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Notation = 7,
		/// <summary>
		/// AdmHint : 
		/// </summary>
		[EnumTextValue("ADM_HINT")]
		[ColumnEnum("ADM_HINT", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		AdmHint = 8
	}//End enum

	#endregion AsCodeDegreeColumn Enum

} // end namespace
