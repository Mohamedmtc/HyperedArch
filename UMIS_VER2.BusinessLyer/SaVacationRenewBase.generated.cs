
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SaVacationRenew.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SA_VACATION_RENEW' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SaVacationRenewBase : EntityBase, ISaVacationRenew, IEntityId<SaVacationRenewKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SaVacationRenewEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SaVacationRenewEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SaVacationRenewEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SaVacationRenew> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaVacationRenewEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SaVacationRenewEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SaVacationRenewBase"/> instance.
		///</summary>
		public SaVacationRenewBase()
		{
			this.entityData = new SaVacationRenewEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SaVacationRenewBase"/> instance.
		///</summary>
		///<param name="_saVacationRenewId"></param>
		///<param name="_startDate"></param>
		///<param name="_endDate"></param>
		///<param name="_decisionNum"></param>
		///<param name="_decisionDate"></param>
		///<param name="_vacationDiscontinued"></param>
		///<param name="_returnDate"></param>
		///<param name="_vacationLocation"></param>
		///<param name="_comments"></param>
		///<param name="_gsCountryNodeId"></param>
		///<param name="_saVacationId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_gsApprovalHId"></param>
		public SaVacationRenewBase(System.Decimal _saVacationRenewId, System.DateTime _startDate, 
			System.DateTime _endDate, System.String _decisionNum, System.DateTime? _decisionDate, 
			System.Decimal? _vacationDiscontinued, System.DateTime? _returnDate, System.String _vacationLocation, 
			System.String _comments, System.Decimal? _gsCountryNodeId, System.Decimal _saVacationId, 
			System.Decimal _asFacultyInfoId, System.Decimal? _gsApprovalHId)
		{
			this.entityData = new SaVacationRenewEntityData();
			this.backupData = null;

			this.SaVacationRenewId = _saVacationRenewId;
			this.StartDate = _startDate;
			this.EndDate = _endDate;
			this.DecisionNum = _decisionNum;
			this.DecisionDate = _decisionDate;
			this.VacationDiscontinued = _vacationDiscontinued;
			this.ReturnDate = _returnDate;
			this.VacationLocation = _vacationLocation;
			this.Comments = _comments;
			this.GsCountryNodeId = _gsCountryNodeId;
			this.SaVacationId = _saVacationId;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.GsApprovalHId = _gsApprovalHId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SaVacationRenew"/> instance.
		///</summary>
		///<param name="_saVacationRenewId"></param>
		///<param name="_startDate"></param>
		///<param name="_endDate"></param>
		///<param name="_decisionNum"></param>
		///<param name="_decisionDate"></param>
		///<param name="_vacationDiscontinued"></param>
		///<param name="_returnDate"></param>
		///<param name="_vacationLocation"></param>
		///<param name="_comments"></param>
		///<param name="_gsCountryNodeId"></param>
		///<param name="_saVacationId"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_gsApprovalHId"></param>
		public static SaVacationRenew CreateSaVacationRenew(System.Decimal _saVacationRenewId, System.DateTime _startDate, 
			System.DateTime _endDate, System.String _decisionNum, System.DateTime? _decisionDate, 
			System.Decimal? _vacationDiscontinued, System.DateTime? _returnDate, System.String _vacationLocation, 
			System.String _comments, System.Decimal? _gsCountryNodeId, System.Decimal _saVacationId, 
			System.Decimal _asFacultyInfoId, System.Decimal? _gsApprovalHId)
		{
			SaVacationRenew newSaVacationRenew = new SaVacationRenew();
			newSaVacationRenew.SaVacationRenewId = _saVacationRenewId;
			newSaVacationRenew.StartDate = _startDate;
			newSaVacationRenew.EndDate = _endDate;
			newSaVacationRenew.DecisionNum = _decisionNum;
			newSaVacationRenew.DecisionDate = _decisionDate;
			newSaVacationRenew.VacationDiscontinued = _vacationDiscontinued;
			newSaVacationRenew.ReturnDate = _returnDate;
			newSaVacationRenew.VacationLocation = _vacationLocation;
			newSaVacationRenew.Comments = _comments;
			newSaVacationRenew.GsCountryNodeId = _gsCountryNodeId;
			newSaVacationRenew.SaVacationId = _saVacationId;
			newSaVacationRenew.AsFacultyInfoId = _asFacultyInfoId;
			newSaVacationRenew.GsApprovalHId = _gsApprovalHId;
			return newSaVacationRenew;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SaVacationRenewId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SaVacationRenewId
		{
			get
			{
				return this.entityData.SaVacationRenewId; 
			}
			
			set
			{
				if (this.entityData.SaVacationRenewId == value)
					return;
					
				OnColumnChanging(SaVacationRenewColumn.SaVacationRenewId, this.entityData.SaVacationRenewId);
				this.entityData.SaVacationRenewId = value;
				this.EntityId.SaVacationRenewId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaVacationRenewColumn.SaVacationRenewId, this.entityData.SaVacationRenewId);
				OnPropertyChanged("SaVacationRenewId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SA_VACATION_RENEW_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SA_VACATION_RENEW_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSaVacationRenewId
		{
			get { return this.entityData.OriginalSaVacationRenewId; }
			set { this.entityData.OriginalSaVacationRenewId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the StartDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime StartDate
		{
			get
			{
				return this.entityData.StartDate; 
			}
			
			set
			{
				if (this.entityData.StartDate == value)
					return;
					
				OnColumnChanging(SaVacationRenewColumn.StartDate, this.entityData.StartDate);
				this.entityData.StartDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaVacationRenewColumn.StartDate, this.entityData.StartDate);
				OnPropertyChanged("StartDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EndDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime EndDate
		{
			get
			{
				return this.entityData.EndDate; 
			}
			
			set
			{
				if (this.entityData.EndDate == value)
					return;
					
				OnColumnChanging(SaVacationRenewColumn.EndDate, this.entityData.EndDate);
				this.entityData.EndDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaVacationRenewColumn.EndDate, this.entityData.EndDate);
				OnPropertyChanged("EndDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DecisionNum property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String DecisionNum
		{
			get
			{
				return this.entityData.DecisionNum; 
			}
			
			set
			{
				if (this.entityData.DecisionNum == value)
					return;
					
				OnColumnChanging(SaVacationRenewColumn.DecisionNum, this.entityData.DecisionNum);
				this.entityData.DecisionNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaVacationRenewColumn.DecisionNum, this.entityData.DecisionNum);
				OnPropertyChanged("DecisionNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DecisionDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsDecisionDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DecisionDate
		{
			get
			{
				return this.entityData.DecisionDate; 
			}
			
			set
			{
				if (this.entityData.DecisionDate == value)
					return;
					
				OnColumnChanging(SaVacationRenewColumn.DecisionDate, this.entityData.DecisionDate);
				this.entityData.DecisionDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaVacationRenewColumn.DecisionDate, this.entityData.DecisionDate);
				OnPropertyChanged("DecisionDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the VacationDiscontinued property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsVacationDiscontinuedNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? VacationDiscontinued
		{
			get
			{
				return this.entityData.VacationDiscontinued; 
			}
			
			set
			{
				if (this.entityData.VacationDiscontinued == value)
					return;
					
				OnColumnChanging(SaVacationRenewColumn.VacationDiscontinued, this.entityData.VacationDiscontinued);
				this.entityData.VacationDiscontinued = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaVacationRenewColumn.VacationDiscontinued, this.entityData.VacationDiscontinued);
				OnPropertyChanged("VacationDiscontinued");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReturnDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsReturnDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ReturnDate
		{
			get
			{
				return this.entityData.ReturnDate; 
			}
			
			set
			{
				if (this.entityData.ReturnDate == value)
					return;
					
				OnColumnChanging(SaVacationRenewColumn.ReturnDate, this.entityData.ReturnDate);
				this.entityData.ReturnDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaVacationRenewColumn.ReturnDate, this.entityData.ReturnDate);
				OnPropertyChanged("ReturnDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the VacationLocation property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String VacationLocation
		{
			get
			{
				return this.entityData.VacationLocation; 
			}
			
			set
			{
				if (this.entityData.VacationLocation == value)
					return;
					
				OnColumnChanging(SaVacationRenewColumn.VacationLocation, this.entityData.VacationLocation);
				this.entityData.VacationLocation = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaVacationRenewColumn.VacationLocation, this.entityData.VacationLocation);
				OnPropertyChanged("VacationLocation");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Comments property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Comments
		{
			get
			{
				return this.entityData.Comments; 
			}
			
			set
			{
				if (this.entityData.Comments == value)
					return;
					
				OnColumnChanging(SaVacationRenewColumn.Comments, this.entityData.Comments);
				this.entityData.Comments = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaVacationRenewColumn.Comments, this.entityData.Comments);
				OnPropertyChanged("Comments");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCountryNodeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCountryNodeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCountryNodeId
		{
			get
			{
				return this.entityData.GsCountryNodeId; 
			}
			
			set
			{
				if (this.entityData.GsCountryNodeId == value)
					return;
					
				OnColumnChanging(SaVacationRenewColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				this.entityData.GsCountryNodeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaVacationRenewColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				OnPropertyChanged("GsCountryNodeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaVacationId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaVacationId
		{
			get
			{
				return this.entityData.SaVacationId; 
			}
			
			set
			{
				if (this.entityData.SaVacationId == value)
					return;
					
				OnColumnChanging(SaVacationRenewColumn.SaVacationId, this.entityData.SaVacationId);
				this.entityData.SaVacationId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaVacationRenewColumn.SaVacationId, this.entityData.SaVacationId);
				OnPropertyChanged("SaVacationId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(SaVacationRenewColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaVacationRenewColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsApprovalHId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsApprovalHIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsApprovalHId
		{
			get
			{
				return this.entityData.GsApprovalHId; 
			}
			
			set
			{
				if (this.entityData.GsApprovalHId == value)
					return;
					
				OnColumnChanging(SaVacationRenewColumn.GsApprovalHId, this.entityData.GsApprovalHId);
				this.entityData.GsApprovalHId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SaVacationRenewColumn.GsApprovalHId, this.entityData.GsApprovalHId);
				OnPropertyChanged("GsApprovalHId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsApprovalH"/>.
		/// </summary>
		/// <value>The source GsApprovalH for GsApprovalHId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsApprovalH GsApprovalHIdSource
      	{
            get { return entityData.GsApprovalHIdSource; }
            set { entityData.GsApprovalHIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaVacation"/>.
		/// </summary>
		/// <value>The source SaVacation for SaVacationId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaVacation SaVacationIdSource
      	{
            get { return entityData.SaVacationIdSource; }
            set { entityData.SaVacationIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DecisionNum", "Decision Num", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("VacationLocation", "Vacation Location", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Comments", "Comments", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SA_VACATION_RENEW"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SA_VACATION_RENEW_ID", "START_DATE", "END_DATE", "DECISION_NUM", "DECISION_DATE", "VACATION_DISCONTINUED", "RETURN_DATE", "VACATION_LOCATION", "COMMENTS", "GS_COUNTRY_NODE_ID", "SA_VACATION_ID", "AS_FACULTY_INFO_ID", "GS_APPROVAL_H_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SaVacationRenewEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SaVacationRenew) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SaVacationRenew>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SaVacationRenew);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SaVacationRenew Entity 
		///</summary>
		protected virtual SaVacationRenew Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SaVacationRenew copy = new SaVacationRenew();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SaVacationRenewId = this.SaVacationRenewId;
					copy.OriginalSaVacationRenewId = this.OriginalSaVacationRenewId;
				copy.StartDate = this.StartDate;
				copy.EndDate = this.EndDate;
				copy.DecisionNum = this.DecisionNum;
				copy.DecisionDate = this.DecisionDate;
				copy.VacationDiscontinued = this.VacationDiscontinued;
				copy.ReturnDate = this.ReturnDate;
				copy.VacationLocation = this.VacationLocation;
				copy.Comments = this.Comments;
				copy.GsCountryNodeId = this.GsCountryNodeId;
				copy.SaVacationId = this.SaVacationId;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.GsApprovalHId = this.GsApprovalHId;
			
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.GsApprovalHIdSource != null && existingCopies.Contains(this.GsApprovalHIdSource))
				copy.GsApprovalHIdSource = existingCopies[this.GsApprovalHIdSource] as GsApprovalH;
			else
				copy.GsApprovalHIdSource = MakeCopyOf(this.GsApprovalHIdSource, existingCopies) as GsApprovalH;
			if (this.SaVacationIdSource != null && existingCopies.Contains(this.SaVacationIdSource))
				copy.SaVacationIdSource = existingCopies[this.SaVacationIdSource] as SaVacation;
			else
				copy.SaVacationIdSource = MakeCopyOf(this.SaVacationIdSource, existingCopies) as SaVacation;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SaVacationRenew Entity 
		///</summary>
		public virtual SaVacationRenew Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SaVacationRenew Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SaVacationRenew DeepCopy()
		{
			return EntityHelper.Clone<SaVacationRenew>(this as SaVacationRenew);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SaVacationRenewEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SaVacationRenewEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SaVacationRenewEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SaVacationRenewColumn column)
		{
			switch(column)
			{
					case SaVacationRenewColumn.SaVacationRenewId:
					return entityData.SaVacationRenewId != _originalData.SaVacationRenewId;
					case SaVacationRenewColumn.StartDate:
					return entityData.StartDate != _originalData.StartDate;
					case SaVacationRenewColumn.EndDate:
					return entityData.EndDate != _originalData.EndDate;
					case SaVacationRenewColumn.DecisionNum:
					return entityData.DecisionNum != _originalData.DecisionNum;
					case SaVacationRenewColumn.DecisionDate:
					return entityData.DecisionDate != _originalData.DecisionDate;
					case SaVacationRenewColumn.VacationDiscontinued:
					return entityData.VacationDiscontinued != _originalData.VacationDiscontinued;
					case SaVacationRenewColumn.ReturnDate:
					return entityData.ReturnDate != _originalData.ReturnDate;
					case SaVacationRenewColumn.VacationLocation:
					return entityData.VacationLocation != _originalData.VacationLocation;
					case SaVacationRenewColumn.Comments:
					return entityData.Comments != _originalData.Comments;
					case SaVacationRenewColumn.GsCountryNodeId:
					return entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
					case SaVacationRenewColumn.SaVacationId:
					return entityData.SaVacationId != _originalData.SaVacationId;
					case SaVacationRenewColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case SaVacationRenewColumn.GsApprovalHId:
					return entityData.GsApprovalHId != _originalData.GsApprovalHId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SaVacationRenewColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SaVacationRenewId != _originalData.SaVacationRenewId;
			result = result || entityData.StartDate != _originalData.StartDate;
			result = result || entityData.EndDate != _originalData.EndDate;
			result = result || entityData.DecisionNum != _originalData.DecisionNum;
			result = result || entityData.DecisionDate != _originalData.DecisionDate;
			result = result || entityData.VacationDiscontinued != _originalData.VacationDiscontinued;
			result = result || entityData.ReturnDate != _originalData.ReturnDate;
			result = result || entityData.VacationLocation != _originalData.VacationLocation;
			result = result || entityData.Comments != _originalData.Comments;
			result = result || entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
			result = result || entityData.SaVacationId != _originalData.SaVacationId;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.GsApprovalHId != _originalData.GsApprovalHId;
			return result;
		}	
		
		///<summary>
		///  Returns a SaVacationRenew Entity with the original data.
		///</summary>
		public SaVacationRenew GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSaVacationRenew(
				_originalData.SaVacationRenewId,
				_originalData.StartDate,
				_originalData.EndDate,
				_originalData.DecisionNum,
				_originalData.DecisionDate,
				_originalData.VacationDiscontinued,
				_originalData.ReturnDate,
				_originalData.VacationLocation,
				_originalData.Comments,
				_originalData.GsCountryNodeId,
				_originalData.SaVacationId,
				_originalData.AsFacultyInfoId,
				_originalData.GsApprovalHId
				);
				
			return (SaVacationRenew)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SaVacationRenewBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SaVacationRenewBase)
				return ValueEquals(this, (SaVacationRenewBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SaVacationRenewBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SaVacationRenewId.GetHashCode() ^ 
					this.StartDate.GetHashCode() ^ 
					this.EndDate.GetHashCode() ^ 
					((this.DecisionNum == null) ? string.Empty : this.DecisionNum.ToString()).GetHashCode() ^ 
					((this.DecisionDate == null) ? string.Empty : this.DecisionDate.ToString()).GetHashCode() ^ 
					((this.VacationDiscontinued == null) ? string.Empty : this.VacationDiscontinued.ToString()).GetHashCode() ^ 
					((this.ReturnDate == null) ? string.Empty : this.ReturnDate.ToString()).GetHashCode() ^ 
					((this.VacationLocation == null) ? string.Empty : this.VacationLocation.ToString()).GetHashCode() ^ 
					((this.Comments == null) ? string.Empty : this.Comments.ToString()).GetHashCode() ^ 
					((this.GsCountryNodeId == null) ? string.Empty : this.GsCountryNodeId.ToString()).GetHashCode() ^ 
					this.SaVacationId.GetHashCode() ^ 
					this.AsFacultyInfoId.GetHashCode() ^ 
					((this.GsApprovalHId == null) ? string.Empty : this.GsApprovalHId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SaVacationRenewBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SaVacationRenewBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SaVacationRenewBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SaVacationRenewBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SaVacationRenewBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SaVacationRenewBase Object1, SaVacationRenewBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SaVacationRenewId != Object2.SaVacationRenewId)
				equal = false;
			if (Object1.StartDate != Object2.StartDate)
				equal = false;
			if (Object1.EndDate != Object2.EndDate)
				equal = false;
			if ( Object1.DecisionNum != null && Object2.DecisionNum != null )
			{
				if (Object1.DecisionNum != Object2.DecisionNum)
					equal = false;
			}
			else if (Object1.DecisionNum == null ^ Object2.DecisionNum == null )
			{
				equal = false;
			}
			if ( Object1.DecisionDate != null && Object2.DecisionDate != null )
			{
				if (Object1.DecisionDate != Object2.DecisionDate)
					equal = false;
			}
			else if (Object1.DecisionDate == null ^ Object2.DecisionDate == null )
			{
				equal = false;
			}
			if ( Object1.VacationDiscontinued != null && Object2.VacationDiscontinued != null )
			{
				if (Object1.VacationDiscontinued != Object2.VacationDiscontinued)
					equal = false;
			}
			else if (Object1.VacationDiscontinued == null ^ Object2.VacationDiscontinued == null )
			{
				equal = false;
			}
			if ( Object1.ReturnDate != null && Object2.ReturnDate != null )
			{
				if (Object1.ReturnDate != Object2.ReturnDate)
					equal = false;
			}
			else if (Object1.ReturnDate == null ^ Object2.ReturnDate == null )
			{
				equal = false;
			}
			if ( Object1.VacationLocation != null && Object2.VacationLocation != null )
			{
				if (Object1.VacationLocation != Object2.VacationLocation)
					equal = false;
			}
			else if (Object1.VacationLocation == null ^ Object2.VacationLocation == null )
			{
				equal = false;
			}
			if ( Object1.Comments != null && Object2.Comments != null )
			{
				if (Object1.Comments != Object2.Comments)
					equal = false;
			}
			else if (Object1.Comments == null ^ Object2.Comments == null )
			{
				equal = false;
			}
			if ( Object1.GsCountryNodeId != null && Object2.GsCountryNodeId != null )
			{
				if (Object1.GsCountryNodeId != Object2.GsCountryNodeId)
					equal = false;
			}
			else if (Object1.GsCountryNodeId == null ^ Object2.GsCountryNodeId == null )
			{
				equal = false;
			}
			if (Object1.SaVacationId != Object2.SaVacationId)
				equal = false;
			if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
				equal = false;
			if ( Object1.GsApprovalHId != null && Object2.GsApprovalHId != null )
			{
				if (Object1.GsApprovalHId != Object2.GsApprovalHId)
					equal = false;
			}
			else if (Object1.GsApprovalHId == null ^ Object2.GsApprovalHId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SaVacationRenewBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SaVacationRenewComparer GetComparer()
        {
            return new SaVacationRenewComparer();
        }
        */

        // Comparer delegates back to SaVacationRenew
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SaVacationRenew rhs, SaVacationRenewColumn which)
        {
            switch (which)
            {
            	
            	
            	case SaVacationRenewColumn.SaVacationRenewId:
            		return this.SaVacationRenewId.CompareTo(rhs.SaVacationRenewId);
            		
            		                 
            	
            	
            	case SaVacationRenewColumn.StartDate:
            		return this.StartDate.CompareTo(rhs.StartDate);
            		
            		                 
            	
            	
            	case SaVacationRenewColumn.EndDate:
            		return this.EndDate.CompareTo(rhs.EndDate);
            		
            		                 
            	
            	
            	case SaVacationRenewColumn.DecisionNum:
            		return this.DecisionNum.CompareTo(rhs.DecisionNum);
            		
            		                 
            	
            	
            	case SaVacationRenewColumn.DecisionDate:
            		return this.DecisionDate.Value.CompareTo(rhs.DecisionDate.Value);
            		
            		                 
            	
            	
            	case SaVacationRenewColumn.VacationDiscontinued:
            		return this.VacationDiscontinued.Value.CompareTo(rhs.VacationDiscontinued.Value);
            		
            		                 
            	
            	
            	case SaVacationRenewColumn.ReturnDate:
            		return this.ReturnDate.Value.CompareTo(rhs.ReturnDate.Value);
            		
            		                 
            	
            	
            	case SaVacationRenewColumn.VacationLocation:
            		return this.VacationLocation.CompareTo(rhs.VacationLocation);
            		
            		                 
            	
            	
            	case SaVacationRenewColumn.Comments:
            		return this.Comments.CompareTo(rhs.Comments);
            		
            		                 
            	
            	
            	case SaVacationRenewColumn.GsCountryNodeId:
            		return this.GsCountryNodeId.Value.CompareTo(rhs.GsCountryNodeId.Value);
            		
            		                 
            	
            	
            	case SaVacationRenewColumn.SaVacationId:
            		return this.SaVacationId.CompareTo(rhs.SaVacationId);
            		
            		                 
            	
            	
            	case SaVacationRenewColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.CompareTo(rhs.AsFacultyInfoId);
            		
            		                 
            	
            	
            	case SaVacationRenewColumn.GsApprovalHId:
            		return this.GsApprovalHId.Value.CompareTo(rhs.GsApprovalHId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SaVacationRenewKey> Members
		
		// member variable for the EntityId property
		private SaVacationRenewKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SaVacationRenewKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SaVacationRenewKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SaVacationRenew")
					.Append("|").Append( this.SaVacationRenewId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{14}{13}- SaVacationRenewId: {0}{13}- StartDate: {1}{13}- EndDate: {2}{13}- DecisionNum: {3}{13}- DecisionDate: {4}{13}- VacationDiscontinued: {5}{13}- ReturnDate: {6}{13}- VacationLocation: {7}{13}- Comments: {8}{13}- GsCountryNodeId: {9}{13}- SaVacationId: {10}{13}- AsFacultyInfoId: {11}{13}- GsApprovalHId: {12}{13}{15}", 
				this.SaVacationRenewId,
				this.StartDate,
				this.EndDate,
				(this.DecisionNum == null) ? string.Empty : this.DecisionNum.ToString(),
				(this.DecisionDate == null) ? string.Empty : this.DecisionDate.ToString(),
				(this.VacationDiscontinued == null) ? string.Empty : this.VacationDiscontinued.ToString(),
				(this.ReturnDate == null) ? string.Empty : this.ReturnDate.ToString(),
				(this.VacationLocation == null) ? string.Empty : this.VacationLocation.ToString(),
				(this.Comments == null) ? string.Empty : this.Comments.ToString(),
				(this.GsCountryNodeId == null) ? string.Empty : this.GsCountryNodeId.ToString(),
				this.SaVacationId,
				this.AsFacultyInfoId,
				(this.GsApprovalHId == null) ? string.Empty : this.GsApprovalHId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SA_VACATION_RENEW' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SaVacationRenewEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SA_VACATION_RENEW_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SA_VACATION_RENEW"</remarks>
		public System.Decimal SaVacationRenewId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSaVacationRenewId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// START_DATE : 
		/// </summary>
		public System.DateTime		  StartDate = DateTime.MinValue;
		
		/// <summary>
		/// END_DATE : 
		/// </summary>
		public System.DateTime		  EndDate = DateTime.MinValue;
		
		/// <summary>
		/// DECISION_NUM : 
		/// </summary>
		public System.String		  DecisionNum = null;
		
		/// <summary>
		/// DECISION_DATE : 
		/// </summary>
		public System.DateTime?		  DecisionDate = null;
		
		/// <summary>
		/// VACATION_DISCONTINUED : 
		/// </summary>
		public System.Decimal?		  VacationDiscontinued = null;
		
		/// <summary>
		/// RETURN_DATE : 
		/// </summary>
		public System.DateTime?		  ReturnDate = null;
		
		/// <summary>
		/// VACATION_LOCATION : 
		/// </summary>
		public System.String		  VacationLocation = null;
		
		/// <summary>
		/// COMMENTS : 
		/// </summary>
		public System.String		  Comments = null;
		
		/// <summary>
		/// GS_COUNTRY_NODE_ID : 
		/// </summary>
		public System.Decimal?		  GsCountryNodeId = null;
		
		/// <summary>
		/// SA_VACATION_ID : 
		/// </summary>
		public System.Decimal		  SaVacationId = 0.0m;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal		  AsFacultyInfoId = 0.0m;
		
		/// <summary>
		/// GS_APPROVAL_H_ID : 
		/// </summary>
		public System.Decimal?		  GsApprovalHId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private GsApprovalH _gsApprovalHidSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsApprovalH"/>.
		/// </summary>
		/// <value>The source GsApprovalH for GsApprovalHId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsApprovalH GsApprovalHIdSource
      	{
            get { return this._gsApprovalHidSource; }
            set { this._gsApprovalHidSource = value; }
      	}
		private SaVacation _saVacationIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaVacation"/>.
		/// </summary>
		/// <value>The source SaVacation for SaVacationId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaVacation SaVacationIdSource
      	{
            get { return this._saVacationIdSource; }
            set { this._saVacationIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SaVacationRenewEntityData _tmp = new SaVacationRenewEntityData();
						
			_tmp.SaVacationRenewId = this.SaVacationRenewId;
			_tmp.OriginalSaVacationRenewId = this.OriginalSaVacationRenewId;
			
			_tmp.StartDate = this.StartDate;
			_tmp.EndDate = this.EndDate;
			_tmp.DecisionNum = this.DecisionNum;
			_tmp.DecisionDate = this.DecisionDate;
			_tmp.VacationDiscontinued = this.VacationDiscontinued;
			_tmp.ReturnDate = this.ReturnDate;
			_tmp.VacationLocation = this.VacationLocation;
			_tmp.Comments = this.Comments;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.SaVacationId = this.SaVacationId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.GsApprovalHId = this.GsApprovalHId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.GsApprovalHIdSource != null)
				_tmp.GsApprovalHIdSource = MakeCopyOf(this.GsApprovalHIdSource) as GsApprovalH;
			if (this.SaVacationIdSource != null)
				_tmp.SaVacationIdSource = MakeCopyOf(this.SaVacationIdSource) as SaVacation;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SaVacationRenewEntityData _tmp = new SaVacationRenewEntityData();
						
			_tmp.SaVacationRenewId = this.SaVacationRenewId;
			_tmp.OriginalSaVacationRenewId = this.OriginalSaVacationRenewId;
			
			_tmp.StartDate = this.StartDate;
			_tmp.EndDate = this.EndDate;
			_tmp.DecisionNum = this.DecisionNum;
			_tmp.DecisionDate = this.DecisionDate;
			_tmp.VacationDiscontinued = this.VacationDiscontinued;
			_tmp.ReturnDate = this.ReturnDate;
			_tmp.VacationLocation = this.VacationLocation;
			_tmp.Comments = this.Comments;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.SaVacationId = this.SaVacationId;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.GsApprovalHId = this.GsApprovalHId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.GsApprovalHIdSource != null && existingCopies.Contains(this.GsApprovalHIdSource))
				_tmp.GsApprovalHIdSource = existingCopies[this.GsApprovalHIdSource] as GsApprovalH;
			else
				_tmp.GsApprovalHIdSource = MakeCopyOf(this.GsApprovalHIdSource, existingCopies) as GsApprovalH;
			if (this.SaVacationIdSource != null && existingCopies.Contains(this.SaVacationIdSource))
				_tmp.SaVacationIdSource = existingCopies[this.SaVacationIdSource] as SaVacation;
			else
				_tmp.SaVacationIdSource = MakeCopyOf(this.SaVacationIdSource, existingCopies) as SaVacation;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaVacationRenewColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SaVacationRenewColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaVacationRenewColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SaVacationRenewColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaVacationRenewColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SaVacationRenewColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SaVacationRenewEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SaVacationRenewEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SaVacationRenewColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SaVacationRenewColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SaVacationRenewEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SaVacationRenewEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SaVacationRenewEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SaVacationRenew"/> object.
	/// </remarks>
	public class SaVacationRenewEventArgs : System.EventArgs
	{
		private SaVacationRenewColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SaVacationRenewEventArgs class.
		///</summary>
		public SaVacationRenewEventArgs(SaVacationRenewColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SaVacationRenewEventArgs class.
		///</summary>
		public SaVacationRenewEventArgs(SaVacationRenewColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SaVacationRenewColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SaVacationRenewColumn" />
		public SaVacationRenewColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SaVacationRenew related events.
	///</summary>
	public delegate void SaVacationRenewEventHandler(object sender, SaVacationRenewEventArgs e);
	
	#region SaVacationRenewComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SaVacationRenewComparer : System.Collections.Generic.IComparer<SaVacationRenew>
	{
		SaVacationRenewColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SaVacationRenewComparer"/> class.
        /// </summary>
		public SaVacationRenewComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SaVacationRenewComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SaVacationRenewComparer(SaVacationRenewColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SaVacationRenew"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SaVacationRenew"/> to compare.</param>
        /// <param name="b">The second <c>SaVacationRenew</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SaVacationRenew a, SaVacationRenew b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SaVacationRenew entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SaVacationRenew a, SaVacationRenew b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SaVacationRenewColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SaVacationRenewKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SaVacationRenew"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SaVacationRenewKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SaVacationRenewKey class.
		/// </summary>
		public SaVacationRenewKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SaVacationRenewKey class.
		/// </summary>
		public SaVacationRenewKey(SaVacationRenewBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SaVacationRenewId = entity.SaVacationRenewId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SaVacationRenewKey class.
		/// </summary>
		public SaVacationRenewKey(System.Decimal _saVacationRenewId)
		{
			#region Init Properties

			this.SaVacationRenewId = _saVacationRenewId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SaVacationRenewBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SaVacationRenewBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SaVacationRenewId property
		private System.Decimal _saVacationRenewId;
		
		/// <summary>
		/// Gets or sets the SaVacationRenewId property.
		/// </summary>
		public System.Decimal SaVacationRenewId
		{
			get { return _saVacationRenewId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SaVacationRenewId = value;
				
				_saVacationRenewId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SaVacationRenewId = ( values["SaVacationRenewId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SaVacationRenewId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SaVacationRenewId", SaVacationRenewId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SaVacationRenewId: {0}{1}",
								SaVacationRenewId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SaVacationRenewColumn Enum
	
	/// <summary>
	/// Enumerate the SaVacationRenew columns.
	/// </summary>
	[Serializable]
	public enum SaVacationRenewColumn : int
	{
		/// <summary>
		/// SaVacationRenewId : 
		/// </summary>
		[EnumTextValue("SA_VACATION_RENEW_ID")]
		[ColumnEnum("SA_VACATION_RENEW_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SaVacationRenewId = 1,
		/// <summary>
		/// StartDate : 
		/// </summary>
		[EnumTextValue("START_DATE")]
		[ColumnEnum("START_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		StartDate = 2,
		/// <summary>
		/// EndDate : 
		/// </summary>
		[EnumTextValue("END_DATE")]
		[ColumnEnum("END_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		EndDate = 3,
		/// <summary>
		/// DecisionNum : 
		/// </summary>
		[EnumTextValue("DECISION_NUM")]
		[ColumnEnum("DECISION_NUM", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		DecisionNum = 4,
		/// <summary>
		/// DecisionDate : 
		/// </summary>
		[EnumTextValue("DECISION_DATE")]
		[ColumnEnum("DECISION_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DecisionDate = 5,
		/// <summary>
		/// VacationDiscontinued : 
		/// </summary>
		[EnumTextValue("VACATION_DISCONTINUED")]
		[ColumnEnum("VACATION_DISCONTINUED", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		VacationDiscontinued = 6,
		/// <summary>
		/// ReturnDate : 
		/// </summary>
		[EnumTextValue("RETURN_DATE")]
		[ColumnEnum("RETURN_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ReturnDate = 7,
		/// <summary>
		/// VacationLocation : 
		/// </summary>
		[EnumTextValue("VACATION_LOCATION")]
		[ColumnEnum("VACATION_LOCATION", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		VacationLocation = 8,
		/// <summary>
		/// Comments : 
		/// </summary>
		[EnumTextValue("COMMENTS")]
		[ColumnEnum("COMMENTS", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		Comments = 9,
		/// <summary>
		/// GsCountryNodeId : 
		/// </summary>
		[EnumTextValue("GS_COUNTRY_NODE_ID")]
		[ColumnEnum("GS_COUNTRY_NODE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCountryNodeId = 10,
		/// <summary>
		/// SaVacationId : 
		/// </summary>
		[EnumTextValue("SA_VACATION_ID")]
		[ColumnEnum("SA_VACATION_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaVacationId = 11,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsFacultyInfoId = 12,
		/// <summary>
		/// GsApprovalHId : 
		/// </summary>
		[EnumTextValue("GS_APPROVAL_H_ID")]
		[ColumnEnum("GS_APPROVAL_H_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsApprovalHId = 13
	}//End enum

	#endregion SaVacationRenewColumn Enum

} // end namespace
