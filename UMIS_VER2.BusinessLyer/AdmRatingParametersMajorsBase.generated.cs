
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AdmRatingParametersMajors.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ADM_RATING_PARAMETERS_MAJORS' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AdmRatingParametersMajorsBase : EntityBase, IAdmRatingParametersMajors, IEntityId<AdmRatingParametersMajorsKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AdmRatingParametersMajorsEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AdmRatingParametersMajorsEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AdmRatingParametersMajorsEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AdmRatingParametersMajors> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmRatingParametersMajorsEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmRatingParametersMajorsEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AdmRatingParametersMajorsBase"/> instance.
		///</summary>
		public AdmRatingParametersMajorsBase()
		{
			this.entityData = new AdmRatingParametersMajorsEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AdmRatingParametersMajorsBase"/> instance.
		///</summary>
		///<param name="_admRatingParametersMajorsId">خطة الأعداد المقترحة</param>
		///<param name="_admOpenAcadSemesterId"></param>
		///<param name="_entMainId"></param>
		///<param name="_asCodeDegreeId"></param>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_allRequiredNumbers"></param>
		///<param name="_maleNumbers"></param>
		///<param name="_femaleNumbers"></param>
		///<param name="_admAdmissionBandId">XXXX default=0/1</param>
		///<param name="_transMaleNumbers"></param>
		///<param name="_transFemaleNumbers"></param>
		///<param name="_transAllNumbers"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_allRequiredNumbersProv">provisionaly accepted</param>
		///<param name="_gsCdeOperator"></param>
		///<param name="_qualPrcnt"></param>
		///<param name="_exemptFlg"></param>
		///<param name="_admCdeAppTypeId"></param>
		public AdmRatingParametersMajorsBase(System.Decimal _admRatingParametersMajorsId, System.Decimal _admOpenAcadSemesterId, 
			System.Decimal? _entMainId, System.Decimal _asCodeDegreeId, System.Decimal _asCodeDegreeClassId, 
			System.Decimal? _allRequiredNumbers, System.Decimal? _maleNumbers, 
			System.Decimal? _femaleNumbers, System.Decimal? _admAdmissionBandId, 
			System.Decimal? _transMaleNumbers, System.Decimal? _transFemaleNumbers, 
			System.Decimal? _transAllNumbers, System.Decimal? _asFacultyInfoId, 
			System.Decimal? _allRequiredNumbersProv, System.String _gsCdeOperator, 
			System.Decimal? _qualPrcnt, System.Boolean? _exemptFlg, System.Decimal? _admCdeAppTypeId)
		{
			this.entityData = new AdmRatingParametersMajorsEntityData();
			this.backupData = null;

			this.AdmRatingParametersMajorsId = _admRatingParametersMajorsId;
			this.AdmOpenAcadSemesterId = _admOpenAcadSemesterId;
			this.EntMainId = _entMainId;
			this.AsCodeDegreeId = _asCodeDegreeId;
			this.AsCodeDegreeClassId = _asCodeDegreeClassId;
			this.AllRequiredNumbers = _allRequiredNumbers;
			this.MaleNumbers = _maleNumbers;
			this.FemaleNumbers = _femaleNumbers;
			this.AdmAdmissionBandId = _admAdmissionBandId;
			this.TransMaleNumbers = _transMaleNumbers;
			this.TransFemaleNumbers = _transFemaleNumbers;
			this.TransAllNumbers = _transAllNumbers;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.AllRequiredNumbersProv = _allRequiredNumbersProv;
			this.GsCdeOperator = _gsCdeOperator;
			this.QualPrcnt = _qualPrcnt;
			this.ExemptFlg = _exemptFlg;
			this.AdmCdeAppTypeId = _admCdeAppTypeId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AdmRatingParametersMajors"/> instance.
		///</summary>
		///<param name="_admRatingParametersMajorsId">خطة الأعداد المقترحة</param>
		///<param name="_admOpenAcadSemesterId"></param>
		///<param name="_entMainId"></param>
		///<param name="_asCodeDegreeId"></param>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_allRequiredNumbers"></param>
		///<param name="_maleNumbers"></param>
		///<param name="_femaleNumbers"></param>
		///<param name="_admAdmissionBandId">XXXX default=0/1</param>
		///<param name="_transMaleNumbers"></param>
		///<param name="_transFemaleNumbers"></param>
		///<param name="_transAllNumbers"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_allRequiredNumbersProv">provisionaly accepted</param>
		///<param name="_gsCdeOperator"></param>
		///<param name="_qualPrcnt"></param>
		///<param name="_exemptFlg"></param>
		///<param name="_admCdeAppTypeId"></param>
		public static AdmRatingParametersMajors CreateAdmRatingParametersMajors(System.Decimal _admRatingParametersMajorsId, System.Decimal _admOpenAcadSemesterId, 
			System.Decimal? _entMainId, System.Decimal _asCodeDegreeId, System.Decimal _asCodeDegreeClassId, 
			System.Decimal? _allRequiredNumbers, System.Decimal? _maleNumbers, 
			System.Decimal? _femaleNumbers, System.Decimal? _admAdmissionBandId, 
			System.Decimal? _transMaleNumbers, System.Decimal? _transFemaleNumbers, 
			System.Decimal? _transAllNumbers, System.Decimal? _asFacultyInfoId, 
			System.Decimal? _allRequiredNumbersProv, System.String _gsCdeOperator, 
			System.Decimal? _qualPrcnt, System.Boolean? _exemptFlg, System.Decimal? _admCdeAppTypeId)
		{
			AdmRatingParametersMajors newAdmRatingParametersMajors = new AdmRatingParametersMajors();
			newAdmRatingParametersMajors.AdmRatingParametersMajorsId = _admRatingParametersMajorsId;
			newAdmRatingParametersMajors.AdmOpenAcadSemesterId = _admOpenAcadSemesterId;
			newAdmRatingParametersMajors.EntMainId = _entMainId;
			newAdmRatingParametersMajors.AsCodeDegreeId = _asCodeDegreeId;
			newAdmRatingParametersMajors.AsCodeDegreeClassId = _asCodeDegreeClassId;
			newAdmRatingParametersMajors.AllRequiredNumbers = _allRequiredNumbers;
			newAdmRatingParametersMajors.MaleNumbers = _maleNumbers;
			newAdmRatingParametersMajors.FemaleNumbers = _femaleNumbers;
			newAdmRatingParametersMajors.AdmAdmissionBandId = _admAdmissionBandId;
			newAdmRatingParametersMajors.TransMaleNumbers = _transMaleNumbers;
			newAdmRatingParametersMajors.TransFemaleNumbers = _transFemaleNumbers;
			newAdmRatingParametersMajors.TransAllNumbers = _transAllNumbers;
			newAdmRatingParametersMajors.AsFacultyInfoId = _asFacultyInfoId;
			newAdmRatingParametersMajors.AllRequiredNumbersProv = _allRequiredNumbersProv;
			newAdmRatingParametersMajors.GsCdeOperator = _gsCdeOperator;
			newAdmRatingParametersMajors.QualPrcnt = _qualPrcnt;
			newAdmRatingParametersMajors.ExemptFlg = _exemptFlg;
			newAdmRatingParametersMajors.AdmCdeAppTypeId = _admCdeAppTypeId;
			return newAdmRatingParametersMajors;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AdmRatingParametersMajorsId property. 
		///		خطة الأعداد المقترحة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"خطة الأعداد المقترحة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal AdmRatingParametersMajorsId
		{
			get
			{
				return this.entityData.AdmRatingParametersMajorsId; 
			}
			
			set
			{
				if (this.entityData.AdmRatingParametersMajorsId == value)
					return;
					
				OnColumnChanging(AdmRatingParametersMajorsColumn.AdmRatingParametersMajorsId, this.entityData.AdmRatingParametersMajorsId);
				this.entityData.AdmRatingParametersMajorsId = value;
				this.EntityId.AdmRatingParametersMajorsId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmRatingParametersMajorsColumn.AdmRatingParametersMajorsId, this.entityData.AdmRatingParametersMajorsId);
				OnPropertyChanged("AdmRatingParametersMajorsId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ADM_RATING_PARAMETERS_MAJORS_ID property.
		///		خطة الأعداد المقترحة
		/// </summary>
		/// <remarks>This is the original value of the ADM_RATING_PARAMETERS_MAJORS_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalAdmRatingParametersMajorsId
		{
			get { return this.entityData.OriginalAdmRatingParametersMajorsId; }
			set { this.entityData.OriginalAdmRatingParametersMajorsId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the AdmOpenAcadSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AdmOpenAcadSemesterId
		{
			get
			{
				return this.entityData.AdmOpenAcadSemesterId; 
			}
			
			set
			{
				if (this.entityData.AdmOpenAcadSemesterId == value)
					return;
					
				OnColumnChanging(AdmRatingParametersMajorsColumn.AdmOpenAcadSemesterId, this.entityData.AdmOpenAcadSemesterId);
				this.entityData.AdmOpenAcadSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmRatingParametersMajorsColumn.AdmOpenAcadSemesterId, this.entityData.AdmOpenAcadSemesterId);
				OnPropertyChanged("AdmOpenAcadSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntMainId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntMainIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntMainId
		{
			get
			{
				return this.entityData.EntMainId; 
			}
			
			set
			{
				if (this.entityData.EntMainId == value)
					return;
					
				OnColumnChanging(AdmRatingParametersMajorsColumn.EntMainId, this.entityData.EntMainId);
				this.entityData.EntMainId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmRatingParametersMajorsColumn.EntMainId, this.entityData.EntMainId);
				OnPropertyChanged("EntMainId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsCodeDegreeId
		{
			get
			{
				return this.entityData.AsCodeDegreeId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeId == value)
					return;
					
				OnColumnChanging(AdmRatingParametersMajorsColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				this.entityData.AsCodeDegreeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmRatingParametersMajorsColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				OnPropertyChanged("AsCodeDegreeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeClassId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsCodeDegreeClassId
		{
			get
			{
				return this.entityData.AsCodeDegreeClassId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeClassId == value)
					return;
					
				OnColumnChanging(AdmRatingParametersMajorsColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				this.entityData.AsCodeDegreeClassId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmRatingParametersMajorsColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				OnPropertyChanged("AsCodeDegreeClassId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AllRequiredNumbers property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAllRequiredNumbersNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AllRequiredNumbers
		{
			get
			{
				return this.entityData.AllRequiredNumbers; 
			}
			
			set
			{
				if (this.entityData.AllRequiredNumbers == value)
					return;
					
				OnColumnChanging(AdmRatingParametersMajorsColumn.AllRequiredNumbers, this.entityData.AllRequiredNumbers);
				this.entityData.AllRequiredNumbers = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmRatingParametersMajorsColumn.AllRequiredNumbers, this.entityData.AllRequiredNumbers);
				OnPropertyChanged("AllRequiredNumbers");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaleNumbers property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMaleNumbersNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MaleNumbers
		{
			get
			{
				return this.entityData.MaleNumbers; 
			}
			
			set
			{
				if (this.entityData.MaleNumbers == value)
					return;
					
				OnColumnChanging(AdmRatingParametersMajorsColumn.MaleNumbers, this.entityData.MaleNumbers);
				this.entityData.MaleNumbers = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmRatingParametersMajorsColumn.MaleNumbers, this.entityData.MaleNumbers);
				OnPropertyChanged("MaleNumbers");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FemaleNumbers property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFemaleNumbersNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FemaleNumbers
		{
			get
			{
				return this.entityData.FemaleNumbers; 
			}
			
			set
			{
				if (this.entityData.FemaleNumbers == value)
					return;
					
				OnColumnChanging(AdmRatingParametersMajorsColumn.FemaleNumbers, this.entityData.FemaleNumbers);
				this.entityData.FemaleNumbers = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmRatingParametersMajorsColumn.FemaleNumbers, this.entityData.FemaleNumbers);
				OnPropertyChanged("FemaleNumbers");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmAdmissionBandId property. 
		///		XXXX default=0/1
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmAdmissionBandIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XXXX default=0/1"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmAdmissionBandId
		{
			get
			{
				return this.entityData.AdmAdmissionBandId; 
			}
			
			set
			{
				if (this.entityData.AdmAdmissionBandId == value)
					return;
					
				OnColumnChanging(AdmRatingParametersMajorsColumn.AdmAdmissionBandId, this.entityData.AdmAdmissionBandId);
				this.entityData.AdmAdmissionBandId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmRatingParametersMajorsColumn.AdmAdmissionBandId, this.entityData.AdmAdmissionBandId);
				OnPropertyChanged("AdmAdmissionBandId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransMaleNumbers property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTransMaleNumbersNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TransMaleNumbers
		{
			get
			{
				return this.entityData.TransMaleNumbers; 
			}
			
			set
			{
				if (this.entityData.TransMaleNumbers == value)
					return;
					
				OnColumnChanging(AdmRatingParametersMajorsColumn.TransMaleNumbers, this.entityData.TransMaleNumbers);
				this.entityData.TransMaleNumbers = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmRatingParametersMajorsColumn.TransMaleNumbers, this.entityData.TransMaleNumbers);
				OnPropertyChanged("TransMaleNumbers");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransFemaleNumbers property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTransFemaleNumbersNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TransFemaleNumbers
		{
			get
			{
				return this.entityData.TransFemaleNumbers; 
			}
			
			set
			{
				if (this.entityData.TransFemaleNumbers == value)
					return;
					
				OnColumnChanging(AdmRatingParametersMajorsColumn.TransFemaleNumbers, this.entityData.TransFemaleNumbers);
				this.entityData.TransFemaleNumbers = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmRatingParametersMajorsColumn.TransFemaleNumbers, this.entityData.TransFemaleNumbers);
				OnPropertyChanged("TransFemaleNumbers");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransAllNumbers property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTransAllNumbersNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TransAllNumbers
		{
			get
			{
				return this.entityData.TransAllNumbers; 
			}
			
			set
			{
				if (this.entityData.TransAllNumbers == value)
					return;
					
				OnColumnChanging(AdmRatingParametersMajorsColumn.TransAllNumbers, this.entityData.TransAllNumbers);
				this.entityData.TransAllNumbers = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmRatingParametersMajorsColumn.TransAllNumbers, this.entityData.TransAllNumbers);
				OnPropertyChanged("TransAllNumbers");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(AdmRatingParametersMajorsColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmRatingParametersMajorsColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AllRequiredNumbersProv property. 
		///		provisionaly accepted
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAllRequiredNumbersProvNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"provisionaly accepted"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AllRequiredNumbersProv
		{
			get
			{
				return this.entityData.AllRequiredNumbersProv; 
			}
			
			set
			{
				if (this.entityData.AllRequiredNumbersProv == value)
					return;
					
				OnColumnChanging(AdmRatingParametersMajorsColumn.AllRequiredNumbersProv, this.entityData.AllRequiredNumbersProv);
				this.entityData.AllRequiredNumbersProv = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmRatingParametersMajorsColumn.AllRequiredNumbersProv, this.entityData.AllRequiredNumbersProv);
				OnPropertyChanged("AllRequiredNumbersProv");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCdeOperator property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 2)]
		public virtual System.String GsCdeOperator
		{
			get
			{
				return this.entityData.GsCdeOperator; 
			}
			
			set
			{
				if (this.entityData.GsCdeOperator == value)
					return;
					
				OnColumnChanging(AdmRatingParametersMajorsColumn.GsCdeOperator, this.entityData.GsCdeOperator);
				this.entityData.GsCdeOperator = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmRatingParametersMajorsColumn.GsCdeOperator, this.entityData.GsCdeOperator);
				OnPropertyChanged("GsCdeOperator");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QualPrcnt property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsQualPrcntNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? QualPrcnt
		{
			get
			{
				return this.entityData.QualPrcnt; 
			}
			
			set
			{
				if (this.entityData.QualPrcnt == value)
					return;
					
				OnColumnChanging(AdmRatingParametersMajorsColumn.QualPrcnt, this.entityData.QualPrcnt);
				this.entityData.QualPrcnt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmRatingParametersMajorsColumn.QualPrcnt, this.entityData.QualPrcnt);
				OnPropertyChanged("QualPrcnt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExemptFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsExemptFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ExemptFlg
		{
			get
			{
				return this.entityData.ExemptFlg; 
			}
			
			set
			{
				if (this.entityData.ExemptFlg == value)
					return;
					
				OnColumnChanging(AdmRatingParametersMajorsColumn.ExemptFlg, this.entityData.ExemptFlg);
				this.entityData.ExemptFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmRatingParametersMajorsColumn.ExemptFlg, this.entityData.ExemptFlg);
				OnPropertyChanged("ExemptFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmCdeAppTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmCdeAppTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmCdeAppTypeId
		{
			get
			{
				return this.entityData.AdmCdeAppTypeId; 
			}
			
			set
			{
				if (this.entityData.AdmCdeAppTypeId == value)
					return;
					
				OnColumnChanging(AdmRatingParametersMajorsColumn.AdmCdeAppTypeId, this.entityData.AdmCdeAppTypeId);
				this.entityData.AdmCdeAppTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmRatingParametersMajorsColumn.AdmCdeAppTypeId, this.entityData.AdmCdeAppTypeId);
				OnPropertyChanged("AdmCdeAppTypeId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdmAdmissionBand"/>.
		/// </summary>
		/// <value>The source AdmAdmissionBand for AdmAdmissionBandId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmAdmissionBand AdmAdmissionBandIdSource
      	{
            get { return entityData.AdmAdmissionBandIdSource; }
            set { entityData.AdmAdmissionBandIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdeAppType"/>.
		/// </summary>
		/// <value>The source AdmCdeAppType for AdmCdeAppTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmCdeAppType AdmCdeAppTypeIdSource
      	{
            get { return entityData.AdmCdeAppTypeIdSource; }
            set { entityData.AdmCdeAppTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdmOpenAcadSemester"/>.
		/// </summary>
		/// <value>The source AdmOpenAcadSemester for AdmOpenAcadSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmOpenAcadSemester AdmOpenAcadSemesterIdSource
      	{
            get { return entityData.AdmOpenAcadSemesterIdSource; }
            set { entityData.AdmOpenAcadSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return entityData.AsCodeDegreeIdSource; }
            set { entityData.AsCodeDegreeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return entityData.AsCodeDegreeClassIdSource; }
            set { entityData.AsCodeDegreeClassIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return entityData.EntMainIdSource; }
            set { entityData.EntMainIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of AdmParamMajorPhase objects
		///	which are related to this object through the relation FK_ADM_PARAM_MAJOR_PHASE_ADM_RATING_PARAMETERS_MAJORS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmParamMajorPhase> AdmParamMajorPhaseCollection
		{
			get { return entityData.AdmParamMajorPhaseCollection; }
			set { entityData.AdmParamMajorPhaseCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmRatingParamMajorType objects
		///	which are related to this object through the relation FK_ADM_RATING_PARAM_MAJOR_TYPE_ADM_RATING_PARAMETERS_MAJORS
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmRatingParamMajorType> AdmRatingParamMajorTypeCollection
		{
			get { return entityData.AdmRatingParamMajorTypeCollection; }
			set { entityData.AdmRatingParamMajorTypeCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GsCdeOperator", "Gs Cde Operator", 2));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ADM_RATING_PARAMETERS_MAJORS"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ADM_RATING_PARAMETERS_MAJORS_ID", "ADM_OPEN_ACAD_SEMESTER_ID", "ENT_MAIN_ID", "AS_CODE_DEGREE_ID", "AS_CODE_DEGREE_CLASS_ID", "ALL_REQUIRED_NUMBERS", "MALE_NUMBERS", "FEMALE_NUMBERS", "ADM_ADMISSION_BAND_ID", "TRANS_MALE_NUMBERS", "TRANS_FEMALE_NUMBERS", "TRANS_ALL_NUMBERS", "AS_FACULTY_INFO_ID", "ALL_REQUIRED_NUMBERS_PROV", "GS_CDE_OPERATOR", "QUAL_PRCNT", "EXEMPT_FLG", "ADM_CDE_APP_TYPE_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AdmRatingParametersMajorsEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AdmRatingParametersMajors) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AdmRatingParametersMajors>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AdmRatingParametersMajors);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AdmRatingParametersMajors Entity 
		///</summary>
		protected virtual AdmRatingParametersMajors Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AdmRatingParametersMajors copy = new AdmRatingParametersMajors();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AdmRatingParametersMajorsId = this.AdmRatingParametersMajorsId;
					copy.OriginalAdmRatingParametersMajorsId = this.OriginalAdmRatingParametersMajorsId;
				copy.AdmOpenAcadSemesterId = this.AdmOpenAcadSemesterId;
				copy.EntMainId = this.EntMainId;
				copy.AsCodeDegreeId = this.AsCodeDegreeId;
				copy.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
				copy.AllRequiredNumbers = this.AllRequiredNumbers;
				copy.MaleNumbers = this.MaleNumbers;
				copy.FemaleNumbers = this.FemaleNumbers;
				copy.AdmAdmissionBandId = this.AdmAdmissionBandId;
				copy.TransMaleNumbers = this.TransMaleNumbers;
				copy.TransFemaleNumbers = this.TransFemaleNumbers;
				copy.TransAllNumbers = this.TransAllNumbers;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.AllRequiredNumbersProv = this.AllRequiredNumbersProv;
				copy.GsCdeOperator = this.GsCdeOperator;
				copy.QualPrcnt = this.QualPrcnt;
				copy.ExemptFlg = this.ExemptFlg;
				copy.AdmCdeAppTypeId = this.AdmCdeAppTypeId;
			
			if (this.AdmAdmissionBandIdSource != null && existingCopies.Contains(this.AdmAdmissionBandIdSource))
				copy.AdmAdmissionBandIdSource = existingCopies[this.AdmAdmissionBandIdSource] as AdmAdmissionBand;
			else
				copy.AdmAdmissionBandIdSource = MakeCopyOf(this.AdmAdmissionBandIdSource, existingCopies) as AdmAdmissionBand;
			if (this.AdmCdeAppTypeIdSource != null && existingCopies.Contains(this.AdmCdeAppTypeIdSource))
				copy.AdmCdeAppTypeIdSource = existingCopies[this.AdmCdeAppTypeIdSource] as AdmCdeAppType;
			else
				copy.AdmCdeAppTypeIdSource = MakeCopyOf(this.AdmCdeAppTypeIdSource, existingCopies) as AdmCdeAppType;
			if (this.AdmOpenAcadSemesterIdSource != null && existingCopies.Contains(this.AdmOpenAcadSemesterIdSource))
				copy.AdmOpenAcadSemesterIdSource = existingCopies[this.AdmOpenAcadSemesterIdSource] as AdmOpenAcadSemester;
			else
				copy.AdmOpenAcadSemesterIdSource = MakeCopyOf(this.AdmOpenAcadSemesterIdSource, existingCopies) as AdmOpenAcadSemester;
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				copy.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				copy.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				copy.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				copy.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				copy.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				copy.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
		
			//deep copy nested objects
			copy.AdmParamMajorPhaseCollection = (TList<AdmParamMajorPhase>) MakeCopyOf(this.AdmParamMajorPhaseCollection, existingCopies); 
			copy.AdmRatingParamMajorTypeCollection = (TList<AdmRatingParamMajorType>) MakeCopyOf(this.AdmRatingParamMajorTypeCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AdmRatingParametersMajors Entity 
		///</summary>
		public virtual AdmRatingParametersMajors Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AdmRatingParametersMajors Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AdmRatingParametersMajors DeepCopy()
		{
			return EntityHelper.Clone<AdmRatingParametersMajors>(this as AdmRatingParametersMajors);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AdmRatingParametersMajorsEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AdmRatingParametersMajorsEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AdmRatingParametersMajorsEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AdmRatingParametersMajorsColumn column)
		{
			switch(column)
			{
					case AdmRatingParametersMajorsColumn.AdmRatingParametersMajorsId:
					return entityData.AdmRatingParametersMajorsId != _originalData.AdmRatingParametersMajorsId;
					case AdmRatingParametersMajorsColumn.AdmOpenAcadSemesterId:
					return entityData.AdmOpenAcadSemesterId != _originalData.AdmOpenAcadSemesterId;
					case AdmRatingParametersMajorsColumn.EntMainId:
					return entityData.EntMainId != _originalData.EntMainId;
					case AdmRatingParametersMajorsColumn.AsCodeDegreeId:
					return entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
					case AdmRatingParametersMajorsColumn.AsCodeDegreeClassId:
					return entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
					case AdmRatingParametersMajorsColumn.AllRequiredNumbers:
					return entityData.AllRequiredNumbers != _originalData.AllRequiredNumbers;
					case AdmRatingParametersMajorsColumn.MaleNumbers:
					return entityData.MaleNumbers != _originalData.MaleNumbers;
					case AdmRatingParametersMajorsColumn.FemaleNumbers:
					return entityData.FemaleNumbers != _originalData.FemaleNumbers;
					case AdmRatingParametersMajorsColumn.AdmAdmissionBandId:
					return entityData.AdmAdmissionBandId != _originalData.AdmAdmissionBandId;
					case AdmRatingParametersMajorsColumn.TransMaleNumbers:
					return entityData.TransMaleNumbers != _originalData.TransMaleNumbers;
					case AdmRatingParametersMajorsColumn.TransFemaleNumbers:
					return entityData.TransFemaleNumbers != _originalData.TransFemaleNumbers;
					case AdmRatingParametersMajorsColumn.TransAllNumbers:
					return entityData.TransAllNumbers != _originalData.TransAllNumbers;
					case AdmRatingParametersMajorsColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case AdmRatingParametersMajorsColumn.AllRequiredNumbersProv:
					return entityData.AllRequiredNumbersProv != _originalData.AllRequiredNumbersProv;
					case AdmRatingParametersMajorsColumn.GsCdeOperator:
					return entityData.GsCdeOperator != _originalData.GsCdeOperator;
					case AdmRatingParametersMajorsColumn.QualPrcnt:
					return entityData.QualPrcnt != _originalData.QualPrcnt;
					case AdmRatingParametersMajorsColumn.ExemptFlg:
					return entityData.ExemptFlg != _originalData.ExemptFlg;
					case AdmRatingParametersMajorsColumn.AdmCdeAppTypeId:
					return entityData.AdmCdeAppTypeId != _originalData.AdmCdeAppTypeId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AdmRatingParametersMajorsColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AdmRatingParametersMajorsId != _originalData.AdmRatingParametersMajorsId;
			result = result || entityData.AdmOpenAcadSemesterId != _originalData.AdmOpenAcadSemesterId;
			result = result || entityData.EntMainId != _originalData.EntMainId;
			result = result || entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
			result = result || entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
			result = result || entityData.AllRequiredNumbers != _originalData.AllRequiredNumbers;
			result = result || entityData.MaleNumbers != _originalData.MaleNumbers;
			result = result || entityData.FemaleNumbers != _originalData.FemaleNumbers;
			result = result || entityData.AdmAdmissionBandId != _originalData.AdmAdmissionBandId;
			result = result || entityData.TransMaleNumbers != _originalData.TransMaleNumbers;
			result = result || entityData.TransFemaleNumbers != _originalData.TransFemaleNumbers;
			result = result || entityData.TransAllNumbers != _originalData.TransAllNumbers;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.AllRequiredNumbersProv != _originalData.AllRequiredNumbersProv;
			result = result || entityData.GsCdeOperator != _originalData.GsCdeOperator;
			result = result || entityData.QualPrcnt != _originalData.QualPrcnt;
			result = result || entityData.ExemptFlg != _originalData.ExemptFlg;
			result = result || entityData.AdmCdeAppTypeId != _originalData.AdmCdeAppTypeId;
			return result;
		}	
		
		///<summary>
		///  Returns a AdmRatingParametersMajors Entity with the original data.
		///</summary>
		public AdmRatingParametersMajors GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAdmRatingParametersMajors(
				_originalData.AdmRatingParametersMajorsId,
				_originalData.AdmOpenAcadSemesterId,
				_originalData.EntMainId,
				_originalData.AsCodeDegreeId,
				_originalData.AsCodeDegreeClassId,
				_originalData.AllRequiredNumbers,
				_originalData.MaleNumbers,
				_originalData.FemaleNumbers,
				_originalData.AdmAdmissionBandId,
				_originalData.TransMaleNumbers,
				_originalData.TransFemaleNumbers,
				_originalData.TransAllNumbers,
				_originalData.AsFacultyInfoId,
				_originalData.AllRequiredNumbersProv,
				_originalData.GsCdeOperator,
				_originalData.QualPrcnt,
				_originalData.ExemptFlg,
				_originalData.AdmCdeAppTypeId
				);
				
			return (AdmRatingParametersMajors)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AdmRatingParametersMajorsBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AdmRatingParametersMajorsBase)
				return ValueEquals(this, (AdmRatingParametersMajorsBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AdmRatingParametersMajorsBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AdmRatingParametersMajorsId.GetHashCode() ^ 
					this.AdmOpenAcadSemesterId.GetHashCode() ^ 
					((this.EntMainId == null) ? string.Empty : this.EntMainId.ToString()).GetHashCode() ^ 
					this.AsCodeDegreeId.GetHashCode() ^ 
					this.AsCodeDegreeClassId.GetHashCode() ^ 
					((this.AllRequiredNumbers == null) ? string.Empty : this.AllRequiredNumbers.ToString()).GetHashCode() ^ 
					((this.MaleNumbers == null) ? string.Empty : this.MaleNumbers.ToString()).GetHashCode() ^ 
					((this.FemaleNumbers == null) ? string.Empty : this.FemaleNumbers.ToString()).GetHashCode() ^ 
					((this.AdmAdmissionBandId == null) ? string.Empty : this.AdmAdmissionBandId.ToString()).GetHashCode() ^ 
					((this.TransMaleNumbers == null) ? string.Empty : this.TransMaleNumbers.ToString()).GetHashCode() ^ 
					((this.TransFemaleNumbers == null) ? string.Empty : this.TransFemaleNumbers.ToString()).GetHashCode() ^ 
					((this.TransAllNumbers == null) ? string.Empty : this.TransAllNumbers.ToString()).GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					((this.AllRequiredNumbersProv == null) ? string.Empty : this.AllRequiredNumbersProv.ToString()).GetHashCode() ^ 
					((this.GsCdeOperator == null) ? string.Empty : this.GsCdeOperator.ToString()).GetHashCode() ^ 
					((this.QualPrcnt == null) ? string.Empty : this.QualPrcnt.ToString()).GetHashCode() ^ 
					((this.ExemptFlg == null) ? string.Empty : this.ExemptFlg.ToString()).GetHashCode() ^ 
					((this.AdmCdeAppTypeId == null) ? string.Empty : this.AdmCdeAppTypeId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AdmRatingParametersMajorsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AdmRatingParametersMajorsBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AdmRatingParametersMajorsBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AdmRatingParametersMajorsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AdmRatingParametersMajorsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AdmRatingParametersMajorsBase Object1, AdmRatingParametersMajorsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AdmRatingParametersMajorsId != Object2.AdmRatingParametersMajorsId)
				equal = false;
			if (Object1.AdmOpenAcadSemesterId != Object2.AdmOpenAcadSemesterId)
				equal = false;
			if ( Object1.EntMainId != null && Object2.EntMainId != null )
			{
				if (Object1.EntMainId != Object2.EntMainId)
					equal = false;
			}
			else if (Object1.EntMainId == null ^ Object2.EntMainId == null )
			{
				equal = false;
			}
			if (Object1.AsCodeDegreeId != Object2.AsCodeDegreeId)
				equal = false;
			if (Object1.AsCodeDegreeClassId != Object2.AsCodeDegreeClassId)
				equal = false;
			if ( Object1.AllRequiredNumbers != null && Object2.AllRequiredNumbers != null )
			{
				if (Object1.AllRequiredNumbers != Object2.AllRequiredNumbers)
					equal = false;
			}
			else if (Object1.AllRequiredNumbers == null ^ Object2.AllRequiredNumbers == null )
			{
				equal = false;
			}
			if ( Object1.MaleNumbers != null && Object2.MaleNumbers != null )
			{
				if (Object1.MaleNumbers != Object2.MaleNumbers)
					equal = false;
			}
			else if (Object1.MaleNumbers == null ^ Object2.MaleNumbers == null )
			{
				equal = false;
			}
			if ( Object1.FemaleNumbers != null && Object2.FemaleNumbers != null )
			{
				if (Object1.FemaleNumbers != Object2.FemaleNumbers)
					equal = false;
			}
			else if (Object1.FemaleNumbers == null ^ Object2.FemaleNumbers == null )
			{
				equal = false;
			}
			if ( Object1.AdmAdmissionBandId != null && Object2.AdmAdmissionBandId != null )
			{
				if (Object1.AdmAdmissionBandId != Object2.AdmAdmissionBandId)
					equal = false;
			}
			else if (Object1.AdmAdmissionBandId == null ^ Object2.AdmAdmissionBandId == null )
			{
				equal = false;
			}
			if ( Object1.TransMaleNumbers != null && Object2.TransMaleNumbers != null )
			{
				if (Object1.TransMaleNumbers != Object2.TransMaleNumbers)
					equal = false;
			}
			else if (Object1.TransMaleNumbers == null ^ Object2.TransMaleNumbers == null )
			{
				equal = false;
			}
			if ( Object1.TransFemaleNumbers != null && Object2.TransFemaleNumbers != null )
			{
				if (Object1.TransFemaleNumbers != Object2.TransFemaleNumbers)
					equal = false;
			}
			else if (Object1.TransFemaleNumbers == null ^ Object2.TransFemaleNumbers == null )
			{
				equal = false;
			}
			if ( Object1.TransAllNumbers != null && Object2.TransAllNumbers != null )
			{
				if (Object1.TransAllNumbers != Object2.TransAllNumbers)
					equal = false;
			}
			else if (Object1.TransAllNumbers == null ^ Object2.TransAllNumbers == null )
			{
				equal = false;
			}
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if ( Object1.AllRequiredNumbersProv != null && Object2.AllRequiredNumbersProv != null )
			{
				if (Object1.AllRequiredNumbersProv != Object2.AllRequiredNumbersProv)
					equal = false;
			}
			else if (Object1.AllRequiredNumbersProv == null ^ Object2.AllRequiredNumbersProv == null )
			{
				equal = false;
			}
			if ( Object1.GsCdeOperator != null && Object2.GsCdeOperator != null )
			{
				if (Object1.GsCdeOperator != Object2.GsCdeOperator)
					equal = false;
			}
			else if (Object1.GsCdeOperator == null ^ Object2.GsCdeOperator == null )
			{
				equal = false;
			}
			if ( Object1.QualPrcnt != null && Object2.QualPrcnt != null )
			{
				if (Object1.QualPrcnt != Object2.QualPrcnt)
					equal = false;
			}
			else if (Object1.QualPrcnt == null ^ Object2.QualPrcnt == null )
			{
				equal = false;
			}
			if ( Object1.ExemptFlg != null && Object2.ExemptFlg != null )
			{
				if (Object1.ExemptFlg != Object2.ExemptFlg)
					equal = false;
			}
			else if (Object1.ExemptFlg == null ^ Object2.ExemptFlg == null )
			{
				equal = false;
			}
			if ( Object1.AdmCdeAppTypeId != null && Object2.AdmCdeAppTypeId != null )
			{
				if (Object1.AdmCdeAppTypeId != Object2.AdmCdeAppTypeId)
					equal = false;
			}
			else if (Object1.AdmCdeAppTypeId == null ^ Object2.AdmCdeAppTypeId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AdmRatingParametersMajorsBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AdmRatingParametersMajorsComparer GetComparer()
        {
            return new AdmRatingParametersMajorsComparer();
        }
        */

        // Comparer delegates back to AdmRatingParametersMajors
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AdmRatingParametersMajors rhs, AdmRatingParametersMajorsColumn which)
        {
            switch (which)
            {
            	
            	
            	case AdmRatingParametersMajorsColumn.AdmRatingParametersMajorsId:
            		return this.AdmRatingParametersMajorsId.CompareTo(rhs.AdmRatingParametersMajorsId);
            		
            		                 
            	
            	
            	case AdmRatingParametersMajorsColumn.AdmOpenAcadSemesterId:
            		return this.AdmOpenAcadSemesterId.CompareTo(rhs.AdmOpenAcadSemesterId);
            		
            		                 
            	
            	
            	case AdmRatingParametersMajorsColumn.EntMainId:
            		return this.EntMainId.Value.CompareTo(rhs.EntMainId.Value);
            		
            		                 
            	
            	
            	case AdmRatingParametersMajorsColumn.AsCodeDegreeId:
            		return this.AsCodeDegreeId.CompareTo(rhs.AsCodeDegreeId);
            		
            		                 
            	
            	
            	case AdmRatingParametersMajorsColumn.AsCodeDegreeClassId:
            		return this.AsCodeDegreeClassId.CompareTo(rhs.AsCodeDegreeClassId);
            		
            		                 
            	
            	
            	case AdmRatingParametersMajorsColumn.AllRequiredNumbers:
            		return this.AllRequiredNumbers.Value.CompareTo(rhs.AllRequiredNumbers.Value);
            		
            		                 
            	
            	
            	case AdmRatingParametersMajorsColumn.MaleNumbers:
            		return this.MaleNumbers.Value.CompareTo(rhs.MaleNumbers.Value);
            		
            		                 
            	
            	
            	case AdmRatingParametersMajorsColumn.FemaleNumbers:
            		return this.FemaleNumbers.Value.CompareTo(rhs.FemaleNumbers.Value);
            		
            		                 
            	
            	
            	case AdmRatingParametersMajorsColumn.AdmAdmissionBandId:
            		return this.AdmAdmissionBandId.Value.CompareTo(rhs.AdmAdmissionBandId.Value);
            		
            		                 
            	
            	
            	case AdmRatingParametersMajorsColumn.TransMaleNumbers:
            		return this.TransMaleNumbers.Value.CompareTo(rhs.TransMaleNumbers.Value);
            		
            		                 
            	
            	
            	case AdmRatingParametersMajorsColumn.TransFemaleNumbers:
            		return this.TransFemaleNumbers.Value.CompareTo(rhs.TransFemaleNumbers.Value);
            		
            		                 
            	
            	
            	case AdmRatingParametersMajorsColumn.TransAllNumbers:
            		return this.TransAllNumbers.Value.CompareTo(rhs.TransAllNumbers.Value);
            		
            		                 
            	
            	
            	case AdmRatingParametersMajorsColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case AdmRatingParametersMajorsColumn.AllRequiredNumbersProv:
            		return this.AllRequiredNumbersProv.Value.CompareTo(rhs.AllRequiredNumbersProv.Value);
            		
            		                 
            	
            	
            	case AdmRatingParametersMajorsColumn.GsCdeOperator:
            		return this.GsCdeOperator.CompareTo(rhs.GsCdeOperator);
            		
            		                 
            	
            	
            	case AdmRatingParametersMajorsColumn.QualPrcnt:
            		return this.QualPrcnt.Value.CompareTo(rhs.QualPrcnt.Value);
            		
            		                 
            	
            	
            	case AdmRatingParametersMajorsColumn.ExemptFlg:
            		return this.ExemptFlg.Value.CompareTo(rhs.ExemptFlg.Value);
            		
            		                 
            	
            	
            	case AdmRatingParametersMajorsColumn.AdmCdeAppTypeId:
            		return this.AdmCdeAppTypeId.Value.CompareTo(rhs.AdmCdeAppTypeId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AdmRatingParametersMajorsKey> Members
		
		// member variable for the EntityId property
		private AdmRatingParametersMajorsKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AdmRatingParametersMajorsKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AdmRatingParametersMajorsKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AdmRatingParametersMajors")
					.Append("|").Append( this.AdmRatingParametersMajorsId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{19}{18}- AdmRatingParametersMajorsId: {0}{18}- AdmOpenAcadSemesterId: {1}{18}- EntMainId: {2}{18}- AsCodeDegreeId: {3}{18}- AsCodeDegreeClassId: {4}{18}- AllRequiredNumbers: {5}{18}- MaleNumbers: {6}{18}- FemaleNumbers: {7}{18}- AdmAdmissionBandId: {8}{18}- TransMaleNumbers: {9}{18}- TransFemaleNumbers: {10}{18}- TransAllNumbers: {11}{18}- AsFacultyInfoId: {12}{18}- AllRequiredNumbersProv: {13}{18}- GsCdeOperator: {14}{18}- QualPrcnt: {15}{18}- ExemptFlg: {16}{18}- AdmCdeAppTypeId: {17}{18}{20}", 
				this.AdmRatingParametersMajorsId,
				this.AdmOpenAcadSemesterId,
				(this.EntMainId == null) ? string.Empty : this.EntMainId.ToString(),
				this.AsCodeDegreeId,
				this.AsCodeDegreeClassId,
				(this.AllRequiredNumbers == null) ? string.Empty : this.AllRequiredNumbers.ToString(),
				(this.MaleNumbers == null) ? string.Empty : this.MaleNumbers.ToString(),
				(this.FemaleNumbers == null) ? string.Empty : this.FemaleNumbers.ToString(),
				(this.AdmAdmissionBandId == null) ? string.Empty : this.AdmAdmissionBandId.ToString(),
				(this.TransMaleNumbers == null) ? string.Empty : this.TransMaleNumbers.ToString(),
				(this.TransFemaleNumbers == null) ? string.Empty : this.TransFemaleNumbers.ToString(),
				(this.TransAllNumbers == null) ? string.Empty : this.TransAllNumbers.ToString(),
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				(this.AllRequiredNumbersProv == null) ? string.Empty : this.AllRequiredNumbersProv.ToString(),
				(this.GsCdeOperator == null) ? string.Empty : this.GsCdeOperator.ToString(),
				(this.QualPrcnt == null) ? string.Empty : this.QualPrcnt.ToString(),
				(this.ExemptFlg == null) ? string.Empty : this.ExemptFlg.ToString(),
				(this.AdmCdeAppTypeId == null) ? string.Empty : this.AdmCdeAppTypeId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ADM_RATING_PARAMETERS_MAJORS' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AdmRatingParametersMajorsEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ADM_RATING_PARAMETERS_MAJORS_ID : خطة الأعداد المقترحة
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ADM_RATING_PARAMETERS_MAJORS"</remarks>
		public System.Decimal AdmRatingParametersMajorsId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalAdmRatingParametersMajorsId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ADM_OPEN_ACAD_SEMESTER_ID : 
		/// </summary>
		public System.Decimal		  AdmOpenAcadSemesterId = 0.0m;
		
		/// <summary>
		/// ENT_MAIN_ID : 
		/// </summary>
		public System.Decimal?		  EntMainId = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_ID : 
		/// </summary>
		public System.Decimal		  AsCodeDegreeId = 0.0m;
		
		/// <summary>
		/// AS_CODE_DEGREE_CLASS_ID : 
		/// </summary>
		public System.Decimal		  AsCodeDegreeClassId = 0.0m;
		
		/// <summary>
		/// ALL_REQUIRED_NUMBERS : 
		/// </summary>
		public System.Decimal?		  AllRequiredNumbers = null;
		
		/// <summary>
		/// MALE_NUMBERS : 
		/// </summary>
		public System.Decimal?		  MaleNumbers = null;
		
		/// <summary>
		/// FEMALE_NUMBERS : 
		/// </summary>
		public System.Decimal?		  FemaleNumbers = null;
		
		/// <summary>
		/// ADM_ADMISSION_BAND_ID : XXXX default=0/1
		/// </summary>
		public System.Decimal?		  AdmAdmissionBandId = null;
		
		/// <summary>
		/// TRANS_MALE_NUMBERS : 
		/// </summary>
		public System.Decimal?		  TransMaleNumbers = null;
		
		/// <summary>
		/// TRANS_FEMALE_NUMBERS : 
		/// </summary>
		public System.Decimal?		  TransFemaleNumbers = null;
		
		/// <summary>
		/// TRANS_ALL_NUMBERS : 
		/// </summary>
		public System.Decimal?		  TransAllNumbers = null;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// ALL_REQUIRED_NUMBERS_PROV : provisionaly accepted
		/// </summary>
		public System.Decimal?		  AllRequiredNumbersProv = null;
		
		/// <summary>
		/// GS_CDE_OPERATOR : 
		/// </summary>
		public System.String		  GsCdeOperator = null;
		
		/// <summary>
		/// QUAL_PRCNT : 
		/// </summary>
		public System.Decimal?		  QualPrcnt = null;
		
		/// <summary>
		/// EXEMPT_FLG : 
		/// </summary>
		public System.Boolean?		  ExemptFlg = null;
		
		/// <summary>
		/// ADM_CDE_APP_TYPE_ID : 
		/// </summary>
		public System.Decimal?		  AdmCdeAppTypeId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdmAdmissionBand _admAdmissionBandIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmAdmissionBand"/>.
		/// </summary>
		/// <value>The source AdmAdmissionBand for AdmAdmissionBandId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmAdmissionBand AdmAdmissionBandIdSource
      	{
            get { return this._admAdmissionBandIdSource; }
            set { this._admAdmissionBandIdSource = value; }
      	}
		private AdmCdeAppType _admCdeAppTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdeAppType"/>.
		/// </summary>
		/// <value>The source AdmCdeAppType for AdmCdeAppTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmCdeAppType AdmCdeAppTypeIdSource
      	{
            get { return this._admCdeAppTypeIdSource; }
            set { this._admCdeAppTypeIdSource = value; }
      	}
		private AdmOpenAcadSemester _admOpenAcadSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmOpenAcadSemester"/>.
		/// </summary>
		/// <value>The source AdmOpenAcadSemester for AdmOpenAcadSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmOpenAcadSemester AdmOpenAcadSemesterIdSource
      	{
            get { return this._admOpenAcadSemesterIdSource; }
            set { this._admOpenAcadSemesterIdSource = value; }
      	}
		private AsCodeDegree _asCodeDegreeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return this._asCodeDegreeIdSource; }
            set { this._asCodeDegreeIdSource = value; }
      	}
		private AsCodeDegreeClass _asCodeDegreeClassIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return this._asCodeDegreeClassIdSource; }
            set { this._asCodeDegreeClassIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EntityMain _entMainIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return this._entMainIdSource; }
            set { this._entMainIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region AdmParamMajorPhaseCollection
		
		private TList<AdmParamMajorPhase> _admParamMajorPhaseAdmRatingParametersMajorsId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admParamMajorPhaseAdmRatingParametersMajorsId
		/// </summary>
		
		public TList<AdmParamMajorPhase> AdmParamMajorPhaseCollection
		{
			get
			{
				if (_admParamMajorPhaseAdmRatingParametersMajorsId == null)
				{
				_admParamMajorPhaseAdmRatingParametersMajorsId = new TList<AdmParamMajorPhase>();
				}
	
				return _admParamMajorPhaseAdmRatingParametersMajorsId;
			}
			set { _admParamMajorPhaseAdmRatingParametersMajorsId = value; }
		}
		
		#endregion

		#region AdmRatingParamMajorTypeCollection
		
		private TList<AdmRatingParamMajorType> _admRatingParamMajorTypeAdmRatingParametersMajorsId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admRatingParamMajorTypeAdmRatingParametersMajorsId
		/// </summary>
		
		public TList<AdmRatingParamMajorType> AdmRatingParamMajorTypeCollection
		{
			get
			{
				if (_admRatingParamMajorTypeAdmRatingParametersMajorsId == null)
				{
				_admRatingParamMajorTypeAdmRatingParametersMajorsId = new TList<AdmRatingParamMajorType>();
				}
	
				return _admRatingParamMajorTypeAdmRatingParametersMajorsId;
			}
			set { _admRatingParamMajorTypeAdmRatingParametersMajorsId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AdmRatingParametersMajorsEntityData _tmp = new AdmRatingParametersMajorsEntityData();
						
			_tmp.AdmRatingParametersMajorsId = this.AdmRatingParametersMajorsId;
			_tmp.OriginalAdmRatingParametersMajorsId = this.OriginalAdmRatingParametersMajorsId;
			
			_tmp.AdmOpenAcadSemesterId = this.AdmOpenAcadSemesterId;
			_tmp.EntMainId = this.EntMainId;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.AllRequiredNumbers = this.AllRequiredNumbers;
			_tmp.MaleNumbers = this.MaleNumbers;
			_tmp.FemaleNumbers = this.FemaleNumbers;
			_tmp.AdmAdmissionBandId = this.AdmAdmissionBandId;
			_tmp.TransMaleNumbers = this.TransMaleNumbers;
			_tmp.TransFemaleNumbers = this.TransFemaleNumbers;
			_tmp.TransAllNumbers = this.TransAllNumbers;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.AllRequiredNumbersProv = this.AllRequiredNumbersProv;
			_tmp.GsCdeOperator = this.GsCdeOperator;
			_tmp.QualPrcnt = this.QualPrcnt;
			_tmp.ExemptFlg = this.ExemptFlg;
			_tmp.AdmCdeAppTypeId = this.AdmCdeAppTypeId;
			
			#region Source Parent Composite Entities
			if (this.AdmAdmissionBandIdSource != null)
				_tmp.AdmAdmissionBandIdSource = MakeCopyOf(this.AdmAdmissionBandIdSource) as AdmAdmissionBand;
			if (this.AdmCdeAppTypeIdSource != null)
				_tmp.AdmCdeAppTypeIdSource = MakeCopyOf(this.AdmCdeAppTypeIdSource) as AdmCdeAppType;
			if (this.AdmOpenAcadSemesterIdSource != null)
				_tmp.AdmOpenAcadSemesterIdSource = MakeCopyOf(this.AdmOpenAcadSemesterIdSource) as AdmOpenAcadSemester;
			if (this.AsCodeDegreeIdSource != null)
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null)
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EntMainIdSource != null)
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource) as EntityMain;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._admParamMajorPhaseAdmRatingParametersMajorsId != null)
				_tmp.AdmParamMajorPhaseCollection = (TList<AdmParamMajorPhase>) MakeCopyOf(this.AdmParamMajorPhaseCollection); 
			if (this._admRatingParamMajorTypeAdmRatingParametersMajorsId != null)
				_tmp.AdmRatingParamMajorTypeCollection = (TList<AdmRatingParamMajorType>) MakeCopyOf(this.AdmRatingParamMajorTypeCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AdmRatingParametersMajorsEntityData _tmp = new AdmRatingParametersMajorsEntityData();
						
			_tmp.AdmRatingParametersMajorsId = this.AdmRatingParametersMajorsId;
			_tmp.OriginalAdmRatingParametersMajorsId = this.OriginalAdmRatingParametersMajorsId;
			
			_tmp.AdmOpenAcadSemesterId = this.AdmOpenAcadSemesterId;
			_tmp.EntMainId = this.EntMainId;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.AllRequiredNumbers = this.AllRequiredNumbers;
			_tmp.MaleNumbers = this.MaleNumbers;
			_tmp.FemaleNumbers = this.FemaleNumbers;
			_tmp.AdmAdmissionBandId = this.AdmAdmissionBandId;
			_tmp.TransMaleNumbers = this.TransMaleNumbers;
			_tmp.TransFemaleNumbers = this.TransFemaleNumbers;
			_tmp.TransAllNumbers = this.TransAllNumbers;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.AllRequiredNumbersProv = this.AllRequiredNumbersProv;
			_tmp.GsCdeOperator = this.GsCdeOperator;
			_tmp.QualPrcnt = this.QualPrcnt;
			_tmp.ExemptFlg = this.ExemptFlg;
			_tmp.AdmCdeAppTypeId = this.AdmCdeAppTypeId;
			
			#region Source Parent Composite Entities
			if (this.AdmAdmissionBandIdSource != null && existingCopies.Contains(this.AdmAdmissionBandIdSource))
				_tmp.AdmAdmissionBandIdSource = existingCopies[this.AdmAdmissionBandIdSource] as AdmAdmissionBand;
			else
				_tmp.AdmAdmissionBandIdSource = MakeCopyOf(this.AdmAdmissionBandIdSource, existingCopies) as AdmAdmissionBand;
			if (this.AdmCdeAppTypeIdSource != null && existingCopies.Contains(this.AdmCdeAppTypeIdSource))
				_tmp.AdmCdeAppTypeIdSource = existingCopies[this.AdmCdeAppTypeIdSource] as AdmCdeAppType;
			else
				_tmp.AdmCdeAppTypeIdSource = MakeCopyOf(this.AdmCdeAppTypeIdSource, existingCopies) as AdmCdeAppType;
			if (this.AdmOpenAcadSemesterIdSource != null && existingCopies.Contains(this.AdmOpenAcadSemesterIdSource))
				_tmp.AdmOpenAcadSemesterIdSource = existingCopies[this.AdmOpenAcadSemesterIdSource] as AdmOpenAcadSemester;
			else
				_tmp.AdmOpenAcadSemesterIdSource = MakeCopyOf(this.AdmOpenAcadSemesterIdSource, existingCopies) as AdmOpenAcadSemester;
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				_tmp.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				_tmp.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				_tmp.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.AdmParamMajorPhaseCollection = (TList<AdmParamMajorPhase>) MakeCopyOf(this.AdmParamMajorPhaseCollection, existingCopies); 
			_tmp.AdmRatingParamMajorTypeCollection = (TList<AdmRatingParamMajorType>) MakeCopyOf(this.AdmRatingParamMajorTypeCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmRatingParametersMajorsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AdmRatingParametersMajorsColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmRatingParametersMajorsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AdmRatingParametersMajorsColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmRatingParametersMajorsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AdmRatingParametersMajorsColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AdmRatingParametersMajorsEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AdmRatingParametersMajorsEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmRatingParametersMajorsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AdmRatingParametersMajorsColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AdmRatingParametersMajorsEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AdmRatingParametersMajorsEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AdmRatingParametersMajorsEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AdmRatingParametersMajors"/> object.
	/// </remarks>
	public class AdmRatingParametersMajorsEventArgs : System.EventArgs
	{
		private AdmRatingParametersMajorsColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AdmRatingParametersMajorsEventArgs class.
		///</summary>
		public AdmRatingParametersMajorsEventArgs(AdmRatingParametersMajorsColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AdmRatingParametersMajorsEventArgs class.
		///</summary>
		public AdmRatingParametersMajorsEventArgs(AdmRatingParametersMajorsColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AdmRatingParametersMajorsColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AdmRatingParametersMajorsColumn" />
		public AdmRatingParametersMajorsColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AdmRatingParametersMajors related events.
	///</summary>
	public delegate void AdmRatingParametersMajorsEventHandler(object sender, AdmRatingParametersMajorsEventArgs e);
	
	#region AdmRatingParametersMajorsComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AdmRatingParametersMajorsComparer : System.Collections.Generic.IComparer<AdmRatingParametersMajors>
	{
		AdmRatingParametersMajorsColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AdmRatingParametersMajorsComparer"/> class.
        /// </summary>
		public AdmRatingParametersMajorsComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AdmRatingParametersMajorsComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AdmRatingParametersMajorsComparer(AdmRatingParametersMajorsColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AdmRatingParametersMajors"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AdmRatingParametersMajors"/> to compare.</param>
        /// <param name="b">The second <c>AdmRatingParametersMajors</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AdmRatingParametersMajors a, AdmRatingParametersMajors b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AdmRatingParametersMajors entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AdmRatingParametersMajors a, AdmRatingParametersMajors b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AdmRatingParametersMajorsColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AdmRatingParametersMajorsKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AdmRatingParametersMajors"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AdmRatingParametersMajorsKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AdmRatingParametersMajorsKey class.
		/// </summary>
		public AdmRatingParametersMajorsKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmRatingParametersMajorsKey class.
		/// </summary>
		public AdmRatingParametersMajorsKey(AdmRatingParametersMajorsBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AdmRatingParametersMajorsId = entity.AdmRatingParametersMajorsId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmRatingParametersMajorsKey class.
		/// </summary>
		public AdmRatingParametersMajorsKey(System.Decimal _admRatingParametersMajorsId)
		{
			#region Init Properties

			this.AdmRatingParametersMajorsId = _admRatingParametersMajorsId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AdmRatingParametersMajorsBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AdmRatingParametersMajorsBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AdmRatingParametersMajorsId property
		private System.Decimal _admRatingParametersMajorsId;
		
		/// <summary>
		/// Gets or sets the AdmRatingParametersMajorsId property.
		/// </summary>
		public System.Decimal AdmRatingParametersMajorsId
		{
			get { return _admRatingParametersMajorsId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AdmRatingParametersMajorsId = value;
				
				_admRatingParametersMajorsId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AdmRatingParametersMajorsId = ( values["AdmRatingParametersMajorsId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["AdmRatingParametersMajorsId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AdmRatingParametersMajorsId", AdmRatingParametersMajorsId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AdmRatingParametersMajorsId: {0}{1}",
								AdmRatingParametersMajorsId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AdmRatingParametersMajorsColumn Enum
	
	/// <summary>
	/// Enumerate the AdmRatingParametersMajors columns.
	/// </summary>
	[Serializable]
	public enum AdmRatingParametersMajorsColumn : int
	{
		/// <summary>
		/// AdmRatingParametersMajorsId : خطة الأعداد المقترحة
		/// </summary>
		[EnumTextValue("ADM_RATING_PARAMETERS_MAJORS_ID")]
		[ColumnEnum("ADM_RATING_PARAMETERS_MAJORS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		AdmRatingParametersMajorsId = 1,
		/// <summary>
		/// AdmOpenAcadSemesterId : 
		/// </summary>
		[EnumTextValue("ADM_OPEN_ACAD_SEMESTER_ID")]
		[ColumnEnum("ADM_OPEN_ACAD_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AdmOpenAcadSemesterId = 2,
		/// <summary>
		/// EntMainId : 
		/// </summary>
		[EnumTextValue("ENT_MAIN_ID")]
		[ColumnEnum("ENT_MAIN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntMainId = 3,
		/// <summary>
		/// AsCodeDegreeId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_ID")]
		[ColumnEnum("AS_CODE_DEGREE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsCodeDegreeId = 4,
		/// <summary>
		/// AsCodeDegreeClassId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_CLASS_ID")]
		[ColumnEnum("AS_CODE_DEGREE_CLASS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsCodeDegreeClassId = 5,
		/// <summary>
		/// AllRequiredNumbers : 
		/// </summary>
		[EnumTextValue("ALL_REQUIRED_NUMBERS")]
		[ColumnEnum("ALL_REQUIRED_NUMBERS", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AllRequiredNumbers = 6,
		/// <summary>
		/// MaleNumbers : 
		/// </summary>
		[EnumTextValue("MALE_NUMBERS")]
		[ColumnEnum("MALE_NUMBERS", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MaleNumbers = 7,
		/// <summary>
		/// FemaleNumbers : 
		/// </summary>
		[EnumTextValue("FEMALE_NUMBERS")]
		[ColumnEnum("FEMALE_NUMBERS", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FemaleNumbers = 8,
		/// <summary>
		/// AdmAdmissionBandId : XXXX default=0/1
		/// </summary>
		[EnumTextValue("ADM_ADMISSION_BAND_ID")]
		[ColumnEnum("ADM_ADMISSION_BAND_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmAdmissionBandId = 9,
		/// <summary>
		/// TransMaleNumbers : 
		/// </summary>
		[EnumTextValue("TRANS_MALE_NUMBERS")]
		[ColumnEnum("TRANS_MALE_NUMBERS", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TransMaleNumbers = 10,
		/// <summary>
		/// TransFemaleNumbers : 
		/// </summary>
		[EnumTextValue("TRANS_FEMALE_NUMBERS")]
		[ColumnEnum("TRANS_FEMALE_NUMBERS", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TransFemaleNumbers = 11,
		/// <summary>
		/// TransAllNumbers : 
		/// </summary>
		[EnumTextValue("TRANS_ALL_NUMBERS")]
		[ColumnEnum("TRANS_ALL_NUMBERS", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TransAllNumbers = 12,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 13,
		/// <summary>
		/// AllRequiredNumbersProv : provisionaly accepted
		/// </summary>
		[EnumTextValue("ALL_REQUIRED_NUMBERS_PROV")]
		[ColumnEnum("ALL_REQUIRED_NUMBERS_PROV", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AllRequiredNumbersProv = 14,
		/// <summary>
		/// GsCdeOperator : 
		/// </summary>
		[EnumTextValue("GS_CDE_OPERATOR")]
		[ColumnEnum("GS_CDE_OPERATOR", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 2)]
		GsCdeOperator = 15,
		/// <summary>
		/// QualPrcnt : 
		/// </summary>
		[EnumTextValue("QUAL_PRCNT")]
		[ColumnEnum("QUAL_PRCNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		QualPrcnt = 16,
		/// <summary>
		/// ExemptFlg : 
		/// </summary>
		[EnumTextValue("EXEMPT_FLG")]
		[ColumnEnum("EXEMPT_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ExemptFlg = 17,
		/// <summary>
		/// AdmCdeAppTypeId : 
		/// </summary>
		[EnumTextValue("ADM_CDE_APP_TYPE_ID")]
		[ColumnEnum("ADM_CDE_APP_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmCdeAppTypeId = 18
	}//End enum

	#endregion AdmRatingParametersMajorsColumn Enum

} // end namespace
