
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AccomCdePrecond.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ACCOM_CDE_PRECOND' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AccomCdePrecondBase : EntityBase, IAccomCdePrecond, IEntityId<AccomCdePrecondKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AccomCdePrecondEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AccomCdePrecondEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AccomCdePrecondEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AccomCdePrecond> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AccomCdePrecondEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AccomCdePrecondEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AccomCdePrecondBase"/> instance.
		///</summary>
		public AccomCdePrecondBase()
		{
			this.entityData = new AccomCdePrecondEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AccomCdePrecondBase"/> instance.
		///</summary>
		///<param name="_accomCdePrecondId">2.6.	تحديد شروط خدمة السكن</param>
		///<param name="_precondCode"></param>
		///<param name="_precondAr"></param>
		///<param name="_precondEn"></param>
		///<param name="_entCodeMdTypeId"></param>
		///<param name="_tblRltdFlg"></param>
		///<param name="_tblName"></param>
		///<param name="_precondValue"></param>
		///<param name="_isActive"></param>
		///<param name="_dispOrder"></param>
		public AccomCdePrecondBase(System.Int16 _accomCdePrecondId, System.String _precondCode, 
			System.String _precondAr, System.String _precondEn, System.Decimal? _entCodeMdTypeId, 
			System.Decimal? _tblRltdFlg, System.String _tblName, System.String _precondValue, 
			System.Boolean? _isActive, System.Decimal? _dispOrder)
		{
			this.entityData = new AccomCdePrecondEntityData();
			this.backupData = null;

			this.AccomCdePrecondId = _accomCdePrecondId;
			this.PrecondCode = _precondCode;
			this.PrecondAr = _precondAr;
			this.PrecondEn = _precondEn;
			this.EntCodeMdTypeId = _entCodeMdTypeId;
			this.TblRltdFlg = _tblRltdFlg;
			this.TblName = _tblName;
			this.PrecondValue = _precondValue;
			this.IsActive = _isActive;
			this.DispOrder = _dispOrder;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AccomCdePrecond"/> instance.
		///</summary>
		///<param name="_accomCdePrecondId">2.6.	تحديد شروط خدمة السكن</param>
		///<param name="_precondCode"></param>
		///<param name="_precondAr"></param>
		///<param name="_precondEn"></param>
		///<param name="_entCodeMdTypeId"></param>
		///<param name="_tblRltdFlg"></param>
		///<param name="_tblName"></param>
		///<param name="_precondValue"></param>
		///<param name="_isActive"></param>
		///<param name="_dispOrder"></param>
		public static AccomCdePrecond CreateAccomCdePrecond(System.Int16 _accomCdePrecondId, System.String _precondCode, 
			System.String _precondAr, System.String _precondEn, System.Decimal? _entCodeMdTypeId, 
			System.Decimal? _tblRltdFlg, System.String _tblName, System.String _precondValue, 
			System.Boolean? _isActive, System.Decimal? _dispOrder)
		{
			AccomCdePrecond newAccomCdePrecond = new AccomCdePrecond();
			newAccomCdePrecond.AccomCdePrecondId = _accomCdePrecondId;
			newAccomCdePrecond.PrecondCode = _precondCode;
			newAccomCdePrecond.PrecondAr = _precondAr;
			newAccomCdePrecond.PrecondEn = _precondEn;
			newAccomCdePrecond.EntCodeMdTypeId = _entCodeMdTypeId;
			newAccomCdePrecond.TblRltdFlg = _tblRltdFlg;
			newAccomCdePrecond.TblName = _tblName;
			newAccomCdePrecond.PrecondValue = _precondValue;
			newAccomCdePrecond.IsActive = _isActive;
			newAccomCdePrecond.DispOrder = _dispOrder;
			return newAccomCdePrecond;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AccomCdePrecondId property. 
		///		2.6.	تحديد شروط خدمة السكن
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"2.6.	تحديد شروط خدمة السكن"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int16 AccomCdePrecondId
		{
			get
			{
				return this.entityData.AccomCdePrecondId; 
			}
			
			set
			{
				if (this.entityData.AccomCdePrecondId == value)
					return;
					
				OnColumnChanging(AccomCdePrecondColumn.AccomCdePrecondId, this.entityData.AccomCdePrecondId);
				this.entityData.AccomCdePrecondId = value;
				this.EntityId.AccomCdePrecondId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomCdePrecondColumn.AccomCdePrecondId, this.entityData.AccomCdePrecondId);
				OnPropertyChanged("AccomCdePrecondId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ACCOM_CDE_PRECOND_ID property.
		///		2.6.	تحديد شروط خدمة السكن
		/// </summary>
		/// <remarks>This is the original value of the ACCOM_CDE_PRECOND_ID property.</remarks>
		/// <value>This type is smallint</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int16 OriginalAccomCdePrecondId
		{
			get { return this.entityData.OriginalAccomCdePrecondId; }
			set { this.entityData.OriginalAccomCdePrecondId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the PrecondCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String PrecondCode
		{
			get
			{
				return this.entityData.PrecondCode; 
			}
			
			set
			{
				if (this.entityData.PrecondCode == value)
					return;
					
				OnColumnChanging(AccomCdePrecondColumn.PrecondCode, this.entityData.PrecondCode);
				this.entityData.PrecondCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomCdePrecondColumn.PrecondCode, this.entityData.PrecondCode);
				OnPropertyChanged("PrecondCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrecondAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String PrecondAr
		{
			get
			{
				return this.entityData.PrecondAr; 
			}
			
			set
			{
				if (this.entityData.PrecondAr == value)
					return;
					
				OnColumnChanging(AccomCdePrecondColumn.PrecondAr, this.entityData.PrecondAr);
				this.entityData.PrecondAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomCdePrecondColumn.PrecondAr, this.entityData.PrecondAr);
				OnPropertyChanged("PrecondAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrecondEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String PrecondEn
		{
			get
			{
				return this.entityData.PrecondEn; 
			}
			
			set
			{
				if (this.entityData.PrecondEn == value)
					return;
					
				OnColumnChanging(AccomCdePrecondColumn.PrecondEn, this.entityData.PrecondEn);
				this.entityData.PrecondEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomCdePrecondColumn.PrecondEn, this.entityData.PrecondEn);
				OnPropertyChanged("PrecondEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntCodeMdTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntCodeMdTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntCodeMdTypeId
		{
			get
			{
				return this.entityData.EntCodeMdTypeId; 
			}
			
			set
			{
				if (this.entityData.EntCodeMdTypeId == value)
					return;
					
				OnColumnChanging(AccomCdePrecondColumn.EntCodeMdTypeId, this.entityData.EntCodeMdTypeId);
				this.entityData.EntCodeMdTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomCdePrecondColumn.EntCodeMdTypeId, this.entityData.EntCodeMdTypeId);
				OnPropertyChanged("EntCodeMdTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TblRltdFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTblRltdFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TblRltdFlg
		{
			get
			{
				return this.entityData.TblRltdFlg; 
			}
			
			set
			{
				if (this.entityData.TblRltdFlg == value)
					return;
					
				OnColumnChanging(AccomCdePrecondColumn.TblRltdFlg, this.entityData.TblRltdFlg);
				this.entityData.TblRltdFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomCdePrecondColumn.TblRltdFlg, this.entityData.TblRltdFlg);
				OnPropertyChanged("TblRltdFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TblName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String TblName
		{
			get
			{
				return this.entityData.TblName; 
			}
			
			set
			{
				if (this.entityData.TblName == value)
					return;
					
				OnColumnChanging(AccomCdePrecondColumn.TblName, this.entityData.TblName);
				this.entityData.TblName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomCdePrecondColumn.TblName, this.entityData.TblName);
				OnPropertyChanged("TblName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrecondValue property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String PrecondValue
		{
			get
			{
				return this.entityData.PrecondValue; 
			}
			
			set
			{
				if (this.entityData.PrecondValue == value)
					return;
					
				OnColumnChanging(AccomCdePrecondColumn.PrecondValue, this.entityData.PrecondValue);
				this.entityData.PrecondValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomCdePrecondColumn.PrecondValue, this.entityData.PrecondValue);
				OnPropertyChanged("PrecondValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsActiveNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
				OnColumnChanging(AccomCdePrecondColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomCdePrecondColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DispOrder property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDispOrderNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DispOrder
		{
			get
			{
				return this.entityData.DispOrder; 
			}
			
			set
			{
				if (this.entityData.DispOrder == value)
					return;
					
				OnColumnChanging(AccomCdePrecondColumn.DispOrder, this.entityData.DispOrder);
				this.entityData.DispOrder = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccomCdePrecondColumn.DispOrder, this.entityData.DispOrder);
				OnPropertyChanged("DispOrder");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EntCodeMdType"/>.
		/// </summary>
		/// <value>The source EntCodeMdType for EntCodeMdTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntCodeMdType EntCodeMdTypeIdSource
      	{
            get { return entityData.EntCodeMdTypeIdSource; }
            set { entityData.EntCodeMdTypeIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PrecondCode", "Precond Code", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PrecondAr", "Precond Ar", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PrecondEn", "Precond En", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TblName", "Tbl Name", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PrecondValue", "Precond Value", 250));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ACCOM_CDE_PRECOND"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ACCOM_CDE_PRECOND_ID", "PRECOND_CODE", "PRECOND_AR", "PRECOND_EN", "ENT_CODE_MD_TYPE_ID", "TBL_RLTD_FLG", "TBL_NAME", "PRECOND_VALUE", "IS_ACTIVE", "DISP_ORDER"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AccomCdePrecondEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AccomCdePrecond) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AccomCdePrecond>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AccomCdePrecond);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AccomCdePrecond Entity 
		///</summary>
		protected virtual AccomCdePrecond Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AccomCdePrecond copy = new AccomCdePrecond();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AccomCdePrecondId = this.AccomCdePrecondId;
					copy.OriginalAccomCdePrecondId = this.OriginalAccomCdePrecondId;
				copy.PrecondCode = this.PrecondCode;
				copy.PrecondAr = this.PrecondAr;
				copy.PrecondEn = this.PrecondEn;
				copy.EntCodeMdTypeId = this.EntCodeMdTypeId;
				copy.TblRltdFlg = this.TblRltdFlg;
				copy.TblName = this.TblName;
				copy.PrecondValue = this.PrecondValue;
				copy.IsActive = this.IsActive;
				copy.DispOrder = this.DispOrder;
			
			if (this.EntCodeMdTypeIdSource != null && existingCopies.Contains(this.EntCodeMdTypeIdSource))
				copy.EntCodeMdTypeIdSource = existingCopies[this.EntCodeMdTypeIdSource] as EntCodeMdType;
			else
				copy.EntCodeMdTypeIdSource = MakeCopyOf(this.EntCodeMdTypeIdSource, existingCopies) as EntCodeMdType;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AccomCdePrecond Entity 
		///</summary>
		public virtual AccomCdePrecond Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AccomCdePrecond Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AccomCdePrecond DeepCopy()
		{
			return EntityHelper.Clone<AccomCdePrecond>(this as AccomCdePrecond);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AccomCdePrecondEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AccomCdePrecondEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AccomCdePrecondEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AccomCdePrecondColumn column)
		{
			switch(column)
			{
					case AccomCdePrecondColumn.AccomCdePrecondId:
					return entityData.AccomCdePrecondId != _originalData.AccomCdePrecondId;
					case AccomCdePrecondColumn.PrecondCode:
					return entityData.PrecondCode != _originalData.PrecondCode;
					case AccomCdePrecondColumn.PrecondAr:
					return entityData.PrecondAr != _originalData.PrecondAr;
					case AccomCdePrecondColumn.PrecondEn:
					return entityData.PrecondEn != _originalData.PrecondEn;
					case AccomCdePrecondColumn.EntCodeMdTypeId:
					return entityData.EntCodeMdTypeId != _originalData.EntCodeMdTypeId;
					case AccomCdePrecondColumn.TblRltdFlg:
					return entityData.TblRltdFlg != _originalData.TblRltdFlg;
					case AccomCdePrecondColumn.TblName:
					return entityData.TblName != _originalData.TblName;
					case AccomCdePrecondColumn.PrecondValue:
					return entityData.PrecondValue != _originalData.PrecondValue;
					case AccomCdePrecondColumn.IsActive:
					return entityData.IsActive != _originalData.IsActive;
					case AccomCdePrecondColumn.DispOrder:
					return entityData.DispOrder != _originalData.DispOrder;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AccomCdePrecondColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AccomCdePrecondId != _originalData.AccomCdePrecondId;
			result = result || entityData.PrecondCode != _originalData.PrecondCode;
			result = result || entityData.PrecondAr != _originalData.PrecondAr;
			result = result || entityData.PrecondEn != _originalData.PrecondEn;
			result = result || entityData.EntCodeMdTypeId != _originalData.EntCodeMdTypeId;
			result = result || entityData.TblRltdFlg != _originalData.TblRltdFlg;
			result = result || entityData.TblName != _originalData.TblName;
			result = result || entityData.PrecondValue != _originalData.PrecondValue;
			result = result || entityData.IsActive != _originalData.IsActive;
			result = result || entityData.DispOrder != _originalData.DispOrder;
			return result;
		}	
		
		///<summary>
		///  Returns a AccomCdePrecond Entity with the original data.
		///</summary>
		public AccomCdePrecond GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAccomCdePrecond(
				_originalData.AccomCdePrecondId,
				_originalData.PrecondCode,
				_originalData.PrecondAr,
				_originalData.PrecondEn,
				_originalData.EntCodeMdTypeId,
				_originalData.TblRltdFlg,
				_originalData.TblName,
				_originalData.PrecondValue,
				_originalData.IsActive,
				_originalData.DispOrder
				);
				
			return (AccomCdePrecond)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AccomCdePrecondBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AccomCdePrecondBase)
				return ValueEquals(this, (AccomCdePrecondBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AccomCdePrecondBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AccomCdePrecondId.GetHashCode() ^ 
					((this.PrecondCode == null) ? string.Empty : this.PrecondCode.ToString()).GetHashCode() ^ 
					((this.PrecondAr == null) ? string.Empty : this.PrecondAr.ToString()).GetHashCode() ^ 
					((this.PrecondEn == null) ? string.Empty : this.PrecondEn.ToString()).GetHashCode() ^ 
					((this.EntCodeMdTypeId == null) ? string.Empty : this.EntCodeMdTypeId.ToString()).GetHashCode() ^ 
					((this.TblRltdFlg == null) ? string.Empty : this.TblRltdFlg.ToString()).GetHashCode() ^ 
					((this.TblName == null) ? string.Empty : this.TblName.ToString()).GetHashCode() ^ 
					((this.PrecondValue == null) ? string.Empty : this.PrecondValue.ToString()).GetHashCode() ^ 
					((this.IsActive == null) ? string.Empty : this.IsActive.ToString()).GetHashCode() ^ 
					((this.DispOrder == null) ? string.Empty : this.DispOrder.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AccomCdePrecondBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AccomCdePrecondBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AccomCdePrecondBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AccomCdePrecondBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AccomCdePrecondBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AccomCdePrecondBase Object1, AccomCdePrecondBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AccomCdePrecondId != Object2.AccomCdePrecondId)
				equal = false;
			if ( Object1.PrecondCode != null && Object2.PrecondCode != null )
			{
				if (Object1.PrecondCode != Object2.PrecondCode)
					equal = false;
			}
			else if (Object1.PrecondCode == null ^ Object2.PrecondCode == null )
			{
				equal = false;
			}
			if ( Object1.PrecondAr != null && Object2.PrecondAr != null )
			{
				if (Object1.PrecondAr != Object2.PrecondAr)
					equal = false;
			}
			else if (Object1.PrecondAr == null ^ Object2.PrecondAr == null )
			{
				equal = false;
			}
			if ( Object1.PrecondEn != null && Object2.PrecondEn != null )
			{
				if (Object1.PrecondEn != Object2.PrecondEn)
					equal = false;
			}
			else if (Object1.PrecondEn == null ^ Object2.PrecondEn == null )
			{
				equal = false;
			}
			if ( Object1.EntCodeMdTypeId != null && Object2.EntCodeMdTypeId != null )
			{
				if (Object1.EntCodeMdTypeId != Object2.EntCodeMdTypeId)
					equal = false;
			}
			else if (Object1.EntCodeMdTypeId == null ^ Object2.EntCodeMdTypeId == null )
			{
				equal = false;
			}
			if ( Object1.TblRltdFlg != null && Object2.TblRltdFlg != null )
			{
				if (Object1.TblRltdFlg != Object2.TblRltdFlg)
					equal = false;
			}
			else if (Object1.TblRltdFlg == null ^ Object2.TblRltdFlg == null )
			{
				equal = false;
			}
			if ( Object1.TblName != null && Object2.TblName != null )
			{
				if (Object1.TblName != Object2.TblName)
					equal = false;
			}
			else if (Object1.TblName == null ^ Object2.TblName == null )
			{
				equal = false;
			}
			if ( Object1.PrecondValue != null && Object2.PrecondValue != null )
			{
				if (Object1.PrecondValue != Object2.PrecondValue)
					equal = false;
			}
			else if (Object1.PrecondValue == null ^ Object2.PrecondValue == null )
			{
				equal = false;
			}
			if ( Object1.IsActive != null && Object2.IsActive != null )
			{
				if (Object1.IsActive != Object2.IsActive)
					equal = false;
			}
			else if (Object1.IsActive == null ^ Object2.IsActive == null )
			{
				equal = false;
			}
			if ( Object1.DispOrder != null && Object2.DispOrder != null )
			{
				if (Object1.DispOrder != Object2.DispOrder)
					equal = false;
			}
			else if (Object1.DispOrder == null ^ Object2.DispOrder == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AccomCdePrecondBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AccomCdePrecondComparer GetComparer()
        {
            return new AccomCdePrecondComparer();
        }
        */

        // Comparer delegates back to AccomCdePrecond
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AccomCdePrecond rhs, AccomCdePrecondColumn which)
        {
            switch (which)
            {
            	
            	
            	case AccomCdePrecondColumn.AccomCdePrecondId:
            		return this.AccomCdePrecondId.CompareTo(rhs.AccomCdePrecondId);
            		
            		                 
            	
            	
            	case AccomCdePrecondColumn.PrecondCode:
            		return this.PrecondCode.CompareTo(rhs.PrecondCode);
            		
            		                 
            	
            	
            	case AccomCdePrecondColumn.PrecondAr:
            		return this.PrecondAr.CompareTo(rhs.PrecondAr);
            		
            		                 
            	
            	
            	case AccomCdePrecondColumn.PrecondEn:
            		return this.PrecondEn.CompareTo(rhs.PrecondEn);
            		
            		                 
            	
            	
            	case AccomCdePrecondColumn.EntCodeMdTypeId:
            		return this.EntCodeMdTypeId.Value.CompareTo(rhs.EntCodeMdTypeId.Value);
            		
            		                 
            	
            	
            	case AccomCdePrecondColumn.TblRltdFlg:
            		return this.TblRltdFlg.Value.CompareTo(rhs.TblRltdFlg.Value);
            		
            		                 
            	
            	
            	case AccomCdePrecondColumn.TblName:
            		return this.TblName.CompareTo(rhs.TblName);
            		
            		                 
            	
            	
            	case AccomCdePrecondColumn.PrecondValue:
            		return this.PrecondValue.CompareTo(rhs.PrecondValue);
            		
            		                 
            	
            	
            	case AccomCdePrecondColumn.IsActive:
            		return this.IsActive.Value.CompareTo(rhs.IsActive.Value);
            		
            		                 
            	
            	
            	case AccomCdePrecondColumn.DispOrder:
            		return this.DispOrder.Value.CompareTo(rhs.DispOrder.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AccomCdePrecondKey> Members
		
		// member variable for the EntityId property
		private AccomCdePrecondKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AccomCdePrecondKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AccomCdePrecondKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AccomCdePrecond")
					.Append("|").Append( this.AccomCdePrecondId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{11}{10}- AccomCdePrecondId: {0}{10}- PrecondCode: {1}{10}- PrecondAr: {2}{10}- PrecondEn: {3}{10}- EntCodeMdTypeId: {4}{10}- TblRltdFlg: {5}{10}- TblName: {6}{10}- PrecondValue: {7}{10}- IsActive: {8}{10}- DispOrder: {9}{10}{12}", 
				this.AccomCdePrecondId,
				(this.PrecondCode == null) ? string.Empty : this.PrecondCode.ToString(),
				(this.PrecondAr == null) ? string.Empty : this.PrecondAr.ToString(),
				(this.PrecondEn == null) ? string.Empty : this.PrecondEn.ToString(),
				(this.EntCodeMdTypeId == null) ? string.Empty : this.EntCodeMdTypeId.ToString(),
				(this.TblRltdFlg == null) ? string.Empty : this.TblRltdFlg.ToString(),
				(this.TblName == null) ? string.Empty : this.TblName.ToString(),
				(this.PrecondValue == null) ? string.Empty : this.PrecondValue.ToString(),
				(this.IsActive == null) ? string.Empty : this.IsActive.ToString(),
				(this.DispOrder == null) ? string.Empty : this.DispOrder.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ACCOM_CDE_PRECOND' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AccomCdePrecondEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ACCOM_CDE_PRECOND_ID : 2.6.	تحديد شروط خدمة السكن
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ACCOM_CDE_PRECOND"</remarks>
		public System.Int16 AccomCdePrecondId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Int16 OriginalAccomCdePrecondId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// PRECOND_CODE : 
		/// </summary>
		public System.String		  PrecondCode = null;
		
		/// <summary>
		/// PRECOND_AR : 
		/// </summary>
		public System.String		  PrecondAr = null;
		
		/// <summary>
		/// PRECOND_EN : 
		/// </summary>
		public System.String		  PrecondEn = null;
		
		/// <summary>
		/// ENT_CODE_MD_TYPE_ID : 
		/// </summary>
		public System.Decimal?		  EntCodeMdTypeId = null;
		
		/// <summary>
		/// TBL_RLTD_FLG : 
		/// </summary>
		public System.Decimal?		  TblRltdFlg = null;
		
		/// <summary>
		/// TBL_NAME : 
		/// </summary>
		public System.String		  TblName = null;
		
		/// <summary>
		/// PRECOND_VALUE : 
		/// </summary>
		public System.String		  PrecondValue = null;
		
		/// <summary>
		/// IS_ACTIVE : 
		/// </summary>
		public System.Boolean?		  IsActive = null;
		
		/// <summary>
		/// DISP_ORDER : 
		/// </summary>
		public System.Decimal?		  DispOrder = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EntCodeMdType _entCodeMdTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntCodeMdType"/>.
		/// </summary>
		/// <value>The source EntCodeMdType for EntCodeMdTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntCodeMdType EntCodeMdTypeIdSource
      	{
            get { return this._entCodeMdTypeIdSource; }
            set { this._entCodeMdTypeIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AccomCdePrecondEntityData _tmp = new AccomCdePrecondEntityData();
						
			_tmp.AccomCdePrecondId = this.AccomCdePrecondId;
			_tmp.OriginalAccomCdePrecondId = this.OriginalAccomCdePrecondId;
			
			_tmp.PrecondCode = this.PrecondCode;
			_tmp.PrecondAr = this.PrecondAr;
			_tmp.PrecondEn = this.PrecondEn;
			_tmp.EntCodeMdTypeId = this.EntCodeMdTypeId;
			_tmp.TblRltdFlg = this.TblRltdFlg;
			_tmp.TblName = this.TblName;
			_tmp.PrecondValue = this.PrecondValue;
			_tmp.IsActive = this.IsActive;
			_tmp.DispOrder = this.DispOrder;
			
			#region Source Parent Composite Entities
			if (this.EntCodeMdTypeIdSource != null)
				_tmp.EntCodeMdTypeIdSource = MakeCopyOf(this.EntCodeMdTypeIdSource) as EntCodeMdType;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AccomCdePrecondEntityData _tmp = new AccomCdePrecondEntityData();
						
			_tmp.AccomCdePrecondId = this.AccomCdePrecondId;
			_tmp.OriginalAccomCdePrecondId = this.OriginalAccomCdePrecondId;
			
			_tmp.PrecondCode = this.PrecondCode;
			_tmp.PrecondAr = this.PrecondAr;
			_tmp.PrecondEn = this.PrecondEn;
			_tmp.EntCodeMdTypeId = this.EntCodeMdTypeId;
			_tmp.TblRltdFlg = this.TblRltdFlg;
			_tmp.TblName = this.TblName;
			_tmp.PrecondValue = this.PrecondValue;
			_tmp.IsActive = this.IsActive;
			_tmp.DispOrder = this.DispOrder;
			
			#region Source Parent Composite Entities
			if (this.EntCodeMdTypeIdSource != null && existingCopies.Contains(this.EntCodeMdTypeIdSource))
				_tmp.EntCodeMdTypeIdSource = existingCopies[this.EntCodeMdTypeIdSource] as EntCodeMdType;
			else
				_tmp.EntCodeMdTypeIdSource = MakeCopyOf(this.EntCodeMdTypeIdSource, existingCopies) as EntCodeMdType;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccomCdePrecondColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AccomCdePrecondColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccomCdePrecondColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AccomCdePrecondColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccomCdePrecondColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AccomCdePrecondColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AccomCdePrecondEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AccomCdePrecondEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccomCdePrecondColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AccomCdePrecondColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AccomCdePrecondEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AccomCdePrecondEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AccomCdePrecondEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AccomCdePrecond"/> object.
	/// </remarks>
	public class AccomCdePrecondEventArgs : System.EventArgs
	{
		private AccomCdePrecondColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AccomCdePrecondEventArgs class.
		///</summary>
		public AccomCdePrecondEventArgs(AccomCdePrecondColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AccomCdePrecondEventArgs class.
		///</summary>
		public AccomCdePrecondEventArgs(AccomCdePrecondColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AccomCdePrecondColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AccomCdePrecondColumn" />
		public AccomCdePrecondColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AccomCdePrecond related events.
	///</summary>
	public delegate void AccomCdePrecondEventHandler(object sender, AccomCdePrecondEventArgs e);
	
	#region AccomCdePrecondComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AccomCdePrecondComparer : System.Collections.Generic.IComparer<AccomCdePrecond>
	{
		AccomCdePrecondColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AccomCdePrecondComparer"/> class.
        /// </summary>
		public AccomCdePrecondComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AccomCdePrecondComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AccomCdePrecondComparer(AccomCdePrecondColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AccomCdePrecond"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AccomCdePrecond"/> to compare.</param>
        /// <param name="b">The second <c>AccomCdePrecond</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AccomCdePrecond a, AccomCdePrecond b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AccomCdePrecond entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AccomCdePrecond a, AccomCdePrecond b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AccomCdePrecondColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AccomCdePrecondKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AccomCdePrecond"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AccomCdePrecondKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AccomCdePrecondKey class.
		/// </summary>
		public AccomCdePrecondKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AccomCdePrecondKey class.
		/// </summary>
		public AccomCdePrecondKey(AccomCdePrecondBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AccomCdePrecondId = entity.AccomCdePrecondId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AccomCdePrecondKey class.
		/// </summary>
		public AccomCdePrecondKey(System.Int16 _accomCdePrecondId)
		{
			#region Init Properties

			this.AccomCdePrecondId = _accomCdePrecondId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AccomCdePrecondBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AccomCdePrecondBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AccomCdePrecondId property
		private System.Int16 _accomCdePrecondId;
		
		/// <summary>
		/// Gets or sets the AccomCdePrecondId property.
		/// </summary>
		public System.Int16 AccomCdePrecondId
		{
			get { return _accomCdePrecondId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AccomCdePrecondId = value;
				
				_accomCdePrecondId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AccomCdePrecondId = ( values["AccomCdePrecondId"] != null ) ? (System.Int16) EntityUtil.ChangeType(values["AccomCdePrecondId"], typeof(System.Int16)) : (short)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AccomCdePrecondId", AccomCdePrecondId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AccomCdePrecondId: {0}{1}",
								AccomCdePrecondId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AccomCdePrecondColumn Enum
	
	/// <summary>
	/// Enumerate the AccomCdePrecond columns.
	/// </summary>
	[Serializable]
	public enum AccomCdePrecondColumn : int
	{
		/// <summary>
		/// AccomCdePrecondId : 2.6.	تحديد شروط خدمة السكن
		/// </summary>
		[EnumTextValue("ACCOM_CDE_PRECOND_ID")]
		[ColumnEnum("ACCOM_CDE_PRECOND_ID", typeof(System.Int16), System.Data.DbType.Int16, true, false, false)]
		AccomCdePrecondId = 1,
		/// <summary>
		/// PrecondCode : 
		/// </summary>
		[EnumTextValue("PRECOND_CODE")]
		[ColumnEnum("PRECOND_CODE", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		PrecondCode = 2,
		/// <summary>
		/// PrecondAr : 
		/// </summary>
		[EnumTextValue("PRECOND_AR")]
		[ColumnEnum("PRECOND_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		PrecondAr = 3,
		/// <summary>
		/// PrecondEn : 
		/// </summary>
		[EnumTextValue("PRECOND_EN")]
		[ColumnEnum("PRECOND_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		PrecondEn = 4,
		/// <summary>
		/// EntCodeMdTypeId : 
		/// </summary>
		[EnumTextValue("ENT_CODE_MD_TYPE_ID")]
		[ColumnEnum("ENT_CODE_MD_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntCodeMdTypeId = 5,
		/// <summary>
		/// TblRltdFlg : 
		/// </summary>
		[EnumTextValue("TBL_RLTD_FLG")]
		[ColumnEnum("TBL_RLTD_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TblRltdFlg = 6,
		/// <summary>
		/// TblName : 
		/// </summary>
		[EnumTextValue("TBL_NAME")]
		[ColumnEnum("TBL_NAME", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		TblName = 7,
		/// <summary>
		/// PrecondValue : 
		/// </summary>
		[EnumTextValue("PRECOND_VALUE")]
		[ColumnEnum("PRECOND_VALUE", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		PrecondValue = 8,
		/// <summary>
		/// IsActive : 
		/// </summary>
		[EnumTextValue("IS_ACTIVE")]
		[ColumnEnum("IS_ACTIVE", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsActive = 9,
		/// <summary>
		/// DispOrder : 
		/// </summary>
		[EnumTextValue("DISP_ORDER")]
		[ColumnEnum("DISP_ORDER", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DispOrder = 10
	}//End enum

	#endregion AccomCdePrecondColumn Enum

} // end namespace
