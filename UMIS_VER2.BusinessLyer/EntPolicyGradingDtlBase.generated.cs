
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EntPolicyGradingDtl.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ENT_POLICY_GRADING_DTL' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EntPolicyGradingDtlBase : EntityBase, IEntPolicyGradingDtl, IEntityId<EntPolicyGradingDtlKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EntPolicyGradingDtlEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EntPolicyGradingDtlEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EntPolicyGradingDtlEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EntPolicyGradingDtl> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EntPolicyGradingDtlEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EntPolicyGradingDtlEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EntPolicyGradingDtlBase"/> instance.
		///</summary>
		public EntPolicyGradingDtlBase()
		{
			this.entityData = new EntPolicyGradingDtlEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EntPolicyGradingDtlBase"/> instance.
		///</summary>
		///<param name="_entPolicyGradingDtlId"></param>
		///<param name="_entPolicyGradingHdrId"></param>
		///<param name="_edCodeGradingId"></param>
		///<param name="_descrAr"></param>
		///<param name="_descrEn"></param>
		///<param name="_gradCode"></param>
		///<param name="_symbolAr"></param>
		///<param name="_symbolEn"></param>
		///<param name="_gradOrder"></param>
		///<param name="_minRate">النقاط او النسبة</param>
		///<param name="_maxRate"></param>
		///<param name="_gsCodePassFailId"></param>
		///<param name="_points"></param>
		///<param name="_minPrcent">   ERU , ECU  النسبة</param>
		///<param name="_maxPrcent">   ERU , ECU   النسبة</param>
		public EntPolicyGradingDtlBase(System.Decimal _entPolicyGradingDtlId, System.Decimal _entPolicyGradingHdrId, 
			System.Decimal _edCodeGradingId, System.String _descrAr, System.String _descrEn, 
			System.String _gradCode, System.String _symbolAr, System.String _symbolEn, 
			System.Decimal _gradOrder, System.Decimal? _minRate, System.Decimal? _maxRate, 
			System.Decimal _gsCodePassFailId, System.Decimal? _points, System.Decimal? _minPrcent, 
			System.Decimal? _maxPrcent)
		{
			this.entityData = new EntPolicyGradingDtlEntityData();
			this.backupData = null;

			this.EntPolicyGradingDtlId = _entPolicyGradingDtlId;
			this.EntPolicyGradingHdrId = _entPolicyGradingHdrId;
			this.EdCodeGradingId = _edCodeGradingId;
			this.DescrAr = _descrAr;
			this.DescrEn = _descrEn;
			this.GradCode = _gradCode;
			this.SymbolAr = _symbolAr;
			this.SymbolEn = _symbolEn;
			this.GradOrder = _gradOrder;
			this.MinRate = _minRate;
			this.MaxRate = _maxRate;
			this.GsCodePassFailId = _gsCodePassFailId;
			this.Points = _points;
			this.MinPrcent = _minPrcent;
			this.MaxPrcent = _maxPrcent;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EntPolicyGradingDtl"/> instance.
		///</summary>
		///<param name="_entPolicyGradingDtlId"></param>
		///<param name="_entPolicyGradingHdrId"></param>
		///<param name="_edCodeGradingId"></param>
		///<param name="_descrAr"></param>
		///<param name="_descrEn"></param>
		///<param name="_gradCode"></param>
		///<param name="_symbolAr"></param>
		///<param name="_symbolEn"></param>
		///<param name="_gradOrder"></param>
		///<param name="_minRate">النقاط او النسبة</param>
		///<param name="_maxRate"></param>
		///<param name="_gsCodePassFailId"></param>
		///<param name="_points"></param>
		///<param name="_minPrcent">   ERU , ECU  النسبة</param>
		///<param name="_maxPrcent">   ERU , ECU   النسبة</param>
		public static EntPolicyGradingDtl CreateEntPolicyGradingDtl(System.Decimal _entPolicyGradingDtlId, System.Decimal _entPolicyGradingHdrId, 
			System.Decimal _edCodeGradingId, System.String _descrAr, System.String _descrEn, 
			System.String _gradCode, System.String _symbolAr, System.String _symbolEn, 
			System.Decimal _gradOrder, System.Decimal? _minRate, System.Decimal? _maxRate, 
			System.Decimal _gsCodePassFailId, System.Decimal? _points, System.Decimal? _minPrcent, 
			System.Decimal? _maxPrcent)
		{
			EntPolicyGradingDtl newEntPolicyGradingDtl = new EntPolicyGradingDtl();
			newEntPolicyGradingDtl.EntPolicyGradingDtlId = _entPolicyGradingDtlId;
			newEntPolicyGradingDtl.EntPolicyGradingHdrId = _entPolicyGradingHdrId;
			newEntPolicyGradingDtl.EdCodeGradingId = _edCodeGradingId;
			newEntPolicyGradingDtl.DescrAr = _descrAr;
			newEntPolicyGradingDtl.DescrEn = _descrEn;
			newEntPolicyGradingDtl.GradCode = _gradCode;
			newEntPolicyGradingDtl.SymbolAr = _symbolAr;
			newEntPolicyGradingDtl.SymbolEn = _symbolEn;
			newEntPolicyGradingDtl.GradOrder = _gradOrder;
			newEntPolicyGradingDtl.MinRate = _minRate;
			newEntPolicyGradingDtl.MaxRate = _maxRate;
			newEntPolicyGradingDtl.GsCodePassFailId = _gsCodePassFailId;
			newEntPolicyGradingDtl.Points = _points;
			newEntPolicyGradingDtl.MinPrcent = _minPrcent;
			newEntPolicyGradingDtl.MaxPrcent = _maxPrcent;
			return newEntPolicyGradingDtl;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EntPolicyGradingDtlId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EntPolicyGradingDtlId
		{
			get
			{
				return this.entityData.EntPolicyGradingDtlId; 
			}
			
			set
			{
				if (this.entityData.EntPolicyGradingDtlId == value)
					return;
					
				OnColumnChanging(EntPolicyGradingDtlColumn.EntPolicyGradingDtlId, this.entityData.EntPolicyGradingDtlId);
				this.entityData.EntPolicyGradingDtlId = value;
				this.EntityId.EntPolicyGradingDtlId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyGradingDtlColumn.EntPolicyGradingDtlId, this.entityData.EntPolicyGradingDtlId);
				OnPropertyChanged("EntPolicyGradingDtlId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ENT_POLICY_GRADING_DTL_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ENT_POLICY_GRADING_DTL_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEntPolicyGradingDtlId
		{
			get { return this.entityData.OriginalEntPolicyGradingDtlId; }
			set { this.entityData.OriginalEntPolicyGradingDtlId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EntPolicyGradingHdrId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EntPolicyGradingHdrId
		{
			get
			{
				return this.entityData.EntPolicyGradingHdrId; 
			}
			
			set
			{
				if (this.entityData.EntPolicyGradingHdrId == value)
					return;
					
				OnColumnChanging(EntPolicyGradingDtlColumn.EntPolicyGradingHdrId, this.entityData.EntPolicyGradingHdrId);
				this.entityData.EntPolicyGradingHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyGradingDtlColumn.EntPolicyGradingHdrId, this.entityData.EntPolicyGradingHdrId);
				OnPropertyChanged("EntPolicyGradingHdrId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeGradingId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeGradingId
		{
			get
			{
				return this.entityData.EdCodeGradingId; 
			}
			
			set
			{
				if (this.entityData.EdCodeGradingId == value)
					return;
					
				OnColumnChanging(EntPolicyGradingDtlColumn.EdCodeGradingId, this.entityData.EdCodeGradingId);
				this.entityData.EdCodeGradingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyGradingDtlColumn.EdCodeGradingId, this.entityData.EdCodeGradingId);
				OnPropertyChanged("EdCodeGradingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescrAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String DescrAr
		{
			get
			{
				return this.entityData.DescrAr; 
			}
			
			set
			{
				if (this.entityData.DescrAr == value)
					return;
					
				OnColumnChanging(EntPolicyGradingDtlColumn.DescrAr, this.entityData.DescrAr);
				this.entityData.DescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyGradingDtlColumn.DescrAr, this.entityData.DescrAr);
				OnPropertyChanged("DescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescrEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String DescrEn
		{
			get
			{
				return this.entityData.DescrEn; 
			}
			
			set
			{
				if (this.entityData.DescrEn == value)
					return;
					
				OnColumnChanging(EntPolicyGradingDtlColumn.DescrEn, this.entityData.DescrEn);
				this.entityData.DescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyGradingDtlColumn.DescrEn, this.entityData.DescrEn);
				OnPropertyChanged("DescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GradCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String GradCode
		{
			get
			{
				return this.entityData.GradCode; 
			}
			
			set
			{
				if (this.entityData.GradCode == value)
					return;
					
				OnColumnChanging(EntPolicyGradingDtlColumn.GradCode, this.entityData.GradCode);
				this.entityData.GradCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyGradingDtlColumn.GradCode, this.entityData.GradCode);
				OnPropertyChanged("GradCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SymbolAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String SymbolAr
		{
			get
			{
				return this.entityData.SymbolAr; 
			}
			
			set
			{
				if (this.entityData.SymbolAr == value)
					return;
					
				OnColumnChanging(EntPolicyGradingDtlColumn.SymbolAr, this.entityData.SymbolAr);
				this.entityData.SymbolAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyGradingDtlColumn.SymbolAr, this.entityData.SymbolAr);
				OnPropertyChanged("SymbolAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SymbolEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String SymbolEn
		{
			get
			{
				return this.entityData.SymbolEn; 
			}
			
			set
			{
				if (this.entityData.SymbolEn == value)
					return;
					
				OnColumnChanging(EntPolicyGradingDtlColumn.SymbolEn, this.entityData.SymbolEn);
				this.entityData.SymbolEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyGradingDtlColumn.SymbolEn, this.entityData.SymbolEn);
				OnPropertyChanged("SymbolEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GradOrder property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GradOrder
		{
			get
			{
				return this.entityData.GradOrder; 
			}
			
			set
			{
				if (this.entityData.GradOrder == value)
					return;
					
				OnColumnChanging(EntPolicyGradingDtlColumn.GradOrder, this.entityData.GradOrder);
				this.entityData.GradOrder = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyGradingDtlColumn.GradOrder, this.entityData.GradOrder);
				OnPropertyChanged("GradOrder");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MinRate property. 
		///		النقاط او النسبة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMinRateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"النقاط او النسبة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MinRate
		{
			get
			{
				return this.entityData.MinRate; 
			}
			
			set
			{
				if (this.entityData.MinRate == value)
					return;
					
				OnColumnChanging(EntPolicyGradingDtlColumn.MinRate, this.entityData.MinRate);
				this.entityData.MinRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyGradingDtlColumn.MinRate, this.entityData.MinRate);
				OnPropertyChanged("MinRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaxRate property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMaxRateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MaxRate
		{
			get
			{
				return this.entityData.MaxRate; 
			}
			
			set
			{
				if (this.entityData.MaxRate == value)
					return;
					
				OnColumnChanging(EntPolicyGradingDtlColumn.MaxRate, this.entityData.MaxRate);
				this.entityData.MaxRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyGradingDtlColumn.MaxRate, this.entityData.MaxRate);
				OnPropertyChanged("MaxRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodePassFailId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal GsCodePassFailId
		{
			get
			{
				return this.entityData.GsCodePassFailId; 
			}
			
			set
			{
				if (this.entityData.GsCodePassFailId == value)
					return;
					
				OnColumnChanging(EntPolicyGradingDtlColumn.GsCodePassFailId, this.entityData.GsCodePassFailId);
				this.entityData.GsCodePassFailId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyGradingDtlColumn.GsCodePassFailId, this.entityData.GsCodePassFailId);
				OnPropertyChanged("GsCodePassFailId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Points property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPointsNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Points
		{
			get
			{
				return this.entityData.Points; 
			}
			
			set
			{
				if (this.entityData.Points == value)
					return;
					
				OnColumnChanging(EntPolicyGradingDtlColumn.Points, this.entityData.Points);
				this.entityData.Points = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyGradingDtlColumn.Points, this.entityData.Points);
				OnPropertyChanged("Points");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MinPrcent property. 
		///		   ERU , ECU  النسبة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMinPrcentNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"   ERU , ECU  النسبة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MinPrcent
		{
			get
			{
				return this.entityData.MinPrcent; 
			}
			
			set
			{
				if (this.entityData.MinPrcent == value)
					return;
					
				OnColumnChanging(EntPolicyGradingDtlColumn.MinPrcent, this.entityData.MinPrcent);
				this.entityData.MinPrcent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyGradingDtlColumn.MinPrcent, this.entityData.MinPrcent);
				OnPropertyChanged("MinPrcent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaxPrcent property. 
		///		   ERU , ECU   النسبة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMaxPrcentNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"   ERU , ECU   النسبة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MaxPrcent
		{
			get
			{
				return this.entityData.MaxPrcent; 
			}
			
			set
			{
				if (this.entityData.MaxPrcent == value)
					return;
					
				OnColumnChanging(EntPolicyGradingDtlColumn.MaxPrcent, this.entityData.MaxPrcent);
				this.entityData.MaxPrcent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EntPolicyGradingDtlColumn.MaxPrcent, this.entityData.MaxPrcent);
				OnPropertyChanged("MaxPrcent");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeGradingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeGrading EdCodeGradingIdSource
      	{
            get { return entityData.EdCodeGradingIdSource; }
            set { entityData.EdCodeGradingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntPolicyGradingHdr"/>.
		/// </summary>
		/// <value>The source EntPolicyGradingHdr for EntPolicyGradingHdrId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntPolicyGradingHdr EntPolicyGradingHdrIdSource
      	{
            get { return entityData.EntPolicyGradingHdrIdSource; }
            set { entityData.EntPolicyGradingHdrIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodePassFail"/>.
		/// </summary>
		/// <value>The source GsCodePassFail for GsCodePassFailId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodePassFail GsCodePassFailIdSource
      	{
            get { return entityData.GsCodePassFailIdSource; }
            set { entityData.GsCodePassFailIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("DescrAr", "Descr Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrAr", "Descr Ar", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrEn", "Descr En", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GradCode", "Grad Code", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SymbolAr", "Symbol Ar", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SymbolEn", "Symbol En", 30));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ENT_POLICY_GRADING_DTL"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ENT_POLICY_GRADING_DTL_ID", "ENT_POLICY_GRADING_HDR_ID", "ED_CODE_GRADING_ID", "DESCR_AR", "DESCR_EN", "GRAD_CODE", "SYMBOL_AR", "SYMBOL_EN", "GRAD_ORDER", "MIN_RATE", "MAX_RATE", "GS_CODE_PASS_FAIL_ID", "POINTS", "MIN_PRCENT", "MAX_PRCENT"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EntPolicyGradingDtlEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EntPolicyGradingDtl) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EntPolicyGradingDtl>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EntPolicyGradingDtl);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EntPolicyGradingDtl Entity 
		///</summary>
		protected virtual EntPolicyGradingDtl Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EntPolicyGradingDtl copy = new EntPolicyGradingDtl();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EntPolicyGradingDtlId = this.EntPolicyGradingDtlId;
					copy.OriginalEntPolicyGradingDtlId = this.OriginalEntPolicyGradingDtlId;
				copy.EntPolicyGradingHdrId = this.EntPolicyGradingHdrId;
				copy.EdCodeGradingId = this.EdCodeGradingId;
				copy.DescrAr = this.DescrAr;
				copy.DescrEn = this.DescrEn;
				copy.GradCode = this.GradCode;
				copy.SymbolAr = this.SymbolAr;
				copy.SymbolEn = this.SymbolEn;
				copy.GradOrder = this.GradOrder;
				copy.MinRate = this.MinRate;
				copy.MaxRate = this.MaxRate;
				copy.GsCodePassFailId = this.GsCodePassFailId;
				copy.Points = this.Points;
				copy.MinPrcent = this.MinPrcent;
				copy.MaxPrcent = this.MaxPrcent;
			
			if (this.EdCodeGradingIdSource != null && existingCopies.Contains(this.EdCodeGradingIdSource))
				copy.EdCodeGradingIdSource = existingCopies[this.EdCodeGradingIdSource] as EdCodeGrading;
			else
				copy.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource, existingCopies) as EdCodeGrading;
			if (this.EntPolicyGradingHdrIdSource != null && existingCopies.Contains(this.EntPolicyGradingHdrIdSource))
				copy.EntPolicyGradingHdrIdSource = existingCopies[this.EntPolicyGradingHdrIdSource] as EntPolicyGradingHdr;
			else
				copy.EntPolicyGradingHdrIdSource = MakeCopyOf(this.EntPolicyGradingHdrIdSource, existingCopies) as EntPolicyGradingHdr;
			if (this.GsCodePassFailIdSource != null && existingCopies.Contains(this.GsCodePassFailIdSource))
				copy.GsCodePassFailIdSource = existingCopies[this.GsCodePassFailIdSource] as GsCodePassFail;
			else
				copy.GsCodePassFailIdSource = MakeCopyOf(this.GsCodePassFailIdSource, existingCopies) as GsCodePassFail;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EntPolicyGradingDtl Entity 
		///</summary>
		public virtual EntPolicyGradingDtl Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EntPolicyGradingDtl Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EntPolicyGradingDtl DeepCopy()
		{
			return EntityHelper.Clone<EntPolicyGradingDtl>(this as EntPolicyGradingDtl);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EntPolicyGradingDtlEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EntPolicyGradingDtlEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EntPolicyGradingDtlEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EntPolicyGradingDtlColumn column)
		{
			switch(column)
			{
					case EntPolicyGradingDtlColumn.EntPolicyGradingDtlId:
					return entityData.EntPolicyGradingDtlId != _originalData.EntPolicyGradingDtlId;
					case EntPolicyGradingDtlColumn.EntPolicyGradingHdrId:
					return entityData.EntPolicyGradingHdrId != _originalData.EntPolicyGradingHdrId;
					case EntPolicyGradingDtlColumn.EdCodeGradingId:
					return entityData.EdCodeGradingId != _originalData.EdCodeGradingId;
					case EntPolicyGradingDtlColumn.DescrAr:
					return entityData.DescrAr != _originalData.DescrAr;
					case EntPolicyGradingDtlColumn.DescrEn:
					return entityData.DescrEn != _originalData.DescrEn;
					case EntPolicyGradingDtlColumn.GradCode:
					return entityData.GradCode != _originalData.GradCode;
					case EntPolicyGradingDtlColumn.SymbolAr:
					return entityData.SymbolAr != _originalData.SymbolAr;
					case EntPolicyGradingDtlColumn.SymbolEn:
					return entityData.SymbolEn != _originalData.SymbolEn;
					case EntPolicyGradingDtlColumn.GradOrder:
					return entityData.GradOrder != _originalData.GradOrder;
					case EntPolicyGradingDtlColumn.MinRate:
					return entityData.MinRate != _originalData.MinRate;
					case EntPolicyGradingDtlColumn.MaxRate:
					return entityData.MaxRate != _originalData.MaxRate;
					case EntPolicyGradingDtlColumn.GsCodePassFailId:
					return entityData.GsCodePassFailId != _originalData.GsCodePassFailId;
					case EntPolicyGradingDtlColumn.Points:
					return entityData.Points != _originalData.Points;
					case EntPolicyGradingDtlColumn.MinPrcent:
					return entityData.MinPrcent != _originalData.MinPrcent;
					case EntPolicyGradingDtlColumn.MaxPrcent:
					return entityData.MaxPrcent != _originalData.MaxPrcent;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EntPolicyGradingDtlColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EntPolicyGradingDtlId != _originalData.EntPolicyGradingDtlId;
			result = result || entityData.EntPolicyGradingHdrId != _originalData.EntPolicyGradingHdrId;
			result = result || entityData.EdCodeGradingId != _originalData.EdCodeGradingId;
			result = result || entityData.DescrAr != _originalData.DescrAr;
			result = result || entityData.DescrEn != _originalData.DescrEn;
			result = result || entityData.GradCode != _originalData.GradCode;
			result = result || entityData.SymbolAr != _originalData.SymbolAr;
			result = result || entityData.SymbolEn != _originalData.SymbolEn;
			result = result || entityData.GradOrder != _originalData.GradOrder;
			result = result || entityData.MinRate != _originalData.MinRate;
			result = result || entityData.MaxRate != _originalData.MaxRate;
			result = result || entityData.GsCodePassFailId != _originalData.GsCodePassFailId;
			result = result || entityData.Points != _originalData.Points;
			result = result || entityData.MinPrcent != _originalData.MinPrcent;
			result = result || entityData.MaxPrcent != _originalData.MaxPrcent;
			return result;
		}	
		
		///<summary>
		///  Returns a EntPolicyGradingDtl Entity with the original data.
		///</summary>
		public EntPolicyGradingDtl GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEntPolicyGradingDtl(
				_originalData.EntPolicyGradingDtlId,
				_originalData.EntPolicyGradingHdrId,
				_originalData.EdCodeGradingId,
				_originalData.DescrAr,
				_originalData.DescrEn,
				_originalData.GradCode,
				_originalData.SymbolAr,
				_originalData.SymbolEn,
				_originalData.GradOrder,
				_originalData.MinRate,
				_originalData.MaxRate,
				_originalData.GsCodePassFailId,
				_originalData.Points,
				_originalData.MinPrcent,
				_originalData.MaxPrcent
				);
				
			return (EntPolicyGradingDtl)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EntPolicyGradingDtlBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EntPolicyGradingDtlBase)
				return ValueEquals(this, (EntPolicyGradingDtlBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EntPolicyGradingDtlBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EntPolicyGradingDtlId.GetHashCode() ^ 
					this.EntPolicyGradingHdrId.GetHashCode() ^ 
					this.EdCodeGradingId.GetHashCode() ^ 
					this.DescrAr.GetHashCode() ^ 
					((this.DescrEn == null) ? string.Empty : this.DescrEn.ToString()).GetHashCode() ^ 
					((this.GradCode == null) ? string.Empty : this.GradCode.ToString()).GetHashCode() ^ 
					((this.SymbolAr == null) ? string.Empty : this.SymbolAr.ToString()).GetHashCode() ^ 
					((this.SymbolEn == null) ? string.Empty : this.SymbolEn.ToString()).GetHashCode() ^ 
					this.GradOrder.GetHashCode() ^ 
					((this.MinRate == null) ? string.Empty : this.MinRate.ToString()).GetHashCode() ^ 
					((this.MaxRate == null) ? string.Empty : this.MaxRate.ToString()).GetHashCode() ^ 
					this.GsCodePassFailId.GetHashCode() ^ 
					((this.Points == null) ? string.Empty : this.Points.ToString()).GetHashCode() ^ 
					((this.MinPrcent == null) ? string.Empty : this.MinPrcent.ToString()).GetHashCode() ^ 
					((this.MaxPrcent == null) ? string.Empty : this.MaxPrcent.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EntPolicyGradingDtlBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EntPolicyGradingDtlBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EntPolicyGradingDtlBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EntPolicyGradingDtlBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EntPolicyGradingDtlBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EntPolicyGradingDtlBase Object1, EntPolicyGradingDtlBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EntPolicyGradingDtlId != Object2.EntPolicyGradingDtlId)
				equal = false;
			if (Object1.EntPolicyGradingHdrId != Object2.EntPolicyGradingHdrId)
				equal = false;
			if (Object1.EdCodeGradingId != Object2.EdCodeGradingId)
				equal = false;
			if (Object1.DescrAr != Object2.DescrAr)
				equal = false;
			if ( Object1.DescrEn != null && Object2.DescrEn != null )
			{
				if (Object1.DescrEn != Object2.DescrEn)
					equal = false;
			}
			else if (Object1.DescrEn == null ^ Object2.DescrEn == null )
			{
				equal = false;
			}
			if ( Object1.GradCode != null && Object2.GradCode != null )
			{
				if (Object1.GradCode != Object2.GradCode)
					equal = false;
			}
			else if (Object1.GradCode == null ^ Object2.GradCode == null )
			{
				equal = false;
			}
			if ( Object1.SymbolAr != null && Object2.SymbolAr != null )
			{
				if (Object1.SymbolAr != Object2.SymbolAr)
					equal = false;
			}
			else if (Object1.SymbolAr == null ^ Object2.SymbolAr == null )
			{
				equal = false;
			}
			if ( Object1.SymbolEn != null && Object2.SymbolEn != null )
			{
				if (Object1.SymbolEn != Object2.SymbolEn)
					equal = false;
			}
			else if (Object1.SymbolEn == null ^ Object2.SymbolEn == null )
			{
				equal = false;
			}
			if (Object1.GradOrder != Object2.GradOrder)
				equal = false;
			if ( Object1.MinRate != null && Object2.MinRate != null )
			{
				if (Object1.MinRate != Object2.MinRate)
					equal = false;
			}
			else if (Object1.MinRate == null ^ Object2.MinRate == null )
			{
				equal = false;
			}
			if ( Object1.MaxRate != null && Object2.MaxRate != null )
			{
				if (Object1.MaxRate != Object2.MaxRate)
					equal = false;
			}
			else if (Object1.MaxRate == null ^ Object2.MaxRate == null )
			{
				equal = false;
			}
			if (Object1.GsCodePassFailId != Object2.GsCodePassFailId)
				equal = false;
			if ( Object1.Points != null && Object2.Points != null )
			{
				if (Object1.Points != Object2.Points)
					equal = false;
			}
			else if (Object1.Points == null ^ Object2.Points == null )
			{
				equal = false;
			}
			if ( Object1.MinPrcent != null && Object2.MinPrcent != null )
			{
				if (Object1.MinPrcent != Object2.MinPrcent)
					equal = false;
			}
			else if (Object1.MinPrcent == null ^ Object2.MinPrcent == null )
			{
				equal = false;
			}
			if ( Object1.MaxPrcent != null && Object2.MaxPrcent != null )
			{
				if (Object1.MaxPrcent != Object2.MaxPrcent)
					equal = false;
			}
			else if (Object1.MaxPrcent == null ^ Object2.MaxPrcent == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EntPolicyGradingDtlBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EntPolicyGradingDtlComparer GetComparer()
        {
            return new EntPolicyGradingDtlComparer();
        }
        */

        // Comparer delegates back to EntPolicyGradingDtl
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EntPolicyGradingDtl rhs, EntPolicyGradingDtlColumn which)
        {
            switch (which)
            {
            	
            	
            	case EntPolicyGradingDtlColumn.EntPolicyGradingDtlId:
            		return this.EntPolicyGradingDtlId.CompareTo(rhs.EntPolicyGradingDtlId);
            		
            		                 
            	
            	
            	case EntPolicyGradingDtlColumn.EntPolicyGradingHdrId:
            		return this.EntPolicyGradingHdrId.CompareTo(rhs.EntPolicyGradingHdrId);
            		
            		                 
            	
            	
            	case EntPolicyGradingDtlColumn.EdCodeGradingId:
            		return this.EdCodeGradingId.CompareTo(rhs.EdCodeGradingId);
            		
            		                 
            	
            	
            	case EntPolicyGradingDtlColumn.DescrAr:
            		return this.DescrAr.CompareTo(rhs.DescrAr);
            		
            		                 
            	
            	
            	case EntPolicyGradingDtlColumn.DescrEn:
            		return this.DescrEn.CompareTo(rhs.DescrEn);
            		
            		                 
            	
            	
            	case EntPolicyGradingDtlColumn.GradCode:
            		return this.GradCode.CompareTo(rhs.GradCode);
            		
            		                 
            	
            	
            	case EntPolicyGradingDtlColumn.SymbolAr:
            		return this.SymbolAr.CompareTo(rhs.SymbolAr);
            		
            		                 
            	
            	
            	case EntPolicyGradingDtlColumn.SymbolEn:
            		return this.SymbolEn.CompareTo(rhs.SymbolEn);
            		
            		                 
            	
            	
            	case EntPolicyGradingDtlColumn.GradOrder:
            		return this.GradOrder.CompareTo(rhs.GradOrder);
            		
            		                 
            	
            	
            	case EntPolicyGradingDtlColumn.MinRate:
            		return this.MinRate.Value.CompareTo(rhs.MinRate.Value);
            		
            		                 
            	
            	
            	case EntPolicyGradingDtlColumn.MaxRate:
            		return this.MaxRate.Value.CompareTo(rhs.MaxRate.Value);
            		
            		                 
            	
            	
            	case EntPolicyGradingDtlColumn.GsCodePassFailId:
            		return this.GsCodePassFailId.CompareTo(rhs.GsCodePassFailId);
            		
            		                 
            	
            	
            	case EntPolicyGradingDtlColumn.Points:
            		return this.Points.Value.CompareTo(rhs.Points.Value);
            		
            		                 
            	
            	
            	case EntPolicyGradingDtlColumn.MinPrcent:
            		return this.MinPrcent.Value.CompareTo(rhs.MinPrcent.Value);
            		
            		                 
            	
            	
            	case EntPolicyGradingDtlColumn.MaxPrcent:
            		return this.MaxPrcent.Value.CompareTo(rhs.MaxPrcent.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EntPolicyGradingDtlKey> Members
		
		// member variable for the EntityId property
		private EntPolicyGradingDtlKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EntPolicyGradingDtlKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EntPolicyGradingDtlKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EntPolicyGradingDtl")
					.Append("|").Append( this.EntPolicyGradingDtlId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{16}{15}- EntPolicyGradingDtlId: {0}{15}- EntPolicyGradingHdrId: {1}{15}- EdCodeGradingId: {2}{15}- DescrAr: {3}{15}- DescrEn: {4}{15}- GradCode: {5}{15}- SymbolAr: {6}{15}- SymbolEn: {7}{15}- GradOrder: {8}{15}- MinRate: {9}{15}- MaxRate: {10}{15}- GsCodePassFailId: {11}{15}- Points: {12}{15}- MinPrcent: {13}{15}- MaxPrcent: {14}{15}{17}", 
				this.EntPolicyGradingDtlId,
				this.EntPolicyGradingHdrId,
				this.EdCodeGradingId,
				this.DescrAr,
				(this.DescrEn == null) ? string.Empty : this.DescrEn.ToString(),
				(this.GradCode == null) ? string.Empty : this.GradCode.ToString(),
				(this.SymbolAr == null) ? string.Empty : this.SymbolAr.ToString(),
				(this.SymbolEn == null) ? string.Empty : this.SymbolEn.ToString(),
				this.GradOrder,
				(this.MinRate == null) ? string.Empty : this.MinRate.ToString(),
				(this.MaxRate == null) ? string.Empty : this.MaxRate.ToString(),
				this.GsCodePassFailId,
				(this.Points == null) ? string.Empty : this.Points.ToString(),
				(this.MinPrcent == null) ? string.Empty : this.MinPrcent.ToString(),
				(this.MaxPrcent == null) ? string.Empty : this.MaxPrcent.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ENT_POLICY_GRADING_DTL' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EntPolicyGradingDtlEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ENT_POLICY_GRADING_DTL_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ENT_POLICY_GRADING_DTL"</remarks>
		public System.Decimal EntPolicyGradingDtlId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEntPolicyGradingDtlId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ENT_POLICY_GRADING_HDR_ID : 
		/// </summary>
		public System.Decimal		  EntPolicyGradingHdrId = 0.0m;
		
		/// <summary>
		/// ED_CODE_GRADING_ID : 
		/// </summary>
		public System.Decimal		  EdCodeGradingId = 0.0m;
		
		/// <summary>
		/// DESCR_AR : 
		/// </summary>
		public System.String		  DescrAr = string.Empty;
		
		/// <summary>
		/// DESCR_EN : 
		/// </summary>
		public System.String		  DescrEn = null;
		
		/// <summary>
		/// GRAD_CODE : 
		/// </summary>
		public System.String		  GradCode = null;
		
		/// <summary>
		/// SYMBOL_AR : 
		/// </summary>
		public System.String		  SymbolAr = null;
		
		/// <summary>
		/// SYMBOL_EN : 
		/// </summary>
		public System.String		  SymbolEn = null;
		
		/// <summary>
		/// GRAD_ORDER : 
		/// </summary>
		public System.Decimal		  GradOrder = 0.0m;
		
		/// <summary>
		/// MIN_RATE : النقاط او النسبة
		/// </summary>
		public System.Decimal?		  MinRate = null;
		
		/// <summary>
		/// MAX_RATE : 
		/// </summary>
		public System.Decimal?		  MaxRate = null;
		
		/// <summary>
		/// GS_CODE_PASS_FAIL_ID : 
		/// </summary>
		public System.Decimal		  GsCodePassFailId = 0.0m;
		
		/// <summary>
		/// POINTS : 
		/// </summary>
		public System.Decimal?		  Points = null;
		
		/// <summary>
		/// MIN_PRCENT :    ERU , ECU  النسبة
		/// </summary>
		public System.Decimal?		  MinPrcent = null;
		
		/// <summary>
		/// MAX_PRCENT :    ERU , ECU   النسبة
		/// </summary>
		public System.Decimal?		  MaxPrcent = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdCodeGrading _edCodeGradingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeGradingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeGrading EdCodeGradingIdSource
      	{
            get { return this._edCodeGradingIdSource; }
            set { this._edCodeGradingIdSource = value; }
      	}
		private EntPolicyGradingHdr _entPolicyGradingHdrIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntPolicyGradingHdr"/>.
		/// </summary>
		/// <value>The source EntPolicyGradingHdr for EntPolicyGradingHdrId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntPolicyGradingHdr EntPolicyGradingHdrIdSource
      	{
            get { return this._entPolicyGradingHdrIdSource; }
            set { this._entPolicyGradingHdrIdSource = value; }
      	}
		private GsCodePassFail _gsCodePassFailIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodePassFail"/>.
		/// </summary>
		/// <value>The source GsCodePassFail for GsCodePassFailId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodePassFail GsCodePassFailIdSource
      	{
            get { return this._gsCodePassFailIdSource; }
            set { this._gsCodePassFailIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EntPolicyGradingDtlEntityData _tmp = new EntPolicyGradingDtlEntityData();
						
			_tmp.EntPolicyGradingDtlId = this.EntPolicyGradingDtlId;
			_tmp.OriginalEntPolicyGradingDtlId = this.OriginalEntPolicyGradingDtlId;
			
			_tmp.EntPolicyGradingHdrId = this.EntPolicyGradingHdrId;
			_tmp.EdCodeGradingId = this.EdCodeGradingId;
			_tmp.DescrAr = this.DescrAr;
			_tmp.DescrEn = this.DescrEn;
			_tmp.GradCode = this.GradCode;
			_tmp.SymbolAr = this.SymbolAr;
			_tmp.SymbolEn = this.SymbolEn;
			_tmp.GradOrder = this.GradOrder;
			_tmp.MinRate = this.MinRate;
			_tmp.MaxRate = this.MaxRate;
			_tmp.GsCodePassFailId = this.GsCodePassFailId;
			_tmp.Points = this.Points;
			_tmp.MinPrcent = this.MinPrcent;
			_tmp.MaxPrcent = this.MaxPrcent;
			
			#region Source Parent Composite Entities
			if (this.EdCodeGradingIdSource != null)
				_tmp.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource) as EdCodeGrading;
			if (this.EntPolicyGradingHdrIdSource != null)
				_tmp.EntPolicyGradingHdrIdSource = MakeCopyOf(this.EntPolicyGradingHdrIdSource) as EntPolicyGradingHdr;
			if (this.GsCodePassFailIdSource != null)
				_tmp.GsCodePassFailIdSource = MakeCopyOf(this.GsCodePassFailIdSource) as GsCodePassFail;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EntPolicyGradingDtlEntityData _tmp = new EntPolicyGradingDtlEntityData();
						
			_tmp.EntPolicyGradingDtlId = this.EntPolicyGradingDtlId;
			_tmp.OriginalEntPolicyGradingDtlId = this.OriginalEntPolicyGradingDtlId;
			
			_tmp.EntPolicyGradingHdrId = this.EntPolicyGradingHdrId;
			_tmp.EdCodeGradingId = this.EdCodeGradingId;
			_tmp.DescrAr = this.DescrAr;
			_tmp.DescrEn = this.DescrEn;
			_tmp.GradCode = this.GradCode;
			_tmp.SymbolAr = this.SymbolAr;
			_tmp.SymbolEn = this.SymbolEn;
			_tmp.GradOrder = this.GradOrder;
			_tmp.MinRate = this.MinRate;
			_tmp.MaxRate = this.MaxRate;
			_tmp.GsCodePassFailId = this.GsCodePassFailId;
			_tmp.Points = this.Points;
			_tmp.MinPrcent = this.MinPrcent;
			_tmp.MaxPrcent = this.MaxPrcent;
			
			#region Source Parent Composite Entities
			if (this.EdCodeGradingIdSource != null && existingCopies.Contains(this.EdCodeGradingIdSource))
				_tmp.EdCodeGradingIdSource = existingCopies[this.EdCodeGradingIdSource] as EdCodeGrading;
			else
				_tmp.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource, existingCopies) as EdCodeGrading;
			if (this.EntPolicyGradingHdrIdSource != null && existingCopies.Contains(this.EntPolicyGradingHdrIdSource))
				_tmp.EntPolicyGradingHdrIdSource = existingCopies[this.EntPolicyGradingHdrIdSource] as EntPolicyGradingHdr;
			else
				_tmp.EntPolicyGradingHdrIdSource = MakeCopyOf(this.EntPolicyGradingHdrIdSource, existingCopies) as EntPolicyGradingHdr;
			if (this.GsCodePassFailIdSource != null && existingCopies.Contains(this.GsCodePassFailIdSource))
				_tmp.GsCodePassFailIdSource = existingCopies[this.GsCodePassFailIdSource] as GsCodePassFail;
			else
				_tmp.GsCodePassFailIdSource = MakeCopyOf(this.GsCodePassFailIdSource, existingCopies) as GsCodePassFail;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntPolicyGradingDtlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EntPolicyGradingDtlColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntPolicyGradingDtlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EntPolicyGradingDtlColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntPolicyGradingDtlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EntPolicyGradingDtlColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EntPolicyGradingDtlEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EntPolicyGradingDtlEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EntPolicyGradingDtlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EntPolicyGradingDtlColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EntPolicyGradingDtlEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EntPolicyGradingDtlEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EntPolicyGradingDtlEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EntPolicyGradingDtl"/> object.
	/// </remarks>
	public class EntPolicyGradingDtlEventArgs : System.EventArgs
	{
		private EntPolicyGradingDtlColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EntPolicyGradingDtlEventArgs class.
		///</summary>
		public EntPolicyGradingDtlEventArgs(EntPolicyGradingDtlColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EntPolicyGradingDtlEventArgs class.
		///</summary>
		public EntPolicyGradingDtlEventArgs(EntPolicyGradingDtlColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EntPolicyGradingDtlColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EntPolicyGradingDtlColumn" />
		public EntPolicyGradingDtlColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EntPolicyGradingDtl related events.
	///</summary>
	public delegate void EntPolicyGradingDtlEventHandler(object sender, EntPolicyGradingDtlEventArgs e);
	
	#region EntPolicyGradingDtlComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EntPolicyGradingDtlComparer : System.Collections.Generic.IComparer<EntPolicyGradingDtl>
	{
		EntPolicyGradingDtlColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EntPolicyGradingDtlComparer"/> class.
        /// </summary>
		public EntPolicyGradingDtlComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EntPolicyGradingDtlComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EntPolicyGradingDtlComparer(EntPolicyGradingDtlColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EntPolicyGradingDtl"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EntPolicyGradingDtl"/> to compare.</param>
        /// <param name="b">The second <c>EntPolicyGradingDtl</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EntPolicyGradingDtl a, EntPolicyGradingDtl b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EntPolicyGradingDtl entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EntPolicyGradingDtl a, EntPolicyGradingDtl b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EntPolicyGradingDtlColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EntPolicyGradingDtlKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EntPolicyGradingDtl"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EntPolicyGradingDtlKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingDtlKey class.
		/// </summary>
		public EntPolicyGradingDtlKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingDtlKey class.
		/// </summary>
		public EntPolicyGradingDtlKey(EntPolicyGradingDtlBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EntPolicyGradingDtlId = entity.EntPolicyGradingDtlId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EntPolicyGradingDtlKey class.
		/// </summary>
		public EntPolicyGradingDtlKey(System.Decimal _entPolicyGradingDtlId)
		{
			#region Init Properties

			this.EntPolicyGradingDtlId = _entPolicyGradingDtlId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EntPolicyGradingDtlBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EntPolicyGradingDtlBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EntPolicyGradingDtlId property
		private System.Decimal _entPolicyGradingDtlId;
		
		/// <summary>
		/// Gets or sets the EntPolicyGradingDtlId property.
		/// </summary>
		public System.Decimal EntPolicyGradingDtlId
		{
			get { return _entPolicyGradingDtlId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EntPolicyGradingDtlId = value;
				
				_entPolicyGradingDtlId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EntPolicyGradingDtlId = ( values["EntPolicyGradingDtlId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EntPolicyGradingDtlId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EntPolicyGradingDtlId", EntPolicyGradingDtlId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EntPolicyGradingDtlId: {0}{1}",
								EntPolicyGradingDtlId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EntPolicyGradingDtlColumn Enum
	
	/// <summary>
	/// Enumerate the EntPolicyGradingDtl columns.
	/// </summary>
	[Serializable]
	public enum EntPolicyGradingDtlColumn : int
	{
		/// <summary>
		/// EntPolicyGradingDtlId : 
		/// </summary>
		[EnumTextValue("ENT_POLICY_GRADING_DTL_ID")]
		[ColumnEnum("ENT_POLICY_GRADING_DTL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EntPolicyGradingDtlId = 1,
		/// <summary>
		/// EntPolicyGradingHdrId : 
		/// </summary>
		[EnumTextValue("ENT_POLICY_GRADING_HDR_ID")]
		[ColumnEnum("ENT_POLICY_GRADING_HDR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EntPolicyGradingHdrId = 2,
		/// <summary>
		/// EdCodeGradingId : 
		/// </summary>
		[EnumTextValue("ED_CODE_GRADING_ID")]
		[ColumnEnum("ED_CODE_GRADING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeGradingId = 3,
		/// <summary>
		/// DescrAr : 
		/// </summary>
		[EnumTextValue("DESCR_AR")]
		[ColumnEnum("DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		DescrAr = 4,
		/// <summary>
		/// DescrEn : 
		/// </summary>
		[EnumTextValue("DESCR_EN")]
		[ColumnEnum("DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		DescrEn = 5,
		/// <summary>
		/// GradCode : 
		/// </summary>
		[EnumTextValue("GRAD_CODE")]
		[ColumnEnum("GRAD_CODE", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		GradCode = 6,
		/// <summary>
		/// SymbolAr : 
		/// </summary>
		[EnumTextValue("SYMBOL_AR")]
		[ColumnEnum("SYMBOL_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		SymbolAr = 7,
		/// <summary>
		/// SymbolEn : 
		/// </summary>
		[EnumTextValue("SYMBOL_EN")]
		[ColumnEnum("SYMBOL_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		SymbolEn = 8,
		/// <summary>
		/// GradOrder : 
		/// </summary>
		[EnumTextValue("GRAD_ORDER")]
		[ColumnEnum("GRAD_ORDER", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GradOrder = 9,
		/// <summary>
		/// MinRate : النقاط او النسبة
		/// </summary>
		[EnumTextValue("MIN_RATE")]
		[ColumnEnum("MIN_RATE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MinRate = 10,
		/// <summary>
		/// MaxRate : 
		/// </summary>
		[EnumTextValue("MAX_RATE")]
		[ColumnEnum("MAX_RATE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MaxRate = 11,
		/// <summary>
		/// GsCodePassFailId : 
		/// </summary>
		[EnumTextValue("GS_CODE_PASS_FAIL_ID")]
		[ColumnEnum("GS_CODE_PASS_FAIL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		GsCodePassFailId = 12,
		/// <summary>
		/// Points : 
		/// </summary>
		[EnumTextValue("POINTS")]
		[ColumnEnum("POINTS", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Points = 13,
		/// <summary>
		/// MinPrcent :    ERU , ECU  النسبة
		/// </summary>
		[EnumTextValue("MIN_PRCENT")]
		[ColumnEnum("MIN_PRCENT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MinPrcent = 14,
		/// <summary>
		/// MaxPrcent :    ERU , ECU   النسبة
		/// </summary>
		[EnumTextValue("MAX_PRCENT")]
		[ColumnEnum("MAX_PRCENT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MaxPrcent = 15
	}//End enum

	#endregion EntPolicyGradingDtlColumn Enum

} // end namespace
