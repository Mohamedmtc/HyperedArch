
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SvMessage.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SV_MESSAGE' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SvMessageBase : EntityBase, ISvMessage, IEntityId<SvMessageKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SvMessageEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SvMessageEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SvMessageEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SvMessage> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SvMessageEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SvMessageEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SvMessageBase"/> instance.
		///</summary>
		public SvMessageBase()
		{
			this.entityData = new SvMessageEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SvMessageBase"/> instance.
		///</summary>
		///<param name="_svMessageId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_msgContent"></param>
		///<param name="_msgDate"></param>
		///<param name="_msgSubject"></param>
		///<param name="_admApplicantId"></param>
		///<param name="_deleteFlg"></param>
		///<param name="_seUserAccntId"></param>
		///<param name="_notifyFlg">notification at home page</param>
		///<param name="_inboxFlg">appear in inbox</param>
		///<param name="_autoFlg">NU</param>
		///<param name="_svAutoMsgTmpltId"></param>
		public SvMessageBase(System.Decimal _svMessageId, System.Decimal _edAcadYearId, System.Decimal _edCodeSemesterId, 
			System.String _msgContent, System.DateTime _msgDate, System.String _msgSubject, System.Decimal? _admApplicantId, 
			System.Decimal? _deleteFlg, System.Decimal? _seUserAccntId, System.Boolean? _notifyFlg, System.Boolean? _inboxFlg, 
			System.Boolean? _autoFlg, System.Decimal? _svAutoMsgTmpltId)
		{
			this.entityData = new SvMessageEntityData();
			this.backupData = null;

			this.SvMessageId = _svMessageId;
			this.EdAcadYearId = _edAcadYearId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.MsgContent = _msgContent;
			this.MsgDate = _msgDate;
			this.MsgSubject = _msgSubject;
			this.AdmApplicantId = _admApplicantId;
			this.DeleteFlg = _deleteFlg;
			this.SeUserAccntId = _seUserAccntId;
			this.NotifyFlg = _notifyFlg;
			this.InboxFlg = _inboxFlg;
			this.AutoFlg = _autoFlg;
			this.SvAutoMsgTmpltId = _svAutoMsgTmpltId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SvMessage"/> instance.
		///</summary>
		///<param name="_svMessageId"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId"></param>
		///<param name="_msgContent"></param>
		///<param name="_msgDate"></param>
		///<param name="_msgSubject"></param>
		///<param name="_admApplicantId"></param>
		///<param name="_deleteFlg"></param>
		///<param name="_seUserAccntId"></param>
		///<param name="_notifyFlg">notification at home page</param>
		///<param name="_inboxFlg">appear in inbox</param>
		///<param name="_autoFlg">NU</param>
		///<param name="_svAutoMsgTmpltId"></param>
		public static SvMessage CreateSvMessage(System.Decimal _svMessageId, System.Decimal _edAcadYearId, System.Decimal _edCodeSemesterId, 
			System.String _msgContent, System.DateTime _msgDate, System.String _msgSubject, System.Decimal? _admApplicantId, 
			System.Decimal? _deleteFlg, System.Decimal? _seUserAccntId, System.Boolean? _notifyFlg, System.Boolean? _inboxFlg, 
			System.Boolean? _autoFlg, System.Decimal? _svAutoMsgTmpltId)
		{
			SvMessage newSvMessage = new SvMessage();
			newSvMessage.SvMessageId = _svMessageId;
			newSvMessage.EdAcadYearId = _edAcadYearId;
			newSvMessage.EdCodeSemesterId = _edCodeSemesterId;
			newSvMessage.MsgContent = _msgContent;
			newSvMessage.MsgDate = _msgDate;
			newSvMessage.MsgSubject = _msgSubject;
			newSvMessage.AdmApplicantId = _admApplicantId;
			newSvMessage.DeleteFlg = _deleteFlg;
			newSvMessage.SeUserAccntId = _seUserAccntId;
			newSvMessage.NotifyFlg = _notifyFlg;
			newSvMessage.InboxFlg = _inboxFlg;
			newSvMessage.AutoFlg = _autoFlg;
			newSvMessage.SvAutoMsgTmpltId = _svAutoMsgTmpltId;
			return newSvMessage;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SvMessageId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SvMessageId
		{
			get
			{
				return this.entityData.SvMessageId; 
			}
			
			set
			{
				if (this.entityData.SvMessageId == value)
					return;
					
				OnColumnChanging(SvMessageColumn.SvMessageId, this.entityData.SvMessageId);
				this.entityData.SvMessageId = value;
				this.EntityId.SvMessageId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvMessageColumn.SvMessageId, this.entityData.SvMessageId);
				OnPropertyChanged("SvMessageId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SV_MESSAGE_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SV_MESSAGE_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSvMessageId
		{
			get { return this.entityData.OriginalSvMessageId; }
			set { this.entityData.OriginalSvMessageId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(SvMessageColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvMessageColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(SvMessageColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvMessageColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MsgContent property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.String MsgContent
		{
			get
			{
				return this.entityData.MsgContent; 
			}
			
			set
			{
				if (this.entityData.MsgContent == value)
					return;
					
				OnColumnChanging(SvMessageColumn.MsgContent, this.entityData.MsgContent);
				this.entityData.MsgContent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvMessageColumn.MsgContent, this.entityData.MsgContent);
				OnPropertyChanged("MsgContent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MsgDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime MsgDate
		{
			get
			{
				return this.entityData.MsgDate; 
			}
			
			set
			{
				if (this.entityData.MsgDate == value)
					return;
					
				OnColumnChanging(SvMessageColumn.MsgDate, this.entityData.MsgDate);
				this.entityData.MsgDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvMessageColumn.MsgDate, this.entityData.MsgDate);
				OnPropertyChanged("MsgDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MsgSubject property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String MsgSubject
		{
			get
			{
				return this.entityData.MsgSubject; 
			}
			
			set
			{
				if (this.entityData.MsgSubject == value)
					return;
					
				OnColumnChanging(SvMessageColumn.MsgSubject, this.entityData.MsgSubject);
				this.entityData.MsgSubject = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvMessageColumn.MsgSubject, this.entityData.MsgSubject);
				OnPropertyChanged("MsgSubject");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmApplicantId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdmApplicantIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdmApplicantId
		{
			get
			{
				return this.entityData.AdmApplicantId; 
			}
			
			set
			{
				if (this.entityData.AdmApplicantId == value)
					return;
					
				OnColumnChanging(SvMessageColumn.AdmApplicantId, this.entityData.AdmApplicantId);
				this.entityData.AdmApplicantId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvMessageColumn.AdmApplicantId, this.entityData.AdmApplicantId);
				OnPropertyChanged("AdmApplicantId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DeleteFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDeleteFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DeleteFlg
		{
			get
			{
				return this.entityData.DeleteFlg; 
			}
			
			set
			{
				if (this.entityData.DeleteFlg == value)
					return;
					
				OnColumnChanging(SvMessageColumn.DeleteFlg, this.entityData.DeleteFlg);
				this.entityData.DeleteFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvMessageColumn.DeleteFlg, this.entityData.DeleteFlg);
				OnPropertyChanged("DeleteFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserAccntId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserAccntIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserAccntId
		{
			get
			{
				return this.entityData.SeUserAccntId; 
			}
			
			set
			{
				if (this.entityData.SeUserAccntId == value)
					return;
					
				OnColumnChanging(SvMessageColumn.SeUserAccntId, this.entityData.SeUserAccntId);
				this.entityData.SeUserAccntId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvMessageColumn.SeUserAccntId, this.entityData.SeUserAccntId);
				OnPropertyChanged("SeUserAccntId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NotifyFlg property. 
		///		notification at home page
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsNotifyFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"notification at home page"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? NotifyFlg
		{
			get
			{
				return this.entityData.NotifyFlg; 
			}
			
			set
			{
				if (this.entityData.NotifyFlg == value)
					return;
					
				OnColumnChanging(SvMessageColumn.NotifyFlg, this.entityData.NotifyFlg);
				this.entityData.NotifyFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvMessageColumn.NotifyFlg, this.entityData.NotifyFlg);
				OnPropertyChanged("NotifyFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InboxFlg property. 
		///		appear in inbox
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsInboxFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"appear in inbox"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? InboxFlg
		{
			get
			{
				return this.entityData.InboxFlg; 
			}
			
			set
			{
				if (this.entityData.InboxFlg == value)
					return;
					
				OnColumnChanging(SvMessageColumn.InboxFlg, this.entityData.InboxFlg);
				this.entityData.InboxFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvMessageColumn.InboxFlg, this.entityData.InboxFlg);
				OnPropertyChanged("InboxFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AutoFlg property. 
		///		NU
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsAutoFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"NU"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? AutoFlg
		{
			get
			{
				return this.entityData.AutoFlg; 
			}
			
			set
			{
				if (this.entityData.AutoFlg == value)
					return;
					
				OnColumnChanging(SvMessageColumn.AutoFlg, this.entityData.AutoFlg);
				this.entityData.AutoFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvMessageColumn.AutoFlg, this.entityData.AutoFlg);
				OnPropertyChanged("AutoFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SvAutoMsgTmpltId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSvAutoMsgTmpltIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SvAutoMsgTmpltId
		{
			get
			{
				return this.entityData.SvAutoMsgTmpltId; 
			}
			
			set
			{
				if (this.entityData.SvAutoMsgTmpltId == value)
					return;
					
				OnColumnChanging(SvMessageColumn.SvAutoMsgTmpltId, this.entityData.SvAutoMsgTmpltId);
				this.entityData.SvAutoMsgTmpltId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvMessageColumn.SvAutoMsgTmpltId, this.entityData.SvAutoMsgTmpltId);
				OnPropertyChanged("SvAutoMsgTmpltId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdmApplicant"/>.
		/// </summary>
		/// <value>The source AdmApplicant for AdmApplicantId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmApplicant AdmApplicantIdSource
      	{
            get { return entityData.AdmApplicantIdSource; }
            set { entityData.AdmApplicantIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeUserAccnt"/>.
		/// </summary>
		/// <value>The source SeUserAccnt for SeUserAccntId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeUserAccnt SeUserAccntIdSource
      	{
            get { return entityData.SeUserAccntIdSource; }
            set { entityData.SeUserAccntIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SvAutoMsgTmplt"/>.
		/// </summary>
		/// <value>The source SvAutoMsgTmplt for SvAutoMsgTmpltId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SvAutoMsgTmplt SvAutoMsgTmpltIdSource
      	{
            get { return entityData.SvAutoMsgTmpltIdSource; }
            set { entityData.SvAutoMsgTmpltIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of GsAttchdDoc objects
		///	which are related to this object through the relation FK_GS_ATTCHD_DOC_SV_MESSAGE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GsAttchdDoc> GsAttchdDocCollection
		{
			get { return entityData.GsAttchdDocCollection; }
			set { entityData.GsAttchdDocCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SvUserMessage objects
		///	which are related to this object through the relation FK_SV_USER_MESSAGE_SV_MESSAGE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SvUserMessage> SvUserMessageCollection
		{
			get { return entityData.SvUserMessageCollection; }
			set { entityData.SvUserMessageCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MsgContent", "Msg Content"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MsgSubject", "Msg Subject", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SV_MESSAGE"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SV_MESSAGE_ID", "ED_ACAD_YEAR_ID", "ED_CODE_SEMESTER_ID", "MSG_CONTENT", "MSG_DATE", "MSG_SUBJECT", "ADM_APPLICANT_ID", "DELETE_FLG", "SE_USER_ACCNT_ID", "NOTIFY_FLG", "INBOX_FLG", "AUTO_FLG", "SV_AUTO_MSG_TMPLT_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SvMessageEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SvMessage) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SvMessage>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SvMessage);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SvMessage Entity 
		///</summary>
		protected virtual SvMessage Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SvMessage copy = new SvMessage();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SvMessageId = this.SvMessageId;
					copy.OriginalSvMessageId = this.OriginalSvMessageId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.MsgContent = this.MsgContent;
				copy.MsgDate = this.MsgDate;
				copy.MsgSubject = this.MsgSubject;
				copy.AdmApplicantId = this.AdmApplicantId;
				copy.DeleteFlg = this.DeleteFlg;
				copy.SeUserAccntId = this.SeUserAccntId;
				copy.NotifyFlg = this.NotifyFlg;
				copy.InboxFlg = this.InboxFlg;
				copy.AutoFlg = this.AutoFlg;
				copy.SvAutoMsgTmpltId = this.SvAutoMsgTmpltId;
			
			if (this.AdmApplicantIdSource != null && existingCopies.Contains(this.AdmApplicantIdSource))
				copy.AdmApplicantIdSource = existingCopies[this.AdmApplicantIdSource] as AdmApplicant;
			else
				copy.AdmApplicantIdSource = MakeCopyOf(this.AdmApplicantIdSource, existingCopies) as AdmApplicant;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.SeUserAccntIdSource != null && existingCopies.Contains(this.SeUserAccntIdSource))
				copy.SeUserAccntIdSource = existingCopies[this.SeUserAccntIdSource] as SeUserAccnt;
			else
				copy.SeUserAccntIdSource = MakeCopyOf(this.SeUserAccntIdSource, existingCopies) as SeUserAccnt;
			if (this.SvAutoMsgTmpltIdSource != null && existingCopies.Contains(this.SvAutoMsgTmpltIdSource))
				copy.SvAutoMsgTmpltIdSource = existingCopies[this.SvAutoMsgTmpltIdSource] as SvAutoMsgTmplt;
			else
				copy.SvAutoMsgTmpltIdSource = MakeCopyOf(this.SvAutoMsgTmpltIdSource, existingCopies) as SvAutoMsgTmplt;
		
			//deep copy nested objects
			copy.GsAttchdDocCollection = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollection, existingCopies); 
			copy.SvUserMessageCollection = (TList<SvUserMessage>) MakeCopyOf(this.SvUserMessageCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SvMessage Entity 
		///</summary>
		public virtual SvMessage Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SvMessage Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SvMessage DeepCopy()
		{
			return EntityHelper.Clone<SvMessage>(this as SvMessage);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SvMessageEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SvMessageEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SvMessageEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SvMessageColumn column)
		{
			switch(column)
			{
					case SvMessageColumn.SvMessageId:
					return entityData.SvMessageId != _originalData.SvMessageId;
					case SvMessageColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case SvMessageColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case SvMessageColumn.MsgContent:
					return entityData.MsgContent != _originalData.MsgContent;
					case SvMessageColumn.MsgDate:
					return entityData.MsgDate != _originalData.MsgDate;
					case SvMessageColumn.MsgSubject:
					return entityData.MsgSubject != _originalData.MsgSubject;
					case SvMessageColumn.AdmApplicantId:
					return entityData.AdmApplicantId != _originalData.AdmApplicantId;
					case SvMessageColumn.DeleteFlg:
					return entityData.DeleteFlg != _originalData.DeleteFlg;
					case SvMessageColumn.SeUserAccntId:
					return entityData.SeUserAccntId != _originalData.SeUserAccntId;
					case SvMessageColumn.NotifyFlg:
					return entityData.NotifyFlg != _originalData.NotifyFlg;
					case SvMessageColumn.InboxFlg:
					return entityData.InboxFlg != _originalData.InboxFlg;
					case SvMessageColumn.AutoFlg:
					return entityData.AutoFlg != _originalData.AutoFlg;
					case SvMessageColumn.SvAutoMsgTmpltId:
					return entityData.SvAutoMsgTmpltId != _originalData.SvAutoMsgTmpltId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SvMessageColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SvMessageId != _originalData.SvMessageId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.MsgContent != _originalData.MsgContent;
			result = result || entityData.MsgDate != _originalData.MsgDate;
			result = result || entityData.MsgSubject != _originalData.MsgSubject;
			result = result || entityData.AdmApplicantId != _originalData.AdmApplicantId;
			result = result || entityData.DeleteFlg != _originalData.DeleteFlg;
			result = result || entityData.SeUserAccntId != _originalData.SeUserAccntId;
			result = result || entityData.NotifyFlg != _originalData.NotifyFlg;
			result = result || entityData.InboxFlg != _originalData.InboxFlg;
			result = result || entityData.AutoFlg != _originalData.AutoFlg;
			result = result || entityData.SvAutoMsgTmpltId != _originalData.SvAutoMsgTmpltId;
			return result;
		}	
		
		///<summary>
		///  Returns a SvMessage Entity with the original data.
		///</summary>
		public SvMessage GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSvMessage(
				_originalData.SvMessageId,
				_originalData.EdAcadYearId,
				_originalData.EdCodeSemesterId,
				_originalData.MsgContent,
				_originalData.MsgDate,
				_originalData.MsgSubject,
				_originalData.AdmApplicantId,
				_originalData.DeleteFlg,
				_originalData.SeUserAccntId,
				_originalData.NotifyFlg,
				_originalData.InboxFlg,
				_originalData.AutoFlg,
				_originalData.SvAutoMsgTmpltId
				);
				
			return (SvMessage)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SvMessageBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SvMessageBase)
				return ValueEquals(this, (SvMessageBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SvMessageBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SvMessageId.GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					this.EdCodeSemesterId.GetHashCode() ^ 
					this.MsgContent.GetHashCode() ^ 
					this.MsgDate.GetHashCode() ^ 
					((this.MsgSubject == null) ? string.Empty : this.MsgSubject.ToString()).GetHashCode() ^ 
					((this.AdmApplicantId == null) ? string.Empty : this.AdmApplicantId.ToString()).GetHashCode() ^ 
					((this.DeleteFlg == null) ? string.Empty : this.DeleteFlg.ToString()).GetHashCode() ^ 
					((this.SeUserAccntId == null) ? string.Empty : this.SeUserAccntId.ToString()).GetHashCode() ^ 
					((this.NotifyFlg == null) ? string.Empty : this.NotifyFlg.ToString()).GetHashCode() ^ 
					((this.InboxFlg == null) ? string.Empty : this.InboxFlg.ToString()).GetHashCode() ^ 
					((this.AutoFlg == null) ? string.Empty : this.AutoFlg.ToString()).GetHashCode() ^ 
					((this.SvAutoMsgTmpltId == null) ? string.Empty : this.SvAutoMsgTmpltId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SvMessageBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SvMessageBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SvMessageBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SvMessageBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SvMessageBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SvMessageBase Object1, SvMessageBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SvMessageId != Object2.SvMessageId)
				equal = false;
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
				equal = false;
			if (Object1.MsgContent != Object2.MsgContent)
				equal = false;
			if (Object1.MsgDate != Object2.MsgDate)
				equal = false;
			if ( Object1.MsgSubject != null && Object2.MsgSubject != null )
			{
				if (Object1.MsgSubject != Object2.MsgSubject)
					equal = false;
			}
			else if (Object1.MsgSubject == null ^ Object2.MsgSubject == null )
			{
				equal = false;
			}
			if ( Object1.AdmApplicantId != null && Object2.AdmApplicantId != null )
			{
				if (Object1.AdmApplicantId != Object2.AdmApplicantId)
					equal = false;
			}
			else if (Object1.AdmApplicantId == null ^ Object2.AdmApplicantId == null )
			{
				equal = false;
			}
			if ( Object1.DeleteFlg != null && Object2.DeleteFlg != null )
			{
				if (Object1.DeleteFlg != Object2.DeleteFlg)
					equal = false;
			}
			else if (Object1.DeleteFlg == null ^ Object2.DeleteFlg == null )
			{
				equal = false;
			}
			if ( Object1.SeUserAccntId != null && Object2.SeUserAccntId != null )
			{
				if (Object1.SeUserAccntId != Object2.SeUserAccntId)
					equal = false;
			}
			else if (Object1.SeUserAccntId == null ^ Object2.SeUserAccntId == null )
			{
				equal = false;
			}
			if ( Object1.NotifyFlg != null && Object2.NotifyFlg != null )
			{
				if (Object1.NotifyFlg != Object2.NotifyFlg)
					equal = false;
			}
			else if (Object1.NotifyFlg == null ^ Object2.NotifyFlg == null )
			{
				equal = false;
			}
			if ( Object1.InboxFlg != null && Object2.InboxFlg != null )
			{
				if (Object1.InboxFlg != Object2.InboxFlg)
					equal = false;
			}
			else if (Object1.InboxFlg == null ^ Object2.InboxFlg == null )
			{
				equal = false;
			}
			if ( Object1.AutoFlg != null && Object2.AutoFlg != null )
			{
				if (Object1.AutoFlg != Object2.AutoFlg)
					equal = false;
			}
			else if (Object1.AutoFlg == null ^ Object2.AutoFlg == null )
			{
				equal = false;
			}
			if ( Object1.SvAutoMsgTmpltId != null && Object2.SvAutoMsgTmpltId != null )
			{
				if (Object1.SvAutoMsgTmpltId != Object2.SvAutoMsgTmpltId)
					equal = false;
			}
			else if (Object1.SvAutoMsgTmpltId == null ^ Object2.SvAutoMsgTmpltId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SvMessageBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SvMessageComparer GetComparer()
        {
            return new SvMessageComparer();
        }
        */

        // Comparer delegates back to SvMessage
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SvMessage rhs, SvMessageColumn which)
        {
            switch (which)
            {
            	
            	
            	case SvMessageColumn.SvMessageId:
            		return this.SvMessageId.CompareTo(rhs.SvMessageId);
            		
            		                 
            	
            	
            	case SvMessageColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case SvMessageColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.CompareTo(rhs.EdCodeSemesterId);
            		
            		                 
            	
            	
            	case SvMessageColumn.MsgContent:
            		return this.MsgContent.CompareTo(rhs.MsgContent);
            		
            		                 
            	
            	
            	case SvMessageColumn.MsgDate:
            		return this.MsgDate.CompareTo(rhs.MsgDate);
            		
            		                 
            	
            	
            	case SvMessageColumn.MsgSubject:
            		return this.MsgSubject.CompareTo(rhs.MsgSubject);
            		
            		                 
            	
            	
            	case SvMessageColumn.AdmApplicantId:
            		return this.AdmApplicantId.Value.CompareTo(rhs.AdmApplicantId.Value);
            		
            		                 
            	
            	
            	case SvMessageColumn.DeleteFlg:
            		return this.DeleteFlg.Value.CompareTo(rhs.DeleteFlg.Value);
            		
            		                 
            	
            	
            	case SvMessageColumn.SeUserAccntId:
            		return this.SeUserAccntId.Value.CompareTo(rhs.SeUserAccntId.Value);
            		
            		                 
            	
            	
            	case SvMessageColumn.NotifyFlg:
            		return this.NotifyFlg.Value.CompareTo(rhs.NotifyFlg.Value);
            		
            		                 
            	
            	
            	case SvMessageColumn.InboxFlg:
            		return this.InboxFlg.Value.CompareTo(rhs.InboxFlg.Value);
            		
            		                 
            	
            	
            	case SvMessageColumn.AutoFlg:
            		return this.AutoFlg.Value.CompareTo(rhs.AutoFlg.Value);
            		
            		                 
            	
            	
            	case SvMessageColumn.SvAutoMsgTmpltId:
            		return this.SvAutoMsgTmpltId.Value.CompareTo(rhs.SvAutoMsgTmpltId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SvMessageKey> Members
		
		// member variable for the EntityId property
		private SvMessageKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SvMessageKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SvMessageKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SvMessage")
					.Append("|").Append( this.SvMessageId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{14}{13}- SvMessageId: {0}{13}- EdAcadYearId: {1}{13}- EdCodeSemesterId: {2}{13}- MsgContent: {3}{13}- MsgDate: {4}{13}- MsgSubject: {5}{13}- AdmApplicantId: {6}{13}- DeleteFlg: {7}{13}- SeUserAccntId: {8}{13}- NotifyFlg: {9}{13}- InboxFlg: {10}{13}- AutoFlg: {11}{13}- SvAutoMsgTmpltId: {12}{13}{15}", 
				this.SvMessageId,
				this.EdAcadYearId,
				this.EdCodeSemesterId,
				this.MsgContent,
				this.MsgDate,
				(this.MsgSubject == null) ? string.Empty : this.MsgSubject.ToString(),
				(this.AdmApplicantId == null) ? string.Empty : this.AdmApplicantId.ToString(),
				(this.DeleteFlg == null) ? string.Empty : this.DeleteFlg.ToString(),
				(this.SeUserAccntId == null) ? string.Empty : this.SeUserAccntId.ToString(),
				(this.NotifyFlg == null) ? string.Empty : this.NotifyFlg.ToString(),
				(this.InboxFlg == null) ? string.Empty : this.InboxFlg.ToString(),
				(this.AutoFlg == null) ? string.Empty : this.AutoFlg.ToString(),
				(this.SvAutoMsgTmpltId == null) ? string.Empty : this.SvAutoMsgTmpltId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SV_MESSAGE' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SvMessageEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SV_MESSAGE_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SV_MESSAGE"</remarks>
		public System.Decimal SvMessageId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSvMessageId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : 
		/// </summary>
		public System.Decimal		  EdCodeSemesterId = 0.0m;
		
		/// <summary>
		/// MSG_CONTENT : 
		/// </summary>
		public System.String		  MsgContent = string.Empty;
		
		/// <summary>
		/// MSG_DATE : 
		/// </summary>
		public System.DateTime		  MsgDate = DateTime.MinValue;
		
		/// <summary>
		/// MSG_SUBJECT : 
		/// </summary>
		public System.String		  MsgSubject = null;
		
		/// <summary>
		/// ADM_APPLICANT_ID : 
		/// </summary>
		public System.Decimal?		  AdmApplicantId = null;
		
		/// <summary>
		/// DELETE_FLG : 
		/// </summary>
		public System.Decimal?		  DeleteFlg = null;
		
		/// <summary>
		/// SE_USER_ACCNT_ID : 
		/// </summary>
		public System.Decimal?		  SeUserAccntId = null;
		
		/// <summary>
		/// NOTIFY_FLG : notification at home page
		/// </summary>
		public System.Boolean?		  NotifyFlg = null;
		
		/// <summary>
		/// INBOX_FLG : appear in inbox
		/// </summary>
		public System.Boolean?		  InboxFlg = null;
		
		/// <summary>
		/// AUTO_FLG : NU
		/// </summary>
		public System.Boolean?		  AutoFlg = null;
		
		/// <summary>
		/// SV_AUTO_MSG_TMPLT_ID : 
		/// </summary>
		public System.Decimal?		  SvAutoMsgTmpltId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdmApplicant _admApplicantIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmApplicant"/>.
		/// </summary>
		/// <value>The source AdmApplicant for AdmApplicantId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmApplicant AdmApplicantIdSource
      	{
            get { return this._admApplicantIdSource; }
            set { this._admApplicantIdSource = value; }
      	}
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		private SeUserAccnt _seUserAccntIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeUserAccnt"/>.
		/// </summary>
		/// <value>The source SeUserAccnt for SeUserAccntId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeUserAccnt SeUserAccntIdSource
      	{
            get { return this._seUserAccntIdSource; }
            set { this._seUserAccntIdSource = value; }
      	}
		private SvAutoMsgTmplt _svAutoMsgTmpltIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SvAutoMsgTmplt"/>.
		/// </summary>
		/// <value>The source SvAutoMsgTmplt for SvAutoMsgTmpltId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SvAutoMsgTmplt SvAutoMsgTmpltIdSource
      	{
            get { return this._svAutoMsgTmpltIdSource; }
            set { this._svAutoMsgTmpltIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region GsAttchdDocCollection
		
		private TList<GsAttchdDoc> _gsAttchdDocSvMessageId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _gsAttchdDocSvMessageId
		/// </summary>
		
		public TList<GsAttchdDoc> GsAttchdDocCollection
		{
			get
			{
				if (_gsAttchdDocSvMessageId == null)
				{
				_gsAttchdDocSvMessageId = new TList<GsAttchdDoc>();
				}
	
				return _gsAttchdDocSvMessageId;
			}
			set { _gsAttchdDocSvMessageId = value; }
		}
		
		#endregion

		#region SvUserMessageCollection
		
		private TList<SvUserMessage> _svUserMessageSvMessageId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _svUserMessageSvMessageId
		/// </summary>
		
		public TList<SvUserMessage> SvUserMessageCollection
		{
			get
			{
				if (_svUserMessageSvMessageId == null)
				{
				_svUserMessageSvMessageId = new TList<SvUserMessage>();
				}
	
				return _svUserMessageSvMessageId;
			}
			set { _svUserMessageSvMessageId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SvMessageEntityData _tmp = new SvMessageEntityData();
						
			_tmp.SvMessageId = this.SvMessageId;
			_tmp.OriginalSvMessageId = this.OriginalSvMessageId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.MsgContent = this.MsgContent;
			_tmp.MsgDate = this.MsgDate;
			_tmp.MsgSubject = this.MsgSubject;
			_tmp.AdmApplicantId = this.AdmApplicantId;
			_tmp.DeleteFlg = this.DeleteFlg;
			_tmp.SeUserAccntId = this.SeUserAccntId;
			_tmp.NotifyFlg = this.NotifyFlg;
			_tmp.InboxFlg = this.InboxFlg;
			_tmp.AutoFlg = this.AutoFlg;
			_tmp.SvAutoMsgTmpltId = this.SvAutoMsgTmpltId;
			
			#region Source Parent Composite Entities
			if (this.AdmApplicantIdSource != null)
				_tmp.AdmApplicantIdSource = MakeCopyOf(this.AdmApplicantIdSource) as AdmApplicant;
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			if (this.SeUserAccntIdSource != null)
				_tmp.SeUserAccntIdSource = MakeCopyOf(this.SeUserAccntIdSource) as SeUserAccnt;
			if (this.SvAutoMsgTmpltIdSource != null)
				_tmp.SvAutoMsgTmpltIdSource = MakeCopyOf(this.SvAutoMsgTmpltIdSource) as SvAutoMsgTmplt;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._gsAttchdDocSvMessageId != null)
				_tmp.GsAttchdDocCollection = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollection); 
			if (this._svUserMessageSvMessageId != null)
				_tmp.SvUserMessageCollection = (TList<SvUserMessage>) MakeCopyOf(this.SvUserMessageCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SvMessageEntityData _tmp = new SvMessageEntityData();
						
			_tmp.SvMessageId = this.SvMessageId;
			_tmp.OriginalSvMessageId = this.OriginalSvMessageId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.MsgContent = this.MsgContent;
			_tmp.MsgDate = this.MsgDate;
			_tmp.MsgSubject = this.MsgSubject;
			_tmp.AdmApplicantId = this.AdmApplicantId;
			_tmp.DeleteFlg = this.DeleteFlg;
			_tmp.SeUserAccntId = this.SeUserAccntId;
			_tmp.NotifyFlg = this.NotifyFlg;
			_tmp.InboxFlg = this.InboxFlg;
			_tmp.AutoFlg = this.AutoFlg;
			_tmp.SvAutoMsgTmpltId = this.SvAutoMsgTmpltId;
			
			#region Source Parent Composite Entities
			if (this.AdmApplicantIdSource != null && existingCopies.Contains(this.AdmApplicantIdSource))
				_tmp.AdmApplicantIdSource = existingCopies[this.AdmApplicantIdSource] as AdmApplicant;
			else
				_tmp.AdmApplicantIdSource = MakeCopyOf(this.AdmApplicantIdSource, existingCopies) as AdmApplicant;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.SeUserAccntIdSource != null && existingCopies.Contains(this.SeUserAccntIdSource))
				_tmp.SeUserAccntIdSource = existingCopies[this.SeUserAccntIdSource] as SeUserAccnt;
			else
				_tmp.SeUserAccntIdSource = MakeCopyOf(this.SeUserAccntIdSource, existingCopies) as SeUserAccnt;
			if (this.SvAutoMsgTmpltIdSource != null && existingCopies.Contains(this.SvAutoMsgTmpltIdSource))
				_tmp.SvAutoMsgTmpltIdSource = existingCopies[this.SvAutoMsgTmpltIdSource] as SvAutoMsgTmplt;
			else
				_tmp.SvAutoMsgTmpltIdSource = MakeCopyOf(this.SvAutoMsgTmpltIdSource, existingCopies) as SvAutoMsgTmplt;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.GsAttchdDocCollection = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollection, existingCopies); 
			_tmp.SvUserMessageCollection = (TList<SvUserMessage>) MakeCopyOf(this.SvUserMessageCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvMessageColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SvMessageColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvMessageColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SvMessageColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvMessageColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SvMessageColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SvMessageEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SvMessageEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvMessageColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SvMessageColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SvMessageEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SvMessageEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SvMessageEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SvMessage"/> object.
	/// </remarks>
	public class SvMessageEventArgs : System.EventArgs
	{
		private SvMessageColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SvMessageEventArgs class.
		///</summary>
		public SvMessageEventArgs(SvMessageColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SvMessageEventArgs class.
		///</summary>
		public SvMessageEventArgs(SvMessageColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SvMessageColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SvMessageColumn" />
		public SvMessageColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SvMessage related events.
	///</summary>
	public delegate void SvMessageEventHandler(object sender, SvMessageEventArgs e);
	
	#region SvMessageComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SvMessageComparer : System.Collections.Generic.IComparer<SvMessage>
	{
		SvMessageColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SvMessageComparer"/> class.
        /// </summary>
		public SvMessageComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SvMessageComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SvMessageComparer(SvMessageColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SvMessage"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SvMessage"/> to compare.</param>
        /// <param name="b">The second <c>SvMessage</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SvMessage a, SvMessage b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SvMessage entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SvMessage a, SvMessage b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SvMessageColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SvMessageKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SvMessage"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SvMessageKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SvMessageKey class.
		/// </summary>
		public SvMessageKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SvMessageKey class.
		/// </summary>
		public SvMessageKey(SvMessageBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SvMessageId = entity.SvMessageId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SvMessageKey class.
		/// </summary>
		public SvMessageKey(System.Decimal _svMessageId)
		{
			#region Init Properties

			this.SvMessageId = _svMessageId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SvMessageBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SvMessageBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SvMessageId property
		private System.Decimal _svMessageId;
		
		/// <summary>
		/// Gets or sets the SvMessageId property.
		/// </summary>
		public System.Decimal SvMessageId
		{
			get { return _svMessageId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SvMessageId = value;
				
				_svMessageId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SvMessageId = ( values["SvMessageId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SvMessageId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SvMessageId", SvMessageId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SvMessageId: {0}{1}",
								SvMessageId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SvMessageColumn Enum
	
	/// <summary>
	/// Enumerate the SvMessage columns.
	/// </summary>
	[Serializable]
	public enum SvMessageColumn : int
	{
		/// <summary>
		/// SvMessageId : 
		/// </summary>
		[EnumTextValue("SV_MESSAGE_ID")]
		[ColumnEnum("SV_MESSAGE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SvMessageId = 1,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 2,
		/// <summary>
		/// EdCodeSemesterId : 
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCodeSemesterId = 3,
		/// <summary>
		/// MsgContent : 
		/// </summary>
		[EnumTextValue("MSG_CONTENT")]
		[ColumnEnum("MSG_CONTENT", typeof(System.String), System.Data.DbType.String, false, false, false)]
		MsgContent = 4,
		/// <summary>
		/// MsgDate : 
		/// </summary>
		[EnumTextValue("MSG_DATE")]
		[ColumnEnum("MSG_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		MsgDate = 5,
		/// <summary>
		/// MsgSubject : 
		/// </summary>
		[EnumTextValue("MSG_SUBJECT")]
		[ColumnEnum("MSG_SUBJECT", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		MsgSubject = 6,
		/// <summary>
		/// AdmApplicantId : 
		/// </summary>
		[EnumTextValue("ADM_APPLICANT_ID")]
		[ColumnEnum("ADM_APPLICANT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AdmApplicantId = 7,
		/// <summary>
		/// DeleteFlg : 
		/// </summary>
		[EnumTextValue("DELETE_FLG")]
		[ColumnEnum("DELETE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DeleteFlg = 8,
		/// <summary>
		/// SeUserAccntId : 
		/// </summary>
		[EnumTextValue("SE_USER_ACCNT_ID")]
		[ColumnEnum("SE_USER_ACCNT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserAccntId = 9,
		/// <summary>
		/// NotifyFlg : notification at home page
		/// </summary>
		[EnumTextValue("NOTIFY_FLG")]
		[ColumnEnum("NOTIFY_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		NotifyFlg = 10,
		/// <summary>
		/// InboxFlg : appear in inbox
		/// </summary>
		[EnumTextValue("INBOX_FLG")]
		[ColumnEnum("INBOX_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		InboxFlg = 11,
		/// <summary>
		/// AutoFlg : NU
		/// </summary>
		[EnumTextValue("AUTO_FLG")]
		[ColumnEnum("AUTO_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		AutoFlg = 12,
		/// <summary>
		/// SvAutoMsgTmpltId : 
		/// </summary>
		[EnumTextValue("SV_AUTO_MSG_TMPLT_ID")]
		[ColumnEnum("SV_AUTO_MSG_TMPLT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SvAutoMsgTmpltId = 13
	}//End enum

	#endregion SvMessageColumn Enum

} // end namespace
