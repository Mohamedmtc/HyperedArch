
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file GsComm.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'GS_COMM' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class GsCommBase : EntityBase, IGsComm, IEntityId<GsCommKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private GsCommEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private GsCommEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private GsCommEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<GsComm> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event GsCommEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event GsCommEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="GsCommBase"/> instance.
		///</summary>
		public GsCommBase()
		{
			this.entityData = new GsCommEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="GsCommBase"/> instance.
		///</summary>
		///<param name="_gsCommId">انشاء لجان الابحاث العلمية</param>
		///<param name="_commDate">XX</param>
		///<param name="_commNum">رقم اللجنه</param>
		///<param name="_commName">اسم اللجنه</param>
		///<param name="_commApprovedBy">XX</param>
		///<param name="_edAcadYearId">العام الدراسي</param>
		///<param name="_edSemesterId">XX</param>
		///<param name="_lawNo">XX</param>
		///<param name="_lawYear">XX</param>
		///<param name="_asFacultyInfoId">الكلية</param>
		///<param name="_entMainMajorId">التخصص الرئيسي</param>
		///<param name="_entMainMinorId">التخصص الفرعي</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_gsCommPurposeId">XX</param>
		///<param name="_commOnlineStat">XX</param>
		///<param name="_decisionImage">XX</param>
		///<param name="_copyTo">XX</param>
		///<param name="_commFolder">XX</param>
		///<param name="_commCloseDate">XX</param>
		///<param name="_commCloseFlg">XX =0</param>
		///<param name="_notes">ملاحظات</param>
		public GsCommBase(System.Decimal _gsCommId, System.DateTime? _commDate, System.String _commNum, 
			System.String _commName, System.Decimal? _commApprovedBy, System.Decimal _edAcadYearId, System.Decimal? _edSemesterId, 
			System.Decimal? _lawNo, System.Decimal? _lawYear, System.Decimal? _asFacultyInfoId, System.Decimal? _entMainMajorId, 
			System.Decimal? _entMainMinorId, System.Decimal? _seUserId, System.DateTime? _lastDate, System.Decimal? _gsCommPurposeId, 
			System.Decimal? _commOnlineStat, System.String _decisionImage, System.String _copyTo, System.String _commFolder, 
			System.DateTime? _commCloseDate, System.Decimal _commCloseFlg, System.String _notes)
		{
			this.entityData = new GsCommEntityData();
			this.backupData = null;

			this.GsCommId = _gsCommId;
			this.CommDate = _commDate;
			this.CommNum = _commNum;
			this.CommName = _commName;
			this.CommApprovedBy = _commApprovedBy;
			this.EdAcadYearId = _edAcadYearId;
			this.EdSemesterId = _edSemesterId;
			this.LawNo = _lawNo;
			this.LawYear = _lawYear;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.EntMainMajorId = _entMainMajorId;
			this.EntMainMinorId = _entMainMinorId;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
			this.GsCommPurposeId = _gsCommPurposeId;
			this.CommOnlineStat = _commOnlineStat;
			this.DecisionImage = _decisionImage;
			this.CopyTo = _copyTo;
			this.CommFolder = _commFolder;
			this.CommCloseDate = _commCloseDate;
			this.CommCloseFlg = _commCloseFlg;
			this.Notes = _notes;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="GsComm"/> instance.
		///</summary>
		///<param name="_gsCommId">انشاء لجان الابحاث العلمية</param>
		///<param name="_commDate">XX</param>
		///<param name="_commNum">رقم اللجنه</param>
		///<param name="_commName">اسم اللجنه</param>
		///<param name="_commApprovedBy">XX</param>
		///<param name="_edAcadYearId">العام الدراسي</param>
		///<param name="_edSemesterId">XX</param>
		///<param name="_lawNo">XX</param>
		///<param name="_lawYear">XX</param>
		///<param name="_asFacultyInfoId">الكلية</param>
		///<param name="_entMainMajorId">التخصص الرئيسي</param>
		///<param name="_entMainMinorId">التخصص الفرعي</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_gsCommPurposeId">XX</param>
		///<param name="_commOnlineStat">XX</param>
		///<param name="_decisionImage">XX</param>
		///<param name="_copyTo">XX</param>
		///<param name="_commFolder">XX</param>
		///<param name="_commCloseDate">XX</param>
		///<param name="_commCloseFlg">XX =0</param>
		///<param name="_notes">ملاحظات</param>
		public static GsComm CreateGsComm(System.Decimal _gsCommId, System.DateTime? _commDate, System.String _commNum, 
			System.String _commName, System.Decimal? _commApprovedBy, System.Decimal _edAcadYearId, System.Decimal? _edSemesterId, 
			System.Decimal? _lawNo, System.Decimal? _lawYear, System.Decimal? _asFacultyInfoId, System.Decimal? _entMainMajorId, 
			System.Decimal? _entMainMinorId, System.Decimal? _seUserId, System.DateTime? _lastDate, System.Decimal? _gsCommPurposeId, 
			System.Decimal? _commOnlineStat, System.String _decisionImage, System.String _copyTo, System.String _commFolder, 
			System.DateTime? _commCloseDate, System.Decimal _commCloseFlg, System.String _notes)
		{
			GsComm newGsComm = new GsComm();
			newGsComm.GsCommId = _gsCommId;
			newGsComm.CommDate = _commDate;
			newGsComm.CommNum = _commNum;
			newGsComm.CommName = _commName;
			newGsComm.CommApprovedBy = _commApprovedBy;
			newGsComm.EdAcadYearId = _edAcadYearId;
			newGsComm.EdSemesterId = _edSemesterId;
			newGsComm.LawNo = _lawNo;
			newGsComm.LawYear = _lawYear;
			newGsComm.AsFacultyInfoId = _asFacultyInfoId;
			newGsComm.EntMainMajorId = _entMainMajorId;
			newGsComm.EntMainMinorId = _entMainMinorId;
			newGsComm.SeUserId = _seUserId;
			newGsComm.LastDate = _lastDate;
			newGsComm.GsCommPurposeId = _gsCommPurposeId;
			newGsComm.CommOnlineStat = _commOnlineStat;
			newGsComm.DecisionImage = _decisionImage;
			newGsComm.CopyTo = _copyTo;
			newGsComm.CommFolder = _commFolder;
			newGsComm.CommCloseDate = _commCloseDate;
			newGsComm.CommCloseFlg = _commCloseFlg;
			newGsComm.Notes = _notes;
			return newGsComm;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the GsCommId property. 
		///		انشاء لجان الابحاث العلمية
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"انشاء لجان الابحاث العلمية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal GsCommId
		{
			get
			{
				return this.entityData.GsCommId; 
			}
			
			set
			{
				if (this.entityData.GsCommId == value)
					return;
					
				OnColumnChanging(GsCommColumn.GsCommId, this.entityData.GsCommId);
				this.entityData.GsCommId = value;
				this.EntityId.GsCommId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCommColumn.GsCommId, this.entityData.GsCommId);
				OnPropertyChanged("GsCommId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the GS_COMM_ID property.
		///		انشاء لجان الابحاث العلمية
		/// </summary>
		/// <remarks>This is the original value of the GS_COMM_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalGsCommId
		{
			get { return this.entityData.OriginalGsCommId; }
			set { this.entityData.OriginalGsCommId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the CommDate property. 
		///		XX
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCommDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CommDate
		{
			get
			{
				return this.entityData.CommDate; 
			}
			
			set
			{
				if (this.entityData.CommDate == value)
					return;
					
				OnColumnChanging(GsCommColumn.CommDate, this.entityData.CommDate);
				this.entityData.CommDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCommColumn.CommDate, this.entityData.CommDate);
				OnPropertyChanged("CommDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CommNum property. 
		///		رقم اللجنه
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"رقم اللجنه"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String CommNum
		{
			get
			{
				return this.entityData.CommNum; 
			}
			
			set
			{
				if (this.entityData.CommNum == value)
					return;
					
				OnColumnChanging(GsCommColumn.CommNum, this.entityData.CommNum);
				this.entityData.CommNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCommColumn.CommNum, this.entityData.CommNum);
				OnPropertyChanged("CommNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CommName property. 
		///		اسم اللجنه
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"اسم اللجنه"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String CommName
		{
			get
			{
				return this.entityData.CommName; 
			}
			
			set
			{
				if (this.entityData.CommName == value)
					return;
					
				OnColumnChanging(GsCommColumn.CommName, this.entityData.CommName);
				this.entityData.CommName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCommColumn.CommName, this.entityData.CommName);
				OnPropertyChanged("CommName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CommApprovedBy property. 
		///		XX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCommApprovedByNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CommApprovedBy
		{
			get
			{
				return this.entityData.CommApprovedBy; 
			}
			
			set
			{
				if (this.entityData.CommApprovedBy == value)
					return;
					
				OnColumnChanging(GsCommColumn.CommApprovedBy, this.entityData.CommApprovedBy);
				this.entityData.CommApprovedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCommColumn.CommApprovedBy, this.entityData.CommApprovedBy);
				OnPropertyChanged("CommApprovedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		العام الدراسي
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"العام الدراسي"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(GsCommColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCommColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdSemesterId property. 
		///		XX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdSemesterIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdSemesterId
		{
			get
			{
				return this.entityData.EdSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdSemesterId == value)
					return;
					
				OnColumnChanging(GsCommColumn.EdSemesterId, this.entityData.EdSemesterId);
				this.entityData.EdSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCommColumn.EdSemesterId, this.entityData.EdSemesterId);
				OnPropertyChanged("EdSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LawNo property. 
		///		XX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsLawNoNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? LawNo
		{
			get
			{
				return this.entityData.LawNo; 
			}
			
			set
			{
				if (this.entityData.LawNo == value)
					return;
					
				OnColumnChanging(GsCommColumn.LawNo, this.entityData.LawNo);
				this.entityData.LawNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCommColumn.LawNo, this.entityData.LawNo);
				OnPropertyChanged("LawNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LawYear property. 
		///		XX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsLawYearNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? LawYear
		{
			get
			{
				return this.entityData.LawYear; 
			}
			
			set
			{
				if (this.entityData.LawYear == value)
					return;
					
				OnColumnChanging(GsCommColumn.LawYear, this.entityData.LawYear);
				this.entityData.LawYear = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCommColumn.LawYear, this.entityData.LawYear);
				OnPropertyChanged("LawYear");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		الكلية
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"الكلية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(GsCommColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCommColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntMainMajorId property. 
		///		التخصص الرئيسي
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntMainMajorIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"التخصص الرئيسي"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntMainMajorId
		{
			get
			{
				return this.entityData.EntMainMajorId; 
			}
			
			set
			{
				if (this.entityData.EntMainMajorId == value)
					return;
					
				OnColumnChanging(GsCommColumn.EntMainMajorId, this.entityData.EntMainMajorId);
				this.entityData.EntMainMajorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCommColumn.EntMainMajorId, this.entityData.EntMainMajorId);
				OnPropertyChanged("EntMainMajorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntMainMinorId property. 
		///		التخصص الفرعي
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntMainMinorIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"التخصص الفرعي"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntMainMinorId
		{
			get
			{
				return this.entityData.EntMainMinorId; 
			}
			
			set
			{
				if (this.entityData.EntMainMinorId == value)
					return;
					
				OnColumnChanging(GsCommColumn.EntMainMinorId, this.entityData.EntMainMinorId);
				this.entityData.EntMainMinorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCommColumn.EntMainMinorId, this.entityData.EntMainMinorId);
				OnPropertyChanged("EntMainMinorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(GsCommColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCommColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(GsCommColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCommColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCommPurposeId property. 
		///		XX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCommPurposeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCommPurposeId
		{
			get
			{
				return this.entityData.GsCommPurposeId; 
			}
			
			set
			{
				if (this.entityData.GsCommPurposeId == value)
					return;
					
				OnColumnChanging(GsCommColumn.GsCommPurposeId, this.entityData.GsCommPurposeId);
				this.entityData.GsCommPurposeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCommColumn.GsCommPurposeId, this.entityData.GsCommPurposeId);
				OnPropertyChanged("GsCommPurposeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CommOnlineStat property. 
		///		XX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCommOnlineStatNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CommOnlineStat
		{
			get
			{
				return this.entityData.CommOnlineStat; 
			}
			
			set
			{
				if (this.entityData.CommOnlineStat == value)
					return;
					
				OnColumnChanging(GsCommColumn.CommOnlineStat, this.entityData.CommOnlineStat);
				this.entityData.CommOnlineStat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCommColumn.CommOnlineStat, this.entityData.CommOnlineStat);
				OnPropertyChanged("CommOnlineStat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DecisionImage property. 
		///		XX
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"XX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 350)]
		public virtual System.String DecisionImage
		{
			get
			{
				return this.entityData.DecisionImage; 
			}
			
			set
			{
				if (this.entityData.DecisionImage == value)
					return;
					
				OnColumnChanging(GsCommColumn.DecisionImage, this.entityData.DecisionImage);
				this.entityData.DecisionImage = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCommColumn.DecisionImage, this.entityData.DecisionImage);
				OnPropertyChanged("DecisionImage");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CopyTo property. 
		///		XX
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"XX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 350)]
		public virtual System.String CopyTo
		{
			get
			{
				return this.entityData.CopyTo; 
			}
			
			set
			{
				if (this.entityData.CopyTo == value)
					return;
					
				OnColumnChanging(GsCommColumn.CopyTo, this.entityData.CopyTo);
				this.entityData.CopyTo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCommColumn.CopyTo, this.entityData.CopyTo);
				OnPropertyChanged("CopyTo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CommFolder property. 
		///		XX
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"XX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 350)]
		public virtual System.String CommFolder
		{
			get
			{
				return this.entityData.CommFolder; 
			}
			
			set
			{
				if (this.entityData.CommFolder == value)
					return;
					
				OnColumnChanging(GsCommColumn.CommFolder, this.entityData.CommFolder);
				this.entityData.CommFolder = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCommColumn.CommFolder, this.entityData.CommFolder);
				OnPropertyChanged("CommFolder");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CommCloseDate property. 
		///		XX
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCommCloseDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CommCloseDate
		{
			get
			{
				return this.entityData.CommCloseDate; 
			}
			
			set
			{
				if (this.entityData.CommCloseDate == value)
					return;
					
				OnColumnChanging(GsCommColumn.CommCloseDate, this.entityData.CommCloseDate);
				this.entityData.CommCloseDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCommColumn.CommCloseDate, this.entityData.CommCloseDate);
				OnPropertyChanged("CommCloseDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CommCloseFlg property. 
		///		XX =0
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"XX =0"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal CommCloseFlg
		{
			get
			{
				return this.entityData.CommCloseFlg; 
			}
			
			set
			{
				if (this.entityData.CommCloseFlg == value)
					return;
					
				OnColumnChanging(GsCommColumn.CommCloseFlg, this.entityData.CommCloseFlg);
				this.entityData.CommCloseFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCommColumn.CommCloseFlg, this.entityData.CommCloseFlg);
				OnPropertyChanged("CommCloseFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		ملاحظات
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"ملاحظات"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(GsCommColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GsCommColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdSemesterIdSource
      	{
            get { return entityData.EdSemesterIdSource; }
            set { entityData.EdSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainMajorId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain EntMainMajorIdSource
      	{
            get { return entityData.EntMainMajorIdSource; }
            set { entityData.EntMainMajorIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainMinorId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain EntMainMinorIdSource
      	{
            get { return entityData.EntMainMinorIdSource; }
            set { entityData.EntMainMinorIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCommPurpose"/>.
		/// </summary>
		/// <value>The source GsCommPurpose for GsCommPurposeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCommPurpose GsCommPurposeIdSource
      	{
            get { return entityData.GsCommPurposeIdSource; }
            set { entityData.GsCommPurposeIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of GsCommRecom objects
		///	which are related to this object through the relation FK_GS_COMM_RECOM_GS_COMM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GsCommRecom> GsCommRecomCollection
		{
			get { return entityData.GsCommRecomCollection; }
			set { entityData.GsCommRecomCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of GsCommDutty objects
		///	which are related to this object through the relation FK_GS_COMM_DUTTY_GS_COMM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GsCommDutty> GsCommDuttyCollection
		{
			get { return entityData.GsCommDuttyCollection; }
			set { entityData.GsCommDuttyCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of GsCommStaff objects
		///	which are related to this object through the relation FK_GS_COMM_STAFF_GS_COMM
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GsCommStaff> GsCommStaffCollection
		{
			get { return entityData.GsCommStaffCollection; }
			set { entityData.GsCommStaffCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CommNum", "Comm Num", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CommName", "Comm Name", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DecisionImage", "Decision Image", 350));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CopyTo", "Copy To", 350));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CommFolder", "Comm Folder", 350));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "GS_COMM"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"GS_COMM_ID", "COMM_DATE", "COMM_NUM", "COMM_NAME", "COMM_APPROVED_BY", "ED_ACAD_YEAR_ID", "ED_SEMESTER_ID", "LAW_NO", "LAW_YEAR", "AS_FACULTY_INFO_ID", "ENT_MAIN_MAJOR_ID", "ENT_MAIN_MINOR_ID", "SE_USER_ID", "LAST_DATE", "GS_COMM_PURPOSE_ID", "COMM_ONLINE_STAT", "DECISION_IMAGE", "COPY_TO", "COMM_FOLDER", "COMM_CLOSE_DATE", "COMM_CLOSE_FLG", "NOTES"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as GsCommEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (GsComm) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<GsComm>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as GsComm);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed GsComm Entity 
		///</summary>
		protected virtual GsComm Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			GsComm copy = new GsComm();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.GsCommId = this.GsCommId;
					copy.OriginalGsCommId = this.OriginalGsCommId;
				copy.CommDate = this.CommDate;
				copy.CommNum = this.CommNum;
				copy.CommName = this.CommName;
				copy.CommApprovedBy = this.CommApprovedBy;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdSemesterId = this.EdSemesterId;
				copy.LawNo = this.LawNo;
				copy.LawYear = this.LawYear;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.EntMainMajorId = this.EntMainMajorId;
				copy.EntMainMinorId = this.EntMainMinorId;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
				copy.GsCommPurposeId = this.GsCommPurposeId;
				copy.CommOnlineStat = this.CommOnlineStat;
				copy.DecisionImage = this.DecisionImage;
				copy.CopyTo = this.CopyTo;
				copy.CommFolder = this.CommFolder;
				copy.CommCloseDate = this.CommCloseDate;
				copy.CommCloseFlg = this.CommCloseFlg;
				copy.Notes = this.Notes;
			
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdSemesterIdSource != null && existingCopies.Contains(this.EdSemesterIdSource))
				copy.EdSemesterIdSource = existingCopies[this.EdSemesterIdSource] as EdCodeSemester;
			else
				copy.EdSemesterIdSource = MakeCopyOf(this.EdSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EntMainMajorIdSource != null && existingCopies.Contains(this.EntMainMajorIdSource))
				copy.EntMainMajorIdSource = existingCopies[this.EntMainMajorIdSource] as EntityMain;
			else
				copy.EntMainMajorIdSource = MakeCopyOf(this.EntMainMajorIdSource, existingCopies) as EntityMain;
			if (this.EntMainMinorIdSource != null && existingCopies.Contains(this.EntMainMinorIdSource))
				copy.EntMainMinorIdSource = existingCopies[this.EntMainMinorIdSource] as EntityMain;
			else
				copy.EntMainMinorIdSource = MakeCopyOf(this.EntMainMinorIdSource, existingCopies) as EntityMain;
			if (this.GsCommPurposeIdSource != null && existingCopies.Contains(this.GsCommPurposeIdSource))
				copy.GsCommPurposeIdSource = existingCopies[this.GsCommPurposeIdSource] as GsCommPurpose;
			else
				copy.GsCommPurposeIdSource = MakeCopyOf(this.GsCommPurposeIdSource, existingCopies) as GsCommPurpose;
		
			//deep copy nested objects
			copy.GsCommRecomCollection = (TList<GsCommRecom>) MakeCopyOf(this.GsCommRecomCollection, existingCopies); 
			copy.GsCommDuttyCollection = (TList<GsCommDutty>) MakeCopyOf(this.GsCommDuttyCollection, existingCopies); 
			copy.GsCommStaffCollection = (TList<GsCommStaff>) MakeCopyOf(this.GsCommStaffCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed GsComm Entity 
		///</summary>
		public virtual GsComm Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed GsComm Entity which is a deep copy of the current entity.
		///</summary>
		public virtual GsComm DeepCopy()
		{
			return EntityHelper.Clone<GsComm>(this as GsComm);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as GsCommEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new GsCommEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as GsCommEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(GsCommColumn column)
		{
			switch(column)
			{
					case GsCommColumn.GsCommId:
					return entityData.GsCommId != _originalData.GsCommId;
					case GsCommColumn.CommDate:
					return entityData.CommDate != _originalData.CommDate;
					case GsCommColumn.CommNum:
					return entityData.CommNum != _originalData.CommNum;
					case GsCommColumn.CommName:
					return entityData.CommName != _originalData.CommName;
					case GsCommColumn.CommApprovedBy:
					return entityData.CommApprovedBy != _originalData.CommApprovedBy;
					case GsCommColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case GsCommColumn.EdSemesterId:
					return entityData.EdSemesterId != _originalData.EdSemesterId;
					case GsCommColumn.LawNo:
					return entityData.LawNo != _originalData.LawNo;
					case GsCommColumn.LawYear:
					return entityData.LawYear != _originalData.LawYear;
					case GsCommColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case GsCommColumn.EntMainMajorId:
					return entityData.EntMainMajorId != _originalData.EntMainMajorId;
					case GsCommColumn.EntMainMinorId:
					return entityData.EntMainMinorId != _originalData.EntMainMinorId;
					case GsCommColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case GsCommColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case GsCommColumn.GsCommPurposeId:
					return entityData.GsCommPurposeId != _originalData.GsCommPurposeId;
					case GsCommColumn.CommOnlineStat:
					return entityData.CommOnlineStat != _originalData.CommOnlineStat;
					case GsCommColumn.DecisionImage:
					return entityData.DecisionImage != _originalData.DecisionImage;
					case GsCommColumn.CopyTo:
					return entityData.CopyTo != _originalData.CopyTo;
					case GsCommColumn.CommFolder:
					return entityData.CommFolder != _originalData.CommFolder;
					case GsCommColumn.CommCloseDate:
					return entityData.CommCloseDate != _originalData.CommCloseDate;
					case GsCommColumn.CommCloseFlg:
					return entityData.CommCloseFlg != _originalData.CommCloseFlg;
					case GsCommColumn.Notes:
					return entityData.Notes != _originalData.Notes;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< GsCommColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.GsCommId != _originalData.GsCommId;
			result = result || entityData.CommDate != _originalData.CommDate;
			result = result || entityData.CommNum != _originalData.CommNum;
			result = result || entityData.CommName != _originalData.CommName;
			result = result || entityData.CommApprovedBy != _originalData.CommApprovedBy;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdSemesterId != _originalData.EdSemesterId;
			result = result || entityData.LawNo != _originalData.LawNo;
			result = result || entityData.LawYear != _originalData.LawYear;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.EntMainMajorId != _originalData.EntMainMajorId;
			result = result || entityData.EntMainMinorId != _originalData.EntMainMinorId;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.GsCommPurposeId != _originalData.GsCommPurposeId;
			result = result || entityData.CommOnlineStat != _originalData.CommOnlineStat;
			result = result || entityData.DecisionImage != _originalData.DecisionImage;
			result = result || entityData.CopyTo != _originalData.CopyTo;
			result = result || entityData.CommFolder != _originalData.CommFolder;
			result = result || entityData.CommCloseDate != _originalData.CommCloseDate;
			result = result || entityData.CommCloseFlg != _originalData.CommCloseFlg;
			result = result || entityData.Notes != _originalData.Notes;
			return result;
		}	
		
		///<summary>
		///  Returns a GsComm Entity with the original data.
		///</summary>
		public GsComm GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateGsComm(
				_originalData.GsCommId,
				_originalData.CommDate,
				_originalData.CommNum,
				_originalData.CommName,
				_originalData.CommApprovedBy,
				_originalData.EdAcadYearId,
				_originalData.EdSemesterId,
				_originalData.LawNo,
				_originalData.LawYear,
				_originalData.AsFacultyInfoId,
				_originalData.EntMainMajorId,
				_originalData.EntMainMinorId,
				_originalData.SeUserId,
				_originalData.LastDate,
				_originalData.GsCommPurposeId,
				_originalData.CommOnlineStat,
				_originalData.DecisionImage,
				_originalData.CopyTo,
				_originalData.CommFolder,
				_originalData.CommCloseDate,
				_originalData.CommCloseFlg,
				_originalData.Notes
				);
				
			return (GsComm)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="GsCommBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is GsCommBase)
				return ValueEquals(this, (GsCommBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="GsCommBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.GsCommId.GetHashCode() ^ 
					((this.CommDate == null) ? string.Empty : this.CommDate.ToString()).GetHashCode() ^ 
					((this.CommNum == null) ? string.Empty : this.CommNum.ToString()).GetHashCode() ^ 
					((this.CommName == null) ? string.Empty : this.CommName.ToString()).GetHashCode() ^ 
					((this.CommApprovedBy == null) ? string.Empty : this.CommApprovedBy.ToString()).GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					((this.EdSemesterId == null) ? string.Empty : this.EdSemesterId.ToString()).GetHashCode() ^ 
					((this.LawNo == null) ? string.Empty : this.LawNo.ToString()).GetHashCode() ^ 
					((this.LawYear == null) ? string.Empty : this.LawYear.ToString()).GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					((this.EntMainMajorId == null) ? string.Empty : this.EntMainMajorId.ToString()).GetHashCode() ^ 
					((this.EntMainMinorId == null) ? string.Empty : this.EntMainMinorId.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.GsCommPurposeId == null) ? string.Empty : this.GsCommPurposeId.ToString()).GetHashCode() ^ 
					((this.CommOnlineStat == null) ? string.Empty : this.CommOnlineStat.ToString()).GetHashCode() ^ 
					((this.DecisionImage == null) ? string.Empty : this.DecisionImage.ToString()).GetHashCode() ^ 
					((this.CopyTo == null) ? string.Empty : this.CopyTo.ToString()).GetHashCode() ^ 
					((this.CommFolder == null) ? string.Empty : this.CommFolder.ToString()).GetHashCode() ^ 
					((this.CommCloseDate == null) ? string.Empty : this.CommCloseDate.ToString()).GetHashCode() ^ 
					this.CommCloseFlg.GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="GsCommBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(GsCommBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="GsCommBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="GsCommBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="GsCommBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(GsCommBase Object1, GsCommBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.GsCommId != Object2.GsCommId)
				equal = false;
			if ( Object1.CommDate != null && Object2.CommDate != null )
			{
				if (Object1.CommDate != Object2.CommDate)
					equal = false;
			}
			else if (Object1.CommDate == null ^ Object2.CommDate == null )
			{
				equal = false;
			}
			if ( Object1.CommNum != null && Object2.CommNum != null )
			{
				if (Object1.CommNum != Object2.CommNum)
					equal = false;
			}
			else if (Object1.CommNum == null ^ Object2.CommNum == null )
			{
				equal = false;
			}
			if ( Object1.CommName != null && Object2.CommName != null )
			{
				if (Object1.CommName != Object2.CommName)
					equal = false;
			}
			else if (Object1.CommName == null ^ Object2.CommName == null )
			{
				equal = false;
			}
			if ( Object1.CommApprovedBy != null && Object2.CommApprovedBy != null )
			{
				if (Object1.CommApprovedBy != Object2.CommApprovedBy)
					equal = false;
			}
			else if (Object1.CommApprovedBy == null ^ Object2.CommApprovedBy == null )
			{
				equal = false;
			}
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if ( Object1.EdSemesterId != null && Object2.EdSemesterId != null )
			{
				if (Object1.EdSemesterId != Object2.EdSemesterId)
					equal = false;
			}
			else if (Object1.EdSemesterId == null ^ Object2.EdSemesterId == null )
			{
				equal = false;
			}
			if ( Object1.LawNo != null && Object2.LawNo != null )
			{
				if (Object1.LawNo != Object2.LawNo)
					equal = false;
			}
			else if (Object1.LawNo == null ^ Object2.LawNo == null )
			{
				equal = false;
			}
			if ( Object1.LawYear != null && Object2.LawYear != null )
			{
				if (Object1.LawYear != Object2.LawYear)
					equal = false;
			}
			else if (Object1.LawYear == null ^ Object2.LawYear == null )
			{
				equal = false;
			}
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if ( Object1.EntMainMajorId != null && Object2.EntMainMajorId != null )
			{
				if (Object1.EntMainMajorId != Object2.EntMainMajorId)
					equal = false;
			}
			else if (Object1.EntMainMajorId == null ^ Object2.EntMainMajorId == null )
			{
				equal = false;
			}
			if ( Object1.EntMainMinorId != null && Object2.EntMainMinorId != null )
			{
				if (Object1.EntMainMinorId != Object2.EntMainMinorId)
					equal = false;
			}
			else if (Object1.EntMainMinorId == null ^ Object2.EntMainMinorId == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.GsCommPurposeId != null && Object2.GsCommPurposeId != null )
			{
				if (Object1.GsCommPurposeId != Object2.GsCommPurposeId)
					equal = false;
			}
			else if (Object1.GsCommPurposeId == null ^ Object2.GsCommPurposeId == null )
			{
				equal = false;
			}
			if ( Object1.CommOnlineStat != null && Object2.CommOnlineStat != null )
			{
				if (Object1.CommOnlineStat != Object2.CommOnlineStat)
					equal = false;
			}
			else if (Object1.CommOnlineStat == null ^ Object2.CommOnlineStat == null )
			{
				equal = false;
			}
			if ( Object1.DecisionImage != null && Object2.DecisionImage != null )
			{
				if (Object1.DecisionImage != Object2.DecisionImage)
					equal = false;
			}
			else if (Object1.DecisionImage == null ^ Object2.DecisionImage == null )
			{
				equal = false;
			}
			if ( Object1.CopyTo != null && Object2.CopyTo != null )
			{
				if (Object1.CopyTo != Object2.CopyTo)
					equal = false;
			}
			else if (Object1.CopyTo == null ^ Object2.CopyTo == null )
			{
				equal = false;
			}
			if ( Object1.CommFolder != null && Object2.CommFolder != null )
			{
				if (Object1.CommFolder != Object2.CommFolder)
					equal = false;
			}
			else if (Object1.CommFolder == null ^ Object2.CommFolder == null )
			{
				equal = false;
			}
			if ( Object1.CommCloseDate != null && Object2.CommCloseDate != null )
			{
				if (Object1.CommCloseDate != Object2.CommCloseDate)
					equal = false;
			}
			else if (Object1.CommCloseDate == null ^ Object2.CommCloseDate == null )
			{
				equal = false;
			}
			if (Object1.CommCloseFlg != Object2.CommCloseFlg)
				equal = false;
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((GsCommBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static GsCommComparer GetComparer()
        {
            return new GsCommComparer();
        }
        */

        // Comparer delegates back to GsComm
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(GsComm rhs, GsCommColumn which)
        {
            switch (which)
            {
            	
            	
            	case GsCommColumn.GsCommId:
            		return this.GsCommId.CompareTo(rhs.GsCommId);
            		
            		                 
            	
            	
            	case GsCommColumn.CommDate:
            		return this.CommDate.Value.CompareTo(rhs.CommDate.Value);
            		
            		                 
            	
            	
            	case GsCommColumn.CommNum:
            		return this.CommNum.CompareTo(rhs.CommNum);
            		
            		                 
            	
            	
            	case GsCommColumn.CommName:
            		return this.CommName.CompareTo(rhs.CommName);
            		
            		                 
            	
            	
            	case GsCommColumn.CommApprovedBy:
            		return this.CommApprovedBy.Value.CompareTo(rhs.CommApprovedBy.Value);
            		
            		                 
            	
            	
            	case GsCommColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case GsCommColumn.EdSemesterId:
            		return this.EdSemesterId.Value.CompareTo(rhs.EdSemesterId.Value);
            		
            		                 
            	
            	
            	case GsCommColumn.LawNo:
            		return this.LawNo.Value.CompareTo(rhs.LawNo.Value);
            		
            		                 
            	
            	
            	case GsCommColumn.LawYear:
            		return this.LawYear.Value.CompareTo(rhs.LawYear.Value);
            		
            		                 
            	
            	
            	case GsCommColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case GsCommColumn.EntMainMajorId:
            		return this.EntMainMajorId.Value.CompareTo(rhs.EntMainMajorId.Value);
            		
            		                 
            	
            	
            	case GsCommColumn.EntMainMinorId:
            		return this.EntMainMinorId.Value.CompareTo(rhs.EntMainMinorId.Value);
            		
            		                 
            	
            	
            	case GsCommColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case GsCommColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case GsCommColumn.GsCommPurposeId:
            		return this.GsCommPurposeId.Value.CompareTo(rhs.GsCommPurposeId.Value);
            		
            		                 
            	
            	
            	case GsCommColumn.CommOnlineStat:
            		return this.CommOnlineStat.Value.CompareTo(rhs.CommOnlineStat.Value);
            		
            		                 
            	
            	
            	case GsCommColumn.DecisionImage:
            		return this.DecisionImage.CompareTo(rhs.DecisionImage);
            		
            		                 
            	
            	
            	case GsCommColumn.CopyTo:
            		return this.CopyTo.CompareTo(rhs.CopyTo);
            		
            		                 
            	
            	
            	case GsCommColumn.CommFolder:
            		return this.CommFolder.CompareTo(rhs.CommFolder);
            		
            		                 
            	
            	
            	case GsCommColumn.CommCloseDate:
            		return this.CommCloseDate.Value.CompareTo(rhs.CommCloseDate.Value);
            		
            		                 
            	
            	
            	case GsCommColumn.CommCloseFlg:
            		return this.CommCloseFlg.CompareTo(rhs.CommCloseFlg);
            		
            		                 
            	
            	
            	case GsCommColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<GsCommKey> Members
		
		// member variable for the EntityId property
		private GsCommKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual GsCommKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new GsCommKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("GsComm")
					.Append("|").Append( this.GsCommId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{23}{22}- GsCommId: {0}{22}- CommDate: {1}{22}- CommNum: {2}{22}- CommName: {3}{22}- CommApprovedBy: {4}{22}- EdAcadYearId: {5}{22}- EdSemesterId: {6}{22}- LawNo: {7}{22}- LawYear: {8}{22}- AsFacultyInfoId: {9}{22}- EntMainMajorId: {10}{22}- EntMainMinorId: {11}{22}- SeUserId: {12}{22}- LastDate: {13}{22}- GsCommPurposeId: {14}{22}- CommOnlineStat: {15}{22}- DecisionImage: {16}{22}- CopyTo: {17}{22}- CommFolder: {18}{22}- CommCloseDate: {19}{22}- CommCloseFlg: {20}{22}- Notes: {21}{22}{24}", 
				this.GsCommId,
				(this.CommDate == null) ? string.Empty : this.CommDate.ToString(),
				(this.CommNum == null) ? string.Empty : this.CommNum.ToString(),
				(this.CommName == null) ? string.Empty : this.CommName.ToString(),
				(this.CommApprovedBy == null) ? string.Empty : this.CommApprovedBy.ToString(),
				this.EdAcadYearId,
				(this.EdSemesterId == null) ? string.Empty : this.EdSemesterId.ToString(),
				(this.LawNo == null) ? string.Empty : this.LawNo.ToString(),
				(this.LawYear == null) ? string.Empty : this.LawYear.ToString(),
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				(this.EntMainMajorId == null) ? string.Empty : this.EntMainMajorId.ToString(),
				(this.EntMainMinorId == null) ? string.Empty : this.EntMainMinorId.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.GsCommPurposeId == null) ? string.Empty : this.GsCommPurposeId.ToString(),
				(this.CommOnlineStat == null) ? string.Empty : this.CommOnlineStat.ToString(),
				(this.DecisionImage == null) ? string.Empty : this.DecisionImage.ToString(),
				(this.CopyTo == null) ? string.Empty : this.CopyTo.ToString(),
				(this.CommFolder == null) ? string.Empty : this.CommFolder.ToString(),
				(this.CommCloseDate == null) ? string.Empty : this.CommCloseDate.ToString(),
				this.CommCloseFlg,
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'GS_COMM' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class GsCommEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// GS_COMM_ID : انشاء لجان الابحاث العلمية
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "GS_COMM"</remarks>
		public System.Decimal GsCommId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalGsCommId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// COMM_DATE : XX
		/// </summary>
		public System.DateTime?		  CommDate = null;
		
		/// <summary>
		/// COMM_NUM : رقم اللجنه
		/// </summary>
		public System.String		  CommNum = null;
		
		/// <summary>
		/// COMM_NAME : اسم اللجنه
		/// </summary>
		public System.String		  CommName = null;
		
		/// <summary>
		/// COMM_APPROVED_BY : XX
		/// </summary>
		public System.Decimal?		  CommApprovedBy = null;
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : العام الدراسي
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// ED_SEMESTER_ID : XX
		/// </summary>
		public System.Decimal?		  EdSemesterId = null;
		
		/// <summary>
		/// LAW_NO : XX
		/// </summary>
		public System.Decimal?		  LawNo = null;
		
		/// <summary>
		/// LAW_YEAR : XX
		/// </summary>
		public System.Decimal?		  LawYear = null;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : الكلية
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// ENT_MAIN_MAJOR_ID : التخصص الرئيسي
		/// </summary>
		public System.Decimal?		  EntMainMajorId = null;
		
		/// <summary>
		/// ENT_MAIN_MINOR_ID : التخصص الفرعي
		/// </summary>
		public System.Decimal?		  EntMainMinorId = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// GS_COMM_PURPOSE_ID : XX
		/// </summary>
		public System.Decimal?		  GsCommPurposeId = null;
		
		/// <summary>
		/// COMM_ONLINE_STAT : XX
		/// </summary>
		public System.Decimal?		  CommOnlineStat = null;
		
		/// <summary>
		/// DECISION_IMAGE : XX
		/// </summary>
		public System.String		  DecisionImage = null;
		
		/// <summary>
		/// COPY_TO : XX
		/// </summary>
		public System.String		  CopyTo = null;
		
		/// <summary>
		/// COMM_FOLDER : XX
		/// </summary>
		public System.String		  CommFolder = null;
		
		/// <summary>
		/// COMM_CLOSE_DATE : XX
		/// </summary>
		public System.DateTime?		  CommCloseDate = null;
		
		/// <summary>
		/// COMM_CLOSE_FLG : XX =0
		/// </summary>
		public System.Decimal		  CommCloseFlg = 0.0m;
		
		/// <summary>
		/// NOTES : ملاحظات
		/// </summary>
		public System.String		  Notes = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCodeSemester _edSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdSemesterIdSource
      	{
            get { return this._edSemesterIdSource; }
            set { this._edSemesterIdSource = value; }
      	}
		private EntityMain _entMainMajorIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainMajorId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain EntMainMajorIdSource
      	{
            get { return this._entMainMajorIdSource; }
            set { this._entMainMajorIdSource = value; }
      	}
		private EntityMain _entMainMinorIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainMinorId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain EntMainMinorIdSource
      	{
            get { return this._entMainMinorIdSource; }
            set { this._entMainMinorIdSource = value; }
      	}
		private GsCommPurpose _gsCommPurposeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCommPurpose"/>.
		/// </summary>
		/// <value>The source GsCommPurpose for GsCommPurposeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCommPurpose GsCommPurposeIdSource
      	{
            get { return this._gsCommPurposeIdSource; }
            set { this._gsCommPurposeIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region GsCommRecomCollection
		
		private TList<GsCommRecom> _gsCommRecomGsCommId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _gsCommRecomGsCommId
		/// </summary>
		
		public TList<GsCommRecom> GsCommRecomCollection
		{
			get
			{
				if (_gsCommRecomGsCommId == null)
				{
				_gsCommRecomGsCommId = new TList<GsCommRecom>();
				}
	
				return _gsCommRecomGsCommId;
			}
			set { _gsCommRecomGsCommId = value; }
		}
		
		#endregion

		#region GsCommDuttyCollection
		
		private TList<GsCommDutty> _gsCommDuttyGsCommId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _gsCommDuttyGsCommId
		/// </summary>
		
		public TList<GsCommDutty> GsCommDuttyCollection
		{
			get
			{
				if (_gsCommDuttyGsCommId == null)
				{
				_gsCommDuttyGsCommId = new TList<GsCommDutty>();
				}
	
				return _gsCommDuttyGsCommId;
			}
			set { _gsCommDuttyGsCommId = value; }
		}
		
		#endregion

		#region GsCommStaffCollection
		
		private TList<GsCommStaff> _gsCommStaffGsCommId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _gsCommStaffGsCommId
		/// </summary>
		
		public TList<GsCommStaff> GsCommStaffCollection
		{
			get
			{
				if (_gsCommStaffGsCommId == null)
				{
				_gsCommStaffGsCommId = new TList<GsCommStaff>();
				}
	
				return _gsCommStaffGsCommId;
			}
			set { _gsCommStaffGsCommId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			GsCommEntityData _tmp = new GsCommEntityData();
						
			_tmp.GsCommId = this.GsCommId;
			_tmp.OriginalGsCommId = this.OriginalGsCommId;
			
			_tmp.CommDate = this.CommDate;
			_tmp.CommNum = this.CommNum;
			_tmp.CommName = this.CommName;
			_tmp.CommApprovedBy = this.CommApprovedBy;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdSemesterId = this.EdSemesterId;
			_tmp.LawNo = this.LawNo;
			_tmp.LawYear = this.LawYear;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EntMainMajorId = this.EntMainMajorId;
			_tmp.EntMainMinorId = this.EntMainMinorId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.GsCommPurposeId = this.GsCommPurposeId;
			_tmp.CommOnlineStat = this.CommOnlineStat;
			_tmp.DecisionImage = this.DecisionImage;
			_tmp.CopyTo = this.CopyTo;
			_tmp.CommFolder = this.CommFolder;
			_tmp.CommCloseDate = this.CommCloseDate;
			_tmp.CommCloseFlg = this.CommCloseFlg;
			_tmp.Notes = this.Notes;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdSemesterIdSource != null)
				_tmp.EdSemesterIdSource = MakeCopyOf(this.EdSemesterIdSource) as EdCodeSemester;
			if (this.EntMainMajorIdSource != null)
				_tmp.EntMainMajorIdSource = MakeCopyOf(this.EntMainMajorIdSource) as EntityMain;
			if (this.EntMainMinorIdSource != null)
				_tmp.EntMainMinorIdSource = MakeCopyOf(this.EntMainMinorIdSource) as EntityMain;
			if (this.GsCommPurposeIdSource != null)
				_tmp.GsCommPurposeIdSource = MakeCopyOf(this.GsCommPurposeIdSource) as GsCommPurpose;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._gsCommRecomGsCommId != null)
				_tmp.GsCommRecomCollection = (TList<GsCommRecom>) MakeCopyOf(this.GsCommRecomCollection); 
			if (this._gsCommDuttyGsCommId != null)
				_tmp.GsCommDuttyCollection = (TList<GsCommDutty>) MakeCopyOf(this.GsCommDuttyCollection); 
			if (this._gsCommStaffGsCommId != null)
				_tmp.GsCommStaffCollection = (TList<GsCommStaff>) MakeCopyOf(this.GsCommStaffCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			GsCommEntityData _tmp = new GsCommEntityData();
						
			_tmp.GsCommId = this.GsCommId;
			_tmp.OriginalGsCommId = this.OriginalGsCommId;
			
			_tmp.CommDate = this.CommDate;
			_tmp.CommNum = this.CommNum;
			_tmp.CommName = this.CommName;
			_tmp.CommApprovedBy = this.CommApprovedBy;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdSemesterId = this.EdSemesterId;
			_tmp.LawNo = this.LawNo;
			_tmp.LawYear = this.LawYear;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EntMainMajorId = this.EntMainMajorId;
			_tmp.EntMainMinorId = this.EntMainMinorId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.GsCommPurposeId = this.GsCommPurposeId;
			_tmp.CommOnlineStat = this.CommOnlineStat;
			_tmp.DecisionImage = this.DecisionImage;
			_tmp.CopyTo = this.CopyTo;
			_tmp.CommFolder = this.CommFolder;
			_tmp.CommCloseDate = this.CommCloseDate;
			_tmp.CommCloseFlg = this.CommCloseFlg;
			_tmp.Notes = this.Notes;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdSemesterIdSource != null && existingCopies.Contains(this.EdSemesterIdSource))
				_tmp.EdSemesterIdSource = existingCopies[this.EdSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdSemesterIdSource = MakeCopyOf(this.EdSemesterIdSource, existingCopies) as EdCodeSemester;
			if (this.EntMainMajorIdSource != null && existingCopies.Contains(this.EntMainMajorIdSource))
				_tmp.EntMainMajorIdSource = existingCopies[this.EntMainMajorIdSource] as EntityMain;
			else
				_tmp.EntMainMajorIdSource = MakeCopyOf(this.EntMainMajorIdSource, existingCopies) as EntityMain;
			if (this.EntMainMinorIdSource != null && existingCopies.Contains(this.EntMainMinorIdSource))
				_tmp.EntMainMinorIdSource = existingCopies[this.EntMainMinorIdSource] as EntityMain;
			else
				_tmp.EntMainMinorIdSource = MakeCopyOf(this.EntMainMinorIdSource, existingCopies) as EntityMain;
			if (this.GsCommPurposeIdSource != null && existingCopies.Contains(this.GsCommPurposeIdSource))
				_tmp.GsCommPurposeIdSource = existingCopies[this.GsCommPurposeIdSource] as GsCommPurpose;
			else
				_tmp.GsCommPurposeIdSource = MakeCopyOf(this.GsCommPurposeIdSource, existingCopies) as GsCommPurpose;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.GsCommRecomCollection = (TList<GsCommRecom>) MakeCopyOf(this.GsCommRecomCollection, existingCopies); 
			_tmp.GsCommDuttyCollection = (TList<GsCommDutty>) MakeCopyOf(this.GsCommDuttyCollection, existingCopies); 
			_tmp.GsCommStaffCollection = (TList<GsCommStaff>) MakeCopyOf(this.GsCommStaffCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCommColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(GsCommColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCommColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(GsCommColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCommColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(GsCommColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				GsCommEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new GsCommEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GsCommColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(GsCommColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				GsCommEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new GsCommEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region GsCommEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="GsComm"/> object.
	/// </remarks>
	public class GsCommEventArgs : System.EventArgs
	{
		private GsCommColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the GsCommEventArgs class.
		///</summary>
		public GsCommEventArgs(GsCommColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the GsCommEventArgs class.
		///</summary>
		public GsCommEventArgs(GsCommColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The GsCommColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="GsCommColumn" />
		public GsCommColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all GsComm related events.
	///</summary>
	public delegate void GsCommEventHandler(object sender, GsCommEventArgs e);
	
	#region GsCommComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class GsCommComparer : System.Collections.Generic.IComparer<GsComm>
	{
		GsCommColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:GsCommComparer"/> class.
        /// </summary>
		public GsCommComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:GsCommComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public GsCommComparer(GsCommColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="GsComm"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="GsComm"/> to compare.</param>
        /// <param name="b">The second <c>GsComm</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(GsComm a, GsComm b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(GsComm entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(GsComm a, GsComm b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public GsCommColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region GsCommKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="GsComm"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class GsCommKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the GsCommKey class.
		/// </summary>
		public GsCommKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the GsCommKey class.
		/// </summary>
		public GsCommKey(GsCommBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.GsCommId = entity.GsCommId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the GsCommKey class.
		/// </summary>
		public GsCommKey(System.Decimal _gsCommId)
		{
			#region Init Properties

			this.GsCommId = _gsCommId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private GsCommBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public GsCommBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the GsCommId property
		private System.Decimal _gsCommId;
		
		/// <summary>
		/// Gets or sets the GsCommId property.
		/// </summary>
		public System.Decimal GsCommId
		{
			get { return _gsCommId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.GsCommId = value;
				
				_gsCommId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				GsCommId = ( values["GsCommId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["GsCommId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("GsCommId", GsCommId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("GsCommId: {0}{1}",
								GsCommId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region GsCommColumn Enum
	
	/// <summary>
	/// Enumerate the GsComm columns.
	/// </summary>
	[Serializable]
	public enum GsCommColumn : int
	{
		/// <summary>
		/// GsCommId : انشاء لجان الابحاث العلمية
		/// </summary>
		[EnumTextValue("GS_COMM_ID")]
		[ColumnEnum("GS_COMM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		GsCommId = 1,
		/// <summary>
		/// CommDate : XX
		/// </summary>
		[EnumTextValue("COMM_DATE")]
		[ColumnEnum("COMM_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		CommDate = 2,
		/// <summary>
		/// CommNum : رقم اللجنه
		/// </summary>
		[EnumTextValue("COMM_NUM")]
		[ColumnEnum("COMM_NUM", typeof(System.String), System.Data.DbType.String, false, false, true, 10)]
		CommNum = 3,
		/// <summary>
		/// CommName : اسم اللجنه
		/// </summary>
		[EnumTextValue("COMM_NAME")]
		[ColumnEnum("COMM_NAME", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		CommName = 4,
		/// <summary>
		/// CommApprovedBy : XX
		/// </summary>
		[EnumTextValue("COMM_APPROVED_BY")]
		[ColumnEnum("COMM_APPROVED_BY", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CommApprovedBy = 5,
		/// <summary>
		/// EdAcadYearId : العام الدراسي
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 6,
		/// <summary>
		/// EdSemesterId : XX
		/// </summary>
		[EnumTextValue("ED_SEMESTER_ID")]
		[ColumnEnum("ED_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdSemesterId = 7,
		/// <summary>
		/// LawNo : XX
		/// </summary>
		[EnumTextValue("LAW_NO")]
		[ColumnEnum("LAW_NO", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		LawNo = 8,
		/// <summary>
		/// LawYear : XX
		/// </summary>
		[EnumTextValue("LAW_YEAR")]
		[ColumnEnum("LAW_YEAR", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		LawYear = 9,
		/// <summary>
		/// AsFacultyInfoId : الكلية
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 10,
		/// <summary>
		/// EntMainMajorId : التخصص الرئيسي
		/// </summary>
		[EnumTextValue("ENT_MAIN_MAJOR_ID")]
		[ColumnEnum("ENT_MAIN_MAJOR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntMainMajorId = 11,
		/// <summary>
		/// EntMainMinorId : التخصص الفرعي
		/// </summary>
		[EnumTextValue("ENT_MAIN_MINOR_ID")]
		[ColumnEnum("ENT_MAIN_MINOR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntMainMinorId = 12,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 13,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 14,
		/// <summary>
		/// GsCommPurposeId : XX
		/// </summary>
		[EnumTextValue("GS_COMM_PURPOSE_ID")]
		[ColumnEnum("GS_COMM_PURPOSE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCommPurposeId = 15,
		/// <summary>
		/// CommOnlineStat : XX
		/// </summary>
		[EnumTextValue("COMM_ONLINE_STAT")]
		[ColumnEnum("COMM_ONLINE_STAT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CommOnlineStat = 16,
		/// <summary>
		/// DecisionImage : XX
		/// </summary>
		[EnumTextValue("DECISION_IMAGE")]
		[ColumnEnum("DECISION_IMAGE", typeof(System.String), System.Data.DbType.String, false, false, true, 350)]
		DecisionImage = 17,
		/// <summary>
		/// CopyTo : XX
		/// </summary>
		[EnumTextValue("COPY_TO")]
		[ColumnEnum("COPY_TO", typeof(System.String), System.Data.DbType.String, false, false, true, 350)]
		CopyTo = 18,
		/// <summary>
		/// CommFolder : XX
		/// </summary>
		[EnumTextValue("COMM_FOLDER")]
		[ColumnEnum("COMM_FOLDER", typeof(System.String), System.Data.DbType.String, false, false, true, 350)]
		CommFolder = 19,
		/// <summary>
		/// CommCloseDate : XX
		/// </summary>
		[EnumTextValue("COMM_CLOSE_DATE")]
		[ColumnEnum("COMM_CLOSE_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		CommCloseDate = 20,
		/// <summary>
		/// CommCloseFlg : XX =0
		/// </summary>
		[EnumTextValue("COMM_CLOSE_FLG")]
		[ColumnEnum("COMM_CLOSE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		CommCloseFlg = 21,
		/// <summary>
		/// Notes : ملاحظات
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Notes = 22
	}//End enum

	#endregion GsCommColumn Enum

} // end namespace
