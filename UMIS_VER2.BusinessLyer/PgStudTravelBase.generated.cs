
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file PgStudTravel.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'PG_STUD_TRAVEL' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class PgStudTravelBase : EntityBase, IPgStudTravel, IEntityId<PgStudTravelKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private PgStudTravelEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private PgStudTravelEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private PgStudTravelEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<PgStudTravel> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event PgStudTravelEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event PgStudTravelEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="PgStudTravelBase"/> instance.
		///</summary>
		public PgStudTravelBase()
		{
			this.entityData = new PgStudTravelEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="PgStudTravelBase"/> instance.
		///</summary>
		///<param name="_pgStudTravelId">سفر الطلاب للخارج</param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edStudId">ONLY PG STUD</param>
		///<param name="_gsCountryNodeId">من جدول الدول (ولا تكون الدولة الحالية)</param>
		///<param name="_univNameEn">الجامعة المسافر لها</param>
		///<param name="_supervisor">اسم المشرف الاجنبى</param>
		///<param name="_requestDate">تاريخ مذكرة السفر</param>
		///<param name="_expctdFrom">تاريخ بدء السفر المتوقع</param>
		///<param name="_expctdTo">تاريخ نهاية السفر المتوقع</param>
		///<param name="_actualFrom">تاريخ بدء السفر الفعلى</param>
		///<param name="_actualTo">تاريخ نهاية السفر الفعلى</param>
		///<param name="_securityApproveNo">رقم الموافقة الأمنية للسفر</param>
		///<param name="_securityApproveDate">تاريخ الموافقة الأمنية للسفر</param>
		///<param name="_notes">ملاحظات</param>
		///<param name="_isLast">اخر مد</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public PgStudTravelBase(System.Decimal _pgStudTravelId, System.Decimal _edAcadYearId, 
			System.Decimal _edStudId, System.Decimal? _gsCountryNodeId, System.String _univNameEn, 
			System.String _supervisor, System.DateTime? _requestDate, System.DateTime? _expctdFrom, 
			System.DateTime? _expctdTo, System.DateTime? _actualFrom, System.DateTime? _actualTo, 
			System.Decimal? _securityApproveNo, System.DateTime? _securityApproveDate, System.String _notes, 
			System.Boolean _isLast, System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			this.entityData = new PgStudTravelEntityData();
			this.backupData = null;

			this.PgStudTravelId = _pgStudTravelId;
			this.EdAcadYearId = _edAcadYearId;
			this.EdStudId = _edStudId;
			this.GsCountryNodeId = _gsCountryNodeId;
			this.UnivNameEn = _univNameEn;
			this.Supervisor = _supervisor;
			this.RequestDate = _requestDate;
			this.ExpctdFrom = _expctdFrom;
			this.ExpctdTo = _expctdTo;
			this.ActualFrom = _actualFrom;
			this.ActualTo = _actualTo;
			this.SecurityApproveNo = _securityApproveNo;
			this.SecurityApproveDate = _securityApproveDate;
			this.Notes = _notes;
			this.IsLast = _isLast;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="PgStudTravel"/> instance.
		///</summary>
		///<param name="_pgStudTravelId">سفر الطلاب للخارج</param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edStudId">ONLY PG STUD</param>
		///<param name="_gsCountryNodeId">من جدول الدول (ولا تكون الدولة الحالية)</param>
		///<param name="_univNameEn">الجامعة المسافر لها</param>
		///<param name="_supervisor">اسم المشرف الاجنبى</param>
		///<param name="_requestDate">تاريخ مذكرة السفر</param>
		///<param name="_expctdFrom">تاريخ بدء السفر المتوقع</param>
		///<param name="_expctdTo">تاريخ نهاية السفر المتوقع</param>
		///<param name="_actualFrom">تاريخ بدء السفر الفعلى</param>
		///<param name="_actualTo">تاريخ نهاية السفر الفعلى</param>
		///<param name="_securityApproveNo">رقم الموافقة الأمنية للسفر</param>
		///<param name="_securityApproveDate">تاريخ الموافقة الأمنية للسفر</param>
		///<param name="_notes">ملاحظات</param>
		///<param name="_isLast">اخر مد</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static PgStudTravel CreatePgStudTravel(System.Decimal _pgStudTravelId, System.Decimal _edAcadYearId, 
			System.Decimal _edStudId, System.Decimal? _gsCountryNodeId, System.String _univNameEn, 
			System.String _supervisor, System.DateTime? _requestDate, System.DateTime? _expctdFrom, 
			System.DateTime? _expctdTo, System.DateTime? _actualFrom, System.DateTime? _actualTo, 
			System.Decimal? _securityApproveNo, System.DateTime? _securityApproveDate, System.String _notes, 
			System.Boolean _isLast, System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			PgStudTravel newPgStudTravel = new PgStudTravel();
			newPgStudTravel.PgStudTravelId = _pgStudTravelId;
			newPgStudTravel.EdAcadYearId = _edAcadYearId;
			newPgStudTravel.EdStudId = _edStudId;
			newPgStudTravel.GsCountryNodeId = _gsCountryNodeId;
			newPgStudTravel.UnivNameEn = _univNameEn;
			newPgStudTravel.Supervisor = _supervisor;
			newPgStudTravel.RequestDate = _requestDate;
			newPgStudTravel.ExpctdFrom = _expctdFrom;
			newPgStudTravel.ExpctdTo = _expctdTo;
			newPgStudTravel.ActualFrom = _actualFrom;
			newPgStudTravel.ActualTo = _actualTo;
			newPgStudTravel.SecurityApproveNo = _securityApproveNo;
			newPgStudTravel.SecurityApproveDate = _securityApproveDate;
			newPgStudTravel.Notes = _notes;
			newPgStudTravel.IsLast = _isLast;
			newPgStudTravel.SeUserId = _seUserId;
			newPgStudTravel.LastDate = _lastDate;
			return newPgStudTravel;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the PgStudTravelId property. 
		///		سفر الطلاب للخارج
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"سفر الطلاب للخارج"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal PgStudTravelId
		{
			get
			{
				return this.entityData.PgStudTravelId; 
			}
			
			set
			{
				if (this.entityData.PgStudTravelId == value)
					return;
					
				OnColumnChanging(PgStudTravelColumn.PgStudTravelId, this.entityData.PgStudTravelId);
				this.entityData.PgStudTravelId = value;
				this.EntityId.PgStudTravelId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudTravelColumn.PgStudTravelId, this.entityData.PgStudTravelId);
				OnPropertyChanged("PgStudTravelId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the PG_STUD_TRAVEL_ID property.
		///		سفر الطلاب للخارج
		/// </summary>
		/// <remarks>This is the original value of the PG_STUD_TRAVEL_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalPgStudTravelId
		{
			get { return this.entityData.OriginalPgStudTravelId; }
			set { this.entityData.OriginalPgStudTravelId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(PgStudTravelColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudTravelColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		ONLY PG STUD
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"ONLY PG STUD"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(PgStudTravelColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudTravelColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCountryNodeId property. 
		///		من جدول الدول (ولا تكون الدولة الحالية)
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCountryNodeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"من جدول الدول (ولا تكون الدولة الحالية)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCountryNodeId
		{
			get
			{
				return this.entityData.GsCountryNodeId; 
			}
			
			set
			{
				if (this.entityData.GsCountryNodeId == value)
					return;
					
				OnColumnChanging(PgStudTravelColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				this.entityData.GsCountryNodeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudTravelColumn.GsCountryNodeId, this.entityData.GsCountryNodeId);
				OnPropertyChanged("GsCountryNodeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UnivNameEn property. 
		///		الجامعة المسافر لها
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"الجامعة المسافر لها"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String UnivNameEn
		{
			get
			{
				return this.entityData.UnivNameEn; 
			}
			
			set
			{
				if (this.entityData.UnivNameEn == value)
					return;
					
				OnColumnChanging(PgStudTravelColumn.UnivNameEn, this.entityData.UnivNameEn);
				this.entityData.UnivNameEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudTravelColumn.UnivNameEn, this.entityData.UnivNameEn);
				OnPropertyChanged("UnivNameEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Supervisor property. 
		///		اسم المشرف الاجنبى
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"اسم المشرف الاجنبى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String Supervisor
		{
			get
			{
				return this.entityData.Supervisor; 
			}
			
			set
			{
				if (this.entityData.Supervisor == value)
					return;
					
				OnColumnChanging(PgStudTravelColumn.Supervisor, this.entityData.Supervisor);
				this.entityData.Supervisor = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudTravelColumn.Supervisor, this.entityData.Supervisor);
				OnPropertyChanged("Supervisor");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RequestDate property. 
		///		تاريخ مذكرة السفر
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsRequestDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ مذكرة السفر"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? RequestDate
		{
			get
			{
				return this.entityData.RequestDate; 
			}
			
			set
			{
				if (this.entityData.RequestDate == value)
					return;
					
				OnColumnChanging(PgStudTravelColumn.RequestDate, this.entityData.RequestDate);
				this.entityData.RequestDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudTravelColumn.RequestDate, this.entityData.RequestDate);
				OnPropertyChanged("RequestDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExpctdFrom property. 
		///		تاريخ بدء السفر المتوقع
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsExpctdFromNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ بدء السفر المتوقع"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ExpctdFrom
		{
			get
			{
				return this.entityData.ExpctdFrom; 
			}
			
			set
			{
				if (this.entityData.ExpctdFrom == value)
					return;
					
				OnColumnChanging(PgStudTravelColumn.ExpctdFrom, this.entityData.ExpctdFrom);
				this.entityData.ExpctdFrom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudTravelColumn.ExpctdFrom, this.entityData.ExpctdFrom);
				OnPropertyChanged("ExpctdFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExpctdTo property. 
		///		تاريخ نهاية السفر المتوقع
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsExpctdToNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ نهاية السفر المتوقع"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ExpctdTo
		{
			get
			{
				return this.entityData.ExpctdTo; 
			}
			
			set
			{
				if (this.entityData.ExpctdTo == value)
					return;
					
				OnColumnChanging(PgStudTravelColumn.ExpctdTo, this.entityData.ExpctdTo);
				this.entityData.ExpctdTo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudTravelColumn.ExpctdTo, this.entityData.ExpctdTo);
				OnPropertyChanged("ExpctdTo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ActualFrom property. 
		///		تاريخ بدء السفر الفعلى
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsActualFromNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ بدء السفر الفعلى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ActualFrom
		{
			get
			{
				return this.entityData.ActualFrom; 
			}
			
			set
			{
				if (this.entityData.ActualFrom == value)
					return;
					
				OnColumnChanging(PgStudTravelColumn.ActualFrom, this.entityData.ActualFrom);
				this.entityData.ActualFrom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudTravelColumn.ActualFrom, this.entityData.ActualFrom);
				OnPropertyChanged("ActualFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ActualTo property. 
		///		تاريخ نهاية السفر الفعلى
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsActualToNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ نهاية السفر الفعلى"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ActualTo
		{
			get
			{
				return this.entityData.ActualTo; 
			}
			
			set
			{
				if (this.entityData.ActualTo == value)
					return;
					
				OnColumnChanging(PgStudTravelColumn.ActualTo, this.entityData.ActualTo);
				this.entityData.ActualTo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudTravelColumn.ActualTo, this.entityData.ActualTo);
				OnPropertyChanged("ActualTo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SecurityApproveNo property. 
		///		رقم الموافقة الأمنية للسفر
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSecurityApproveNoNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"رقم الموافقة الأمنية للسفر"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SecurityApproveNo
		{
			get
			{
				return this.entityData.SecurityApproveNo; 
			}
			
			set
			{
				if (this.entityData.SecurityApproveNo == value)
					return;
					
				OnColumnChanging(PgStudTravelColumn.SecurityApproveNo, this.entityData.SecurityApproveNo);
				this.entityData.SecurityApproveNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudTravelColumn.SecurityApproveNo, this.entityData.SecurityApproveNo);
				OnPropertyChanged("SecurityApproveNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SecurityApproveDate property. 
		///		تاريخ الموافقة الأمنية للسفر
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsSecurityApproveDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ الموافقة الأمنية للسفر"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? SecurityApproveDate
		{
			get
			{
				return this.entityData.SecurityApproveDate; 
			}
			
			set
			{
				if (this.entityData.SecurityApproveDate == value)
					return;
					
				OnColumnChanging(PgStudTravelColumn.SecurityApproveDate, this.entityData.SecurityApproveDate);
				this.entityData.SecurityApproveDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudTravelColumn.SecurityApproveDate, this.entityData.SecurityApproveDate);
				OnPropertyChanged("SecurityApproveDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		ملاحظات
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"ملاحظات"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 350)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(PgStudTravelColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudTravelColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsLast property. 
		///		اخر مد
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"اخر مد"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean IsLast
		{
			get
			{
				return this.entityData.IsLast; 
			}
			
			set
			{
				if (this.entityData.IsLast == value)
					return;
					
				OnColumnChanging(PgStudTravelColumn.IsLast, this.entityData.IsLast);
				this.entityData.IsLast = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudTravelColumn.IsLast, this.entityData.IsLast);
				OnPropertyChanged("IsLast");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(PgStudTravelColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudTravelColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(PgStudTravelColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PgStudTravelColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCountryNode"/>.
		/// </summary>
		/// <value>The source GsCountryNode for GsCountryNodeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCountryNode GsCountryNodeIdSource
      	{
            get { return entityData.GsCountryNodeIdSource; }
            set { entityData.GsCountryNodeIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of PgThesisStudApprove objects
		///	which are related to this object through the relation FK_PG_THESIS_STUD_APPROVE_PG_STUD_TRAVEL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgThesisStudApprove> PgThesisStudApproveCollection
		{
			get { return entityData.PgThesisStudApproveCollection; }
			set { entityData.PgThesisStudApproveCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of PgStudTravelExtend objects
		///	which are related to this object through the relation FK_PG_STUD_TRAVEL_EXTEND_PG_STUD_TRAVEL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgStudTravelExtend> PgStudTravelExtendCollection
		{
			get { return entityData.PgStudTravelExtendCollection; }
			set { entityData.PgStudTravelExtendCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of PgAttchdDoc objects
		///	which are related to this object through the relation FK_PG_ATTCHD_DOC_PG_STUD_TRAVEL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<PgAttchdDoc> PgAttchdDocCollection
		{
			get { return entityData.PgAttchdDocCollection; }
			set { entityData.PgAttchdDocCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UnivNameEn", "Univ Name En", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Supervisor", "Supervisor", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 350));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "PG_STUD_TRAVEL"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"PG_STUD_TRAVEL_ID", "ED_ACAD_YEAR_ID", "ED_STUD_ID", "GS_COUNTRY_NODE_ID", "UNIV_NAME_EN", "SUPERVISOR", "REQUEST_DATE", "EXPCTD_FROM", "EXPCTD_TO", "ACTUAL_FROM", "ACTUAL_TO", "SECURITY_APPROVE_NO", "SECURITY_APPROVE_DATE", "NOTES", "IS_LAST", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as PgStudTravelEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (PgStudTravel) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<PgStudTravel>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as PgStudTravel);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed PgStudTravel Entity 
		///</summary>
		protected virtual PgStudTravel Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			PgStudTravel copy = new PgStudTravel();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.PgStudTravelId = this.PgStudTravelId;
					copy.OriginalPgStudTravelId = this.OriginalPgStudTravelId;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdStudId = this.EdStudId;
				copy.GsCountryNodeId = this.GsCountryNodeId;
				copy.UnivNameEn = this.UnivNameEn;
				copy.Supervisor = this.Supervisor;
				copy.RequestDate = this.RequestDate;
				copy.ExpctdFrom = this.ExpctdFrom;
				copy.ExpctdTo = this.ExpctdTo;
				copy.ActualFrom = this.ActualFrom;
				copy.ActualTo = this.ActualTo;
				copy.SecurityApproveNo = this.SecurityApproveNo;
				copy.SecurityApproveDate = this.SecurityApproveDate;
				copy.Notes = this.Notes;
				copy.IsLast = this.IsLast;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.GsCountryNodeIdSource != null && existingCopies.Contains(this.GsCountryNodeIdSource))
				copy.GsCountryNodeIdSource = existingCopies[this.GsCountryNodeIdSource] as GsCountryNode;
			else
				copy.GsCountryNodeIdSource = MakeCopyOf(this.GsCountryNodeIdSource, existingCopies) as GsCountryNode;
		
			//deep copy nested objects
			copy.PgThesisStudApproveCollection = (TList<PgThesisStudApprove>) MakeCopyOf(this.PgThesisStudApproveCollection, existingCopies); 
			copy.PgStudTravelExtendCollection = (TList<PgStudTravelExtend>) MakeCopyOf(this.PgStudTravelExtendCollection, existingCopies); 
			copy.PgAttchdDocCollection = (TList<PgAttchdDoc>) MakeCopyOf(this.PgAttchdDocCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed PgStudTravel Entity 
		///</summary>
		public virtual PgStudTravel Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed PgStudTravel Entity which is a deep copy of the current entity.
		///</summary>
		public virtual PgStudTravel DeepCopy()
		{
			return EntityHelper.Clone<PgStudTravel>(this as PgStudTravel);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as PgStudTravelEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new PgStudTravelEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as PgStudTravelEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(PgStudTravelColumn column)
		{
			switch(column)
			{
					case PgStudTravelColumn.PgStudTravelId:
					return entityData.PgStudTravelId != _originalData.PgStudTravelId;
					case PgStudTravelColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case PgStudTravelColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case PgStudTravelColumn.GsCountryNodeId:
					return entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
					case PgStudTravelColumn.UnivNameEn:
					return entityData.UnivNameEn != _originalData.UnivNameEn;
					case PgStudTravelColumn.Supervisor:
					return entityData.Supervisor != _originalData.Supervisor;
					case PgStudTravelColumn.RequestDate:
					return entityData.RequestDate != _originalData.RequestDate;
					case PgStudTravelColumn.ExpctdFrom:
					return entityData.ExpctdFrom != _originalData.ExpctdFrom;
					case PgStudTravelColumn.ExpctdTo:
					return entityData.ExpctdTo != _originalData.ExpctdTo;
					case PgStudTravelColumn.ActualFrom:
					return entityData.ActualFrom != _originalData.ActualFrom;
					case PgStudTravelColumn.ActualTo:
					return entityData.ActualTo != _originalData.ActualTo;
					case PgStudTravelColumn.SecurityApproveNo:
					return entityData.SecurityApproveNo != _originalData.SecurityApproveNo;
					case PgStudTravelColumn.SecurityApproveDate:
					return entityData.SecurityApproveDate != _originalData.SecurityApproveDate;
					case PgStudTravelColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case PgStudTravelColumn.IsLast:
					return entityData.IsLast != _originalData.IsLast;
					case PgStudTravelColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case PgStudTravelColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< PgStudTravelColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.PgStudTravelId != _originalData.PgStudTravelId;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.GsCountryNodeId != _originalData.GsCountryNodeId;
			result = result || entityData.UnivNameEn != _originalData.UnivNameEn;
			result = result || entityData.Supervisor != _originalData.Supervisor;
			result = result || entityData.RequestDate != _originalData.RequestDate;
			result = result || entityData.ExpctdFrom != _originalData.ExpctdFrom;
			result = result || entityData.ExpctdTo != _originalData.ExpctdTo;
			result = result || entityData.ActualFrom != _originalData.ActualFrom;
			result = result || entityData.ActualTo != _originalData.ActualTo;
			result = result || entityData.SecurityApproveNo != _originalData.SecurityApproveNo;
			result = result || entityData.SecurityApproveDate != _originalData.SecurityApproveDate;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.IsLast != _originalData.IsLast;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a PgStudTravel Entity with the original data.
		///</summary>
		public PgStudTravel GetOriginalEntity()
		{
			if (_originalData != null)
				return CreatePgStudTravel(
				_originalData.PgStudTravelId,
				_originalData.EdAcadYearId,
				_originalData.EdStudId,
				_originalData.GsCountryNodeId,
				_originalData.UnivNameEn,
				_originalData.Supervisor,
				_originalData.RequestDate,
				_originalData.ExpctdFrom,
				_originalData.ExpctdTo,
				_originalData.ActualFrom,
				_originalData.ActualTo,
				_originalData.SecurityApproveNo,
				_originalData.SecurityApproveDate,
				_originalData.Notes,
				_originalData.IsLast,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (PgStudTravel)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="PgStudTravelBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is PgStudTravelBase)
				return ValueEquals(this, (PgStudTravelBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="PgStudTravelBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.PgStudTravelId.GetHashCode() ^ 
					this.EdAcadYearId.GetHashCode() ^ 
					this.EdStudId.GetHashCode() ^ 
					((this.GsCountryNodeId == null) ? string.Empty : this.GsCountryNodeId.ToString()).GetHashCode() ^ 
					((this.UnivNameEn == null) ? string.Empty : this.UnivNameEn.ToString()).GetHashCode() ^ 
					((this.Supervisor == null) ? string.Empty : this.Supervisor.ToString()).GetHashCode() ^ 
					((this.RequestDate == null) ? string.Empty : this.RequestDate.ToString()).GetHashCode() ^ 
					((this.ExpctdFrom == null) ? string.Empty : this.ExpctdFrom.ToString()).GetHashCode() ^ 
					((this.ExpctdTo == null) ? string.Empty : this.ExpctdTo.ToString()).GetHashCode() ^ 
					((this.ActualFrom == null) ? string.Empty : this.ActualFrom.ToString()).GetHashCode() ^ 
					((this.ActualTo == null) ? string.Empty : this.ActualTo.ToString()).GetHashCode() ^ 
					((this.SecurityApproveNo == null) ? string.Empty : this.SecurityApproveNo.ToString()).GetHashCode() ^ 
					((this.SecurityApproveDate == null) ? string.Empty : this.SecurityApproveDate.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					this.IsLast.GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="PgStudTravelBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(PgStudTravelBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="PgStudTravelBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="PgStudTravelBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="PgStudTravelBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(PgStudTravelBase Object1, PgStudTravelBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.PgStudTravelId != Object2.PgStudTravelId)
				equal = false;
			if (Object1.EdAcadYearId != Object2.EdAcadYearId)
				equal = false;
			if (Object1.EdStudId != Object2.EdStudId)
				equal = false;
			if ( Object1.GsCountryNodeId != null && Object2.GsCountryNodeId != null )
			{
				if (Object1.GsCountryNodeId != Object2.GsCountryNodeId)
					equal = false;
			}
			else if (Object1.GsCountryNodeId == null ^ Object2.GsCountryNodeId == null )
			{
				equal = false;
			}
			if ( Object1.UnivNameEn != null && Object2.UnivNameEn != null )
			{
				if (Object1.UnivNameEn != Object2.UnivNameEn)
					equal = false;
			}
			else if (Object1.UnivNameEn == null ^ Object2.UnivNameEn == null )
			{
				equal = false;
			}
			if ( Object1.Supervisor != null && Object2.Supervisor != null )
			{
				if (Object1.Supervisor != Object2.Supervisor)
					equal = false;
			}
			else if (Object1.Supervisor == null ^ Object2.Supervisor == null )
			{
				equal = false;
			}
			if ( Object1.RequestDate != null && Object2.RequestDate != null )
			{
				if (Object1.RequestDate != Object2.RequestDate)
					equal = false;
			}
			else if (Object1.RequestDate == null ^ Object2.RequestDate == null )
			{
				equal = false;
			}
			if ( Object1.ExpctdFrom != null && Object2.ExpctdFrom != null )
			{
				if (Object1.ExpctdFrom != Object2.ExpctdFrom)
					equal = false;
			}
			else if (Object1.ExpctdFrom == null ^ Object2.ExpctdFrom == null )
			{
				equal = false;
			}
			if ( Object1.ExpctdTo != null && Object2.ExpctdTo != null )
			{
				if (Object1.ExpctdTo != Object2.ExpctdTo)
					equal = false;
			}
			else if (Object1.ExpctdTo == null ^ Object2.ExpctdTo == null )
			{
				equal = false;
			}
			if ( Object1.ActualFrom != null && Object2.ActualFrom != null )
			{
				if (Object1.ActualFrom != Object2.ActualFrom)
					equal = false;
			}
			else if (Object1.ActualFrom == null ^ Object2.ActualFrom == null )
			{
				equal = false;
			}
			if ( Object1.ActualTo != null && Object2.ActualTo != null )
			{
				if (Object1.ActualTo != Object2.ActualTo)
					equal = false;
			}
			else if (Object1.ActualTo == null ^ Object2.ActualTo == null )
			{
				equal = false;
			}
			if ( Object1.SecurityApproveNo != null && Object2.SecurityApproveNo != null )
			{
				if (Object1.SecurityApproveNo != Object2.SecurityApproveNo)
					equal = false;
			}
			else if (Object1.SecurityApproveNo == null ^ Object2.SecurityApproveNo == null )
			{
				equal = false;
			}
			if ( Object1.SecurityApproveDate != null && Object2.SecurityApproveDate != null )
			{
				if (Object1.SecurityApproveDate != Object2.SecurityApproveDate)
					equal = false;
			}
			else if (Object1.SecurityApproveDate == null ^ Object2.SecurityApproveDate == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if (Object1.IsLast != Object2.IsLast)
				equal = false;
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((PgStudTravelBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static PgStudTravelComparer GetComparer()
        {
            return new PgStudTravelComparer();
        }
        */

        // Comparer delegates back to PgStudTravel
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(PgStudTravel rhs, PgStudTravelColumn which)
        {
            switch (which)
            {
            	
            	
            	case PgStudTravelColumn.PgStudTravelId:
            		return this.PgStudTravelId.CompareTo(rhs.PgStudTravelId);
            		
            		                 
            	
            	
            	case PgStudTravelColumn.EdAcadYearId:
            		return this.EdAcadYearId.CompareTo(rhs.EdAcadYearId);
            		
            		                 
            	
            	
            	case PgStudTravelColumn.EdStudId:
            		return this.EdStudId.CompareTo(rhs.EdStudId);
            		
            		                 
            	
            	
            	case PgStudTravelColumn.GsCountryNodeId:
            		return this.GsCountryNodeId.Value.CompareTo(rhs.GsCountryNodeId.Value);
            		
            		                 
            	
            	
            	case PgStudTravelColumn.UnivNameEn:
            		return this.UnivNameEn.CompareTo(rhs.UnivNameEn);
            		
            		                 
            	
            	
            	case PgStudTravelColumn.Supervisor:
            		return this.Supervisor.CompareTo(rhs.Supervisor);
            		
            		                 
            	
            	
            	case PgStudTravelColumn.RequestDate:
            		return this.RequestDate.Value.CompareTo(rhs.RequestDate.Value);
            		
            		                 
            	
            	
            	case PgStudTravelColumn.ExpctdFrom:
            		return this.ExpctdFrom.Value.CompareTo(rhs.ExpctdFrom.Value);
            		
            		                 
            	
            	
            	case PgStudTravelColumn.ExpctdTo:
            		return this.ExpctdTo.Value.CompareTo(rhs.ExpctdTo.Value);
            		
            		                 
            	
            	
            	case PgStudTravelColumn.ActualFrom:
            		return this.ActualFrom.Value.CompareTo(rhs.ActualFrom.Value);
            		
            		                 
            	
            	
            	case PgStudTravelColumn.ActualTo:
            		return this.ActualTo.Value.CompareTo(rhs.ActualTo.Value);
            		
            		                 
            	
            	
            	case PgStudTravelColumn.SecurityApproveNo:
            		return this.SecurityApproveNo.Value.CompareTo(rhs.SecurityApproveNo.Value);
            		
            		                 
            	
            	
            	case PgStudTravelColumn.SecurityApproveDate:
            		return this.SecurityApproveDate.Value.CompareTo(rhs.SecurityApproveDate.Value);
            		
            		                 
            	
            	
            	case PgStudTravelColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case PgStudTravelColumn.IsLast:
            		return this.IsLast.CompareTo(rhs.IsLast);
            		
            		                 
            	
            	
            	case PgStudTravelColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case PgStudTravelColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<PgStudTravelKey> Members
		
		// member variable for the EntityId property
		private PgStudTravelKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual PgStudTravelKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new PgStudTravelKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("PgStudTravel")
					.Append("|").Append( this.PgStudTravelId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{18}{17}- PgStudTravelId: {0}{17}- EdAcadYearId: {1}{17}- EdStudId: {2}{17}- GsCountryNodeId: {3}{17}- UnivNameEn: {4}{17}- Supervisor: {5}{17}- RequestDate: {6}{17}- ExpctdFrom: {7}{17}- ExpctdTo: {8}{17}- ActualFrom: {9}{17}- ActualTo: {10}{17}- SecurityApproveNo: {11}{17}- SecurityApproveDate: {12}{17}- Notes: {13}{17}- IsLast: {14}{17}- SeUserId: {15}{17}- LastDate: {16}{17}{19}", 
				this.PgStudTravelId,
				this.EdAcadYearId,
				this.EdStudId,
				(this.GsCountryNodeId == null) ? string.Empty : this.GsCountryNodeId.ToString(),
				(this.UnivNameEn == null) ? string.Empty : this.UnivNameEn.ToString(),
				(this.Supervisor == null) ? string.Empty : this.Supervisor.ToString(),
				(this.RequestDate == null) ? string.Empty : this.RequestDate.ToString(),
				(this.ExpctdFrom == null) ? string.Empty : this.ExpctdFrom.ToString(),
				(this.ExpctdTo == null) ? string.Empty : this.ExpctdTo.ToString(),
				(this.ActualFrom == null) ? string.Empty : this.ActualFrom.ToString(),
				(this.ActualTo == null) ? string.Empty : this.ActualTo.ToString(),
				(this.SecurityApproveNo == null) ? string.Empty : this.SecurityApproveNo.ToString(),
				(this.SecurityApproveDate == null) ? string.Empty : this.SecurityApproveDate.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				this.IsLast,
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'PG_STUD_TRAVEL' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class PgStudTravelEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// PG_STUD_TRAVEL_ID : سفر الطلاب للخارج
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "PG_STUD_TRAVEL"</remarks>
		public System.Decimal PgStudTravelId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalPgStudTravelId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadYearId = 0.0m;
		
		/// <summary>
		/// ED_STUD_ID : ONLY PG STUD
		/// </summary>
		public System.Decimal		  EdStudId = 0.0m;
		
		/// <summary>
		/// GS_COUNTRY_NODE_ID : من جدول الدول (ولا تكون الدولة الحالية)
		/// </summary>
		public System.Decimal?		  GsCountryNodeId = null;
		
		/// <summary>
		/// UNIV_NAME_EN : الجامعة المسافر لها
		/// </summary>
		public System.String		  UnivNameEn = null;
		
		/// <summary>
		/// SUPERVISOR : اسم المشرف الاجنبى
		/// </summary>
		public System.String		  Supervisor = null;
		
		/// <summary>
		/// REQUEST_DATE : تاريخ مذكرة السفر
		/// </summary>
		public System.DateTime?		  RequestDate = null;
		
		/// <summary>
		/// EXPCTD_FROM : تاريخ بدء السفر المتوقع
		/// </summary>
		public System.DateTime?		  ExpctdFrom = null;
		
		/// <summary>
		/// EXPCTD_TO : تاريخ نهاية السفر المتوقع
		/// </summary>
		public System.DateTime?		  ExpctdTo = null;
		
		/// <summary>
		/// ACTUAL_FROM : تاريخ بدء السفر الفعلى
		/// </summary>
		public System.DateTime?		  ActualFrom = null;
		
		/// <summary>
		/// ACTUAL_TO : تاريخ نهاية السفر الفعلى
		/// </summary>
		public System.DateTime?		  ActualTo = null;
		
		/// <summary>
		/// SECURITY_APPROVE_NO : رقم الموافقة الأمنية للسفر
		/// </summary>
		public System.Decimal?		  SecurityApproveNo = null;
		
		/// <summary>
		/// SECURITY_APPROVE_DATE : تاريخ الموافقة الأمنية للسفر
		/// </summary>
		public System.DateTime?		  SecurityApproveDate = null;
		
		/// <summary>
		/// NOTES : ملاحظات
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// IS_LAST : اخر مد
		/// </summary>
		public System.Boolean		  IsLast = false;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		private GsCountryNode _gsCountryNodeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCountryNode"/>.
		/// </summary>
		/// <value>The source GsCountryNode for GsCountryNodeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCountryNode GsCountryNodeIdSource
      	{
            get { return this._gsCountryNodeIdSource; }
            set { this._gsCountryNodeIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region PgThesisStudApproveCollection
		
		private TList<PgThesisStudApprove> _pgThesisStudApprovePgStudTravelId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgThesisStudApprovePgStudTravelId
		/// </summary>
		
		public TList<PgThesisStudApprove> PgThesisStudApproveCollection
		{
			get
			{
				if (_pgThesisStudApprovePgStudTravelId == null)
				{
				_pgThesisStudApprovePgStudTravelId = new TList<PgThesisStudApprove>();
				}
	
				return _pgThesisStudApprovePgStudTravelId;
			}
			set { _pgThesisStudApprovePgStudTravelId = value; }
		}
		
		#endregion

		#region PgStudTravelExtendCollection
		
		private TList<PgStudTravelExtend> _pgStudTravelExtendPgStudTravelId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgStudTravelExtendPgStudTravelId
		/// </summary>
		
		public TList<PgStudTravelExtend> PgStudTravelExtendCollection
		{
			get
			{
				if (_pgStudTravelExtendPgStudTravelId == null)
				{
				_pgStudTravelExtendPgStudTravelId = new TList<PgStudTravelExtend>();
				}
	
				return _pgStudTravelExtendPgStudTravelId;
			}
			set { _pgStudTravelExtendPgStudTravelId = value; }
		}
		
		#endregion

		#region PgAttchdDocCollection
		
		private TList<PgAttchdDoc> _pgAttchdDocPgStudTravelId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _pgAttchdDocPgStudTravelId
		/// </summary>
		
		public TList<PgAttchdDoc> PgAttchdDocCollection
		{
			get
			{
				if (_pgAttchdDocPgStudTravelId == null)
				{
				_pgAttchdDocPgStudTravelId = new TList<PgAttchdDoc>();
				}
	
				return _pgAttchdDocPgStudTravelId;
			}
			set { _pgAttchdDocPgStudTravelId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			PgStudTravelEntityData _tmp = new PgStudTravelEntityData();
						
			_tmp.PgStudTravelId = this.PgStudTravelId;
			_tmp.OriginalPgStudTravelId = this.OriginalPgStudTravelId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.UnivNameEn = this.UnivNameEn;
			_tmp.Supervisor = this.Supervisor;
			_tmp.RequestDate = this.RequestDate;
			_tmp.ExpctdFrom = this.ExpctdFrom;
			_tmp.ExpctdTo = this.ExpctdTo;
			_tmp.ActualFrom = this.ActualFrom;
			_tmp.ActualTo = this.ActualTo;
			_tmp.SecurityApproveNo = this.SecurityApproveNo;
			_tmp.SecurityApproveDate = this.SecurityApproveDate;
			_tmp.Notes = this.Notes;
			_tmp.IsLast = this.IsLast;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			if (this.GsCountryNodeIdSource != null)
				_tmp.GsCountryNodeIdSource = MakeCopyOf(this.GsCountryNodeIdSource) as GsCountryNode;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._pgThesisStudApprovePgStudTravelId != null)
				_tmp.PgThesisStudApproveCollection = (TList<PgThesisStudApprove>) MakeCopyOf(this.PgThesisStudApproveCollection); 
			if (this._pgStudTravelExtendPgStudTravelId != null)
				_tmp.PgStudTravelExtendCollection = (TList<PgStudTravelExtend>) MakeCopyOf(this.PgStudTravelExtendCollection); 
			if (this._pgAttchdDocPgStudTravelId != null)
				_tmp.PgAttchdDocCollection = (TList<PgAttchdDoc>) MakeCopyOf(this.PgAttchdDocCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			PgStudTravelEntityData _tmp = new PgStudTravelEntityData();
						
			_tmp.PgStudTravelId = this.PgStudTravelId;
			_tmp.OriginalPgStudTravelId = this.OriginalPgStudTravelId;
			
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdStudId = this.EdStudId;
			_tmp.GsCountryNodeId = this.GsCountryNodeId;
			_tmp.UnivNameEn = this.UnivNameEn;
			_tmp.Supervisor = this.Supervisor;
			_tmp.RequestDate = this.RequestDate;
			_tmp.ExpctdFrom = this.ExpctdFrom;
			_tmp.ExpctdTo = this.ExpctdTo;
			_tmp.ActualFrom = this.ActualFrom;
			_tmp.ActualTo = this.ActualTo;
			_tmp.SecurityApproveNo = this.SecurityApproveNo;
			_tmp.SecurityApproveDate = this.SecurityApproveDate;
			_tmp.Notes = this.Notes;
			_tmp.IsLast = this.IsLast;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.GsCountryNodeIdSource != null && existingCopies.Contains(this.GsCountryNodeIdSource))
				_tmp.GsCountryNodeIdSource = existingCopies[this.GsCountryNodeIdSource] as GsCountryNode;
			else
				_tmp.GsCountryNodeIdSource = MakeCopyOf(this.GsCountryNodeIdSource, existingCopies) as GsCountryNode;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.PgThesisStudApproveCollection = (TList<PgThesisStudApprove>) MakeCopyOf(this.PgThesisStudApproveCollection, existingCopies); 
			_tmp.PgStudTravelExtendCollection = (TList<PgStudTravelExtend>) MakeCopyOf(this.PgStudTravelExtendCollection, existingCopies); 
			_tmp.PgAttchdDocCollection = (TList<PgAttchdDoc>) MakeCopyOf(this.PgAttchdDocCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgStudTravelColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(PgStudTravelColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgStudTravelColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(PgStudTravelColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgStudTravelColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(PgStudTravelColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				PgStudTravelEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new PgStudTravelEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PgStudTravelColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(PgStudTravelColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				PgStudTravelEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new PgStudTravelEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region PgStudTravelEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="PgStudTravel"/> object.
	/// </remarks>
	public class PgStudTravelEventArgs : System.EventArgs
	{
		private PgStudTravelColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the PgStudTravelEventArgs class.
		///</summary>
		public PgStudTravelEventArgs(PgStudTravelColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the PgStudTravelEventArgs class.
		///</summary>
		public PgStudTravelEventArgs(PgStudTravelColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The PgStudTravelColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="PgStudTravelColumn" />
		public PgStudTravelColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all PgStudTravel related events.
	///</summary>
	public delegate void PgStudTravelEventHandler(object sender, PgStudTravelEventArgs e);
	
	#region PgStudTravelComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class PgStudTravelComparer : System.Collections.Generic.IComparer<PgStudTravel>
	{
		PgStudTravelColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:PgStudTravelComparer"/> class.
        /// </summary>
		public PgStudTravelComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:PgStudTravelComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public PgStudTravelComparer(PgStudTravelColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="PgStudTravel"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="PgStudTravel"/> to compare.</param>
        /// <param name="b">The second <c>PgStudTravel</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(PgStudTravel a, PgStudTravel b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(PgStudTravel entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(PgStudTravel a, PgStudTravel b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public PgStudTravelColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region PgStudTravelKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="PgStudTravel"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class PgStudTravelKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the PgStudTravelKey class.
		/// </summary>
		public PgStudTravelKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the PgStudTravelKey class.
		/// </summary>
		public PgStudTravelKey(PgStudTravelBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.PgStudTravelId = entity.PgStudTravelId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the PgStudTravelKey class.
		/// </summary>
		public PgStudTravelKey(System.Decimal _pgStudTravelId)
		{
			#region Init Properties

			this.PgStudTravelId = _pgStudTravelId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private PgStudTravelBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public PgStudTravelBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the PgStudTravelId property
		private System.Decimal _pgStudTravelId;
		
		/// <summary>
		/// Gets or sets the PgStudTravelId property.
		/// </summary>
		public System.Decimal PgStudTravelId
		{
			get { return _pgStudTravelId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.PgStudTravelId = value;
				
				_pgStudTravelId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				PgStudTravelId = ( values["PgStudTravelId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["PgStudTravelId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("PgStudTravelId", PgStudTravelId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("PgStudTravelId: {0}{1}",
								PgStudTravelId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region PgStudTravelColumn Enum
	
	/// <summary>
	/// Enumerate the PgStudTravel columns.
	/// </summary>
	[Serializable]
	public enum PgStudTravelColumn : int
	{
		/// <summary>
		/// PgStudTravelId : سفر الطلاب للخارج
		/// </summary>
		[EnumTextValue("PG_STUD_TRAVEL_ID")]
		[ColumnEnum("PG_STUD_TRAVEL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		PgStudTravelId = 1,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadYearId = 2,
		/// <summary>
		/// EdStudId : ONLY PG STUD
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudId = 3,
		/// <summary>
		/// GsCountryNodeId : من جدول الدول (ولا تكون الدولة الحالية)
		/// </summary>
		[EnumTextValue("GS_COUNTRY_NODE_ID")]
		[ColumnEnum("GS_COUNTRY_NODE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCountryNodeId = 4,
		/// <summary>
		/// UnivNameEn : الجامعة المسافر لها
		/// </summary>
		[EnumTextValue("UNIV_NAME_EN")]
		[ColumnEnum("UNIV_NAME_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		UnivNameEn = 5,
		/// <summary>
		/// Supervisor : اسم المشرف الاجنبى
		/// </summary>
		[EnumTextValue("SUPERVISOR")]
		[ColumnEnum("SUPERVISOR", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		Supervisor = 6,
		/// <summary>
		/// RequestDate : تاريخ مذكرة السفر
		/// </summary>
		[EnumTextValue("REQUEST_DATE")]
		[ColumnEnum("REQUEST_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		RequestDate = 7,
		/// <summary>
		/// ExpctdFrom : تاريخ بدء السفر المتوقع
		/// </summary>
		[EnumTextValue("EXPCTD_FROM")]
		[ColumnEnum("EXPCTD_FROM", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		ExpctdFrom = 8,
		/// <summary>
		/// ExpctdTo : تاريخ نهاية السفر المتوقع
		/// </summary>
		[EnumTextValue("EXPCTD_TO")]
		[ColumnEnum("EXPCTD_TO", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		ExpctdTo = 9,
		/// <summary>
		/// ActualFrom : تاريخ بدء السفر الفعلى
		/// </summary>
		[EnumTextValue("ACTUAL_FROM")]
		[ColumnEnum("ACTUAL_FROM", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		ActualFrom = 10,
		/// <summary>
		/// ActualTo : تاريخ نهاية السفر الفعلى
		/// </summary>
		[EnumTextValue("ACTUAL_TO")]
		[ColumnEnum("ACTUAL_TO", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		ActualTo = 11,
		/// <summary>
		/// SecurityApproveNo : رقم الموافقة الأمنية للسفر
		/// </summary>
		[EnumTextValue("SECURITY_APPROVE_NO")]
		[ColumnEnum("SECURITY_APPROVE_NO", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SecurityApproveNo = 12,
		/// <summary>
		/// SecurityApproveDate : تاريخ الموافقة الأمنية للسفر
		/// </summary>
		[EnumTextValue("SECURITY_APPROVE_DATE")]
		[ColumnEnum("SECURITY_APPROVE_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		SecurityApproveDate = 13,
		/// <summary>
		/// Notes : ملاحظات
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 350)]
		Notes = 14,
		/// <summary>
		/// IsLast : اخر مد
		/// </summary>
		[EnumTextValue("IS_LAST")]
		[ColumnEnum("IS_LAST", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		IsLast = 15,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 16,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 17
	}//End enum

	#endregion PgStudTravelColumn Enum

} // end namespace
