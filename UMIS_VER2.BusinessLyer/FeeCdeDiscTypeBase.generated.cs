
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file FeeCdeDiscType.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'FEE_CDE_DISC_TYPE' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class FeeCdeDiscTypeBase : EntityBase, IFeeCdeDiscType, IEntityId<FeeCdeDiscTypeKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private FeeCdeDiscTypeEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private FeeCdeDiscTypeEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private FeeCdeDiscTypeEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<FeeCdeDiscType> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeCdeDiscTypeEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeCdeDiscTypeEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="FeeCdeDiscTypeBase"/> instance.
		///</summary>
		public FeeCdeDiscTypeBase()
		{
			this.entityData = new FeeCdeDiscTypeEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="FeeCdeDiscTypeBase"/> instance.
		///</summary>
		///<param name="_feeCdeDiscTypeId">انواع المنح والتخفيضات والمساعدات</param>
		///<param name="_descrAr">اسم التخفيض- المنحة</param>
		///<param name="_descrEn">اسم التخفيض- المنحة</param>
		///<param name="_discPrcnt">نسبة التخفيض من مصروفات دراسية قابلة للتخفيض</param>
		///<param name="_stopFlg"></param>
		///<param name="_discAmnt">قيمة التخفيض من مصروفات دراسية قابلة للتخفيض</param>
		///<param name="_discTypeFlg">قيمة-نسبة</param>
		///<param name="_asFacultyInfoId">الكلية- الجامعة</param>
		///<param name="_feeCdeDiscCatId">Category</param>
		///<param name="_feeCdeSchshipCatId">نوع المنحة</param>
		///<param name="_paramFrom">من قيمة او نسبة</param>
		///<param name="_paramTo">الى قيمة او نسبة</param>
		///<param name="_isActive">نشط</param>
		///<param name="_constFlg">ثابت لا يمكن حذف او تعديل</param>
		///<param name="_edAcadYearId">XX</param>
		///<param name="_asCodeDegreeClassId">IF MLT_DEGREE=1</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_edCdeQualCatId"></param>
		public FeeCdeDiscTypeBase(System.Decimal _feeCdeDiscTypeId, System.String _descrAr, 
			System.String _descrEn, System.Decimal? _discPrcnt, System.Decimal _stopFlg, 
			System.Decimal? _discAmnt, System.Int32? _discTypeFlg, System.Decimal? _asFacultyInfoId, 
			System.Int32? _feeCdeDiscCatId, System.Int32? _feeCdeSchshipCatId, System.Decimal? _paramFrom, 
			System.Decimal? _paramTo, System.Boolean? _isActive, System.Boolean? _constFlg, 
			System.Decimal? _edAcadYearId, System.Decimal? _asCodeDegreeClassId, System.Decimal? _seUserId, 
			System.DateTime? _lastDate, System.Decimal? _edCdeQualCatId)
		{
			this.entityData = new FeeCdeDiscTypeEntityData();
			this.backupData = null;

			this.FeeCdeDiscTypeId = _feeCdeDiscTypeId;
			this.DescrAr = _descrAr;
			this.DescrEn = _descrEn;
			this.DiscPrcnt = _discPrcnt;
			this.StopFlg = _stopFlg;
			this.DiscAmnt = _discAmnt;
			this.DiscTypeFlg = _discTypeFlg;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.FeeCdeDiscCatId = _feeCdeDiscCatId;
			this.FeeCdeSchshipCatId = _feeCdeSchshipCatId;
			this.ParamFrom = _paramFrom;
			this.ParamTo = _paramTo;
			this.IsActive = _isActive;
			this.ConstFlg = _constFlg;
			this.EdAcadYearId = _edAcadYearId;
			this.AsCodeDegreeClassId = _asCodeDegreeClassId;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
			this.EdCdeQualCatId = _edCdeQualCatId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="FeeCdeDiscType"/> instance.
		///</summary>
		///<param name="_feeCdeDiscTypeId">انواع المنح والتخفيضات والمساعدات</param>
		///<param name="_descrAr">اسم التخفيض- المنحة</param>
		///<param name="_descrEn">اسم التخفيض- المنحة</param>
		///<param name="_discPrcnt">نسبة التخفيض من مصروفات دراسية قابلة للتخفيض</param>
		///<param name="_stopFlg"></param>
		///<param name="_discAmnt">قيمة التخفيض من مصروفات دراسية قابلة للتخفيض</param>
		///<param name="_discTypeFlg">قيمة-نسبة</param>
		///<param name="_asFacultyInfoId">الكلية- الجامعة</param>
		///<param name="_feeCdeDiscCatId">Category</param>
		///<param name="_feeCdeSchshipCatId">نوع المنحة</param>
		///<param name="_paramFrom">من قيمة او نسبة</param>
		///<param name="_paramTo">الى قيمة او نسبة</param>
		///<param name="_isActive">نشط</param>
		///<param name="_constFlg">ثابت لا يمكن حذف او تعديل</param>
		///<param name="_edAcadYearId">XX</param>
		///<param name="_asCodeDegreeClassId">IF MLT_DEGREE=1</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		///<param name="_edCdeQualCatId"></param>
		public static FeeCdeDiscType CreateFeeCdeDiscType(System.Decimal _feeCdeDiscTypeId, System.String _descrAr, 
			System.String _descrEn, System.Decimal? _discPrcnt, System.Decimal _stopFlg, 
			System.Decimal? _discAmnt, System.Int32? _discTypeFlg, System.Decimal? _asFacultyInfoId, 
			System.Int32? _feeCdeDiscCatId, System.Int32? _feeCdeSchshipCatId, System.Decimal? _paramFrom, 
			System.Decimal? _paramTo, System.Boolean? _isActive, System.Boolean? _constFlg, 
			System.Decimal? _edAcadYearId, System.Decimal? _asCodeDegreeClassId, System.Decimal? _seUserId, 
			System.DateTime? _lastDate, System.Decimal? _edCdeQualCatId)
		{
			FeeCdeDiscType newFeeCdeDiscType = new FeeCdeDiscType();
			newFeeCdeDiscType.FeeCdeDiscTypeId = _feeCdeDiscTypeId;
			newFeeCdeDiscType.DescrAr = _descrAr;
			newFeeCdeDiscType.DescrEn = _descrEn;
			newFeeCdeDiscType.DiscPrcnt = _discPrcnt;
			newFeeCdeDiscType.StopFlg = _stopFlg;
			newFeeCdeDiscType.DiscAmnt = _discAmnt;
			newFeeCdeDiscType.DiscTypeFlg = _discTypeFlg;
			newFeeCdeDiscType.AsFacultyInfoId = _asFacultyInfoId;
			newFeeCdeDiscType.FeeCdeDiscCatId = _feeCdeDiscCatId;
			newFeeCdeDiscType.FeeCdeSchshipCatId = _feeCdeSchshipCatId;
			newFeeCdeDiscType.ParamFrom = _paramFrom;
			newFeeCdeDiscType.ParamTo = _paramTo;
			newFeeCdeDiscType.IsActive = _isActive;
			newFeeCdeDiscType.ConstFlg = _constFlg;
			newFeeCdeDiscType.EdAcadYearId = _edAcadYearId;
			newFeeCdeDiscType.AsCodeDegreeClassId = _asCodeDegreeClassId;
			newFeeCdeDiscType.SeUserId = _seUserId;
			newFeeCdeDiscType.LastDate = _lastDate;
			newFeeCdeDiscType.EdCdeQualCatId = _edCdeQualCatId;
			return newFeeCdeDiscType;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the FeeCdeDiscTypeId property. 
		///		انواع المنح والتخفيضات والمساعدات
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"انواع المنح والتخفيضات والمساعدات"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal FeeCdeDiscTypeId
		{
			get
			{
				return this.entityData.FeeCdeDiscTypeId; 
			}
			
			set
			{
				if (this.entityData.FeeCdeDiscTypeId == value)
					return;
					
				OnColumnChanging(FeeCdeDiscTypeColumn.FeeCdeDiscTypeId, this.entityData.FeeCdeDiscTypeId);
				this.entityData.FeeCdeDiscTypeId = value;
				this.EntityId.FeeCdeDiscTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCdeDiscTypeColumn.FeeCdeDiscTypeId, this.entityData.FeeCdeDiscTypeId);
				OnPropertyChanged("FeeCdeDiscTypeId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the FEE_CDE_DISC_TYPE_ID property.
		///		انواع المنح والتخفيضات والمساعدات
		/// </summary>
		/// <remarks>This is the original value of the FEE_CDE_DISC_TYPE_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalFeeCdeDiscTypeId
		{
			get { return this.entityData.OriginalFeeCdeDiscTypeId; }
			set { this.entityData.OriginalFeeCdeDiscTypeId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the DescrAr property. 
		///		اسم التخفيض- المنحة
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"اسم التخفيض- المنحة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String DescrAr
		{
			get
			{
				return this.entityData.DescrAr; 
			}
			
			set
			{
				if (this.entityData.DescrAr == value)
					return;
					
				OnColumnChanging(FeeCdeDiscTypeColumn.DescrAr, this.entityData.DescrAr);
				this.entityData.DescrAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCdeDiscTypeColumn.DescrAr, this.entityData.DescrAr);
				OnPropertyChanged("DescrAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DescrEn property. 
		///		اسم التخفيض- المنحة
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"اسم التخفيض- المنحة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 150)]
		public virtual System.String DescrEn
		{
			get
			{
				return this.entityData.DescrEn; 
			}
			
			set
			{
				if (this.entityData.DescrEn == value)
					return;
					
				OnColumnChanging(FeeCdeDiscTypeColumn.DescrEn, this.entityData.DescrEn);
				this.entityData.DescrEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCdeDiscTypeColumn.DescrEn, this.entityData.DescrEn);
				OnPropertyChanged("DescrEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DiscPrcnt property. 
		///		نسبة التخفيض من مصروفات دراسية قابلة للتخفيض
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDiscPrcntNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"نسبة التخفيض من مصروفات دراسية قابلة للتخفيض"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DiscPrcnt
		{
			get
			{
				return this.entityData.DiscPrcnt; 
			}
			
			set
			{
				if (this.entityData.DiscPrcnt == value)
					return;
					
				OnColumnChanging(FeeCdeDiscTypeColumn.DiscPrcnt, this.entityData.DiscPrcnt);
				this.entityData.DiscPrcnt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCdeDiscTypeColumn.DiscPrcnt, this.entityData.DiscPrcnt);
				OnPropertyChanged("DiscPrcnt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StopFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal StopFlg
		{
			get
			{
				return this.entityData.StopFlg; 
			}
			
			set
			{
				if (this.entityData.StopFlg == value)
					return;
					
				OnColumnChanging(FeeCdeDiscTypeColumn.StopFlg, this.entityData.StopFlg);
				this.entityData.StopFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCdeDiscTypeColumn.StopFlg, this.entityData.StopFlg);
				OnPropertyChanged("StopFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DiscAmnt property. 
		///		قيمة التخفيض من مصروفات دراسية قابلة للتخفيض
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDiscAmntNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"قيمة التخفيض من مصروفات دراسية قابلة للتخفيض"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DiscAmnt
		{
			get
			{
				return this.entityData.DiscAmnt; 
			}
			
			set
			{
				if (this.entityData.DiscAmnt == value)
					return;
					
				OnColumnChanging(FeeCdeDiscTypeColumn.DiscAmnt, this.entityData.DiscAmnt);
				this.entityData.DiscAmnt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCdeDiscTypeColumn.DiscAmnt, this.entityData.DiscAmnt);
				OnPropertyChanged("DiscAmnt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DiscTypeFlg property. 
		///		قيمة-نسبة
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDiscTypeFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"قيمة-نسبة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DiscTypeFlg
		{
			get
			{
				return this.entityData.DiscTypeFlg; 
			}
			
			set
			{
				if (this.entityData.DiscTypeFlg == value)
					return;
					
				OnColumnChanging(FeeCdeDiscTypeColumn.DiscTypeFlg, this.entityData.DiscTypeFlg);
				this.entityData.DiscTypeFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCdeDiscTypeColumn.DiscTypeFlg, this.entityData.DiscTypeFlg);
				OnPropertyChanged("DiscTypeFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		الكلية- الجامعة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"الكلية- الجامعة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(FeeCdeDiscTypeColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCdeDiscTypeColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeCdeDiscCatId property. 
		///		Category
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsFeeCdeDiscCatIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Category"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? FeeCdeDiscCatId
		{
			get
			{
				return this.entityData.FeeCdeDiscCatId; 
			}
			
			set
			{
				if (this.entityData.FeeCdeDiscCatId == value)
					return;
					
				OnColumnChanging(FeeCdeDiscTypeColumn.FeeCdeDiscCatId, this.entityData.FeeCdeDiscCatId);
				this.entityData.FeeCdeDiscCatId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCdeDiscTypeColumn.FeeCdeDiscCatId, this.entityData.FeeCdeDiscCatId);
				OnPropertyChanged("FeeCdeDiscCatId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeCdeSchshipCatId property. 
		///		نوع المنحة
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsFeeCdeSchshipCatIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"نوع المنحة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? FeeCdeSchshipCatId
		{
			get
			{
				return this.entityData.FeeCdeSchshipCatId; 
			}
			
			set
			{
				if (this.entityData.FeeCdeSchshipCatId == value)
					return;
					
				OnColumnChanging(FeeCdeDiscTypeColumn.FeeCdeSchshipCatId, this.entityData.FeeCdeSchshipCatId);
				this.entityData.FeeCdeSchshipCatId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCdeDiscTypeColumn.FeeCdeSchshipCatId, this.entityData.FeeCdeSchshipCatId);
				OnPropertyChanged("FeeCdeSchshipCatId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ParamFrom property. 
		///		من قيمة او نسبة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsParamFromNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"من قيمة او نسبة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ParamFrom
		{
			get
			{
				return this.entityData.ParamFrom; 
			}
			
			set
			{
				if (this.entityData.ParamFrom == value)
					return;
					
				OnColumnChanging(FeeCdeDiscTypeColumn.ParamFrom, this.entityData.ParamFrom);
				this.entityData.ParamFrom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCdeDiscTypeColumn.ParamFrom, this.entityData.ParamFrom);
				OnPropertyChanged("ParamFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ParamTo property. 
		///		الى قيمة او نسبة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsParamToNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"الى قيمة او نسبة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ParamTo
		{
			get
			{
				return this.entityData.ParamTo; 
			}
			
			set
			{
				if (this.entityData.ParamTo == value)
					return;
					
				OnColumnChanging(FeeCdeDiscTypeColumn.ParamTo, this.entityData.ParamTo);
				this.entityData.ParamTo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCdeDiscTypeColumn.ParamTo, this.entityData.ParamTo);
				OnPropertyChanged("ParamTo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsActive property. 
		///		نشط
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsActiveNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"نشط"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsActive
		{
			get
			{
				return this.entityData.IsActive; 
			}
			
			set
			{
				if (this.entityData.IsActive == value)
					return;
					
				OnColumnChanging(FeeCdeDiscTypeColumn.IsActive, this.entityData.IsActive);
				this.entityData.IsActive = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCdeDiscTypeColumn.IsActive, this.entityData.IsActive);
				OnPropertyChanged("IsActive");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ConstFlg property. 
		///		ثابت لا يمكن حذف او تعديل
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsConstFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"ثابت لا يمكن حذف او تعديل"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ConstFlg
		{
			get
			{
				return this.entityData.ConstFlg; 
			}
			
			set
			{
				if (this.entityData.ConstFlg == value)
					return;
					
				OnColumnChanging(FeeCdeDiscTypeColumn.ConstFlg, this.entityData.ConstFlg);
				this.entityData.ConstFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCdeDiscTypeColumn.ConstFlg, this.entityData.ConstFlg);
				OnPropertyChanged("ConstFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		XX
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdAcadYearIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XX"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(FeeCdeDiscTypeColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCdeDiscTypeColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeClassId property. 
		///		IF MLT_DEGREE=1
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeClassIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"IF MLT_DEGREE=1"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeClassId
		{
			get
			{
				return this.entityData.AsCodeDegreeClassId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeClassId == value)
					return;
					
				OnColumnChanging(FeeCdeDiscTypeColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				this.entityData.AsCodeDegreeClassId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCdeDiscTypeColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				OnPropertyChanged("AsCodeDegreeClassId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(FeeCdeDiscTypeColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCdeDiscTypeColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(FeeCdeDiscTypeColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCdeDiscTypeColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCdeQualCatId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCdeQualCatIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCdeQualCatId
		{
			get
			{
				return this.entityData.EdCdeQualCatId; 
			}
			
			set
			{
				if (this.entityData.EdCdeQualCatId == value)
					return;
					
				OnColumnChanging(FeeCdeDiscTypeColumn.EdCdeQualCatId, this.entityData.EdCdeQualCatId);
				this.entityData.EdCdeQualCatId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeCdeDiscTypeColumn.EdCdeQualCatId, this.entityData.EdCdeQualCatId);
				OnPropertyChanged("EdCdeQualCatId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return entityData.AsCodeDegreeClassIdSource; }
            set { entityData.AsCodeDegreeClassIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeQualCat"/>.
		/// </summary>
		/// <value>The source EdCdeQualCat for EdCdeQualCatId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCdeQualCat EdCdeQualCatIdSource
      	{
            get { return entityData.EdCdeQualCatIdSource; }
            set { entityData.EdCdeQualCatIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeCdeDiscCat"/>.
		/// </summary>
		/// <value>The source FeeCdeDiscCat for FeeCdeDiscCatId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeCdeDiscCat FeeCdeDiscCatIdSource
      	{
            get { return entityData.FeeCdeDiscCatIdSource; }
            set { entityData.FeeCdeDiscCatIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="FeeCdeSchshipCat"/>.
		/// </summary>
		/// <value>The source FeeCdeSchshipCat for FeeCdeSchshipCatId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual FeeCdeSchshipCat FeeCdeSchshipCatIdSource
      	{
            get { return entityData.FeeCdeSchshipCatIdSource; }
            set { entityData.FeeCdeSchshipCatIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of AdmAppRegHistory objects
		///	which are related to this object through the relation FK_ADM_APP_REG_HISTORY_FEE_CDE_DISC_TYPE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmAppRegHistory> AdmAppRegHistoryCollection
		{
			get { return entityData.AdmAppRegHistoryCollection; }
			set { entityData.AdmAppRegHistoryCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeStudDisc objects
		///	which are related to this object through the relation FK_FEE_STUD_DISC_FEE_CDE_DISC_TYPE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeStudDisc> FeeStudDiscCollection
		{
			get { return entityData.FeeStudDiscCollection; }
			set { entityData.FeeStudDiscCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrAr", "Descr Ar", 150));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DescrEn", "Descr En", 150));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "FEE_CDE_DISC_TYPE"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"FEE_CDE_DISC_TYPE_ID", "DESCR_AR", "DESCR_EN", "DISC_PRCNT", "STOP_FLG", "DISC_AMNT", "DISC_TYPE_FLG", "AS_FACULTY_INFO_ID", "FEE_CDE_DISC_CAT_ID", "FEE_CDE_SCHSHIP_CAT_ID", "PARAM_FROM", "PARAM_TO", "IS_ACTIVE", "CONST_FLG", "ED_ACAD_YEAR_ID", "AS_CODE_DEGREE_CLASS_ID", "SE_USER_ID", "LAST_DATE", "ED_CDE_QUAL_CAT_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as FeeCdeDiscTypeEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (FeeCdeDiscType) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<FeeCdeDiscType>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as FeeCdeDiscType);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed FeeCdeDiscType Entity 
		///</summary>
		protected virtual FeeCdeDiscType Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			FeeCdeDiscType copy = new FeeCdeDiscType();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.FeeCdeDiscTypeId = this.FeeCdeDiscTypeId;
					copy.OriginalFeeCdeDiscTypeId = this.OriginalFeeCdeDiscTypeId;
				copy.DescrAr = this.DescrAr;
				copy.DescrEn = this.DescrEn;
				copy.DiscPrcnt = this.DiscPrcnt;
				copy.StopFlg = this.StopFlg;
				copy.DiscAmnt = this.DiscAmnt;
				copy.DiscTypeFlg = this.DiscTypeFlg;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.FeeCdeDiscCatId = this.FeeCdeDiscCatId;
				copy.FeeCdeSchshipCatId = this.FeeCdeSchshipCatId;
				copy.ParamFrom = this.ParamFrom;
				copy.ParamTo = this.ParamTo;
				copy.IsActive = this.IsActive;
				copy.ConstFlg = this.ConstFlg;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
				copy.EdCdeQualCatId = this.EdCdeQualCatId;
			
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				copy.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				copy.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCdeQualCatIdSource != null && existingCopies.Contains(this.EdCdeQualCatIdSource))
				copy.EdCdeQualCatIdSource = existingCopies[this.EdCdeQualCatIdSource] as EdCdeQualCat;
			else
				copy.EdCdeQualCatIdSource = MakeCopyOf(this.EdCdeQualCatIdSource, existingCopies) as EdCdeQualCat;
			if (this.FeeCdeDiscCatIdSource != null && existingCopies.Contains(this.FeeCdeDiscCatIdSource))
				copy.FeeCdeDiscCatIdSource = existingCopies[this.FeeCdeDiscCatIdSource] as FeeCdeDiscCat;
			else
				copy.FeeCdeDiscCatIdSource = MakeCopyOf(this.FeeCdeDiscCatIdSource, existingCopies) as FeeCdeDiscCat;
			if (this.FeeCdeSchshipCatIdSource != null && existingCopies.Contains(this.FeeCdeSchshipCatIdSource))
				copy.FeeCdeSchshipCatIdSource = existingCopies[this.FeeCdeSchshipCatIdSource] as FeeCdeSchshipCat;
			else
				copy.FeeCdeSchshipCatIdSource = MakeCopyOf(this.FeeCdeSchshipCatIdSource, existingCopies) as FeeCdeSchshipCat;
		
			//deep copy nested objects
			copy.AdmAppRegHistoryCollection = (TList<AdmAppRegHistory>) MakeCopyOf(this.AdmAppRegHistoryCollection, existingCopies); 
			copy.FeeStudDiscCollection = (TList<FeeStudDisc>) MakeCopyOf(this.FeeStudDiscCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed FeeCdeDiscType Entity 
		///</summary>
		public virtual FeeCdeDiscType Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed FeeCdeDiscType Entity which is a deep copy of the current entity.
		///</summary>
		public virtual FeeCdeDiscType DeepCopy()
		{
			return EntityHelper.Clone<FeeCdeDiscType>(this as FeeCdeDiscType);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as FeeCdeDiscTypeEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new FeeCdeDiscTypeEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as FeeCdeDiscTypeEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(FeeCdeDiscTypeColumn column)
		{
			switch(column)
			{
					case FeeCdeDiscTypeColumn.FeeCdeDiscTypeId:
					return entityData.FeeCdeDiscTypeId != _originalData.FeeCdeDiscTypeId;
					case FeeCdeDiscTypeColumn.DescrAr:
					return entityData.DescrAr != _originalData.DescrAr;
					case FeeCdeDiscTypeColumn.DescrEn:
					return entityData.DescrEn != _originalData.DescrEn;
					case FeeCdeDiscTypeColumn.DiscPrcnt:
					return entityData.DiscPrcnt != _originalData.DiscPrcnt;
					case FeeCdeDiscTypeColumn.StopFlg:
					return entityData.StopFlg != _originalData.StopFlg;
					case FeeCdeDiscTypeColumn.DiscAmnt:
					return entityData.DiscAmnt != _originalData.DiscAmnt;
					case FeeCdeDiscTypeColumn.DiscTypeFlg:
					return entityData.DiscTypeFlg != _originalData.DiscTypeFlg;
					case FeeCdeDiscTypeColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case FeeCdeDiscTypeColumn.FeeCdeDiscCatId:
					return entityData.FeeCdeDiscCatId != _originalData.FeeCdeDiscCatId;
					case FeeCdeDiscTypeColumn.FeeCdeSchshipCatId:
					return entityData.FeeCdeSchshipCatId != _originalData.FeeCdeSchshipCatId;
					case FeeCdeDiscTypeColumn.ParamFrom:
					return entityData.ParamFrom != _originalData.ParamFrom;
					case FeeCdeDiscTypeColumn.ParamTo:
					return entityData.ParamTo != _originalData.ParamTo;
					case FeeCdeDiscTypeColumn.IsActive:
					return entityData.IsActive != _originalData.IsActive;
					case FeeCdeDiscTypeColumn.ConstFlg:
					return entityData.ConstFlg != _originalData.ConstFlg;
					case FeeCdeDiscTypeColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case FeeCdeDiscTypeColumn.AsCodeDegreeClassId:
					return entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
					case FeeCdeDiscTypeColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case FeeCdeDiscTypeColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case FeeCdeDiscTypeColumn.EdCdeQualCatId:
					return entityData.EdCdeQualCatId != _originalData.EdCdeQualCatId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< FeeCdeDiscTypeColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.FeeCdeDiscTypeId != _originalData.FeeCdeDiscTypeId;
			result = result || entityData.DescrAr != _originalData.DescrAr;
			result = result || entityData.DescrEn != _originalData.DescrEn;
			result = result || entityData.DiscPrcnt != _originalData.DiscPrcnt;
			result = result || entityData.StopFlg != _originalData.StopFlg;
			result = result || entityData.DiscAmnt != _originalData.DiscAmnt;
			result = result || entityData.DiscTypeFlg != _originalData.DiscTypeFlg;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.FeeCdeDiscCatId != _originalData.FeeCdeDiscCatId;
			result = result || entityData.FeeCdeSchshipCatId != _originalData.FeeCdeSchshipCatId;
			result = result || entityData.ParamFrom != _originalData.ParamFrom;
			result = result || entityData.ParamTo != _originalData.ParamTo;
			result = result || entityData.IsActive != _originalData.IsActive;
			result = result || entityData.ConstFlg != _originalData.ConstFlg;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.EdCdeQualCatId != _originalData.EdCdeQualCatId;
			return result;
		}	
		
		///<summary>
		///  Returns a FeeCdeDiscType Entity with the original data.
		///</summary>
		public FeeCdeDiscType GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateFeeCdeDiscType(
				_originalData.FeeCdeDiscTypeId,
				_originalData.DescrAr,
				_originalData.DescrEn,
				_originalData.DiscPrcnt,
				_originalData.StopFlg,
				_originalData.DiscAmnt,
				_originalData.DiscTypeFlg,
				_originalData.AsFacultyInfoId,
				_originalData.FeeCdeDiscCatId,
				_originalData.FeeCdeSchshipCatId,
				_originalData.ParamFrom,
				_originalData.ParamTo,
				_originalData.IsActive,
				_originalData.ConstFlg,
				_originalData.EdAcadYearId,
				_originalData.AsCodeDegreeClassId,
				_originalData.SeUserId,
				_originalData.LastDate,
				_originalData.EdCdeQualCatId
				);
				
			return (FeeCdeDiscType)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="FeeCdeDiscTypeBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is FeeCdeDiscTypeBase)
				return ValueEquals(this, (FeeCdeDiscTypeBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="FeeCdeDiscTypeBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.FeeCdeDiscTypeId.GetHashCode() ^ 
					((this.DescrAr == null) ? string.Empty : this.DescrAr.ToString()).GetHashCode() ^ 
					((this.DescrEn == null) ? string.Empty : this.DescrEn.ToString()).GetHashCode() ^ 
					((this.DiscPrcnt == null) ? string.Empty : this.DiscPrcnt.ToString()).GetHashCode() ^ 
					this.StopFlg.GetHashCode() ^ 
					((this.DiscAmnt == null) ? string.Empty : this.DiscAmnt.ToString()).GetHashCode() ^ 
					((this.DiscTypeFlg == null) ? string.Empty : this.DiscTypeFlg.ToString()).GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					((this.FeeCdeDiscCatId == null) ? string.Empty : this.FeeCdeDiscCatId.ToString()).GetHashCode() ^ 
					((this.FeeCdeSchshipCatId == null) ? string.Empty : this.FeeCdeSchshipCatId.ToString()).GetHashCode() ^ 
					((this.ParamFrom == null) ? string.Empty : this.ParamFrom.ToString()).GetHashCode() ^ 
					((this.ParamTo == null) ? string.Empty : this.ParamTo.ToString()).GetHashCode() ^ 
					((this.IsActive == null) ? string.Empty : this.IsActive.ToString()).GetHashCode() ^ 
					((this.ConstFlg == null) ? string.Empty : this.ConstFlg.ToString()).GetHashCode() ^ 
					((this.EdAcadYearId == null) ? string.Empty : this.EdAcadYearId.ToString()).GetHashCode() ^ 
					((this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.EdCdeQualCatId == null) ? string.Empty : this.EdCdeQualCatId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="FeeCdeDiscTypeBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(FeeCdeDiscTypeBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="FeeCdeDiscTypeBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="FeeCdeDiscTypeBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="FeeCdeDiscTypeBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(FeeCdeDiscTypeBase Object1, FeeCdeDiscTypeBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.FeeCdeDiscTypeId != Object2.FeeCdeDiscTypeId)
				equal = false;
			if ( Object1.DescrAr != null && Object2.DescrAr != null )
			{
				if (Object1.DescrAr != Object2.DescrAr)
					equal = false;
			}
			else if (Object1.DescrAr == null ^ Object2.DescrAr == null )
			{
				equal = false;
			}
			if ( Object1.DescrEn != null && Object2.DescrEn != null )
			{
				if (Object1.DescrEn != Object2.DescrEn)
					equal = false;
			}
			else if (Object1.DescrEn == null ^ Object2.DescrEn == null )
			{
				equal = false;
			}
			if ( Object1.DiscPrcnt != null && Object2.DiscPrcnt != null )
			{
				if (Object1.DiscPrcnt != Object2.DiscPrcnt)
					equal = false;
			}
			else if (Object1.DiscPrcnt == null ^ Object2.DiscPrcnt == null )
			{
				equal = false;
			}
			if (Object1.StopFlg != Object2.StopFlg)
				equal = false;
			if ( Object1.DiscAmnt != null && Object2.DiscAmnt != null )
			{
				if (Object1.DiscAmnt != Object2.DiscAmnt)
					equal = false;
			}
			else if (Object1.DiscAmnt == null ^ Object2.DiscAmnt == null )
			{
				equal = false;
			}
			if ( Object1.DiscTypeFlg != null && Object2.DiscTypeFlg != null )
			{
				if (Object1.DiscTypeFlg != Object2.DiscTypeFlg)
					equal = false;
			}
			else if (Object1.DiscTypeFlg == null ^ Object2.DiscTypeFlg == null )
			{
				equal = false;
			}
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if ( Object1.FeeCdeDiscCatId != null && Object2.FeeCdeDiscCatId != null )
			{
				if (Object1.FeeCdeDiscCatId != Object2.FeeCdeDiscCatId)
					equal = false;
			}
			else if (Object1.FeeCdeDiscCatId == null ^ Object2.FeeCdeDiscCatId == null )
			{
				equal = false;
			}
			if ( Object1.FeeCdeSchshipCatId != null && Object2.FeeCdeSchshipCatId != null )
			{
				if (Object1.FeeCdeSchshipCatId != Object2.FeeCdeSchshipCatId)
					equal = false;
			}
			else if (Object1.FeeCdeSchshipCatId == null ^ Object2.FeeCdeSchshipCatId == null )
			{
				equal = false;
			}
			if ( Object1.ParamFrom != null && Object2.ParamFrom != null )
			{
				if (Object1.ParamFrom != Object2.ParamFrom)
					equal = false;
			}
			else if (Object1.ParamFrom == null ^ Object2.ParamFrom == null )
			{
				equal = false;
			}
			if ( Object1.ParamTo != null && Object2.ParamTo != null )
			{
				if (Object1.ParamTo != Object2.ParamTo)
					equal = false;
			}
			else if (Object1.ParamTo == null ^ Object2.ParamTo == null )
			{
				equal = false;
			}
			if ( Object1.IsActive != null && Object2.IsActive != null )
			{
				if (Object1.IsActive != Object2.IsActive)
					equal = false;
			}
			else if (Object1.IsActive == null ^ Object2.IsActive == null )
			{
				equal = false;
			}
			if ( Object1.ConstFlg != null && Object2.ConstFlg != null )
			{
				if (Object1.ConstFlg != Object2.ConstFlg)
					equal = false;
			}
			else if (Object1.ConstFlg == null ^ Object2.ConstFlg == null )
			{
				equal = false;
			}
			if ( Object1.EdAcadYearId != null && Object2.EdAcadYearId != null )
			{
				if (Object1.EdAcadYearId != Object2.EdAcadYearId)
					equal = false;
			}
			else if (Object1.EdAcadYearId == null ^ Object2.EdAcadYearId == null )
			{
				equal = false;
			}
			if ( Object1.AsCodeDegreeClassId != null && Object2.AsCodeDegreeClassId != null )
			{
				if (Object1.AsCodeDegreeClassId != Object2.AsCodeDegreeClassId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeClassId == null ^ Object2.AsCodeDegreeClassId == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.EdCdeQualCatId != null && Object2.EdCdeQualCatId != null )
			{
				if (Object1.EdCdeQualCatId != Object2.EdCdeQualCatId)
					equal = false;
			}
			else if (Object1.EdCdeQualCatId == null ^ Object2.EdCdeQualCatId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((FeeCdeDiscTypeBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static FeeCdeDiscTypeComparer GetComparer()
        {
            return new FeeCdeDiscTypeComparer();
        }
        */

        // Comparer delegates back to FeeCdeDiscType
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(FeeCdeDiscType rhs, FeeCdeDiscTypeColumn which)
        {
            switch (which)
            {
            	
            	
            	case FeeCdeDiscTypeColumn.FeeCdeDiscTypeId:
            		return this.FeeCdeDiscTypeId.CompareTo(rhs.FeeCdeDiscTypeId);
            		
            		                 
            	
            	
            	case FeeCdeDiscTypeColumn.DescrAr:
            		return this.DescrAr.CompareTo(rhs.DescrAr);
            		
            		                 
            	
            	
            	case FeeCdeDiscTypeColumn.DescrEn:
            		return this.DescrEn.CompareTo(rhs.DescrEn);
            		
            		                 
            	
            	
            	case FeeCdeDiscTypeColumn.DiscPrcnt:
            		return this.DiscPrcnt.Value.CompareTo(rhs.DiscPrcnt.Value);
            		
            		                 
            	
            	
            	case FeeCdeDiscTypeColumn.StopFlg:
            		return this.StopFlg.CompareTo(rhs.StopFlg);
            		
            		                 
            	
            	
            	case FeeCdeDiscTypeColumn.DiscAmnt:
            		return this.DiscAmnt.Value.CompareTo(rhs.DiscAmnt.Value);
            		
            		                 
            	
            	
            	case FeeCdeDiscTypeColumn.DiscTypeFlg:
            		return this.DiscTypeFlg.Value.CompareTo(rhs.DiscTypeFlg.Value);
            		
            		                 
            	
            	
            	case FeeCdeDiscTypeColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case FeeCdeDiscTypeColumn.FeeCdeDiscCatId:
            		return this.FeeCdeDiscCatId.Value.CompareTo(rhs.FeeCdeDiscCatId.Value);
            		
            		                 
            	
            	
            	case FeeCdeDiscTypeColumn.FeeCdeSchshipCatId:
            		return this.FeeCdeSchshipCatId.Value.CompareTo(rhs.FeeCdeSchshipCatId.Value);
            		
            		                 
            	
            	
            	case FeeCdeDiscTypeColumn.ParamFrom:
            		return this.ParamFrom.Value.CompareTo(rhs.ParamFrom.Value);
            		
            		                 
            	
            	
            	case FeeCdeDiscTypeColumn.ParamTo:
            		return this.ParamTo.Value.CompareTo(rhs.ParamTo.Value);
            		
            		                 
            	
            	
            	case FeeCdeDiscTypeColumn.IsActive:
            		return this.IsActive.Value.CompareTo(rhs.IsActive.Value);
            		
            		                 
            	
            	
            	case FeeCdeDiscTypeColumn.ConstFlg:
            		return this.ConstFlg.Value.CompareTo(rhs.ConstFlg.Value);
            		
            		                 
            	
            	
            	case FeeCdeDiscTypeColumn.EdAcadYearId:
            		return this.EdAcadYearId.Value.CompareTo(rhs.EdAcadYearId.Value);
            		
            		                 
            	
            	
            	case FeeCdeDiscTypeColumn.AsCodeDegreeClassId:
            		return this.AsCodeDegreeClassId.Value.CompareTo(rhs.AsCodeDegreeClassId.Value);
            		
            		                 
            	
            	
            	case FeeCdeDiscTypeColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case FeeCdeDiscTypeColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case FeeCdeDiscTypeColumn.EdCdeQualCatId:
            		return this.EdCdeQualCatId.Value.CompareTo(rhs.EdCdeQualCatId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<FeeCdeDiscTypeKey> Members
		
		// member variable for the EntityId property
		private FeeCdeDiscTypeKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual FeeCdeDiscTypeKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new FeeCdeDiscTypeKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("FeeCdeDiscType")
					.Append("|").Append( this.FeeCdeDiscTypeId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{20}{19}- FeeCdeDiscTypeId: {0}{19}- DescrAr: {1}{19}- DescrEn: {2}{19}- DiscPrcnt: {3}{19}- StopFlg: {4}{19}- DiscAmnt: {5}{19}- DiscTypeFlg: {6}{19}- AsFacultyInfoId: {7}{19}- FeeCdeDiscCatId: {8}{19}- FeeCdeSchshipCatId: {9}{19}- ParamFrom: {10}{19}- ParamTo: {11}{19}- IsActive: {12}{19}- ConstFlg: {13}{19}- EdAcadYearId: {14}{19}- AsCodeDegreeClassId: {15}{19}- SeUserId: {16}{19}- LastDate: {17}{19}- EdCdeQualCatId: {18}{19}{21}", 
				this.FeeCdeDiscTypeId,
				(this.DescrAr == null) ? string.Empty : this.DescrAr.ToString(),
				(this.DescrEn == null) ? string.Empty : this.DescrEn.ToString(),
				(this.DiscPrcnt == null) ? string.Empty : this.DiscPrcnt.ToString(),
				this.StopFlg,
				(this.DiscAmnt == null) ? string.Empty : this.DiscAmnt.ToString(),
				(this.DiscTypeFlg == null) ? string.Empty : this.DiscTypeFlg.ToString(),
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				(this.FeeCdeDiscCatId == null) ? string.Empty : this.FeeCdeDiscCatId.ToString(),
				(this.FeeCdeSchshipCatId == null) ? string.Empty : this.FeeCdeSchshipCatId.ToString(),
				(this.ParamFrom == null) ? string.Empty : this.ParamFrom.ToString(),
				(this.ParamTo == null) ? string.Empty : this.ParamTo.ToString(),
				(this.IsActive == null) ? string.Empty : this.IsActive.ToString(),
				(this.ConstFlg == null) ? string.Empty : this.ConstFlg.ToString(),
				(this.EdAcadYearId == null) ? string.Empty : this.EdAcadYearId.ToString(),
				(this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.EdCdeQualCatId == null) ? string.Empty : this.EdCdeQualCatId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'FEE_CDE_DISC_TYPE' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class FeeCdeDiscTypeEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// FEE_CDE_DISC_TYPE_ID : انواع المنح والتخفيضات والمساعدات
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "FEE_CDE_DISC_TYPE"</remarks>
		public System.Decimal FeeCdeDiscTypeId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalFeeCdeDiscTypeId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// DESCR_AR : اسم التخفيض- المنحة
		/// </summary>
		public System.String		  DescrAr = null;
		
		/// <summary>
		/// DESCR_EN : اسم التخفيض- المنحة
		/// </summary>
		public System.String		  DescrEn = null;
		
		/// <summary>
		/// DISC_PRCNT : نسبة التخفيض من مصروفات دراسية قابلة للتخفيض
		/// </summary>
		public System.Decimal?		  DiscPrcnt = null;
		
		/// <summary>
		/// STOP_FLG : 
		/// </summary>
		public System.Decimal		  StopFlg = 0.0m;
		
		/// <summary>
		/// DISC_AMNT : قيمة التخفيض من مصروفات دراسية قابلة للتخفيض
		/// </summary>
		public System.Decimal?		  DiscAmnt = null;
		
		/// <summary>
		/// DISC_TYPE_FLG : قيمة-نسبة
		/// </summary>
		public System.Int32?		  DiscTypeFlg = null;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : الكلية- الجامعة
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// FEE_CDE_DISC_CAT_ID : Category
		/// </summary>
		public System.Int32?		  FeeCdeDiscCatId = null;
		
		/// <summary>
		/// FEE_CDE_SCHSHIP_CAT_ID : نوع المنحة
		/// </summary>
		public System.Int32?		  FeeCdeSchshipCatId = null;
		
		/// <summary>
		/// PARAM_FROM : من قيمة او نسبة
		/// </summary>
		public System.Decimal?		  ParamFrom = null;
		
		/// <summary>
		/// PARAM_TO : الى قيمة او نسبة
		/// </summary>
		public System.Decimal?		  ParamTo = null;
		
		/// <summary>
		/// IS_ACTIVE : نشط
		/// </summary>
		public System.Boolean?		  IsActive = null;
		
		/// <summary>
		/// CONST_FLG : ثابت لا يمكن حذف او تعديل
		/// </summary>
		public System.Boolean?		  ConstFlg = null;
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : XX
		/// </summary>
		public System.Decimal?		  EdAcadYearId = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_CLASS_ID : IF MLT_DEGREE=1
		/// </summary>
		public System.Decimal?		  AsCodeDegreeClassId = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// ED_CDE_QUAL_CAT_ID : 
		/// </summary>
		public System.Decimal?		  EdCdeQualCatId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsCodeDegreeClass _asCodeDegreeClassIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return this._asCodeDegreeClassIdSource; }
            set { this._asCodeDegreeClassIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCdeQualCat _edCdeQualCatIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeQualCat"/>.
		/// </summary>
		/// <value>The source EdCdeQualCat for EdCdeQualCatId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCdeQualCat EdCdeQualCatIdSource
      	{
            get { return this._edCdeQualCatIdSource; }
            set { this._edCdeQualCatIdSource = value; }
      	}
		private FeeCdeDiscCat _feeCdeDiscCatIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeCdeDiscCat"/>.
		/// </summary>
		/// <value>The source FeeCdeDiscCat for FeeCdeDiscCatId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeCdeDiscCat FeeCdeDiscCatIdSource
      	{
            get { return this._feeCdeDiscCatIdSource; }
            set { this._feeCdeDiscCatIdSource = value; }
      	}
		private FeeCdeSchshipCat _feeCdeSchshipCatIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="FeeCdeSchshipCat"/>.
		/// </summary>
		/// <value>The source FeeCdeSchshipCat for FeeCdeSchshipCatId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual FeeCdeSchshipCat FeeCdeSchshipCatIdSource
      	{
            get { return this._feeCdeSchshipCatIdSource; }
            set { this._feeCdeSchshipCatIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region AdmAppRegHistoryCollection
		
		private TList<AdmAppRegHistory> _admAppRegHistoryFeeCdeDiscTypeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admAppRegHistoryFeeCdeDiscTypeId
		/// </summary>
		
		public TList<AdmAppRegHistory> AdmAppRegHistoryCollection
		{
			get
			{
				if (_admAppRegHistoryFeeCdeDiscTypeId == null)
				{
				_admAppRegHistoryFeeCdeDiscTypeId = new TList<AdmAppRegHistory>();
				}
	
				return _admAppRegHistoryFeeCdeDiscTypeId;
			}
			set { _admAppRegHistoryFeeCdeDiscTypeId = value; }
		}
		
		#endregion

		#region FeeStudDiscCollection
		
		private TList<FeeStudDisc> _feeStudDiscFeeCdeDiscTypeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeStudDiscFeeCdeDiscTypeId
		/// </summary>
		
		public TList<FeeStudDisc> FeeStudDiscCollection
		{
			get
			{
				if (_feeStudDiscFeeCdeDiscTypeId == null)
				{
				_feeStudDiscFeeCdeDiscTypeId = new TList<FeeStudDisc>();
				}
	
				return _feeStudDiscFeeCdeDiscTypeId;
			}
			set { _feeStudDiscFeeCdeDiscTypeId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			FeeCdeDiscTypeEntityData _tmp = new FeeCdeDiscTypeEntityData();
						
			_tmp.FeeCdeDiscTypeId = this.FeeCdeDiscTypeId;
			_tmp.OriginalFeeCdeDiscTypeId = this.OriginalFeeCdeDiscTypeId;
			
			_tmp.DescrAr = this.DescrAr;
			_tmp.DescrEn = this.DescrEn;
			_tmp.DiscPrcnt = this.DiscPrcnt;
			_tmp.StopFlg = this.StopFlg;
			_tmp.DiscAmnt = this.DiscAmnt;
			_tmp.DiscTypeFlg = this.DiscTypeFlg;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.FeeCdeDiscCatId = this.FeeCdeDiscCatId;
			_tmp.FeeCdeSchshipCatId = this.FeeCdeSchshipCatId;
			_tmp.ParamFrom = this.ParamFrom;
			_tmp.ParamTo = this.ParamTo;
			_tmp.IsActive = this.IsActive;
			_tmp.ConstFlg = this.ConstFlg;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.EdCdeQualCatId = this.EdCdeQualCatId;
			
			#region Source Parent Composite Entities
			if (this.AsCodeDegreeClassIdSource != null)
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCdeQualCatIdSource != null)
				_tmp.EdCdeQualCatIdSource = MakeCopyOf(this.EdCdeQualCatIdSource) as EdCdeQualCat;
			if (this.FeeCdeDiscCatIdSource != null)
				_tmp.FeeCdeDiscCatIdSource = MakeCopyOf(this.FeeCdeDiscCatIdSource) as FeeCdeDiscCat;
			if (this.FeeCdeSchshipCatIdSource != null)
				_tmp.FeeCdeSchshipCatIdSource = MakeCopyOf(this.FeeCdeSchshipCatIdSource) as FeeCdeSchshipCat;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._admAppRegHistoryFeeCdeDiscTypeId != null)
				_tmp.AdmAppRegHistoryCollection = (TList<AdmAppRegHistory>) MakeCopyOf(this.AdmAppRegHistoryCollection); 
			if (this._feeStudDiscFeeCdeDiscTypeId != null)
				_tmp.FeeStudDiscCollection = (TList<FeeStudDisc>) MakeCopyOf(this.FeeStudDiscCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			FeeCdeDiscTypeEntityData _tmp = new FeeCdeDiscTypeEntityData();
						
			_tmp.FeeCdeDiscTypeId = this.FeeCdeDiscTypeId;
			_tmp.OriginalFeeCdeDiscTypeId = this.OriginalFeeCdeDiscTypeId;
			
			_tmp.DescrAr = this.DescrAr;
			_tmp.DescrEn = this.DescrEn;
			_tmp.DiscPrcnt = this.DiscPrcnt;
			_tmp.StopFlg = this.StopFlg;
			_tmp.DiscAmnt = this.DiscAmnt;
			_tmp.DiscTypeFlg = this.DiscTypeFlg;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.FeeCdeDiscCatId = this.FeeCdeDiscCatId;
			_tmp.FeeCdeSchshipCatId = this.FeeCdeSchshipCatId;
			_tmp.ParamFrom = this.ParamFrom;
			_tmp.ParamTo = this.ParamTo;
			_tmp.IsActive = this.IsActive;
			_tmp.ConstFlg = this.ConstFlg;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			_tmp.EdCdeQualCatId = this.EdCdeQualCatId;
			
			#region Source Parent Composite Entities
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				_tmp.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCdeQualCatIdSource != null && existingCopies.Contains(this.EdCdeQualCatIdSource))
				_tmp.EdCdeQualCatIdSource = existingCopies[this.EdCdeQualCatIdSource] as EdCdeQualCat;
			else
				_tmp.EdCdeQualCatIdSource = MakeCopyOf(this.EdCdeQualCatIdSource, existingCopies) as EdCdeQualCat;
			if (this.FeeCdeDiscCatIdSource != null && existingCopies.Contains(this.FeeCdeDiscCatIdSource))
				_tmp.FeeCdeDiscCatIdSource = existingCopies[this.FeeCdeDiscCatIdSource] as FeeCdeDiscCat;
			else
				_tmp.FeeCdeDiscCatIdSource = MakeCopyOf(this.FeeCdeDiscCatIdSource, existingCopies) as FeeCdeDiscCat;
			if (this.FeeCdeSchshipCatIdSource != null && existingCopies.Contains(this.FeeCdeSchshipCatIdSource))
				_tmp.FeeCdeSchshipCatIdSource = existingCopies[this.FeeCdeSchshipCatIdSource] as FeeCdeSchshipCat;
			else
				_tmp.FeeCdeSchshipCatIdSource = MakeCopyOf(this.FeeCdeSchshipCatIdSource, existingCopies) as FeeCdeSchshipCat;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.AdmAppRegHistoryCollection = (TList<AdmAppRegHistory>) MakeCopyOf(this.AdmAppRegHistoryCollection, existingCopies); 
			_tmp.FeeStudDiscCollection = (TList<FeeStudDisc>) MakeCopyOf(this.FeeStudDiscCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeCdeDiscTypeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(FeeCdeDiscTypeColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeCdeDiscTypeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(FeeCdeDiscTypeColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeCdeDiscTypeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(FeeCdeDiscTypeColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				FeeCdeDiscTypeEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new FeeCdeDiscTypeEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeCdeDiscTypeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(FeeCdeDiscTypeColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				FeeCdeDiscTypeEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new FeeCdeDiscTypeEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region FeeCdeDiscTypeEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="FeeCdeDiscType"/> object.
	/// </remarks>
	public class FeeCdeDiscTypeEventArgs : System.EventArgs
	{
		private FeeCdeDiscTypeColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the FeeCdeDiscTypeEventArgs class.
		///</summary>
		public FeeCdeDiscTypeEventArgs(FeeCdeDiscTypeColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the FeeCdeDiscTypeEventArgs class.
		///</summary>
		public FeeCdeDiscTypeEventArgs(FeeCdeDiscTypeColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The FeeCdeDiscTypeColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="FeeCdeDiscTypeColumn" />
		public FeeCdeDiscTypeColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all FeeCdeDiscType related events.
	///</summary>
	public delegate void FeeCdeDiscTypeEventHandler(object sender, FeeCdeDiscTypeEventArgs e);
	
	#region FeeCdeDiscTypeComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class FeeCdeDiscTypeComparer : System.Collections.Generic.IComparer<FeeCdeDiscType>
	{
		FeeCdeDiscTypeColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:FeeCdeDiscTypeComparer"/> class.
        /// </summary>
		public FeeCdeDiscTypeComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:FeeCdeDiscTypeComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public FeeCdeDiscTypeComparer(FeeCdeDiscTypeColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="FeeCdeDiscType"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="FeeCdeDiscType"/> to compare.</param>
        /// <param name="b">The second <c>FeeCdeDiscType</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(FeeCdeDiscType a, FeeCdeDiscType b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(FeeCdeDiscType entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(FeeCdeDiscType a, FeeCdeDiscType b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public FeeCdeDiscTypeColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region FeeCdeDiscTypeKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="FeeCdeDiscType"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class FeeCdeDiscTypeKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the FeeCdeDiscTypeKey class.
		/// </summary>
		public FeeCdeDiscTypeKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeCdeDiscTypeKey class.
		/// </summary>
		public FeeCdeDiscTypeKey(FeeCdeDiscTypeBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.FeeCdeDiscTypeId = entity.FeeCdeDiscTypeId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeCdeDiscTypeKey class.
		/// </summary>
		public FeeCdeDiscTypeKey(System.Decimal _feeCdeDiscTypeId)
		{
			#region Init Properties

			this.FeeCdeDiscTypeId = _feeCdeDiscTypeId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private FeeCdeDiscTypeBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public FeeCdeDiscTypeBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the FeeCdeDiscTypeId property
		private System.Decimal _feeCdeDiscTypeId;
		
		/// <summary>
		/// Gets or sets the FeeCdeDiscTypeId property.
		/// </summary>
		public System.Decimal FeeCdeDiscTypeId
		{
			get { return _feeCdeDiscTypeId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.FeeCdeDiscTypeId = value;
				
				_feeCdeDiscTypeId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				FeeCdeDiscTypeId = ( values["FeeCdeDiscTypeId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["FeeCdeDiscTypeId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("FeeCdeDiscTypeId", FeeCdeDiscTypeId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("FeeCdeDiscTypeId: {0}{1}",
								FeeCdeDiscTypeId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region FeeCdeDiscTypeColumn Enum
	
	/// <summary>
	/// Enumerate the FeeCdeDiscType columns.
	/// </summary>
	[Serializable]
	public enum FeeCdeDiscTypeColumn : int
	{
		/// <summary>
		/// FeeCdeDiscTypeId : انواع المنح والتخفيضات والمساعدات
		/// </summary>
		[EnumTextValue("FEE_CDE_DISC_TYPE_ID")]
		[ColumnEnum("FEE_CDE_DISC_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		FeeCdeDiscTypeId = 1,
		/// <summary>
		/// DescrAr : اسم التخفيض- المنحة
		/// </summary>
		[EnumTextValue("DESCR_AR")]
		[ColumnEnum("DESCR_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		DescrAr = 2,
		/// <summary>
		/// DescrEn : اسم التخفيض- المنحة
		/// </summary>
		[EnumTextValue("DESCR_EN")]
		[ColumnEnum("DESCR_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 150)]
		DescrEn = 3,
		/// <summary>
		/// DiscPrcnt : نسبة التخفيض من مصروفات دراسية قابلة للتخفيض
		/// </summary>
		[EnumTextValue("DISC_PRCNT")]
		[ColumnEnum("DISC_PRCNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DiscPrcnt = 4,
		/// <summary>
		/// StopFlg : 
		/// </summary>
		[EnumTextValue("STOP_FLG")]
		[ColumnEnum("STOP_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		StopFlg = 5,
		/// <summary>
		/// DiscAmnt : قيمة التخفيض من مصروفات دراسية قابلة للتخفيض
		/// </summary>
		[EnumTextValue("DISC_AMNT")]
		[ColumnEnum("DISC_AMNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DiscAmnt = 6,
		/// <summary>
		/// DiscTypeFlg : قيمة-نسبة
		/// </summary>
		[EnumTextValue("DISC_TYPE_FLG")]
		[ColumnEnum("DISC_TYPE_FLG", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DiscTypeFlg = 7,
		/// <summary>
		/// AsFacultyInfoId : الكلية- الجامعة
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 8,
		/// <summary>
		/// FeeCdeDiscCatId : Category
		/// </summary>
		[EnumTextValue("FEE_CDE_DISC_CAT_ID")]
		[ColumnEnum("FEE_CDE_DISC_CAT_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		FeeCdeDiscCatId = 9,
		/// <summary>
		/// FeeCdeSchshipCatId : نوع المنحة
		/// </summary>
		[EnumTextValue("FEE_CDE_SCHSHIP_CAT_ID")]
		[ColumnEnum("FEE_CDE_SCHSHIP_CAT_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		FeeCdeSchshipCatId = 10,
		/// <summary>
		/// ParamFrom : من قيمة او نسبة
		/// </summary>
		[EnumTextValue("PARAM_FROM")]
		[ColumnEnum("PARAM_FROM", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ParamFrom = 11,
		/// <summary>
		/// ParamTo : الى قيمة او نسبة
		/// </summary>
		[EnumTextValue("PARAM_TO")]
		[ColumnEnum("PARAM_TO", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ParamTo = 12,
		/// <summary>
		/// IsActive : نشط
		/// </summary>
		[EnumTextValue("IS_ACTIVE")]
		[ColumnEnum("IS_ACTIVE", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsActive = 13,
		/// <summary>
		/// ConstFlg : ثابت لا يمكن حذف او تعديل
		/// </summary>
		[EnumTextValue("CONST_FLG")]
		[ColumnEnum("CONST_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ConstFlg = 14,
		/// <summary>
		/// EdAcadYearId : XX
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdAcadYearId = 15,
		/// <summary>
		/// AsCodeDegreeClassId : IF MLT_DEGREE=1
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_CLASS_ID")]
		[ColumnEnum("AS_CODE_DEGREE_CLASS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeClassId = 16,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 17,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 18,
		/// <summary>
		/// EdCdeQualCatId : 
		/// </summary>
		[EnumTextValue("ED_CDE_QUAL_CAT_ID")]
		[ColumnEnum("ED_CDE_QUAL_CAT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCdeQualCatId = 19
	}//End enum

	#endregion FeeCdeDiscTypeColumn Enum

} // end namespace
