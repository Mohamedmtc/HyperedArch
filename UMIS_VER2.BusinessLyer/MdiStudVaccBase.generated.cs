
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file MdiStudVacc.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'MDI_STUD_VACC' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class MdiStudVaccBase : EntityBase, IMdiStudVacc, IEntityId<MdiStudVaccKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private MdiStudVaccEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private MdiStudVaccEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private MdiStudVaccEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<MdiStudVacc> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MdiStudVaccEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MdiStudVaccEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="MdiStudVaccBase"/> instance.
		///</summary>
		public MdiStudVaccBase()
		{
			this.entityData = new MdiStudVaccEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="MdiStudVaccBase"/> instance.
		///</summary>
		///<param name="_mdiStudVaccId">مسلسل تطعيم الطالب</param>
		///<param name="_edStudId">رقم الطالب</param>
		///<param name="_rptSerial"></param>
		///<param name="_mdiCdeVaccId">نوع التطعيم</param>
		///<param name="_vaccDate">تاريخ التطعيم</param>
		///<param name="_revaccDate">تاريخ اعادة التطعيم</param>
		///<param name="_vaccSerial">رقم الجرعة</param>
		///<param name="_notes">ملاحظات</param>
		public MdiStudVaccBase(System.Decimal _mdiStudVaccId, System.Decimal _edStudId, 
			System.Decimal? _rptSerial, System.Decimal _mdiCdeVaccId, System.DateTime _vaccDate, 
			System.DateTime? _revaccDate, System.Decimal _vaccSerial, System.String _notes)
		{
			this.entityData = new MdiStudVaccEntityData();
			this.backupData = null;

			this.MdiStudVaccId = _mdiStudVaccId;
			this.EdStudId = _edStudId;
			this.RptSerial = _rptSerial;
			this.MdiCdeVaccId = _mdiCdeVaccId;
			this.VaccDate = _vaccDate;
			this.RevaccDate = _revaccDate;
			this.VaccSerial = _vaccSerial;
			this.Notes = _notes;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="MdiStudVacc"/> instance.
		///</summary>
		///<param name="_mdiStudVaccId">مسلسل تطعيم الطالب</param>
		///<param name="_edStudId">رقم الطالب</param>
		///<param name="_rptSerial"></param>
		///<param name="_mdiCdeVaccId">نوع التطعيم</param>
		///<param name="_vaccDate">تاريخ التطعيم</param>
		///<param name="_revaccDate">تاريخ اعادة التطعيم</param>
		///<param name="_vaccSerial">رقم الجرعة</param>
		///<param name="_notes">ملاحظات</param>
		public static MdiStudVacc CreateMdiStudVacc(System.Decimal _mdiStudVaccId, System.Decimal _edStudId, 
			System.Decimal? _rptSerial, System.Decimal _mdiCdeVaccId, System.DateTime _vaccDate, 
			System.DateTime? _revaccDate, System.Decimal _vaccSerial, System.String _notes)
		{
			MdiStudVacc newMdiStudVacc = new MdiStudVacc();
			newMdiStudVacc.MdiStudVaccId = _mdiStudVaccId;
			newMdiStudVacc.EdStudId = _edStudId;
			newMdiStudVacc.RptSerial = _rptSerial;
			newMdiStudVacc.MdiCdeVaccId = _mdiCdeVaccId;
			newMdiStudVacc.VaccDate = _vaccDate;
			newMdiStudVacc.RevaccDate = _revaccDate;
			newMdiStudVacc.VaccSerial = _vaccSerial;
			newMdiStudVacc.Notes = _notes;
			return newMdiStudVacc;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MdiStudVaccId property. 
		///		مسلسل تطعيم الطالب
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"مسلسل تطعيم الطالب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal MdiStudVaccId
		{
			get
			{
				return this.entityData.MdiStudVaccId; 
			}
			
			set
			{
				if (this.entityData.MdiStudVaccId == value)
					return;
					
				OnColumnChanging(MdiStudVaccColumn.MdiStudVaccId, this.entityData.MdiStudVaccId);
				this.entityData.MdiStudVaccId = value;
				this.EntityId.MdiStudVaccId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiStudVaccColumn.MdiStudVaccId, this.entityData.MdiStudVaccId);
				OnPropertyChanged("MdiStudVaccId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the MDI_STUD_VACC_ID property.
		///		مسلسل تطعيم الطالب
		/// </summary>
		/// <remarks>This is the original value of the MDI_STUD_VACC_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalMdiStudVaccId
		{
			get { return this.entityData.OriginalMdiStudVaccId; }
			set { this.entityData.OriginalMdiStudVaccId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudId property. 
		///		رقم الطالب
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"رقم الطالب"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudId
		{
			get
			{
				return this.entityData.EdStudId; 
			}
			
			set
			{
				if (this.entityData.EdStudId == value)
					return;
					
				OnColumnChanging(MdiStudVaccColumn.EdStudId, this.entityData.EdStudId);
				this.entityData.EdStudId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiStudVaccColumn.EdStudId, this.entityData.EdStudId);
				OnPropertyChanged("EdStudId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RptSerial property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRptSerialNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RptSerial
		{
			get
			{
				return this.entityData.RptSerial; 
			}
			
			set
			{
				if (this.entityData.RptSerial == value)
					return;
					
				OnColumnChanging(MdiStudVaccColumn.RptSerial, this.entityData.RptSerial);
				this.entityData.RptSerial = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiStudVaccColumn.RptSerial, this.entityData.RptSerial);
				OnPropertyChanged("RptSerial");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MdiCdeVaccId property. 
		///		نوع التطعيم
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"نوع التطعيم"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal MdiCdeVaccId
		{
			get
			{
				return this.entityData.MdiCdeVaccId; 
			}
			
			set
			{
				if (this.entityData.MdiCdeVaccId == value)
					return;
					
				OnColumnChanging(MdiStudVaccColumn.MdiCdeVaccId, this.entityData.MdiCdeVaccId);
				this.entityData.MdiCdeVaccId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiStudVaccColumn.MdiCdeVaccId, this.entityData.MdiCdeVaccId);
				OnPropertyChanged("MdiCdeVaccId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the VaccDate property. 
		///		تاريخ التطعيم
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"تاريخ التطعيم"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime VaccDate
		{
			get
			{
				return this.entityData.VaccDate; 
			}
			
			set
			{
				if (this.entityData.VaccDate == value)
					return;
					
				OnColumnChanging(MdiStudVaccColumn.VaccDate, this.entityData.VaccDate);
				this.entityData.VaccDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiStudVaccColumn.VaccDate, this.entityData.VaccDate);
				OnPropertyChanged("VaccDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RevaccDate property. 
		///		تاريخ اعادة التطعيم
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsRevaccDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"تاريخ اعادة التطعيم"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? RevaccDate
		{
			get
			{
				return this.entityData.RevaccDate; 
			}
			
			set
			{
				if (this.entityData.RevaccDate == value)
					return;
					
				OnColumnChanging(MdiStudVaccColumn.RevaccDate, this.entityData.RevaccDate);
				this.entityData.RevaccDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiStudVaccColumn.RevaccDate, this.entityData.RevaccDate);
				OnPropertyChanged("RevaccDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the VaccSerial property. 
		///		رقم الجرعة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"رقم الجرعة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal VaccSerial
		{
			get
			{
				return this.entityData.VaccSerial; 
			}
			
			set
			{
				if (this.entityData.VaccSerial == value)
					return;
					
				OnColumnChanging(MdiStudVaccColumn.VaccSerial, this.entityData.VaccSerial);
				this.entityData.VaccSerial = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiStudVaccColumn.VaccSerial, this.entityData.VaccSerial);
				OnPropertyChanged("VaccSerial");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		ملاحظات
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"ملاحظات"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(MdiStudVaccColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiStudVaccColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStud EdStudIdSource
      	{
            get { return entityData.EdStudIdSource; }
            set { entityData.EdStudIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="MdiCdeVacc"/>.
		/// </summary>
		/// <value>The source MdiCdeVacc for MdiCdeVaccId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual MdiCdeVacc MdiCdeVaccIdSource
      	{
            get { return entityData.MdiCdeVaccIdSource; }
            set { entityData.MdiCdeVaccIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 250));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "MDI_STUD_VACC"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MDI_STUD_VACC_ID", "ED_STUD_ID", "RPT_SERIAL", "MDI_CDE_VACC_ID", "VACC_DATE", "REVACC_DATE", "VACC_SERIAL", "NOTES"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as MdiStudVaccEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (MdiStudVacc) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<MdiStudVacc>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as MdiStudVacc);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed MdiStudVacc Entity 
		///</summary>
		protected virtual MdiStudVacc Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			MdiStudVacc copy = new MdiStudVacc();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MdiStudVaccId = this.MdiStudVaccId;
					copy.OriginalMdiStudVaccId = this.OriginalMdiStudVaccId;
				copy.EdStudId = this.EdStudId;
				copy.RptSerial = this.RptSerial;
				copy.MdiCdeVaccId = this.MdiCdeVaccId;
				copy.VaccDate = this.VaccDate;
				copy.RevaccDate = this.RevaccDate;
				copy.VaccSerial = this.VaccSerial;
				copy.Notes = this.Notes;
			
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				copy.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				copy.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.MdiCdeVaccIdSource != null && existingCopies.Contains(this.MdiCdeVaccIdSource))
				copy.MdiCdeVaccIdSource = existingCopies[this.MdiCdeVaccIdSource] as MdiCdeVacc;
			else
				copy.MdiCdeVaccIdSource = MakeCopyOf(this.MdiCdeVaccIdSource, existingCopies) as MdiCdeVacc;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed MdiStudVacc Entity 
		///</summary>
		public virtual MdiStudVacc Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed MdiStudVacc Entity which is a deep copy of the current entity.
		///</summary>
		public virtual MdiStudVacc DeepCopy()
		{
			return EntityHelper.Clone<MdiStudVacc>(this as MdiStudVacc);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as MdiStudVaccEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new MdiStudVaccEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as MdiStudVaccEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(MdiStudVaccColumn column)
		{
			switch(column)
			{
					case MdiStudVaccColumn.MdiStudVaccId:
					return entityData.MdiStudVaccId != _originalData.MdiStudVaccId;
					case MdiStudVaccColumn.EdStudId:
					return entityData.EdStudId != _originalData.EdStudId;
					case MdiStudVaccColumn.RptSerial:
					return entityData.RptSerial != _originalData.RptSerial;
					case MdiStudVaccColumn.MdiCdeVaccId:
					return entityData.MdiCdeVaccId != _originalData.MdiCdeVaccId;
					case MdiStudVaccColumn.VaccDate:
					return entityData.VaccDate != _originalData.VaccDate;
					case MdiStudVaccColumn.RevaccDate:
					return entityData.RevaccDate != _originalData.RevaccDate;
					case MdiStudVaccColumn.VaccSerial:
					return entityData.VaccSerial != _originalData.VaccSerial;
					case MdiStudVaccColumn.Notes:
					return entityData.Notes != _originalData.Notes;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< MdiStudVaccColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MdiStudVaccId != _originalData.MdiStudVaccId;
			result = result || entityData.EdStudId != _originalData.EdStudId;
			result = result || entityData.RptSerial != _originalData.RptSerial;
			result = result || entityData.MdiCdeVaccId != _originalData.MdiCdeVaccId;
			result = result || entityData.VaccDate != _originalData.VaccDate;
			result = result || entityData.RevaccDate != _originalData.RevaccDate;
			result = result || entityData.VaccSerial != _originalData.VaccSerial;
			result = result || entityData.Notes != _originalData.Notes;
			return result;
		}	
		
		///<summary>
		///  Returns a MdiStudVacc Entity with the original data.
		///</summary>
		public MdiStudVacc GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateMdiStudVacc(
				_originalData.MdiStudVaccId,
				_originalData.EdStudId,
				_originalData.RptSerial,
				_originalData.MdiCdeVaccId,
				_originalData.VaccDate,
				_originalData.RevaccDate,
				_originalData.VaccSerial,
				_originalData.Notes
				);
				
			return (MdiStudVacc)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="MdiStudVaccBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is MdiStudVaccBase)
				return ValueEquals(this, (MdiStudVaccBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="MdiStudVaccBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MdiStudVaccId.GetHashCode() ^ 
					this.EdStudId.GetHashCode() ^ 
					((this.RptSerial == null) ? string.Empty : this.RptSerial.ToString()).GetHashCode() ^ 
					this.MdiCdeVaccId.GetHashCode() ^ 
					this.VaccDate.GetHashCode() ^ 
					((this.RevaccDate == null) ? string.Empty : this.RevaccDate.ToString()).GetHashCode() ^ 
					this.VaccSerial.GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="MdiStudVaccBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(MdiStudVaccBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="MdiStudVaccBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="MdiStudVaccBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="MdiStudVaccBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(MdiStudVaccBase Object1, MdiStudVaccBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MdiStudVaccId != Object2.MdiStudVaccId)
				equal = false;
			if (Object1.EdStudId != Object2.EdStudId)
				equal = false;
			if ( Object1.RptSerial != null && Object2.RptSerial != null )
			{
				if (Object1.RptSerial != Object2.RptSerial)
					equal = false;
			}
			else if (Object1.RptSerial == null ^ Object2.RptSerial == null )
			{
				equal = false;
			}
			if (Object1.MdiCdeVaccId != Object2.MdiCdeVaccId)
				equal = false;
			if (Object1.VaccDate != Object2.VaccDate)
				equal = false;
			if ( Object1.RevaccDate != null && Object2.RevaccDate != null )
			{
				if (Object1.RevaccDate != Object2.RevaccDate)
					equal = false;
			}
			else if (Object1.RevaccDate == null ^ Object2.RevaccDate == null )
			{
				equal = false;
			}
			if (Object1.VaccSerial != Object2.VaccSerial)
				equal = false;
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((MdiStudVaccBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static MdiStudVaccComparer GetComparer()
        {
            return new MdiStudVaccComparer();
        }
        */

        // Comparer delegates back to MdiStudVacc
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(MdiStudVacc rhs, MdiStudVaccColumn which)
        {
            switch (which)
            {
            	
            	
            	case MdiStudVaccColumn.MdiStudVaccId:
            		return this.MdiStudVaccId.CompareTo(rhs.MdiStudVaccId);
            		
            		                 
            	
            	
            	case MdiStudVaccColumn.EdStudId:
            		return this.EdStudId.CompareTo(rhs.EdStudId);
            		
            		                 
            	
            	
            	case MdiStudVaccColumn.RptSerial:
            		return this.RptSerial.Value.CompareTo(rhs.RptSerial.Value);
            		
            		                 
            	
            	
            	case MdiStudVaccColumn.MdiCdeVaccId:
            		return this.MdiCdeVaccId.CompareTo(rhs.MdiCdeVaccId);
            		
            		                 
            	
            	
            	case MdiStudVaccColumn.VaccDate:
            		return this.VaccDate.CompareTo(rhs.VaccDate);
            		
            		                 
            	
            	
            	case MdiStudVaccColumn.RevaccDate:
            		return this.RevaccDate.Value.CompareTo(rhs.RevaccDate.Value);
            		
            		                 
            	
            	
            	case MdiStudVaccColumn.VaccSerial:
            		return this.VaccSerial.CompareTo(rhs.VaccSerial);
            		
            		                 
            	
            	
            	case MdiStudVaccColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<MdiStudVaccKey> Members
		
		// member variable for the EntityId property
		private MdiStudVaccKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual MdiStudVaccKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new MdiStudVaccKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("MdiStudVacc")
					.Append("|").Append( this.MdiStudVaccId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{9}{8}- MdiStudVaccId: {0}{8}- EdStudId: {1}{8}- RptSerial: {2}{8}- MdiCdeVaccId: {3}{8}- VaccDate: {4}{8}- RevaccDate: {5}{8}- VaccSerial: {6}{8}- Notes: {7}{8}{10}", 
				this.MdiStudVaccId,
				this.EdStudId,
				(this.RptSerial == null) ? string.Empty : this.RptSerial.ToString(),
				this.MdiCdeVaccId,
				this.VaccDate,
				(this.RevaccDate == null) ? string.Empty : this.RevaccDate.ToString(),
				this.VaccSerial,
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'MDI_STUD_VACC' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class MdiStudVaccEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MDI_STUD_VACC_ID : مسلسل تطعيم الطالب
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "MDI_STUD_VACC"</remarks>
		public System.Decimal MdiStudVaccId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalMdiStudVaccId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_STUD_ID : رقم الطالب
		/// </summary>
		public System.Decimal		  EdStudId = 0.0m;
		
		/// <summary>
		/// RPT_SERIAL : 
		/// </summary>
		public System.Decimal?		  RptSerial = null;
		
		/// <summary>
		/// MDI_CDE_VACC_ID : نوع التطعيم
		/// </summary>
		public System.Decimal		  MdiCdeVaccId = 0.0m;
		
		/// <summary>
		/// VACC_DATE : تاريخ التطعيم
		/// </summary>
		public System.DateTime		  VaccDate = DateTime.MinValue;
		
		/// <summary>
		/// REVACC_DATE : تاريخ اعادة التطعيم
		/// </summary>
		public System.DateTime?		  RevaccDate = null;
		
		/// <summary>
		/// VACC_SERIAL : رقم الجرعة
		/// </summary>
		public System.Decimal		  VaccSerial = 0.0m;
		
		/// <summary>
		/// NOTES : ملاحظات
		/// </summary>
		public System.String		  Notes = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdStud _edStudIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStud"/>.
		/// </summary>
		/// <value>The source EdStud for EdStudId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStud EdStudIdSource
      	{
            get { return this._edStudIdSource; }
            set { this._edStudIdSource = value; }
      	}
		private MdiCdeVacc _mdiCdeVaccIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="MdiCdeVacc"/>.
		/// </summary>
		/// <value>The source MdiCdeVacc for MdiCdeVaccId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual MdiCdeVacc MdiCdeVaccIdSource
      	{
            get { return this._mdiCdeVaccIdSource; }
            set { this._mdiCdeVaccIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			MdiStudVaccEntityData _tmp = new MdiStudVaccEntityData();
						
			_tmp.MdiStudVaccId = this.MdiStudVaccId;
			_tmp.OriginalMdiStudVaccId = this.OriginalMdiStudVaccId;
			
			_tmp.EdStudId = this.EdStudId;
			_tmp.RptSerial = this.RptSerial;
			_tmp.MdiCdeVaccId = this.MdiCdeVaccId;
			_tmp.VaccDate = this.VaccDate;
			_tmp.RevaccDate = this.RevaccDate;
			_tmp.VaccSerial = this.VaccSerial;
			_tmp.Notes = this.Notes;
			
			#region Source Parent Composite Entities
			if (this.EdStudIdSource != null)
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource) as EdStud;
			if (this.MdiCdeVaccIdSource != null)
				_tmp.MdiCdeVaccIdSource = MakeCopyOf(this.MdiCdeVaccIdSource) as MdiCdeVacc;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			MdiStudVaccEntityData _tmp = new MdiStudVaccEntityData();
						
			_tmp.MdiStudVaccId = this.MdiStudVaccId;
			_tmp.OriginalMdiStudVaccId = this.OriginalMdiStudVaccId;
			
			_tmp.EdStudId = this.EdStudId;
			_tmp.RptSerial = this.RptSerial;
			_tmp.MdiCdeVaccId = this.MdiCdeVaccId;
			_tmp.VaccDate = this.VaccDate;
			_tmp.RevaccDate = this.RevaccDate;
			_tmp.VaccSerial = this.VaccSerial;
			_tmp.Notes = this.Notes;
			
			#region Source Parent Composite Entities
			if (this.EdStudIdSource != null && existingCopies.Contains(this.EdStudIdSource))
				_tmp.EdStudIdSource = existingCopies[this.EdStudIdSource] as EdStud;
			else
				_tmp.EdStudIdSource = MakeCopyOf(this.EdStudIdSource, existingCopies) as EdStud;
			if (this.MdiCdeVaccIdSource != null && existingCopies.Contains(this.MdiCdeVaccIdSource))
				_tmp.MdiCdeVaccIdSource = existingCopies[this.MdiCdeVaccIdSource] as MdiCdeVacc;
			else
				_tmp.MdiCdeVaccIdSource = MakeCopyOf(this.MdiCdeVaccIdSource, existingCopies) as MdiCdeVacc;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MdiStudVaccColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(MdiStudVaccColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MdiStudVaccColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(MdiStudVaccColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MdiStudVaccColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(MdiStudVaccColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				MdiStudVaccEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new MdiStudVaccEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MdiStudVaccColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(MdiStudVaccColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				MdiStudVaccEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new MdiStudVaccEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region MdiStudVaccEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="MdiStudVacc"/> object.
	/// </remarks>
	public class MdiStudVaccEventArgs : System.EventArgs
	{
		private MdiStudVaccColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the MdiStudVaccEventArgs class.
		///</summary>
		public MdiStudVaccEventArgs(MdiStudVaccColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the MdiStudVaccEventArgs class.
		///</summary>
		public MdiStudVaccEventArgs(MdiStudVaccColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The MdiStudVaccColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="MdiStudVaccColumn" />
		public MdiStudVaccColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all MdiStudVacc related events.
	///</summary>
	public delegate void MdiStudVaccEventHandler(object sender, MdiStudVaccEventArgs e);
	
	#region MdiStudVaccComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class MdiStudVaccComparer : System.Collections.Generic.IComparer<MdiStudVacc>
	{
		MdiStudVaccColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:MdiStudVaccComparer"/> class.
        /// </summary>
		public MdiStudVaccComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:MdiStudVaccComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public MdiStudVaccComparer(MdiStudVaccColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="MdiStudVacc"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="MdiStudVacc"/> to compare.</param>
        /// <param name="b">The second <c>MdiStudVacc</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(MdiStudVacc a, MdiStudVacc b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(MdiStudVacc entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(MdiStudVacc a, MdiStudVacc b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public MdiStudVaccColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region MdiStudVaccKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="MdiStudVacc"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class MdiStudVaccKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the MdiStudVaccKey class.
		/// </summary>
		public MdiStudVaccKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the MdiStudVaccKey class.
		/// </summary>
		public MdiStudVaccKey(MdiStudVaccBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MdiStudVaccId = entity.MdiStudVaccId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the MdiStudVaccKey class.
		/// </summary>
		public MdiStudVaccKey(System.Decimal _mdiStudVaccId)
		{
			#region Init Properties

			this.MdiStudVaccId = _mdiStudVaccId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private MdiStudVaccBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public MdiStudVaccBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MdiStudVaccId property
		private System.Decimal _mdiStudVaccId;
		
		/// <summary>
		/// Gets or sets the MdiStudVaccId property.
		/// </summary>
		public System.Decimal MdiStudVaccId
		{
			get { return _mdiStudVaccId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MdiStudVaccId = value;
				
				_mdiStudVaccId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MdiStudVaccId = ( values["MdiStudVaccId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["MdiStudVaccId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MdiStudVaccId", MdiStudVaccId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MdiStudVaccId: {0}{1}",
								MdiStudVaccId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region MdiStudVaccColumn Enum
	
	/// <summary>
	/// Enumerate the MdiStudVacc columns.
	/// </summary>
	[Serializable]
	public enum MdiStudVaccColumn : int
	{
		/// <summary>
		/// MdiStudVaccId : مسلسل تطعيم الطالب
		/// </summary>
		[EnumTextValue("MDI_STUD_VACC_ID")]
		[ColumnEnum("MDI_STUD_VACC_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		MdiStudVaccId = 1,
		/// <summary>
		/// EdStudId : رقم الطالب
		/// </summary>
		[EnumTextValue("ED_STUD_ID")]
		[ColumnEnum("ED_STUD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudId = 2,
		/// <summary>
		/// RptSerial : 
		/// </summary>
		[EnumTextValue("RPT_SERIAL")]
		[ColumnEnum("RPT_SERIAL", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RptSerial = 3,
		/// <summary>
		/// MdiCdeVaccId : نوع التطعيم
		/// </summary>
		[EnumTextValue("MDI_CDE_VACC_ID")]
		[ColumnEnum("MDI_CDE_VACC_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		MdiCdeVaccId = 4,
		/// <summary>
		/// VaccDate : تاريخ التطعيم
		/// </summary>
		[EnumTextValue("VACC_DATE")]
		[ColumnEnum("VACC_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		VaccDate = 5,
		/// <summary>
		/// RevaccDate : تاريخ اعادة التطعيم
		/// </summary>
		[EnumTextValue("REVACC_DATE")]
		[ColumnEnum("REVACC_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		RevaccDate = 6,
		/// <summary>
		/// VaccSerial : رقم الجرعة
		/// </summary>
		[EnumTextValue("VACC_SERIAL")]
		[ColumnEnum("VACC_SERIAL", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		VaccSerial = 7,
		/// <summary>
		/// Notes : ملاحظات
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		Notes = 8
	}//End enum

	#endregion MdiStudVaccColumn Enum

} // end namespace
