
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file MdiCdeVacc.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'MDI_CDE_VACC' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class MdiCdeVaccBase : EntityBase, IMdiCdeVacc, IEntityId<MdiCdeVaccKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private MdiCdeVaccEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private MdiCdeVaccEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private MdiCdeVaccEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<MdiCdeVacc> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MdiCdeVaccEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MdiCdeVaccEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="MdiCdeVaccBase"/> instance.
		///</summary>
		public MdiCdeVaccBase()
		{
			this.entityData = new MdiCdeVaccEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="MdiCdeVaccBase"/> instance.
		///</summary>
		///<param name="_mdiCdeVaccId">نوع التطعيم</param>
		///<param name="_vaccCode">كود التطعيم</param>
		///<param name="_vaccAr"></param>
		///<param name="_vaccEn"></param>
		///<param name="_sideEffect">الاعراض الجانبية</param>
		///<param name="_doesCount">عدد الجرعات  0infinity</param>
		///<param name="_periodType">1سنة- 2شهر</param>
		///<param name="_doesPeriod2">موعد الجرعة التانية لو وجدت</param>
		///<param name="_doesPeriod3">موعد الجرعة التالتة لو وجدت</param>
		///<param name="_reVaccFlg">مؤشر اعادة</param>
		public MdiCdeVaccBase(System.Decimal _mdiCdeVaccId, System.String _vaccCode, System.String _vaccAr, 
			System.String _vaccEn, System.String _sideEffect, System.Decimal? _doesCount, System.Decimal? _periodType, 
			System.Decimal? _doesPeriod2, System.Decimal? _doesPeriod3, System.Decimal? _reVaccFlg)
		{
			this.entityData = new MdiCdeVaccEntityData();
			this.backupData = null;

			this.MdiCdeVaccId = _mdiCdeVaccId;
			this.VaccCode = _vaccCode;
			this.VaccAr = _vaccAr;
			this.VaccEn = _vaccEn;
			this.SideEffect = _sideEffect;
			this.DoesCount = _doesCount;
			this.PeriodType = _periodType;
			this.DoesPeriod2 = _doesPeriod2;
			this.DoesPeriod3 = _doesPeriod3;
			this.ReVaccFlg = _reVaccFlg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="MdiCdeVacc"/> instance.
		///</summary>
		///<param name="_mdiCdeVaccId">نوع التطعيم</param>
		///<param name="_vaccCode">كود التطعيم</param>
		///<param name="_vaccAr"></param>
		///<param name="_vaccEn"></param>
		///<param name="_sideEffect">الاعراض الجانبية</param>
		///<param name="_doesCount">عدد الجرعات  0infinity</param>
		///<param name="_periodType">1سنة- 2شهر</param>
		///<param name="_doesPeriod2">موعد الجرعة التانية لو وجدت</param>
		///<param name="_doesPeriod3">موعد الجرعة التالتة لو وجدت</param>
		///<param name="_reVaccFlg">مؤشر اعادة</param>
		public static MdiCdeVacc CreateMdiCdeVacc(System.Decimal _mdiCdeVaccId, System.String _vaccCode, System.String _vaccAr, 
			System.String _vaccEn, System.String _sideEffect, System.Decimal? _doesCount, System.Decimal? _periodType, 
			System.Decimal? _doesPeriod2, System.Decimal? _doesPeriod3, System.Decimal? _reVaccFlg)
		{
			MdiCdeVacc newMdiCdeVacc = new MdiCdeVacc();
			newMdiCdeVacc.MdiCdeVaccId = _mdiCdeVaccId;
			newMdiCdeVacc.VaccCode = _vaccCode;
			newMdiCdeVacc.VaccAr = _vaccAr;
			newMdiCdeVacc.VaccEn = _vaccEn;
			newMdiCdeVacc.SideEffect = _sideEffect;
			newMdiCdeVacc.DoesCount = _doesCount;
			newMdiCdeVacc.PeriodType = _periodType;
			newMdiCdeVacc.DoesPeriod2 = _doesPeriod2;
			newMdiCdeVacc.DoesPeriod3 = _doesPeriod3;
			newMdiCdeVacc.ReVaccFlg = _reVaccFlg;
			return newMdiCdeVacc;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MdiCdeVaccId property. 
		///		نوع التطعيم
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"نوع التطعيم"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal MdiCdeVaccId
		{
			get
			{
				return this.entityData.MdiCdeVaccId; 
			}
			
			set
			{
				if (this.entityData.MdiCdeVaccId == value)
					return;
					
				OnColumnChanging(MdiCdeVaccColumn.MdiCdeVaccId, this.entityData.MdiCdeVaccId);
				this.entityData.MdiCdeVaccId = value;
				this.EntityId.MdiCdeVaccId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiCdeVaccColumn.MdiCdeVaccId, this.entityData.MdiCdeVaccId);
				OnPropertyChanged("MdiCdeVaccId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the MDI_CDE_VACC_ID property.
		///		نوع التطعيم
		/// </summary>
		/// <remarks>This is the original value of the MDI_CDE_VACC_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalMdiCdeVaccId
		{
			get { return this.entityData.OriginalMdiCdeVaccId; }
			set { this.entityData.OriginalMdiCdeVaccId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the VaccCode property. 
		///		كود التطعيم
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"كود التطعيم"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String VaccCode
		{
			get
			{
				return this.entityData.VaccCode; 
			}
			
			set
			{
				if (this.entityData.VaccCode == value)
					return;
					
				OnColumnChanging(MdiCdeVaccColumn.VaccCode, this.entityData.VaccCode);
				this.entityData.VaccCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiCdeVaccColumn.VaccCode, this.entityData.VaccCode);
				OnPropertyChanged("VaccCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the VaccAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String VaccAr
		{
			get
			{
				return this.entityData.VaccAr; 
			}
			
			set
			{
				if (this.entityData.VaccAr == value)
					return;
					
				OnColumnChanging(MdiCdeVaccColumn.VaccAr, this.entityData.VaccAr);
				this.entityData.VaccAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiCdeVaccColumn.VaccAr, this.entityData.VaccAr);
				OnPropertyChanged("VaccAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the VaccEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String VaccEn
		{
			get
			{
				return this.entityData.VaccEn; 
			}
			
			set
			{
				if (this.entityData.VaccEn == value)
					return;
					
				OnColumnChanging(MdiCdeVaccColumn.VaccEn, this.entityData.VaccEn);
				this.entityData.VaccEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiCdeVaccColumn.VaccEn, this.entityData.VaccEn);
				OnPropertyChanged("VaccEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SideEffect property. 
		///		الاعراض الجانبية
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"الاعراض الجانبية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String SideEffect
		{
			get
			{
				return this.entityData.SideEffect; 
			}
			
			set
			{
				if (this.entityData.SideEffect == value)
					return;
					
				OnColumnChanging(MdiCdeVaccColumn.SideEffect, this.entityData.SideEffect);
				this.entityData.SideEffect = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiCdeVaccColumn.SideEffect, this.entityData.SideEffect);
				OnPropertyChanged("SideEffect");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DoesCount property. 
		///		عدد الجرعات  0infinity
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDoesCountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"عدد الجرعات  0infinity"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DoesCount
		{
			get
			{
				return this.entityData.DoesCount; 
			}
			
			set
			{
				if (this.entityData.DoesCount == value)
					return;
					
				OnColumnChanging(MdiCdeVaccColumn.DoesCount, this.entityData.DoesCount);
				this.entityData.DoesCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiCdeVaccColumn.DoesCount, this.entityData.DoesCount);
				OnPropertyChanged("DoesCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PeriodType property. 
		///		1سنة- 2شهر
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPeriodTypeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"1سنة- 2شهر"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PeriodType
		{
			get
			{
				return this.entityData.PeriodType; 
			}
			
			set
			{
				if (this.entityData.PeriodType == value)
					return;
					
				OnColumnChanging(MdiCdeVaccColumn.PeriodType, this.entityData.PeriodType);
				this.entityData.PeriodType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiCdeVaccColumn.PeriodType, this.entityData.PeriodType);
				OnPropertyChanged("PeriodType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DoesPeriod2 property. 
		///		موعد الجرعة التانية لو وجدت
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDoesPeriod2Null() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"موعد الجرعة التانية لو وجدت"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DoesPeriod2
		{
			get
			{
				return this.entityData.DoesPeriod2; 
			}
			
			set
			{
				if (this.entityData.DoesPeriod2 == value)
					return;
					
				OnColumnChanging(MdiCdeVaccColumn.DoesPeriod2, this.entityData.DoesPeriod2);
				this.entityData.DoesPeriod2 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiCdeVaccColumn.DoesPeriod2, this.entityData.DoesPeriod2);
				OnPropertyChanged("DoesPeriod2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DoesPeriod3 property. 
		///		موعد الجرعة التالتة لو وجدت
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDoesPeriod3Null() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"موعد الجرعة التالتة لو وجدت"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DoesPeriod3
		{
			get
			{
				return this.entityData.DoesPeriod3; 
			}
			
			set
			{
				if (this.entityData.DoesPeriod3 == value)
					return;
					
				OnColumnChanging(MdiCdeVaccColumn.DoesPeriod3, this.entityData.DoesPeriod3);
				this.entityData.DoesPeriod3 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiCdeVaccColumn.DoesPeriod3, this.entityData.DoesPeriod3);
				OnPropertyChanged("DoesPeriod3");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReVaccFlg property. 
		///		مؤشر اعادة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsReVaccFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مؤشر اعادة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ReVaccFlg
		{
			get
			{
				return this.entityData.ReVaccFlg; 
			}
			
			set
			{
				if (this.entityData.ReVaccFlg == value)
					return;
					
				OnColumnChanging(MdiCdeVaccColumn.ReVaccFlg, this.entityData.ReVaccFlg);
				this.entityData.ReVaccFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MdiCdeVaccColumn.ReVaccFlg, this.entityData.ReVaccFlg);
				OnPropertyChanged("ReVaccFlg");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of MdiStudVacc objects
		///	which are related to this object through the relation FK_MDI_STUD_VACC_MDI_CDE_VACC
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<MdiStudVacc> MdiStudVaccCollection
		{
			get { return entityData.MdiStudVaccCollection; }
			set { entityData.MdiStudVaccCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("VaccCode", "Vacc Code"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("VaccCode", "Vacc Code", 10));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("VaccAr", "Vacc Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("VaccAr", "Vacc Ar", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("VaccEn", "Vacc En"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("VaccEn", "Vacc En", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SideEffect", "Side Effect", 250));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "MDI_CDE_VACC"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MDI_CDE_VACC_ID", "VACC_CODE", "VACC_AR", "VACC_EN", "SIDE_EFFECT", "DOES_COUNT", "PERIOD_TYPE", "DOES_PERIOD2", "DOES_PERIOD3", "RE_VACC_FLG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as MdiCdeVaccEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (MdiCdeVacc) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<MdiCdeVacc>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as MdiCdeVacc);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed MdiCdeVacc Entity 
		///</summary>
		protected virtual MdiCdeVacc Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			MdiCdeVacc copy = new MdiCdeVacc();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MdiCdeVaccId = this.MdiCdeVaccId;
					copy.OriginalMdiCdeVaccId = this.OriginalMdiCdeVaccId;
				copy.VaccCode = this.VaccCode;
				copy.VaccAr = this.VaccAr;
				copy.VaccEn = this.VaccEn;
				copy.SideEffect = this.SideEffect;
				copy.DoesCount = this.DoesCount;
				copy.PeriodType = this.PeriodType;
				copy.DoesPeriod2 = this.DoesPeriod2;
				copy.DoesPeriod3 = this.DoesPeriod3;
				copy.ReVaccFlg = this.ReVaccFlg;
			
		
			//deep copy nested objects
			copy.MdiStudVaccCollection = (TList<MdiStudVacc>) MakeCopyOf(this.MdiStudVaccCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed MdiCdeVacc Entity 
		///</summary>
		public virtual MdiCdeVacc Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed MdiCdeVacc Entity which is a deep copy of the current entity.
		///</summary>
		public virtual MdiCdeVacc DeepCopy()
		{
			return EntityHelper.Clone<MdiCdeVacc>(this as MdiCdeVacc);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as MdiCdeVaccEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new MdiCdeVaccEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as MdiCdeVaccEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(MdiCdeVaccColumn column)
		{
			switch(column)
			{
					case MdiCdeVaccColumn.MdiCdeVaccId:
					return entityData.MdiCdeVaccId != _originalData.MdiCdeVaccId;
					case MdiCdeVaccColumn.VaccCode:
					return entityData.VaccCode != _originalData.VaccCode;
					case MdiCdeVaccColumn.VaccAr:
					return entityData.VaccAr != _originalData.VaccAr;
					case MdiCdeVaccColumn.VaccEn:
					return entityData.VaccEn != _originalData.VaccEn;
					case MdiCdeVaccColumn.SideEffect:
					return entityData.SideEffect != _originalData.SideEffect;
					case MdiCdeVaccColumn.DoesCount:
					return entityData.DoesCount != _originalData.DoesCount;
					case MdiCdeVaccColumn.PeriodType:
					return entityData.PeriodType != _originalData.PeriodType;
					case MdiCdeVaccColumn.DoesPeriod2:
					return entityData.DoesPeriod2 != _originalData.DoesPeriod2;
					case MdiCdeVaccColumn.DoesPeriod3:
					return entityData.DoesPeriod3 != _originalData.DoesPeriod3;
					case MdiCdeVaccColumn.ReVaccFlg:
					return entityData.ReVaccFlg != _originalData.ReVaccFlg;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< MdiCdeVaccColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MdiCdeVaccId != _originalData.MdiCdeVaccId;
			result = result || entityData.VaccCode != _originalData.VaccCode;
			result = result || entityData.VaccAr != _originalData.VaccAr;
			result = result || entityData.VaccEn != _originalData.VaccEn;
			result = result || entityData.SideEffect != _originalData.SideEffect;
			result = result || entityData.DoesCount != _originalData.DoesCount;
			result = result || entityData.PeriodType != _originalData.PeriodType;
			result = result || entityData.DoesPeriod2 != _originalData.DoesPeriod2;
			result = result || entityData.DoesPeriod3 != _originalData.DoesPeriod3;
			result = result || entityData.ReVaccFlg != _originalData.ReVaccFlg;
			return result;
		}	
		
		///<summary>
		///  Returns a MdiCdeVacc Entity with the original data.
		///</summary>
		public MdiCdeVacc GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateMdiCdeVacc(
				_originalData.MdiCdeVaccId,
				_originalData.VaccCode,
				_originalData.VaccAr,
				_originalData.VaccEn,
				_originalData.SideEffect,
				_originalData.DoesCount,
				_originalData.PeriodType,
				_originalData.DoesPeriod2,
				_originalData.DoesPeriod3,
				_originalData.ReVaccFlg
				);
				
			return (MdiCdeVacc)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="MdiCdeVaccBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is MdiCdeVaccBase)
				return ValueEquals(this, (MdiCdeVaccBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="MdiCdeVaccBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MdiCdeVaccId.GetHashCode() ^ 
					this.VaccCode.GetHashCode() ^ 
					this.VaccAr.GetHashCode() ^ 
					this.VaccEn.GetHashCode() ^ 
					((this.SideEffect == null) ? string.Empty : this.SideEffect.ToString()).GetHashCode() ^ 
					((this.DoesCount == null) ? string.Empty : this.DoesCount.ToString()).GetHashCode() ^ 
					((this.PeriodType == null) ? string.Empty : this.PeriodType.ToString()).GetHashCode() ^ 
					((this.DoesPeriod2 == null) ? string.Empty : this.DoesPeriod2.ToString()).GetHashCode() ^ 
					((this.DoesPeriod3 == null) ? string.Empty : this.DoesPeriod3.ToString()).GetHashCode() ^ 
					((this.ReVaccFlg == null) ? string.Empty : this.ReVaccFlg.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="MdiCdeVaccBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(MdiCdeVaccBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="MdiCdeVaccBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="MdiCdeVaccBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="MdiCdeVaccBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(MdiCdeVaccBase Object1, MdiCdeVaccBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MdiCdeVaccId != Object2.MdiCdeVaccId)
				equal = false;
			if (Object1.VaccCode != Object2.VaccCode)
				equal = false;
			if (Object1.VaccAr != Object2.VaccAr)
				equal = false;
			if (Object1.VaccEn != Object2.VaccEn)
				equal = false;
			if ( Object1.SideEffect != null && Object2.SideEffect != null )
			{
				if (Object1.SideEffect != Object2.SideEffect)
					equal = false;
			}
			else if (Object1.SideEffect == null ^ Object2.SideEffect == null )
			{
				equal = false;
			}
			if ( Object1.DoesCount != null && Object2.DoesCount != null )
			{
				if (Object1.DoesCount != Object2.DoesCount)
					equal = false;
			}
			else if (Object1.DoesCount == null ^ Object2.DoesCount == null )
			{
				equal = false;
			}
			if ( Object1.PeriodType != null && Object2.PeriodType != null )
			{
				if (Object1.PeriodType != Object2.PeriodType)
					equal = false;
			}
			else if (Object1.PeriodType == null ^ Object2.PeriodType == null )
			{
				equal = false;
			}
			if ( Object1.DoesPeriod2 != null && Object2.DoesPeriod2 != null )
			{
				if (Object1.DoesPeriod2 != Object2.DoesPeriod2)
					equal = false;
			}
			else if (Object1.DoesPeriod2 == null ^ Object2.DoesPeriod2 == null )
			{
				equal = false;
			}
			if ( Object1.DoesPeriod3 != null && Object2.DoesPeriod3 != null )
			{
				if (Object1.DoesPeriod3 != Object2.DoesPeriod3)
					equal = false;
			}
			else if (Object1.DoesPeriod3 == null ^ Object2.DoesPeriod3 == null )
			{
				equal = false;
			}
			if ( Object1.ReVaccFlg != null && Object2.ReVaccFlg != null )
			{
				if (Object1.ReVaccFlg != Object2.ReVaccFlg)
					equal = false;
			}
			else if (Object1.ReVaccFlg == null ^ Object2.ReVaccFlg == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((MdiCdeVaccBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static MdiCdeVaccComparer GetComparer()
        {
            return new MdiCdeVaccComparer();
        }
        */

        // Comparer delegates back to MdiCdeVacc
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(MdiCdeVacc rhs, MdiCdeVaccColumn which)
        {
            switch (which)
            {
            	
            	
            	case MdiCdeVaccColumn.MdiCdeVaccId:
            		return this.MdiCdeVaccId.CompareTo(rhs.MdiCdeVaccId);
            		
            		                 
            	
            	
            	case MdiCdeVaccColumn.VaccCode:
            		return this.VaccCode.CompareTo(rhs.VaccCode);
            		
            		                 
            	
            	
            	case MdiCdeVaccColumn.VaccAr:
            		return this.VaccAr.CompareTo(rhs.VaccAr);
            		
            		                 
            	
            	
            	case MdiCdeVaccColumn.VaccEn:
            		return this.VaccEn.CompareTo(rhs.VaccEn);
            		
            		                 
            	
            	
            	case MdiCdeVaccColumn.SideEffect:
            		return this.SideEffect.CompareTo(rhs.SideEffect);
            		
            		                 
            	
            	
            	case MdiCdeVaccColumn.DoesCount:
            		return this.DoesCount.Value.CompareTo(rhs.DoesCount.Value);
            		
            		                 
            	
            	
            	case MdiCdeVaccColumn.PeriodType:
            		return this.PeriodType.Value.CompareTo(rhs.PeriodType.Value);
            		
            		                 
            	
            	
            	case MdiCdeVaccColumn.DoesPeriod2:
            		return this.DoesPeriod2.Value.CompareTo(rhs.DoesPeriod2.Value);
            		
            		                 
            	
            	
            	case MdiCdeVaccColumn.DoesPeriod3:
            		return this.DoesPeriod3.Value.CompareTo(rhs.DoesPeriod3.Value);
            		
            		                 
            	
            	
            	case MdiCdeVaccColumn.ReVaccFlg:
            		return this.ReVaccFlg.Value.CompareTo(rhs.ReVaccFlg.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<MdiCdeVaccKey> Members
		
		// member variable for the EntityId property
		private MdiCdeVaccKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual MdiCdeVaccKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new MdiCdeVaccKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("MdiCdeVacc")
					.Append("|").Append( this.MdiCdeVaccId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{11}{10}- MdiCdeVaccId: {0}{10}- VaccCode: {1}{10}- VaccAr: {2}{10}- VaccEn: {3}{10}- SideEffect: {4}{10}- DoesCount: {5}{10}- PeriodType: {6}{10}- DoesPeriod2: {7}{10}- DoesPeriod3: {8}{10}- ReVaccFlg: {9}{10}{12}", 
				this.MdiCdeVaccId,
				this.VaccCode,
				this.VaccAr,
				this.VaccEn,
				(this.SideEffect == null) ? string.Empty : this.SideEffect.ToString(),
				(this.DoesCount == null) ? string.Empty : this.DoesCount.ToString(),
				(this.PeriodType == null) ? string.Empty : this.PeriodType.ToString(),
				(this.DoesPeriod2 == null) ? string.Empty : this.DoesPeriod2.ToString(),
				(this.DoesPeriod3 == null) ? string.Empty : this.DoesPeriod3.ToString(),
				(this.ReVaccFlg == null) ? string.Empty : this.ReVaccFlg.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'MDI_CDE_VACC' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class MdiCdeVaccEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MDI_CDE_VACC_ID : نوع التطعيم
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "MDI_CDE_VACC"</remarks>
		public System.Decimal MdiCdeVaccId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalMdiCdeVaccId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// VACC_CODE : كود التطعيم
		/// </summary>
		public System.String		  VaccCode = string.Empty;
		
		/// <summary>
		/// VACC_AR : 
		/// </summary>
		public System.String		  VaccAr = string.Empty;
		
		/// <summary>
		/// VACC_EN : 
		/// </summary>
		public System.String		  VaccEn = string.Empty;
		
		/// <summary>
		/// SIDE_EFFECT : الاعراض الجانبية
		/// </summary>
		public System.String		  SideEffect = null;
		
		/// <summary>
		/// DOES_COUNT : عدد الجرعات  0infinity
		/// </summary>
		public System.Decimal?		  DoesCount = null;
		
		/// <summary>
		/// PERIOD_TYPE : 1سنة- 2شهر
		/// </summary>
		public System.Decimal?		  PeriodType = null;
		
		/// <summary>
		/// DOES_PERIOD2 : موعد الجرعة التانية لو وجدت
		/// </summary>
		public System.Decimal?		  DoesPeriod2 = null;
		
		/// <summary>
		/// DOES_PERIOD3 : موعد الجرعة التالتة لو وجدت
		/// </summary>
		public System.Decimal?		  DoesPeriod3 = null;
		
		/// <summary>
		/// RE_VACC_FLG : مؤشر اعادة
		/// </summary>
		public System.Decimal?		  ReVaccFlg = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region MdiStudVaccCollection
		
		private TList<MdiStudVacc> _mdiStudVaccMdiCdeVaccId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _mdiStudVaccMdiCdeVaccId
		/// </summary>
		
		public TList<MdiStudVacc> MdiStudVaccCollection
		{
			get
			{
				if (_mdiStudVaccMdiCdeVaccId == null)
				{
				_mdiStudVaccMdiCdeVaccId = new TList<MdiStudVacc>();
				}
	
				return _mdiStudVaccMdiCdeVaccId;
			}
			set { _mdiStudVaccMdiCdeVaccId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			MdiCdeVaccEntityData _tmp = new MdiCdeVaccEntityData();
						
			_tmp.MdiCdeVaccId = this.MdiCdeVaccId;
			_tmp.OriginalMdiCdeVaccId = this.OriginalMdiCdeVaccId;
			
			_tmp.VaccCode = this.VaccCode;
			_tmp.VaccAr = this.VaccAr;
			_tmp.VaccEn = this.VaccEn;
			_tmp.SideEffect = this.SideEffect;
			_tmp.DoesCount = this.DoesCount;
			_tmp.PeriodType = this.PeriodType;
			_tmp.DoesPeriod2 = this.DoesPeriod2;
			_tmp.DoesPeriod3 = this.DoesPeriod3;
			_tmp.ReVaccFlg = this.ReVaccFlg;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._mdiStudVaccMdiCdeVaccId != null)
				_tmp.MdiStudVaccCollection = (TList<MdiStudVacc>) MakeCopyOf(this.MdiStudVaccCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			MdiCdeVaccEntityData _tmp = new MdiCdeVaccEntityData();
						
			_tmp.MdiCdeVaccId = this.MdiCdeVaccId;
			_tmp.OriginalMdiCdeVaccId = this.OriginalMdiCdeVaccId;
			
			_tmp.VaccCode = this.VaccCode;
			_tmp.VaccAr = this.VaccAr;
			_tmp.VaccEn = this.VaccEn;
			_tmp.SideEffect = this.SideEffect;
			_tmp.DoesCount = this.DoesCount;
			_tmp.PeriodType = this.PeriodType;
			_tmp.DoesPeriod2 = this.DoesPeriod2;
			_tmp.DoesPeriod3 = this.DoesPeriod3;
			_tmp.ReVaccFlg = this.ReVaccFlg;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.MdiStudVaccCollection = (TList<MdiStudVacc>) MakeCopyOf(this.MdiStudVaccCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MdiCdeVaccColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(MdiCdeVaccColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MdiCdeVaccColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(MdiCdeVaccColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MdiCdeVaccColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(MdiCdeVaccColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				MdiCdeVaccEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new MdiCdeVaccEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MdiCdeVaccColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(MdiCdeVaccColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				MdiCdeVaccEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new MdiCdeVaccEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region MdiCdeVaccEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="MdiCdeVacc"/> object.
	/// </remarks>
	public class MdiCdeVaccEventArgs : System.EventArgs
	{
		private MdiCdeVaccColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the MdiCdeVaccEventArgs class.
		///</summary>
		public MdiCdeVaccEventArgs(MdiCdeVaccColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the MdiCdeVaccEventArgs class.
		///</summary>
		public MdiCdeVaccEventArgs(MdiCdeVaccColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The MdiCdeVaccColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="MdiCdeVaccColumn" />
		public MdiCdeVaccColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all MdiCdeVacc related events.
	///</summary>
	public delegate void MdiCdeVaccEventHandler(object sender, MdiCdeVaccEventArgs e);
	
	#region MdiCdeVaccComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class MdiCdeVaccComparer : System.Collections.Generic.IComparer<MdiCdeVacc>
	{
		MdiCdeVaccColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:MdiCdeVaccComparer"/> class.
        /// </summary>
		public MdiCdeVaccComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:MdiCdeVaccComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public MdiCdeVaccComparer(MdiCdeVaccColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="MdiCdeVacc"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="MdiCdeVacc"/> to compare.</param>
        /// <param name="b">The second <c>MdiCdeVacc</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(MdiCdeVacc a, MdiCdeVacc b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(MdiCdeVacc entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(MdiCdeVacc a, MdiCdeVacc b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public MdiCdeVaccColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region MdiCdeVaccKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="MdiCdeVacc"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class MdiCdeVaccKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the MdiCdeVaccKey class.
		/// </summary>
		public MdiCdeVaccKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the MdiCdeVaccKey class.
		/// </summary>
		public MdiCdeVaccKey(MdiCdeVaccBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MdiCdeVaccId = entity.MdiCdeVaccId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the MdiCdeVaccKey class.
		/// </summary>
		public MdiCdeVaccKey(System.Decimal _mdiCdeVaccId)
		{
			#region Init Properties

			this.MdiCdeVaccId = _mdiCdeVaccId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private MdiCdeVaccBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public MdiCdeVaccBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MdiCdeVaccId property
		private System.Decimal _mdiCdeVaccId;
		
		/// <summary>
		/// Gets or sets the MdiCdeVaccId property.
		/// </summary>
		public System.Decimal MdiCdeVaccId
		{
			get { return _mdiCdeVaccId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MdiCdeVaccId = value;
				
				_mdiCdeVaccId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MdiCdeVaccId = ( values["MdiCdeVaccId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["MdiCdeVaccId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MdiCdeVaccId", MdiCdeVaccId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MdiCdeVaccId: {0}{1}",
								MdiCdeVaccId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region MdiCdeVaccColumn Enum
	
	/// <summary>
	/// Enumerate the MdiCdeVacc columns.
	/// </summary>
	[Serializable]
	public enum MdiCdeVaccColumn : int
	{
		/// <summary>
		/// MdiCdeVaccId : نوع التطعيم
		/// </summary>
		[EnumTextValue("MDI_CDE_VACC_ID")]
		[ColumnEnum("MDI_CDE_VACC_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		MdiCdeVaccId = 1,
		/// <summary>
		/// VaccCode : كود التطعيم
		/// </summary>
		[EnumTextValue("VACC_CODE")]
		[ColumnEnum("VACC_CODE", typeof(System.String), System.Data.DbType.String, false, false, false, 10)]
		VaccCode = 2,
		/// <summary>
		/// VaccAr : 
		/// </summary>
		[EnumTextValue("VACC_AR")]
		[ColumnEnum("VACC_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		VaccAr = 3,
		/// <summary>
		/// VaccEn : 
		/// </summary>
		[EnumTextValue("VACC_EN")]
		[ColumnEnum("VACC_EN", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		VaccEn = 4,
		/// <summary>
		/// SideEffect : الاعراض الجانبية
		/// </summary>
		[EnumTextValue("SIDE_EFFECT")]
		[ColumnEnum("SIDE_EFFECT", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		SideEffect = 5,
		/// <summary>
		/// DoesCount : عدد الجرعات  0infinity
		/// </summary>
		[EnumTextValue("DOES_COUNT")]
		[ColumnEnum("DOES_COUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DoesCount = 6,
		/// <summary>
		/// PeriodType : 1سنة- 2شهر
		/// </summary>
		[EnumTextValue("PERIOD_TYPE")]
		[ColumnEnum("PERIOD_TYPE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PeriodType = 7,
		/// <summary>
		/// DoesPeriod2 : موعد الجرعة التانية لو وجدت
		/// </summary>
		[EnumTextValue("DOES_PERIOD2")]
		[ColumnEnum("DOES_PERIOD2", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DoesPeriod2 = 8,
		/// <summary>
		/// DoesPeriod3 : موعد الجرعة التالتة لو وجدت
		/// </summary>
		[EnumTextValue("DOES_PERIOD3")]
		[ColumnEnum("DOES_PERIOD3", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DoesPeriod3 = 9,
		/// <summary>
		/// ReVaccFlg : مؤشر اعادة
		/// </summary>
		[EnumTextValue("RE_VACC_FLG")]
		[ColumnEnum("RE_VACC_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ReVaccFlg = 10
	}//End enum

	#endregion MdiCdeVaccColumn Enum

} // end namespace
