
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdGraduationAward.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_GRADUATION_AWARD' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdGraduationAwardBase : EntityBase, IEdGraduationAward, IEntityId<EdGraduationAwardKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdGraduationAwardEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdGraduationAwardEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdGraduationAwardEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdGraduationAward> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdGraduationAwardEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdGraduationAwardEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdGraduationAwardBase"/> instance.
		///</summary>
		public EdGraduationAwardBase()
		{
			this.entityData = new EdGraduationAwardEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdGraduationAwardBase"/> instance.
		///</summary>
		///<param name="_edGraduationAwardId"></param>
		///<param name="_graduationAwardDate"></param>
		///<param name="_graduationAwardNumber"></param>
		///<param name="_presidentApprovalDate">دور</param>
		///<param name="_notes"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId">مسلسل الفصل الدراسي</param>
		///<param name="_isApplied"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_facultyGraduationAwardNumber"></param>
		///<param name="_facultyGraduationAwardDate"></param>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_asCodeDegreeId">مسلسل الدرجة العلمية</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public EdGraduationAwardBase(System.Decimal _edGraduationAwardId, System.DateTime _graduationAwardDate, 
			System.String _graduationAwardNumber, System.DateTime? _presidentApprovalDate, System.String _notes, 
			System.Decimal? _edAcadYearId, System.Decimal? _edCodeSemesterId, System.Decimal _isApplied, 
			System.Decimal? _asFacultyInfoId, System.String _facultyGraduationAwardNumber, System.DateTime? _facultyGraduationAwardDate, 
			System.Decimal? _asCodeDegreeClassId, System.Decimal? _asCodeDegreeId, System.Decimal? _seUserId, 
			System.DateTime? _lastDate)
		{
			this.entityData = new EdGraduationAwardEntityData();
			this.backupData = null;

			this.EdGraduationAwardId = _edGraduationAwardId;
			this.GraduationAwardDate = _graduationAwardDate;
			this.GraduationAwardNumber = _graduationAwardNumber;
			this.PresidentApprovalDate = _presidentApprovalDate;
			this.Notes = _notes;
			this.EdAcadYearId = _edAcadYearId;
			this.EdCodeSemesterId = _edCodeSemesterId;
			this.IsApplied = _isApplied;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.FacultyGraduationAwardNumber = _facultyGraduationAwardNumber;
			this.FacultyGraduationAwardDate = _facultyGraduationAwardDate;
			this.AsCodeDegreeClassId = _asCodeDegreeClassId;
			this.AsCodeDegreeId = _asCodeDegreeId;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdGraduationAward"/> instance.
		///</summary>
		///<param name="_edGraduationAwardId"></param>
		///<param name="_graduationAwardDate"></param>
		///<param name="_graduationAwardNumber"></param>
		///<param name="_presidentApprovalDate">دور</param>
		///<param name="_notes"></param>
		///<param name="_edAcadYearId"></param>
		///<param name="_edCodeSemesterId">مسلسل الفصل الدراسي</param>
		///<param name="_isApplied"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_facultyGraduationAwardNumber"></param>
		///<param name="_facultyGraduationAwardDate"></param>
		///<param name="_asCodeDegreeClassId"></param>
		///<param name="_asCodeDegreeId">مسلسل الدرجة العلمية</param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static EdGraduationAward CreateEdGraduationAward(System.Decimal _edGraduationAwardId, System.DateTime _graduationAwardDate, 
			System.String _graduationAwardNumber, System.DateTime? _presidentApprovalDate, System.String _notes, 
			System.Decimal? _edAcadYearId, System.Decimal? _edCodeSemesterId, System.Decimal _isApplied, 
			System.Decimal? _asFacultyInfoId, System.String _facultyGraduationAwardNumber, System.DateTime? _facultyGraduationAwardDate, 
			System.Decimal? _asCodeDegreeClassId, System.Decimal? _asCodeDegreeId, System.Decimal? _seUserId, 
			System.DateTime? _lastDate)
		{
			EdGraduationAward newEdGraduationAward = new EdGraduationAward();
			newEdGraduationAward.EdGraduationAwardId = _edGraduationAwardId;
			newEdGraduationAward.GraduationAwardDate = _graduationAwardDate;
			newEdGraduationAward.GraduationAwardNumber = _graduationAwardNumber;
			newEdGraduationAward.PresidentApprovalDate = _presidentApprovalDate;
			newEdGraduationAward.Notes = _notes;
			newEdGraduationAward.EdAcadYearId = _edAcadYearId;
			newEdGraduationAward.EdCodeSemesterId = _edCodeSemesterId;
			newEdGraduationAward.IsApplied = _isApplied;
			newEdGraduationAward.AsFacultyInfoId = _asFacultyInfoId;
			newEdGraduationAward.FacultyGraduationAwardNumber = _facultyGraduationAwardNumber;
			newEdGraduationAward.FacultyGraduationAwardDate = _facultyGraduationAwardDate;
			newEdGraduationAward.AsCodeDegreeClassId = _asCodeDegreeClassId;
			newEdGraduationAward.AsCodeDegreeId = _asCodeDegreeId;
			newEdGraduationAward.SeUserId = _seUserId;
			newEdGraduationAward.LastDate = _lastDate;
			return newEdGraduationAward;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdGraduationAwardId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdGraduationAwardId
		{
			get
			{
				return this.entityData.EdGraduationAwardId; 
			}
			
			set
			{
				if (this.entityData.EdGraduationAwardId == value)
					return;
					
				OnColumnChanging(EdGraduationAwardColumn.EdGraduationAwardId, this.entityData.EdGraduationAwardId);
				this.entityData.EdGraduationAwardId = value;
				this.EntityId.EdGraduationAwardId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGraduationAwardColumn.EdGraduationAwardId, this.entityData.EdGraduationAwardId);
				OnPropertyChanged("EdGraduationAwardId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_GRADUATION_AWARD_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ED_GRADUATION_AWARD_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdGraduationAwardId
		{
			get { return this.entityData.OriginalEdGraduationAwardId; }
			set { this.entityData.OriginalEdGraduationAwardId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the GraduationAwardDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime GraduationAwardDate
		{
			get
			{
				return this.entityData.GraduationAwardDate; 
			}
			
			set
			{
				if (this.entityData.GraduationAwardDate == value)
					return;
					
				OnColumnChanging(EdGraduationAwardColumn.GraduationAwardDate, this.entityData.GraduationAwardDate);
				this.entityData.GraduationAwardDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGraduationAwardColumn.GraduationAwardDate, this.entityData.GraduationAwardDate);
				OnPropertyChanged("GraduationAwardDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GraduationAwardNumber property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String GraduationAwardNumber
		{
			get
			{
				return this.entityData.GraduationAwardNumber; 
			}
			
			set
			{
				if (this.entityData.GraduationAwardNumber == value)
					return;
					
				OnColumnChanging(EdGraduationAwardColumn.GraduationAwardNumber, this.entityData.GraduationAwardNumber);
				this.entityData.GraduationAwardNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGraduationAwardColumn.GraduationAwardNumber, this.entityData.GraduationAwardNumber);
				OnPropertyChanged("GraduationAwardNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PresidentApprovalDate property. 
		///		دور
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsPresidentApprovalDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"دور"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? PresidentApprovalDate
		{
			get
			{
				return this.entityData.PresidentApprovalDate; 
			}
			
			set
			{
				if (this.entityData.PresidentApprovalDate == value)
					return;
					
				OnColumnChanging(EdGraduationAwardColumn.PresidentApprovalDate, this.entityData.PresidentApprovalDate);
				this.entityData.PresidentApprovalDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGraduationAwardColumn.PresidentApprovalDate, this.entityData.PresidentApprovalDate);
				OnPropertyChanged("PresidentApprovalDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(EdGraduationAwardColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGraduationAwardColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadYearId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdAcadYearIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdAcadYearId
		{
			get
			{
				return this.entityData.EdAcadYearId; 
			}
			
			set
			{
				if (this.entityData.EdAcadYearId == value)
					return;
					
				OnColumnChanging(EdGraduationAwardColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				this.entityData.EdAcadYearId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGraduationAwardColumn.EdAcadYearId, this.entityData.EdAcadYearId);
				OnPropertyChanged("EdAcadYearId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeSemesterId property. 
		///		مسلسل الفصل الدراسي
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeSemesterIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مسلسل الفصل الدراسي"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeSemesterId
		{
			get
			{
				return this.entityData.EdCodeSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdCodeSemesterId == value)
					return;
					
				OnColumnChanging(EdGraduationAwardColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				this.entityData.EdCodeSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGraduationAwardColumn.EdCodeSemesterId, this.entityData.EdCodeSemesterId);
				OnPropertyChanged("EdCodeSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsApplied property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsApplied
		{
			get
			{
				return this.entityData.IsApplied; 
			}
			
			set
			{
				if (this.entityData.IsApplied == value)
					return;
					
				OnColumnChanging(EdGraduationAwardColumn.IsApplied, this.entityData.IsApplied);
				this.entityData.IsApplied = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGraduationAwardColumn.IsApplied, this.entityData.IsApplied);
				OnPropertyChanged("IsApplied");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(EdGraduationAwardColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGraduationAwardColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FacultyGraduationAwardNumber property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String FacultyGraduationAwardNumber
		{
			get
			{
				return this.entityData.FacultyGraduationAwardNumber; 
			}
			
			set
			{
				if (this.entityData.FacultyGraduationAwardNumber == value)
					return;
					
				OnColumnChanging(EdGraduationAwardColumn.FacultyGraduationAwardNumber, this.entityData.FacultyGraduationAwardNumber);
				this.entityData.FacultyGraduationAwardNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGraduationAwardColumn.FacultyGraduationAwardNumber, this.entityData.FacultyGraduationAwardNumber);
				OnPropertyChanged("FacultyGraduationAwardNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FacultyGraduationAwardDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsFacultyGraduationAwardDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? FacultyGraduationAwardDate
		{
			get
			{
				return this.entityData.FacultyGraduationAwardDate; 
			}
			
			set
			{
				if (this.entityData.FacultyGraduationAwardDate == value)
					return;
					
				OnColumnChanging(EdGraduationAwardColumn.FacultyGraduationAwardDate, this.entityData.FacultyGraduationAwardDate);
				this.entityData.FacultyGraduationAwardDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGraduationAwardColumn.FacultyGraduationAwardDate, this.entityData.FacultyGraduationAwardDate);
				OnPropertyChanged("FacultyGraduationAwardDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeClassId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeClassIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeClassId
		{
			get
			{
				return this.entityData.AsCodeDegreeClassId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeClassId == value)
					return;
					
				OnColumnChanging(EdGraduationAwardColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				this.entityData.AsCodeDegreeClassId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGraduationAwardColumn.AsCodeDegreeClassId, this.entityData.AsCodeDegreeClassId);
				OnPropertyChanged("AsCodeDegreeClassId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsCodeDegreeId property. 
		///		مسلسل الدرجة العلمية
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsCodeDegreeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مسلسل الدرجة العلمية"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsCodeDegreeId
		{
			get
			{
				return this.entityData.AsCodeDegreeId; 
			}
			
			set
			{
				if (this.entityData.AsCodeDegreeId == value)
					return;
					
				OnColumnChanging(EdGraduationAwardColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				this.entityData.AsCodeDegreeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGraduationAwardColumn.AsCodeDegreeId, this.entityData.AsCodeDegreeId);
				OnPropertyChanged("AsCodeDegreeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(EdGraduationAwardColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGraduationAwardColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(EdGraduationAwardColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdGraduationAwardColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return entityData.AsCodeDegreeIdSource; }
            set { entityData.AsCodeDegreeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return entityData.AsCodeDegreeClassIdSource; }
            set { entityData.AsCodeDegreeClassIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return entityData.EdAcadYearIdSource; }
            set { entityData.EdAcadYearIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return entityData.EdCodeSemesterIdSource; }
            set { entityData.EdCodeSemesterIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of GsAttchdDoc objects
		///	which are related to this object through the relation FK_GS_ATTCHD_DOC_ED_GRADUATION_AWARD
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GsAttchdDoc> GsAttchdDocCollection
		{
			get { return entityData.GsAttchdDocCollection; }
			set { entityData.GsAttchdDocCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudGraduationAward objects
		///	which are related to this object through the relation FK_ED_STUD_GRADUATION_AWARD_ED_GRADUATION_AWARD
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudGraduationAward> EdStudGraduationAwardCollection
		{
			get { return entityData.EdStudGraduationAwardCollection; }
			set { entityData.EdStudGraduationAwardCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("GraduationAwardNumber", "Graduation Award Number"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GraduationAwardNumber", "Graduation Award Number", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FacultyGraduationAwardNumber", "Faculty Graduation Award Number", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_GRADUATION_AWARD"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_GRADUATION_AWARD_ID", "GRADUATION_AWARD_DATE", "GRADUATION_AWARD_NUMBER", "PRESIDENT_APPROVAL_DATE", "NOTES", "ED_ACAD_YEAR_ID", "ED_CODE_SEMESTER_ID", "IS_APPLIED", "AS_FACULTY_INFO_ID", "FACULTY_GRADUATION_AWARD_NUMBER", "FACULTY_GRADUATION_AWARD_DATE", "AS_CODE_DEGREE_CLASS_ID", "AS_CODE_DEGREE_ID", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdGraduationAwardEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdGraduationAward) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdGraduationAward>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdGraduationAward);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdGraduationAward Entity 
		///</summary>
		protected virtual EdGraduationAward Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdGraduationAward copy = new EdGraduationAward();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdGraduationAwardId = this.EdGraduationAwardId;
					copy.OriginalEdGraduationAwardId = this.OriginalEdGraduationAwardId;
				copy.GraduationAwardDate = this.GraduationAwardDate;
				copy.GraduationAwardNumber = this.GraduationAwardNumber;
				copy.PresidentApprovalDate = this.PresidentApprovalDate;
				copy.Notes = this.Notes;
				copy.EdAcadYearId = this.EdAcadYearId;
				copy.EdCodeSemesterId = this.EdCodeSemesterId;
				copy.IsApplied = this.IsApplied;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.FacultyGraduationAwardNumber = this.FacultyGraduationAwardNumber;
				copy.FacultyGraduationAwardDate = this.FacultyGraduationAwardDate;
				copy.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
				copy.AsCodeDegreeId = this.AsCodeDegreeId;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				copy.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				copy.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				copy.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				copy.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				copy.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				copy.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				copy.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				copy.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
		
			//deep copy nested objects
			copy.GsAttchdDocCollection = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollection, existingCopies); 
			copy.EdStudGraduationAwardCollection = (TList<EdStudGraduationAward>) MakeCopyOf(this.EdStudGraduationAwardCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdGraduationAward Entity 
		///</summary>
		public virtual EdGraduationAward Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdGraduationAward Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdGraduationAward DeepCopy()
		{
			return EntityHelper.Clone<EdGraduationAward>(this as EdGraduationAward);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdGraduationAwardEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdGraduationAwardEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdGraduationAwardEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdGraduationAwardColumn column)
		{
			switch(column)
			{
					case EdGraduationAwardColumn.EdGraduationAwardId:
					return entityData.EdGraduationAwardId != _originalData.EdGraduationAwardId;
					case EdGraduationAwardColumn.GraduationAwardDate:
					return entityData.GraduationAwardDate != _originalData.GraduationAwardDate;
					case EdGraduationAwardColumn.GraduationAwardNumber:
					return entityData.GraduationAwardNumber != _originalData.GraduationAwardNumber;
					case EdGraduationAwardColumn.PresidentApprovalDate:
					return entityData.PresidentApprovalDate != _originalData.PresidentApprovalDate;
					case EdGraduationAwardColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case EdGraduationAwardColumn.EdAcadYearId:
					return entityData.EdAcadYearId != _originalData.EdAcadYearId;
					case EdGraduationAwardColumn.EdCodeSemesterId:
					return entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
					case EdGraduationAwardColumn.IsApplied:
					return entityData.IsApplied != _originalData.IsApplied;
					case EdGraduationAwardColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case EdGraduationAwardColumn.FacultyGraduationAwardNumber:
					return entityData.FacultyGraduationAwardNumber != _originalData.FacultyGraduationAwardNumber;
					case EdGraduationAwardColumn.FacultyGraduationAwardDate:
					return entityData.FacultyGraduationAwardDate != _originalData.FacultyGraduationAwardDate;
					case EdGraduationAwardColumn.AsCodeDegreeClassId:
					return entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
					case EdGraduationAwardColumn.AsCodeDegreeId:
					return entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
					case EdGraduationAwardColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case EdGraduationAwardColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdGraduationAwardColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdGraduationAwardId != _originalData.EdGraduationAwardId;
			result = result || entityData.GraduationAwardDate != _originalData.GraduationAwardDate;
			result = result || entityData.GraduationAwardNumber != _originalData.GraduationAwardNumber;
			result = result || entityData.PresidentApprovalDate != _originalData.PresidentApprovalDate;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.EdAcadYearId != _originalData.EdAcadYearId;
			result = result || entityData.EdCodeSemesterId != _originalData.EdCodeSemesterId;
			result = result || entityData.IsApplied != _originalData.IsApplied;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.FacultyGraduationAwardNumber != _originalData.FacultyGraduationAwardNumber;
			result = result || entityData.FacultyGraduationAwardDate != _originalData.FacultyGraduationAwardDate;
			result = result || entityData.AsCodeDegreeClassId != _originalData.AsCodeDegreeClassId;
			result = result || entityData.AsCodeDegreeId != _originalData.AsCodeDegreeId;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a EdGraduationAward Entity with the original data.
		///</summary>
		public EdGraduationAward GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdGraduationAward(
				_originalData.EdGraduationAwardId,
				_originalData.GraduationAwardDate,
				_originalData.GraduationAwardNumber,
				_originalData.PresidentApprovalDate,
				_originalData.Notes,
				_originalData.EdAcadYearId,
				_originalData.EdCodeSemesterId,
				_originalData.IsApplied,
				_originalData.AsFacultyInfoId,
				_originalData.FacultyGraduationAwardNumber,
				_originalData.FacultyGraduationAwardDate,
				_originalData.AsCodeDegreeClassId,
				_originalData.AsCodeDegreeId,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (EdGraduationAward)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdGraduationAwardBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdGraduationAwardBase)
				return ValueEquals(this, (EdGraduationAwardBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdGraduationAwardBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdGraduationAwardId.GetHashCode() ^ 
					this.GraduationAwardDate.GetHashCode() ^ 
					this.GraduationAwardNumber.GetHashCode() ^ 
					((this.PresidentApprovalDate == null) ? string.Empty : this.PresidentApprovalDate.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.EdAcadYearId == null) ? string.Empty : this.EdAcadYearId.ToString()).GetHashCode() ^ 
					((this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString()).GetHashCode() ^ 
					this.IsApplied.GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					((this.FacultyGraduationAwardNumber == null) ? string.Empty : this.FacultyGraduationAwardNumber.ToString()).GetHashCode() ^ 
					((this.FacultyGraduationAwardDate == null) ? string.Empty : this.FacultyGraduationAwardDate.ToString()).GetHashCode() ^ 
					((this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString()).GetHashCode() ^ 
					((this.AsCodeDegreeId == null) ? string.Empty : this.AsCodeDegreeId.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdGraduationAwardBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdGraduationAwardBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdGraduationAwardBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdGraduationAwardBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdGraduationAwardBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdGraduationAwardBase Object1, EdGraduationAwardBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdGraduationAwardId != Object2.EdGraduationAwardId)
				equal = false;
			if (Object1.GraduationAwardDate != Object2.GraduationAwardDate)
				equal = false;
			if (Object1.GraduationAwardNumber != Object2.GraduationAwardNumber)
				equal = false;
			if ( Object1.PresidentApprovalDate != null && Object2.PresidentApprovalDate != null )
			{
				if (Object1.PresidentApprovalDate != Object2.PresidentApprovalDate)
					equal = false;
			}
			else if (Object1.PresidentApprovalDate == null ^ Object2.PresidentApprovalDate == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.EdAcadYearId != null && Object2.EdAcadYearId != null )
			{
				if (Object1.EdAcadYearId != Object2.EdAcadYearId)
					equal = false;
			}
			else if (Object1.EdAcadYearId == null ^ Object2.EdAcadYearId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeSemesterId != null && Object2.EdCodeSemesterId != null )
			{
				if (Object1.EdCodeSemesterId != Object2.EdCodeSemesterId)
					equal = false;
			}
			else if (Object1.EdCodeSemesterId == null ^ Object2.EdCodeSemesterId == null )
			{
				equal = false;
			}
			if (Object1.IsApplied != Object2.IsApplied)
				equal = false;
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if ( Object1.FacultyGraduationAwardNumber != null && Object2.FacultyGraduationAwardNumber != null )
			{
				if (Object1.FacultyGraduationAwardNumber != Object2.FacultyGraduationAwardNumber)
					equal = false;
			}
			else if (Object1.FacultyGraduationAwardNumber == null ^ Object2.FacultyGraduationAwardNumber == null )
			{
				equal = false;
			}
			if ( Object1.FacultyGraduationAwardDate != null && Object2.FacultyGraduationAwardDate != null )
			{
				if (Object1.FacultyGraduationAwardDate != Object2.FacultyGraduationAwardDate)
					equal = false;
			}
			else if (Object1.FacultyGraduationAwardDate == null ^ Object2.FacultyGraduationAwardDate == null )
			{
				equal = false;
			}
			if ( Object1.AsCodeDegreeClassId != null && Object2.AsCodeDegreeClassId != null )
			{
				if (Object1.AsCodeDegreeClassId != Object2.AsCodeDegreeClassId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeClassId == null ^ Object2.AsCodeDegreeClassId == null )
			{
				equal = false;
			}
			if ( Object1.AsCodeDegreeId != null && Object2.AsCodeDegreeId != null )
			{
				if (Object1.AsCodeDegreeId != Object2.AsCodeDegreeId)
					equal = false;
			}
			else if (Object1.AsCodeDegreeId == null ^ Object2.AsCodeDegreeId == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdGraduationAwardBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdGraduationAwardComparer GetComparer()
        {
            return new EdGraduationAwardComparer();
        }
        */

        // Comparer delegates back to EdGraduationAward
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdGraduationAward rhs, EdGraduationAwardColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdGraduationAwardColumn.EdGraduationAwardId:
            		return this.EdGraduationAwardId.CompareTo(rhs.EdGraduationAwardId);
            		
            		                 
            	
            	
            	case EdGraduationAwardColumn.GraduationAwardDate:
            		return this.GraduationAwardDate.CompareTo(rhs.GraduationAwardDate);
            		
            		                 
            	
            	
            	case EdGraduationAwardColumn.GraduationAwardNumber:
            		return this.GraduationAwardNumber.CompareTo(rhs.GraduationAwardNumber);
            		
            		                 
            	
            	
            	case EdGraduationAwardColumn.PresidentApprovalDate:
            		return this.PresidentApprovalDate.Value.CompareTo(rhs.PresidentApprovalDate.Value);
            		
            		                 
            	
            	
            	case EdGraduationAwardColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case EdGraduationAwardColumn.EdAcadYearId:
            		return this.EdAcadYearId.Value.CompareTo(rhs.EdAcadYearId.Value);
            		
            		                 
            	
            	
            	case EdGraduationAwardColumn.EdCodeSemesterId:
            		return this.EdCodeSemesterId.Value.CompareTo(rhs.EdCodeSemesterId.Value);
            		
            		                 
            	
            	
            	case EdGraduationAwardColumn.IsApplied:
            		return this.IsApplied.CompareTo(rhs.IsApplied);
            		
            		                 
            	
            	
            	case EdGraduationAwardColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case EdGraduationAwardColumn.FacultyGraduationAwardNumber:
            		return this.FacultyGraduationAwardNumber.CompareTo(rhs.FacultyGraduationAwardNumber);
            		
            		                 
            	
            	
            	case EdGraduationAwardColumn.FacultyGraduationAwardDate:
            		return this.FacultyGraduationAwardDate.Value.CompareTo(rhs.FacultyGraduationAwardDate.Value);
            		
            		                 
            	
            	
            	case EdGraduationAwardColumn.AsCodeDegreeClassId:
            		return this.AsCodeDegreeClassId.Value.CompareTo(rhs.AsCodeDegreeClassId.Value);
            		
            		                 
            	
            	
            	case EdGraduationAwardColumn.AsCodeDegreeId:
            		return this.AsCodeDegreeId.Value.CompareTo(rhs.AsCodeDegreeId.Value);
            		
            		                 
            	
            	
            	case EdGraduationAwardColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case EdGraduationAwardColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdGraduationAwardKey> Members
		
		// member variable for the EntityId property
		private EdGraduationAwardKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdGraduationAwardKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdGraduationAwardKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdGraduationAward")
					.Append("|").Append( this.EdGraduationAwardId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{16}{15}- EdGraduationAwardId: {0}{15}- GraduationAwardDate: {1}{15}- GraduationAwardNumber: {2}{15}- PresidentApprovalDate: {3}{15}- Notes: {4}{15}- EdAcadYearId: {5}{15}- EdCodeSemesterId: {6}{15}- IsApplied: {7}{15}- AsFacultyInfoId: {8}{15}- FacultyGraduationAwardNumber: {9}{15}- FacultyGraduationAwardDate: {10}{15}- AsCodeDegreeClassId: {11}{15}- AsCodeDegreeId: {12}{15}- SeUserId: {13}{15}- LastDate: {14}{15}{17}", 
				this.EdGraduationAwardId,
				this.GraduationAwardDate,
				this.GraduationAwardNumber,
				(this.PresidentApprovalDate == null) ? string.Empty : this.PresidentApprovalDate.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.EdAcadYearId == null) ? string.Empty : this.EdAcadYearId.ToString(),
				(this.EdCodeSemesterId == null) ? string.Empty : this.EdCodeSemesterId.ToString(),
				this.IsApplied,
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				(this.FacultyGraduationAwardNumber == null) ? string.Empty : this.FacultyGraduationAwardNumber.ToString(),
				(this.FacultyGraduationAwardDate == null) ? string.Empty : this.FacultyGraduationAwardDate.ToString(),
				(this.AsCodeDegreeClassId == null) ? string.Empty : this.AsCodeDegreeClassId.ToString(),
				(this.AsCodeDegreeId == null) ? string.Empty : this.AsCodeDegreeId.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_GRADUATION_AWARD' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdGraduationAwardEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_GRADUATION_AWARD_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_GRADUATION_AWARD"</remarks>
		public System.Decimal EdGraduationAwardId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdGraduationAwardId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// GRADUATION_AWARD_DATE : 
		/// </summary>
		public System.DateTime		  GraduationAwardDate = DateTime.MinValue;
		
		/// <summary>
		/// GRADUATION_AWARD_NUMBER : 
		/// </summary>
		public System.String		  GraduationAwardNumber = string.Empty;
		
		/// <summary>
		/// PRESIDENT_APPROVAL_DATE : دور
		/// </summary>
		public System.DateTime?		  PresidentApprovalDate = null;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// ED_ACAD_YEAR_ID : 
		/// </summary>
		public System.Decimal?		  EdAcadYearId = null;
		
		/// <summary>
		/// ED_CODE_SEMESTER_ID : مسلسل الفصل الدراسي
		/// </summary>
		public System.Decimal?		  EdCodeSemesterId = null;
		
		/// <summary>
		/// IS_APPLIED : 
		/// </summary>
		public System.Decimal		  IsApplied = 0.0m;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// FACULTY_GRADUATION_AWARD_NUMBER : 
		/// </summary>
		public System.String		  FacultyGraduationAwardNumber = null;
		
		/// <summary>
		/// FACULTY_GRADUATION_AWARD_DATE : 
		/// </summary>
		public System.DateTime?		  FacultyGraduationAwardDate = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_CLASS_ID : 
		/// </summary>
		public System.Decimal?		  AsCodeDegreeClassId = null;
		
		/// <summary>
		/// AS_CODE_DEGREE_ID : مسلسل الدرجة العلمية
		/// </summary>
		public System.Decimal?		  AsCodeDegreeId = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsCodeDegree _asCodeDegreeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegree"/>.
		/// </summary>
		/// <value>The source AsCodeDegree for AsCodeDegreeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegree AsCodeDegreeIdSource
      	{
            get { return this._asCodeDegreeIdSource; }
            set { this._asCodeDegreeIdSource = value; }
      	}
		private AsCodeDegreeClass _asCodeDegreeClassIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsCodeDegreeClass"/>.
		/// </summary>
		/// <value>The source AsCodeDegreeClass for AsCodeDegreeClassId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsCodeDegreeClass AsCodeDegreeClassIdSource
      	{
            get { return this._asCodeDegreeClassIdSource; }
            set { this._asCodeDegreeClassIdSource = value; }
      	}
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdAcadYear _edAcadYearIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadYear"/>.
		/// </summary>
		/// <value>The source EdAcadYear for EdAcadYearId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadYear EdAcadYearIdSource
      	{
            get { return this._edAcadYearIdSource; }
            set { this._edAcadYearIdSource = value; }
      	}
		private EdCodeSemester _edCodeSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeSemester"/>.
		/// </summary>
		/// <value>The source EdCodeSemester for EdCodeSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeSemester EdCodeSemesterIdSource
      	{
            get { return this._edCodeSemesterIdSource; }
            set { this._edCodeSemesterIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region GsAttchdDocCollection
		
		private TList<GsAttchdDoc> _gsAttchdDocEdGraduationAwardId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _gsAttchdDocEdGraduationAwardId
		/// </summary>
		
		public TList<GsAttchdDoc> GsAttchdDocCollection
		{
			get
			{
				if (_gsAttchdDocEdGraduationAwardId == null)
				{
				_gsAttchdDocEdGraduationAwardId = new TList<GsAttchdDoc>();
				}
	
				return _gsAttchdDocEdGraduationAwardId;
			}
			set { _gsAttchdDocEdGraduationAwardId = value; }
		}
		
		#endregion

		#region EdStudGraduationAwardCollection
		
		private TList<EdStudGraduationAward> _edStudGraduationAwardEdGraduationAwardId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudGraduationAwardEdGraduationAwardId
		/// </summary>
		
		public TList<EdStudGraduationAward> EdStudGraduationAwardCollection
		{
			get
			{
				if (_edStudGraduationAwardEdGraduationAwardId == null)
				{
				_edStudGraduationAwardEdGraduationAwardId = new TList<EdStudGraduationAward>();
				}
	
				return _edStudGraduationAwardEdGraduationAwardId;
			}
			set { _edStudGraduationAwardEdGraduationAwardId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdGraduationAwardEntityData _tmp = new EdGraduationAwardEntityData();
						
			_tmp.EdGraduationAwardId = this.EdGraduationAwardId;
			_tmp.OriginalEdGraduationAwardId = this.OriginalEdGraduationAwardId;
			
			_tmp.GraduationAwardDate = this.GraduationAwardDate;
			_tmp.GraduationAwardNumber = this.GraduationAwardNumber;
			_tmp.PresidentApprovalDate = this.PresidentApprovalDate;
			_tmp.Notes = this.Notes;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.IsApplied = this.IsApplied;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.FacultyGraduationAwardNumber = this.FacultyGraduationAwardNumber;
			_tmp.FacultyGraduationAwardDate = this.FacultyGraduationAwardDate;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.AsCodeDegreeIdSource != null)
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null)
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null)
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null)
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource) as EdCodeSemester;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._gsAttchdDocEdGraduationAwardId != null)
				_tmp.GsAttchdDocCollection = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollection); 
			if (this._edStudGraduationAwardEdGraduationAwardId != null)
				_tmp.EdStudGraduationAwardCollection = (TList<EdStudGraduationAward>) MakeCopyOf(this.EdStudGraduationAwardCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdGraduationAwardEntityData _tmp = new EdGraduationAwardEntityData();
						
			_tmp.EdGraduationAwardId = this.EdGraduationAwardId;
			_tmp.OriginalEdGraduationAwardId = this.OriginalEdGraduationAwardId;
			
			_tmp.GraduationAwardDate = this.GraduationAwardDate;
			_tmp.GraduationAwardNumber = this.GraduationAwardNumber;
			_tmp.PresidentApprovalDate = this.PresidentApprovalDate;
			_tmp.Notes = this.Notes;
			_tmp.EdAcadYearId = this.EdAcadYearId;
			_tmp.EdCodeSemesterId = this.EdCodeSemesterId;
			_tmp.IsApplied = this.IsApplied;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.FacultyGraduationAwardNumber = this.FacultyGraduationAwardNumber;
			_tmp.FacultyGraduationAwardDate = this.FacultyGraduationAwardDate;
			_tmp.AsCodeDegreeClassId = this.AsCodeDegreeClassId;
			_tmp.AsCodeDegreeId = this.AsCodeDegreeId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.AsCodeDegreeIdSource != null && existingCopies.Contains(this.AsCodeDegreeIdSource))
				_tmp.AsCodeDegreeIdSource = existingCopies[this.AsCodeDegreeIdSource] as AsCodeDegree;
			else
				_tmp.AsCodeDegreeIdSource = MakeCopyOf(this.AsCodeDegreeIdSource, existingCopies) as AsCodeDegree;
			if (this.AsCodeDegreeClassIdSource != null && existingCopies.Contains(this.AsCodeDegreeClassIdSource))
				_tmp.AsCodeDegreeClassIdSource = existingCopies[this.AsCodeDegreeClassIdSource] as AsCodeDegreeClass;
			else
				_tmp.AsCodeDegreeClassIdSource = MakeCopyOf(this.AsCodeDegreeClassIdSource, existingCopies) as AsCodeDegreeClass;
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadYearIdSource != null && existingCopies.Contains(this.EdAcadYearIdSource))
				_tmp.EdAcadYearIdSource = existingCopies[this.EdAcadYearIdSource] as EdAcadYear;
			else
				_tmp.EdAcadYearIdSource = MakeCopyOf(this.EdAcadYearIdSource, existingCopies) as EdAcadYear;
			if (this.EdCodeSemesterIdSource != null && existingCopies.Contains(this.EdCodeSemesterIdSource))
				_tmp.EdCodeSemesterIdSource = existingCopies[this.EdCodeSemesterIdSource] as EdCodeSemester;
			else
				_tmp.EdCodeSemesterIdSource = MakeCopyOf(this.EdCodeSemesterIdSource, existingCopies) as EdCodeSemester;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.GsAttchdDocCollection = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollection, existingCopies); 
			_tmp.EdStudGraduationAwardCollection = (TList<EdStudGraduationAward>) MakeCopyOf(this.EdStudGraduationAwardCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdGraduationAwardColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdGraduationAwardColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdGraduationAwardColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdGraduationAwardColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdGraduationAwardColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdGraduationAwardColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdGraduationAwardEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdGraduationAwardEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdGraduationAwardColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdGraduationAwardColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdGraduationAwardEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdGraduationAwardEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdGraduationAwardEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdGraduationAward"/> object.
	/// </remarks>
	public class EdGraduationAwardEventArgs : System.EventArgs
	{
		private EdGraduationAwardColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdGraduationAwardEventArgs class.
		///</summary>
		public EdGraduationAwardEventArgs(EdGraduationAwardColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdGraduationAwardEventArgs class.
		///</summary>
		public EdGraduationAwardEventArgs(EdGraduationAwardColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdGraduationAwardColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdGraduationAwardColumn" />
		public EdGraduationAwardColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdGraduationAward related events.
	///</summary>
	public delegate void EdGraduationAwardEventHandler(object sender, EdGraduationAwardEventArgs e);
	
	#region EdGraduationAwardComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdGraduationAwardComparer : System.Collections.Generic.IComparer<EdGraduationAward>
	{
		EdGraduationAwardColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdGraduationAwardComparer"/> class.
        /// </summary>
		public EdGraduationAwardComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdGraduationAwardComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdGraduationAwardComparer(EdGraduationAwardColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdGraduationAward"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdGraduationAward"/> to compare.</param>
        /// <param name="b">The second <c>EdGraduationAward</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdGraduationAward a, EdGraduationAward b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdGraduationAward entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdGraduationAward a, EdGraduationAward b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdGraduationAwardColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdGraduationAwardKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdGraduationAward"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdGraduationAwardKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdGraduationAwardKey class.
		/// </summary>
		public EdGraduationAwardKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdGraduationAwardKey class.
		/// </summary>
		public EdGraduationAwardKey(EdGraduationAwardBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdGraduationAwardId = entity.EdGraduationAwardId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdGraduationAwardKey class.
		/// </summary>
		public EdGraduationAwardKey(System.Decimal _edGraduationAwardId)
		{
			#region Init Properties

			this.EdGraduationAwardId = _edGraduationAwardId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdGraduationAwardBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdGraduationAwardBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdGraduationAwardId property
		private System.Decimal _edGraduationAwardId;
		
		/// <summary>
		/// Gets or sets the EdGraduationAwardId property.
		/// </summary>
		public System.Decimal EdGraduationAwardId
		{
			get { return _edGraduationAwardId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdGraduationAwardId = value;
				
				_edGraduationAwardId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdGraduationAwardId = ( values["EdGraduationAwardId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdGraduationAwardId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdGraduationAwardId", EdGraduationAwardId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdGraduationAwardId: {0}{1}",
								EdGraduationAwardId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdGraduationAwardColumn Enum
	
	/// <summary>
	/// Enumerate the EdGraduationAward columns.
	/// </summary>
	[Serializable]
	public enum EdGraduationAwardColumn : int
	{
		/// <summary>
		/// EdGraduationAwardId : 
		/// </summary>
		[EnumTextValue("ED_GRADUATION_AWARD_ID")]
		[ColumnEnum("ED_GRADUATION_AWARD_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdGraduationAwardId = 1,
		/// <summary>
		/// GraduationAwardDate : 
		/// </summary>
		[EnumTextValue("GRADUATION_AWARD_DATE")]
		[ColumnEnum("GRADUATION_AWARD_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		GraduationAwardDate = 2,
		/// <summary>
		/// GraduationAwardNumber : 
		/// </summary>
		[EnumTextValue("GRADUATION_AWARD_NUMBER")]
		[ColumnEnum("GRADUATION_AWARD_NUMBER", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		GraduationAwardNumber = 3,
		/// <summary>
		/// PresidentApprovalDate : دور
		/// </summary>
		[EnumTextValue("PRESIDENT_APPROVAL_DATE")]
		[ColumnEnum("PRESIDENT_APPROVAL_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		PresidentApprovalDate = 4,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Notes = 5,
		/// <summary>
		/// EdAcadYearId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_YEAR_ID")]
		[ColumnEnum("ED_ACAD_YEAR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdAcadYearId = 6,
		/// <summary>
		/// EdCodeSemesterId : مسلسل الفصل الدراسي
		/// </summary>
		[EnumTextValue("ED_CODE_SEMESTER_ID")]
		[ColumnEnum("ED_CODE_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeSemesterId = 7,
		/// <summary>
		/// IsApplied : 
		/// </summary>
		[EnumTextValue("IS_APPLIED")]
		[ColumnEnum("IS_APPLIED", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsApplied = 8,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 9,
		/// <summary>
		/// FacultyGraduationAwardNumber : 
		/// </summary>
		[EnumTextValue("FACULTY_GRADUATION_AWARD_NUMBER")]
		[ColumnEnum("FACULTY_GRADUATION_AWARD_NUMBER", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		FacultyGraduationAwardNumber = 10,
		/// <summary>
		/// FacultyGraduationAwardDate : 
		/// </summary>
		[EnumTextValue("FACULTY_GRADUATION_AWARD_DATE")]
		[ColumnEnum("FACULTY_GRADUATION_AWARD_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		FacultyGraduationAwardDate = 11,
		/// <summary>
		/// AsCodeDegreeClassId : 
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_CLASS_ID")]
		[ColumnEnum("AS_CODE_DEGREE_CLASS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeClassId = 12,
		/// <summary>
		/// AsCodeDegreeId : مسلسل الدرجة العلمية
		/// </summary>
		[EnumTextValue("AS_CODE_DEGREE_ID")]
		[ColumnEnum("AS_CODE_DEGREE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsCodeDegreeId = 13,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 14,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 15
	}//End enum

	#endregion EdGraduationAwardColumn Enum

} // end namespace
