
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file FeeIntegrationLedger.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'Fee_Integration_Ledger' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class FeeIntegrationLedgerBase : EntityBase, IFeeIntegrationLedger, IEntityId<FeeIntegrationLedgerKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private FeeIntegrationLedgerEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private FeeIntegrationLedgerEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private FeeIntegrationLedgerEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<FeeIntegrationLedger> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeIntegrationLedgerEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeIntegrationLedgerEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="FeeIntegrationLedgerBase"/> instance.
		///</summary>
		public FeeIntegrationLedgerBase()
		{
			this.entityData = new FeeIntegrationLedgerEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="FeeIntegrationLedgerBase"/> instance.
		///</summary>
		///<param name="_batchNo"></param>
		///<param name="_source"></param>
		///<param name="_reference"></param>
		///<param name="_lineNumber"></param>
		///<param name="_accountType"></param>
		///<param name="_accountNumber"></param>
		///<param name="_costCenter"></param>
		///<param name="_division"></param>
		///<param name="_currency"></param>
		///<param name="_amountCurDebit"></param>
		///<param name="_amountCurCredit"></param>
		///<param name="_accountingDate"></param>
		///<param name="_paymentType"></param>
		///<param name="_checkNum"></param>
		///<param name="_checkDueDate"></param>
		///<param name="_isIntegrated"></param>
		public FeeIntegrationLedgerBase(System.Decimal _batchNo, System.String _source, 
			System.String _reference, System.Decimal? _lineNumber, System.String _accountType, 
			System.String _accountNumber, System.String _costCenter, System.String _division, 
			System.String _currency, System.Decimal? _amountCurDebit, System.Decimal? _amountCurCredit, 
			System.DateTime? _accountingDate, System.String _paymentType, System.String _checkNum, 
			System.DateTime? _checkDueDate, System.Boolean? _isIntegrated)
		{
			this.entityData = new FeeIntegrationLedgerEntityData();
			this.backupData = null;

			this.BatchNo = _batchNo;
			this.Source = _source;
			this.Reference = _reference;
			this.LineNumber = _lineNumber;
			this.AccountType = _accountType;
			this.AccountNumber = _accountNumber;
			this.CostCenter = _costCenter;
			this.Division = _division;
			this.Currency = _currency;
			this.AmountCurDebit = _amountCurDebit;
			this.AmountCurCredit = _amountCurCredit;
			this.AccountingDate = _accountingDate;
			this.PaymentType = _paymentType;
			this.CheckNum = _checkNum;
			this.CheckDueDate = _checkDueDate;
			this.IsIntegrated = _isIntegrated;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="FeeIntegrationLedger"/> instance.
		///</summary>
		///<param name="_batchNo"></param>
		///<param name="_source"></param>
		///<param name="_reference"></param>
		///<param name="_lineNumber"></param>
		///<param name="_accountType"></param>
		///<param name="_accountNumber"></param>
		///<param name="_costCenter"></param>
		///<param name="_division"></param>
		///<param name="_currency"></param>
		///<param name="_amountCurDebit"></param>
		///<param name="_amountCurCredit"></param>
		///<param name="_accountingDate"></param>
		///<param name="_paymentType"></param>
		///<param name="_checkNum"></param>
		///<param name="_checkDueDate"></param>
		///<param name="_isIntegrated"></param>
		public static FeeIntegrationLedger CreateFeeIntegrationLedger(System.Decimal _batchNo, System.String _source, 
			System.String _reference, System.Decimal? _lineNumber, System.String _accountType, 
			System.String _accountNumber, System.String _costCenter, System.String _division, 
			System.String _currency, System.Decimal? _amountCurDebit, System.Decimal? _amountCurCredit, 
			System.DateTime? _accountingDate, System.String _paymentType, System.String _checkNum, 
			System.DateTime? _checkDueDate, System.Boolean? _isIntegrated)
		{
			FeeIntegrationLedger newFeeIntegrationLedger = new FeeIntegrationLedger();
			newFeeIntegrationLedger.BatchNo = _batchNo;
			newFeeIntegrationLedger.Source = _source;
			newFeeIntegrationLedger.Reference = _reference;
			newFeeIntegrationLedger.LineNumber = _lineNumber;
			newFeeIntegrationLedger.AccountType = _accountType;
			newFeeIntegrationLedger.AccountNumber = _accountNumber;
			newFeeIntegrationLedger.CostCenter = _costCenter;
			newFeeIntegrationLedger.Division = _division;
			newFeeIntegrationLedger.Currency = _currency;
			newFeeIntegrationLedger.AmountCurDebit = _amountCurDebit;
			newFeeIntegrationLedger.AmountCurCredit = _amountCurCredit;
			newFeeIntegrationLedger.AccountingDate = _accountingDate;
			newFeeIntegrationLedger.PaymentType = _paymentType;
			newFeeIntegrationLedger.CheckNum = _checkNum;
			newFeeIntegrationLedger.CheckDueDate = _checkDueDate;
			newFeeIntegrationLedger.IsIntegrated = _isIntegrated;
			return newFeeIntegrationLedger;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the BatchNo property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal BatchNo
		{
			get
			{
				return this.entityData.BatchNo; 
			}
			
			set
			{
				if (this.entityData.BatchNo == value)
					return;
					
				OnColumnChanging(FeeIntegrationLedgerColumn.BatchNo, this.entityData.BatchNo);
				this.entityData.BatchNo = value;
				this.EntityId.BatchNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeIntegrationLedgerColumn.BatchNo, this.entityData.BatchNo);
				OnPropertyChanged("BatchNo");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the BatchNo property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the BatchNo property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalBatchNo
		{
			get { return this.entityData.OriginalBatchNo; }
			set { this.entityData.OriginalBatchNo = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the Source property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Source
		{
			get
			{
				return this.entityData.Source; 
			}
			
			set
			{
				if (this.entityData.Source == value)
					return;
					
				OnColumnChanging(FeeIntegrationLedgerColumn.Source, this.entityData.Source);
				this.entityData.Source = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeIntegrationLedgerColumn.Source, this.entityData.Source);
				OnPropertyChanged("Source");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Reference property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Reference
		{
			get
			{
				return this.entityData.Reference; 
			}
			
			set
			{
				if (this.entityData.Reference == value)
					return;
					
				OnColumnChanging(FeeIntegrationLedgerColumn.Reference, this.entityData.Reference);
				this.entityData.Reference = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeIntegrationLedgerColumn.Reference, this.entityData.Reference);
				OnPropertyChanged("Reference");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LineNumber property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsLineNumberNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? LineNumber
		{
			get
			{
				return this.entityData.LineNumber; 
			}
			
			set
			{
				if (this.entityData.LineNumber == value)
					return;
					
				OnColumnChanging(FeeIntegrationLedgerColumn.LineNumber, this.entityData.LineNumber);
				this.entityData.LineNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeIntegrationLedgerColumn.LineNumber, this.entityData.LineNumber);
				OnPropertyChanged("LineNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccountType property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String AccountType
		{
			get
			{
				return this.entityData.AccountType; 
			}
			
			set
			{
				if (this.entityData.AccountType == value)
					return;
					
				OnColumnChanging(FeeIntegrationLedgerColumn.AccountType, this.entityData.AccountType);
				this.entityData.AccountType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeIntegrationLedgerColumn.AccountType, this.entityData.AccountType);
				OnPropertyChanged("AccountType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccountNumber property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String AccountNumber
		{
			get
			{
				return this.entityData.AccountNumber; 
			}
			
			set
			{
				if (this.entityData.AccountNumber == value)
					return;
					
				OnColumnChanging(FeeIntegrationLedgerColumn.AccountNumber, this.entityData.AccountNumber);
				this.entityData.AccountNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeIntegrationLedgerColumn.AccountNumber, this.entityData.AccountNumber);
				OnPropertyChanged("AccountNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CostCenter property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String CostCenter
		{
			get
			{
				return this.entityData.CostCenter; 
			}
			
			set
			{
				if (this.entityData.CostCenter == value)
					return;
					
				OnColumnChanging(FeeIntegrationLedgerColumn.CostCenter, this.entityData.CostCenter);
				this.entityData.CostCenter = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeIntegrationLedgerColumn.CostCenter, this.entityData.CostCenter);
				OnPropertyChanged("CostCenter");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Division property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String Division
		{
			get
			{
				return this.entityData.Division; 
			}
			
			set
			{
				if (this.entityData.Division == value)
					return;
					
				OnColumnChanging(FeeIntegrationLedgerColumn.Division, this.entityData.Division);
				this.entityData.Division = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeIntegrationLedgerColumn.Division, this.entityData.Division);
				OnPropertyChanged("Division");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Currency property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 6)]
		public virtual System.String Currency
		{
			get
			{
				return this.entityData.Currency; 
			}
			
			set
			{
				if (this.entityData.Currency == value)
					return;
					
				OnColumnChanging(FeeIntegrationLedgerColumn.Currency, this.entityData.Currency);
				this.entityData.Currency = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeIntegrationLedgerColumn.Currency, this.entityData.Currency);
				OnPropertyChanged("Currency");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AmountCurDebit property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAmountCurDebitNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AmountCurDebit
		{
			get
			{
				return this.entityData.AmountCurDebit; 
			}
			
			set
			{
				if (this.entityData.AmountCurDebit == value)
					return;
					
				OnColumnChanging(FeeIntegrationLedgerColumn.AmountCurDebit, this.entityData.AmountCurDebit);
				this.entityData.AmountCurDebit = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeIntegrationLedgerColumn.AmountCurDebit, this.entityData.AmountCurDebit);
				OnPropertyChanged("AmountCurDebit");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AmountCurCredit property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAmountCurCreditNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AmountCurCredit
		{
			get
			{
				return this.entityData.AmountCurCredit; 
			}
			
			set
			{
				if (this.entityData.AmountCurCredit == value)
					return;
					
				OnColumnChanging(FeeIntegrationLedgerColumn.AmountCurCredit, this.entityData.AmountCurCredit);
				this.entityData.AmountCurCredit = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeIntegrationLedgerColumn.AmountCurCredit, this.entityData.AmountCurCredit);
				OnPropertyChanged("AmountCurCredit");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccountingDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsAccountingDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? AccountingDate
		{
			get
			{
				return this.entityData.AccountingDate; 
			}
			
			set
			{
				if (this.entityData.AccountingDate == value)
					return;
					
				OnColumnChanging(FeeIntegrationLedgerColumn.AccountingDate, this.entityData.AccountingDate);
				this.entityData.AccountingDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeIntegrationLedgerColumn.AccountingDate, this.entityData.AccountingDate);
				OnPropertyChanged("AccountingDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PaymentType property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String PaymentType
		{
			get
			{
				return this.entityData.PaymentType; 
			}
			
			set
			{
				if (this.entityData.PaymentType == value)
					return;
					
				OnColumnChanging(FeeIntegrationLedgerColumn.PaymentType, this.entityData.PaymentType);
				this.entityData.PaymentType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeIntegrationLedgerColumn.PaymentType, this.entityData.PaymentType);
				OnPropertyChanged("PaymentType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CheckNum property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String CheckNum
		{
			get
			{
				return this.entityData.CheckNum; 
			}
			
			set
			{
				if (this.entityData.CheckNum == value)
					return;
					
				OnColumnChanging(FeeIntegrationLedgerColumn.CheckNum, this.entityData.CheckNum);
				this.entityData.CheckNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeIntegrationLedgerColumn.CheckNum, this.entityData.CheckNum);
				OnPropertyChanged("CheckNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CheckDueDate property. 
		///		
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCheckDueDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CheckDueDate
		{
			get
			{
				return this.entityData.CheckDueDate; 
			}
			
			set
			{
				if (this.entityData.CheckDueDate == value)
					return;
					
				OnColumnChanging(FeeIntegrationLedgerColumn.CheckDueDate, this.entityData.CheckDueDate);
				this.entityData.CheckDueDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeIntegrationLedgerColumn.CheckDueDate, this.entityData.CheckDueDate);
				OnPropertyChanged("CheckDueDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsIntegrated property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsIntegratedNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsIntegrated
		{
			get
			{
				return this.entityData.IsIntegrated; 
			}
			
			set
			{
				if (this.entityData.IsIntegrated == value)
					return;
					
				OnColumnChanging(FeeIntegrationLedgerColumn.IsIntegrated, this.entityData.IsIntegrated);
				this.entityData.IsIntegrated = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeIntegrationLedgerColumn.IsIntegrated, this.entityData.IsIntegrated);
				OnPropertyChanged("IsIntegrated");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Source", "Source", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Reference", "Reference", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AccountType", "Account Type", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AccountNumber", "Account Number", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CostCenter", "Cost Center", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Division", "Division", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Currency", "Currency", 6));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PaymentType", "Payment Type", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CheckNum", "Check Num", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Fee_Integration_Ledger"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"BatchNo", "Source", "Reference", "LineNumber", "AccountType", "AccountNumber", "CostCenter", "Division", "Currency", "AmountCurDebit", "AmountCurCredit", "AccountingDate", "PaymentType", "CheckNum", "CheckDueDate", "Is_Integrated"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as FeeIntegrationLedgerEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (FeeIntegrationLedger) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<FeeIntegrationLedger>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as FeeIntegrationLedger);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed FeeIntegrationLedger Entity 
		///</summary>
		protected virtual FeeIntegrationLedger Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			FeeIntegrationLedger copy = new FeeIntegrationLedger();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.BatchNo = this.BatchNo;
					copy.OriginalBatchNo = this.OriginalBatchNo;
				copy.Source = this.Source;
				copy.Reference = this.Reference;
				copy.LineNumber = this.LineNumber;
				copy.AccountType = this.AccountType;
				copy.AccountNumber = this.AccountNumber;
				copy.CostCenter = this.CostCenter;
				copy.Division = this.Division;
				copy.Currency = this.Currency;
				copy.AmountCurDebit = this.AmountCurDebit;
				copy.AmountCurCredit = this.AmountCurCredit;
				copy.AccountingDate = this.AccountingDate;
				copy.PaymentType = this.PaymentType;
				copy.CheckNum = this.CheckNum;
				copy.CheckDueDate = this.CheckDueDate;
				copy.IsIntegrated = this.IsIntegrated;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed FeeIntegrationLedger Entity 
		///</summary>
		public virtual FeeIntegrationLedger Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed FeeIntegrationLedger Entity which is a deep copy of the current entity.
		///</summary>
		public virtual FeeIntegrationLedger DeepCopy()
		{
			return EntityHelper.Clone<FeeIntegrationLedger>(this as FeeIntegrationLedger);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as FeeIntegrationLedgerEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new FeeIntegrationLedgerEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as FeeIntegrationLedgerEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(FeeIntegrationLedgerColumn column)
		{
			switch(column)
			{
					case FeeIntegrationLedgerColumn.BatchNo:
					return entityData.BatchNo != _originalData.BatchNo;
					case FeeIntegrationLedgerColumn.Source:
					return entityData.Source != _originalData.Source;
					case FeeIntegrationLedgerColumn.Reference:
					return entityData.Reference != _originalData.Reference;
					case FeeIntegrationLedgerColumn.LineNumber:
					return entityData.LineNumber != _originalData.LineNumber;
					case FeeIntegrationLedgerColumn.AccountType:
					return entityData.AccountType != _originalData.AccountType;
					case FeeIntegrationLedgerColumn.AccountNumber:
					return entityData.AccountNumber != _originalData.AccountNumber;
					case FeeIntegrationLedgerColumn.CostCenter:
					return entityData.CostCenter != _originalData.CostCenter;
					case FeeIntegrationLedgerColumn.Division:
					return entityData.Division != _originalData.Division;
					case FeeIntegrationLedgerColumn.Currency:
					return entityData.Currency != _originalData.Currency;
					case FeeIntegrationLedgerColumn.AmountCurDebit:
					return entityData.AmountCurDebit != _originalData.AmountCurDebit;
					case FeeIntegrationLedgerColumn.AmountCurCredit:
					return entityData.AmountCurCredit != _originalData.AmountCurCredit;
					case FeeIntegrationLedgerColumn.AccountingDate:
					return entityData.AccountingDate != _originalData.AccountingDate;
					case FeeIntegrationLedgerColumn.PaymentType:
					return entityData.PaymentType != _originalData.PaymentType;
					case FeeIntegrationLedgerColumn.CheckNum:
					return entityData.CheckNum != _originalData.CheckNum;
					case FeeIntegrationLedgerColumn.CheckDueDate:
					return entityData.CheckDueDate != _originalData.CheckDueDate;
					case FeeIntegrationLedgerColumn.IsIntegrated:
					return entityData.IsIntegrated != _originalData.IsIntegrated;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< FeeIntegrationLedgerColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.BatchNo != _originalData.BatchNo;
			result = result || entityData.Source != _originalData.Source;
			result = result || entityData.Reference != _originalData.Reference;
			result = result || entityData.LineNumber != _originalData.LineNumber;
			result = result || entityData.AccountType != _originalData.AccountType;
			result = result || entityData.AccountNumber != _originalData.AccountNumber;
			result = result || entityData.CostCenter != _originalData.CostCenter;
			result = result || entityData.Division != _originalData.Division;
			result = result || entityData.Currency != _originalData.Currency;
			result = result || entityData.AmountCurDebit != _originalData.AmountCurDebit;
			result = result || entityData.AmountCurCredit != _originalData.AmountCurCredit;
			result = result || entityData.AccountingDate != _originalData.AccountingDate;
			result = result || entityData.PaymentType != _originalData.PaymentType;
			result = result || entityData.CheckNum != _originalData.CheckNum;
			result = result || entityData.CheckDueDate != _originalData.CheckDueDate;
			result = result || entityData.IsIntegrated != _originalData.IsIntegrated;
			return result;
		}	
		
		///<summary>
		///  Returns a FeeIntegrationLedger Entity with the original data.
		///</summary>
		public FeeIntegrationLedger GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateFeeIntegrationLedger(
				_originalData.BatchNo,
				_originalData.Source,
				_originalData.Reference,
				_originalData.LineNumber,
				_originalData.AccountType,
				_originalData.AccountNumber,
				_originalData.CostCenter,
				_originalData.Division,
				_originalData.Currency,
				_originalData.AmountCurDebit,
				_originalData.AmountCurCredit,
				_originalData.AccountingDate,
				_originalData.PaymentType,
				_originalData.CheckNum,
				_originalData.CheckDueDate,
				_originalData.IsIntegrated
				);
				
			return (FeeIntegrationLedger)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="FeeIntegrationLedgerBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is FeeIntegrationLedgerBase)
				return ValueEquals(this, (FeeIntegrationLedgerBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="FeeIntegrationLedgerBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.BatchNo.GetHashCode() ^ 
					((this.Source == null) ? string.Empty : this.Source.ToString()).GetHashCode() ^ 
					((this.Reference == null) ? string.Empty : this.Reference.ToString()).GetHashCode() ^ 
					((this.LineNumber == null) ? string.Empty : this.LineNumber.ToString()).GetHashCode() ^ 
					((this.AccountType == null) ? string.Empty : this.AccountType.ToString()).GetHashCode() ^ 
					((this.AccountNumber == null) ? string.Empty : this.AccountNumber.ToString()).GetHashCode() ^ 
					((this.CostCenter == null) ? string.Empty : this.CostCenter.ToString()).GetHashCode() ^ 
					((this.Division == null) ? string.Empty : this.Division.ToString()).GetHashCode() ^ 
					((this.Currency == null) ? string.Empty : this.Currency.ToString()).GetHashCode() ^ 
					((this.AmountCurDebit == null) ? string.Empty : this.AmountCurDebit.ToString()).GetHashCode() ^ 
					((this.AmountCurCredit == null) ? string.Empty : this.AmountCurCredit.ToString()).GetHashCode() ^ 
					((this.AccountingDate == null) ? string.Empty : this.AccountingDate.ToString()).GetHashCode() ^ 
					((this.PaymentType == null) ? string.Empty : this.PaymentType.ToString()).GetHashCode() ^ 
					((this.CheckNum == null) ? string.Empty : this.CheckNum.ToString()).GetHashCode() ^ 
					((this.CheckDueDate == null) ? string.Empty : this.CheckDueDate.ToString()).GetHashCode() ^ 
					((this.IsIntegrated == null) ? string.Empty : this.IsIntegrated.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="FeeIntegrationLedgerBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(FeeIntegrationLedgerBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="FeeIntegrationLedgerBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="FeeIntegrationLedgerBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="FeeIntegrationLedgerBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(FeeIntegrationLedgerBase Object1, FeeIntegrationLedgerBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.BatchNo != Object2.BatchNo)
				equal = false;
			if ( Object1.Source != null && Object2.Source != null )
			{
				if (Object1.Source != Object2.Source)
					equal = false;
			}
			else if (Object1.Source == null ^ Object2.Source == null )
			{
				equal = false;
			}
			if ( Object1.Reference != null && Object2.Reference != null )
			{
				if (Object1.Reference != Object2.Reference)
					equal = false;
			}
			else if (Object1.Reference == null ^ Object2.Reference == null )
			{
				equal = false;
			}
			if ( Object1.LineNumber != null && Object2.LineNumber != null )
			{
				if (Object1.LineNumber != Object2.LineNumber)
					equal = false;
			}
			else if (Object1.LineNumber == null ^ Object2.LineNumber == null )
			{
				equal = false;
			}
			if ( Object1.AccountType != null && Object2.AccountType != null )
			{
				if (Object1.AccountType != Object2.AccountType)
					equal = false;
			}
			else if (Object1.AccountType == null ^ Object2.AccountType == null )
			{
				equal = false;
			}
			if ( Object1.AccountNumber != null && Object2.AccountNumber != null )
			{
				if (Object1.AccountNumber != Object2.AccountNumber)
					equal = false;
			}
			else if (Object1.AccountNumber == null ^ Object2.AccountNumber == null )
			{
				equal = false;
			}
			if ( Object1.CostCenter != null && Object2.CostCenter != null )
			{
				if (Object1.CostCenter != Object2.CostCenter)
					equal = false;
			}
			else if (Object1.CostCenter == null ^ Object2.CostCenter == null )
			{
				equal = false;
			}
			if ( Object1.Division != null && Object2.Division != null )
			{
				if (Object1.Division != Object2.Division)
					equal = false;
			}
			else if (Object1.Division == null ^ Object2.Division == null )
			{
				equal = false;
			}
			if ( Object1.Currency != null && Object2.Currency != null )
			{
				if (Object1.Currency != Object2.Currency)
					equal = false;
			}
			else if (Object1.Currency == null ^ Object2.Currency == null )
			{
				equal = false;
			}
			if ( Object1.AmountCurDebit != null && Object2.AmountCurDebit != null )
			{
				if (Object1.AmountCurDebit != Object2.AmountCurDebit)
					equal = false;
			}
			else if (Object1.AmountCurDebit == null ^ Object2.AmountCurDebit == null )
			{
				equal = false;
			}
			if ( Object1.AmountCurCredit != null && Object2.AmountCurCredit != null )
			{
				if (Object1.AmountCurCredit != Object2.AmountCurCredit)
					equal = false;
			}
			else if (Object1.AmountCurCredit == null ^ Object2.AmountCurCredit == null )
			{
				equal = false;
			}
			if ( Object1.AccountingDate != null && Object2.AccountingDate != null )
			{
				if (Object1.AccountingDate != Object2.AccountingDate)
					equal = false;
			}
			else if (Object1.AccountingDate == null ^ Object2.AccountingDate == null )
			{
				equal = false;
			}
			if ( Object1.PaymentType != null && Object2.PaymentType != null )
			{
				if (Object1.PaymentType != Object2.PaymentType)
					equal = false;
			}
			else if (Object1.PaymentType == null ^ Object2.PaymentType == null )
			{
				equal = false;
			}
			if ( Object1.CheckNum != null && Object2.CheckNum != null )
			{
				if (Object1.CheckNum != Object2.CheckNum)
					equal = false;
			}
			else if (Object1.CheckNum == null ^ Object2.CheckNum == null )
			{
				equal = false;
			}
			if ( Object1.CheckDueDate != null && Object2.CheckDueDate != null )
			{
				if (Object1.CheckDueDate != Object2.CheckDueDate)
					equal = false;
			}
			else if (Object1.CheckDueDate == null ^ Object2.CheckDueDate == null )
			{
				equal = false;
			}
			if ( Object1.IsIntegrated != null && Object2.IsIntegrated != null )
			{
				if (Object1.IsIntegrated != Object2.IsIntegrated)
					equal = false;
			}
			else if (Object1.IsIntegrated == null ^ Object2.IsIntegrated == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((FeeIntegrationLedgerBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static FeeIntegrationLedgerComparer GetComparer()
        {
            return new FeeIntegrationLedgerComparer();
        }
        */

        // Comparer delegates back to FeeIntegrationLedger
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(FeeIntegrationLedger rhs, FeeIntegrationLedgerColumn which)
        {
            switch (which)
            {
            	
            	
            	case FeeIntegrationLedgerColumn.BatchNo:
            		return this.BatchNo.CompareTo(rhs.BatchNo);
            		
            		                 
            	
            	
            	case FeeIntegrationLedgerColumn.Source:
            		return this.Source.CompareTo(rhs.Source);
            		
            		                 
            	
            	
            	case FeeIntegrationLedgerColumn.Reference:
            		return this.Reference.CompareTo(rhs.Reference);
            		
            		                 
            	
            	
            	case FeeIntegrationLedgerColumn.LineNumber:
            		return this.LineNumber.Value.CompareTo(rhs.LineNumber.Value);
            		
            		                 
            	
            	
            	case FeeIntegrationLedgerColumn.AccountType:
            		return this.AccountType.CompareTo(rhs.AccountType);
            		
            		                 
            	
            	
            	case FeeIntegrationLedgerColumn.AccountNumber:
            		return this.AccountNumber.CompareTo(rhs.AccountNumber);
            		
            		                 
            	
            	
            	case FeeIntegrationLedgerColumn.CostCenter:
            		return this.CostCenter.CompareTo(rhs.CostCenter);
            		
            		                 
            	
            	
            	case FeeIntegrationLedgerColumn.Division:
            		return this.Division.CompareTo(rhs.Division);
            		
            		                 
            	
            	
            	case FeeIntegrationLedgerColumn.Currency:
            		return this.Currency.CompareTo(rhs.Currency);
            		
            		                 
            	
            	
            	case FeeIntegrationLedgerColumn.AmountCurDebit:
            		return this.AmountCurDebit.Value.CompareTo(rhs.AmountCurDebit.Value);
            		
            		                 
            	
            	
            	case FeeIntegrationLedgerColumn.AmountCurCredit:
            		return this.AmountCurCredit.Value.CompareTo(rhs.AmountCurCredit.Value);
            		
            		                 
            	
            	
            	case FeeIntegrationLedgerColumn.AccountingDate:
            		return this.AccountingDate.Value.CompareTo(rhs.AccountingDate.Value);
            		
            		                 
            	
            	
            	case FeeIntegrationLedgerColumn.PaymentType:
            		return this.PaymentType.CompareTo(rhs.PaymentType);
            		
            		                 
            	
            	
            	case FeeIntegrationLedgerColumn.CheckNum:
            		return this.CheckNum.CompareTo(rhs.CheckNum);
            		
            		                 
            	
            	
            	case FeeIntegrationLedgerColumn.CheckDueDate:
            		return this.CheckDueDate.Value.CompareTo(rhs.CheckDueDate.Value);
            		
            		                 
            	
            	
            	case FeeIntegrationLedgerColumn.IsIntegrated:
            		return this.IsIntegrated.Value.CompareTo(rhs.IsIntegrated.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<FeeIntegrationLedgerKey> Members
		
		// member variable for the EntityId property
		private FeeIntegrationLedgerKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual FeeIntegrationLedgerKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new FeeIntegrationLedgerKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("FeeIntegrationLedger")
					.Append("|").Append( this.BatchNo.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{17}{16}- BatchNo: {0}{16}- Source: {1}{16}- Reference: {2}{16}- LineNumber: {3}{16}- AccountType: {4}{16}- AccountNumber: {5}{16}- CostCenter: {6}{16}- Division: {7}{16}- Currency: {8}{16}- AmountCurDebit: {9}{16}- AmountCurCredit: {10}{16}- AccountingDate: {11}{16}- PaymentType: {12}{16}- CheckNum: {13}{16}- CheckDueDate: {14}{16}- IsIntegrated: {15}{16}{18}", 
				this.BatchNo,
				(this.Source == null) ? string.Empty : this.Source.ToString(),
				(this.Reference == null) ? string.Empty : this.Reference.ToString(),
				(this.LineNumber == null) ? string.Empty : this.LineNumber.ToString(),
				(this.AccountType == null) ? string.Empty : this.AccountType.ToString(),
				(this.AccountNumber == null) ? string.Empty : this.AccountNumber.ToString(),
				(this.CostCenter == null) ? string.Empty : this.CostCenter.ToString(),
				(this.Division == null) ? string.Empty : this.Division.ToString(),
				(this.Currency == null) ? string.Empty : this.Currency.ToString(),
				(this.AmountCurDebit == null) ? string.Empty : this.AmountCurDebit.ToString(),
				(this.AmountCurCredit == null) ? string.Empty : this.AmountCurCredit.ToString(),
				(this.AccountingDate == null) ? string.Empty : this.AccountingDate.ToString(),
				(this.PaymentType == null) ? string.Empty : this.PaymentType.ToString(),
				(this.CheckNum == null) ? string.Empty : this.CheckNum.ToString(),
				(this.CheckDueDate == null) ? string.Empty : this.CheckDueDate.ToString(),
				(this.IsIntegrated == null) ? string.Empty : this.IsIntegrated.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Fee_Integration_Ledger' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class FeeIntegrationLedgerEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// BatchNo : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Fee_Integration_Ledger"</remarks>
		public System.Decimal BatchNo;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalBatchNo;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// Source : 
		/// </summary>
		public System.String		  Source = null;
		
		/// <summary>
		/// Reference : 
		/// </summary>
		public System.String		  Reference = null;
		
		/// <summary>
		/// LineNumber : 
		/// </summary>
		public System.Decimal?		  LineNumber = null;
		
		/// <summary>
		/// AccountType : 
		/// </summary>
		public System.String		  AccountType = null;
		
		/// <summary>
		/// AccountNumber : 
		/// </summary>
		public System.String		  AccountNumber = null;
		
		/// <summary>
		/// CostCenter : 
		/// </summary>
		public System.String		  CostCenter = null;
		
		/// <summary>
		/// Division : 
		/// </summary>
		public System.String		  Division = null;
		
		/// <summary>
		/// Currency : 
		/// </summary>
		public System.String		  Currency = null;
		
		/// <summary>
		/// AmountCurDebit : 
		/// </summary>
		public System.Decimal?		  AmountCurDebit = null;
		
		/// <summary>
		/// AmountCurCredit : 
		/// </summary>
		public System.Decimal?		  AmountCurCredit = null;
		
		/// <summary>
		/// AccountingDate : 
		/// </summary>
		public System.DateTime?		  AccountingDate = null;
		
		/// <summary>
		/// PaymentType : 
		/// </summary>
		public System.String		  PaymentType = null;
		
		/// <summary>
		/// CheckNum : 
		/// </summary>
		public System.String		  CheckNum = null;
		
		/// <summary>
		/// CheckDueDate : 
		/// </summary>
		public System.DateTime?		  CheckDueDate = null;
		
		/// <summary>
		/// Is_Integrated : 
		/// </summary>
		public System.Boolean?		  IsIntegrated = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			FeeIntegrationLedgerEntityData _tmp = new FeeIntegrationLedgerEntityData();
						
			_tmp.BatchNo = this.BatchNo;
			_tmp.OriginalBatchNo = this.OriginalBatchNo;
			
			_tmp.Source = this.Source;
			_tmp.Reference = this.Reference;
			_tmp.LineNumber = this.LineNumber;
			_tmp.AccountType = this.AccountType;
			_tmp.AccountNumber = this.AccountNumber;
			_tmp.CostCenter = this.CostCenter;
			_tmp.Division = this.Division;
			_tmp.Currency = this.Currency;
			_tmp.AmountCurDebit = this.AmountCurDebit;
			_tmp.AmountCurCredit = this.AmountCurCredit;
			_tmp.AccountingDate = this.AccountingDate;
			_tmp.PaymentType = this.PaymentType;
			_tmp.CheckNum = this.CheckNum;
			_tmp.CheckDueDate = this.CheckDueDate;
			_tmp.IsIntegrated = this.IsIntegrated;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			FeeIntegrationLedgerEntityData _tmp = new FeeIntegrationLedgerEntityData();
						
			_tmp.BatchNo = this.BatchNo;
			_tmp.OriginalBatchNo = this.OriginalBatchNo;
			
			_tmp.Source = this.Source;
			_tmp.Reference = this.Reference;
			_tmp.LineNumber = this.LineNumber;
			_tmp.AccountType = this.AccountType;
			_tmp.AccountNumber = this.AccountNumber;
			_tmp.CostCenter = this.CostCenter;
			_tmp.Division = this.Division;
			_tmp.Currency = this.Currency;
			_tmp.AmountCurDebit = this.AmountCurDebit;
			_tmp.AmountCurCredit = this.AmountCurCredit;
			_tmp.AccountingDate = this.AccountingDate;
			_tmp.PaymentType = this.PaymentType;
			_tmp.CheckNum = this.CheckNum;
			_tmp.CheckDueDate = this.CheckDueDate;
			_tmp.IsIntegrated = this.IsIntegrated;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeIntegrationLedgerColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(FeeIntegrationLedgerColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeIntegrationLedgerColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(FeeIntegrationLedgerColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeIntegrationLedgerColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(FeeIntegrationLedgerColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				FeeIntegrationLedgerEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new FeeIntegrationLedgerEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeIntegrationLedgerColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(FeeIntegrationLedgerColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				FeeIntegrationLedgerEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new FeeIntegrationLedgerEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region FeeIntegrationLedgerEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="FeeIntegrationLedger"/> object.
	/// </remarks>
	public class FeeIntegrationLedgerEventArgs : System.EventArgs
	{
		private FeeIntegrationLedgerColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the FeeIntegrationLedgerEventArgs class.
		///</summary>
		public FeeIntegrationLedgerEventArgs(FeeIntegrationLedgerColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the FeeIntegrationLedgerEventArgs class.
		///</summary>
		public FeeIntegrationLedgerEventArgs(FeeIntegrationLedgerColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The FeeIntegrationLedgerColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="FeeIntegrationLedgerColumn" />
		public FeeIntegrationLedgerColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all FeeIntegrationLedger related events.
	///</summary>
	public delegate void FeeIntegrationLedgerEventHandler(object sender, FeeIntegrationLedgerEventArgs e);
	
	#region FeeIntegrationLedgerComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class FeeIntegrationLedgerComparer : System.Collections.Generic.IComparer<FeeIntegrationLedger>
	{
		FeeIntegrationLedgerColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:FeeIntegrationLedgerComparer"/> class.
        /// </summary>
		public FeeIntegrationLedgerComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:FeeIntegrationLedgerComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public FeeIntegrationLedgerComparer(FeeIntegrationLedgerColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="FeeIntegrationLedger"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="FeeIntegrationLedger"/> to compare.</param>
        /// <param name="b">The second <c>FeeIntegrationLedger</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(FeeIntegrationLedger a, FeeIntegrationLedger b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(FeeIntegrationLedger entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(FeeIntegrationLedger a, FeeIntegrationLedger b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public FeeIntegrationLedgerColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region FeeIntegrationLedgerKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="FeeIntegrationLedger"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class FeeIntegrationLedgerKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the FeeIntegrationLedgerKey class.
		/// </summary>
		public FeeIntegrationLedgerKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeIntegrationLedgerKey class.
		/// </summary>
		public FeeIntegrationLedgerKey(FeeIntegrationLedgerBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.BatchNo = entity.BatchNo;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeIntegrationLedgerKey class.
		/// </summary>
		public FeeIntegrationLedgerKey(System.Decimal _batchNo)
		{
			#region Init Properties

			this.BatchNo = _batchNo;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private FeeIntegrationLedgerBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public FeeIntegrationLedgerBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the BatchNo property
		private System.Decimal _batchNo;
		
		/// <summary>
		/// Gets or sets the BatchNo property.
		/// </summary>
		public System.Decimal BatchNo
		{
			get { return _batchNo; }
			set
			{
				if ( this.Entity != null )
					this.Entity.BatchNo = value;
				
				_batchNo = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				BatchNo = ( values["BatchNo"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["BatchNo"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("BatchNo", BatchNo);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("BatchNo: {0}{1}",
								BatchNo,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region FeeIntegrationLedgerColumn Enum
	
	/// <summary>
	/// Enumerate the FeeIntegrationLedger columns.
	/// </summary>
	[Serializable]
	public enum FeeIntegrationLedgerColumn : int
	{
		/// <summary>
		/// BatchNo : 
		/// </summary>
		[EnumTextValue("BatchNo")]
		[ColumnEnum("BatchNo", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		BatchNo = 1,
		/// <summary>
		/// Source : 
		/// </summary>
		[EnumTextValue("Source")]
		[ColumnEnum("Source", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		Source = 2,
		/// <summary>
		/// Reference : 
		/// </summary>
		[EnumTextValue("Reference")]
		[ColumnEnum("Reference", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		Reference = 3,
		/// <summary>
		/// LineNumber : 
		/// </summary>
		[EnumTextValue("LineNumber")]
		[ColumnEnum("LineNumber", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		LineNumber = 4,
		/// <summary>
		/// AccountType : 
		/// </summary>
		[EnumTextValue("AccountType")]
		[ColumnEnum("AccountType", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		AccountType = 5,
		/// <summary>
		/// AccountNumber : 
		/// </summary>
		[EnumTextValue("AccountNumber")]
		[ColumnEnum("AccountNumber", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		AccountNumber = 6,
		/// <summary>
		/// CostCenter : 
		/// </summary>
		[EnumTextValue("CostCenter")]
		[ColumnEnum("CostCenter", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		CostCenter = 7,
		/// <summary>
		/// Division : 
		/// </summary>
		[EnumTextValue("Division")]
		[ColumnEnum("Division", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		Division = 8,
		/// <summary>
		/// Currency : 
		/// </summary>
		[EnumTextValue("Currency")]
		[ColumnEnum("Currency", typeof(System.String), System.Data.DbType.String, false, false, true, 6)]
		Currency = 9,
		/// <summary>
		/// AmountCurDebit : 
		/// </summary>
		[EnumTextValue("AmountCurDebit")]
		[ColumnEnum("AmountCurDebit", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AmountCurDebit = 10,
		/// <summary>
		/// AmountCurCredit : 
		/// </summary>
		[EnumTextValue("AmountCurCredit")]
		[ColumnEnum("AmountCurCredit", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AmountCurCredit = 11,
		/// <summary>
		/// AccountingDate : 
		/// </summary>
		[EnumTextValue("AccountingDate")]
		[ColumnEnum("AccountingDate", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		AccountingDate = 12,
		/// <summary>
		/// PaymentType : 
		/// </summary>
		[EnumTextValue("PaymentType")]
		[ColumnEnum("PaymentType", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		PaymentType = 13,
		/// <summary>
		/// CheckNum : 
		/// </summary>
		[EnumTextValue("CheckNum")]
		[ColumnEnum("CheckNum", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		CheckNum = 14,
		/// <summary>
		/// CheckDueDate : 
		/// </summary>
		[EnumTextValue("CheckDueDate")]
		[ColumnEnum("CheckDueDate", typeof(System.DateTime), System.Data.DbType.Date, false, false, true)]
		CheckDueDate = 15,
		/// <summary>
		/// IsIntegrated : 
		/// </summary>
		[EnumTextValue("Is_Integrated")]
		[ColumnEnum("Is_Integrated", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsIntegrated = 16
	}//End enum

	#endregion FeeIntegrationLedgerColumn Enum

} // end namespace
