
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file CoScheduleDetail.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'CO_SCHEDULE_DETAIL' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class CoScheduleDetailBase : EntityBase, ICoScheduleDetail, IEntityId<CoScheduleDetailKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CoScheduleDetailEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CoScheduleDetailEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CoScheduleDetailEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<CoScheduleDetail> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CoScheduleDetailEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CoScheduleDetailEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CoScheduleDetailBase"/> instance.
		///</summary>
		public CoScheduleDetailBase()
		{
			this.entityData = new CoScheduleDetailEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CoScheduleDetailBase"/> instance.
		///</summary>
		///<param name="_coScheduleDetailId"></param>
		///<param name="_coExamScheduleId"></param>
		///<param name="_edSubjectAssessId"></param>
		///<param name="_examDate"></param>
		///<param name="_startFrom"></param>
		///<param name="_coCodeExamShiftId"></param>
		///<param name="_qDeliveryFlag"></param>
		///<param name="_qPapperNo"></param>
		///<param name="_delivaryDate"></param>
		///<param name="_coControlDelegMemId"></param>
		///<param name="_delivaryCommittee"></param>
		///<param name="_notes"></param>
		///<param name="_ansSheetDelFlag"></param>
		///<param name="_ansSheetsNo"></param>
		///<param name="_coControlMembersId"></param>
		///<param name="_ansSheetDeldate"></param>
		///<param name="_aDeliveryCommittee"></param>
		///<param name="_note"></param>
		///<param name="_correctionEndFlag"></param>
		///<param name="_asFacultyInfoId"></param>
		public CoScheduleDetailBase(System.Decimal _coScheduleDetailId, System.Decimal _coExamScheduleId, 
			System.Decimal _edSubjectAssessId, System.DateTime _examDate, System.DateTime _startFrom, 
			System.Decimal _coCodeExamShiftId, System.Decimal? _qDeliveryFlag, System.Decimal? _qPapperNo, 
			System.DateTime? _delivaryDate, System.Decimal? _coControlDelegMemId, System.String _delivaryCommittee, 
			System.String _notes, System.Decimal? _ansSheetDelFlag, System.Decimal? _ansSheetsNo, 
			System.Decimal? _coControlMembersId, System.DateTime? _ansSheetDeldate, System.String _aDeliveryCommittee, 
			System.String _note, System.Decimal _correctionEndFlag, System.Decimal _asFacultyInfoId)
		{
			this.entityData = new CoScheduleDetailEntityData();
			this.backupData = null;

			this.CoScheduleDetailId = _coScheduleDetailId;
			this.CoExamScheduleId = _coExamScheduleId;
			this.EdSubjectAssessId = _edSubjectAssessId;
			this.ExamDate = _examDate;
			this.StartFrom = _startFrom;
			this.CoCodeExamShiftId = _coCodeExamShiftId;
			this.QDeliveryFlag = _qDeliveryFlag;
			this.QPapperNo = _qPapperNo;
			this.DelivaryDate = _delivaryDate;
			this.CoControlDelegMemId = _coControlDelegMemId;
			this.DelivaryCommittee = _delivaryCommittee;
			this.Notes = _notes;
			this.AnsSheetDelFlag = _ansSheetDelFlag;
			this.AnsSheetsNo = _ansSheetsNo;
			this.CoControlMembersId = _coControlMembersId;
			this.AnsSheetDeldate = _ansSheetDeldate;
			this.ADeliveryCommittee = _aDeliveryCommittee;
			this.Note = _note;
			this.CorrectionEndFlag = _correctionEndFlag;
			this.AsFacultyInfoId = _asFacultyInfoId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="CoScheduleDetail"/> instance.
		///</summary>
		///<param name="_coScheduleDetailId"></param>
		///<param name="_coExamScheduleId"></param>
		///<param name="_edSubjectAssessId"></param>
		///<param name="_examDate"></param>
		///<param name="_startFrom"></param>
		///<param name="_coCodeExamShiftId"></param>
		///<param name="_qDeliveryFlag"></param>
		///<param name="_qPapperNo"></param>
		///<param name="_delivaryDate"></param>
		///<param name="_coControlDelegMemId"></param>
		///<param name="_delivaryCommittee"></param>
		///<param name="_notes"></param>
		///<param name="_ansSheetDelFlag"></param>
		///<param name="_ansSheetsNo"></param>
		///<param name="_coControlMembersId"></param>
		///<param name="_ansSheetDeldate"></param>
		///<param name="_aDeliveryCommittee"></param>
		///<param name="_note"></param>
		///<param name="_correctionEndFlag"></param>
		///<param name="_asFacultyInfoId"></param>
		public static CoScheduleDetail CreateCoScheduleDetail(System.Decimal _coScheduleDetailId, System.Decimal _coExamScheduleId, 
			System.Decimal _edSubjectAssessId, System.DateTime _examDate, System.DateTime _startFrom, 
			System.Decimal _coCodeExamShiftId, System.Decimal? _qDeliveryFlag, System.Decimal? _qPapperNo, 
			System.DateTime? _delivaryDate, System.Decimal? _coControlDelegMemId, System.String _delivaryCommittee, 
			System.String _notes, System.Decimal? _ansSheetDelFlag, System.Decimal? _ansSheetsNo, 
			System.Decimal? _coControlMembersId, System.DateTime? _ansSheetDeldate, System.String _aDeliveryCommittee, 
			System.String _note, System.Decimal _correctionEndFlag, System.Decimal _asFacultyInfoId)
		{
			CoScheduleDetail newCoScheduleDetail = new CoScheduleDetail();
			newCoScheduleDetail.CoScheduleDetailId = _coScheduleDetailId;
			newCoScheduleDetail.CoExamScheduleId = _coExamScheduleId;
			newCoScheduleDetail.EdSubjectAssessId = _edSubjectAssessId;
			newCoScheduleDetail.ExamDate = _examDate;
			newCoScheduleDetail.StartFrom = _startFrom;
			newCoScheduleDetail.CoCodeExamShiftId = _coCodeExamShiftId;
			newCoScheduleDetail.QDeliveryFlag = _qDeliveryFlag;
			newCoScheduleDetail.QPapperNo = _qPapperNo;
			newCoScheduleDetail.DelivaryDate = _delivaryDate;
			newCoScheduleDetail.CoControlDelegMemId = _coControlDelegMemId;
			newCoScheduleDetail.DelivaryCommittee = _delivaryCommittee;
			newCoScheduleDetail.Notes = _notes;
			newCoScheduleDetail.AnsSheetDelFlag = _ansSheetDelFlag;
			newCoScheduleDetail.AnsSheetsNo = _ansSheetsNo;
			newCoScheduleDetail.CoControlMembersId = _coControlMembersId;
			newCoScheduleDetail.AnsSheetDeldate = _ansSheetDeldate;
			newCoScheduleDetail.ADeliveryCommittee = _aDeliveryCommittee;
			newCoScheduleDetail.Note = _note;
			newCoScheduleDetail.CorrectionEndFlag = _correctionEndFlag;
			newCoScheduleDetail.AsFacultyInfoId = _asFacultyInfoId;
			return newCoScheduleDetail;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the CoScheduleDetailId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal CoScheduleDetailId
		{
			get
			{
				return this.entityData.CoScheduleDetailId; 
			}
			
			set
			{
				if (this.entityData.CoScheduleDetailId == value)
					return;
					
				OnColumnChanging(CoScheduleDetailColumn.CoScheduleDetailId, this.entityData.CoScheduleDetailId);
				this.entityData.CoScheduleDetailId = value;
				this.EntityId.CoScheduleDetailId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoScheduleDetailColumn.CoScheduleDetailId, this.entityData.CoScheduleDetailId);
				OnPropertyChanged("CoScheduleDetailId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the CO_SCHEDULE_DETAIL_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the CO_SCHEDULE_DETAIL_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalCoScheduleDetailId
		{
			get { return this.entityData.OriginalCoScheduleDetailId; }
			set { this.entityData.OriginalCoScheduleDetailId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the CoExamScheduleId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal CoExamScheduleId
		{
			get
			{
				return this.entityData.CoExamScheduleId; 
			}
			
			set
			{
				if (this.entityData.CoExamScheduleId == value)
					return;
					
				OnColumnChanging(CoScheduleDetailColumn.CoExamScheduleId, this.entityData.CoExamScheduleId);
				this.entityData.CoExamScheduleId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoScheduleDetailColumn.CoExamScheduleId, this.entityData.CoExamScheduleId);
				OnPropertyChanged("CoExamScheduleId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdSubjectAssessId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdSubjectAssessId
		{
			get
			{
				return this.entityData.EdSubjectAssessId; 
			}
			
			set
			{
				if (this.entityData.EdSubjectAssessId == value)
					return;
					
				OnColumnChanging(CoScheduleDetailColumn.EdSubjectAssessId, this.entityData.EdSubjectAssessId);
				this.entityData.EdSubjectAssessId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoScheduleDetailColumn.EdSubjectAssessId, this.entityData.EdSubjectAssessId);
				OnPropertyChanged("EdSubjectAssessId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExamDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ExamDate
		{
			get
			{
				return this.entityData.ExamDate; 
			}
			
			set
			{
				if (this.entityData.ExamDate == value)
					return;
					
				OnColumnChanging(CoScheduleDetailColumn.ExamDate, this.entityData.ExamDate);
				this.entityData.ExamDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoScheduleDetailColumn.ExamDate, this.entityData.ExamDate);
				OnPropertyChanged("ExamDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StartFrom property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime StartFrom
		{
			get
			{
				return this.entityData.StartFrom; 
			}
			
			set
			{
				if (this.entityData.StartFrom == value)
					return;
					
				OnColumnChanging(CoScheduleDetailColumn.StartFrom, this.entityData.StartFrom);
				this.entityData.StartFrom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoScheduleDetailColumn.StartFrom, this.entityData.StartFrom);
				OnPropertyChanged("StartFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CoCodeExamShiftId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal CoCodeExamShiftId
		{
			get
			{
				return this.entityData.CoCodeExamShiftId; 
			}
			
			set
			{
				if (this.entityData.CoCodeExamShiftId == value)
					return;
					
				OnColumnChanging(CoScheduleDetailColumn.CoCodeExamShiftId, this.entityData.CoCodeExamShiftId);
				this.entityData.CoCodeExamShiftId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoScheduleDetailColumn.CoCodeExamShiftId, this.entityData.CoCodeExamShiftId);
				OnPropertyChanged("CoCodeExamShiftId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QDeliveryFlag property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsQDeliveryFlagNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? QDeliveryFlag
		{
			get
			{
				return this.entityData.QDeliveryFlag; 
			}
			
			set
			{
				if (this.entityData.QDeliveryFlag == value)
					return;
					
				OnColumnChanging(CoScheduleDetailColumn.QDeliveryFlag, this.entityData.QDeliveryFlag);
				this.entityData.QDeliveryFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoScheduleDetailColumn.QDeliveryFlag, this.entityData.QDeliveryFlag);
				OnPropertyChanged("QDeliveryFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QPapperNo property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsQPapperNoNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? QPapperNo
		{
			get
			{
				return this.entityData.QPapperNo; 
			}
			
			set
			{
				if (this.entityData.QPapperNo == value)
					return;
					
				OnColumnChanging(CoScheduleDetailColumn.QPapperNo, this.entityData.QPapperNo);
				this.entityData.QPapperNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoScheduleDetailColumn.QPapperNo, this.entityData.QPapperNo);
				OnPropertyChanged("QPapperNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DelivaryDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsDelivaryDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DelivaryDate
		{
			get
			{
				return this.entityData.DelivaryDate; 
			}
			
			set
			{
				if (this.entityData.DelivaryDate == value)
					return;
					
				OnColumnChanging(CoScheduleDetailColumn.DelivaryDate, this.entityData.DelivaryDate);
				this.entityData.DelivaryDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoScheduleDetailColumn.DelivaryDate, this.entityData.DelivaryDate);
				OnPropertyChanged("DelivaryDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CoControlDelegMemId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCoControlDelegMemIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CoControlDelegMemId
		{
			get
			{
				return this.entityData.CoControlDelegMemId; 
			}
			
			set
			{
				if (this.entityData.CoControlDelegMemId == value)
					return;
					
				OnColumnChanging(CoScheduleDetailColumn.CoControlDelegMemId, this.entityData.CoControlDelegMemId);
				this.entityData.CoControlDelegMemId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoScheduleDetailColumn.CoControlDelegMemId, this.entityData.CoControlDelegMemId);
				OnPropertyChanged("CoControlDelegMemId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DelivaryCommittee property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 240)]
		public virtual System.String DelivaryCommittee
		{
			get
			{
				return this.entityData.DelivaryCommittee; 
			}
			
			set
			{
				if (this.entityData.DelivaryCommittee == value)
					return;
					
				OnColumnChanging(CoScheduleDetailColumn.DelivaryCommittee, this.entityData.DelivaryCommittee);
				this.entityData.DelivaryCommittee = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoScheduleDetailColumn.DelivaryCommittee, this.entityData.DelivaryCommittee);
				OnPropertyChanged("DelivaryCommittee");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(CoScheduleDetailColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoScheduleDetailColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AnsSheetDelFlag property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAnsSheetDelFlagNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AnsSheetDelFlag
		{
			get
			{
				return this.entityData.AnsSheetDelFlag; 
			}
			
			set
			{
				if (this.entityData.AnsSheetDelFlag == value)
					return;
					
				OnColumnChanging(CoScheduleDetailColumn.AnsSheetDelFlag, this.entityData.AnsSheetDelFlag);
				this.entityData.AnsSheetDelFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoScheduleDetailColumn.AnsSheetDelFlag, this.entityData.AnsSheetDelFlag);
				OnPropertyChanged("AnsSheetDelFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AnsSheetsNo property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAnsSheetsNoNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AnsSheetsNo
		{
			get
			{
				return this.entityData.AnsSheetsNo; 
			}
			
			set
			{
				if (this.entityData.AnsSheetsNo == value)
					return;
					
				OnColumnChanging(CoScheduleDetailColumn.AnsSheetsNo, this.entityData.AnsSheetsNo);
				this.entityData.AnsSheetsNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoScheduleDetailColumn.AnsSheetsNo, this.entityData.AnsSheetsNo);
				OnPropertyChanged("AnsSheetsNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CoControlMembersId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCoControlMembersIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CoControlMembersId
		{
			get
			{
				return this.entityData.CoControlMembersId; 
			}
			
			set
			{
				if (this.entityData.CoControlMembersId == value)
					return;
					
				OnColumnChanging(CoScheduleDetailColumn.CoControlMembersId, this.entityData.CoControlMembersId);
				this.entityData.CoControlMembersId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoScheduleDetailColumn.CoControlMembersId, this.entityData.CoControlMembersId);
				OnPropertyChanged("CoControlMembersId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AnsSheetDeldate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsAnsSheetDeldateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? AnsSheetDeldate
		{
			get
			{
				return this.entityData.AnsSheetDeldate; 
			}
			
			set
			{
				if (this.entityData.AnsSheetDeldate == value)
					return;
					
				OnColumnChanging(CoScheduleDetailColumn.AnsSheetDeldate, this.entityData.AnsSheetDeldate);
				this.entityData.AnsSheetDeldate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoScheduleDetailColumn.AnsSheetDeldate, this.entityData.AnsSheetDeldate);
				OnPropertyChanged("AnsSheetDeldate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ADeliveryCommittee property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 240)]
		public virtual System.String ADeliveryCommittee
		{
			get
			{
				return this.entityData.ADeliveryCommittee; 
			}
			
			set
			{
				if (this.entityData.ADeliveryCommittee == value)
					return;
					
				OnColumnChanging(CoScheduleDetailColumn.ADeliveryCommittee, this.entityData.ADeliveryCommittee);
				this.entityData.ADeliveryCommittee = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoScheduleDetailColumn.ADeliveryCommittee, this.entityData.ADeliveryCommittee);
				OnPropertyChanged("ADeliveryCommittee");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Note property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 240)]
		public virtual System.String Note
		{
			get
			{
				return this.entityData.Note; 
			}
			
			set
			{
				if (this.entityData.Note == value)
					return;
					
				OnColumnChanging(CoScheduleDetailColumn.Note, this.entityData.Note);
				this.entityData.Note = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoScheduleDetailColumn.Note, this.entityData.Note);
				OnPropertyChanged("Note");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CorrectionEndFlag property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal CorrectionEndFlag
		{
			get
			{
				return this.entityData.CorrectionEndFlag; 
			}
			
			set
			{
				if (this.entityData.CorrectionEndFlag == value)
					return;
					
				OnColumnChanging(CoScheduleDetailColumn.CorrectionEndFlag, this.entityData.CorrectionEndFlag);
				this.entityData.CorrectionEndFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoScheduleDetailColumn.CorrectionEndFlag, this.entityData.CorrectionEndFlag);
				OnPropertyChanged("CorrectionEndFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(CoScheduleDetailColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CoScheduleDetailColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DelivaryCommittee", "Delivary Committee", 240));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ADeliveryCommittee", "A Delivery Committee", 240));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Note", "Note", 240));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "CO_SCHEDULE_DETAIL"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"CO_SCHEDULE_DETAIL_ID", "CO_EXAM_SCHEDULE_ID", "ED_SUBJECT_ASSESS_ID", "EXAM_DATE", "START_FROM", "CO_CODE_EXAM_SHIFT_ID", "Q_DELIVERY_FLAG", "Q_PAPPER_NO", "DELIVARY_DATE", "CO_CONTROL_DELEG_MEM_ID", "DELIVARY_COMMITTEE", "NOTES", "ANS_SHEET_DEL_FLAG", "ANS_SHEETS_NO", "CO_CONTROL_MEMBERS_ID", "ANS_SHEET_DELDATE", "A_DELIVERY_COMMITTEE", "NOTE", "CORRECTION_END_FLAG", "AS_FACULTY_INFO_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CoScheduleDetailEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (CoScheduleDetail) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<CoScheduleDetail>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as CoScheduleDetail);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed CoScheduleDetail Entity 
		///</summary>
		protected virtual CoScheduleDetail Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			CoScheduleDetail copy = new CoScheduleDetail();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.CoScheduleDetailId = this.CoScheduleDetailId;
					copy.OriginalCoScheduleDetailId = this.OriginalCoScheduleDetailId;
				copy.CoExamScheduleId = this.CoExamScheduleId;
				copy.EdSubjectAssessId = this.EdSubjectAssessId;
				copy.ExamDate = this.ExamDate;
				copy.StartFrom = this.StartFrom;
				copy.CoCodeExamShiftId = this.CoCodeExamShiftId;
				copy.QDeliveryFlag = this.QDeliveryFlag;
				copy.QPapperNo = this.QPapperNo;
				copy.DelivaryDate = this.DelivaryDate;
				copy.CoControlDelegMemId = this.CoControlDelegMemId;
				copy.DelivaryCommittee = this.DelivaryCommittee;
				copy.Notes = this.Notes;
				copy.AnsSheetDelFlag = this.AnsSheetDelFlag;
				copy.AnsSheetsNo = this.AnsSheetsNo;
				copy.CoControlMembersId = this.CoControlMembersId;
				copy.AnsSheetDeldate = this.AnsSheetDeldate;
				copy.ADeliveryCommittee = this.ADeliveryCommittee;
				copy.Note = this.Note;
				copy.CorrectionEndFlag = this.CorrectionEndFlag;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
			
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed CoScheduleDetail Entity 
		///</summary>
		public virtual CoScheduleDetail Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed CoScheduleDetail Entity which is a deep copy of the current entity.
		///</summary>
		public virtual CoScheduleDetail DeepCopy()
		{
			return EntityHelper.Clone<CoScheduleDetail>(this as CoScheduleDetail);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CoScheduleDetailEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new CoScheduleDetailEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CoScheduleDetailEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CoScheduleDetailColumn column)
		{
			switch(column)
			{
					case CoScheduleDetailColumn.CoScheduleDetailId:
					return entityData.CoScheduleDetailId != _originalData.CoScheduleDetailId;
					case CoScheduleDetailColumn.CoExamScheduleId:
					return entityData.CoExamScheduleId != _originalData.CoExamScheduleId;
					case CoScheduleDetailColumn.EdSubjectAssessId:
					return entityData.EdSubjectAssessId != _originalData.EdSubjectAssessId;
					case CoScheduleDetailColumn.ExamDate:
					return entityData.ExamDate != _originalData.ExamDate;
					case CoScheduleDetailColumn.StartFrom:
					return entityData.StartFrom != _originalData.StartFrom;
					case CoScheduleDetailColumn.CoCodeExamShiftId:
					return entityData.CoCodeExamShiftId != _originalData.CoCodeExamShiftId;
					case CoScheduleDetailColumn.QDeliveryFlag:
					return entityData.QDeliveryFlag != _originalData.QDeliveryFlag;
					case CoScheduleDetailColumn.QPapperNo:
					return entityData.QPapperNo != _originalData.QPapperNo;
					case CoScheduleDetailColumn.DelivaryDate:
					return entityData.DelivaryDate != _originalData.DelivaryDate;
					case CoScheduleDetailColumn.CoControlDelegMemId:
					return entityData.CoControlDelegMemId != _originalData.CoControlDelegMemId;
					case CoScheduleDetailColumn.DelivaryCommittee:
					return entityData.DelivaryCommittee != _originalData.DelivaryCommittee;
					case CoScheduleDetailColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case CoScheduleDetailColumn.AnsSheetDelFlag:
					return entityData.AnsSheetDelFlag != _originalData.AnsSheetDelFlag;
					case CoScheduleDetailColumn.AnsSheetsNo:
					return entityData.AnsSheetsNo != _originalData.AnsSheetsNo;
					case CoScheduleDetailColumn.CoControlMembersId:
					return entityData.CoControlMembersId != _originalData.CoControlMembersId;
					case CoScheduleDetailColumn.AnsSheetDeldate:
					return entityData.AnsSheetDeldate != _originalData.AnsSheetDeldate;
					case CoScheduleDetailColumn.ADeliveryCommittee:
					return entityData.ADeliveryCommittee != _originalData.ADeliveryCommittee;
					case CoScheduleDetailColumn.Note:
					return entityData.Note != _originalData.Note;
					case CoScheduleDetailColumn.CorrectionEndFlag:
					return entityData.CorrectionEndFlag != _originalData.CorrectionEndFlag;
					case CoScheduleDetailColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< CoScheduleDetailColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.CoScheduleDetailId != _originalData.CoScheduleDetailId;
			result = result || entityData.CoExamScheduleId != _originalData.CoExamScheduleId;
			result = result || entityData.EdSubjectAssessId != _originalData.EdSubjectAssessId;
			result = result || entityData.ExamDate != _originalData.ExamDate;
			result = result || entityData.StartFrom != _originalData.StartFrom;
			result = result || entityData.CoCodeExamShiftId != _originalData.CoCodeExamShiftId;
			result = result || entityData.QDeliveryFlag != _originalData.QDeliveryFlag;
			result = result || entityData.QPapperNo != _originalData.QPapperNo;
			result = result || entityData.DelivaryDate != _originalData.DelivaryDate;
			result = result || entityData.CoControlDelegMemId != _originalData.CoControlDelegMemId;
			result = result || entityData.DelivaryCommittee != _originalData.DelivaryCommittee;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.AnsSheetDelFlag != _originalData.AnsSheetDelFlag;
			result = result || entityData.AnsSheetsNo != _originalData.AnsSheetsNo;
			result = result || entityData.CoControlMembersId != _originalData.CoControlMembersId;
			result = result || entityData.AnsSheetDeldate != _originalData.AnsSheetDeldate;
			result = result || entityData.ADeliveryCommittee != _originalData.ADeliveryCommittee;
			result = result || entityData.Note != _originalData.Note;
			result = result || entityData.CorrectionEndFlag != _originalData.CorrectionEndFlag;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			return result;
		}	
		
		///<summary>
		///  Returns a CoScheduleDetail Entity with the original data.
		///</summary>
		public CoScheduleDetail GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateCoScheduleDetail(
				_originalData.CoScheduleDetailId,
				_originalData.CoExamScheduleId,
				_originalData.EdSubjectAssessId,
				_originalData.ExamDate,
				_originalData.StartFrom,
				_originalData.CoCodeExamShiftId,
				_originalData.QDeliveryFlag,
				_originalData.QPapperNo,
				_originalData.DelivaryDate,
				_originalData.CoControlDelegMemId,
				_originalData.DelivaryCommittee,
				_originalData.Notes,
				_originalData.AnsSheetDelFlag,
				_originalData.AnsSheetsNo,
				_originalData.CoControlMembersId,
				_originalData.AnsSheetDeldate,
				_originalData.ADeliveryCommittee,
				_originalData.Note,
				_originalData.CorrectionEndFlag,
				_originalData.AsFacultyInfoId
				);
				
			return (CoScheduleDetail)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CoScheduleDetailBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is CoScheduleDetailBase)
				return ValueEquals(this, (CoScheduleDetailBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CoScheduleDetailBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.CoScheduleDetailId.GetHashCode() ^ 
					this.CoExamScheduleId.GetHashCode() ^ 
					this.EdSubjectAssessId.GetHashCode() ^ 
					this.ExamDate.GetHashCode() ^ 
					this.StartFrom.GetHashCode() ^ 
					this.CoCodeExamShiftId.GetHashCode() ^ 
					((this.QDeliveryFlag == null) ? string.Empty : this.QDeliveryFlag.ToString()).GetHashCode() ^ 
					((this.QPapperNo == null) ? string.Empty : this.QPapperNo.ToString()).GetHashCode() ^ 
					((this.DelivaryDate == null) ? string.Empty : this.DelivaryDate.ToString()).GetHashCode() ^ 
					((this.CoControlDelegMemId == null) ? string.Empty : this.CoControlDelegMemId.ToString()).GetHashCode() ^ 
					((this.DelivaryCommittee == null) ? string.Empty : this.DelivaryCommittee.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.AnsSheetDelFlag == null) ? string.Empty : this.AnsSheetDelFlag.ToString()).GetHashCode() ^ 
					((this.AnsSheetsNo == null) ? string.Empty : this.AnsSheetsNo.ToString()).GetHashCode() ^ 
					((this.CoControlMembersId == null) ? string.Empty : this.CoControlMembersId.ToString()).GetHashCode() ^ 
					((this.AnsSheetDeldate == null) ? string.Empty : this.AnsSheetDeldate.ToString()).GetHashCode() ^ 
					((this.ADeliveryCommittee == null) ? string.Empty : this.ADeliveryCommittee.ToString()).GetHashCode() ^ 
					((this.Note == null) ? string.Empty : this.Note.ToString()).GetHashCode() ^ 
					this.CorrectionEndFlag.GetHashCode() ^ 
					this.AsFacultyInfoId.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CoScheduleDetailBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CoScheduleDetailBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="CoScheduleDetailBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="CoScheduleDetailBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CoScheduleDetailBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(CoScheduleDetailBase Object1, CoScheduleDetailBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.CoScheduleDetailId != Object2.CoScheduleDetailId)
				equal = false;
			if (Object1.CoExamScheduleId != Object2.CoExamScheduleId)
				equal = false;
			if (Object1.EdSubjectAssessId != Object2.EdSubjectAssessId)
				equal = false;
			if (Object1.ExamDate != Object2.ExamDate)
				equal = false;
			if (Object1.StartFrom != Object2.StartFrom)
				equal = false;
			if (Object1.CoCodeExamShiftId != Object2.CoCodeExamShiftId)
				equal = false;
			if ( Object1.QDeliveryFlag != null && Object2.QDeliveryFlag != null )
			{
				if (Object1.QDeliveryFlag != Object2.QDeliveryFlag)
					equal = false;
			}
			else if (Object1.QDeliveryFlag == null ^ Object2.QDeliveryFlag == null )
			{
				equal = false;
			}
			if ( Object1.QPapperNo != null && Object2.QPapperNo != null )
			{
				if (Object1.QPapperNo != Object2.QPapperNo)
					equal = false;
			}
			else if (Object1.QPapperNo == null ^ Object2.QPapperNo == null )
			{
				equal = false;
			}
			if ( Object1.DelivaryDate != null && Object2.DelivaryDate != null )
			{
				if (Object1.DelivaryDate != Object2.DelivaryDate)
					equal = false;
			}
			else if (Object1.DelivaryDate == null ^ Object2.DelivaryDate == null )
			{
				equal = false;
			}
			if ( Object1.CoControlDelegMemId != null && Object2.CoControlDelegMemId != null )
			{
				if (Object1.CoControlDelegMemId != Object2.CoControlDelegMemId)
					equal = false;
			}
			else if (Object1.CoControlDelegMemId == null ^ Object2.CoControlDelegMemId == null )
			{
				equal = false;
			}
			if ( Object1.DelivaryCommittee != null && Object2.DelivaryCommittee != null )
			{
				if (Object1.DelivaryCommittee != Object2.DelivaryCommittee)
					equal = false;
			}
			else if (Object1.DelivaryCommittee == null ^ Object2.DelivaryCommittee == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.AnsSheetDelFlag != null && Object2.AnsSheetDelFlag != null )
			{
				if (Object1.AnsSheetDelFlag != Object2.AnsSheetDelFlag)
					equal = false;
			}
			else if (Object1.AnsSheetDelFlag == null ^ Object2.AnsSheetDelFlag == null )
			{
				equal = false;
			}
			if ( Object1.AnsSheetsNo != null && Object2.AnsSheetsNo != null )
			{
				if (Object1.AnsSheetsNo != Object2.AnsSheetsNo)
					equal = false;
			}
			else if (Object1.AnsSheetsNo == null ^ Object2.AnsSheetsNo == null )
			{
				equal = false;
			}
			if ( Object1.CoControlMembersId != null && Object2.CoControlMembersId != null )
			{
				if (Object1.CoControlMembersId != Object2.CoControlMembersId)
					equal = false;
			}
			else if (Object1.CoControlMembersId == null ^ Object2.CoControlMembersId == null )
			{
				equal = false;
			}
			if ( Object1.AnsSheetDeldate != null && Object2.AnsSheetDeldate != null )
			{
				if (Object1.AnsSheetDeldate != Object2.AnsSheetDeldate)
					equal = false;
			}
			else if (Object1.AnsSheetDeldate == null ^ Object2.AnsSheetDeldate == null )
			{
				equal = false;
			}
			if ( Object1.ADeliveryCommittee != null && Object2.ADeliveryCommittee != null )
			{
				if (Object1.ADeliveryCommittee != Object2.ADeliveryCommittee)
					equal = false;
			}
			else if (Object1.ADeliveryCommittee == null ^ Object2.ADeliveryCommittee == null )
			{
				equal = false;
			}
			if ( Object1.Note != null && Object2.Note != null )
			{
				if (Object1.Note != Object2.Note)
					equal = false;
			}
			else if (Object1.Note == null ^ Object2.Note == null )
			{
				equal = false;
			}
			if (Object1.CorrectionEndFlag != Object2.CorrectionEndFlag)
				equal = false;
			if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CoScheduleDetailBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CoScheduleDetailComparer GetComparer()
        {
            return new CoScheduleDetailComparer();
        }
        */

        // Comparer delegates back to CoScheduleDetail
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(CoScheduleDetail rhs, CoScheduleDetailColumn which)
        {
            switch (which)
            {
            	
            	
            	case CoScheduleDetailColumn.CoScheduleDetailId:
            		return this.CoScheduleDetailId.CompareTo(rhs.CoScheduleDetailId);
            		
            		                 
            	
            	
            	case CoScheduleDetailColumn.CoExamScheduleId:
            		return this.CoExamScheduleId.CompareTo(rhs.CoExamScheduleId);
            		
            		                 
            	
            	
            	case CoScheduleDetailColumn.EdSubjectAssessId:
            		return this.EdSubjectAssessId.CompareTo(rhs.EdSubjectAssessId);
            		
            		                 
            	
            	
            	case CoScheduleDetailColumn.ExamDate:
            		return this.ExamDate.CompareTo(rhs.ExamDate);
            		
            		                 
            	
            	
            	case CoScheduleDetailColumn.StartFrom:
            		return this.StartFrom.CompareTo(rhs.StartFrom);
            		
            		                 
            	
            	
            	case CoScheduleDetailColumn.CoCodeExamShiftId:
            		return this.CoCodeExamShiftId.CompareTo(rhs.CoCodeExamShiftId);
            		
            		                 
            	
            	
            	case CoScheduleDetailColumn.QDeliveryFlag:
            		return this.QDeliveryFlag.Value.CompareTo(rhs.QDeliveryFlag.Value);
            		
            		                 
            	
            	
            	case CoScheduleDetailColumn.QPapperNo:
            		return this.QPapperNo.Value.CompareTo(rhs.QPapperNo.Value);
            		
            		                 
            	
            	
            	case CoScheduleDetailColumn.DelivaryDate:
            		return this.DelivaryDate.Value.CompareTo(rhs.DelivaryDate.Value);
            		
            		                 
            	
            	
            	case CoScheduleDetailColumn.CoControlDelegMemId:
            		return this.CoControlDelegMemId.Value.CompareTo(rhs.CoControlDelegMemId.Value);
            		
            		                 
            	
            	
            	case CoScheduleDetailColumn.DelivaryCommittee:
            		return this.DelivaryCommittee.CompareTo(rhs.DelivaryCommittee);
            		
            		                 
            	
            	
            	case CoScheduleDetailColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case CoScheduleDetailColumn.AnsSheetDelFlag:
            		return this.AnsSheetDelFlag.Value.CompareTo(rhs.AnsSheetDelFlag.Value);
            		
            		                 
            	
            	
            	case CoScheduleDetailColumn.AnsSheetsNo:
            		return this.AnsSheetsNo.Value.CompareTo(rhs.AnsSheetsNo.Value);
            		
            		                 
            	
            	
            	case CoScheduleDetailColumn.CoControlMembersId:
            		return this.CoControlMembersId.Value.CompareTo(rhs.CoControlMembersId.Value);
            		
            		                 
            	
            	
            	case CoScheduleDetailColumn.AnsSheetDeldate:
            		return this.AnsSheetDeldate.Value.CompareTo(rhs.AnsSheetDeldate.Value);
            		
            		                 
            	
            	
            	case CoScheduleDetailColumn.ADeliveryCommittee:
            		return this.ADeliveryCommittee.CompareTo(rhs.ADeliveryCommittee);
            		
            		                 
            	
            	
            	case CoScheduleDetailColumn.Note:
            		return this.Note.CompareTo(rhs.Note);
            		
            		                 
            	
            	
            	case CoScheduleDetailColumn.CorrectionEndFlag:
            		return this.CorrectionEndFlag.CompareTo(rhs.CorrectionEndFlag);
            		
            		                 
            	
            	
            	case CoScheduleDetailColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.CompareTo(rhs.AsFacultyInfoId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CoScheduleDetailKey> Members
		
		// member variable for the EntityId property
		private CoScheduleDetailKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual CoScheduleDetailKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CoScheduleDetailKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("CoScheduleDetail")
					.Append("|").Append( this.CoScheduleDetailId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{21}{20}- CoScheduleDetailId: {0}{20}- CoExamScheduleId: {1}{20}- EdSubjectAssessId: {2}{20}- ExamDate: {3}{20}- StartFrom: {4}{20}- CoCodeExamShiftId: {5}{20}- QDeliveryFlag: {6}{20}- QPapperNo: {7}{20}- DelivaryDate: {8}{20}- CoControlDelegMemId: {9}{20}- DelivaryCommittee: {10}{20}- Notes: {11}{20}- AnsSheetDelFlag: {12}{20}- AnsSheetsNo: {13}{20}- CoControlMembersId: {14}{20}- AnsSheetDeldate: {15}{20}- ADeliveryCommittee: {16}{20}- Note: {17}{20}- CorrectionEndFlag: {18}{20}- AsFacultyInfoId: {19}{20}{22}", 
				this.CoScheduleDetailId,
				this.CoExamScheduleId,
				this.EdSubjectAssessId,
				this.ExamDate,
				this.StartFrom,
				this.CoCodeExamShiftId,
				(this.QDeliveryFlag == null) ? string.Empty : this.QDeliveryFlag.ToString(),
				(this.QPapperNo == null) ? string.Empty : this.QPapperNo.ToString(),
				(this.DelivaryDate == null) ? string.Empty : this.DelivaryDate.ToString(),
				(this.CoControlDelegMemId == null) ? string.Empty : this.CoControlDelegMemId.ToString(),
				(this.DelivaryCommittee == null) ? string.Empty : this.DelivaryCommittee.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.AnsSheetDelFlag == null) ? string.Empty : this.AnsSheetDelFlag.ToString(),
				(this.AnsSheetsNo == null) ? string.Empty : this.AnsSheetsNo.ToString(),
				(this.CoControlMembersId == null) ? string.Empty : this.CoControlMembersId.ToString(),
				(this.AnsSheetDeldate == null) ? string.Empty : this.AnsSheetDeldate.ToString(),
				(this.ADeliveryCommittee == null) ? string.Empty : this.ADeliveryCommittee.ToString(),
				(this.Note == null) ? string.Empty : this.Note.ToString(),
				this.CorrectionEndFlag,
				this.AsFacultyInfoId,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'CO_SCHEDULE_DETAIL' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CoScheduleDetailEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// CO_SCHEDULE_DETAIL_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "CO_SCHEDULE_DETAIL"</remarks>
		public System.Decimal CoScheduleDetailId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalCoScheduleDetailId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// CO_EXAM_SCHEDULE_ID : 
		/// </summary>
		public System.Decimal		  CoExamScheduleId = 0.0m;
		
		/// <summary>
		/// ED_SUBJECT_ASSESS_ID : 
		/// </summary>
		public System.Decimal		  EdSubjectAssessId = 0.0m;
		
		/// <summary>
		/// EXAM_DATE : 
		/// </summary>
		public System.DateTime		  ExamDate = DateTime.MinValue;
		
		/// <summary>
		/// START_FROM : 
		/// </summary>
		public System.DateTime		  StartFrom = DateTime.MinValue;
		
		/// <summary>
		/// CO_CODE_EXAM_SHIFT_ID : 
		/// </summary>
		public System.Decimal		  CoCodeExamShiftId = 0.0m;
		
		/// <summary>
		/// Q_DELIVERY_FLAG : 
		/// </summary>
		public System.Decimal?		  QDeliveryFlag = null;
		
		/// <summary>
		/// Q_PAPPER_NO : 
		/// </summary>
		public System.Decimal?		  QPapperNo = null;
		
		/// <summary>
		/// DELIVARY_DATE : 
		/// </summary>
		public System.DateTime?		  DelivaryDate = null;
		
		/// <summary>
		/// CO_CONTROL_DELEG_MEM_ID : 
		/// </summary>
		public System.Decimal?		  CoControlDelegMemId = null;
		
		/// <summary>
		/// DELIVARY_COMMITTEE : 
		/// </summary>
		public System.String		  DelivaryCommittee = null;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// ANS_SHEET_DEL_FLAG : 
		/// </summary>
		public System.Decimal?		  AnsSheetDelFlag = null;
		
		/// <summary>
		/// ANS_SHEETS_NO : 
		/// </summary>
		public System.Decimal?		  AnsSheetsNo = null;
		
		/// <summary>
		/// CO_CONTROL_MEMBERS_ID : 
		/// </summary>
		public System.Decimal?		  CoControlMembersId = null;
		
		/// <summary>
		/// ANS_SHEET_DELDATE : 
		/// </summary>
		public System.DateTime?		  AnsSheetDeldate = null;
		
		/// <summary>
		/// A_DELIVERY_COMMITTEE : 
		/// </summary>
		public System.String		  ADeliveryCommittee = null;
		
		/// <summary>
		/// NOTE : 
		/// </summary>
		public System.String		  Note = null;
		
		/// <summary>
		/// CORRECTION_END_FLAG : 
		/// </summary>
		public System.Decimal		  CorrectionEndFlag = 0.0m;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal		  AsFacultyInfoId = 0.0m;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CoScheduleDetailEntityData _tmp = new CoScheduleDetailEntityData();
						
			_tmp.CoScheduleDetailId = this.CoScheduleDetailId;
			_tmp.OriginalCoScheduleDetailId = this.OriginalCoScheduleDetailId;
			
			_tmp.CoExamScheduleId = this.CoExamScheduleId;
			_tmp.EdSubjectAssessId = this.EdSubjectAssessId;
			_tmp.ExamDate = this.ExamDate;
			_tmp.StartFrom = this.StartFrom;
			_tmp.CoCodeExamShiftId = this.CoCodeExamShiftId;
			_tmp.QDeliveryFlag = this.QDeliveryFlag;
			_tmp.QPapperNo = this.QPapperNo;
			_tmp.DelivaryDate = this.DelivaryDate;
			_tmp.CoControlDelegMemId = this.CoControlDelegMemId;
			_tmp.DelivaryCommittee = this.DelivaryCommittee;
			_tmp.Notes = this.Notes;
			_tmp.AnsSheetDelFlag = this.AnsSheetDelFlag;
			_tmp.AnsSheetsNo = this.AnsSheetsNo;
			_tmp.CoControlMembersId = this.CoControlMembersId;
			_tmp.AnsSheetDeldate = this.AnsSheetDeldate;
			_tmp.ADeliveryCommittee = this.ADeliveryCommittee;
			_tmp.Note = this.Note;
			_tmp.CorrectionEndFlag = this.CorrectionEndFlag;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			CoScheduleDetailEntityData _tmp = new CoScheduleDetailEntityData();
						
			_tmp.CoScheduleDetailId = this.CoScheduleDetailId;
			_tmp.OriginalCoScheduleDetailId = this.OriginalCoScheduleDetailId;
			
			_tmp.CoExamScheduleId = this.CoExamScheduleId;
			_tmp.EdSubjectAssessId = this.EdSubjectAssessId;
			_tmp.ExamDate = this.ExamDate;
			_tmp.StartFrom = this.StartFrom;
			_tmp.CoCodeExamShiftId = this.CoCodeExamShiftId;
			_tmp.QDeliveryFlag = this.QDeliveryFlag;
			_tmp.QPapperNo = this.QPapperNo;
			_tmp.DelivaryDate = this.DelivaryDate;
			_tmp.CoControlDelegMemId = this.CoControlDelegMemId;
			_tmp.DelivaryCommittee = this.DelivaryCommittee;
			_tmp.Notes = this.Notes;
			_tmp.AnsSheetDelFlag = this.AnsSheetDelFlag;
			_tmp.AnsSheetsNo = this.AnsSheetsNo;
			_tmp.CoControlMembersId = this.CoControlMembersId;
			_tmp.AnsSheetDeldate = this.AnsSheetDeldate;
			_tmp.ADeliveryCommittee = this.ADeliveryCommittee;
			_tmp.Note = this.Note;
			_tmp.CorrectionEndFlag = this.CorrectionEndFlag;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CoScheduleDetailColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(CoScheduleDetailColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CoScheduleDetailColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(CoScheduleDetailColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CoScheduleDetailColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(CoScheduleDetailColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				CoScheduleDetailEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CoScheduleDetailEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CoScheduleDetailColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(CoScheduleDetailColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CoScheduleDetailEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CoScheduleDetailEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CoScheduleDetailEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="CoScheduleDetail"/> object.
	/// </remarks>
	public class CoScheduleDetailEventArgs : System.EventArgs
	{
		private CoScheduleDetailColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CoScheduleDetailEventArgs class.
		///</summary>
		public CoScheduleDetailEventArgs(CoScheduleDetailColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CoScheduleDetailEventArgs class.
		///</summary>
		public CoScheduleDetailEventArgs(CoScheduleDetailColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CoScheduleDetailColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CoScheduleDetailColumn" />
		public CoScheduleDetailColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all CoScheduleDetail related events.
	///</summary>
	public delegate void CoScheduleDetailEventHandler(object sender, CoScheduleDetailEventArgs e);
	
	#region CoScheduleDetailComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CoScheduleDetailComparer : System.Collections.Generic.IComparer<CoScheduleDetail>
	{
		CoScheduleDetailColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CoScheduleDetailComparer"/> class.
        /// </summary>
		public CoScheduleDetailComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CoScheduleDetailComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CoScheduleDetailComparer(CoScheduleDetailColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="CoScheduleDetail"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="CoScheduleDetail"/> to compare.</param>
        /// <param name="b">The second <c>CoScheduleDetail</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(CoScheduleDetail a, CoScheduleDetail b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(CoScheduleDetail entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(CoScheduleDetail a, CoScheduleDetail b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CoScheduleDetailColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CoScheduleDetailKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="CoScheduleDetail"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CoScheduleDetailKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CoScheduleDetailKey class.
		/// </summary>
		public CoScheduleDetailKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CoScheduleDetailKey class.
		/// </summary>
		public CoScheduleDetailKey(CoScheduleDetailBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.CoScheduleDetailId = entity.CoScheduleDetailId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CoScheduleDetailKey class.
		/// </summary>
		public CoScheduleDetailKey(System.Decimal _coScheduleDetailId)
		{
			#region Init Properties

			this.CoScheduleDetailId = _coScheduleDetailId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CoScheduleDetailBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CoScheduleDetailBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the CoScheduleDetailId property
		private System.Decimal _coScheduleDetailId;
		
		/// <summary>
		/// Gets or sets the CoScheduleDetailId property.
		/// </summary>
		public System.Decimal CoScheduleDetailId
		{
			get { return _coScheduleDetailId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.CoScheduleDetailId = value;
				
				_coScheduleDetailId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				CoScheduleDetailId = ( values["CoScheduleDetailId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["CoScheduleDetailId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("CoScheduleDetailId", CoScheduleDetailId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("CoScheduleDetailId: {0}{1}",
								CoScheduleDetailId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CoScheduleDetailColumn Enum
	
	/// <summary>
	/// Enumerate the CoScheduleDetail columns.
	/// </summary>
	[Serializable]
	public enum CoScheduleDetailColumn : int
	{
		/// <summary>
		/// CoScheduleDetailId : 
		/// </summary>
		[EnumTextValue("CO_SCHEDULE_DETAIL_ID")]
		[ColumnEnum("CO_SCHEDULE_DETAIL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		CoScheduleDetailId = 1,
		/// <summary>
		/// CoExamScheduleId : 
		/// </summary>
		[EnumTextValue("CO_EXAM_SCHEDULE_ID")]
		[ColumnEnum("CO_EXAM_SCHEDULE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		CoExamScheduleId = 2,
		/// <summary>
		/// EdSubjectAssessId : 
		/// </summary>
		[EnumTextValue("ED_SUBJECT_ASSESS_ID")]
		[ColumnEnum("ED_SUBJECT_ASSESS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdSubjectAssessId = 3,
		/// <summary>
		/// ExamDate : 
		/// </summary>
		[EnumTextValue("EXAM_DATE")]
		[ColumnEnum("EXAM_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ExamDate = 4,
		/// <summary>
		/// StartFrom : 
		/// </summary>
		[EnumTextValue("START_FROM")]
		[ColumnEnum("START_FROM", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		StartFrom = 5,
		/// <summary>
		/// CoCodeExamShiftId : 
		/// </summary>
		[EnumTextValue("CO_CODE_EXAM_SHIFT_ID")]
		[ColumnEnum("CO_CODE_EXAM_SHIFT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		CoCodeExamShiftId = 6,
		/// <summary>
		/// QDeliveryFlag : 
		/// </summary>
		[EnumTextValue("Q_DELIVERY_FLAG")]
		[ColumnEnum("Q_DELIVERY_FLAG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		QDeliveryFlag = 7,
		/// <summary>
		/// QPapperNo : 
		/// </summary>
		[EnumTextValue("Q_PAPPER_NO")]
		[ColumnEnum("Q_PAPPER_NO", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		QPapperNo = 8,
		/// <summary>
		/// DelivaryDate : 
		/// </summary>
		[EnumTextValue("DELIVARY_DATE")]
		[ColumnEnum("DELIVARY_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DelivaryDate = 9,
		/// <summary>
		/// CoControlDelegMemId : 
		/// </summary>
		[EnumTextValue("CO_CONTROL_DELEG_MEM_ID")]
		[ColumnEnum("CO_CONTROL_DELEG_MEM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CoControlDelegMemId = 10,
		/// <summary>
		/// DelivaryCommittee : 
		/// </summary>
		[EnumTextValue("DELIVARY_COMMITTEE")]
		[ColumnEnum("DELIVARY_COMMITTEE", typeof(System.String), System.Data.DbType.String, false, false, true, 240)]
		DelivaryCommittee = 11,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		Notes = 12,
		/// <summary>
		/// AnsSheetDelFlag : 
		/// </summary>
		[EnumTextValue("ANS_SHEET_DEL_FLAG")]
		[ColumnEnum("ANS_SHEET_DEL_FLAG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AnsSheetDelFlag = 13,
		/// <summary>
		/// AnsSheetsNo : 
		/// </summary>
		[EnumTextValue("ANS_SHEETS_NO")]
		[ColumnEnum("ANS_SHEETS_NO", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AnsSheetsNo = 14,
		/// <summary>
		/// CoControlMembersId : 
		/// </summary>
		[EnumTextValue("CO_CONTROL_MEMBERS_ID")]
		[ColumnEnum("CO_CONTROL_MEMBERS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CoControlMembersId = 15,
		/// <summary>
		/// AnsSheetDeldate : 
		/// </summary>
		[EnumTextValue("ANS_SHEET_DELDATE")]
		[ColumnEnum("ANS_SHEET_DELDATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		AnsSheetDeldate = 16,
		/// <summary>
		/// ADeliveryCommittee : 
		/// </summary>
		[EnumTextValue("A_DELIVERY_COMMITTEE")]
		[ColumnEnum("A_DELIVERY_COMMITTEE", typeof(System.String), System.Data.DbType.String, false, false, true, 240)]
		ADeliveryCommittee = 17,
		/// <summary>
		/// Note : 
		/// </summary>
		[EnumTextValue("NOTE")]
		[ColumnEnum("NOTE", typeof(System.String), System.Data.DbType.String, false, false, true, 240)]
		Note = 18,
		/// <summary>
		/// CorrectionEndFlag : 
		/// </summary>
		[EnumTextValue("CORRECTION_END_FLAG")]
		[ColumnEnum("CORRECTION_END_FLAG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		CorrectionEndFlag = 19,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AsFacultyInfoId = 20
	}//End enum

	#endregion CoScheduleDetailColumn Enum

} // end namespace
