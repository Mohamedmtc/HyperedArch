
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SvAutoMsgTmplt.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'SV_AUTO_MSG_TMPLT' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SvAutoMsgTmpltBase : EntityBase, ISvAutoMsgTmplt, IEntityId<SvAutoMsgTmpltKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SvAutoMsgTmpltEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SvAutoMsgTmpltEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SvAutoMsgTmpltEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SvAutoMsgTmplt> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SvAutoMsgTmpltEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SvAutoMsgTmpltEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SvAutoMsgTmpltBase"/> instance.
		///</summary>
		public SvAutoMsgTmpltBase()
		{
			this.entityData = new SvAutoMsgTmpltEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SvAutoMsgTmpltBase"/> instance.
		///</summary>
		///<param name="_svAutoMsgTmpltId"></param>
		///<param name="_seCodeUserTypeId"></param>
		///<param name="_msgType"></param>
		///<param name="_msgTitleAr"></param>
		///<param name="_msgTitleEn"></param>
		///<param name="_msgBodyAr"></param>
		///<param name="_msgBodyEn"></param>
		///<param name="_notifyFlg">notification at home page
		/// 		/// NULL
		/// 		/// 1  mail
		/// 		/// 2  SMS</param>
		///<param name="_inboxFlg">appear in inbox</param>
		///<param name="_notes"></param>
		///<param name="_msgTmpltFlg">1: applicant
		/// 		/// 2: student
		/// 		/// </param>
		///<param name="_asFacultyInfoId"></param>
		public SvAutoMsgTmpltBase(System.Decimal _svAutoMsgTmpltId, System.Decimal? _seCodeUserTypeId, 
			System.String _msgType, System.String _msgTitleAr, System.String _msgTitleEn, 
			System.String _msgBodyAr, System.String _msgBodyEn, System.Int16? _notifyFlg, 
			System.Boolean? _inboxFlg, System.String _notes, System.Int16? _msgTmpltFlg, 
			System.Decimal? _asFacultyInfoId)
		{
			this.entityData = new SvAutoMsgTmpltEntityData();
			this.backupData = null;

			this.SvAutoMsgTmpltId = _svAutoMsgTmpltId;
			this.SeCodeUserTypeId = _seCodeUserTypeId;
			this.MsgType = _msgType;
			this.MsgTitleAr = _msgTitleAr;
			this.MsgTitleEn = _msgTitleEn;
			this.MsgBodyAr = _msgBodyAr;
			this.MsgBodyEn = _msgBodyEn;
			this.NotifyFlg = _notifyFlg;
			this.InboxFlg = _inboxFlg;
			this.Notes = _notes;
			this.MsgTmpltFlg = _msgTmpltFlg;
			this.AsFacultyInfoId = _asFacultyInfoId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SvAutoMsgTmplt"/> instance.
		///</summary>
		///<param name="_svAutoMsgTmpltId"></param>
		///<param name="_seCodeUserTypeId"></param>
		///<param name="_msgType"></param>
		///<param name="_msgTitleAr"></param>
		///<param name="_msgTitleEn"></param>
		///<param name="_msgBodyAr"></param>
		///<param name="_msgBodyEn"></param>
		///<param name="_notifyFlg">notification at home page
		/// 		/// NULL
		/// 		/// 1  mail
		/// 		/// 2  SMS</param>
		///<param name="_inboxFlg">appear in inbox</param>
		///<param name="_notes"></param>
		///<param name="_msgTmpltFlg">1: applicant
		/// 		/// 2: student
		/// 		/// </param>
		///<param name="_asFacultyInfoId"></param>
		public static SvAutoMsgTmplt CreateSvAutoMsgTmplt(System.Decimal _svAutoMsgTmpltId, System.Decimal? _seCodeUserTypeId, 
			System.String _msgType, System.String _msgTitleAr, System.String _msgTitleEn, 
			System.String _msgBodyAr, System.String _msgBodyEn, System.Int16? _notifyFlg, 
			System.Boolean? _inboxFlg, System.String _notes, System.Int16? _msgTmpltFlg, 
			System.Decimal? _asFacultyInfoId)
		{
			SvAutoMsgTmplt newSvAutoMsgTmplt = new SvAutoMsgTmplt();
			newSvAutoMsgTmplt.SvAutoMsgTmpltId = _svAutoMsgTmpltId;
			newSvAutoMsgTmplt.SeCodeUserTypeId = _seCodeUserTypeId;
			newSvAutoMsgTmplt.MsgType = _msgType;
			newSvAutoMsgTmplt.MsgTitleAr = _msgTitleAr;
			newSvAutoMsgTmplt.MsgTitleEn = _msgTitleEn;
			newSvAutoMsgTmplt.MsgBodyAr = _msgBodyAr;
			newSvAutoMsgTmplt.MsgBodyEn = _msgBodyEn;
			newSvAutoMsgTmplt.NotifyFlg = _notifyFlg;
			newSvAutoMsgTmplt.InboxFlg = _inboxFlg;
			newSvAutoMsgTmplt.Notes = _notes;
			newSvAutoMsgTmplt.MsgTmpltFlg = _msgTmpltFlg;
			newSvAutoMsgTmplt.AsFacultyInfoId = _asFacultyInfoId;
			return newSvAutoMsgTmplt;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SvAutoMsgTmpltId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal SvAutoMsgTmpltId
		{
			get
			{
				return this.entityData.SvAutoMsgTmpltId; 
			}
			
			set
			{
				if (this.entityData.SvAutoMsgTmpltId == value)
					return;
					
				OnColumnChanging(SvAutoMsgTmpltColumn.SvAutoMsgTmpltId, this.entityData.SvAutoMsgTmpltId);
				this.entityData.SvAutoMsgTmpltId = value;
				this.EntityId.SvAutoMsgTmpltId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvAutoMsgTmpltColumn.SvAutoMsgTmpltId, this.entityData.SvAutoMsgTmpltId);
				OnPropertyChanged("SvAutoMsgTmpltId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SV_AUTO_MSG_TMPLT_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SV_AUTO_MSG_TMPLT_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalSvAutoMsgTmpltId
		{
			get { return this.entityData.OriginalSvAutoMsgTmpltId; }
			set { this.entityData.OriginalSvAutoMsgTmpltId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the SeCodeUserTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeCodeUserTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeCodeUserTypeId
		{
			get
			{
				return this.entityData.SeCodeUserTypeId; 
			}
			
			set
			{
				if (this.entityData.SeCodeUserTypeId == value)
					return;
					
				OnColumnChanging(SvAutoMsgTmpltColumn.SeCodeUserTypeId, this.entityData.SeCodeUserTypeId);
				this.entityData.SeCodeUserTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvAutoMsgTmpltColumn.SeCodeUserTypeId, this.entityData.SeCodeUserTypeId);
				OnPropertyChanged("SeCodeUserTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MsgType property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String MsgType
		{
			get
			{
				return this.entityData.MsgType; 
			}
			
			set
			{
				if (this.entityData.MsgType == value)
					return;
					
				OnColumnChanging(SvAutoMsgTmpltColumn.MsgType, this.entityData.MsgType);
				this.entityData.MsgType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvAutoMsgTmpltColumn.MsgType, this.entityData.MsgType);
				OnPropertyChanged("MsgType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MsgTitleAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String MsgTitleAr
		{
			get
			{
				return this.entityData.MsgTitleAr; 
			}
			
			set
			{
				if (this.entityData.MsgTitleAr == value)
					return;
					
				OnColumnChanging(SvAutoMsgTmpltColumn.MsgTitleAr, this.entityData.MsgTitleAr);
				this.entityData.MsgTitleAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvAutoMsgTmpltColumn.MsgTitleAr, this.entityData.MsgTitleAr);
				OnPropertyChanged("MsgTitleAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MsgTitleEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String MsgTitleEn
		{
			get
			{
				return this.entityData.MsgTitleEn; 
			}
			
			set
			{
				if (this.entityData.MsgTitleEn == value)
					return;
					
				OnColumnChanging(SvAutoMsgTmpltColumn.MsgTitleEn, this.entityData.MsgTitleEn);
				this.entityData.MsgTitleEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvAutoMsgTmpltColumn.MsgTitleEn, this.entityData.MsgTitleEn);
				OnPropertyChanged("MsgTitleEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MsgBodyAr property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.String MsgBodyAr
		{
			get
			{
				return this.entityData.MsgBodyAr; 
			}
			
			set
			{
				if (this.entityData.MsgBodyAr == value)
					return;
					
				OnColumnChanging(SvAutoMsgTmpltColumn.MsgBodyAr, this.entityData.MsgBodyAr);
				this.entityData.MsgBodyAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvAutoMsgTmpltColumn.MsgBodyAr, this.entityData.MsgBodyAr);
				OnPropertyChanged("MsgBodyAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MsgBodyEn property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.String MsgBodyEn
		{
			get
			{
				return this.entityData.MsgBodyEn; 
			}
			
			set
			{
				if (this.entityData.MsgBodyEn == value)
					return;
					
				OnColumnChanging(SvAutoMsgTmpltColumn.MsgBodyEn, this.entityData.MsgBodyEn);
				this.entityData.MsgBodyEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvAutoMsgTmpltColumn.MsgBodyEn, this.entityData.MsgBodyEn);
				OnPropertyChanged("MsgBodyEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NotifyFlg property. 
		///		notification at home page
		/// 		/// NULL
		/// 		/// 1  mail
		/// 		/// 2  SMS
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsNotifyFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"notification at home page NULL 1  mail 2  SMS"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? NotifyFlg
		{
			get
			{
				return this.entityData.NotifyFlg; 
			}
			
			set
			{
				if (this.entityData.NotifyFlg == value)
					return;
					
				OnColumnChanging(SvAutoMsgTmpltColumn.NotifyFlg, this.entityData.NotifyFlg);
				this.entityData.NotifyFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvAutoMsgTmpltColumn.NotifyFlg, this.entityData.NotifyFlg);
				OnPropertyChanged("NotifyFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InboxFlg property. 
		///		appear in inbox
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsInboxFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"appear in inbox"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? InboxFlg
		{
			get
			{
				return this.entityData.InboxFlg; 
			}
			
			set
			{
				if (this.entityData.InboxFlg == value)
					return;
					
				OnColumnChanging(SvAutoMsgTmpltColumn.InboxFlg, this.entityData.InboxFlg);
				this.entityData.InboxFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvAutoMsgTmpltColumn.InboxFlg, this.entityData.InboxFlg);
				OnPropertyChanged("InboxFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(SvAutoMsgTmpltColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvAutoMsgTmpltColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MsgTmpltFlg property. 
		///		1: applicant
		/// 		/// 2: student
		/// 		/// 
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsMsgTmpltFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"1: applicant 2: student "), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? MsgTmpltFlg
		{
			get
			{
				return this.entityData.MsgTmpltFlg; 
			}
			
			set
			{
				if (this.entityData.MsgTmpltFlg == value)
					return;
					
				OnColumnChanging(SvAutoMsgTmpltColumn.MsgTmpltFlg, this.entityData.MsgTmpltFlg);
				this.entityData.MsgTmpltFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvAutoMsgTmpltColumn.MsgTmpltFlg, this.entityData.MsgTmpltFlg);
				OnPropertyChanged("MsgTmpltFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(SvAutoMsgTmpltColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SvAutoMsgTmpltColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeCodeUserType"/>.
		/// </summary>
		/// <value>The source SeCodeUserType for SeCodeUserTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeCodeUserType SeCodeUserTypeIdSource
      	{
            get { return entityData.SeCodeUserTypeIdSource; }
            set { entityData.SeCodeUserTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SvAutoMsgTmplt"/>.
		/// </summary>
		/// <value>The source SvAutoMsgTmplt for SvAutoMsgTmpltId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SvAutoMsgTmplt SvAutoMsgTmpltIdSource
      	{
            get { return entityData.SvAutoMsgTmpltIdSource; }
            set { entityData.SvAutoMsgTmpltIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of SvMessage objects
		///	which are related to this object through the relation FK_SV_MESSAGE_SV_AUTO_MSG_TMPLT
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SvMessage> SvMessageCollection
		{
			get { return entityData.SvMessageCollection; }
			set { entityData.SvMessageCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmCdeAppStatus objects
		///	which are related to this object through the relation FK_ADM_CDE_APP_STATUS_SV_AUTO_MSG_TMPLT
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmCdeAppStatus> AdmCdeAppStatusCollection
		{
			get { return entityData.AdmCdeAppStatusCollection; }
			set { entityData.AdmCdeAppStatusCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AdmCdeStatus objects
		///	which are related to this object through the relation FK_ADM_CDE_STATUS_SV_AUTO_MSG_TMPLT
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AdmCdeStatus> AdmCdeStatusCollection
		{
			get { return entityData.AdmCdeStatusCollection; }
			set { entityData.AdmCdeStatusCollection = value; }	
		}

		/// <summary>
		///	Holds a SvAutoMsgTmplt object
		///	which is related to this object through the relation SvAutoMsgTmplt
		/// </summary>
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SvAutoMsgTmplt SvAutoMsgTmplt
		{
			get { return entityData.SvAutoMsgTmplt; }
			set { entityData.SvAutoMsgTmplt = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SvMsgTmpltParam objects
		///	which are related to this object through the relation FK_SV_MSG_TMPLT_PARAM_SV_AUTO_MSG_TMPLT
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SvMsgTmpltParam> SvMsgTmpltParamCollection
		{
			get { return entityData.SvMsgTmpltParamCollection; }
			set { entityData.SvMsgTmpltParamCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MsgType", "Msg Type"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MsgType", "Msg Type", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MsgTitleAr", "Msg Title Ar"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MsgTitleAr", "Msg Title Ar", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MsgTitleEn", "Msg Title En"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MsgTitleEn", "Msg Title En", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MsgBodyAr", "Msg Body Ar"));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MsgBodyEn", "Msg Body En"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 250));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "SV_AUTO_MSG_TMPLT"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SV_AUTO_MSG_TMPLT_ID", "SE_CODE_USER_TYPE_ID", "MSG_TYPE", "MSG_TITLE_AR", "MSG_TITLE_EN", "MSG_BODY_AR", "MSG_BODY_EN", "NOTIFY_FLG", "INBOX_FLG", "NOTES", "MSG_TMPLT_FLG", "AS_FACULTY_INFO_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SvAutoMsgTmpltEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SvAutoMsgTmplt) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SvAutoMsgTmplt>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SvAutoMsgTmplt);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SvAutoMsgTmplt Entity 
		///</summary>
		protected virtual SvAutoMsgTmplt Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SvAutoMsgTmplt copy = new SvAutoMsgTmplt();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SvAutoMsgTmpltId = this.SvAutoMsgTmpltId;
					copy.OriginalSvAutoMsgTmpltId = this.OriginalSvAutoMsgTmpltId;
				copy.SeCodeUserTypeId = this.SeCodeUserTypeId;
				copy.MsgType = this.MsgType;
				copy.MsgTitleAr = this.MsgTitleAr;
				copy.MsgTitleEn = this.MsgTitleEn;
				copy.MsgBodyAr = this.MsgBodyAr;
				copy.MsgBodyEn = this.MsgBodyEn;
				copy.NotifyFlg = this.NotifyFlg;
				copy.InboxFlg = this.InboxFlg;
				copy.Notes = this.Notes;
				copy.MsgTmpltFlg = this.MsgTmpltFlg;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
			
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.SeCodeUserTypeIdSource != null && existingCopies.Contains(this.SeCodeUserTypeIdSource))
				copy.SeCodeUserTypeIdSource = existingCopies[this.SeCodeUserTypeIdSource] as SeCodeUserType;
			else
				copy.SeCodeUserTypeIdSource = MakeCopyOf(this.SeCodeUserTypeIdSource, existingCopies) as SeCodeUserType;
			if (this.SvAutoMsgTmpltIdSource != null && existingCopies.Contains(this.SvAutoMsgTmpltIdSource))
				copy.SvAutoMsgTmpltIdSource = existingCopies[this.SvAutoMsgTmpltIdSource] as SvAutoMsgTmplt;
			else
				copy.SvAutoMsgTmpltIdSource = MakeCopyOf(this.SvAutoMsgTmpltIdSource, existingCopies) as SvAutoMsgTmplt;
		
			//deep copy nested objects
			copy.SvMessageCollection = (TList<SvMessage>) MakeCopyOf(this.SvMessageCollection, existingCopies); 
			copy.AdmCdeAppStatusCollection = (TList<AdmCdeAppStatus>) MakeCopyOf(this.AdmCdeAppStatusCollection, existingCopies); 
			copy.AdmCdeStatusCollection = (TList<AdmCdeStatus>) MakeCopyOf(this.AdmCdeStatusCollection, existingCopies); 
			copy.SvAutoMsgTmplt = (SvAutoMsgTmplt) MakeCopyOf(this.SvAutoMsgTmplt, existingCopies); 
			copy.SvMsgTmpltParamCollection = (TList<SvMsgTmpltParam>) MakeCopyOf(this.SvMsgTmpltParamCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SvAutoMsgTmplt Entity 
		///</summary>
		public virtual SvAutoMsgTmplt Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SvAutoMsgTmplt Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SvAutoMsgTmplt DeepCopy()
		{
			return EntityHelper.Clone<SvAutoMsgTmplt>(this as SvAutoMsgTmplt);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SvAutoMsgTmpltEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SvAutoMsgTmpltEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SvAutoMsgTmpltEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SvAutoMsgTmpltColumn column)
		{
			switch(column)
			{
					case SvAutoMsgTmpltColumn.SvAutoMsgTmpltId:
					return entityData.SvAutoMsgTmpltId != _originalData.SvAutoMsgTmpltId;
					case SvAutoMsgTmpltColumn.SeCodeUserTypeId:
					return entityData.SeCodeUserTypeId != _originalData.SeCodeUserTypeId;
					case SvAutoMsgTmpltColumn.MsgType:
					return entityData.MsgType != _originalData.MsgType;
					case SvAutoMsgTmpltColumn.MsgTitleAr:
					return entityData.MsgTitleAr != _originalData.MsgTitleAr;
					case SvAutoMsgTmpltColumn.MsgTitleEn:
					return entityData.MsgTitleEn != _originalData.MsgTitleEn;
					case SvAutoMsgTmpltColumn.MsgBodyAr:
					return entityData.MsgBodyAr != _originalData.MsgBodyAr;
					case SvAutoMsgTmpltColumn.MsgBodyEn:
					return entityData.MsgBodyEn != _originalData.MsgBodyEn;
					case SvAutoMsgTmpltColumn.NotifyFlg:
					return entityData.NotifyFlg != _originalData.NotifyFlg;
					case SvAutoMsgTmpltColumn.InboxFlg:
					return entityData.InboxFlg != _originalData.InboxFlg;
					case SvAutoMsgTmpltColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case SvAutoMsgTmpltColumn.MsgTmpltFlg:
					return entityData.MsgTmpltFlg != _originalData.MsgTmpltFlg;
					case SvAutoMsgTmpltColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SvAutoMsgTmpltColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SvAutoMsgTmpltId != _originalData.SvAutoMsgTmpltId;
			result = result || entityData.SeCodeUserTypeId != _originalData.SeCodeUserTypeId;
			result = result || entityData.MsgType != _originalData.MsgType;
			result = result || entityData.MsgTitleAr != _originalData.MsgTitleAr;
			result = result || entityData.MsgTitleEn != _originalData.MsgTitleEn;
			result = result || entityData.MsgBodyAr != _originalData.MsgBodyAr;
			result = result || entityData.MsgBodyEn != _originalData.MsgBodyEn;
			result = result || entityData.NotifyFlg != _originalData.NotifyFlg;
			result = result || entityData.InboxFlg != _originalData.InboxFlg;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.MsgTmpltFlg != _originalData.MsgTmpltFlg;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			return result;
		}	
		
		///<summary>
		///  Returns a SvAutoMsgTmplt Entity with the original data.
		///</summary>
		public SvAutoMsgTmplt GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSvAutoMsgTmplt(
				_originalData.SvAutoMsgTmpltId,
				_originalData.SeCodeUserTypeId,
				_originalData.MsgType,
				_originalData.MsgTitleAr,
				_originalData.MsgTitleEn,
				_originalData.MsgBodyAr,
				_originalData.MsgBodyEn,
				_originalData.NotifyFlg,
				_originalData.InboxFlg,
				_originalData.Notes,
				_originalData.MsgTmpltFlg,
				_originalData.AsFacultyInfoId
				);
				
			return (SvAutoMsgTmplt)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SvAutoMsgTmpltBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SvAutoMsgTmpltBase)
				return ValueEquals(this, (SvAutoMsgTmpltBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SvAutoMsgTmpltBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SvAutoMsgTmpltId.GetHashCode() ^ 
					((this.SeCodeUserTypeId == null) ? string.Empty : this.SeCodeUserTypeId.ToString()).GetHashCode() ^ 
					this.MsgType.GetHashCode() ^ 
					this.MsgTitleAr.GetHashCode() ^ 
					this.MsgTitleEn.GetHashCode() ^ 
					this.MsgBodyAr.GetHashCode() ^ 
					this.MsgBodyEn.GetHashCode() ^ 
					((this.NotifyFlg == null) ? string.Empty : this.NotifyFlg.ToString()).GetHashCode() ^ 
					((this.InboxFlg == null) ? string.Empty : this.InboxFlg.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.MsgTmpltFlg == null) ? string.Empty : this.MsgTmpltFlg.ToString()).GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SvAutoMsgTmpltBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SvAutoMsgTmpltBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SvAutoMsgTmpltBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SvAutoMsgTmpltBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SvAutoMsgTmpltBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SvAutoMsgTmpltBase Object1, SvAutoMsgTmpltBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SvAutoMsgTmpltId != Object2.SvAutoMsgTmpltId)
				equal = false;
			if ( Object1.SeCodeUserTypeId != null && Object2.SeCodeUserTypeId != null )
			{
				if (Object1.SeCodeUserTypeId != Object2.SeCodeUserTypeId)
					equal = false;
			}
			else if (Object1.SeCodeUserTypeId == null ^ Object2.SeCodeUserTypeId == null )
			{
				equal = false;
			}
			if (Object1.MsgType != Object2.MsgType)
				equal = false;
			if (Object1.MsgTitleAr != Object2.MsgTitleAr)
				equal = false;
			if (Object1.MsgTitleEn != Object2.MsgTitleEn)
				equal = false;
			if (Object1.MsgBodyAr != Object2.MsgBodyAr)
				equal = false;
			if (Object1.MsgBodyEn != Object2.MsgBodyEn)
				equal = false;
			if ( Object1.NotifyFlg != null && Object2.NotifyFlg != null )
			{
				if (Object1.NotifyFlg != Object2.NotifyFlg)
					equal = false;
			}
			else if (Object1.NotifyFlg == null ^ Object2.NotifyFlg == null )
			{
				equal = false;
			}
			if ( Object1.InboxFlg != null && Object2.InboxFlg != null )
			{
				if (Object1.InboxFlg != Object2.InboxFlg)
					equal = false;
			}
			else if (Object1.InboxFlg == null ^ Object2.InboxFlg == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.MsgTmpltFlg != null && Object2.MsgTmpltFlg != null )
			{
				if (Object1.MsgTmpltFlg != Object2.MsgTmpltFlg)
					equal = false;
			}
			else if (Object1.MsgTmpltFlg == null ^ Object2.MsgTmpltFlg == null )
			{
				equal = false;
			}
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SvAutoMsgTmpltBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SvAutoMsgTmpltComparer GetComparer()
        {
            return new SvAutoMsgTmpltComparer();
        }
        */

        // Comparer delegates back to SvAutoMsgTmplt
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SvAutoMsgTmplt rhs, SvAutoMsgTmpltColumn which)
        {
            switch (which)
            {
            	
            	
            	case SvAutoMsgTmpltColumn.SvAutoMsgTmpltId:
            		return this.SvAutoMsgTmpltId.CompareTo(rhs.SvAutoMsgTmpltId);
            		
            		                 
            	
            	
            	case SvAutoMsgTmpltColumn.SeCodeUserTypeId:
            		return this.SeCodeUserTypeId.Value.CompareTo(rhs.SeCodeUserTypeId.Value);
            		
            		                 
            	
            	
            	case SvAutoMsgTmpltColumn.MsgType:
            		return this.MsgType.CompareTo(rhs.MsgType);
            		
            		                 
            	
            	
            	case SvAutoMsgTmpltColumn.MsgTitleAr:
            		return this.MsgTitleAr.CompareTo(rhs.MsgTitleAr);
            		
            		                 
            	
            	
            	case SvAutoMsgTmpltColumn.MsgTitleEn:
            		return this.MsgTitleEn.CompareTo(rhs.MsgTitleEn);
            		
            		                 
            	
            	
            	case SvAutoMsgTmpltColumn.MsgBodyAr:
            		return this.MsgBodyAr.CompareTo(rhs.MsgBodyAr);
            		
            		                 
            	
            	
            	case SvAutoMsgTmpltColumn.MsgBodyEn:
            		return this.MsgBodyEn.CompareTo(rhs.MsgBodyEn);
            		
            		                 
            	
            	
            	case SvAutoMsgTmpltColumn.NotifyFlg:
            		return this.NotifyFlg.Value.CompareTo(rhs.NotifyFlg.Value);
            		
            		                 
            	
            	
            	case SvAutoMsgTmpltColumn.InboxFlg:
            		return this.InboxFlg.Value.CompareTo(rhs.InboxFlg.Value);
            		
            		                 
            	
            	
            	case SvAutoMsgTmpltColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case SvAutoMsgTmpltColumn.MsgTmpltFlg:
            		return this.MsgTmpltFlg.Value.CompareTo(rhs.MsgTmpltFlg.Value);
            		
            		                 
            	
            	
            	case SvAutoMsgTmpltColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SvAutoMsgTmpltKey> Members
		
		// member variable for the EntityId property
		private SvAutoMsgTmpltKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SvAutoMsgTmpltKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SvAutoMsgTmpltKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SvAutoMsgTmplt")
					.Append("|").Append( this.SvAutoMsgTmpltId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- SvAutoMsgTmpltId: {0}{12}- SeCodeUserTypeId: {1}{12}- MsgType: {2}{12}- MsgTitleAr: {3}{12}- MsgTitleEn: {4}{12}- MsgBodyAr: {5}{12}- MsgBodyEn: {6}{12}- NotifyFlg: {7}{12}- InboxFlg: {8}{12}- Notes: {9}{12}- MsgTmpltFlg: {10}{12}- AsFacultyInfoId: {11}{12}{14}", 
				this.SvAutoMsgTmpltId,
				(this.SeCodeUserTypeId == null) ? string.Empty : this.SeCodeUserTypeId.ToString(),
				this.MsgType,
				this.MsgTitleAr,
				this.MsgTitleEn,
				this.MsgBodyAr,
				this.MsgBodyEn,
				(this.NotifyFlg == null) ? string.Empty : this.NotifyFlg.ToString(),
				(this.InboxFlg == null) ? string.Empty : this.InboxFlg.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.MsgTmpltFlg == null) ? string.Empty : this.MsgTmpltFlg.ToString(),
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SV_AUTO_MSG_TMPLT' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SvAutoMsgTmpltEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SV_AUTO_MSG_TMPLT_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SV_AUTO_MSG_TMPLT"</remarks>
		public System.Decimal SvAutoMsgTmpltId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalSvAutoMsgTmpltId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SE_CODE_USER_TYPE_ID : 
		/// </summary>
		public System.Decimal?		  SeCodeUserTypeId = null;
		
		/// <summary>
		/// MSG_TYPE : 
		/// </summary>
		public System.String		  MsgType = string.Empty;
		
		/// <summary>
		/// MSG_TITLE_AR : 
		/// </summary>
		public System.String		  MsgTitleAr = string.Empty;
		
		/// <summary>
		/// MSG_TITLE_EN : 
		/// </summary>
		public System.String		  MsgTitleEn = string.Empty;
		
		/// <summary>
		/// MSG_BODY_AR : 
		/// </summary>
		public System.String		  MsgBodyAr = string.Empty;
		
		/// <summary>
		/// MSG_BODY_EN : 
		/// </summary>
		public System.String		  MsgBodyEn = string.Empty;
		
		/// <summary>
		/// NOTIFY_FLG : notification at home page
		/// 		/// NULL
		/// 		/// 1  mail
		/// 		/// 2  SMS
		/// </summary>
		public System.Int16?		  NotifyFlg = null;
		
		/// <summary>
		/// INBOX_FLG : appear in inbox
		/// </summary>
		public System.Boolean?		  InboxFlg = null;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// MSG_TMPLT_FLG : 1: applicant
		/// 		/// 2: student
		/// 		/// 
		/// </summary>
		public System.Int16?		  MsgTmpltFlg = null;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private SeCodeUserType _seCodeUserTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeCodeUserType"/>.
		/// </summary>
		/// <value>The source SeCodeUserType for SeCodeUserTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeCodeUserType SeCodeUserTypeIdSource
      	{
            get { return this._seCodeUserTypeIdSource; }
            set { this._seCodeUserTypeIdSource = value; }
      	}
		private SvAutoMsgTmplt _svAutoMsgTmpltIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SvAutoMsgTmplt"/>.
		/// </summary>
		/// <value>The source SvAutoMsgTmplt for SvAutoMsgTmpltId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SvAutoMsgTmplt SvAutoMsgTmpltIdSource
      	{
            get { return this._svAutoMsgTmpltIdSource; }
            set { this._svAutoMsgTmpltIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region SvMessageCollection
		
		private TList<SvMessage> _svMessageSvAutoMsgTmpltId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _svMessageSvAutoMsgTmpltId
		/// </summary>
		
		public TList<SvMessage> SvMessageCollection
		{
			get
			{
				if (_svMessageSvAutoMsgTmpltId == null)
				{
				_svMessageSvAutoMsgTmpltId = new TList<SvMessage>();
				}
	
				return _svMessageSvAutoMsgTmpltId;
			}
			set { _svMessageSvAutoMsgTmpltId = value; }
		}
		
		#endregion

		#region AdmCdeAppStatusCollection
		
		private TList<AdmCdeAppStatus> _admCdeAppStatusSvAutoMsgTmpltId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admCdeAppStatusSvAutoMsgTmpltId
		/// </summary>
		
		public TList<AdmCdeAppStatus> AdmCdeAppStatusCollection
		{
			get
			{
				if (_admCdeAppStatusSvAutoMsgTmpltId == null)
				{
				_admCdeAppStatusSvAutoMsgTmpltId = new TList<AdmCdeAppStatus>();
				}
	
				return _admCdeAppStatusSvAutoMsgTmpltId;
			}
			set { _admCdeAppStatusSvAutoMsgTmpltId = value; }
		}
		
		#endregion

		#region AdmCdeStatusCollection
		
		private TList<AdmCdeStatus> _admCdeStatusSvAutoMsgTmpltId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _admCdeStatusSvAutoMsgTmpltId
		/// </summary>
		
		public TList<AdmCdeStatus> AdmCdeStatusCollection
		{
			get
			{
				if (_admCdeStatusSvAutoMsgTmpltId == null)
				{
				_admCdeStatusSvAutoMsgTmpltId = new TList<AdmCdeStatus>();
				}
	
				return _admCdeStatusSvAutoMsgTmpltId;
			}
			set { _admCdeStatusSvAutoMsgTmpltId = value; }
		}
		
		#endregion

		#region SvAutoMsgTmplt
		
		private SvAutoMsgTmplt _svAutoMsgTmpltSvAutoMsgTmpltId;
		
		/// <summary>
		///	Holds a  SvAutoMsgTmplt entity object
		///	which is related to this object through the relation _svAutoMsgTmpltSvAutoMsgTmpltId
		/// </summary>
		
		public SvAutoMsgTmplt SvAutoMsgTmplt
		{
			get {		return _svAutoMsgTmpltSvAutoMsgTmpltId;		}
			set { 	_svAutoMsgTmpltSvAutoMsgTmpltId = value; 	}
		}
		
		#endregion 

		#region SvMsgTmpltParamCollection
		
		private TList<SvMsgTmpltParam> _svMsgTmpltParamSvAutoMsgTmpltId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _svMsgTmpltParamSvAutoMsgTmpltId
		/// </summary>
		
		public TList<SvMsgTmpltParam> SvMsgTmpltParamCollection
		{
			get
			{
				if (_svMsgTmpltParamSvAutoMsgTmpltId == null)
				{
				_svMsgTmpltParamSvAutoMsgTmpltId = new TList<SvMsgTmpltParam>();
				}
	
				return _svMsgTmpltParamSvAutoMsgTmpltId;
			}
			set { _svMsgTmpltParamSvAutoMsgTmpltId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SvAutoMsgTmpltEntityData _tmp = new SvAutoMsgTmpltEntityData();
						
			_tmp.SvAutoMsgTmpltId = this.SvAutoMsgTmpltId;
			_tmp.OriginalSvAutoMsgTmpltId = this.OriginalSvAutoMsgTmpltId;
			
			_tmp.SeCodeUserTypeId = this.SeCodeUserTypeId;
			_tmp.MsgType = this.MsgType;
			_tmp.MsgTitleAr = this.MsgTitleAr;
			_tmp.MsgTitleEn = this.MsgTitleEn;
			_tmp.MsgBodyAr = this.MsgBodyAr;
			_tmp.MsgBodyEn = this.MsgBodyEn;
			_tmp.NotifyFlg = this.NotifyFlg;
			_tmp.InboxFlg = this.InboxFlg;
			_tmp.Notes = this.Notes;
			_tmp.MsgTmpltFlg = this.MsgTmpltFlg;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.SeCodeUserTypeIdSource != null)
				_tmp.SeCodeUserTypeIdSource = MakeCopyOf(this.SeCodeUserTypeIdSource) as SeCodeUserType;
			if (this.SvAutoMsgTmpltIdSource != null)
				_tmp.SvAutoMsgTmpltIdSource = MakeCopyOf(this.SvAutoMsgTmpltIdSource) as SvAutoMsgTmplt;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._svMessageSvAutoMsgTmpltId != null)
				_tmp.SvMessageCollection = (TList<SvMessage>) MakeCopyOf(this.SvMessageCollection); 
			if (this._admCdeAppStatusSvAutoMsgTmpltId != null)
				_tmp.AdmCdeAppStatusCollection = (TList<AdmCdeAppStatus>) MakeCopyOf(this.AdmCdeAppStatusCollection); 
			if (this._admCdeStatusSvAutoMsgTmpltId != null)
				_tmp.AdmCdeStatusCollection = (TList<AdmCdeStatus>) MakeCopyOf(this.AdmCdeStatusCollection); 
			if (this._svAutoMsgTmpltSvAutoMsgTmpltId != null)
				_tmp.SvAutoMsgTmplt = (SvAutoMsgTmplt) MakeCopyOf(this.SvAutoMsgTmplt); 
			if (this._svMsgTmpltParamSvAutoMsgTmpltId != null)
				_tmp.SvMsgTmpltParamCollection = (TList<SvMsgTmpltParam>) MakeCopyOf(this.SvMsgTmpltParamCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SvAutoMsgTmpltEntityData _tmp = new SvAutoMsgTmpltEntityData();
						
			_tmp.SvAutoMsgTmpltId = this.SvAutoMsgTmpltId;
			_tmp.OriginalSvAutoMsgTmpltId = this.OriginalSvAutoMsgTmpltId;
			
			_tmp.SeCodeUserTypeId = this.SeCodeUserTypeId;
			_tmp.MsgType = this.MsgType;
			_tmp.MsgTitleAr = this.MsgTitleAr;
			_tmp.MsgTitleEn = this.MsgTitleEn;
			_tmp.MsgBodyAr = this.MsgBodyAr;
			_tmp.MsgBodyEn = this.MsgBodyEn;
			_tmp.NotifyFlg = this.NotifyFlg;
			_tmp.InboxFlg = this.InboxFlg;
			_tmp.Notes = this.Notes;
			_tmp.MsgTmpltFlg = this.MsgTmpltFlg;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.SeCodeUserTypeIdSource != null && existingCopies.Contains(this.SeCodeUserTypeIdSource))
				_tmp.SeCodeUserTypeIdSource = existingCopies[this.SeCodeUserTypeIdSource] as SeCodeUserType;
			else
				_tmp.SeCodeUserTypeIdSource = MakeCopyOf(this.SeCodeUserTypeIdSource, existingCopies) as SeCodeUserType;
			if (this.SvAutoMsgTmpltIdSource != null && existingCopies.Contains(this.SvAutoMsgTmpltIdSource))
				_tmp.SvAutoMsgTmpltIdSource = existingCopies[this.SvAutoMsgTmpltIdSource] as SvAutoMsgTmplt;
			else
				_tmp.SvAutoMsgTmpltIdSource = MakeCopyOf(this.SvAutoMsgTmpltIdSource, existingCopies) as SvAutoMsgTmplt;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.SvMessageCollection = (TList<SvMessage>) MakeCopyOf(this.SvMessageCollection, existingCopies); 
			_tmp.AdmCdeAppStatusCollection = (TList<AdmCdeAppStatus>) MakeCopyOf(this.AdmCdeAppStatusCollection, existingCopies); 
			_tmp.AdmCdeStatusCollection = (TList<AdmCdeStatus>) MakeCopyOf(this.AdmCdeStatusCollection, existingCopies); 
			_tmp.SvAutoMsgTmplt = (SvAutoMsgTmplt) MakeCopyOf(this.SvAutoMsgTmplt, existingCopies); 
			_tmp.SvMsgTmpltParamCollection = (TList<SvMsgTmpltParam>) MakeCopyOf(this.SvMsgTmpltParamCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvAutoMsgTmpltColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SvAutoMsgTmpltColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvAutoMsgTmpltColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SvAutoMsgTmpltColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvAutoMsgTmpltColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SvAutoMsgTmpltColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SvAutoMsgTmpltEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SvAutoMsgTmpltEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SvAutoMsgTmpltColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SvAutoMsgTmpltColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SvAutoMsgTmpltEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SvAutoMsgTmpltEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SvAutoMsgTmpltEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SvAutoMsgTmplt"/> object.
	/// </remarks>
	public class SvAutoMsgTmpltEventArgs : System.EventArgs
	{
		private SvAutoMsgTmpltColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SvAutoMsgTmpltEventArgs class.
		///</summary>
		public SvAutoMsgTmpltEventArgs(SvAutoMsgTmpltColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SvAutoMsgTmpltEventArgs class.
		///</summary>
		public SvAutoMsgTmpltEventArgs(SvAutoMsgTmpltColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SvAutoMsgTmpltColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SvAutoMsgTmpltColumn" />
		public SvAutoMsgTmpltColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SvAutoMsgTmplt related events.
	///</summary>
	public delegate void SvAutoMsgTmpltEventHandler(object sender, SvAutoMsgTmpltEventArgs e);
	
	#region SvAutoMsgTmpltComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SvAutoMsgTmpltComparer : System.Collections.Generic.IComparer<SvAutoMsgTmplt>
	{
		SvAutoMsgTmpltColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SvAutoMsgTmpltComparer"/> class.
        /// </summary>
		public SvAutoMsgTmpltComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SvAutoMsgTmpltComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SvAutoMsgTmpltComparer(SvAutoMsgTmpltColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SvAutoMsgTmplt"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SvAutoMsgTmplt"/> to compare.</param>
        /// <param name="b">The second <c>SvAutoMsgTmplt</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SvAutoMsgTmplt a, SvAutoMsgTmplt b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SvAutoMsgTmplt entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SvAutoMsgTmplt a, SvAutoMsgTmplt b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SvAutoMsgTmpltColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SvAutoMsgTmpltKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SvAutoMsgTmplt"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SvAutoMsgTmpltKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SvAutoMsgTmpltKey class.
		/// </summary>
		public SvAutoMsgTmpltKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SvAutoMsgTmpltKey class.
		/// </summary>
		public SvAutoMsgTmpltKey(SvAutoMsgTmpltBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SvAutoMsgTmpltId = entity.SvAutoMsgTmpltId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SvAutoMsgTmpltKey class.
		/// </summary>
		public SvAutoMsgTmpltKey(System.Decimal _svAutoMsgTmpltId)
		{
			#region Init Properties

			this.SvAutoMsgTmpltId = _svAutoMsgTmpltId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SvAutoMsgTmpltBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SvAutoMsgTmpltBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SvAutoMsgTmpltId property
		private System.Decimal _svAutoMsgTmpltId;
		
		/// <summary>
		/// Gets or sets the SvAutoMsgTmpltId property.
		/// </summary>
		public System.Decimal SvAutoMsgTmpltId
		{
			get { return _svAutoMsgTmpltId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SvAutoMsgTmpltId = value;
				
				_svAutoMsgTmpltId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SvAutoMsgTmpltId = ( values["SvAutoMsgTmpltId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["SvAutoMsgTmpltId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SvAutoMsgTmpltId", SvAutoMsgTmpltId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SvAutoMsgTmpltId: {0}{1}",
								SvAutoMsgTmpltId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SvAutoMsgTmpltColumn Enum
	
	/// <summary>
	/// Enumerate the SvAutoMsgTmplt columns.
	/// </summary>
	[Serializable]
	public enum SvAutoMsgTmpltColumn : int
	{
		/// <summary>
		/// SvAutoMsgTmpltId : 
		/// </summary>
		[EnumTextValue("SV_AUTO_MSG_TMPLT_ID")]
		[ColumnEnum("SV_AUTO_MSG_TMPLT_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		SvAutoMsgTmpltId = 1,
		/// <summary>
		/// SeCodeUserTypeId : 
		/// </summary>
		[EnumTextValue("SE_CODE_USER_TYPE_ID")]
		[ColumnEnum("SE_CODE_USER_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeCodeUserTypeId = 2,
		/// <summary>
		/// MsgType : 
		/// </summary>
		[EnumTextValue("MSG_TYPE")]
		[ColumnEnum("MSG_TYPE", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		MsgType = 3,
		/// <summary>
		/// MsgTitleAr : 
		/// </summary>
		[EnumTextValue("MSG_TITLE_AR")]
		[ColumnEnum("MSG_TITLE_AR", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		MsgTitleAr = 4,
		/// <summary>
		/// MsgTitleEn : 
		/// </summary>
		[EnumTextValue("MSG_TITLE_EN")]
		[ColumnEnum("MSG_TITLE_EN", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		MsgTitleEn = 5,
		/// <summary>
		/// MsgBodyAr : 
		/// </summary>
		[EnumTextValue("MSG_BODY_AR")]
		[ColumnEnum("MSG_BODY_AR", typeof(System.String), System.Data.DbType.String, false, false, false)]
		MsgBodyAr = 6,
		/// <summary>
		/// MsgBodyEn : 
		/// </summary>
		[EnumTextValue("MSG_BODY_EN")]
		[ColumnEnum("MSG_BODY_EN", typeof(System.String), System.Data.DbType.String, false, false, false)]
		MsgBodyEn = 7,
		/// <summary>
		/// NotifyFlg : notification at home page
		/// 		/// NULL
		/// 		/// 1  mail
		/// 		/// 2  SMS
		/// </summary>
		[EnumTextValue("NOTIFY_FLG")]
		[ColumnEnum("NOTIFY_FLG", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		NotifyFlg = 8,
		/// <summary>
		/// InboxFlg : appear in inbox
		/// </summary>
		[EnumTextValue("INBOX_FLG")]
		[ColumnEnum("INBOX_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		InboxFlg = 9,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		Notes = 10,
		/// <summary>
		/// MsgTmpltFlg : 1: applicant
		/// 		/// 2: student
		/// 		/// 
		/// </summary>
		[EnumTextValue("MSG_TMPLT_FLG")]
		[ColumnEnum("MSG_TMPLT_FLG", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		MsgTmpltFlg = 11,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 12
	}//End enum

	#endregion SvAutoMsgTmpltColumn Enum

} // end namespace
