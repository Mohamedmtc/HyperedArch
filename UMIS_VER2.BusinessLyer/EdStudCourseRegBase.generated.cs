
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdStudCourseReg.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_STUD_COURSE_REG' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdStudCourseRegBase : EntityBase, IEdStudCourseReg, IEntityId<EdStudCourseRegKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdStudCourseRegEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdStudCourseRegEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdStudCourseRegEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdStudCourseReg> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudCourseRegEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdStudCourseRegEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdStudCourseRegBase"/> instance.
		///</summary>
		public EdStudCourseRegBase()
		{
			this.entityData = new EdStudCourseRegEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdStudCourseRegBase"/> instance.
		///</summary>
		///<param name="_edStudCourseRegId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_regDate"></param>
		///<param name="_auditFlg"></param>
		///<param name="_repeatFlg"></param>
		///<param name="_isLast"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_edCodeCourseStatusId"></param>
		///<param name="_edCodeGradingId"></param>
		///<param name="_courseDegree"></param>
		///<param name="_coursePoint"></param>
		///<param name="_entPolicyGradingHdrId"></param>
		///<param name="_gsCodePassFailId"></param>
		///<param name="_edStudSemesterId"></param>
		///<param name="_addGpaFlg">=0 not calculated --- =1 calculate course in gpa&CH ---2 Calculated in CH only</param>
		///<param name="_entPolicyAssessHdrId"></param>
		///<param name="_incompFlg"></param>
		///<param name="_hideFlg">set 1 when this record is locked in rasd for staff view</param>
		///<param name="_hideReason">reason of lock</param>
		///<param name="_edCourseSubId">XX not used </param>
		///<param name="_lastDate"></param>
		///<param name="_seFormId"></param>
		///<param name="_seUserId"></param>
		///<param name="_isResultApproved">اعتماد نتيجة مقرر</param>
		///<param name="_repeatNo">RETAKE_NO
		/// 		/// 0 > no retake
		/// 		/// 1 > retake passed course
		/// 		/// 2 > retake failed course
		/// 		/// 
		/// 		/// any course could be retaked once</param>
		///<param name="_payFlg"></param>
		///<param name="_payAmount"></param>
		///<param name="_absFlg"></param>
		///<param name="_receiptNo"></param>
		///<param name="_receiptDate"></param>
		///<param name="_byforceFlg"></param>
		///<param name="_edCdeCrsRegTypeId"></param>
		///<param name="_entCoursePkgDtlId"></param>
		///<param name="_edAcadPlanDtlId"></param>
		///<param name="_notes"></param>
		///<param name="_seUserApproveId">Result Approved</param>
		///<param name="_crsRaiseMark">الدرجة المرفوعه</param>
		///<param name="_crsCh"></param>
		///<param name="_audtNote"></param>
		///<param name="_scSectionGroupHdrId">مجموعة سكاشن المقرر</param>
		///<param name="_edCourseOrgId"></param>
		///<param name="_edCdeExamTypeId">نوع الامتحان: تكميلى- اعادة</param>
		///<param name="_isLastYear"></param>
		///<param name="_retakeFlg"></param>
		///<param name="_edCodeCourseCaseId"></param>
		public EdStudCourseRegBase(System.Decimal _edStudCourseRegId, System.Decimal _edCourseId, 
			System.DateTime? _regDate, System.Decimal _auditFlg, System.Decimal _repeatFlg, 
			System.Decimal _isLast, System.Decimal? _asFacultyInfoId, System.Decimal? _edCodeCourseStatusId, 
			System.Decimal? _edCodeGradingId, System.Decimal? _courseDegree, System.Decimal? _coursePoint, 
			System.Decimal? _entPolicyGradingHdrId, System.Decimal? _gsCodePassFailId, System.Decimal _edStudSemesterId, 
			System.Decimal _addGpaFlg, System.Decimal? _entPolicyAssessHdrId, System.Decimal _incompFlg, 
			System.Decimal _hideFlg, System.String _hideReason, System.Decimal? _edCourseSubId, 
			System.DateTime? _lastDate, System.Decimal? _seFormId, System.Decimal? _seUserId, 
			System.Decimal? _isResultApproved, System.Decimal? _repeatNo, System.Decimal? _payFlg, 
			System.Decimal? _payAmount, System.Decimal? _absFlg, System.String _receiptNo, 
			System.DateTime? _receiptDate, System.Decimal? _byforceFlg, System.Decimal? _edCdeCrsRegTypeId, 
			System.Decimal? _entCoursePkgDtlId, System.Decimal? _edAcadPlanDtlId, System.String _notes, 
			System.Decimal? _seUserApproveId, System.Decimal? _crsRaiseMark, System.Int32? _crsCh, 
			System.String _audtNote, System.Decimal? _scSectionGroupHdrId, System.Decimal? _edCourseOrgId, 
			System.Decimal? _edCdeExamTypeId, System.Boolean? _isLastYear, System.Int16? _retakeFlg, 
			System.Int32? _edCodeCourseCaseId)
		{
			this.entityData = new EdStudCourseRegEntityData();
			this.backupData = null;

			this.EdStudCourseRegId = _edStudCourseRegId;
			this.EdCourseId = _edCourseId;
			this.RegDate = _regDate;
			this.AuditFlg = _auditFlg;
			this.RepeatFlg = _repeatFlg;
			this.IsLast = _isLast;
			this.AsFacultyInfoId = _asFacultyInfoId;
			this.EdCodeCourseStatusId = _edCodeCourseStatusId;
			this.EdCodeGradingId = _edCodeGradingId;
			this.CourseDegree = _courseDegree;
			this.CoursePoint = _coursePoint;
			this.EntPolicyGradingHdrId = _entPolicyGradingHdrId;
			this.GsCodePassFailId = _gsCodePassFailId;
			this.EdStudSemesterId = _edStudSemesterId;
			this.AddGpaFlg = _addGpaFlg;
			this.EntPolicyAssessHdrId = _entPolicyAssessHdrId;
			this.IncompFlg = _incompFlg;
			this.HideFlg = _hideFlg;
			this.HideReason = _hideReason;
			this.EdCourseSubId = _edCourseSubId;
			this.LastDate = _lastDate;
			this.SeFormId = _seFormId;
			this.SeUserId = _seUserId;
			this.IsResultApproved = _isResultApproved;
			this.RepeatNo = _repeatNo;
			this.PayFlg = _payFlg;
			this.PayAmount = _payAmount;
			this.AbsFlg = _absFlg;
			this.ReceiptNo = _receiptNo;
			this.ReceiptDate = _receiptDate;
			this.ByforceFlg = _byforceFlg;
			this.EdCdeCrsRegTypeId = _edCdeCrsRegTypeId;
			this.EntCoursePkgDtlId = _entCoursePkgDtlId;
			this.EdAcadPlanDtlId = _edAcadPlanDtlId;
			this.Notes = _notes;
			this.SeUserApproveId = _seUserApproveId;
			this.CrsRaiseMark = _crsRaiseMark;
			this.CrsCh = _crsCh;
			this.AudtNote = _audtNote;
			this.ScSectionGroupHdrId = _scSectionGroupHdrId;
			this.EdCourseOrgId = _edCourseOrgId;
			this.EdCdeExamTypeId = _edCdeExamTypeId;
			this.IsLastYear = _isLastYear;
			this.RetakeFlg = _retakeFlg;
			this.EdCodeCourseCaseId = _edCodeCourseCaseId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdStudCourseReg"/> instance.
		///</summary>
		///<param name="_edStudCourseRegId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_regDate"></param>
		///<param name="_auditFlg"></param>
		///<param name="_repeatFlg"></param>
		///<param name="_isLast"></param>
		///<param name="_asFacultyInfoId"></param>
		///<param name="_edCodeCourseStatusId"></param>
		///<param name="_edCodeGradingId"></param>
		///<param name="_courseDegree"></param>
		///<param name="_coursePoint"></param>
		///<param name="_entPolicyGradingHdrId"></param>
		///<param name="_gsCodePassFailId"></param>
		///<param name="_edStudSemesterId"></param>
		///<param name="_addGpaFlg">=0 not calculated --- =1 calculate course in gpa&CH ---2 Calculated in CH only</param>
		///<param name="_entPolicyAssessHdrId"></param>
		///<param name="_incompFlg"></param>
		///<param name="_hideFlg">set 1 when this record is locked in rasd for staff view</param>
		///<param name="_hideReason">reason of lock</param>
		///<param name="_edCourseSubId">XX not used </param>
		///<param name="_lastDate"></param>
		///<param name="_seFormId"></param>
		///<param name="_seUserId"></param>
		///<param name="_isResultApproved">اعتماد نتيجة مقرر</param>
		///<param name="_repeatNo">RETAKE_NO
		/// 		/// 0 > no retake
		/// 		/// 1 > retake passed course
		/// 		/// 2 > retake failed course
		/// 		/// 
		/// 		/// any course could be retaked once</param>
		///<param name="_payFlg"></param>
		///<param name="_payAmount"></param>
		///<param name="_absFlg"></param>
		///<param name="_receiptNo"></param>
		///<param name="_receiptDate"></param>
		///<param name="_byforceFlg"></param>
		///<param name="_edCdeCrsRegTypeId"></param>
		///<param name="_entCoursePkgDtlId"></param>
		///<param name="_edAcadPlanDtlId"></param>
		///<param name="_notes"></param>
		///<param name="_seUserApproveId">Result Approved</param>
		///<param name="_crsRaiseMark">الدرجة المرفوعه</param>
		///<param name="_crsCh"></param>
		///<param name="_audtNote"></param>
		///<param name="_scSectionGroupHdrId">مجموعة سكاشن المقرر</param>
		///<param name="_edCourseOrgId"></param>
		///<param name="_edCdeExamTypeId">نوع الامتحان: تكميلى- اعادة</param>
		///<param name="_isLastYear"></param>
		///<param name="_retakeFlg"></param>
		///<param name="_edCodeCourseCaseId"></param>
		public static EdStudCourseReg CreateEdStudCourseReg(System.Decimal _edStudCourseRegId, System.Decimal _edCourseId, 
			System.DateTime? _regDate, System.Decimal _auditFlg, System.Decimal _repeatFlg, 
			System.Decimal _isLast, System.Decimal? _asFacultyInfoId, System.Decimal? _edCodeCourseStatusId, 
			System.Decimal? _edCodeGradingId, System.Decimal? _courseDegree, System.Decimal? _coursePoint, 
			System.Decimal? _entPolicyGradingHdrId, System.Decimal? _gsCodePassFailId, System.Decimal _edStudSemesterId, 
			System.Decimal _addGpaFlg, System.Decimal? _entPolicyAssessHdrId, System.Decimal _incompFlg, 
			System.Decimal _hideFlg, System.String _hideReason, System.Decimal? _edCourseSubId, 
			System.DateTime? _lastDate, System.Decimal? _seFormId, System.Decimal? _seUserId, 
			System.Decimal? _isResultApproved, System.Decimal? _repeatNo, System.Decimal? _payFlg, 
			System.Decimal? _payAmount, System.Decimal? _absFlg, System.String _receiptNo, 
			System.DateTime? _receiptDate, System.Decimal? _byforceFlg, System.Decimal? _edCdeCrsRegTypeId, 
			System.Decimal? _entCoursePkgDtlId, System.Decimal? _edAcadPlanDtlId, System.String _notes, 
			System.Decimal? _seUserApproveId, System.Decimal? _crsRaiseMark, System.Int32? _crsCh, 
			System.String _audtNote, System.Decimal? _scSectionGroupHdrId, System.Decimal? _edCourseOrgId, 
			System.Decimal? _edCdeExamTypeId, System.Boolean? _isLastYear, System.Int16? _retakeFlg, 
			System.Int32? _edCodeCourseCaseId)
		{
			EdStudCourseReg newEdStudCourseReg = new EdStudCourseReg();
			newEdStudCourseReg.EdStudCourseRegId = _edStudCourseRegId;
			newEdStudCourseReg.EdCourseId = _edCourseId;
			newEdStudCourseReg.RegDate = _regDate;
			newEdStudCourseReg.AuditFlg = _auditFlg;
			newEdStudCourseReg.RepeatFlg = _repeatFlg;
			newEdStudCourseReg.IsLast = _isLast;
			newEdStudCourseReg.AsFacultyInfoId = _asFacultyInfoId;
			newEdStudCourseReg.EdCodeCourseStatusId = _edCodeCourseStatusId;
			newEdStudCourseReg.EdCodeGradingId = _edCodeGradingId;
			newEdStudCourseReg.CourseDegree = _courseDegree;
			newEdStudCourseReg.CoursePoint = _coursePoint;
			newEdStudCourseReg.EntPolicyGradingHdrId = _entPolicyGradingHdrId;
			newEdStudCourseReg.GsCodePassFailId = _gsCodePassFailId;
			newEdStudCourseReg.EdStudSemesterId = _edStudSemesterId;
			newEdStudCourseReg.AddGpaFlg = _addGpaFlg;
			newEdStudCourseReg.EntPolicyAssessHdrId = _entPolicyAssessHdrId;
			newEdStudCourseReg.IncompFlg = _incompFlg;
			newEdStudCourseReg.HideFlg = _hideFlg;
			newEdStudCourseReg.HideReason = _hideReason;
			newEdStudCourseReg.EdCourseSubId = _edCourseSubId;
			newEdStudCourseReg.LastDate = _lastDate;
			newEdStudCourseReg.SeFormId = _seFormId;
			newEdStudCourseReg.SeUserId = _seUserId;
			newEdStudCourseReg.IsResultApproved = _isResultApproved;
			newEdStudCourseReg.RepeatNo = _repeatNo;
			newEdStudCourseReg.PayFlg = _payFlg;
			newEdStudCourseReg.PayAmount = _payAmount;
			newEdStudCourseReg.AbsFlg = _absFlg;
			newEdStudCourseReg.ReceiptNo = _receiptNo;
			newEdStudCourseReg.ReceiptDate = _receiptDate;
			newEdStudCourseReg.ByforceFlg = _byforceFlg;
			newEdStudCourseReg.EdCdeCrsRegTypeId = _edCdeCrsRegTypeId;
			newEdStudCourseReg.EntCoursePkgDtlId = _entCoursePkgDtlId;
			newEdStudCourseReg.EdAcadPlanDtlId = _edAcadPlanDtlId;
			newEdStudCourseReg.Notes = _notes;
			newEdStudCourseReg.SeUserApproveId = _seUserApproveId;
			newEdStudCourseReg.CrsRaiseMark = _crsRaiseMark;
			newEdStudCourseReg.CrsCh = _crsCh;
			newEdStudCourseReg.AudtNote = _audtNote;
			newEdStudCourseReg.ScSectionGroupHdrId = _scSectionGroupHdrId;
			newEdStudCourseReg.EdCourseOrgId = _edCourseOrgId;
			newEdStudCourseReg.EdCdeExamTypeId = _edCdeExamTypeId;
			newEdStudCourseReg.IsLastYear = _isLastYear;
			newEdStudCourseReg.RetakeFlg = _retakeFlg;
			newEdStudCourseReg.EdCodeCourseCaseId = _edCodeCourseCaseId;
			return newEdStudCourseReg;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdStudCourseRegId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdStudCourseRegId
		{
			get
			{
				return this.entityData.EdStudCourseRegId; 
			}
			
			set
			{
				if (this.entityData.EdStudCourseRegId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.EdStudCourseRegId, this.entityData.EdStudCourseRegId);
				this.entityData.EdStudCourseRegId = value;
				this.EntityId.EdStudCourseRegId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.EdStudCourseRegId, this.entityData.EdStudCourseRegId);
				OnPropertyChanged("EdStudCourseRegId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_STUD_COURSE_REG_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ED_STUD_COURSE_REG_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdStudCourseRegId
		{
			get { return this.entityData.OriginalEdStudCourseRegId; }
			set { this.entityData.OriginalEdStudCourseRegId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdCourseId
		{
			get
			{
				return this.entityData.EdCourseId; 
			}
			
			set
			{
				if (this.entityData.EdCourseId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.EdCourseId, this.entityData.EdCourseId);
				this.entityData.EdCourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.EdCourseId, this.entityData.EdCourseId);
				OnPropertyChanged("EdCourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RegDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsRegDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? RegDate
		{
			get
			{
				return this.entityData.RegDate; 
			}
			
			set
			{
				if (this.entityData.RegDate == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.RegDate, this.entityData.RegDate);
				this.entityData.RegDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.RegDate, this.entityData.RegDate);
				OnPropertyChanged("RegDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AuditFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AuditFlg
		{
			get
			{
				return this.entityData.AuditFlg; 
			}
			
			set
			{
				if (this.entityData.AuditFlg == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.AuditFlg, this.entityData.AuditFlg);
				this.entityData.AuditFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.AuditFlg, this.entityData.AuditFlg);
				OnPropertyChanged("AuditFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RepeatFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal RepeatFlg
		{
			get
			{
				return this.entityData.RepeatFlg; 
			}
			
			set
			{
				if (this.entityData.RepeatFlg == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.RepeatFlg, this.entityData.RepeatFlg);
				this.entityData.RepeatFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.RepeatFlg, this.entityData.RepeatFlg);
				OnPropertyChanged("RepeatFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsLast property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IsLast
		{
			get
			{
				return this.entityData.IsLast; 
			}
			
			set
			{
				if (this.entityData.IsLast == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.IsLast, this.entityData.IsLast);
				this.entityData.IsLast = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.IsLast, this.entityData.IsLast);
				OnPropertyChanged("IsLast");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsFacultyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAsFacultyInfoIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AsFacultyInfoId
		{
			get
			{
				return this.entityData.AsFacultyInfoId; 
			}
			
			set
			{
				if (this.entityData.AsFacultyInfoId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				this.entityData.AsFacultyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.AsFacultyInfoId, this.entityData.AsFacultyInfoId);
				OnPropertyChanged("AsFacultyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeCourseStatusId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeCourseStatusIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeCourseStatusId
		{
			get
			{
				return this.entityData.EdCodeCourseStatusId; 
			}
			
			set
			{
				if (this.entityData.EdCodeCourseStatusId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.EdCodeCourseStatusId, this.entityData.EdCodeCourseStatusId);
				this.entityData.EdCodeCourseStatusId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.EdCodeCourseStatusId, this.entityData.EdCodeCourseStatusId);
				OnPropertyChanged("EdCodeCourseStatusId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeGradingId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCodeGradingIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCodeGradingId
		{
			get
			{
				return this.entityData.EdCodeGradingId; 
			}
			
			set
			{
				if (this.entityData.EdCodeGradingId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.EdCodeGradingId, this.entityData.EdCodeGradingId);
				this.entityData.EdCodeGradingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.EdCodeGradingId, this.entityData.EdCodeGradingId);
				OnPropertyChanged("EdCodeGradingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CourseDegree property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCourseDegreeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CourseDegree
		{
			get
			{
				return this.entityData.CourseDegree; 
			}
			
			set
			{
				if (this.entityData.CourseDegree == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.CourseDegree, this.entityData.CourseDegree);
				this.entityData.CourseDegree = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.CourseDegree, this.entityData.CourseDegree);
				OnPropertyChanged("CourseDegree");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CoursePoint property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCoursePointNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CoursePoint
		{
			get
			{
				return this.entityData.CoursePoint; 
			}
			
			set
			{
				if (this.entityData.CoursePoint == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.CoursePoint, this.entityData.CoursePoint);
				this.entityData.CoursePoint = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.CoursePoint, this.entityData.CoursePoint);
				OnPropertyChanged("CoursePoint");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntPolicyGradingHdrId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntPolicyGradingHdrIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntPolicyGradingHdrId
		{
			get
			{
				return this.entityData.EntPolicyGradingHdrId; 
			}
			
			set
			{
				if (this.entityData.EntPolicyGradingHdrId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.EntPolicyGradingHdrId, this.entityData.EntPolicyGradingHdrId);
				this.entityData.EntPolicyGradingHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.EntPolicyGradingHdrId, this.entityData.EntPolicyGradingHdrId);
				OnPropertyChanged("EntPolicyGradingHdrId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GsCodePassFailId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsGsCodePassFailIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? GsCodePassFailId
		{
			get
			{
				return this.entityData.GsCodePassFailId; 
			}
			
			set
			{
				if (this.entityData.GsCodePassFailId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.GsCodePassFailId, this.entityData.GsCodePassFailId);
				this.entityData.GsCodePassFailId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.GsCodePassFailId, this.entityData.GsCodePassFailId);
				OnPropertyChanged("GsCodePassFailId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdStudSemesterId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdStudSemesterId
		{
			get
			{
				return this.entityData.EdStudSemesterId; 
			}
			
			set
			{
				if (this.entityData.EdStudSemesterId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.EdStudSemesterId, this.entityData.EdStudSemesterId);
				this.entityData.EdStudSemesterId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.EdStudSemesterId, this.entityData.EdStudSemesterId);
				OnPropertyChanged("EdStudSemesterId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AddGpaFlg property. 
		///		=0 not calculated --- =1 calculate course in gpa&CH ---2 Calculated in CH only
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"=0 not calculated --- =1 calculate course in gpa&CH ---2 Calculated in CH only"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AddGpaFlg
		{
			get
			{
				return this.entityData.AddGpaFlg; 
			}
			
			set
			{
				if (this.entityData.AddGpaFlg == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.AddGpaFlg, this.entityData.AddGpaFlg);
				this.entityData.AddGpaFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.AddGpaFlg, this.entityData.AddGpaFlg);
				OnPropertyChanged("AddGpaFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntPolicyAssessHdrId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntPolicyAssessHdrIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntPolicyAssessHdrId
		{
			get
			{
				return this.entityData.EntPolicyAssessHdrId; 
			}
			
			set
			{
				if (this.entityData.EntPolicyAssessHdrId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.EntPolicyAssessHdrId, this.entityData.EntPolicyAssessHdrId);
				this.entityData.EntPolicyAssessHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.EntPolicyAssessHdrId, this.entityData.EntPolicyAssessHdrId);
				OnPropertyChanged("EntPolicyAssessHdrId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IncompFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal IncompFlg
		{
			get
			{
				return this.entityData.IncompFlg; 
			}
			
			set
			{
				if (this.entityData.IncompFlg == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.IncompFlg, this.entityData.IncompFlg);
				this.entityData.IncompFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.IncompFlg, this.entityData.IncompFlg);
				OnPropertyChanged("IncompFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HideFlg property. 
		///		set 1 when this record is locked in rasd for staff view
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"set 1 when this record is locked in rasd for staff view"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal HideFlg
		{
			get
			{
				return this.entityData.HideFlg; 
			}
			
			set
			{
				if (this.entityData.HideFlg == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.HideFlg, this.entityData.HideFlg);
				this.entityData.HideFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.HideFlg, this.entityData.HideFlg);
				OnPropertyChanged("HideFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HideReason property. 
		///		reason of lock
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"reason of lock"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String HideReason
		{
			get
			{
				return this.entityData.HideReason; 
			}
			
			set
			{
				if (this.entityData.HideReason == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.HideReason, this.entityData.HideReason);
				this.entityData.HideReason = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.HideReason, this.entityData.HideReason);
				OnPropertyChanged("HideReason");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseSubId property. 
		///		XX not used 
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCourseSubIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"XX not used "), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCourseSubId
		{
			get
			{
				return this.entityData.EdCourseSubId; 
			}
			
			set
			{
				if (this.entityData.EdCourseSubId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.EdCourseSubId, this.entityData.EdCourseSubId);
				this.entityData.EdCourseSubId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.EdCourseSubId, this.entityData.EdCourseSubId);
				OnPropertyChanged("EdCourseSubId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeFormId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeFormIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeFormId
		{
			get
			{
				return this.entityData.SeFormId; 
			}
			
			set
			{
				if (this.entityData.SeFormId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.SeFormId, this.entityData.SeFormId);
				this.entityData.SeFormId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.SeFormId, this.entityData.SeFormId);
				OnPropertyChanged("SeFormId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsResultApproved property. 
		///		اعتماد نتيجة مقرر
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsIsResultApprovedNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"اعتماد نتيجة مقرر"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? IsResultApproved
		{
			get
			{
				return this.entityData.IsResultApproved; 
			}
			
			set
			{
				if (this.entityData.IsResultApproved == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.IsResultApproved, this.entityData.IsResultApproved);
				this.entityData.IsResultApproved = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.IsResultApproved, this.entityData.IsResultApproved);
				OnPropertyChanged("IsResultApproved");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RepeatNo property. 
		///		RETAKE_NO
		/// 		/// 0 > no retake
		/// 		/// 1 > retake passed course
		/// 		/// 2 > retake failed course
		/// 		/// 
		/// 		/// any course could be retaked once
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRepeatNoNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"RETAKE_NO 0 > no retake 1 > retake passed course 2 > retake failed course  any course could be retaked once"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RepeatNo
		{
			get
			{
				return this.entityData.RepeatNo; 
			}
			
			set
			{
				if (this.entityData.RepeatNo == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.RepeatNo, this.entityData.RepeatNo);
				this.entityData.RepeatNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.RepeatNo, this.entityData.RepeatNo);
				OnPropertyChanged("RepeatNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PayFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPayFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PayFlg
		{
			get
			{
				return this.entityData.PayFlg; 
			}
			
			set
			{
				if (this.entityData.PayFlg == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.PayFlg, this.entityData.PayFlg);
				this.entityData.PayFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.PayFlg, this.entityData.PayFlg);
				OnPropertyChanged("PayFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PayAmount property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPayAmountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PayAmount
		{
			get
			{
				return this.entityData.PayAmount; 
			}
			
			set
			{
				if (this.entityData.PayAmount == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.PayAmount, this.entityData.PayAmount);
				this.entityData.PayAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.PayAmount, this.entityData.PayAmount);
				OnPropertyChanged("PayAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AbsFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAbsFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AbsFlg
		{
			get
			{
				return this.entityData.AbsFlg; 
			}
			
			set
			{
				if (this.entityData.AbsFlg == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.AbsFlg, this.entityData.AbsFlg);
				this.entityData.AbsFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.AbsFlg, this.entityData.AbsFlg);
				OnPropertyChanged("AbsFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReceiptNo property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String ReceiptNo
		{
			get
			{
				return this.entityData.ReceiptNo; 
			}
			
			set
			{
				if (this.entityData.ReceiptNo == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.ReceiptNo, this.entityData.ReceiptNo);
				this.entityData.ReceiptNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.ReceiptNo, this.entityData.ReceiptNo);
				OnPropertyChanged("ReceiptNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReceiptDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsReceiptDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ReceiptDate
		{
			get
			{
				return this.entityData.ReceiptDate; 
			}
			
			set
			{
				if (this.entityData.ReceiptDate == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.ReceiptDate, this.entityData.ReceiptDate);
				this.entityData.ReceiptDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.ReceiptDate, this.entityData.ReceiptDate);
				OnPropertyChanged("ReceiptDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ByforceFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsByforceFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ByforceFlg
		{
			get
			{
				return this.entityData.ByforceFlg; 
			}
			
			set
			{
				if (this.entityData.ByforceFlg == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.ByforceFlg, this.entityData.ByforceFlg);
				this.entityData.ByforceFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.ByforceFlg, this.entityData.ByforceFlg);
				OnPropertyChanged("ByforceFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCdeCrsRegTypeId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCdeCrsRegTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCdeCrsRegTypeId
		{
			get
			{
				return this.entityData.EdCdeCrsRegTypeId; 
			}
			
			set
			{
				if (this.entityData.EdCdeCrsRegTypeId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.EdCdeCrsRegTypeId, this.entityData.EdCdeCrsRegTypeId);
				this.entityData.EdCdeCrsRegTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.EdCdeCrsRegTypeId, this.entityData.EdCdeCrsRegTypeId);
				OnPropertyChanged("EdCdeCrsRegTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntCoursePkgDtlId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntCoursePkgDtlIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntCoursePkgDtlId
		{
			get
			{
				return this.entityData.EntCoursePkgDtlId; 
			}
			
			set
			{
				if (this.entityData.EntCoursePkgDtlId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.EntCoursePkgDtlId, this.entityData.EntCoursePkgDtlId);
				this.entityData.EntCoursePkgDtlId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.EntCoursePkgDtlId, this.entityData.EntCoursePkgDtlId);
				OnPropertyChanged("EntCoursePkgDtlId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadPlanDtlId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdAcadPlanDtlIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdAcadPlanDtlId
		{
			get
			{
				return this.entityData.EdAcadPlanDtlId; 
			}
			
			set
			{
				if (this.entityData.EdAcadPlanDtlId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.EdAcadPlanDtlId, this.entityData.EdAcadPlanDtlId);
				this.entityData.EdAcadPlanDtlId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.EdAcadPlanDtlId, this.entityData.EdAcadPlanDtlId);
				OnPropertyChanged("EdAcadPlanDtlId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 130)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserApproveId property. 
		///		Result Approved
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserApproveIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"Result Approved"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserApproveId
		{
			get
			{
				return this.entityData.SeUserApproveId; 
			}
			
			set
			{
				if (this.entityData.SeUserApproveId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.SeUserApproveId, this.entityData.SeUserApproveId);
				this.entityData.SeUserApproveId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.SeUserApproveId, this.entityData.SeUserApproveId);
				OnPropertyChanged("SeUserApproveId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CrsRaiseMark property. 
		///		الدرجة المرفوعه
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCrsRaiseMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"الدرجة المرفوعه"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CrsRaiseMark
		{
			get
			{
				return this.entityData.CrsRaiseMark; 
			}
			
			set
			{
				if (this.entityData.CrsRaiseMark == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.CrsRaiseMark, this.entityData.CrsRaiseMark);
				this.entityData.CrsRaiseMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.CrsRaiseMark, this.entityData.CrsRaiseMark);
				OnPropertyChanged("CrsRaiseMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CrsCh property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCrsChNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CrsCh
		{
			get
			{
				return this.entityData.CrsCh; 
			}
			
			set
			{
				if (this.entityData.CrsCh == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.CrsCh, this.entityData.CrsCh);
				this.entityData.CrsCh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.CrsCh, this.entityData.CrsCh);
				OnPropertyChanged("CrsCh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AudtNote property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String AudtNote
		{
			get
			{
				return this.entityData.AudtNote; 
			}
			
			set
			{
				if (this.entityData.AudtNote == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.AudtNote, this.entityData.AudtNote);
				this.entityData.AudtNote = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.AudtNote, this.entityData.AudtNote);
				OnPropertyChanged("AudtNote");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ScSectionGroupHdrId property. 
		///		مجموعة سكاشن المقرر
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsScSectionGroupHdrIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"مجموعة سكاشن المقرر"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ScSectionGroupHdrId
		{
			get
			{
				return this.entityData.ScSectionGroupHdrId; 
			}
			
			set
			{
				if (this.entityData.ScSectionGroupHdrId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.ScSectionGroupHdrId, this.entityData.ScSectionGroupHdrId);
				this.entityData.ScSectionGroupHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.ScSectionGroupHdrId, this.entityData.ScSectionGroupHdrId);
				OnPropertyChanged("ScSectionGroupHdrId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseOrgId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCourseOrgIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCourseOrgId
		{
			get
			{
				return this.entityData.EdCourseOrgId; 
			}
			
			set
			{
				if (this.entityData.EdCourseOrgId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.EdCourseOrgId, this.entityData.EdCourseOrgId);
				this.entityData.EdCourseOrgId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.EdCourseOrgId, this.entityData.EdCourseOrgId);
				OnPropertyChanged("EdCourseOrgId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCdeExamTypeId property. 
		///		نوع الامتحان: تكميلى- اعادة
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCdeExamTypeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"نوع الامتحان: تكميلى- اعادة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCdeExamTypeId
		{
			get
			{
				return this.entityData.EdCdeExamTypeId; 
			}
			
			set
			{
				if (this.entityData.EdCdeExamTypeId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.EdCdeExamTypeId, this.entityData.EdCdeExamTypeId);
				this.entityData.EdCdeExamTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.EdCdeExamTypeId, this.entityData.EdCdeExamTypeId);
				OnPropertyChanged("EdCdeExamTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsLastYear property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsLastYearNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsLastYear
		{
			get
			{
				return this.entityData.IsLastYear; 
			}
			
			set
			{
				if (this.entityData.IsLastYear == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.IsLastYear, this.entityData.IsLastYear);
				this.entityData.IsLastYear = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.IsLastYear, this.entityData.IsLastYear);
				OnPropertyChanged("IsLastYear");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetakeFlg property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsRetakeFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? RetakeFlg
		{
			get
			{
				return this.entityData.RetakeFlg; 
			}
			
			set
			{
				if (this.entityData.RetakeFlg == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.RetakeFlg, this.entityData.RetakeFlg);
				this.entityData.RetakeFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.RetakeFlg, this.entityData.RetakeFlg);
				OnPropertyChanged("RetakeFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCodeCourseCaseId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsEdCodeCourseCaseIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? EdCodeCourseCaseId
		{
			get
			{
				return this.entityData.EdCodeCourseCaseId; 
			}
			
			set
			{
				if (this.entityData.EdCodeCourseCaseId == value)
					return;
					
				OnColumnChanging(EdStudCourseRegColumn.EdCodeCourseCaseId, this.entityData.EdCodeCourseCaseId);
				this.entityData.EdCodeCourseCaseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdStudCourseRegColumn.EdCodeCourseCaseId, this.entityData.EdCodeCourseCaseId);
				OnPropertyChanged("EdCodeCourseCaseId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return entityData.AsFacultyInfoIdSource; }
            set { entityData.AsFacultyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadPlanDtl"/>.
		/// </summary>
		/// <value>The source EdAcadPlanDtl for EdAcadPlanDtlId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadPlanDtl EdAcadPlanDtlIdSource
      	{
            get { return entityData.EdAcadPlanDtlIdSource; }
            set { entityData.EdAcadPlanDtlIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeCrsRegType"/>.
		/// </summary>
		/// <value>The source EdCdeCrsRegType for EdCdeCrsRegTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCdeCrsRegType EdCdeCrsRegTypeIdSource
      	{
            get { return entityData.EdCdeCrsRegTypeIdSource; }
            set { entityData.EdCdeCrsRegTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeExamType"/>.
		/// </summary>
		/// <value>The source EdCdeExamType for EdCdeExamTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCdeExamType EdCdeExamTypeIdSource
      	{
            get { return entityData.EdCdeExamTypeIdSource; }
            set { entityData.EdCdeExamTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseCase"/>.
		/// </summary>
		/// <value>The source EdCodeCourseCase for EdCodeCourseCaseId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeCourseCase EdCodeCourseCaseIdSource
      	{
            get { return entityData.EdCodeCourseCaseIdSource; }
            set { entityData.EdCodeCourseCaseIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseStatus"/>.
		/// </summary>
		/// <value>The source EdCodeCourseStatus for EdCodeCourseStatusId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeCourseStatus EdCodeCourseStatusIdSource
      	{
            get { return entityData.EdCodeCourseStatusIdSource; }
            set { entityData.EdCodeCourseStatusIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeGradingId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCodeGrading EdCodeGradingIdSource
      	{
            get { return entityData.EdCodeGradingIdSource; }
            set { entityData.EdCodeGradingIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return entityData.EdCourseIdSource; }
            set { entityData.EdCourseIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseOrgId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCourse EdCourseOrgIdSource
      	{
            get { return entityData.EdCourseOrgIdSource; }
            set { entityData.EdCourseOrgIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdStudSemester"/>.
		/// </summary>
		/// <value>The source EdStudSemester for EdStudSemesterId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdStudSemester EdStudSemesterIdSource
      	{
            get { return entityData.EdStudSemesterIdSource; }
            set { entityData.EdStudSemesterIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntCoursePkgDtl"/>.
		/// </summary>
		/// <value>The source EntCoursePkgDtl for EntCoursePkgDtlId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntCoursePkgDtl EntCoursePkgDtlIdSource
      	{
            get { return entityData.EntCoursePkgDtlIdSource; }
            set { entityData.EntCoursePkgDtlIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntPolicyAssessHdr"/>.
		/// </summary>
		/// <value>The source EntPolicyAssessHdr for EntPolicyAssessHdrId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntPolicyAssessHdr EntPolicyAssessHdrIdSource
      	{
            get { return entityData.EntPolicyAssessHdrIdSource; }
            set { entityData.EntPolicyAssessHdrIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntPolicyGradingHdr"/>.
		/// </summary>
		/// <value>The source EntPolicyGradingHdr for EntPolicyGradingHdrId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntPolicyGradingHdr EntPolicyGradingHdrIdSource
      	{
            get { return entityData.EntPolicyGradingHdrIdSource; }
            set { entityData.EntPolicyGradingHdrIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="GsCodePassFail"/>.
		/// </summary>
		/// <value>The source GsCodePassFail for GsCodePassFailId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GsCodePassFail GsCodePassFailIdSource
      	{
            get { return entityData.GsCodePassFailIdSource; }
            set { entityData.GsCodePassFailIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ScSectionGroupHdr"/>.
		/// </summary>
		/// <value>The source ScSectionGroupHdr for ScSectionGroupHdrId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ScSectionGroupHdr ScSectionGroupHdrIdSource
      	{
            get { return entityData.ScSectionGroupHdrIdSource; }
            set { entityData.ScSectionGroupHdrIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeForm"/>.
		/// </summary>
		/// <value>The source SeForm for SeFormId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeForm SeFormIdSource
      	{
            get { return entityData.SeFormIdSource; }
            set { entityData.SeFormIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeUser SeUserIdSource
      	{
            get { return entityData.SeUserIdSource; }
            set { entityData.SeUserIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserApproveId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeUser SeUserApproveIdSource
      	{
            get { return entityData.SeUserApproveIdSource; }
            set { entityData.SeUserApproveIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of GsAttchdDoc objects
		///	which are related to this object through the relation FK_GS_ATTCHD_DOC_ED_STUD_COURSE_REG
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<GsAttchdDoc> GsAttchdDocCollection
		{
			get { return entityData.GsAttchdDocCollection; }
			set { entityData.GsAttchdDocCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudCourseRegAdd objects
		///	which are related to this object through the relation FK_ED_STUD_COURSE_REG_ADD_ED_STUD_COURSE_REG
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCourseRegAdd> EdStudCourseRegAddCollection
		{
			get { return entityData.EdStudCourseRegAddCollection; }
			set { entityData.EdStudCourseRegAddCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudGroup objects
		///	which are related to this object through the relation FK_ED_STUD_GROUP_ED_STUD_COURSE_REG
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudGroup> EdStudGroupCollection
		{
			get { return entityData.EdStudGroupCollection; }
			set { entityData.EdStudGroupCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudCourseRegAssessSub objects
		///	which are related to this object through the relation FK_ED_STUD_COURSE_REG_ASSESS_SUB_ED_STUD_COURSE_REG
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCourseRegAssessSub> EdStudCourseRegAssessSubCollection
		{
			get { return entityData.EdStudCourseRegAssessSubCollection; }
			set { entityData.EdStudCourseRegAssessSubCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ScStudGroup objects
		///	which are related to this object through the relation FK_SC_STUD_GROUP_ED_STUD_COURSE_REG
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ScStudGroup> ScStudGroupCollection
		{
			get { return entityData.ScStudGroupCollection; }
			set { entityData.ScStudGroupCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudPnltyCourse objects
		///	which are related to this object through the relation FK_ED_STUD_PNLTY_COURSE_ED_STUD_COURSE_REG1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudPnltyCourse> EdStudPnltyCourseCollection
		{
			get { return entityData.EdStudPnltyCourseCollection; }
			set { entityData.EdStudPnltyCourseCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStdCrsExam objects
		///	which are related to this object through the relation FK_ED_STD_CRS_RE_EXAM_ED_STUD_COURSE_REG
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStdCrsExam> EdStdCrsExamCollection
		{
			get { return entityData.EdStdCrsExamCollection; }
			set { entityData.EdStdCrsExamCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudCourseRegAssess objects
		///	which are related to this object through the relation FK_ED_STUD_STATE_COURSE_ASSESS_ED_STUD_STATE_COURSE
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCourseRegAssess> EdStudCourseRegAssessCollection
		{
			get { return entityData.EdStudCourseRegAssessCollection; }
			set { entityData.EdStudCourseRegAssessCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudCourseGrdChng objects
		///	which are related to this object through the relation FK_ED_STUD_COURSE_GRD_CHNG_ED_STUD_COURSE_REG
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCourseGrdChng> EdStudCourseGrdChngCollection
		{
			get { return entityData.EdStudCourseGrdChngCollection; }
			set { entityData.EdStudCourseGrdChngCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudCourseRegTopic objects
		///	which are related to this object through the relation FK_ED_STUD_COURSE_REG_TOPIC_ED_STUD_COURSE_REG
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCourseRegTopic> EdStudCourseRegTopicCollection
		{
			get { return entityData.EdStudCourseRegTopicCollection; }
			set { entityData.EdStudCourseRegTopicCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of FeeItemTrnsBlnc objects
		///	which are related to this object through the relation FK_FEE_ITEM_TRNS_BLNC_ED_STUD_COURSE_REG
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<FeeItemTrnsBlnc> FeeItemTrnsBlncCollection
		{
			get { return entityData.FeeItemTrnsBlncCollection; }
			set { entityData.FeeItemTrnsBlncCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EdStudCourseRegPolcy objects
		///	which are related to this object through the relation FK_ED_STUD_COURSE_REG_POLCY_ED_STUD_COURSE_REG
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCourseRegPolcy> EdStudCourseRegPolcyCollection
		{
			get { return entityData.EdStudCourseRegPolcyCollection; }
			set { entityData.EdStudCourseRegPolcyCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HideReason", "Hide Reason", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ReceiptNo", "Receipt No", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 130));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AudtNote", "Audt Note", 200));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_STUD_COURSE_REG"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_STUD_COURSE_REG_ID", "ED_COURSE_ID", "REG_DATE", "AUDIT_FLG", "REPEAT_FLG", "IS_LAST", "AS_FACULTY_INFO_ID", "ED_CODE_COURSE_STATUS_ID", "ED_CODE_GRADING_ID", "COURSE_DEGREE", "COURSE_POINT", "ENT_POLICY_GRADING_HDR_ID", "GS_CODE_PASS_FAIL_ID", "ED_STUD_SEMESTER_ID", "ADD_GPA_FLG", "ENT_POLICY_ASSESS_HDR_ID", "INCOMP_FLG", "HIDE_FLG", "HIDE_REASON", "ED_COURSE_SUB_ID", "LAST_DATE", "SE_FORM_ID", "SE_USER_ID", "IS_RESULT_APPROVED", "REPEAT_NO", "PAY_FLG", "PAY_AMOUNT", "ABS_FLG", "RECEIPT_NO", "RECEIPT_DATE", "BYFORCE_FLG", "ED_CDE_CRS_REG_TYPE_ID", "ENT_COURSE_PKG_DTL_ID", "ED_ACAD_PLAN_DTL_ID", "NOTES", "SE_USER_APPROVE_ID", "CRS_RAISE_MARK", "CRS_CH", "AUDT_NOTE", "SC_SECTION_GROUP_HDR_ID", "ED_COURSE_ORG_ID", "ED_CDE_EXAM_TYPE_ID", "IS_LAST_YEAR", "RETAKE_FLG", "ED_CODE_COURSE_CASE_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdStudCourseRegEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdStudCourseReg) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdStudCourseReg>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdStudCourseReg);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdStudCourseReg Entity 
		///</summary>
		protected virtual EdStudCourseReg Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdStudCourseReg copy = new EdStudCourseReg();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdStudCourseRegId = this.EdStudCourseRegId;
					copy.OriginalEdStudCourseRegId = this.OriginalEdStudCourseRegId;
				copy.EdCourseId = this.EdCourseId;
				copy.RegDate = this.RegDate;
				copy.AuditFlg = this.AuditFlg;
				copy.RepeatFlg = this.RepeatFlg;
				copy.IsLast = this.IsLast;
				copy.AsFacultyInfoId = this.AsFacultyInfoId;
				copy.EdCodeCourseStatusId = this.EdCodeCourseStatusId;
				copy.EdCodeGradingId = this.EdCodeGradingId;
				copy.CourseDegree = this.CourseDegree;
				copy.CoursePoint = this.CoursePoint;
				copy.EntPolicyGradingHdrId = this.EntPolicyGradingHdrId;
				copy.GsCodePassFailId = this.GsCodePassFailId;
				copy.EdStudSemesterId = this.EdStudSemesterId;
				copy.AddGpaFlg = this.AddGpaFlg;
				copy.EntPolicyAssessHdrId = this.EntPolicyAssessHdrId;
				copy.IncompFlg = this.IncompFlg;
				copy.HideFlg = this.HideFlg;
				copy.HideReason = this.HideReason;
				copy.EdCourseSubId = this.EdCourseSubId;
				copy.LastDate = this.LastDate;
				copy.SeFormId = this.SeFormId;
				copy.SeUserId = this.SeUserId;
				copy.IsResultApproved = this.IsResultApproved;
				copy.RepeatNo = this.RepeatNo;
				copy.PayFlg = this.PayFlg;
				copy.PayAmount = this.PayAmount;
				copy.AbsFlg = this.AbsFlg;
				copy.ReceiptNo = this.ReceiptNo;
				copy.ReceiptDate = this.ReceiptDate;
				copy.ByforceFlg = this.ByforceFlg;
				copy.EdCdeCrsRegTypeId = this.EdCdeCrsRegTypeId;
				copy.EntCoursePkgDtlId = this.EntCoursePkgDtlId;
				copy.EdAcadPlanDtlId = this.EdAcadPlanDtlId;
				copy.Notes = this.Notes;
				copy.SeUserApproveId = this.SeUserApproveId;
				copy.CrsRaiseMark = this.CrsRaiseMark;
				copy.CrsCh = this.CrsCh;
				copy.AudtNote = this.AudtNote;
				copy.ScSectionGroupHdrId = this.ScSectionGroupHdrId;
				copy.EdCourseOrgId = this.EdCourseOrgId;
				copy.EdCdeExamTypeId = this.EdCdeExamTypeId;
				copy.IsLastYear = this.IsLastYear;
				copy.RetakeFlg = this.RetakeFlg;
				copy.EdCodeCourseCaseId = this.EdCodeCourseCaseId;
			
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				copy.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				copy.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadPlanDtlIdSource != null && existingCopies.Contains(this.EdAcadPlanDtlIdSource))
				copy.EdAcadPlanDtlIdSource = existingCopies[this.EdAcadPlanDtlIdSource] as EdAcadPlanDtl;
			else
				copy.EdAcadPlanDtlIdSource = MakeCopyOf(this.EdAcadPlanDtlIdSource, existingCopies) as EdAcadPlanDtl;
			if (this.EdCdeCrsRegTypeIdSource != null && existingCopies.Contains(this.EdCdeCrsRegTypeIdSource))
				copy.EdCdeCrsRegTypeIdSource = existingCopies[this.EdCdeCrsRegTypeIdSource] as EdCdeCrsRegType;
			else
				copy.EdCdeCrsRegTypeIdSource = MakeCopyOf(this.EdCdeCrsRegTypeIdSource, existingCopies) as EdCdeCrsRegType;
			if (this.EdCdeExamTypeIdSource != null && existingCopies.Contains(this.EdCdeExamTypeIdSource))
				copy.EdCdeExamTypeIdSource = existingCopies[this.EdCdeExamTypeIdSource] as EdCdeExamType;
			else
				copy.EdCdeExamTypeIdSource = MakeCopyOf(this.EdCdeExamTypeIdSource, existingCopies) as EdCdeExamType;
			if (this.EdCodeCourseCaseIdSource != null && existingCopies.Contains(this.EdCodeCourseCaseIdSource))
				copy.EdCodeCourseCaseIdSource = existingCopies[this.EdCodeCourseCaseIdSource] as EdCodeCourseCase;
			else
				copy.EdCodeCourseCaseIdSource = MakeCopyOf(this.EdCodeCourseCaseIdSource, existingCopies) as EdCodeCourseCase;
			if (this.EdCodeCourseStatusIdSource != null && existingCopies.Contains(this.EdCodeCourseStatusIdSource))
				copy.EdCodeCourseStatusIdSource = existingCopies[this.EdCodeCourseStatusIdSource] as EdCodeCourseStatus;
			else
				copy.EdCodeCourseStatusIdSource = MakeCopyOf(this.EdCodeCourseStatusIdSource, existingCopies) as EdCodeCourseStatus;
			if (this.EdCodeGradingIdSource != null && existingCopies.Contains(this.EdCodeGradingIdSource))
				copy.EdCodeGradingIdSource = existingCopies[this.EdCodeGradingIdSource] as EdCodeGrading;
			else
				copy.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource, existingCopies) as EdCodeGrading;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				copy.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				copy.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EdCourseOrgIdSource != null && existingCopies.Contains(this.EdCourseOrgIdSource))
				copy.EdCourseOrgIdSource = existingCopies[this.EdCourseOrgIdSource] as EdCourse;
			else
				copy.EdCourseOrgIdSource = MakeCopyOf(this.EdCourseOrgIdSource, existingCopies) as EdCourse;
			if (this.EdStudSemesterIdSource != null && existingCopies.Contains(this.EdStudSemesterIdSource))
				copy.EdStudSemesterIdSource = existingCopies[this.EdStudSemesterIdSource] as EdStudSemester;
			else
				copy.EdStudSemesterIdSource = MakeCopyOf(this.EdStudSemesterIdSource, existingCopies) as EdStudSemester;
			if (this.EntCoursePkgDtlIdSource != null && existingCopies.Contains(this.EntCoursePkgDtlIdSource))
				copy.EntCoursePkgDtlIdSource = existingCopies[this.EntCoursePkgDtlIdSource] as EntCoursePkgDtl;
			else
				copy.EntCoursePkgDtlIdSource = MakeCopyOf(this.EntCoursePkgDtlIdSource, existingCopies) as EntCoursePkgDtl;
			if (this.EntPolicyAssessHdrIdSource != null && existingCopies.Contains(this.EntPolicyAssessHdrIdSource))
				copy.EntPolicyAssessHdrIdSource = existingCopies[this.EntPolicyAssessHdrIdSource] as EntPolicyAssessHdr;
			else
				copy.EntPolicyAssessHdrIdSource = MakeCopyOf(this.EntPolicyAssessHdrIdSource, existingCopies) as EntPolicyAssessHdr;
			if (this.EntPolicyGradingHdrIdSource != null && existingCopies.Contains(this.EntPolicyGradingHdrIdSource))
				copy.EntPolicyGradingHdrIdSource = existingCopies[this.EntPolicyGradingHdrIdSource] as EntPolicyGradingHdr;
			else
				copy.EntPolicyGradingHdrIdSource = MakeCopyOf(this.EntPolicyGradingHdrIdSource, existingCopies) as EntPolicyGradingHdr;
			if (this.GsCodePassFailIdSource != null && existingCopies.Contains(this.GsCodePassFailIdSource))
				copy.GsCodePassFailIdSource = existingCopies[this.GsCodePassFailIdSource] as GsCodePassFail;
			else
				copy.GsCodePassFailIdSource = MakeCopyOf(this.GsCodePassFailIdSource, existingCopies) as GsCodePassFail;
			if (this.ScSectionGroupHdrIdSource != null && existingCopies.Contains(this.ScSectionGroupHdrIdSource))
				copy.ScSectionGroupHdrIdSource = existingCopies[this.ScSectionGroupHdrIdSource] as ScSectionGroupHdr;
			else
				copy.ScSectionGroupHdrIdSource = MakeCopyOf(this.ScSectionGroupHdrIdSource, existingCopies) as ScSectionGroupHdr;
			if (this.SeFormIdSource != null && existingCopies.Contains(this.SeFormIdSource))
				copy.SeFormIdSource = existingCopies[this.SeFormIdSource] as SeForm;
			else
				copy.SeFormIdSource = MakeCopyOf(this.SeFormIdSource, existingCopies) as SeForm;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				copy.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				copy.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			if (this.SeUserApproveIdSource != null && existingCopies.Contains(this.SeUserApproveIdSource))
				copy.SeUserApproveIdSource = existingCopies[this.SeUserApproveIdSource] as SeUser;
			else
				copy.SeUserApproveIdSource = MakeCopyOf(this.SeUserApproveIdSource, existingCopies) as SeUser;
		
			//deep copy nested objects
			copy.GsAttchdDocCollection = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollection, existingCopies); 
			copy.EdStudCourseRegAddCollection = (TList<EdStudCourseRegAdd>) MakeCopyOf(this.EdStudCourseRegAddCollection, existingCopies); 
			copy.EdStudGroupCollection = (TList<EdStudGroup>) MakeCopyOf(this.EdStudGroupCollection, existingCopies); 
			copy.EdStudCourseRegAssessSubCollection = (TList<EdStudCourseRegAssessSub>) MakeCopyOf(this.EdStudCourseRegAssessSubCollection, existingCopies); 
			copy.ScStudGroupCollection = (TList<ScStudGroup>) MakeCopyOf(this.ScStudGroupCollection, existingCopies); 
			copy.EdStudPnltyCourseCollection = (TList<EdStudPnltyCourse>) MakeCopyOf(this.EdStudPnltyCourseCollection, existingCopies); 
			copy.EdStdCrsExamCollection = (TList<EdStdCrsExam>) MakeCopyOf(this.EdStdCrsExamCollection, existingCopies); 
			copy.EdStudCourseRegAssessCollection = (TList<EdStudCourseRegAssess>) MakeCopyOf(this.EdStudCourseRegAssessCollection, existingCopies); 
			copy.EdStudCourseGrdChngCollection = (TList<EdStudCourseGrdChng>) MakeCopyOf(this.EdStudCourseGrdChngCollection, existingCopies); 
			copy.EdStudCourseRegTopicCollection = (TList<EdStudCourseRegTopic>) MakeCopyOf(this.EdStudCourseRegTopicCollection, existingCopies); 
			copy.FeeItemTrnsBlncCollection = (TList<FeeItemTrnsBlnc>) MakeCopyOf(this.FeeItemTrnsBlncCollection, existingCopies); 
			copy.EdStudCourseRegPolcyCollection = (TList<EdStudCourseRegPolcy>) MakeCopyOf(this.EdStudCourseRegPolcyCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdStudCourseReg Entity 
		///</summary>
		public virtual EdStudCourseReg Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdStudCourseReg Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdStudCourseReg DeepCopy()
		{
			return EntityHelper.Clone<EdStudCourseReg>(this as EdStudCourseReg);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdStudCourseRegEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdStudCourseRegEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdStudCourseRegEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdStudCourseRegColumn column)
		{
			switch(column)
			{
					case EdStudCourseRegColumn.EdStudCourseRegId:
					return entityData.EdStudCourseRegId != _originalData.EdStudCourseRegId;
					case EdStudCourseRegColumn.EdCourseId:
					return entityData.EdCourseId != _originalData.EdCourseId;
					case EdStudCourseRegColumn.RegDate:
					return entityData.RegDate != _originalData.RegDate;
					case EdStudCourseRegColumn.AuditFlg:
					return entityData.AuditFlg != _originalData.AuditFlg;
					case EdStudCourseRegColumn.RepeatFlg:
					return entityData.RepeatFlg != _originalData.RepeatFlg;
					case EdStudCourseRegColumn.IsLast:
					return entityData.IsLast != _originalData.IsLast;
					case EdStudCourseRegColumn.AsFacultyInfoId:
					return entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
					case EdStudCourseRegColumn.EdCodeCourseStatusId:
					return entityData.EdCodeCourseStatusId != _originalData.EdCodeCourseStatusId;
					case EdStudCourseRegColumn.EdCodeGradingId:
					return entityData.EdCodeGradingId != _originalData.EdCodeGradingId;
					case EdStudCourseRegColumn.CourseDegree:
					return entityData.CourseDegree != _originalData.CourseDegree;
					case EdStudCourseRegColumn.CoursePoint:
					return entityData.CoursePoint != _originalData.CoursePoint;
					case EdStudCourseRegColumn.EntPolicyGradingHdrId:
					return entityData.EntPolicyGradingHdrId != _originalData.EntPolicyGradingHdrId;
					case EdStudCourseRegColumn.GsCodePassFailId:
					return entityData.GsCodePassFailId != _originalData.GsCodePassFailId;
					case EdStudCourseRegColumn.EdStudSemesterId:
					return entityData.EdStudSemesterId != _originalData.EdStudSemesterId;
					case EdStudCourseRegColumn.AddGpaFlg:
					return entityData.AddGpaFlg != _originalData.AddGpaFlg;
					case EdStudCourseRegColumn.EntPolicyAssessHdrId:
					return entityData.EntPolicyAssessHdrId != _originalData.EntPolicyAssessHdrId;
					case EdStudCourseRegColumn.IncompFlg:
					return entityData.IncompFlg != _originalData.IncompFlg;
					case EdStudCourseRegColumn.HideFlg:
					return entityData.HideFlg != _originalData.HideFlg;
					case EdStudCourseRegColumn.HideReason:
					return entityData.HideReason != _originalData.HideReason;
					case EdStudCourseRegColumn.EdCourseSubId:
					return entityData.EdCourseSubId != _originalData.EdCourseSubId;
					case EdStudCourseRegColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case EdStudCourseRegColumn.SeFormId:
					return entityData.SeFormId != _originalData.SeFormId;
					case EdStudCourseRegColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case EdStudCourseRegColumn.IsResultApproved:
					return entityData.IsResultApproved != _originalData.IsResultApproved;
					case EdStudCourseRegColumn.RepeatNo:
					return entityData.RepeatNo != _originalData.RepeatNo;
					case EdStudCourseRegColumn.PayFlg:
					return entityData.PayFlg != _originalData.PayFlg;
					case EdStudCourseRegColumn.PayAmount:
					return entityData.PayAmount != _originalData.PayAmount;
					case EdStudCourseRegColumn.AbsFlg:
					return entityData.AbsFlg != _originalData.AbsFlg;
					case EdStudCourseRegColumn.ReceiptNo:
					return entityData.ReceiptNo != _originalData.ReceiptNo;
					case EdStudCourseRegColumn.ReceiptDate:
					return entityData.ReceiptDate != _originalData.ReceiptDate;
					case EdStudCourseRegColumn.ByforceFlg:
					return entityData.ByforceFlg != _originalData.ByforceFlg;
					case EdStudCourseRegColumn.EdCdeCrsRegTypeId:
					return entityData.EdCdeCrsRegTypeId != _originalData.EdCdeCrsRegTypeId;
					case EdStudCourseRegColumn.EntCoursePkgDtlId:
					return entityData.EntCoursePkgDtlId != _originalData.EntCoursePkgDtlId;
					case EdStudCourseRegColumn.EdAcadPlanDtlId:
					return entityData.EdAcadPlanDtlId != _originalData.EdAcadPlanDtlId;
					case EdStudCourseRegColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case EdStudCourseRegColumn.SeUserApproveId:
					return entityData.SeUserApproveId != _originalData.SeUserApproveId;
					case EdStudCourseRegColumn.CrsRaiseMark:
					return entityData.CrsRaiseMark != _originalData.CrsRaiseMark;
					case EdStudCourseRegColumn.CrsCh:
					return entityData.CrsCh != _originalData.CrsCh;
					case EdStudCourseRegColumn.AudtNote:
					return entityData.AudtNote != _originalData.AudtNote;
					case EdStudCourseRegColumn.ScSectionGroupHdrId:
					return entityData.ScSectionGroupHdrId != _originalData.ScSectionGroupHdrId;
					case EdStudCourseRegColumn.EdCourseOrgId:
					return entityData.EdCourseOrgId != _originalData.EdCourseOrgId;
					case EdStudCourseRegColumn.EdCdeExamTypeId:
					return entityData.EdCdeExamTypeId != _originalData.EdCdeExamTypeId;
					case EdStudCourseRegColumn.IsLastYear:
					return entityData.IsLastYear != _originalData.IsLastYear;
					case EdStudCourseRegColumn.RetakeFlg:
					return entityData.RetakeFlg != _originalData.RetakeFlg;
					case EdStudCourseRegColumn.EdCodeCourseCaseId:
					return entityData.EdCodeCourseCaseId != _originalData.EdCodeCourseCaseId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdStudCourseRegColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdStudCourseRegId != _originalData.EdStudCourseRegId;
			result = result || entityData.EdCourseId != _originalData.EdCourseId;
			result = result || entityData.RegDate != _originalData.RegDate;
			result = result || entityData.AuditFlg != _originalData.AuditFlg;
			result = result || entityData.RepeatFlg != _originalData.RepeatFlg;
			result = result || entityData.IsLast != _originalData.IsLast;
			result = result || entityData.AsFacultyInfoId != _originalData.AsFacultyInfoId;
			result = result || entityData.EdCodeCourseStatusId != _originalData.EdCodeCourseStatusId;
			result = result || entityData.EdCodeGradingId != _originalData.EdCodeGradingId;
			result = result || entityData.CourseDegree != _originalData.CourseDegree;
			result = result || entityData.CoursePoint != _originalData.CoursePoint;
			result = result || entityData.EntPolicyGradingHdrId != _originalData.EntPolicyGradingHdrId;
			result = result || entityData.GsCodePassFailId != _originalData.GsCodePassFailId;
			result = result || entityData.EdStudSemesterId != _originalData.EdStudSemesterId;
			result = result || entityData.AddGpaFlg != _originalData.AddGpaFlg;
			result = result || entityData.EntPolicyAssessHdrId != _originalData.EntPolicyAssessHdrId;
			result = result || entityData.IncompFlg != _originalData.IncompFlg;
			result = result || entityData.HideFlg != _originalData.HideFlg;
			result = result || entityData.HideReason != _originalData.HideReason;
			result = result || entityData.EdCourseSubId != _originalData.EdCourseSubId;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.SeFormId != _originalData.SeFormId;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.IsResultApproved != _originalData.IsResultApproved;
			result = result || entityData.RepeatNo != _originalData.RepeatNo;
			result = result || entityData.PayFlg != _originalData.PayFlg;
			result = result || entityData.PayAmount != _originalData.PayAmount;
			result = result || entityData.AbsFlg != _originalData.AbsFlg;
			result = result || entityData.ReceiptNo != _originalData.ReceiptNo;
			result = result || entityData.ReceiptDate != _originalData.ReceiptDate;
			result = result || entityData.ByforceFlg != _originalData.ByforceFlg;
			result = result || entityData.EdCdeCrsRegTypeId != _originalData.EdCdeCrsRegTypeId;
			result = result || entityData.EntCoursePkgDtlId != _originalData.EntCoursePkgDtlId;
			result = result || entityData.EdAcadPlanDtlId != _originalData.EdAcadPlanDtlId;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.SeUserApproveId != _originalData.SeUserApproveId;
			result = result || entityData.CrsRaiseMark != _originalData.CrsRaiseMark;
			result = result || entityData.CrsCh != _originalData.CrsCh;
			result = result || entityData.AudtNote != _originalData.AudtNote;
			result = result || entityData.ScSectionGroupHdrId != _originalData.ScSectionGroupHdrId;
			result = result || entityData.EdCourseOrgId != _originalData.EdCourseOrgId;
			result = result || entityData.EdCdeExamTypeId != _originalData.EdCdeExamTypeId;
			result = result || entityData.IsLastYear != _originalData.IsLastYear;
			result = result || entityData.RetakeFlg != _originalData.RetakeFlg;
			result = result || entityData.EdCodeCourseCaseId != _originalData.EdCodeCourseCaseId;
			return result;
		}	
		
		///<summary>
		///  Returns a EdStudCourseReg Entity with the original data.
		///</summary>
		public EdStudCourseReg GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdStudCourseReg(
				_originalData.EdStudCourseRegId,
				_originalData.EdCourseId,
				_originalData.RegDate,
				_originalData.AuditFlg,
				_originalData.RepeatFlg,
				_originalData.IsLast,
				_originalData.AsFacultyInfoId,
				_originalData.EdCodeCourseStatusId,
				_originalData.EdCodeGradingId,
				_originalData.CourseDegree,
				_originalData.CoursePoint,
				_originalData.EntPolicyGradingHdrId,
				_originalData.GsCodePassFailId,
				_originalData.EdStudSemesterId,
				_originalData.AddGpaFlg,
				_originalData.EntPolicyAssessHdrId,
				_originalData.IncompFlg,
				_originalData.HideFlg,
				_originalData.HideReason,
				_originalData.EdCourseSubId,
				_originalData.LastDate,
				_originalData.SeFormId,
				_originalData.SeUserId,
				_originalData.IsResultApproved,
				_originalData.RepeatNo,
				_originalData.PayFlg,
				_originalData.PayAmount,
				_originalData.AbsFlg,
				_originalData.ReceiptNo,
				_originalData.ReceiptDate,
				_originalData.ByforceFlg,
				_originalData.EdCdeCrsRegTypeId,
				_originalData.EntCoursePkgDtlId,
				_originalData.EdAcadPlanDtlId,
				_originalData.Notes,
				_originalData.SeUserApproveId,
				_originalData.CrsRaiseMark,
				_originalData.CrsCh,
				_originalData.AudtNote,
				_originalData.ScSectionGroupHdrId,
				_originalData.EdCourseOrgId,
				_originalData.EdCdeExamTypeId,
				_originalData.IsLastYear,
				_originalData.RetakeFlg,
				_originalData.EdCodeCourseCaseId
				);
				
			return (EdStudCourseReg)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdStudCourseRegBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdStudCourseRegBase)
				return ValueEquals(this, (EdStudCourseRegBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdStudCourseRegBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdStudCourseRegId.GetHashCode() ^ 
					this.EdCourseId.GetHashCode() ^ 
					((this.RegDate == null) ? string.Empty : this.RegDate.ToString()).GetHashCode() ^ 
					this.AuditFlg.GetHashCode() ^ 
					this.RepeatFlg.GetHashCode() ^ 
					this.IsLast.GetHashCode() ^ 
					((this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString()).GetHashCode() ^ 
					((this.EdCodeCourseStatusId == null) ? string.Empty : this.EdCodeCourseStatusId.ToString()).GetHashCode() ^ 
					((this.EdCodeGradingId == null) ? string.Empty : this.EdCodeGradingId.ToString()).GetHashCode() ^ 
					((this.CourseDegree == null) ? string.Empty : this.CourseDegree.ToString()).GetHashCode() ^ 
					((this.CoursePoint == null) ? string.Empty : this.CoursePoint.ToString()).GetHashCode() ^ 
					((this.EntPolicyGradingHdrId == null) ? string.Empty : this.EntPolicyGradingHdrId.ToString()).GetHashCode() ^ 
					((this.GsCodePassFailId == null) ? string.Empty : this.GsCodePassFailId.ToString()).GetHashCode() ^ 
					this.EdStudSemesterId.GetHashCode() ^ 
					this.AddGpaFlg.GetHashCode() ^ 
					((this.EntPolicyAssessHdrId == null) ? string.Empty : this.EntPolicyAssessHdrId.ToString()).GetHashCode() ^ 
					this.IncompFlg.GetHashCode() ^ 
					this.HideFlg.GetHashCode() ^ 
					((this.HideReason == null) ? string.Empty : this.HideReason.ToString()).GetHashCode() ^ 
					((this.EdCourseSubId == null) ? string.Empty : this.EdCourseSubId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.SeFormId == null) ? string.Empty : this.SeFormId.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.IsResultApproved == null) ? string.Empty : this.IsResultApproved.ToString()).GetHashCode() ^ 
					((this.RepeatNo == null) ? string.Empty : this.RepeatNo.ToString()).GetHashCode() ^ 
					((this.PayFlg == null) ? string.Empty : this.PayFlg.ToString()).GetHashCode() ^ 
					((this.PayAmount == null) ? string.Empty : this.PayAmount.ToString()).GetHashCode() ^ 
					((this.AbsFlg == null) ? string.Empty : this.AbsFlg.ToString()).GetHashCode() ^ 
					((this.ReceiptNo == null) ? string.Empty : this.ReceiptNo.ToString()).GetHashCode() ^ 
					((this.ReceiptDate == null) ? string.Empty : this.ReceiptDate.ToString()).GetHashCode() ^ 
					((this.ByforceFlg == null) ? string.Empty : this.ByforceFlg.ToString()).GetHashCode() ^ 
					((this.EdCdeCrsRegTypeId == null) ? string.Empty : this.EdCdeCrsRegTypeId.ToString()).GetHashCode() ^ 
					((this.EntCoursePkgDtlId == null) ? string.Empty : this.EntCoursePkgDtlId.ToString()).GetHashCode() ^ 
					((this.EdAcadPlanDtlId == null) ? string.Empty : this.EdAcadPlanDtlId.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.SeUserApproveId == null) ? string.Empty : this.SeUserApproveId.ToString()).GetHashCode() ^ 
					((this.CrsRaiseMark == null) ? string.Empty : this.CrsRaiseMark.ToString()).GetHashCode() ^ 
					((this.CrsCh == null) ? string.Empty : this.CrsCh.ToString()).GetHashCode() ^ 
					((this.AudtNote == null) ? string.Empty : this.AudtNote.ToString()).GetHashCode() ^ 
					((this.ScSectionGroupHdrId == null) ? string.Empty : this.ScSectionGroupHdrId.ToString()).GetHashCode() ^ 
					((this.EdCourseOrgId == null) ? string.Empty : this.EdCourseOrgId.ToString()).GetHashCode() ^ 
					((this.EdCdeExamTypeId == null) ? string.Empty : this.EdCdeExamTypeId.ToString()).GetHashCode() ^ 
					((this.IsLastYear == null) ? string.Empty : this.IsLastYear.ToString()).GetHashCode() ^ 
					((this.RetakeFlg == null) ? string.Empty : this.RetakeFlg.ToString()).GetHashCode() ^ 
					((this.EdCodeCourseCaseId == null) ? string.Empty : this.EdCodeCourseCaseId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdStudCourseRegBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdStudCourseRegBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdStudCourseRegBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdStudCourseRegBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdStudCourseRegBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdStudCourseRegBase Object1, EdStudCourseRegBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdStudCourseRegId != Object2.EdStudCourseRegId)
				equal = false;
			if (Object1.EdCourseId != Object2.EdCourseId)
				equal = false;
			if ( Object1.RegDate != null && Object2.RegDate != null )
			{
				if (Object1.RegDate != Object2.RegDate)
					equal = false;
			}
			else if (Object1.RegDate == null ^ Object2.RegDate == null )
			{
				equal = false;
			}
			if (Object1.AuditFlg != Object2.AuditFlg)
				equal = false;
			if (Object1.RepeatFlg != Object2.RepeatFlg)
				equal = false;
			if (Object1.IsLast != Object2.IsLast)
				equal = false;
			if ( Object1.AsFacultyInfoId != null && Object2.AsFacultyInfoId != null )
			{
				if (Object1.AsFacultyInfoId != Object2.AsFacultyInfoId)
					equal = false;
			}
			else if (Object1.AsFacultyInfoId == null ^ Object2.AsFacultyInfoId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeCourseStatusId != null && Object2.EdCodeCourseStatusId != null )
			{
				if (Object1.EdCodeCourseStatusId != Object2.EdCodeCourseStatusId)
					equal = false;
			}
			else if (Object1.EdCodeCourseStatusId == null ^ Object2.EdCodeCourseStatusId == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeGradingId != null && Object2.EdCodeGradingId != null )
			{
				if (Object1.EdCodeGradingId != Object2.EdCodeGradingId)
					equal = false;
			}
			else if (Object1.EdCodeGradingId == null ^ Object2.EdCodeGradingId == null )
			{
				equal = false;
			}
			if ( Object1.CourseDegree != null && Object2.CourseDegree != null )
			{
				if (Object1.CourseDegree != Object2.CourseDegree)
					equal = false;
			}
			else if (Object1.CourseDegree == null ^ Object2.CourseDegree == null )
			{
				equal = false;
			}
			if ( Object1.CoursePoint != null && Object2.CoursePoint != null )
			{
				if (Object1.CoursePoint != Object2.CoursePoint)
					equal = false;
			}
			else if (Object1.CoursePoint == null ^ Object2.CoursePoint == null )
			{
				equal = false;
			}
			if ( Object1.EntPolicyGradingHdrId != null && Object2.EntPolicyGradingHdrId != null )
			{
				if (Object1.EntPolicyGradingHdrId != Object2.EntPolicyGradingHdrId)
					equal = false;
			}
			else if (Object1.EntPolicyGradingHdrId == null ^ Object2.EntPolicyGradingHdrId == null )
			{
				equal = false;
			}
			if ( Object1.GsCodePassFailId != null && Object2.GsCodePassFailId != null )
			{
				if (Object1.GsCodePassFailId != Object2.GsCodePassFailId)
					equal = false;
			}
			else if (Object1.GsCodePassFailId == null ^ Object2.GsCodePassFailId == null )
			{
				equal = false;
			}
			if (Object1.EdStudSemesterId != Object2.EdStudSemesterId)
				equal = false;
			if (Object1.AddGpaFlg != Object2.AddGpaFlg)
				equal = false;
			if ( Object1.EntPolicyAssessHdrId != null && Object2.EntPolicyAssessHdrId != null )
			{
				if (Object1.EntPolicyAssessHdrId != Object2.EntPolicyAssessHdrId)
					equal = false;
			}
			else if (Object1.EntPolicyAssessHdrId == null ^ Object2.EntPolicyAssessHdrId == null )
			{
				equal = false;
			}
			if (Object1.IncompFlg != Object2.IncompFlg)
				equal = false;
			if (Object1.HideFlg != Object2.HideFlg)
				equal = false;
			if ( Object1.HideReason != null && Object2.HideReason != null )
			{
				if (Object1.HideReason != Object2.HideReason)
					equal = false;
			}
			else if (Object1.HideReason == null ^ Object2.HideReason == null )
			{
				equal = false;
			}
			if ( Object1.EdCourseSubId != null && Object2.EdCourseSubId != null )
			{
				if (Object1.EdCourseSubId != Object2.EdCourseSubId)
					equal = false;
			}
			else if (Object1.EdCourseSubId == null ^ Object2.EdCourseSubId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.SeFormId != null && Object2.SeFormId != null )
			{
				if (Object1.SeFormId != Object2.SeFormId)
					equal = false;
			}
			else if (Object1.SeFormId == null ^ Object2.SeFormId == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.IsResultApproved != null && Object2.IsResultApproved != null )
			{
				if (Object1.IsResultApproved != Object2.IsResultApproved)
					equal = false;
			}
			else if (Object1.IsResultApproved == null ^ Object2.IsResultApproved == null )
			{
				equal = false;
			}
			if ( Object1.RepeatNo != null && Object2.RepeatNo != null )
			{
				if (Object1.RepeatNo != Object2.RepeatNo)
					equal = false;
			}
			else if (Object1.RepeatNo == null ^ Object2.RepeatNo == null )
			{
				equal = false;
			}
			if ( Object1.PayFlg != null && Object2.PayFlg != null )
			{
				if (Object1.PayFlg != Object2.PayFlg)
					equal = false;
			}
			else if (Object1.PayFlg == null ^ Object2.PayFlg == null )
			{
				equal = false;
			}
			if ( Object1.PayAmount != null && Object2.PayAmount != null )
			{
				if (Object1.PayAmount != Object2.PayAmount)
					equal = false;
			}
			else if (Object1.PayAmount == null ^ Object2.PayAmount == null )
			{
				equal = false;
			}
			if ( Object1.AbsFlg != null && Object2.AbsFlg != null )
			{
				if (Object1.AbsFlg != Object2.AbsFlg)
					equal = false;
			}
			else if (Object1.AbsFlg == null ^ Object2.AbsFlg == null )
			{
				equal = false;
			}
			if ( Object1.ReceiptNo != null && Object2.ReceiptNo != null )
			{
				if (Object1.ReceiptNo != Object2.ReceiptNo)
					equal = false;
			}
			else if (Object1.ReceiptNo == null ^ Object2.ReceiptNo == null )
			{
				equal = false;
			}
			if ( Object1.ReceiptDate != null && Object2.ReceiptDate != null )
			{
				if (Object1.ReceiptDate != Object2.ReceiptDate)
					equal = false;
			}
			else if (Object1.ReceiptDate == null ^ Object2.ReceiptDate == null )
			{
				equal = false;
			}
			if ( Object1.ByforceFlg != null && Object2.ByforceFlg != null )
			{
				if (Object1.ByforceFlg != Object2.ByforceFlg)
					equal = false;
			}
			else if (Object1.ByforceFlg == null ^ Object2.ByforceFlg == null )
			{
				equal = false;
			}
			if ( Object1.EdCdeCrsRegTypeId != null && Object2.EdCdeCrsRegTypeId != null )
			{
				if (Object1.EdCdeCrsRegTypeId != Object2.EdCdeCrsRegTypeId)
					equal = false;
			}
			else if (Object1.EdCdeCrsRegTypeId == null ^ Object2.EdCdeCrsRegTypeId == null )
			{
				equal = false;
			}
			if ( Object1.EntCoursePkgDtlId != null && Object2.EntCoursePkgDtlId != null )
			{
				if (Object1.EntCoursePkgDtlId != Object2.EntCoursePkgDtlId)
					equal = false;
			}
			else if (Object1.EntCoursePkgDtlId == null ^ Object2.EntCoursePkgDtlId == null )
			{
				equal = false;
			}
			if ( Object1.EdAcadPlanDtlId != null && Object2.EdAcadPlanDtlId != null )
			{
				if (Object1.EdAcadPlanDtlId != Object2.EdAcadPlanDtlId)
					equal = false;
			}
			else if (Object1.EdAcadPlanDtlId == null ^ Object2.EdAcadPlanDtlId == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.SeUserApproveId != null && Object2.SeUserApproveId != null )
			{
				if (Object1.SeUserApproveId != Object2.SeUserApproveId)
					equal = false;
			}
			else if (Object1.SeUserApproveId == null ^ Object2.SeUserApproveId == null )
			{
				equal = false;
			}
			if ( Object1.CrsRaiseMark != null && Object2.CrsRaiseMark != null )
			{
				if (Object1.CrsRaiseMark != Object2.CrsRaiseMark)
					equal = false;
			}
			else if (Object1.CrsRaiseMark == null ^ Object2.CrsRaiseMark == null )
			{
				equal = false;
			}
			if ( Object1.CrsCh != null && Object2.CrsCh != null )
			{
				if (Object1.CrsCh != Object2.CrsCh)
					equal = false;
			}
			else if (Object1.CrsCh == null ^ Object2.CrsCh == null )
			{
				equal = false;
			}
			if ( Object1.AudtNote != null && Object2.AudtNote != null )
			{
				if (Object1.AudtNote != Object2.AudtNote)
					equal = false;
			}
			else if (Object1.AudtNote == null ^ Object2.AudtNote == null )
			{
				equal = false;
			}
			if ( Object1.ScSectionGroupHdrId != null && Object2.ScSectionGroupHdrId != null )
			{
				if (Object1.ScSectionGroupHdrId != Object2.ScSectionGroupHdrId)
					equal = false;
			}
			else if (Object1.ScSectionGroupHdrId == null ^ Object2.ScSectionGroupHdrId == null )
			{
				equal = false;
			}
			if ( Object1.EdCourseOrgId != null && Object2.EdCourseOrgId != null )
			{
				if (Object1.EdCourseOrgId != Object2.EdCourseOrgId)
					equal = false;
			}
			else if (Object1.EdCourseOrgId == null ^ Object2.EdCourseOrgId == null )
			{
				equal = false;
			}
			if ( Object1.EdCdeExamTypeId != null && Object2.EdCdeExamTypeId != null )
			{
				if (Object1.EdCdeExamTypeId != Object2.EdCdeExamTypeId)
					equal = false;
			}
			else if (Object1.EdCdeExamTypeId == null ^ Object2.EdCdeExamTypeId == null )
			{
				equal = false;
			}
			if ( Object1.IsLastYear != null && Object2.IsLastYear != null )
			{
				if (Object1.IsLastYear != Object2.IsLastYear)
					equal = false;
			}
			else if (Object1.IsLastYear == null ^ Object2.IsLastYear == null )
			{
				equal = false;
			}
			if ( Object1.RetakeFlg != null && Object2.RetakeFlg != null )
			{
				if (Object1.RetakeFlg != Object2.RetakeFlg)
					equal = false;
			}
			else if (Object1.RetakeFlg == null ^ Object2.RetakeFlg == null )
			{
				equal = false;
			}
			if ( Object1.EdCodeCourseCaseId != null && Object2.EdCodeCourseCaseId != null )
			{
				if (Object1.EdCodeCourseCaseId != Object2.EdCodeCourseCaseId)
					equal = false;
			}
			else if (Object1.EdCodeCourseCaseId == null ^ Object2.EdCodeCourseCaseId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdStudCourseRegBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdStudCourseRegComparer GetComparer()
        {
            return new EdStudCourseRegComparer();
        }
        */

        // Comparer delegates back to EdStudCourseReg
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdStudCourseReg rhs, EdStudCourseRegColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdStudCourseRegColumn.EdStudCourseRegId:
            		return this.EdStudCourseRegId.CompareTo(rhs.EdStudCourseRegId);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.EdCourseId:
            		return this.EdCourseId.CompareTo(rhs.EdCourseId);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.RegDate:
            		return this.RegDate.Value.CompareTo(rhs.RegDate.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.AuditFlg:
            		return this.AuditFlg.CompareTo(rhs.AuditFlg);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.RepeatFlg:
            		return this.RepeatFlg.CompareTo(rhs.RepeatFlg);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.IsLast:
            		return this.IsLast.CompareTo(rhs.IsLast);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.AsFacultyInfoId:
            		return this.AsFacultyInfoId.Value.CompareTo(rhs.AsFacultyInfoId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.EdCodeCourseStatusId:
            		return this.EdCodeCourseStatusId.Value.CompareTo(rhs.EdCodeCourseStatusId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.EdCodeGradingId:
            		return this.EdCodeGradingId.Value.CompareTo(rhs.EdCodeGradingId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.CourseDegree:
            		return this.CourseDegree.Value.CompareTo(rhs.CourseDegree.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.CoursePoint:
            		return this.CoursePoint.Value.CompareTo(rhs.CoursePoint.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.EntPolicyGradingHdrId:
            		return this.EntPolicyGradingHdrId.Value.CompareTo(rhs.EntPolicyGradingHdrId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.GsCodePassFailId:
            		return this.GsCodePassFailId.Value.CompareTo(rhs.GsCodePassFailId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.EdStudSemesterId:
            		return this.EdStudSemesterId.CompareTo(rhs.EdStudSemesterId);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.AddGpaFlg:
            		return this.AddGpaFlg.CompareTo(rhs.AddGpaFlg);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.EntPolicyAssessHdrId:
            		return this.EntPolicyAssessHdrId.Value.CompareTo(rhs.EntPolicyAssessHdrId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.IncompFlg:
            		return this.IncompFlg.CompareTo(rhs.IncompFlg);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.HideFlg:
            		return this.HideFlg.CompareTo(rhs.HideFlg);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.HideReason:
            		return this.HideReason.CompareTo(rhs.HideReason);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.EdCourseSubId:
            		return this.EdCourseSubId.Value.CompareTo(rhs.EdCourseSubId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.SeFormId:
            		return this.SeFormId.Value.CompareTo(rhs.SeFormId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.IsResultApproved:
            		return this.IsResultApproved.Value.CompareTo(rhs.IsResultApproved.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.RepeatNo:
            		return this.RepeatNo.Value.CompareTo(rhs.RepeatNo.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.PayFlg:
            		return this.PayFlg.Value.CompareTo(rhs.PayFlg.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.PayAmount:
            		return this.PayAmount.Value.CompareTo(rhs.PayAmount.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.AbsFlg:
            		return this.AbsFlg.Value.CompareTo(rhs.AbsFlg.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.ReceiptNo:
            		return this.ReceiptNo.CompareTo(rhs.ReceiptNo);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.ReceiptDate:
            		return this.ReceiptDate.Value.CompareTo(rhs.ReceiptDate.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.ByforceFlg:
            		return this.ByforceFlg.Value.CompareTo(rhs.ByforceFlg.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.EdCdeCrsRegTypeId:
            		return this.EdCdeCrsRegTypeId.Value.CompareTo(rhs.EdCdeCrsRegTypeId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.EntCoursePkgDtlId:
            		return this.EntCoursePkgDtlId.Value.CompareTo(rhs.EntCoursePkgDtlId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.EdAcadPlanDtlId:
            		return this.EdAcadPlanDtlId.Value.CompareTo(rhs.EdAcadPlanDtlId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.SeUserApproveId:
            		return this.SeUserApproveId.Value.CompareTo(rhs.SeUserApproveId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.CrsRaiseMark:
            		return this.CrsRaiseMark.Value.CompareTo(rhs.CrsRaiseMark.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.CrsCh:
            		return this.CrsCh.Value.CompareTo(rhs.CrsCh.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.AudtNote:
            		return this.AudtNote.CompareTo(rhs.AudtNote);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.ScSectionGroupHdrId:
            		return this.ScSectionGroupHdrId.Value.CompareTo(rhs.ScSectionGroupHdrId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.EdCourseOrgId:
            		return this.EdCourseOrgId.Value.CompareTo(rhs.EdCourseOrgId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.EdCdeExamTypeId:
            		return this.EdCdeExamTypeId.Value.CompareTo(rhs.EdCdeExamTypeId.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.IsLastYear:
            		return this.IsLastYear.Value.CompareTo(rhs.IsLastYear.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.RetakeFlg:
            		return this.RetakeFlg.Value.CompareTo(rhs.RetakeFlg.Value);
            		
            		                 
            	
            	
            	case EdStudCourseRegColumn.EdCodeCourseCaseId:
            		return this.EdCodeCourseCaseId.Value.CompareTo(rhs.EdCodeCourseCaseId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdStudCourseRegKey> Members
		
		// member variable for the EntityId property
		private EdStudCourseRegKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdStudCourseRegKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdStudCourseRegKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdStudCourseReg")
					.Append("|").Append( this.EdStudCourseRegId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{46}{45}- EdStudCourseRegId: {0}{45}- EdCourseId: {1}{45}- RegDate: {2}{45}- AuditFlg: {3}{45}- RepeatFlg: {4}{45}- IsLast: {5}{45}- AsFacultyInfoId: {6}{45}- EdCodeCourseStatusId: {7}{45}- EdCodeGradingId: {8}{45}- CourseDegree: {9}{45}- CoursePoint: {10}{45}- EntPolicyGradingHdrId: {11}{45}- GsCodePassFailId: {12}{45}- EdStudSemesterId: {13}{45}- AddGpaFlg: {14}{45}- EntPolicyAssessHdrId: {15}{45}- IncompFlg: {16}{45}- HideFlg: {17}{45}- HideReason: {18}{45}- EdCourseSubId: {19}{45}- LastDate: {20}{45}- SeFormId: {21}{45}- SeUserId: {22}{45}- IsResultApproved: {23}{45}- RepeatNo: {24}{45}- PayFlg: {25}{45}- PayAmount: {26}{45}- AbsFlg: {27}{45}- ReceiptNo: {28}{45}- ReceiptDate: {29}{45}- ByforceFlg: {30}{45}- EdCdeCrsRegTypeId: {31}{45}- EntCoursePkgDtlId: {32}{45}- EdAcadPlanDtlId: {33}{45}- Notes: {34}{45}- SeUserApproveId: {35}{45}- CrsRaiseMark: {36}{45}- CrsCh: {37}{45}- AudtNote: {38}{45}- ScSectionGroupHdrId: {39}{45}- EdCourseOrgId: {40}{45}- EdCdeExamTypeId: {41}{45}- IsLastYear: {42}{45}- RetakeFlg: {43}{45}- EdCodeCourseCaseId: {44}{45}{47}", 
				this.EdStudCourseRegId,
				this.EdCourseId,
				(this.RegDate == null) ? string.Empty : this.RegDate.ToString(),
				this.AuditFlg,
				this.RepeatFlg,
				this.IsLast,
				(this.AsFacultyInfoId == null) ? string.Empty : this.AsFacultyInfoId.ToString(),
				(this.EdCodeCourseStatusId == null) ? string.Empty : this.EdCodeCourseStatusId.ToString(),
				(this.EdCodeGradingId == null) ? string.Empty : this.EdCodeGradingId.ToString(),
				(this.CourseDegree == null) ? string.Empty : this.CourseDegree.ToString(),
				(this.CoursePoint == null) ? string.Empty : this.CoursePoint.ToString(),
				(this.EntPolicyGradingHdrId == null) ? string.Empty : this.EntPolicyGradingHdrId.ToString(),
				(this.GsCodePassFailId == null) ? string.Empty : this.GsCodePassFailId.ToString(),
				this.EdStudSemesterId,
				this.AddGpaFlg,
				(this.EntPolicyAssessHdrId == null) ? string.Empty : this.EntPolicyAssessHdrId.ToString(),
				this.IncompFlg,
				this.HideFlg,
				(this.HideReason == null) ? string.Empty : this.HideReason.ToString(),
				(this.EdCourseSubId == null) ? string.Empty : this.EdCourseSubId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.SeFormId == null) ? string.Empty : this.SeFormId.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.IsResultApproved == null) ? string.Empty : this.IsResultApproved.ToString(),
				(this.RepeatNo == null) ? string.Empty : this.RepeatNo.ToString(),
				(this.PayFlg == null) ? string.Empty : this.PayFlg.ToString(),
				(this.PayAmount == null) ? string.Empty : this.PayAmount.ToString(),
				(this.AbsFlg == null) ? string.Empty : this.AbsFlg.ToString(),
				(this.ReceiptNo == null) ? string.Empty : this.ReceiptNo.ToString(),
				(this.ReceiptDate == null) ? string.Empty : this.ReceiptDate.ToString(),
				(this.ByforceFlg == null) ? string.Empty : this.ByforceFlg.ToString(),
				(this.EdCdeCrsRegTypeId == null) ? string.Empty : this.EdCdeCrsRegTypeId.ToString(),
				(this.EntCoursePkgDtlId == null) ? string.Empty : this.EntCoursePkgDtlId.ToString(),
				(this.EdAcadPlanDtlId == null) ? string.Empty : this.EdAcadPlanDtlId.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.SeUserApproveId == null) ? string.Empty : this.SeUserApproveId.ToString(),
				(this.CrsRaiseMark == null) ? string.Empty : this.CrsRaiseMark.ToString(),
				(this.CrsCh == null) ? string.Empty : this.CrsCh.ToString(),
				(this.AudtNote == null) ? string.Empty : this.AudtNote.ToString(),
				(this.ScSectionGroupHdrId == null) ? string.Empty : this.ScSectionGroupHdrId.ToString(),
				(this.EdCourseOrgId == null) ? string.Empty : this.EdCourseOrgId.ToString(),
				(this.EdCdeExamTypeId == null) ? string.Empty : this.EdCdeExamTypeId.ToString(),
				(this.IsLastYear == null) ? string.Empty : this.IsLastYear.ToString(),
				(this.RetakeFlg == null) ? string.Empty : this.RetakeFlg.ToString(),
				(this.EdCodeCourseCaseId == null) ? string.Empty : this.EdCodeCourseCaseId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_STUD_COURSE_REG' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdStudCourseRegEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_STUD_COURSE_REG_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_STUD_COURSE_REG"</remarks>
		public System.Decimal EdStudCourseRegId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdStudCourseRegId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_COURSE_ID : 
		/// </summary>
		public System.Decimal		  EdCourseId = 0.0m;
		
		/// <summary>
		/// REG_DATE : 
		/// </summary>
		public System.DateTime?		  RegDate = null;
		
		/// <summary>
		/// AUDIT_FLG : 
		/// </summary>
		public System.Decimal		  AuditFlg = 0.0m;
		
		/// <summary>
		/// REPEAT_FLG : 
		/// </summary>
		public System.Decimal		  RepeatFlg = 0.0m;
		
		/// <summary>
		/// IS_LAST : 
		/// </summary>
		public System.Decimal		  IsLast = 0.0m;
		
		/// <summary>
		/// AS_FACULTY_INFO_ID : 
		/// </summary>
		public System.Decimal?		  AsFacultyInfoId = null;
		
		/// <summary>
		/// ED_CODE_COURSE_STATUS_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeCourseStatusId = null;
		
		/// <summary>
		/// ED_CODE_GRADING_ID : 
		/// </summary>
		public System.Decimal?		  EdCodeGradingId = null;
		
		/// <summary>
		/// COURSE_DEGREE : 
		/// </summary>
		public System.Decimal?		  CourseDegree = null;
		
		/// <summary>
		/// COURSE_POINT : 
		/// </summary>
		public System.Decimal?		  CoursePoint = null;
		
		/// <summary>
		/// ENT_POLICY_GRADING_HDR_ID : 
		/// </summary>
		public System.Decimal?		  EntPolicyGradingHdrId = null;
		
		/// <summary>
		/// GS_CODE_PASS_FAIL_ID : 
		/// </summary>
		public System.Decimal?		  GsCodePassFailId = null;
		
		/// <summary>
		/// ED_STUD_SEMESTER_ID : 
		/// </summary>
		public System.Decimal		  EdStudSemesterId = 0.0m;
		
		/// <summary>
		/// ADD_GPA_FLG : =0 not calculated --- =1 calculate course in gpa&CH ---2 Calculated in CH only
		/// </summary>
		public System.Decimal		  AddGpaFlg = 0.0m;
		
		/// <summary>
		/// ENT_POLICY_ASSESS_HDR_ID : 
		/// </summary>
		public System.Decimal?		  EntPolicyAssessHdrId = null;
		
		/// <summary>
		/// INCOMP_FLG : 
		/// </summary>
		public System.Decimal		  IncompFlg = 0.0m;
		
		/// <summary>
		/// HIDE_FLG : set 1 when this record is locked in rasd for staff view
		/// </summary>
		public System.Decimal		  HideFlg = 0.0m;
		
		/// <summary>
		/// HIDE_REASON : reason of lock
		/// </summary>
		public System.String		  HideReason = null;
		
		/// <summary>
		/// ED_COURSE_SUB_ID : XX not used 
		/// </summary>
		public System.Decimal?		  EdCourseSubId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		
		/// <summary>
		/// SE_FORM_ID : 
		/// </summary>
		public System.Decimal?		  SeFormId = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// IS_RESULT_APPROVED : اعتماد نتيجة مقرر
		/// </summary>
		public System.Decimal?		  IsResultApproved = null;
		
		/// <summary>
		/// REPEAT_NO : RETAKE_NO
		/// 		/// 0 > no retake
		/// 		/// 1 > retake passed course
		/// 		/// 2 > retake failed course
		/// 		/// 
		/// 		/// any course could be retaked once
		/// </summary>
		public System.Decimal?		  RepeatNo = null;
		
		/// <summary>
		/// PAY_FLG : 
		/// </summary>
		public System.Decimal?		  PayFlg = null;
		
		/// <summary>
		/// PAY_AMOUNT : 
		/// </summary>
		public System.Decimal?		  PayAmount = null;
		
		/// <summary>
		/// ABS_FLG : 
		/// </summary>
		public System.Decimal?		  AbsFlg = null;
		
		/// <summary>
		/// RECEIPT_NO : 
		/// </summary>
		public System.String		  ReceiptNo = null;
		
		/// <summary>
		/// RECEIPT_DATE : 
		/// </summary>
		public System.DateTime?		  ReceiptDate = null;
		
		/// <summary>
		/// BYFORCE_FLG : 
		/// </summary>
		public System.Decimal?		  ByforceFlg = null;
		
		/// <summary>
		/// ED_CDE_CRS_REG_TYPE_ID : 
		/// </summary>
		public System.Decimal?		  EdCdeCrsRegTypeId = null;
		
		/// <summary>
		/// ENT_COURSE_PKG_DTL_ID : 
		/// </summary>
		public System.Decimal?		  EntCoursePkgDtlId = null;
		
		/// <summary>
		/// ED_ACAD_PLAN_DTL_ID : 
		/// </summary>
		public System.Decimal?		  EdAcadPlanDtlId = null;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// SE_USER_APPROVE_ID : Result Approved
		/// </summary>
		public System.Decimal?		  SeUserApproveId = null;
		
		/// <summary>
		/// CRS_RAISE_MARK : الدرجة المرفوعه
		/// </summary>
		public System.Decimal?		  CrsRaiseMark = null;
		
		/// <summary>
		/// CRS_CH : 
		/// </summary>
		public System.Int32?		  CrsCh = null;
		
		/// <summary>
		/// AUDT_NOTE : 
		/// </summary>
		public System.String		  AudtNote = null;
		
		/// <summary>
		/// SC_SECTION_GROUP_HDR_ID : مجموعة سكاشن المقرر
		/// </summary>
		public System.Decimal?		  ScSectionGroupHdrId = null;
		
		/// <summary>
		/// ED_COURSE_ORG_ID : 
		/// </summary>
		public System.Decimal?		  EdCourseOrgId = null;
		
		/// <summary>
		/// ED_CDE_EXAM_TYPE_ID : نوع الامتحان: تكميلى- اعادة
		/// </summary>
		public System.Decimal?		  EdCdeExamTypeId = null;
		
		/// <summary>
		/// IS_LAST_YEAR : 
		/// </summary>
		public System.Boolean?		  IsLastYear = null;
		
		/// <summary>
		/// RETAKE_FLG : 
		/// </summary>
		public System.Int16?		  RetakeFlg = null;
		
		/// <summary>
		/// ED_CODE_COURSE_CASE_ID : 
		/// </summary>
		public System.Int32?		  EdCodeCourseCaseId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AsFacultyInfo _asFacultyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AsFacultyInfo"/>.
		/// </summary>
		/// <value>The source AsFacultyInfo for AsFacultyInfoId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AsFacultyInfo AsFacultyInfoIdSource
      	{
            get { return this._asFacultyInfoIdSource; }
            set { this._asFacultyInfoIdSource = value; }
      	}
		private EdAcadPlanDtl _edAcadPlanDtlIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadPlanDtl"/>.
		/// </summary>
		/// <value>The source EdAcadPlanDtl for EdAcadPlanDtlId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadPlanDtl EdAcadPlanDtlIdSource
      	{
            get { return this._edAcadPlanDtlIdSource; }
            set { this._edAcadPlanDtlIdSource = value; }
      	}
		private EdCdeCrsRegType _edCdeCrsRegTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeCrsRegType"/>.
		/// </summary>
		/// <value>The source EdCdeCrsRegType for EdCdeCrsRegTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCdeCrsRegType EdCdeCrsRegTypeIdSource
      	{
            get { return this._edCdeCrsRegTypeIdSource; }
            set { this._edCdeCrsRegTypeIdSource = value; }
      	}
		private EdCdeExamType _edCdeExamTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCdeExamType"/>.
		/// </summary>
		/// <value>The source EdCdeExamType for EdCdeExamTypeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCdeExamType EdCdeExamTypeIdSource
      	{
            get { return this._edCdeExamTypeIdSource; }
            set { this._edCdeExamTypeIdSource = value; }
      	}
		private EdCodeCourseCase _edCodeCourseCaseIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseCase"/>.
		/// </summary>
		/// <value>The source EdCodeCourseCase for EdCodeCourseCaseId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeCourseCase EdCodeCourseCaseIdSource
      	{
            get { return this._edCodeCourseCaseIdSource; }
            set { this._edCodeCourseCaseIdSource = value; }
      	}
		private EdCodeCourseStatus _edCodeCourseStatusIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeCourseStatus"/>.
		/// </summary>
		/// <value>The source EdCodeCourseStatus for EdCodeCourseStatusId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeCourseStatus EdCodeCourseStatusIdSource
      	{
            get { return this._edCodeCourseStatusIdSource; }
            set { this._edCodeCourseStatusIdSource = value; }
      	}
		private EdCodeGrading _edCodeGradingIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCodeGrading"/>.
		/// </summary>
		/// <value>The source EdCodeGrading for EdCodeGradingId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCodeGrading EdCodeGradingIdSource
      	{
            get { return this._edCodeGradingIdSource; }
            set { this._edCodeGradingIdSource = value; }
      	}
		private EdCourse _edCourseIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return this._edCourseIdSource; }
            set { this._edCourseIdSource = value; }
      	}
		private EdCourse _edCourseOrgIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseOrgId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCourse EdCourseOrgIdSource
      	{
            get { return this._edCourseOrgIdSource; }
            set { this._edCourseOrgIdSource = value; }
      	}
		private EdStudSemester _edStudSemesterIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdStudSemester"/>.
		/// </summary>
		/// <value>The source EdStudSemester for EdStudSemesterId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdStudSemester EdStudSemesterIdSource
      	{
            get { return this._edStudSemesterIdSource; }
            set { this._edStudSemesterIdSource = value; }
      	}
		private EntCoursePkgDtl _entCoursePkgDtlIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntCoursePkgDtl"/>.
		/// </summary>
		/// <value>The source EntCoursePkgDtl for EntCoursePkgDtlId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntCoursePkgDtl EntCoursePkgDtlIdSource
      	{
            get { return this._entCoursePkgDtlIdSource; }
            set { this._entCoursePkgDtlIdSource = value; }
      	}
		private EntPolicyAssessHdr _entPolicyAssessHdrIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntPolicyAssessHdr"/>.
		/// </summary>
		/// <value>The source EntPolicyAssessHdr for EntPolicyAssessHdrId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntPolicyAssessHdr EntPolicyAssessHdrIdSource
      	{
            get { return this._entPolicyAssessHdrIdSource; }
            set { this._entPolicyAssessHdrIdSource = value; }
      	}
		private EntPolicyGradingHdr _entPolicyGradingHdrIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntPolicyGradingHdr"/>.
		/// </summary>
		/// <value>The source EntPolicyGradingHdr for EntPolicyGradingHdrId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntPolicyGradingHdr EntPolicyGradingHdrIdSource
      	{
            get { return this._entPolicyGradingHdrIdSource; }
            set { this._entPolicyGradingHdrIdSource = value; }
      	}
		private GsCodePassFail _gsCodePassFailIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GsCodePassFail"/>.
		/// </summary>
		/// <value>The source GsCodePassFail for GsCodePassFailId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual GsCodePassFail GsCodePassFailIdSource
      	{
            get { return this._gsCodePassFailIdSource; }
            set { this._gsCodePassFailIdSource = value; }
      	}
		private ScSectionGroupHdr _scSectionGroupHdrIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ScSectionGroupHdr"/>.
		/// </summary>
		/// <value>The source ScSectionGroupHdr for ScSectionGroupHdrId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual ScSectionGroupHdr ScSectionGroupHdrIdSource
      	{
            get { return this._scSectionGroupHdrIdSource; }
            set { this._scSectionGroupHdrIdSource = value; }
      	}
		private SeForm _seFormIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeForm"/>.
		/// </summary>
		/// <value>The source SeForm for SeFormId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeForm SeFormIdSource
      	{
            get { return this._seFormIdSource; }
            set { this._seFormIdSource = value; }
      	}
		private SeUser _seUserIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeUser SeUserIdSource
      	{
            get { return this._seUserIdSource; }
            set { this._seUserIdSource = value; }
      	}
		private SeUser _seUserApproveIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for SeUserApproveId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeUser SeUserApproveIdSource
      	{
            get { return this._seUserApproveIdSource; }
            set { this._seUserApproveIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region GsAttchdDocCollection
		
		private TList<GsAttchdDoc> _gsAttchdDocEdStudCourseRegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _gsAttchdDocEdStudCourseRegId
		/// </summary>
		
		public TList<GsAttchdDoc> GsAttchdDocCollection
		{
			get
			{
				if (_gsAttchdDocEdStudCourseRegId == null)
				{
				_gsAttchdDocEdStudCourseRegId = new TList<GsAttchdDoc>();
				}
	
				return _gsAttchdDocEdStudCourseRegId;
			}
			set { _gsAttchdDocEdStudCourseRegId = value; }
		}
		
		#endregion

		#region EdStudCourseRegAddCollection
		
		private TList<EdStudCourseRegAdd> _edStudCourseRegAddEdStudCourseRegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCourseRegAddEdStudCourseRegId
		/// </summary>
		
		public TList<EdStudCourseRegAdd> EdStudCourseRegAddCollection
		{
			get
			{
				if (_edStudCourseRegAddEdStudCourseRegId == null)
				{
				_edStudCourseRegAddEdStudCourseRegId = new TList<EdStudCourseRegAdd>();
				}
	
				return _edStudCourseRegAddEdStudCourseRegId;
			}
			set { _edStudCourseRegAddEdStudCourseRegId = value; }
		}
		
		#endregion

		#region EdStudGroupCollection
		
		private TList<EdStudGroup> _edStudGroupEdStudCourseRegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudGroupEdStudCourseRegId
		/// </summary>
		
		public TList<EdStudGroup> EdStudGroupCollection
		{
			get
			{
				if (_edStudGroupEdStudCourseRegId == null)
				{
				_edStudGroupEdStudCourseRegId = new TList<EdStudGroup>();
				}
	
				return _edStudGroupEdStudCourseRegId;
			}
			set { _edStudGroupEdStudCourseRegId = value; }
		}
		
		#endregion

		#region EdStudCourseRegAssessSubCollection
		
		private TList<EdStudCourseRegAssessSub> _edStudCourseRegAssessSubEdStudCourseRegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCourseRegAssessSubEdStudCourseRegId
		/// </summary>
		
		public TList<EdStudCourseRegAssessSub> EdStudCourseRegAssessSubCollection
		{
			get
			{
				if (_edStudCourseRegAssessSubEdStudCourseRegId == null)
				{
				_edStudCourseRegAssessSubEdStudCourseRegId = new TList<EdStudCourseRegAssessSub>();
				}
	
				return _edStudCourseRegAssessSubEdStudCourseRegId;
			}
			set { _edStudCourseRegAssessSubEdStudCourseRegId = value; }
		}
		
		#endregion

		#region ScStudGroupCollection
		
		private TList<ScStudGroup> _scStudGroupEdStudCourseRegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _scStudGroupEdStudCourseRegId
		/// </summary>
		
		public TList<ScStudGroup> ScStudGroupCollection
		{
			get
			{
				if (_scStudGroupEdStudCourseRegId == null)
				{
				_scStudGroupEdStudCourseRegId = new TList<ScStudGroup>();
				}
	
				return _scStudGroupEdStudCourseRegId;
			}
			set { _scStudGroupEdStudCourseRegId = value; }
		}
		
		#endregion

		#region EdStudPnltyCourseCollection
		
		private TList<EdStudPnltyCourse> _edStudPnltyCourseEdStudCourseRegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudPnltyCourseEdStudCourseRegId
		/// </summary>
		
		public TList<EdStudPnltyCourse> EdStudPnltyCourseCollection
		{
			get
			{
				if (_edStudPnltyCourseEdStudCourseRegId == null)
				{
				_edStudPnltyCourseEdStudCourseRegId = new TList<EdStudPnltyCourse>();
				}
	
				return _edStudPnltyCourseEdStudCourseRegId;
			}
			set { _edStudPnltyCourseEdStudCourseRegId = value; }
		}
		
		#endregion

		#region EdStdCrsExamCollection
		
		private TList<EdStdCrsExam> _edStdCrsExamEdStudCourseRegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStdCrsExamEdStudCourseRegId
		/// </summary>
		
		public TList<EdStdCrsExam> EdStdCrsExamCollection
		{
			get
			{
				if (_edStdCrsExamEdStudCourseRegId == null)
				{
				_edStdCrsExamEdStudCourseRegId = new TList<EdStdCrsExam>();
				}
	
				return _edStdCrsExamEdStudCourseRegId;
			}
			set { _edStdCrsExamEdStudCourseRegId = value; }
		}
		
		#endregion

		#region EdStudCourseRegAssessCollection
		
		private TList<EdStudCourseRegAssess> _edStudCourseRegAssessEdStudCourseRegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCourseRegAssessEdStudCourseRegId
		/// </summary>
		
		public TList<EdStudCourseRegAssess> EdStudCourseRegAssessCollection
		{
			get
			{
				if (_edStudCourseRegAssessEdStudCourseRegId == null)
				{
				_edStudCourseRegAssessEdStudCourseRegId = new TList<EdStudCourseRegAssess>();
				}
	
				return _edStudCourseRegAssessEdStudCourseRegId;
			}
			set { _edStudCourseRegAssessEdStudCourseRegId = value; }
		}
		
		#endregion

		#region EdStudCourseGrdChngCollection
		
		private TList<EdStudCourseGrdChng> _edStudCourseGrdChngEdStudCourseRegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCourseGrdChngEdStudCourseRegId
		/// </summary>
		
		public TList<EdStudCourseGrdChng> EdStudCourseGrdChngCollection
		{
			get
			{
				if (_edStudCourseGrdChngEdStudCourseRegId == null)
				{
				_edStudCourseGrdChngEdStudCourseRegId = new TList<EdStudCourseGrdChng>();
				}
	
				return _edStudCourseGrdChngEdStudCourseRegId;
			}
			set { _edStudCourseGrdChngEdStudCourseRegId = value; }
		}
		
		#endregion

		#region EdStudCourseRegTopicCollection
		
		private TList<EdStudCourseRegTopic> _edStudCourseRegTopicEdStudCourseRegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCourseRegTopicEdStudCourseRegId
		/// </summary>
		
		public TList<EdStudCourseRegTopic> EdStudCourseRegTopicCollection
		{
			get
			{
				if (_edStudCourseRegTopicEdStudCourseRegId == null)
				{
				_edStudCourseRegTopicEdStudCourseRegId = new TList<EdStudCourseRegTopic>();
				}
	
				return _edStudCourseRegTopicEdStudCourseRegId;
			}
			set { _edStudCourseRegTopicEdStudCourseRegId = value; }
		}
		
		#endregion

		#region FeeItemTrnsBlncCollection
		
		private TList<FeeItemTrnsBlnc> _feeItemTrnsBlncEdStudCourseRegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _feeItemTrnsBlncEdStudCourseRegId
		/// </summary>
		
		public TList<FeeItemTrnsBlnc> FeeItemTrnsBlncCollection
		{
			get
			{
				if (_feeItemTrnsBlncEdStudCourseRegId == null)
				{
				_feeItemTrnsBlncEdStudCourseRegId = new TList<FeeItemTrnsBlnc>();
				}
	
				return _feeItemTrnsBlncEdStudCourseRegId;
			}
			set { _feeItemTrnsBlncEdStudCourseRegId = value; }
		}
		
		#endregion

		#region EdStudCourseRegPolcyCollection
		
		private TList<EdStudCourseRegPolcy> _edStudCourseRegPolcyEdStudCourseRegId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCourseRegPolcyEdStudCourseRegId
		/// </summary>
		
		public TList<EdStudCourseRegPolcy> EdStudCourseRegPolcyCollection
		{
			get
			{
				if (_edStudCourseRegPolcyEdStudCourseRegId == null)
				{
				_edStudCourseRegPolcyEdStudCourseRegId = new TList<EdStudCourseRegPolcy>();
				}
	
				return _edStudCourseRegPolcyEdStudCourseRegId;
			}
			set { _edStudCourseRegPolcyEdStudCourseRegId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdStudCourseRegEntityData _tmp = new EdStudCourseRegEntityData();
						
			_tmp.EdStudCourseRegId = this.EdStudCourseRegId;
			_tmp.OriginalEdStudCourseRegId = this.OriginalEdStudCourseRegId;
			
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.RegDate = this.RegDate;
			_tmp.AuditFlg = this.AuditFlg;
			_tmp.RepeatFlg = this.RepeatFlg;
			_tmp.IsLast = this.IsLast;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdCodeCourseStatusId = this.EdCodeCourseStatusId;
			_tmp.EdCodeGradingId = this.EdCodeGradingId;
			_tmp.CourseDegree = this.CourseDegree;
			_tmp.CoursePoint = this.CoursePoint;
			_tmp.EntPolicyGradingHdrId = this.EntPolicyGradingHdrId;
			_tmp.GsCodePassFailId = this.GsCodePassFailId;
			_tmp.EdStudSemesterId = this.EdStudSemesterId;
			_tmp.AddGpaFlg = this.AddGpaFlg;
			_tmp.EntPolicyAssessHdrId = this.EntPolicyAssessHdrId;
			_tmp.IncompFlg = this.IncompFlg;
			_tmp.HideFlg = this.HideFlg;
			_tmp.HideReason = this.HideReason;
			_tmp.EdCourseSubId = this.EdCourseSubId;
			_tmp.LastDate = this.LastDate;
			_tmp.SeFormId = this.SeFormId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.IsResultApproved = this.IsResultApproved;
			_tmp.RepeatNo = this.RepeatNo;
			_tmp.PayFlg = this.PayFlg;
			_tmp.PayAmount = this.PayAmount;
			_tmp.AbsFlg = this.AbsFlg;
			_tmp.ReceiptNo = this.ReceiptNo;
			_tmp.ReceiptDate = this.ReceiptDate;
			_tmp.ByforceFlg = this.ByforceFlg;
			_tmp.EdCdeCrsRegTypeId = this.EdCdeCrsRegTypeId;
			_tmp.EntCoursePkgDtlId = this.EntCoursePkgDtlId;
			_tmp.EdAcadPlanDtlId = this.EdAcadPlanDtlId;
			_tmp.Notes = this.Notes;
			_tmp.SeUserApproveId = this.SeUserApproveId;
			_tmp.CrsRaiseMark = this.CrsRaiseMark;
			_tmp.CrsCh = this.CrsCh;
			_tmp.AudtNote = this.AudtNote;
			_tmp.ScSectionGroupHdrId = this.ScSectionGroupHdrId;
			_tmp.EdCourseOrgId = this.EdCourseOrgId;
			_tmp.EdCdeExamTypeId = this.EdCdeExamTypeId;
			_tmp.IsLastYear = this.IsLastYear;
			_tmp.RetakeFlg = this.RetakeFlg;
			_tmp.EdCodeCourseCaseId = this.EdCodeCourseCaseId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null)
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource) as AsFacultyInfo;
			if (this.EdAcadPlanDtlIdSource != null)
				_tmp.EdAcadPlanDtlIdSource = MakeCopyOf(this.EdAcadPlanDtlIdSource) as EdAcadPlanDtl;
			if (this.EdCdeCrsRegTypeIdSource != null)
				_tmp.EdCdeCrsRegTypeIdSource = MakeCopyOf(this.EdCdeCrsRegTypeIdSource) as EdCdeCrsRegType;
			if (this.EdCdeExamTypeIdSource != null)
				_tmp.EdCdeExamTypeIdSource = MakeCopyOf(this.EdCdeExamTypeIdSource) as EdCdeExamType;
			if (this.EdCodeCourseCaseIdSource != null)
				_tmp.EdCodeCourseCaseIdSource = MakeCopyOf(this.EdCodeCourseCaseIdSource) as EdCodeCourseCase;
			if (this.EdCodeCourseStatusIdSource != null)
				_tmp.EdCodeCourseStatusIdSource = MakeCopyOf(this.EdCodeCourseStatusIdSource) as EdCodeCourseStatus;
			if (this.EdCodeGradingIdSource != null)
				_tmp.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource) as EdCodeGrading;
			if (this.EdCourseIdSource != null)
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource) as EdCourse;
			if (this.EdCourseOrgIdSource != null)
				_tmp.EdCourseOrgIdSource = MakeCopyOf(this.EdCourseOrgIdSource) as EdCourse;
			if (this.EdStudSemesterIdSource != null)
				_tmp.EdStudSemesterIdSource = MakeCopyOf(this.EdStudSemesterIdSource) as EdStudSemester;
			if (this.EntCoursePkgDtlIdSource != null)
				_tmp.EntCoursePkgDtlIdSource = MakeCopyOf(this.EntCoursePkgDtlIdSource) as EntCoursePkgDtl;
			if (this.EntPolicyAssessHdrIdSource != null)
				_tmp.EntPolicyAssessHdrIdSource = MakeCopyOf(this.EntPolicyAssessHdrIdSource) as EntPolicyAssessHdr;
			if (this.EntPolicyGradingHdrIdSource != null)
				_tmp.EntPolicyGradingHdrIdSource = MakeCopyOf(this.EntPolicyGradingHdrIdSource) as EntPolicyGradingHdr;
			if (this.GsCodePassFailIdSource != null)
				_tmp.GsCodePassFailIdSource = MakeCopyOf(this.GsCodePassFailIdSource) as GsCodePassFail;
			if (this.ScSectionGroupHdrIdSource != null)
				_tmp.ScSectionGroupHdrIdSource = MakeCopyOf(this.ScSectionGroupHdrIdSource) as ScSectionGroupHdr;
			if (this.SeFormIdSource != null)
				_tmp.SeFormIdSource = MakeCopyOf(this.SeFormIdSource) as SeForm;
			if (this.SeUserIdSource != null)
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource) as SeUser;
			if (this.SeUserApproveIdSource != null)
				_tmp.SeUserApproveIdSource = MakeCopyOf(this.SeUserApproveIdSource) as SeUser;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._gsAttchdDocEdStudCourseRegId != null)
				_tmp.GsAttchdDocCollection = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollection); 
			if (this._edStudCourseRegAddEdStudCourseRegId != null)
				_tmp.EdStudCourseRegAddCollection = (TList<EdStudCourseRegAdd>) MakeCopyOf(this.EdStudCourseRegAddCollection); 
			if (this._edStudGroupEdStudCourseRegId != null)
				_tmp.EdStudGroupCollection = (TList<EdStudGroup>) MakeCopyOf(this.EdStudGroupCollection); 
			if (this._edStudCourseRegAssessSubEdStudCourseRegId != null)
				_tmp.EdStudCourseRegAssessSubCollection = (TList<EdStudCourseRegAssessSub>) MakeCopyOf(this.EdStudCourseRegAssessSubCollection); 
			if (this._scStudGroupEdStudCourseRegId != null)
				_tmp.ScStudGroupCollection = (TList<ScStudGroup>) MakeCopyOf(this.ScStudGroupCollection); 
			if (this._edStudPnltyCourseEdStudCourseRegId != null)
				_tmp.EdStudPnltyCourseCollection = (TList<EdStudPnltyCourse>) MakeCopyOf(this.EdStudPnltyCourseCollection); 
			if (this._edStdCrsExamEdStudCourseRegId != null)
				_tmp.EdStdCrsExamCollection = (TList<EdStdCrsExam>) MakeCopyOf(this.EdStdCrsExamCollection); 
			if (this._edStudCourseRegAssessEdStudCourseRegId != null)
				_tmp.EdStudCourseRegAssessCollection = (TList<EdStudCourseRegAssess>) MakeCopyOf(this.EdStudCourseRegAssessCollection); 
			if (this._edStudCourseGrdChngEdStudCourseRegId != null)
				_tmp.EdStudCourseGrdChngCollection = (TList<EdStudCourseGrdChng>) MakeCopyOf(this.EdStudCourseGrdChngCollection); 
			if (this._edStudCourseRegTopicEdStudCourseRegId != null)
				_tmp.EdStudCourseRegTopicCollection = (TList<EdStudCourseRegTopic>) MakeCopyOf(this.EdStudCourseRegTopicCollection); 
			if (this._feeItemTrnsBlncEdStudCourseRegId != null)
				_tmp.FeeItemTrnsBlncCollection = (TList<FeeItemTrnsBlnc>) MakeCopyOf(this.FeeItemTrnsBlncCollection); 
			if (this._edStudCourseRegPolcyEdStudCourseRegId != null)
				_tmp.EdStudCourseRegPolcyCollection = (TList<EdStudCourseRegPolcy>) MakeCopyOf(this.EdStudCourseRegPolcyCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdStudCourseRegEntityData _tmp = new EdStudCourseRegEntityData();
						
			_tmp.EdStudCourseRegId = this.EdStudCourseRegId;
			_tmp.OriginalEdStudCourseRegId = this.OriginalEdStudCourseRegId;
			
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.RegDate = this.RegDate;
			_tmp.AuditFlg = this.AuditFlg;
			_tmp.RepeatFlg = this.RepeatFlg;
			_tmp.IsLast = this.IsLast;
			_tmp.AsFacultyInfoId = this.AsFacultyInfoId;
			_tmp.EdCodeCourseStatusId = this.EdCodeCourseStatusId;
			_tmp.EdCodeGradingId = this.EdCodeGradingId;
			_tmp.CourseDegree = this.CourseDegree;
			_tmp.CoursePoint = this.CoursePoint;
			_tmp.EntPolicyGradingHdrId = this.EntPolicyGradingHdrId;
			_tmp.GsCodePassFailId = this.GsCodePassFailId;
			_tmp.EdStudSemesterId = this.EdStudSemesterId;
			_tmp.AddGpaFlg = this.AddGpaFlg;
			_tmp.EntPolicyAssessHdrId = this.EntPolicyAssessHdrId;
			_tmp.IncompFlg = this.IncompFlg;
			_tmp.HideFlg = this.HideFlg;
			_tmp.HideReason = this.HideReason;
			_tmp.EdCourseSubId = this.EdCourseSubId;
			_tmp.LastDate = this.LastDate;
			_tmp.SeFormId = this.SeFormId;
			_tmp.SeUserId = this.SeUserId;
			_tmp.IsResultApproved = this.IsResultApproved;
			_tmp.RepeatNo = this.RepeatNo;
			_tmp.PayFlg = this.PayFlg;
			_tmp.PayAmount = this.PayAmount;
			_tmp.AbsFlg = this.AbsFlg;
			_tmp.ReceiptNo = this.ReceiptNo;
			_tmp.ReceiptDate = this.ReceiptDate;
			_tmp.ByforceFlg = this.ByforceFlg;
			_tmp.EdCdeCrsRegTypeId = this.EdCdeCrsRegTypeId;
			_tmp.EntCoursePkgDtlId = this.EntCoursePkgDtlId;
			_tmp.EdAcadPlanDtlId = this.EdAcadPlanDtlId;
			_tmp.Notes = this.Notes;
			_tmp.SeUserApproveId = this.SeUserApproveId;
			_tmp.CrsRaiseMark = this.CrsRaiseMark;
			_tmp.CrsCh = this.CrsCh;
			_tmp.AudtNote = this.AudtNote;
			_tmp.ScSectionGroupHdrId = this.ScSectionGroupHdrId;
			_tmp.EdCourseOrgId = this.EdCourseOrgId;
			_tmp.EdCdeExamTypeId = this.EdCdeExamTypeId;
			_tmp.IsLastYear = this.IsLastYear;
			_tmp.RetakeFlg = this.RetakeFlg;
			_tmp.EdCodeCourseCaseId = this.EdCodeCourseCaseId;
			
			#region Source Parent Composite Entities
			if (this.AsFacultyInfoIdSource != null && existingCopies.Contains(this.AsFacultyInfoIdSource))
				_tmp.AsFacultyInfoIdSource = existingCopies[this.AsFacultyInfoIdSource] as AsFacultyInfo;
			else
				_tmp.AsFacultyInfoIdSource = MakeCopyOf(this.AsFacultyInfoIdSource, existingCopies) as AsFacultyInfo;
			if (this.EdAcadPlanDtlIdSource != null && existingCopies.Contains(this.EdAcadPlanDtlIdSource))
				_tmp.EdAcadPlanDtlIdSource = existingCopies[this.EdAcadPlanDtlIdSource] as EdAcadPlanDtl;
			else
				_tmp.EdAcadPlanDtlIdSource = MakeCopyOf(this.EdAcadPlanDtlIdSource, existingCopies) as EdAcadPlanDtl;
			if (this.EdCdeCrsRegTypeIdSource != null && existingCopies.Contains(this.EdCdeCrsRegTypeIdSource))
				_tmp.EdCdeCrsRegTypeIdSource = existingCopies[this.EdCdeCrsRegTypeIdSource] as EdCdeCrsRegType;
			else
				_tmp.EdCdeCrsRegTypeIdSource = MakeCopyOf(this.EdCdeCrsRegTypeIdSource, existingCopies) as EdCdeCrsRegType;
			if (this.EdCdeExamTypeIdSource != null && existingCopies.Contains(this.EdCdeExamTypeIdSource))
				_tmp.EdCdeExamTypeIdSource = existingCopies[this.EdCdeExamTypeIdSource] as EdCdeExamType;
			else
				_tmp.EdCdeExamTypeIdSource = MakeCopyOf(this.EdCdeExamTypeIdSource, existingCopies) as EdCdeExamType;
			if (this.EdCodeCourseCaseIdSource != null && existingCopies.Contains(this.EdCodeCourseCaseIdSource))
				_tmp.EdCodeCourseCaseIdSource = existingCopies[this.EdCodeCourseCaseIdSource] as EdCodeCourseCase;
			else
				_tmp.EdCodeCourseCaseIdSource = MakeCopyOf(this.EdCodeCourseCaseIdSource, existingCopies) as EdCodeCourseCase;
			if (this.EdCodeCourseStatusIdSource != null && existingCopies.Contains(this.EdCodeCourseStatusIdSource))
				_tmp.EdCodeCourseStatusIdSource = existingCopies[this.EdCodeCourseStatusIdSource] as EdCodeCourseStatus;
			else
				_tmp.EdCodeCourseStatusIdSource = MakeCopyOf(this.EdCodeCourseStatusIdSource, existingCopies) as EdCodeCourseStatus;
			if (this.EdCodeGradingIdSource != null && existingCopies.Contains(this.EdCodeGradingIdSource))
				_tmp.EdCodeGradingIdSource = existingCopies[this.EdCodeGradingIdSource] as EdCodeGrading;
			else
				_tmp.EdCodeGradingIdSource = MakeCopyOf(this.EdCodeGradingIdSource, existingCopies) as EdCodeGrading;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				_tmp.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EdCourseOrgIdSource != null && existingCopies.Contains(this.EdCourseOrgIdSource))
				_tmp.EdCourseOrgIdSource = existingCopies[this.EdCourseOrgIdSource] as EdCourse;
			else
				_tmp.EdCourseOrgIdSource = MakeCopyOf(this.EdCourseOrgIdSource, existingCopies) as EdCourse;
			if (this.EdStudSemesterIdSource != null && existingCopies.Contains(this.EdStudSemesterIdSource))
				_tmp.EdStudSemesterIdSource = existingCopies[this.EdStudSemesterIdSource] as EdStudSemester;
			else
				_tmp.EdStudSemesterIdSource = MakeCopyOf(this.EdStudSemesterIdSource, existingCopies) as EdStudSemester;
			if (this.EntCoursePkgDtlIdSource != null && existingCopies.Contains(this.EntCoursePkgDtlIdSource))
				_tmp.EntCoursePkgDtlIdSource = existingCopies[this.EntCoursePkgDtlIdSource] as EntCoursePkgDtl;
			else
				_tmp.EntCoursePkgDtlIdSource = MakeCopyOf(this.EntCoursePkgDtlIdSource, existingCopies) as EntCoursePkgDtl;
			if (this.EntPolicyAssessHdrIdSource != null && existingCopies.Contains(this.EntPolicyAssessHdrIdSource))
				_tmp.EntPolicyAssessHdrIdSource = existingCopies[this.EntPolicyAssessHdrIdSource] as EntPolicyAssessHdr;
			else
				_tmp.EntPolicyAssessHdrIdSource = MakeCopyOf(this.EntPolicyAssessHdrIdSource, existingCopies) as EntPolicyAssessHdr;
			if (this.EntPolicyGradingHdrIdSource != null && existingCopies.Contains(this.EntPolicyGradingHdrIdSource))
				_tmp.EntPolicyGradingHdrIdSource = existingCopies[this.EntPolicyGradingHdrIdSource] as EntPolicyGradingHdr;
			else
				_tmp.EntPolicyGradingHdrIdSource = MakeCopyOf(this.EntPolicyGradingHdrIdSource, existingCopies) as EntPolicyGradingHdr;
			if (this.GsCodePassFailIdSource != null && existingCopies.Contains(this.GsCodePassFailIdSource))
				_tmp.GsCodePassFailIdSource = existingCopies[this.GsCodePassFailIdSource] as GsCodePassFail;
			else
				_tmp.GsCodePassFailIdSource = MakeCopyOf(this.GsCodePassFailIdSource, existingCopies) as GsCodePassFail;
			if (this.ScSectionGroupHdrIdSource != null && existingCopies.Contains(this.ScSectionGroupHdrIdSource))
				_tmp.ScSectionGroupHdrIdSource = existingCopies[this.ScSectionGroupHdrIdSource] as ScSectionGroupHdr;
			else
				_tmp.ScSectionGroupHdrIdSource = MakeCopyOf(this.ScSectionGroupHdrIdSource, existingCopies) as ScSectionGroupHdr;
			if (this.SeFormIdSource != null && existingCopies.Contains(this.SeFormIdSource))
				_tmp.SeFormIdSource = existingCopies[this.SeFormIdSource] as SeForm;
			else
				_tmp.SeFormIdSource = MakeCopyOf(this.SeFormIdSource, existingCopies) as SeForm;
			if (this.SeUserIdSource != null && existingCopies.Contains(this.SeUserIdSource))
				_tmp.SeUserIdSource = existingCopies[this.SeUserIdSource] as SeUser;
			else
				_tmp.SeUserIdSource = MakeCopyOf(this.SeUserIdSource, existingCopies) as SeUser;
			if (this.SeUserApproveIdSource != null && existingCopies.Contains(this.SeUserApproveIdSource))
				_tmp.SeUserApproveIdSource = existingCopies[this.SeUserApproveIdSource] as SeUser;
			else
				_tmp.SeUserApproveIdSource = MakeCopyOf(this.SeUserApproveIdSource, existingCopies) as SeUser;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.GsAttchdDocCollection = (TList<GsAttchdDoc>) MakeCopyOf(this.GsAttchdDocCollection, existingCopies); 
			_tmp.EdStudCourseRegAddCollection = (TList<EdStudCourseRegAdd>) MakeCopyOf(this.EdStudCourseRegAddCollection, existingCopies); 
			_tmp.EdStudGroupCollection = (TList<EdStudGroup>) MakeCopyOf(this.EdStudGroupCollection, existingCopies); 
			_tmp.EdStudCourseRegAssessSubCollection = (TList<EdStudCourseRegAssessSub>) MakeCopyOf(this.EdStudCourseRegAssessSubCollection, existingCopies); 
			_tmp.ScStudGroupCollection = (TList<ScStudGroup>) MakeCopyOf(this.ScStudGroupCollection, existingCopies); 
			_tmp.EdStudPnltyCourseCollection = (TList<EdStudPnltyCourse>) MakeCopyOf(this.EdStudPnltyCourseCollection, existingCopies); 
			_tmp.EdStdCrsExamCollection = (TList<EdStdCrsExam>) MakeCopyOf(this.EdStdCrsExamCollection, existingCopies); 
			_tmp.EdStudCourseRegAssessCollection = (TList<EdStudCourseRegAssess>) MakeCopyOf(this.EdStudCourseRegAssessCollection, existingCopies); 
			_tmp.EdStudCourseGrdChngCollection = (TList<EdStudCourseGrdChng>) MakeCopyOf(this.EdStudCourseGrdChngCollection, existingCopies); 
			_tmp.EdStudCourseRegTopicCollection = (TList<EdStudCourseRegTopic>) MakeCopyOf(this.EdStudCourseRegTopicCollection, existingCopies); 
			_tmp.FeeItemTrnsBlncCollection = (TList<FeeItemTrnsBlnc>) MakeCopyOf(this.FeeItemTrnsBlncCollection, existingCopies); 
			_tmp.EdStudCourseRegPolcyCollection = (TList<EdStudCourseRegPolcy>) MakeCopyOf(this.EdStudCourseRegPolcyCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudCourseRegColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdStudCourseRegColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudCourseRegColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdStudCourseRegColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudCourseRegColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdStudCourseRegColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdStudCourseRegEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdStudCourseRegEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdStudCourseRegColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdStudCourseRegColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdStudCourseRegEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdStudCourseRegEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdStudCourseRegEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdStudCourseReg"/> object.
	/// </remarks>
	public class EdStudCourseRegEventArgs : System.EventArgs
	{
		private EdStudCourseRegColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdStudCourseRegEventArgs class.
		///</summary>
		public EdStudCourseRegEventArgs(EdStudCourseRegColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdStudCourseRegEventArgs class.
		///</summary>
		public EdStudCourseRegEventArgs(EdStudCourseRegColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdStudCourseRegColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdStudCourseRegColumn" />
		public EdStudCourseRegColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdStudCourseReg related events.
	///</summary>
	public delegate void EdStudCourseRegEventHandler(object sender, EdStudCourseRegEventArgs e);
	
	#region EdStudCourseRegComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdStudCourseRegComparer : System.Collections.Generic.IComparer<EdStudCourseReg>
	{
		EdStudCourseRegColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudCourseRegComparer"/> class.
        /// </summary>
		public EdStudCourseRegComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdStudCourseRegComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdStudCourseRegComparer(EdStudCourseRegColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdStudCourseReg"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdStudCourseReg"/> to compare.</param>
        /// <param name="b">The second <c>EdStudCourseReg</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdStudCourseReg a, EdStudCourseReg b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdStudCourseReg entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdStudCourseReg a, EdStudCourseReg b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdStudCourseRegColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdStudCourseRegKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdStudCourseReg"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdStudCourseRegKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegKey class.
		/// </summary>
		public EdStudCourseRegKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegKey class.
		/// </summary>
		public EdStudCourseRegKey(EdStudCourseRegBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdStudCourseRegId = entity.EdStudCourseRegId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdStudCourseRegKey class.
		/// </summary>
		public EdStudCourseRegKey(System.Decimal _edStudCourseRegId)
		{
			#region Init Properties

			this.EdStudCourseRegId = _edStudCourseRegId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdStudCourseRegBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdStudCourseRegBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdStudCourseRegId property
		private System.Decimal _edStudCourseRegId;
		
		/// <summary>
		/// Gets or sets the EdStudCourseRegId property.
		/// </summary>
		public System.Decimal EdStudCourseRegId
		{
			get { return _edStudCourseRegId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdStudCourseRegId = value;
				
				_edStudCourseRegId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdStudCourseRegId = ( values["EdStudCourseRegId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdStudCourseRegId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdStudCourseRegId", EdStudCourseRegId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdStudCourseRegId: {0}{1}",
								EdStudCourseRegId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdStudCourseRegColumn Enum
	
	/// <summary>
	/// Enumerate the EdStudCourseReg columns.
	/// </summary>
	[Serializable]
	public enum EdStudCourseRegColumn : int
	{
		/// <summary>
		/// EdStudCourseRegId : 
		/// </summary>
		[EnumTextValue("ED_STUD_COURSE_REG_ID")]
		[ColumnEnum("ED_STUD_COURSE_REG_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdStudCourseRegId = 1,
		/// <summary>
		/// EdCourseId : 
		/// </summary>
		[EnumTextValue("ED_COURSE_ID")]
		[ColumnEnum("ED_COURSE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdCourseId = 2,
		/// <summary>
		/// RegDate : 
		/// </summary>
		[EnumTextValue("REG_DATE")]
		[ColumnEnum("REG_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		RegDate = 3,
		/// <summary>
		/// AuditFlg : 
		/// </summary>
		[EnumTextValue("AUDIT_FLG")]
		[ColumnEnum("AUDIT_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AuditFlg = 4,
		/// <summary>
		/// RepeatFlg : 
		/// </summary>
		[EnumTextValue("REPEAT_FLG")]
		[ColumnEnum("REPEAT_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		RepeatFlg = 5,
		/// <summary>
		/// IsLast : 
		/// </summary>
		[EnumTextValue("IS_LAST")]
		[ColumnEnum("IS_LAST", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IsLast = 6,
		/// <summary>
		/// AsFacultyInfoId : 
		/// </summary>
		[EnumTextValue("AS_FACULTY_INFO_ID")]
		[ColumnEnum("AS_FACULTY_INFO_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AsFacultyInfoId = 7,
		/// <summary>
		/// EdCodeCourseStatusId : 
		/// </summary>
		[EnumTextValue("ED_CODE_COURSE_STATUS_ID")]
		[ColumnEnum("ED_CODE_COURSE_STATUS_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeCourseStatusId = 8,
		/// <summary>
		/// EdCodeGradingId : 
		/// </summary>
		[EnumTextValue("ED_CODE_GRADING_ID")]
		[ColumnEnum("ED_CODE_GRADING_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCodeGradingId = 9,
		/// <summary>
		/// CourseDegree : 
		/// </summary>
		[EnumTextValue("COURSE_DEGREE")]
		[ColumnEnum("COURSE_DEGREE", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CourseDegree = 10,
		/// <summary>
		/// CoursePoint : 
		/// </summary>
		[EnumTextValue("COURSE_POINT")]
		[ColumnEnum("COURSE_POINT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CoursePoint = 11,
		/// <summary>
		/// EntPolicyGradingHdrId : 
		/// </summary>
		[EnumTextValue("ENT_POLICY_GRADING_HDR_ID")]
		[ColumnEnum("ENT_POLICY_GRADING_HDR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntPolicyGradingHdrId = 12,
		/// <summary>
		/// GsCodePassFailId : 
		/// </summary>
		[EnumTextValue("GS_CODE_PASS_FAIL_ID")]
		[ColumnEnum("GS_CODE_PASS_FAIL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		GsCodePassFailId = 13,
		/// <summary>
		/// EdStudSemesterId : 
		/// </summary>
		[EnumTextValue("ED_STUD_SEMESTER_ID")]
		[ColumnEnum("ED_STUD_SEMESTER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdStudSemesterId = 14,
		/// <summary>
		/// AddGpaFlg : =0 not calculated --- =1 calculate course in gpa&CH ---2 Calculated in CH only
		/// </summary>
		[EnumTextValue("ADD_GPA_FLG")]
		[ColumnEnum("ADD_GPA_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AddGpaFlg = 15,
		/// <summary>
		/// EntPolicyAssessHdrId : 
		/// </summary>
		[EnumTextValue("ENT_POLICY_ASSESS_HDR_ID")]
		[ColumnEnum("ENT_POLICY_ASSESS_HDR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntPolicyAssessHdrId = 16,
		/// <summary>
		/// IncompFlg : 
		/// </summary>
		[EnumTextValue("INCOMP_FLG")]
		[ColumnEnum("INCOMP_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		IncompFlg = 17,
		/// <summary>
		/// HideFlg : set 1 when this record is locked in rasd for staff view
		/// </summary>
		[EnumTextValue("HIDE_FLG")]
		[ColumnEnum("HIDE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		HideFlg = 18,
		/// <summary>
		/// HideReason : reason of lock
		/// </summary>
		[EnumTextValue("HIDE_REASON")]
		[ColumnEnum("HIDE_REASON", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		HideReason = 19,
		/// <summary>
		/// EdCourseSubId : XX not used 
		/// </summary>
		[EnumTextValue("ED_COURSE_SUB_ID")]
		[ColumnEnum("ED_COURSE_SUB_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCourseSubId = 20,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 21,
		/// <summary>
		/// SeFormId : 
		/// </summary>
		[EnumTextValue("SE_FORM_ID")]
		[ColumnEnum("SE_FORM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeFormId = 22,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 23,
		/// <summary>
		/// IsResultApproved : اعتماد نتيجة مقرر
		/// </summary>
		[EnumTextValue("IS_RESULT_APPROVED")]
		[ColumnEnum("IS_RESULT_APPROVED", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		IsResultApproved = 24,
		/// <summary>
		/// RepeatNo : RETAKE_NO
		/// 		/// 0 > no retake
		/// 		/// 1 > retake passed course
		/// 		/// 2 > retake failed course
		/// 		/// 
		/// 		/// any course could be retaked once
		/// </summary>
		[EnumTextValue("REPEAT_NO")]
		[ColumnEnum("REPEAT_NO", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RepeatNo = 25,
		/// <summary>
		/// PayFlg : 
		/// </summary>
		[EnumTextValue("PAY_FLG")]
		[ColumnEnum("PAY_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PayFlg = 26,
		/// <summary>
		/// PayAmount : 
		/// </summary>
		[EnumTextValue("PAY_AMOUNT")]
		[ColumnEnum("PAY_AMOUNT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PayAmount = 27,
		/// <summary>
		/// AbsFlg : 
		/// </summary>
		[EnumTextValue("ABS_FLG")]
		[ColumnEnum("ABS_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AbsFlg = 28,
		/// <summary>
		/// ReceiptNo : 
		/// </summary>
		[EnumTextValue("RECEIPT_NO")]
		[ColumnEnum("RECEIPT_NO", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		ReceiptNo = 29,
		/// <summary>
		/// ReceiptDate : 
		/// </summary>
		[EnumTextValue("RECEIPT_DATE")]
		[ColumnEnum("RECEIPT_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ReceiptDate = 30,
		/// <summary>
		/// ByforceFlg : 
		/// </summary>
		[EnumTextValue("BYFORCE_FLG")]
		[ColumnEnum("BYFORCE_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ByforceFlg = 31,
		/// <summary>
		/// EdCdeCrsRegTypeId : 
		/// </summary>
		[EnumTextValue("ED_CDE_CRS_REG_TYPE_ID")]
		[ColumnEnum("ED_CDE_CRS_REG_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCdeCrsRegTypeId = 32,
		/// <summary>
		/// EntCoursePkgDtlId : 
		/// </summary>
		[EnumTextValue("ENT_COURSE_PKG_DTL_ID")]
		[ColumnEnum("ENT_COURSE_PKG_DTL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntCoursePkgDtlId = 33,
		/// <summary>
		/// EdAcadPlanDtlId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_PLAN_DTL_ID")]
		[ColumnEnum("ED_ACAD_PLAN_DTL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdAcadPlanDtlId = 34,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 130)]
		Notes = 35,
		/// <summary>
		/// SeUserApproveId : Result Approved
		/// </summary>
		[EnumTextValue("SE_USER_APPROVE_ID")]
		[ColumnEnum("SE_USER_APPROVE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserApproveId = 36,
		/// <summary>
		/// CrsRaiseMark : الدرجة المرفوعه
		/// </summary>
		[EnumTextValue("CRS_RAISE_MARK")]
		[ColumnEnum("CRS_RAISE_MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CrsRaiseMark = 37,
		/// <summary>
		/// CrsCh : 
		/// </summary>
		[EnumTextValue("CRS_CH")]
		[ColumnEnum("CRS_CH", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CrsCh = 38,
		/// <summary>
		/// AudtNote : 
		/// </summary>
		[EnumTextValue("AUDT_NOTE")]
		[ColumnEnum("AUDT_NOTE", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		AudtNote = 39,
		/// <summary>
		/// ScSectionGroupHdrId : مجموعة سكاشن المقرر
		/// </summary>
		[EnumTextValue("SC_SECTION_GROUP_HDR_ID")]
		[ColumnEnum("SC_SECTION_GROUP_HDR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ScSectionGroupHdrId = 40,
		/// <summary>
		/// EdCourseOrgId : 
		/// </summary>
		[EnumTextValue("ED_COURSE_ORG_ID")]
		[ColumnEnum("ED_COURSE_ORG_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCourseOrgId = 41,
		/// <summary>
		/// EdCdeExamTypeId : نوع الامتحان: تكميلى- اعادة
		/// </summary>
		[EnumTextValue("ED_CDE_EXAM_TYPE_ID")]
		[ColumnEnum("ED_CDE_EXAM_TYPE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCdeExamTypeId = 42,
		/// <summary>
		/// IsLastYear : 
		/// </summary>
		[EnumTextValue("IS_LAST_YEAR")]
		[ColumnEnum("IS_LAST_YEAR", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsLastYear = 43,
		/// <summary>
		/// RetakeFlg : 
		/// </summary>
		[EnumTextValue("RETAKE_FLG")]
		[ColumnEnum("RETAKE_FLG", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		RetakeFlg = 44,
		/// <summary>
		/// EdCodeCourseCaseId : 
		/// </summary>
		[EnumTextValue("ED_CODE_COURSE_CASE_ID")]
		[ColumnEnum("ED_CODE_COURSE_CASE_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		EdCodeCourseCaseId = 45
	}//End enum

	#endregion EdStudCourseRegColumn Enum

} // end namespace
