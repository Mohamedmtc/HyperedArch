
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EdAcadPlanDtl.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ED_ACAD_PLAN_DTL' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EdAcadPlanDtlBase : EntityBase, IEdAcadPlanDtl, IEntityId<EdAcadPlanDtlKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EdAcadPlanDtlEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EdAcadPlanDtlEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EdAcadPlanDtlEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EdAcadPlanDtl> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdAcadPlanDtlEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EdAcadPlanDtlEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EdAcadPlanDtlBase"/> instance.
		///</summary>
		public EdAcadPlanDtlBase()
		{
			this.entityData = new EdAcadPlanDtlEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EdAcadPlanDtlBase"/> instance.
		///</summary>
		///<param name="_edAcadPlanDtlId"></param>
		///<param name="_edAcadPlanHdrId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_crsExpFlg"></param>
		///<param name="_crsExp"></param>
		///<param name="_crsExpNameAr"></param>
		///<param name="_crsExpNameEn"></param>
		///<param name="_edCourseExpHdrId"></param>
		///<param name="_notes"></param>
		///<param name="_creditHours"></param>
		///<param name="_entCoursePkgHdrId"></param>
		public EdAcadPlanDtlBase(System.Decimal _edAcadPlanDtlId, System.Decimal _edAcadPlanHdrId, 
			System.Decimal? _edCourseId, System.Decimal? _crsExpFlg, System.String _crsExp, 
			System.String _crsExpNameAr, System.String _crsExpNameEn, System.Decimal? _edCourseExpHdrId, 
			System.String _notes, System.Decimal? _creditHours, System.Decimal? _entCoursePkgHdrId)
		{
			this.entityData = new EdAcadPlanDtlEntityData();
			this.backupData = null;

			this.EdAcadPlanDtlId = _edAcadPlanDtlId;
			this.EdAcadPlanHdrId = _edAcadPlanHdrId;
			this.EdCourseId = _edCourseId;
			this.CrsExpFlg = _crsExpFlg;
			this.CrsExp = _crsExp;
			this.CrsExpNameAr = _crsExpNameAr;
			this.CrsExpNameEn = _crsExpNameEn;
			this.EdCourseExpHdrId = _edCourseExpHdrId;
			this.Notes = _notes;
			this.CreditHours = _creditHours;
			this.EntCoursePkgHdrId = _entCoursePkgHdrId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EdAcadPlanDtl"/> instance.
		///</summary>
		///<param name="_edAcadPlanDtlId"></param>
		///<param name="_edAcadPlanHdrId"></param>
		///<param name="_edCourseId"></param>
		///<param name="_crsExpFlg"></param>
		///<param name="_crsExp"></param>
		///<param name="_crsExpNameAr"></param>
		///<param name="_crsExpNameEn"></param>
		///<param name="_edCourseExpHdrId"></param>
		///<param name="_notes"></param>
		///<param name="_creditHours"></param>
		///<param name="_entCoursePkgHdrId"></param>
		public static EdAcadPlanDtl CreateEdAcadPlanDtl(System.Decimal _edAcadPlanDtlId, System.Decimal _edAcadPlanHdrId, 
			System.Decimal? _edCourseId, System.Decimal? _crsExpFlg, System.String _crsExp, 
			System.String _crsExpNameAr, System.String _crsExpNameEn, System.Decimal? _edCourseExpHdrId, 
			System.String _notes, System.Decimal? _creditHours, System.Decimal? _entCoursePkgHdrId)
		{
			EdAcadPlanDtl newEdAcadPlanDtl = new EdAcadPlanDtl();
			newEdAcadPlanDtl.EdAcadPlanDtlId = _edAcadPlanDtlId;
			newEdAcadPlanDtl.EdAcadPlanHdrId = _edAcadPlanHdrId;
			newEdAcadPlanDtl.EdCourseId = _edCourseId;
			newEdAcadPlanDtl.CrsExpFlg = _crsExpFlg;
			newEdAcadPlanDtl.CrsExp = _crsExp;
			newEdAcadPlanDtl.CrsExpNameAr = _crsExpNameAr;
			newEdAcadPlanDtl.CrsExpNameEn = _crsExpNameEn;
			newEdAcadPlanDtl.EdCourseExpHdrId = _edCourseExpHdrId;
			newEdAcadPlanDtl.Notes = _notes;
			newEdAcadPlanDtl.CreditHours = _creditHours;
			newEdAcadPlanDtl.EntCoursePkgHdrId = _entCoursePkgHdrId;
			return newEdAcadPlanDtl;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EdAcadPlanDtlId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal EdAcadPlanDtlId
		{
			get
			{
				return this.entityData.EdAcadPlanDtlId; 
			}
			
			set
			{
				if (this.entityData.EdAcadPlanDtlId == value)
					return;
					
				OnColumnChanging(EdAcadPlanDtlColumn.EdAcadPlanDtlId, this.entityData.EdAcadPlanDtlId);
				this.entityData.EdAcadPlanDtlId = value;
				this.EntityId.EdAcadPlanDtlId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdAcadPlanDtlColumn.EdAcadPlanDtlId, this.entityData.EdAcadPlanDtlId);
				OnPropertyChanged("EdAcadPlanDtlId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ED_ACAD_PLAN_DTL_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ED_ACAD_PLAN_DTL_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalEdAcadPlanDtlId
		{
			get { return this.entityData.OriginalEdAcadPlanDtlId; }
			set { this.entityData.OriginalEdAcadPlanDtlId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EdAcadPlanHdrId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EdAcadPlanHdrId
		{
			get
			{
				return this.entityData.EdAcadPlanHdrId; 
			}
			
			set
			{
				if (this.entityData.EdAcadPlanHdrId == value)
					return;
					
				OnColumnChanging(EdAcadPlanDtlColumn.EdAcadPlanHdrId, this.entityData.EdAcadPlanHdrId);
				this.entityData.EdAcadPlanHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdAcadPlanDtlColumn.EdAcadPlanHdrId, this.entityData.EdAcadPlanHdrId);
				OnPropertyChanged("EdAcadPlanHdrId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCourseIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCourseId
		{
			get
			{
				return this.entityData.EdCourseId; 
			}
			
			set
			{
				if (this.entityData.EdCourseId == value)
					return;
					
				OnColumnChanging(EdAcadPlanDtlColumn.EdCourseId, this.entityData.EdCourseId);
				this.entityData.EdCourseId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdAcadPlanDtlColumn.EdCourseId, this.entityData.EdCourseId);
				OnPropertyChanged("EdCourseId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CrsExpFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCrsExpFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CrsExpFlg
		{
			get
			{
				return this.entityData.CrsExpFlg; 
			}
			
			set
			{
				if (this.entityData.CrsExpFlg == value)
					return;
					
				OnColumnChanging(EdAcadPlanDtlColumn.CrsExpFlg, this.entityData.CrsExpFlg);
				this.entityData.CrsExpFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdAcadPlanDtlColumn.CrsExpFlg, this.entityData.CrsExpFlg);
				OnPropertyChanged("CrsExpFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CrsExp property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String CrsExp
		{
			get
			{
				return this.entityData.CrsExp; 
			}
			
			set
			{
				if (this.entityData.CrsExp == value)
					return;
					
				OnColumnChanging(EdAcadPlanDtlColumn.CrsExp, this.entityData.CrsExp);
				this.entityData.CrsExp = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdAcadPlanDtlColumn.CrsExp, this.entityData.CrsExp);
				OnPropertyChanged("CrsExp");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CrsExpNameAr property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 60)]
		public virtual System.String CrsExpNameAr
		{
			get
			{
				return this.entityData.CrsExpNameAr; 
			}
			
			set
			{
				if (this.entityData.CrsExpNameAr == value)
					return;
					
				OnColumnChanging(EdAcadPlanDtlColumn.CrsExpNameAr, this.entityData.CrsExpNameAr);
				this.entityData.CrsExpNameAr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdAcadPlanDtlColumn.CrsExpNameAr, this.entityData.CrsExpNameAr);
				OnPropertyChanged("CrsExpNameAr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CrsExpNameEn property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 60)]
		public virtual System.String CrsExpNameEn
		{
			get
			{
				return this.entityData.CrsExpNameEn; 
			}
			
			set
			{
				if (this.entityData.CrsExpNameEn == value)
					return;
					
				OnColumnChanging(EdAcadPlanDtlColumn.CrsExpNameEn, this.entityData.CrsExpNameEn);
				this.entityData.CrsExpNameEn = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdAcadPlanDtlColumn.CrsExpNameEn, this.entityData.CrsExpNameEn);
				OnPropertyChanged("CrsExpNameEn");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EdCourseExpHdrId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEdCourseExpHdrIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EdCourseExpHdrId
		{
			get
			{
				return this.entityData.EdCourseExpHdrId; 
			}
			
			set
			{
				if (this.entityData.EdCourseExpHdrId == value)
					return;
					
				OnColumnChanging(EdAcadPlanDtlColumn.EdCourseExpHdrId, this.entityData.EdCourseExpHdrId);
				this.entityData.EdCourseExpHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdAcadPlanDtlColumn.EdCourseExpHdrId, this.entityData.EdCourseExpHdrId);
				OnPropertyChanged("EdCourseExpHdrId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(EdAcadPlanDtlColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdAcadPlanDtlColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreditHours property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCreditHoursNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CreditHours
		{
			get
			{
				return this.entityData.CreditHours; 
			}
			
			set
			{
				if (this.entityData.CreditHours == value)
					return;
					
				OnColumnChanging(EdAcadPlanDtlColumn.CreditHours, this.entityData.CreditHours);
				this.entityData.CreditHours = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdAcadPlanDtlColumn.CreditHours, this.entityData.CreditHours);
				OnPropertyChanged("CreditHours");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntCoursePkgHdrId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsEntCoursePkgHdrIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EntCoursePkgHdrId
		{
			get
			{
				return this.entityData.EntCoursePkgHdrId; 
			}
			
			set
			{
				if (this.entityData.EntCoursePkgHdrId == value)
					return;
					
				OnColumnChanging(EdAcadPlanDtlColumn.EntCoursePkgHdrId, this.entityData.EntCoursePkgHdrId);
				this.entityData.EntCoursePkgHdrId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EdAcadPlanDtlColumn.EntCoursePkgHdrId, this.entityData.EntCoursePkgHdrId);
				OnPropertyChanged("EntCoursePkgHdrId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadPlanHdr"/>.
		/// </summary>
		/// <value>The source EdAcadPlanHdr for EdAcadPlanHdrId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdAcadPlanHdr EdAcadPlanHdrIdSource
      	{
            get { return entityData.EdAcadPlanHdrIdSource; }
            set { entityData.EdAcadPlanHdrIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return entityData.EdCourseIdSource; }
            set { entityData.EdCourseIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EdCourseExpHdr"/>.
		/// </summary>
		/// <value>The source EdCourseExpHdr for EdCourseExpHdrId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EdCourseExpHdr EdCourseExpHdrIdSource
      	{
            get { return entityData.EdCourseExpHdrIdSource; }
            set { entityData.EdCourseExpHdrIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntCoursePkgHdr"/>.
		/// </summary>
		/// <value>The source EntCoursePkgHdr for EntCoursePkgHdrId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntCoursePkgHdr EntCoursePkgHdrIdSource
      	{
            get { return entityData.EntCoursePkgHdrIdSource; }
            set { entityData.EntCoursePkgHdrIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of EdStudCourseReg objects
		///	which are related to this object through the relation FK_ED_STUD_COURSE_REG_ED_ACAD_PLAN_DTL
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EdStudCourseReg> EdStudCourseRegCollection
		{
			get { return entityData.EdStudCourseRegCollection; }
			set { entityData.EdStudCourseRegCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CrsExp", "Crs Exp", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CrsExpNameAr", "Crs Exp Name Ar", 60));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CrsExpNameEn", "Crs Exp Name En", 60));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 200));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ED_ACAD_PLAN_DTL"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ED_ACAD_PLAN_DTL_ID", "ED_ACAD_PLAN_HDR_ID", "ED_COURSE_ID", "CRS_EXP_FLG", "CRS_EXP", "CRS_EXP_NAME_AR", "CRS_EXP_NAME_EN", "ED_COURSE_EXP_HDR_ID", "NOTES", "CREDIT_HOURS", "ENT_COURSE_PKG_HDR_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EdAcadPlanDtlEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EdAcadPlanDtl) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EdAcadPlanDtl>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EdAcadPlanDtl);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EdAcadPlanDtl Entity 
		///</summary>
		protected virtual EdAcadPlanDtl Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			EdAcadPlanDtl copy = new EdAcadPlanDtl();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EdAcadPlanDtlId = this.EdAcadPlanDtlId;
					copy.OriginalEdAcadPlanDtlId = this.OriginalEdAcadPlanDtlId;
				copy.EdAcadPlanHdrId = this.EdAcadPlanHdrId;
				copy.EdCourseId = this.EdCourseId;
				copy.CrsExpFlg = this.CrsExpFlg;
				copy.CrsExp = this.CrsExp;
				copy.CrsExpNameAr = this.CrsExpNameAr;
				copy.CrsExpNameEn = this.CrsExpNameEn;
				copy.EdCourseExpHdrId = this.EdCourseExpHdrId;
				copy.Notes = this.Notes;
				copy.CreditHours = this.CreditHours;
				copy.EntCoursePkgHdrId = this.EntCoursePkgHdrId;
			
			if (this.EdAcadPlanHdrIdSource != null && existingCopies.Contains(this.EdAcadPlanHdrIdSource))
				copy.EdAcadPlanHdrIdSource = existingCopies[this.EdAcadPlanHdrIdSource] as EdAcadPlanHdr;
			else
				copy.EdAcadPlanHdrIdSource = MakeCopyOf(this.EdAcadPlanHdrIdSource, existingCopies) as EdAcadPlanHdr;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				copy.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				copy.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EdCourseExpHdrIdSource != null && existingCopies.Contains(this.EdCourseExpHdrIdSource))
				copy.EdCourseExpHdrIdSource = existingCopies[this.EdCourseExpHdrIdSource] as EdCourseExpHdr;
			else
				copy.EdCourseExpHdrIdSource = MakeCopyOf(this.EdCourseExpHdrIdSource, existingCopies) as EdCourseExpHdr;
			if (this.EntCoursePkgHdrIdSource != null && existingCopies.Contains(this.EntCoursePkgHdrIdSource))
				copy.EntCoursePkgHdrIdSource = existingCopies[this.EntCoursePkgHdrIdSource] as EntCoursePkgHdr;
			else
				copy.EntCoursePkgHdrIdSource = MakeCopyOf(this.EntCoursePkgHdrIdSource, existingCopies) as EntCoursePkgHdr;
		
			//deep copy nested objects
			copy.EdStudCourseRegCollection = (TList<EdStudCourseReg>) MakeCopyOf(this.EdStudCourseRegCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed EdAcadPlanDtl Entity 
		///</summary>
		public virtual EdAcadPlanDtl Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed EdAcadPlanDtl Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EdAcadPlanDtl DeepCopy()
		{
			return EntityHelper.Clone<EdAcadPlanDtl>(this as EdAcadPlanDtl);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EdAcadPlanDtlEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EdAcadPlanDtlEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EdAcadPlanDtlEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EdAcadPlanDtlColumn column)
		{
			switch(column)
			{
					case EdAcadPlanDtlColumn.EdAcadPlanDtlId:
					return entityData.EdAcadPlanDtlId != _originalData.EdAcadPlanDtlId;
					case EdAcadPlanDtlColumn.EdAcadPlanHdrId:
					return entityData.EdAcadPlanHdrId != _originalData.EdAcadPlanHdrId;
					case EdAcadPlanDtlColumn.EdCourseId:
					return entityData.EdCourseId != _originalData.EdCourseId;
					case EdAcadPlanDtlColumn.CrsExpFlg:
					return entityData.CrsExpFlg != _originalData.CrsExpFlg;
					case EdAcadPlanDtlColumn.CrsExp:
					return entityData.CrsExp != _originalData.CrsExp;
					case EdAcadPlanDtlColumn.CrsExpNameAr:
					return entityData.CrsExpNameAr != _originalData.CrsExpNameAr;
					case EdAcadPlanDtlColumn.CrsExpNameEn:
					return entityData.CrsExpNameEn != _originalData.CrsExpNameEn;
					case EdAcadPlanDtlColumn.EdCourseExpHdrId:
					return entityData.EdCourseExpHdrId != _originalData.EdCourseExpHdrId;
					case EdAcadPlanDtlColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case EdAcadPlanDtlColumn.CreditHours:
					return entityData.CreditHours != _originalData.CreditHours;
					case EdAcadPlanDtlColumn.EntCoursePkgHdrId:
					return entityData.EntCoursePkgHdrId != _originalData.EntCoursePkgHdrId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EdAcadPlanDtlColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EdAcadPlanDtlId != _originalData.EdAcadPlanDtlId;
			result = result || entityData.EdAcadPlanHdrId != _originalData.EdAcadPlanHdrId;
			result = result || entityData.EdCourseId != _originalData.EdCourseId;
			result = result || entityData.CrsExpFlg != _originalData.CrsExpFlg;
			result = result || entityData.CrsExp != _originalData.CrsExp;
			result = result || entityData.CrsExpNameAr != _originalData.CrsExpNameAr;
			result = result || entityData.CrsExpNameEn != _originalData.CrsExpNameEn;
			result = result || entityData.EdCourseExpHdrId != _originalData.EdCourseExpHdrId;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.CreditHours != _originalData.CreditHours;
			result = result || entityData.EntCoursePkgHdrId != _originalData.EntCoursePkgHdrId;
			return result;
		}	
		
		///<summary>
		///  Returns a EdAcadPlanDtl Entity with the original data.
		///</summary>
		public EdAcadPlanDtl GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEdAcadPlanDtl(
				_originalData.EdAcadPlanDtlId,
				_originalData.EdAcadPlanHdrId,
				_originalData.EdCourseId,
				_originalData.CrsExpFlg,
				_originalData.CrsExp,
				_originalData.CrsExpNameAr,
				_originalData.CrsExpNameEn,
				_originalData.EdCourseExpHdrId,
				_originalData.Notes,
				_originalData.CreditHours,
				_originalData.EntCoursePkgHdrId
				);
				
			return (EdAcadPlanDtl)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EdAcadPlanDtlBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EdAcadPlanDtlBase)
				return ValueEquals(this, (EdAcadPlanDtlBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EdAcadPlanDtlBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EdAcadPlanDtlId.GetHashCode() ^ 
					this.EdAcadPlanHdrId.GetHashCode() ^ 
					((this.EdCourseId == null) ? string.Empty : this.EdCourseId.ToString()).GetHashCode() ^ 
					((this.CrsExpFlg == null) ? string.Empty : this.CrsExpFlg.ToString()).GetHashCode() ^ 
					((this.CrsExp == null) ? string.Empty : this.CrsExp.ToString()).GetHashCode() ^ 
					((this.CrsExpNameAr == null) ? string.Empty : this.CrsExpNameAr.ToString()).GetHashCode() ^ 
					((this.CrsExpNameEn == null) ? string.Empty : this.CrsExpNameEn.ToString()).GetHashCode() ^ 
					((this.EdCourseExpHdrId == null) ? string.Empty : this.EdCourseExpHdrId.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.CreditHours == null) ? string.Empty : this.CreditHours.ToString()).GetHashCode() ^ 
					((this.EntCoursePkgHdrId == null) ? string.Empty : this.EntCoursePkgHdrId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EdAcadPlanDtlBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EdAcadPlanDtlBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EdAcadPlanDtlBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EdAcadPlanDtlBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EdAcadPlanDtlBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EdAcadPlanDtlBase Object1, EdAcadPlanDtlBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EdAcadPlanDtlId != Object2.EdAcadPlanDtlId)
				equal = false;
			if (Object1.EdAcadPlanHdrId != Object2.EdAcadPlanHdrId)
				equal = false;
			if ( Object1.EdCourseId != null && Object2.EdCourseId != null )
			{
				if (Object1.EdCourseId != Object2.EdCourseId)
					equal = false;
			}
			else if (Object1.EdCourseId == null ^ Object2.EdCourseId == null )
			{
				equal = false;
			}
			if ( Object1.CrsExpFlg != null && Object2.CrsExpFlg != null )
			{
				if (Object1.CrsExpFlg != Object2.CrsExpFlg)
					equal = false;
			}
			else if (Object1.CrsExpFlg == null ^ Object2.CrsExpFlg == null )
			{
				equal = false;
			}
			if ( Object1.CrsExp != null && Object2.CrsExp != null )
			{
				if (Object1.CrsExp != Object2.CrsExp)
					equal = false;
			}
			else if (Object1.CrsExp == null ^ Object2.CrsExp == null )
			{
				equal = false;
			}
			if ( Object1.CrsExpNameAr != null && Object2.CrsExpNameAr != null )
			{
				if (Object1.CrsExpNameAr != Object2.CrsExpNameAr)
					equal = false;
			}
			else if (Object1.CrsExpNameAr == null ^ Object2.CrsExpNameAr == null )
			{
				equal = false;
			}
			if ( Object1.CrsExpNameEn != null && Object2.CrsExpNameEn != null )
			{
				if (Object1.CrsExpNameEn != Object2.CrsExpNameEn)
					equal = false;
			}
			else if (Object1.CrsExpNameEn == null ^ Object2.CrsExpNameEn == null )
			{
				equal = false;
			}
			if ( Object1.EdCourseExpHdrId != null && Object2.EdCourseExpHdrId != null )
			{
				if (Object1.EdCourseExpHdrId != Object2.EdCourseExpHdrId)
					equal = false;
			}
			else if (Object1.EdCourseExpHdrId == null ^ Object2.EdCourseExpHdrId == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.CreditHours != null && Object2.CreditHours != null )
			{
				if (Object1.CreditHours != Object2.CreditHours)
					equal = false;
			}
			else if (Object1.CreditHours == null ^ Object2.CreditHours == null )
			{
				equal = false;
			}
			if ( Object1.EntCoursePkgHdrId != null && Object2.EntCoursePkgHdrId != null )
			{
				if (Object1.EntCoursePkgHdrId != Object2.EntCoursePkgHdrId)
					equal = false;
			}
			else if (Object1.EntCoursePkgHdrId == null ^ Object2.EntCoursePkgHdrId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EdAcadPlanDtlBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EdAcadPlanDtlComparer GetComparer()
        {
            return new EdAcadPlanDtlComparer();
        }
        */

        // Comparer delegates back to EdAcadPlanDtl
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EdAcadPlanDtl rhs, EdAcadPlanDtlColumn which)
        {
            switch (which)
            {
            	
            	
            	case EdAcadPlanDtlColumn.EdAcadPlanDtlId:
            		return this.EdAcadPlanDtlId.CompareTo(rhs.EdAcadPlanDtlId);
            		
            		                 
            	
            	
            	case EdAcadPlanDtlColumn.EdAcadPlanHdrId:
            		return this.EdAcadPlanHdrId.CompareTo(rhs.EdAcadPlanHdrId);
            		
            		                 
            	
            	
            	case EdAcadPlanDtlColumn.EdCourseId:
            		return this.EdCourseId.Value.CompareTo(rhs.EdCourseId.Value);
            		
            		                 
            	
            	
            	case EdAcadPlanDtlColumn.CrsExpFlg:
            		return this.CrsExpFlg.Value.CompareTo(rhs.CrsExpFlg.Value);
            		
            		                 
            	
            	
            	case EdAcadPlanDtlColumn.CrsExp:
            		return this.CrsExp.CompareTo(rhs.CrsExp);
            		
            		                 
            	
            	
            	case EdAcadPlanDtlColumn.CrsExpNameAr:
            		return this.CrsExpNameAr.CompareTo(rhs.CrsExpNameAr);
            		
            		                 
            	
            	
            	case EdAcadPlanDtlColumn.CrsExpNameEn:
            		return this.CrsExpNameEn.CompareTo(rhs.CrsExpNameEn);
            		
            		                 
            	
            	
            	case EdAcadPlanDtlColumn.EdCourseExpHdrId:
            		return this.EdCourseExpHdrId.Value.CompareTo(rhs.EdCourseExpHdrId.Value);
            		
            		                 
            	
            	
            	case EdAcadPlanDtlColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case EdAcadPlanDtlColumn.CreditHours:
            		return this.CreditHours.Value.CompareTo(rhs.CreditHours.Value);
            		
            		                 
            	
            	
            	case EdAcadPlanDtlColumn.EntCoursePkgHdrId:
            		return this.EntCoursePkgHdrId.Value.CompareTo(rhs.EntCoursePkgHdrId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EdAcadPlanDtlKey> Members
		
		// member variable for the EntityId property
		private EdAcadPlanDtlKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EdAcadPlanDtlKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EdAcadPlanDtlKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EdAcadPlanDtl")
					.Append("|").Append( this.EdAcadPlanDtlId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- EdAcadPlanDtlId: {0}{11}- EdAcadPlanHdrId: {1}{11}- EdCourseId: {2}{11}- CrsExpFlg: {3}{11}- CrsExp: {4}{11}- CrsExpNameAr: {5}{11}- CrsExpNameEn: {6}{11}- EdCourseExpHdrId: {7}{11}- Notes: {8}{11}- CreditHours: {9}{11}- EntCoursePkgHdrId: {10}{11}{13}", 
				this.EdAcadPlanDtlId,
				this.EdAcadPlanHdrId,
				(this.EdCourseId == null) ? string.Empty : this.EdCourseId.ToString(),
				(this.CrsExpFlg == null) ? string.Empty : this.CrsExpFlg.ToString(),
				(this.CrsExp == null) ? string.Empty : this.CrsExp.ToString(),
				(this.CrsExpNameAr == null) ? string.Empty : this.CrsExpNameAr.ToString(),
				(this.CrsExpNameEn == null) ? string.Empty : this.CrsExpNameEn.ToString(),
				(this.EdCourseExpHdrId == null) ? string.Empty : this.EdCourseExpHdrId.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.CreditHours == null) ? string.Empty : this.CreditHours.ToString(),
				(this.EntCoursePkgHdrId == null) ? string.Empty : this.EntCoursePkgHdrId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ED_ACAD_PLAN_DTL' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EdAcadPlanDtlEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ED_ACAD_PLAN_DTL_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ED_ACAD_PLAN_DTL"</remarks>
		public System.Decimal EdAcadPlanDtlId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalEdAcadPlanDtlId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ED_ACAD_PLAN_HDR_ID : 
		/// </summary>
		public System.Decimal		  EdAcadPlanHdrId = 0.0m;
		
		/// <summary>
		/// ED_COURSE_ID : 
		/// </summary>
		public System.Decimal?		  EdCourseId = null;
		
		/// <summary>
		/// CRS_EXP_FLG : 
		/// </summary>
		public System.Decimal?		  CrsExpFlg = null;
		
		/// <summary>
		/// CRS_EXP : 
		/// </summary>
		public System.String		  CrsExp = null;
		
		/// <summary>
		/// CRS_EXP_NAME_AR : 
		/// </summary>
		public System.String		  CrsExpNameAr = null;
		
		/// <summary>
		/// CRS_EXP_NAME_EN : 
		/// </summary>
		public System.String		  CrsExpNameEn = null;
		
		/// <summary>
		/// ED_COURSE_EXP_HDR_ID : 
		/// </summary>
		public System.Decimal?		  EdCourseExpHdrId = null;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// CREDIT_HOURS : 
		/// </summary>
		public System.Decimal?		  CreditHours = null;
		
		/// <summary>
		/// ENT_COURSE_PKG_HDR_ID : 
		/// </summary>
		public System.Decimal?		  EntCoursePkgHdrId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private EdAcadPlanHdr _edAcadPlanHdrIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdAcadPlanHdr"/>.
		/// </summary>
		/// <value>The source EdAcadPlanHdr for EdAcadPlanHdrId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdAcadPlanHdr EdAcadPlanHdrIdSource
      	{
            get { return this._edAcadPlanHdrIdSource; }
            set { this._edAcadPlanHdrIdSource = value; }
      	}
		private EdCourse _edCourseIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCourse"/>.
		/// </summary>
		/// <value>The source EdCourse for EdCourseId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCourse EdCourseIdSource
      	{
            get { return this._edCourseIdSource; }
            set { this._edCourseIdSource = value; }
      	}
		private EdCourseExpHdr _edCourseExpHdrIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EdCourseExpHdr"/>.
		/// </summary>
		/// <value>The source EdCourseExpHdr for EdCourseExpHdrId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EdCourseExpHdr EdCourseExpHdrIdSource
      	{
            get { return this._edCourseExpHdrIdSource; }
            set { this._edCourseExpHdrIdSource = value; }
      	}
		private EntCoursePkgHdr _entCoursePkgHdrIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntCoursePkgHdr"/>.
		/// </summary>
		/// <value>The source EntCoursePkgHdr for EntCoursePkgHdrId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntCoursePkgHdr EntCoursePkgHdrIdSource
      	{
            get { return this._entCoursePkgHdrIdSource; }
            set { this._entCoursePkgHdrIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region EdStudCourseRegCollection
		
		private TList<EdStudCourseReg> _edStudCourseRegEdAcadPlanDtlId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _edStudCourseRegEdAcadPlanDtlId
		/// </summary>
		
		public TList<EdStudCourseReg> EdStudCourseRegCollection
		{
			get
			{
				if (_edStudCourseRegEdAcadPlanDtlId == null)
				{
				_edStudCourseRegEdAcadPlanDtlId = new TList<EdStudCourseReg>();
				}
	
				return _edStudCourseRegEdAcadPlanDtlId;
			}
			set { _edStudCourseRegEdAcadPlanDtlId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EdAcadPlanDtlEntityData _tmp = new EdAcadPlanDtlEntityData();
						
			_tmp.EdAcadPlanDtlId = this.EdAcadPlanDtlId;
			_tmp.OriginalEdAcadPlanDtlId = this.OriginalEdAcadPlanDtlId;
			
			_tmp.EdAcadPlanHdrId = this.EdAcadPlanHdrId;
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.CrsExpFlg = this.CrsExpFlg;
			_tmp.CrsExp = this.CrsExp;
			_tmp.CrsExpNameAr = this.CrsExpNameAr;
			_tmp.CrsExpNameEn = this.CrsExpNameEn;
			_tmp.EdCourseExpHdrId = this.EdCourseExpHdrId;
			_tmp.Notes = this.Notes;
			_tmp.CreditHours = this.CreditHours;
			_tmp.EntCoursePkgHdrId = this.EntCoursePkgHdrId;
			
			#region Source Parent Composite Entities
			if (this.EdAcadPlanHdrIdSource != null)
				_tmp.EdAcadPlanHdrIdSource = MakeCopyOf(this.EdAcadPlanHdrIdSource) as EdAcadPlanHdr;
			if (this.EdCourseIdSource != null)
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource) as EdCourse;
			if (this.EdCourseExpHdrIdSource != null)
				_tmp.EdCourseExpHdrIdSource = MakeCopyOf(this.EdCourseExpHdrIdSource) as EdCourseExpHdr;
			if (this.EntCoursePkgHdrIdSource != null)
				_tmp.EntCoursePkgHdrIdSource = MakeCopyOf(this.EntCoursePkgHdrIdSource) as EntCoursePkgHdr;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._edStudCourseRegEdAcadPlanDtlId != null)
				_tmp.EdStudCourseRegCollection = (TList<EdStudCourseReg>) MakeCopyOf(this.EdStudCourseRegCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EdAcadPlanDtlEntityData _tmp = new EdAcadPlanDtlEntityData();
						
			_tmp.EdAcadPlanDtlId = this.EdAcadPlanDtlId;
			_tmp.OriginalEdAcadPlanDtlId = this.OriginalEdAcadPlanDtlId;
			
			_tmp.EdAcadPlanHdrId = this.EdAcadPlanHdrId;
			_tmp.EdCourseId = this.EdCourseId;
			_tmp.CrsExpFlg = this.CrsExpFlg;
			_tmp.CrsExp = this.CrsExp;
			_tmp.CrsExpNameAr = this.CrsExpNameAr;
			_tmp.CrsExpNameEn = this.CrsExpNameEn;
			_tmp.EdCourseExpHdrId = this.EdCourseExpHdrId;
			_tmp.Notes = this.Notes;
			_tmp.CreditHours = this.CreditHours;
			_tmp.EntCoursePkgHdrId = this.EntCoursePkgHdrId;
			
			#region Source Parent Composite Entities
			if (this.EdAcadPlanHdrIdSource != null && existingCopies.Contains(this.EdAcadPlanHdrIdSource))
				_tmp.EdAcadPlanHdrIdSource = existingCopies[this.EdAcadPlanHdrIdSource] as EdAcadPlanHdr;
			else
				_tmp.EdAcadPlanHdrIdSource = MakeCopyOf(this.EdAcadPlanHdrIdSource, existingCopies) as EdAcadPlanHdr;
			if (this.EdCourseIdSource != null && existingCopies.Contains(this.EdCourseIdSource))
				_tmp.EdCourseIdSource = existingCopies[this.EdCourseIdSource] as EdCourse;
			else
				_tmp.EdCourseIdSource = MakeCopyOf(this.EdCourseIdSource, existingCopies) as EdCourse;
			if (this.EdCourseExpHdrIdSource != null && existingCopies.Contains(this.EdCourseExpHdrIdSource))
				_tmp.EdCourseExpHdrIdSource = existingCopies[this.EdCourseExpHdrIdSource] as EdCourseExpHdr;
			else
				_tmp.EdCourseExpHdrIdSource = MakeCopyOf(this.EdCourseExpHdrIdSource, existingCopies) as EdCourseExpHdr;
			if (this.EntCoursePkgHdrIdSource != null && existingCopies.Contains(this.EntCoursePkgHdrIdSource))
				_tmp.EntCoursePkgHdrIdSource = existingCopies[this.EntCoursePkgHdrIdSource] as EntCoursePkgHdr;
			else
				_tmp.EntCoursePkgHdrIdSource = MakeCopyOf(this.EntCoursePkgHdrIdSource, existingCopies) as EntCoursePkgHdr;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EdStudCourseRegCollection = (TList<EdStudCourseReg>) MakeCopyOf(this.EdStudCourseRegCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdAcadPlanDtlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EdAcadPlanDtlColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdAcadPlanDtlColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EdAcadPlanDtlColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdAcadPlanDtlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EdAcadPlanDtlColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EdAcadPlanDtlEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EdAcadPlanDtlEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EdAcadPlanDtlColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EdAcadPlanDtlColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EdAcadPlanDtlEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EdAcadPlanDtlEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EdAcadPlanDtlEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EdAcadPlanDtl"/> object.
	/// </remarks>
	public class EdAcadPlanDtlEventArgs : System.EventArgs
	{
		private EdAcadPlanDtlColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EdAcadPlanDtlEventArgs class.
		///</summary>
		public EdAcadPlanDtlEventArgs(EdAcadPlanDtlColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EdAcadPlanDtlEventArgs class.
		///</summary>
		public EdAcadPlanDtlEventArgs(EdAcadPlanDtlColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EdAcadPlanDtlColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EdAcadPlanDtlColumn" />
		public EdAcadPlanDtlColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EdAcadPlanDtl related events.
	///</summary>
	public delegate void EdAcadPlanDtlEventHandler(object sender, EdAcadPlanDtlEventArgs e);
	
	#region EdAcadPlanDtlComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EdAcadPlanDtlComparer : System.Collections.Generic.IComparer<EdAcadPlanDtl>
	{
		EdAcadPlanDtlColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EdAcadPlanDtlComparer"/> class.
        /// </summary>
		public EdAcadPlanDtlComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EdAcadPlanDtlComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EdAcadPlanDtlComparer(EdAcadPlanDtlColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EdAcadPlanDtl"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EdAcadPlanDtl"/> to compare.</param>
        /// <param name="b">The second <c>EdAcadPlanDtl</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EdAcadPlanDtl a, EdAcadPlanDtl b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EdAcadPlanDtl entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EdAcadPlanDtl a, EdAcadPlanDtl b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EdAcadPlanDtlColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EdAcadPlanDtlKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EdAcadPlanDtl"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EdAcadPlanDtlKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EdAcadPlanDtlKey class.
		/// </summary>
		public EdAcadPlanDtlKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EdAcadPlanDtlKey class.
		/// </summary>
		public EdAcadPlanDtlKey(EdAcadPlanDtlBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EdAcadPlanDtlId = entity.EdAcadPlanDtlId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EdAcadPlanDtlKey class.
		/// </summary>
		public EdAcadPlanDtlKey(System.Decimal _edAcadPlanDtlId)
		{
			#region Init Properties

			this.EdAcadPlanDtlId = _edAcadPlanDtlId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EdAcadPlanDtlBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EdAcadPlanDtlBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EdAcadPlanDtlId property
		private System.Decimal _edAcadPlanDtlId;
		
		/// <summary>
		/// Gets or sets the EdAcadPlanDtlId property.
		/// </summary>
		public System.Decimal EdAcadPlanDtlId
		{
			get { return _edAcadPlanDtlId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EdAcadPlanDtlId = value;
				
				_edAcadPlanDtlId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EdAcadPlanDtlId = ( values["EdAcadPlanDtlId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["EdAcadPlanDtlId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EdAcadPlanDtlId", EdAcadPlanDtlId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EdAcadPlanDtlId: {0}{1}",
								EdAcadPlanDtlId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EdAcadPlanDtlColumn Enum
	
	/// <summary>
	/// Enumerate the EdAcadPlanDtl columns.
	/// </summary>
	[Serializable]
	public enum EdAcadPlanDtlColumn : int
	{
		/// <summary>
		/// EdAcadPlanDtlId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_PLAN_DTL_ID")]
		[ColumnEnum("ED_ACAD_PLAN_DTL_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		EdAcadPlanDtlId = 1,
		/// <summary>
		/// EdAcadPlanHdrId : 
		/// </summary>
		[EnumTextValue("ED_ACAD_PLAN_HDR_ID")]
		[ColumnEnum("ED_ACAD_PLAN_HDR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EdAcadPlanHdrId = 2,
		/// <summary>
		/// EdCourseId : 
		/// </summary>
		[EnumTextValue("ED_COURSE_ID")]
		[ColumnEnum("ED_COURSE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCourseId = 3,
		/// <summary>
		/// CrsExpFlg : 
		/// </summary>
		[EnumTextValue("CRS_EXP_FLG")]
		[ColumnEnum("CRS_EXP_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CrsExpFlg = 4,
		/// <summary>
		/// CrsExp : 
		/// </summary>
		[EnumTextValue("CRS_EXP")]
		[ColumnEnum("CRS_EXP", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		CrsExp = 5,
		/// <summary>
		/// CrsExpNameAr : 
		/// </summary>
		[EnumTextValue("CRS_EXP_NAME_AR")]
		[ColumnEnum("CRS_EXP_NAME_AR", typeof(System.String), System.Data.DbType.String, false, false, true, 60)]
		CrsExpNameAr = 6,
		/// <summary>
		/// CrsExpNameEn : 
		/// </summary>
		[EnumTextValue("CRS_EXP_NAME_EN")]
		[ColumnEnum("CRS_EXP_NAME_EN", typeof(System.String), System.Data.DbType.String, false, false, true, 60)]
		CrsExpNameEn = 7,
		/// <summary>
		/// EdCourseExpHdrId : 
		/// </summary>
		[EnumTextValue("ED_COURSE_EXP_HDR_ID")]
		[ColumnEnum("ED_COURSE_EXP_HDR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EdCourseExpHdrId = 8,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		Notes = 9,
		/// <summary>
		/// CreditHours : 
		/// </summary>
		[EnumTextValue("CREDIT_HOURS")]
		[ColumnEnum("CREDIT_HOURS", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CreditHours = 10,
		/// <summary>
		/// EntCoursePkgHdrId : 
		/// </summary>
		[EnumTextValue("ENT_COURSE_PKG_HDR_ID")]
		[ColumnEnum("ENT_COURSE_PKG_HDR_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EntCoursePkgHdrId = 11
	}//End enum

	#endregion EdAcadPlanDtlColumn Enum

} // end namespace
