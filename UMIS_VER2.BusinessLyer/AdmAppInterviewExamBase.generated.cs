
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AdmAppInterviewExam.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ADM_APP_INTERVIEW_EXAM' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AdmAppInterviewExamBase : EntityBase, IAdmAppInterviewExam, IEntityId<AdmAppInterviewExamKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AdmAppInterviewExamEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AdmAppInterviewExamEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AdmAppInterviewExamEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AdmAppInterviewExam> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmAppInterviewExamEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmAppInterviewExamEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AdmAppInterviewExamBase"/> instance.
		///</summary>
		public AdmAppInterviewExamBase()
		{
			this.entityData = new AdmAppInterviewExamEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AdmAppInterviewExamBase"/> instance.
		///</summary>
		///<param name="_admAppInterviewExamId">اختبار انترفيو  لكل رغبة للمتقدم</param>
		///<param name="_admAppRegHistoryId"></param>
		///<param name="_admCdePlacementExamId">interview_flg=1</param>
		///<param name="_entMainId">التخصص-  تاب الرغبات</param>
		///<param name="_examDate">موعد  مقابلة</param>
		///<param name="_timeFrom"></param>
		///<param name="_timeTo"></param>
		///<param name="_location"></param>
		///<param name="_saStfMemberId">EjustPGINTER</param>
		///<param name="_mark">NU:auto if doublegrade(min(writing/or score)</param>
		///<param name="_passFlg"></param>
		///<param name="_absFlg"></param>
		///<param name="_approveFlg"></param>
		///<param name="_notes"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public AdmAppInterviewExamBase(System.Decimal _admAppInterviewExamId, System.Decimal _admAppRegHistoryId, 
			System.Decimal _admCdePlacementExamId, System.Decimal _entMainId, System.DateTime _examDate, 
			System.DateTime? _timeFrom, System.DateTime? _timeTo, System.String _location, 
			System.Decimal _saStfMemberId, System.Decimal? _mark, System.Decimal? _passFlg, 
			System.Boolean? _absFlg, System.Boolean? _approveFlg, System.String _notes, 
			System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			this.entityData = new AdmAppInterviewExamEntityData();
			this.backupData = null;

			this.AdmAppInterviewExamId = _admAppInterviewExamId;
			this.AdmAppRegHistoryId = _admAppRegHistoryId;
			this.AdmCdePlacementExamId = _admCdePlacementExamId;
			this.EntMainId = _entMainId;
			this.ExamDate = _examDate;
			this.TimeFrom = _timeFrom;
			this.TimeTo = _timeTo;
			this.Location = _location;
			this.SaStfMemberId = _saStfMemberId;
			this.Mark = _mark;
			this.PassFlg = _passFlg;
			this.AbsFlg = _absFlg;
			this.ApproveFlg = _approveFlg;
			this.Notes = _notes;
			this.SeUserId = _seUserId;
			this.LastDate = _lastDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AdmAppInterviewExam"/> instance.
		///</summary>
		///<param name="_admAppInterviewExamId">اختبار انترفيو  لكل رغبة للمتقدم</param>
		///<param name="_admAppRegHistoryId"></param>
		///<param name="_admCdePlacementExamId">interview_flg=1</param>
		///<param name="_entMainId">التخصص-  تاب الرغبات</param>
		///<param name="_examDate">موعد  مقابلة</param>
		///<param name="_timeFrom"></param>
		///<param name="_timeTo"></param>
		///<param name="_location"></param>
		///<param name="_saStfMemberId">EjustPGINTER</param>
		///<param name="_mark">NU:auto if doublegrade(min(writing/or score)</param>
		///<param name="_passFlg"></param>
		///<param name="_absFlg"></param>
		///<param name="_approveFlg"></param>
		///<param name="_notes"></param>
		///<param name="_seUserId"></param>
		///<param name="_lastDate"></param>
		public static AdmAppInterviewExam CreateAdmAppInterviewExam(System.Decimal _admAppInterviewExamId, System.Decimal _admAppRegHistoryId, 
			System.Decimal _admCdePlacementExamId, System.Decimal _entMainId, System.DateTime _examDate, 
			System.DateTime? _timeFrom, System.DateTime? _timeTo, System.String _location, 
			System.Decimal _saStfMemberId, System.Decimal? _mark, System.Decimal? _passFlg, 
			System.Boolean? _absFlg, System.Boolean? _approveFlg, System.String _notes, 
			System.Decimal? _seUserId, System.DateTime? _lastDate)
		{
			AdmAppInterviewExam newAdmAppInterviewExam = new AdmAppInterviewExam();
			newAdmAppInterviewExam.AdmAppInterviewExamId = _admAppInterviewExamId;
			newAdmAppInterviewExam.AdmAppRegHistoryId = _admAppRegHistoryId;
			newAdmAppInterviewExam.AdmCdePlacementExamId = _admCdePlacementExamId;
			newAdmAppInterviewExam.EntMainId = _entMainId;
			newAdmAppInterviewExam.ExamDate = _examDate;
			newAdmAppInterviewExam.TimeFrom = _timeFrom;
			newAdmAppInterviewExam.TimeTo = _timeTo;
			newAdmAppInterviewExam.Location = _location;
			newAdmAppInterviewExam.SaStfMemberId = _saStfMemberId;
			newAdmAppInterviewExam.Mark = _mark;
			newAdmAppInterviewExam.PassFlg = _passFlg;
			newAdmAppInterviewExam.AbsFlg = _absFlg;
			newAdmAppInterviewExam.ApproveFlg = _approveFlg;
			newAdmAppInterviewExam.Notes = _notes;
			newAdmAppInterviewExam.SeUserId = _seUserId;
			newAdmAppInterviewExam.LastDate = _lastDate;
			return newAdmAppInterviewExam;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AdmAppInterviewExamId property. 
		///		اختبار انترفيو  لكل رغبة للمتقدم
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"اختبار انترفيو  لكل رغبة للمتقدم"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal AdmAppInterviewExamId
		{
			get
			{
				return this.entityData.AdmAppInterviewExamId; 
			}
			
			set
			{
				if (this.entityData.AdmAppInterviewExamId == value)
					return;
					
				OnColumnChanging(AdmAppInterviewExamColumn.AdmAppInterviewExamId, this.entityData.AdmAppInterviewExamId);
				this.entityData.AdmAppInterviewExamId = value;
				this.EntityId.AdmAppInterviewExamId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppInterviewExamColumn.AdmAppInterviewExamId, this.entityData.AdmAppInterviewExamId);
				OnPropertyChanged("AdmAppInterviewExamId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ADM_APP_INTERVIEW_EXAM_ID property.
		///		اختبار انترفيو  لكل رغبة للمتقدم
		/// </summary>
		/// <remarks>This is the original value of the ADM_APP_INTERVIEW_EXAM_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalAdmAppInterviewExamId
		{
			get { return this.entityData.OriginalAdmAppInterviewExamId; }
			set { this.entityData.OriginalAdmAppInterviewExamId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the AdmAppRegHistoryId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AdmAppRegHistoryId
		{
			get
			{
				return this.entityData.AdmAppRegHistoryId; 
			}
			
			set
			{
				if (this.entityData.AdmAppRegHistoryId == value)
					return;
					
				OnColumnChanging(AdmAppInterviewExamColumn.AdmAppRegHistoryId, this.entityData.AdmAppRegHistoryId);
				this.entityData.AdmAppRegHistoryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppInterviewExamColumn.AdmAppRegHistoryId, this.entityData.AdmAppRegHistoryId);
				OnPropertyChanged("AdmAppRegHistoryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdmCdePlacementExamId property. 
		///		interview_flg=1
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"interview_flg=1"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AdmCdePlacementExamId
		{
			get
			{
				return this.entityData.AdmCdePlacementExamId; 
			}
			
			set
			{
				if (this.entityData.AdmCdePlacementExamId == value)
					return;
					
				OnColumnChanging(AdmAppInterviewExamColumn.AdmCdePlacementExamId, this.entityData.AdmCdePlacementExamId);
				this.entityData.AdmCdePlacementExamId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppInterviewExamColumn.AdmCdePlacementExamId, this.entityData.AdmCdePlacementExamId);
				OnPropertyChanged("AdmCdePlacementExamId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EntMainId property. 
		///		التخصص-  تاب الرغبات
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"التخصص-  تاب الرغبات"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EntMainId
		{
			get
			{
				return this.entityData.EntMainId; 
			}
			
			set
			{
				if (this.entityData.EntMainId == value)
					return;
					
				OnColumnChanging(AdmAppInterviewExamColumn.EntMainId, this.entityData.EntMainId);
				this.entityData.EntMainId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppInterviewExamColumn.EntMainId, this.entityData.EntMainId);
				OnPropertyChanged("EntMainId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExamDate property. 
		///		موعد  مقابلة
		/// </summary>
		/// <value>This type is date.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"موعد  مقابلة"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ExamDate
		{
			get
			{
				return this.entityData.ExamDate; 
			}
			
			set
			{
				if (this.entityData.ExamDate == value)
					return;
					
				OnColumnChanging(AdmAppInterviewExamColumn.ExamDate, this.entityData.ExamDate);
				this.entityData.ExamDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppInterviewExamColumn.ExamDate, this.entityData.ExamDate);
				OnPropertyChanged("ExamDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TimeFrom property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsTimeFromNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? TimeFrom
		{
			get
			{
				return this.entityData.TimeFrom; 
			}
			
			set
			{
				if (this.entityData.TimeFrom == value)
					return;
					
				OnColumnChanging(AdmAppInterviewExamColumn.TimeFrom, this.entityData.TimeFrom);
				this.entityData.TimeFrom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppInterviewExamColumn.TimeFrom, this.entityData.TimeFrom);
				OnPropertyChanged("TimeFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TimeTo property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsTimeToNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? TimeTo
		{
			get
			{
				return this.entityData.TimeTo; 
			}
			
			set
			{
				if (this.entityData.TimeTo == value)
					return;
					
				OnColumnChanging(AdmAppInterviewExamColumn.TimeTo, this.entityData.TimeTo);
				this.entityData.TimeTo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppInterviewExamColumn.TimeTo, this.entityData.TimeTo);
				OnPropertyChanged("TimeTo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Location property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 250)]
		public virtual System.String Location
		{
			get
			{
				return this.entityData.Location; 
			}
			
			set
			{
				if (this.entityData.Location == value)
					return;
					
				OnColumnChanging(AdmAppInterviewExamColumn.Location, this.entityData.Location);
				this.entityData.Location = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppInterviewExamColumn.Location, this.entityData.Location);
				OnPropertyChanged("Location");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SaStfMemberId property. 
		///		EjustPGINTER
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"EjustPGINTER"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal SaStfMemberId
		{
			get
			{
				return this.entityData.SaStfMemberId; 
			}
			
			set
			{
				if (this.entityData.SaStfMemberId == value)
					return;
					
				OnColumnChanging(AdmAppInterviewExamColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				this.entityData.SaStfMemberId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppInterviewExamColumn.SaStfMemberId, this.entityData.SaStfMemberId);
				OnPropertyChanged("SaStfMemberId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Mark property. 
		///		NU:auto if doublegrade(min(writing/or score)
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@"NU:auto if doublegrade(min(writing/or score)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Mark
		{
			get
			{
				return this.entityData.Mark; 
			}
			
			set
			{
				if (this.entityData.Mark == value)
					return;
					
				OnColumnChanging(AdmAppInterviewExamColumn.Mark, this.entityData.Mark);
				this.entityData.Mark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppInterviewExamColumn.Mark, this.entityData.Mark);
				OnPropertyChanged("Mark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PassFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPassFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PassFlg
		{
			get
			{
				return this.entityData.PassFlg; 
			}
			
			set
			{
				if (this.entityData.PassFlg == value)
					return;
					
				OnColumnChanging(AdmAppInterviewExamColumn.PassFlg, this.entityData.PassFlg);
				this.entityData.PassFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppInterviewExamColumn.PassFlg, this.entityData.PassFlg);
				OnPropertyChanged("PassFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AbsFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsAbsFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? AbsFlg
		{
			get
			{
				return this.entityData.AbsFlg; 
			}
			
			set
			{
				if (this.entityData.AbsFlg == value)
					return;
					
				OnColumnChanging(AdmAppInterviewExamColumn.AbsFlg, this.entityData.AbsFlg);
				this.entityData.AbsFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppInterviewExamColumn.AbsFlg, this.entityData.AbsFlg);
				OnPropertyChanged("AbsFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApproveFlg property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsApproveFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ApproveFlg
		{
			get
			{
				return this.entityData.ApproveFlg; 
			}
			
			set
			{
				if (this.entityData.ApproveFlg == value)
					return;
					
				OnColumnChanging(AdmAppInterviewExamColumn.ApproveFlg, this.entityData.ApproveFlg);
				this.entityData.ApproveFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppInterviewExamColumn.ApproveFlg, this.entityData.ApproveFlg);
				OnPropertyChanged("ApproveFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(AdmAppInterviewExamColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppInterviewExamColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeUserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSeUserIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SeUserId
		{
			get
			{
				return this.entityData.SeUserId; 
			}
			
			set
			{
				if (this.entityData.SeUserId == value)
					return;
					
				OnColumnChanging(AdmAppInterviewExamColumn.SeUserId, this.entityData.SeUserId);
				this.entityData.SeUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppInterviewExamColumn.SeUserId, this.entityData.SeUserId);
				OnPropertyChanged("SeUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
					
				OnColumnChanging(AdmAppInterviewExamColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmAppInterviewExamColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdmAppRegHistory"/>.
		/// </summary>
		/// <value>The source AdmAppRegHistory for AdmAppRegHistoryId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmAppRegHistory AdmAppRegHistoryIdSource
      	{
            get { return entityData.AdmAppRegHistoryIdSource; }
            set { entityData.AdmAppRegHistoryIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdePlacementExam"/>.
		/// </summary>
		/// <value>The source AdmCdePlacementExam for AdmCdePlacementExamId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmCdePlacementExam AdmCdePlacementExamIdSource
      	{
            get { return entityData.AdmCdePlacementExamIdSource; }
            set { entityData.AdmCdePlacementExamIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return entityData.EntMainIdSource; }
            set { entityData.EntMainIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return entityData.SaStfMemberIdSource; }
            set { entityData.SaStfMemberIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Location", "Location", 250));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notes", "Notes", 200));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ADM_APP_INTERVIEW_EXAM"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ADM_APP_INTERVIEW_EXAM_ID", "ADM_APP_REG_HISTORY_ID", "ADM_CDE_PLACEMENT_EXAM_ID", "ENT_MAIN_ID", "EXAM_DATE", "TIME_FROM", "TIME_TO", "LOCATION", "SA_STF_MEMBER_ID", "MARK", "PASS_FLG", "ABS_FLG", "APPROVE_FLG", "NOTES", "SE_USER_ID", "LAST_DATE"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AdmAppInterviewExamEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AdmAppInterviewExam) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AdmAppInterviewExam>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AdmAppInterviewExam);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AdmAppInterviewExam Entity 
		///</summary>
		protected virtual AdmAppInterviewExam Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AdmAppInterviewExam copy = new AdmAppInterviewExam();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AdmAppInterviewExamId = this.AdmAppInterviewExamId;
					copy.OriginalAdmAppInterviewExamId = this.OriginalAdmAppInterviewExamId;
				copy.AdmAppRegHistoryId = this.AdmAppRegHistoryId;
				copy.AdmCdePlacementExamId = this.AdmCdePlacementExamId;
				copy.EntMainId = this.EntMainId;
				copy.ExamDate = this.ExamDate;
				copy.TimeFrom = this.TimeFrom;
				copy.TimeTo = this.TimeTo;
				copy.Location = this.Location;
				copy.SaStfMemberId = this.SaStfMemberId;
				copy.Mark = this.Mark;
				copy.PassFlg = this.PassFlg;
				copy.AbsFlg = this.AbsFlg;
				copy.ApproveFlg = this.ApproveFlg;
				copy.Notes = this.Notes;
				copy.SeUserId = this.SeUserId;
				copy.LastDate = this.LastDate;
			
			if (this.AdmAppRegHistoryIdSource != null && existingCopies.Contains(this.AdmAppRegHistoryIdSource))
				copy.AdmAppRegHistoryIdSource = existingCopies[this.AdmAppRegHistoryIdSource] as AdmAppRegHistory;
			else
				copy.AdmAppRegHistoryIdSource = MakeCopyOf(this.AdmAppRegHistoryIdSource, existingCopies) as AdmAppRegHistory;
			if (this.AdmCdePlacementExamIdSource != null && existingCopies.Contains(this.AdmCdePlacementExamIdSource))
				copy.AdmCdePlacementExamIdSource = existingCopies[this.AdmCdePlacementExamIdSource] as AdmCdePlacementExam;
			else
				copy.AdmCdePlacementExamIdSource = MakeCopyOf(this.AdmCdePlacementExamIdSource, existingCopies) as AdmCdePlacementExam;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				copy.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				copy.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				copy.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				copy.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AdmAppInterviewExam Entity 
		///</summary>
		public virtual AdmAppInterviewExam Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AdmAppInterviewExam Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AdmAppInterviewExam DeepCopy()
		{
			return EntityHelper.Clone<AdmAppInterviewExam>(this as AdmAppInterviewExam);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AdmAppInterviewExamEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AdmAppInterviewExamEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AdmAppInterviewExamEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AdmAppInterviewExamColumn column)
		{
			switch(column)
			{
					case AdmAppInterviewExamColumn.AdmAppInterviewExamId:
					return entityData.AdmAppInterviewExamId != _originalData.AdmAppInterviewExamId;
					case AdmAppInterviewExamColumn.AdmAppRegHistoryId:
					return entityData.AdmAppRegHistoryId != _originalData.AdmAppRegHistoryId;
					case AdmAppInterviewExamColumn.AdmCdePlacementExamId:
					return entityData.AdmCdePlacementExamId != _originalData.AdmCdePlacementExamId;
					case AdmAppInterviewExamColumn.EntMainId:
					return entityData.EntMainId != _originalData.EntMainId;
					case AdmAppInterviewExamColumn.ExamDate:
					return entityData.ExamDate != _originalData.ExamDate;
					case AdmAppInterviewExamColumn.TimeFrom:
					return entityData.TimeFrom != _originalData.TimeFrom;
					case AdmAppInterviewExamColumn.TimeTo:
					return entityData.TimeTo != _originalData.TimeTo;
					case AdmAppInterviewExamColumn.Location:
					return entityData.Location != _originalData.Location;
					case AdmAppInterviewExamColumn.SaStfMemberId:
					return entityData.SaStfMemberId != _originalData.SaStfMemberId;
					case AdmAppInterviewExamColumn.Mark:
					return entityData.Mark != _originalData.Mark;
					case AdmAppInterviewExamColumn.PassFlg:
					return entityData.PassFlg != _originalData.PassFlg;
					case AdmAppInterviewExamColumn.AbsFlg:
					return entityData.AbsFlg != _originalData.AbsFlg;
					case AdmAppInterviewExamColumn.ApproveFlg:
					return entityData.ApproveFlg != _originalData.ApproveFlg;
					case AdmAppInterviewExamColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case AdmAppInterviewExamColumn.SeUserId:
					return entityData.SeUserId != _originalData.SeUserId;
					case AdmAppInterviewExamColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AdmAppInterviewExamColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AdmAppInterviewExamId != _originalData.AdmAppInterviewExamId;
			result = result || entityData.AdmAppRegHistoryId != _originalData.AdmAppRegHistoryId;
			result = result || entityData.AdmCdePlacementExamId != _originalData.AdmCdePlacementExamId;
			result = result || entityData.EntMainId != _originalData.EntMainId;
			result = result || entityData.ExamDate != _originalData.ExamDate;
			result = result || entityData.TimeFrom != _originalData.TimeFrom;
			result = result || entityData.TimeTo != _originalData.TimeTo;
			result = result || entityData.Location != _originalData.Location;
			result = result || entityData.SaStfMemberId != _originalData.SaStfMemberId;
			result = result || entityData.Mark != _originalData.Mark;
			result = result || entityData.PassFlg != _originalData.PassFlg;
			result = result || entityData.AbsFlg != _originalData.AbsFlg;
			result = result || entityData.ApproveFlg != _originalData.ApproveFlg;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.SeUserId != _originalData.SeUserId;
			result = result || entityData.LastDate != _originalData.LastDate;
			return result;
		}	
		
		///<summary>
		///  Returns a AdmAppInterviewExam Entity with the original data.
		///</summary>
		public AdmAppInterviewExam GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAdmAppInterviewExam(
				_originalData.AdmAppInterviewExamId,
				_originalData.AdmAppRegHistoryId,
				_originalData.AdmCdePlacementExamId,
				_originalData.EntMainId,
				_originalData.ExamDate,
				_originalData.TimeFrom,
				_originalData.TimeTo,
				_originalData.Location,
				_originalData.SaStfMemberId,
				_originalData.Mark,
				_originalData.PassFlg,
				_originalData.AbsFlg,
				_originalData.ApproveFlg,
				_originalData.Notes,
				_originalData.SeUserId,
				_originalData.LastDate
				);
				
			return (AdmAppInterviewExam)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AdmAppInterviewExamBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AdmAppInterviewExamBase)
				return ValueEquals(this, (AdmAppInterviewExamBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AdmAppInterviewExamBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AdmAppInterviewExamId.GetHashCode() ^ 
					this.AdmAppRegHistoryId.GetHashCode() ^ 
					this.AdmCdePlacementExamId.GetHashCode() ^ 
					this.EntMainId.GetHashCode() ^ 
					this.ExamDate.GetHashCode() ^ 
					((this.TimeFrom == null) ? string.Empty : this.TimeFrom.ToString()).GetHashCode() ^ 
					((this.TimeTo == null) ? string.Empty : this.TimeTo.ToString()).GetHashCode() ^ 
					((this.Location == null) ? string.Empty : this.Location.ToString()).GetHashCode() ^ 
					this.SaStfMemberId.GetHashCode() ^ 
					((this.Mark == null) ? string.Empty : this.Mark.ToString()).GetHashCode() ^ 
					((this.PassFlg == null) ? string.Empty : this.PassFlg.ToString()).GetHashCode() ^ 
					((this.AbsFlg == null) ? string.Empty : this.AbsFlg.ToString()).GetHashCode() ^ 
					((this.ApproveFlg == null) ? string.Empty : this.ApproveFlg.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.SeUserId == null) ? string.Empty : this.SeUserId.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AdmAppInterviewExamBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AdmAppInterviewExamBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AdmAppInterviewExamBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AdmAppInterviewExamBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AdmAppInterviewExamBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AdmAppInterviewExamBase Object1, AdmAppInterviewExamBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AdmAppInterviewExamId != Object2.AdmAppInterviewExamId)
				equal = false;
			if (Object1.AdmAppRegHistoryId != Object2.AdmAppRegHistoryId)
				equal = false;
			if (Object1.AdmCdePlacementExamId != Object2.AdmCdePlacementExamId)
				equal = false;
			if (Object1.EntMainId != Object2.EntMainId)
				equal = false;
			if (Object1.ExamDate != Object2.ExamDate)
				equal = false;
			if ( Object1.TimeFrom != null && Object2.TimeFrom != null )
			{
				if (Object1.TimeFrom != Object2.TimeFrom)
					equal = false;
			}
			else if (Object1.TimeFrom == null ^ Object2.TimeFrom == null )
			{
				equal = false;
			}
			if ( Object1.TimeTo != null && Object2.TimeTo != null )
			{
				if (Object1.TimeTo != Object2.TimeTo)
					equal = false;
			}
			else if (Object1.TimeTo == null ^ Object2.TimeTo == null )
			{
				equal = false;
			}
			if ( Object1.Location != null && Object2.Location != null )
			{
				if (Object1.Location != Object2.Location)
					equal = false;
			}
			else if (Object1.Location == null ^ Object2.Location == null )
			{
				equal = false;
			}
			if (Object1.SaStfMemberId != Object2.SaStfMemberId)
				equal = false;
			if ( Object1.Mark != null && Object2.Mark != null )
			{
				if (Object1.Mark != Object2.Mark)
					equal = false;
			}
			else if (Object1.Mark == null ^ Object2.Mark == null )
			{
				equal = false;
			}
			if ( Object1.PassFlg != null && Object2.PassFlg != null )
			{
				if (Object1.PassFlg != Object2.PassFlg)
					equal = false;
			}
			else if (Object1.PassFlg == null ^ Object2.PassFlg == null )
			{
				equal = false;
			}
			if ( Object1.AbsFlg != null && Object2.AbsFlg != null )
			{
				if (Object1.AbsFlg != Object2.AbsFlg)
					equal = false;
			}
			else if (Object1.AbsFlg == null ^ Object2.AbsFlg == null )
			{
				equal = false;
			}
			if ( Object1.ApproveFlg != null && Object2.ApproveFlg != null )
			{
				if (Object1.ApproveFlg != Object2.ApproveFlg)
					equal = false;
			}
			else if (Object1.ApproveFlg == null ^ Object2.ApproveFlg == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.SeUserId != null && Object2.SeUserId != null )
			{
				if (Object1.SeUserId != Object2.SeUserId)
					equal = false;
			}
			else if (Object1.SeUserId == null ^ Object2.SeUserId == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AdmAppInterviewExamBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AdmAppInterviewExamComparer GetComparer()
        {
            return new AdmAppInterviewExamComparer();
        }
        */

        // Comparer delegates back to AdmAppInterviewExam
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AdmAppInterviewExam rhs, AdmAppInterviewExamColumn which)
        {
            switch (which)
            {
            	
            	
            	case AdmAppInterviewExamColumn.AdmAppInterviewExamId:
            		return this.AdmAppInterviewExamId.CompareTo(rhs.AdmAppInterviewExamId);
            		
            		                 
            	
            	
            	case AdmAppInterviewExamColumn.AdmAppRegHistoryId:
            		return this.AdmAppRegHistoryId.CompareTo(rhs.AdmAppRegHistoryId);
            		
            		                 
            	
            	
            	case AdmAppInterviewExamColumn.AdmCdePlacementExamId:
            		return this.AdmCdePlacementExamId.CompareTo(rhs.AdmCdePlacementExamId);
            		
            		                 
            	
            	
            	case AdmAppInterviewExamColumn.EntMainId:
            		return this.EntMainId.CompareTo(rhs.EntMainId);
            		
            		                 
            	
            	
            	case AdmAppInterviewExamColumn.ExamDate:
            		return this.ExamDate.CompareTo(rhs.ExamDate);
            		
            		                 
            	
            	
            	case AdmAppInterviewExamColumn.TimeFrom:
            		return this.TimeFrom.Value.CompareTo(rhs.TimeFrom.Value);
            		
            		                 
            	
            	
            	case AdmAppInterviewExamColumn.TimeTo:
            		return this.TimeTo.Value.CompareTo(rhs.TimeTo.Value);
            		
            		                 
            	
            	
            	case AdmAppInterviewExamColumn.Location:
            		return this.Location.CompareTo(rhs.Location);
            		
            		                 
            	
            	
            	case AdmAppInterviewExamColumn.SaStfMemberId:
            		return this.SaStfMemberId.CompareTo(rhs.SaStfMemberId);
            		
            		                 
            	
            	
            	case AdmAppInterviewExamColumn.Mark:
            		return this.Mark.Value.CompareTo(rhs.Mark.Value);
            		
            		                 
            	
            	
            	case AdmAppInterviewExamColumn.PassFlg:
            		return this.PassFlg.Value.CompareTo(rhs.PassFlg.Value);
            		
            		                 
            	
            	
            	case AdmAppInterviewExamColumn.AbsFlg:
            		return this.AbsFlg.Value.CompareTo(rhs.AbsFlg.Value);
            		
            		                 
            	
            	
            	case AdmAppInterviewExamColumn.ApproveFlg:
            		return this.ApproveFlg.Value.CompareTo(rhs.ApproveFlg.Value);
            		
            		                 
            	
            	
            	case AdmAppInterviewExamColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case AdmAppInterviewExamColumn.SeUserId:
            		return this.SeUserId.Value.CompareTo(rhs.SeUserId.Value);
            		
            		                 
            	
            	
            	case AdmAppInterviewExamColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AdmAppInterviewExamKey> Members
		
		// member variable for the EntityId property
		private AdmAppInterviewExamKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AdmAppInterviewExamKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AdmAppInterviewExamKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AdmAppInterviewExam")
					.Append("|").Append( this.AdmAppInterviewExamId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{17}{16}- AdmAppInterviewExamId: {0}{16}- AdmAppRegHistoryId: {1}{16}- AdmCdePlacementExamId: {2}{16}- EntMainId: {3}{16}- ExamDate: {4}{16}- TimeFrom: {5}{16}- TimeTo: {6}{16}- Location: {7}{16}- SaStfMemberId: {8}{16}- Mark: {9}{16}- PassFlg: {10}{16}- AbsFlg: {11}{16}- ApproveFlg: {12}{16}- Notes: {13}{16}- SeUserId: {14}{16}- LastDate: {15}{16}{18}", 
				this.AdmAppInterviewExamId,
				this.AdmAppRegHistoryId,
				this.AdmCdePlacementExamId,
				this.EntMainId,
				this.ExamDate,
				(this.TimeFrom == null) ? string.Empty : this.TimeFrom.ToString(),
				(this.TimeTo == null) ? string.Empty : this.TimeTo.ToString(),
				(this.Location == null) ? string.Empty : this.Location.ToString(),
				this.SaStfMemberId,
				(this.Mark == null) ? string.Empty : this.Mark.ToString(),
				(this.PassFlg == null) ? string.Empty : this.PassFlg.ToString(),
				(this.AbsFlg == null) ? string.Empty : this.AbsFlg.ToString(),
				(this.ApproveFlg == null) ? string.Empty : this.ApproveFlg.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.SeUserId == null) ? string.Empty : this.SeUserId.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ADM_APP_INTERVIEW_EXAM' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AdmAppInterviewExamEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ADM_APP_INTERVIEW_EXAM_ID : اختبار انترفيو  لكل رغبة للمتقدم
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ADM_APP_INTERVIEW_EXAM"</remarks>
		public System.Decimal AdmAppInterviewExamId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalAdmAppInterviewExamId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ADM_APP_REG_HISTORY_ID : 
		/// </summary>
		public System.Decimal		  AdmAppRegHistoryId = 0.0m;
		
		/// <summary>
		/// ADM_CDE_PLACEMENT_EXAM_ID : interview_flg=1
		/// </summary>
		public System.Decimal		  AdmCdePlacementExamId = 0.0m;
		
		/// <summary>
		/// ENT_MAIN_ID : التخصص-  تاب الرغبات
		/// </summary>
		public System.Decimal		  EntMainId = 0.0m;
		
		/// <summary>
		/// EXAM_DATE : موعد  مقابلة
		/// </summary>
		public System.DateTime		  ExamDate = DateTime.MinValue;
		
		/// <summary>
		/// TIME_FROM : 
		/// </summary>
		public System.DateTime?		  TimeFrom = null;
		
		/// <summary>
		/// TIME_TO : 
		/// </summary>
		public System.DateTime?		  TimeTo = null;
		
		/// <summary>
		/// LOCATION : 
		/// </summary>
		public System.String		  Location = null;
		
		/// <summary>
		/// SA_STF_MEMBER_ID : EjustPGINTER
		/// </summary>
		public System.Decimal		  SaStfMemberId = 0.0m;
		
		/// <summary>
		/// MARK : NU:auto if doublegrade(min(writing/or score)
		/// </summary>
		public System.Decimal?		  Mark = null;
		
		/// <summary>
		/// PASS_FLG : 
		/// </summary>
		public System.Decimal?		  PassFlg = null;
		
		/// <summary>
		/// ABS_FLG : 
		/// </summary>
		public System.Boolean?		  AbsFlg = null;
		
		/// <summary>
		/// APPROVE_FLG : 
		/// </summary>
		public System.Boolean?		  ApproveFlg = null;
		
		/// <summary>
		/// NOTES : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// SE_USER_ID : 
		/// </summary>
		public System.Decimal?		  SeUserId = null;
		
		/// <summary>
		/// LAST_DATE : 
		/// </summary>
		public System.DateTime?		  LastDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdmAppRegHistory _admAppRegHistoryIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmAppRegHistory"/>.
		/// </summary>
		/// <value>The source AdmAppRegHistory for AdmAppRegHistoryId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmAppRegHistory AdmAppRegHistoryIdSource
      	{
            get { return this._admAppRegHistoryIdSource; }
            set { this._admAppRegHistoryIdSource = value; }
      	}
		private AdmCdePlacementExam _admCdePlacementExamIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmCdePlacementExam"/>.
		/// </summary>
		/// <value>The source AdmCdePlacementExam for AdmCdePlacementExamId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmCdePlacementExam AdmCdePlacementExamIdSource
      	{
            get { return this._admCdePlacementExamIdSource; }
            set { this._admCdePlacementExamIdSource = value; }
      	}
		private EntityMain _entMainIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="EntityMain"/>.
		/// </summary>
		/// <value>The source EntityMain for EntMainId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual EntityMain EntMainIdSource
      	{
            get { return this._entMainIdSource; }
            set { this._entMainIdSource = value; }
      	}
		private SaStfMember _saStfMemberIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SaStfMember"/>.
		/// </summary>
		/// <value>The source SaStfMember for SaStfMemberId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SaStfMember SaStfMemberIdSource
      	{
            get { return this._saStfMemberIdSource; }
            set { this._saStfMemberIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AdmAppInterviewExamEntityData _tmp = new AdmAppInterviewExamEntityData();
						
			_tmp.AdmAppInterviewExamId = this.AdmAppInterviewExamId;
			_tmp.OriginalAdmAppInterviewExamId = this.OriginalAdmAppInterviewExamId;
			
			_tmp.AdmAppRegHistoryId = this.AdmAppRegHistoryId;
			_tmp.AdmCdePlacementExamId = this.AdmCdePlacementExamId;
			_tmp.EntMainId = this.EntMainId;
			_tmp.ExamDate = this.ExamDate;
			_tmp.TimeFrom = this.TimeFrom;
			_tmp.TimeTo = this.TimeTo;
			_tmp.Location = this.Location;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.Mark = this.Mark;
			_tmp.PassFlg = this.PassFlg;
			_tmp.AbsFlg = this.AbsFlg;
			_tmp.ApproveFlg = this.ApproveFlg;
			_tmp.Notes = this.Notes;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.AdmAppRegHistoryIdSource != null)
				_tmp.AdmAppRegHistoryIdSource = MakeCopyOf(this.AdmAppRegHistoryIdSource) as AdmAppRegHistory;
			if (this.AdmCdePlacementExamIdSource != null)
				_tmp.AdmCdePlacementExamIdSource = MakeCopyOf(this.AdmCdePlacementExamIdSource) as AdmCdePlacementExam;
			if (this.EntMainIdSource != null)
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource) as EntityMain;
			if (this.SaStfMemberIdSource != null)
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource) as SaStfMember;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AdmAppInterviewExamEntityData _tmp = new AdmAppInterviewExamEntityData();
						
			_tmp.AdmAppInterviewExamId = this.AdmAppInterviewExamId;
			_tmp.OriginalAdmAppInterviewExamId = this.OriginalAdmAppInterviewExamId;
			
			_tmp.AdmAppRegHistoryId = this.AdmAppRegHistoryId;
			_tmp.AdmCdePlacementExamId = this.AdmCdePlacementExamId;
			_tmp.EntMainId = this.EntMainId;
			_tmp.ExamDate = this.ExamDate;
			_tmp.TimeFrom = this.TimeFrom;
			_tmp.TimeTo = this.TimeTo;
			_tmp.Location = this.Location;
			_tmp.SaStfMemberId = this.SaStfMemberId;
			_tmp.Mark = this.Mark;
			_tmp.PassFlg = this.PassFlg;
			_tmp.AbsFlg = this.AbsFlg;
			_tmp.ApproveFlg = this.ApproveFlg;
			_tmp.Notes = this.Notes;
			_tmp.SeUserId = this.SeUserId;
			_tmp.LastDate = this.LastDate;
			
			#region Source Parent Composite Entities
			if (this.AdmAppRegHistoryIdSource != null && existingCopies.Contains(this.AdmAppRegHistoryIdSource))
				_tmp.AdmAppRegHistoryIdSource = existingCopies[this.AdmAppRegHistoryIdSource] as AdmAppRegHistory;
			else
				_tmp.AdmAppRegHistoryIdSource = MakeCopyOf(this.AdmAppRegHistoryIdSource, existingCopies) as AdmAppRegHistory;
			if (this.AdmCdePlacementExamIdSource != null && existingCopies.Contains(this.AdmCdePlacementExamIdSource))
				_tmp.AdmCdePlacementExamIdSource = existingCopies[this.AdmCdePlacementExamIdSource] as AdmCdePlacementExam;
			else
				_tmp.AdmCdePlacementExamIdSource = MakeCopyOf(this.AdmCdePlacementExamIdSource, existingCopies) as AdmCdePlacementExam;
			if (this.EntMainIdSource != null && existingCopies.Contains(this.EntMainIdSource))
				_tmp.EntMainIdSource = existingCopies[this.EntMainIdSource] as EntityMain;
			else
				_tmp.EntMainIdSource = MakeCopyOf(this.EntMainIdSource, existingCopies) as EntityMain;
			if (this.SaStfMemberIdSource != null && existingCopies.Contains(this.SaStfMemberIdSource))
				_tmp.SaStfMemberIdSource = existingCopies[this.SaStfMemberIdSource] as SaStfMember;
			else
				_tmp.SaStfMemberIdSource = MakeCopyOf(this.SaStfMemberIdSource, existingCopies) as SaStfMember;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmAppInterviewExamColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AdmAppInterviewExamColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmAppInterviewExamColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AdmAppInterviewExamColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmAppInterviewExamColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AdmAppInterviewExamColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AdmAppInterviewExamEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AdmAppInterviewExamEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmAppInterviewExamColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AdmAppInterviewExamColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AdmAppInterviewExamEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AdmAppInterviewExamEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AdmAppInterviewExamEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AdmAppInterviewExam"/> object.
	/// </remarks>
	public class AdmAppInterviewExamEventArgs : System.EventArgs
	{
		private AdmAppInterviewExamColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AdmAppInterviewExamEventArgs class.
		///</summary>
		public AdmAppInterviewExamEventArgs(AdmAppInterviewExamColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AdmAppInterviewExamEventArgs class.
		///</summary>
		public AdmAppInterviewExamEventArgs(AdmAppInterviewExamColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AdmAppInterviewExamColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AdmAppInterviewExamColumn" />
		public AdmAppInterviewExamColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AdmAppInterviewExam related events.
	///</summary>
	public delegate void AdmAppInterviewExamEventHandler(object sender, AdmAppInterviewExamEventArgs e);
	
	#region AdmAppInterviewExamComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AdmAppInterviewExamComparer : System.Collections.Generic.IComparer<AdmAppInterviewExam>
	{
		AdmAppInterviewExamColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AdmAppInterviewExamComparer"/> class.
        /// </summary>
		public AdmAppInterviewExamComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AdmAppInterviewExamComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AdmAppInterviewExamComparer(AdmAppInterviewExamColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AdmAppInterviewExam"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AdmAppInterviewExam"/> to compare.</param>
        /// <param name="b">The second <c>AdmAppInterviewExam</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AdmAppInterviewExam a, AdmAppInterviewExam b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AdmAppInterviewExam entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AdmAppInterviewExam a, AdmAppInterviewExam b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AdmAppInterviewExamColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AdmAppInterviewExamKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AdmAppInterviewExam"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AdmAppInterviewExamKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AdmAppInterviewExamKey class.
		/// </summary>
		public AdmAppInterviewExamKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmAppInterviewExamKey class.
		/// </summary>
		public AdmAppInterviewExamKey(AdmAppInterviewExamBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AdmAppInterviewExamId = entity.AdmAppInterviewExamId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmAppInterviewExamKey class.
		/// </summary>
		public AdmAppInterviewExamKey(System.Decimal _admAppInterviewExamId)
		{
			#region Init Properties

			this.AdmAppInterviewExamId = _admAppInterviewExamId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AdmAppInterviewExamBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AdmAppInterviewExamBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AdmAppInterviewExamId property
		private System.Decimal _admAppInterviewExamId;
		
		/// <summary>
		/// Gets or sets the AdmAppInterviewExamId property.
		/// </summary>
		public System.Decimal AdmAppInterviewExamId
		{
			get { return _admAppInterviewExamId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AdmAppInterviewExamId = value;
				
				_admAppInterviewExamId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AdmAppInterviewExamId = ( values["AdmAppInterviewExamId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["AdmAppInterviewExamId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AdmAppInterviewExamId", AdmAppInterviewExamId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AdmAppInterviewExamId: {0}{1}",
								AdmAppInterviewExamId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AdmAppInterviewExamColumn Enum
	
	/// <summary>
	/// Enumerate the AdmAppInterviewExam columns.
	/// </summary>
	[Serializable]
	public enum AdmAppInterviewExamColumn : int
	{
		/// <summary>
		/// AdmAppInterviewExamId : اختبار انترفيو  لكل رغبة للمتقدم
		/// </summary>
		[EnumTextValue("ADM_APP_INTERVIEW_EXAM_ID")]
		[ColumnEnum("ADM_APP_INTERVIEW_EXAM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		AdmAppInterviewExamId = 1,
		/// <summary>
		/// AdmAppRegHistoryId : 
		/// </summary>
		[EnumTextValue("ADM_APP_REG_HISTORY_ID")]
		[ColumnEnum("ADM_APP_REG_HISTORY_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AdmAppRegHistoryId = 2,
		/// <summary>
		/// AdmCdePlacementExamId : interview_flg=1
		/// </summary>
		[EnumTextValue("ADM_CDE_PLACEMENT_EXAM_ID")]
		[ColumnEnum("ADM_CDE_PLACEMENT_EXAM_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AdmCdePlacementExamId = 3,
		/// <summary>
		/// EntMainId : التخصص-  تاب الرغبات
		/// </summary>
		[EnumTextValue("ENT_MAIN_ID")]
		[ColumnEnum("ENT_MAIN_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EntMainId = 4,
		/// <summary>
		/// ExamDate : موعد  مقابلة
		/// </summary>
		[EnumTextValue("EXAM_DATE")]
		[ColumnEnum("EXAM_DATE", typeof(System.DateTime), System.Data.DbType.Date, false, false, false)]
		ExamDate = 5,
		/// <summary>
		/// TimeFrom : 
		/// </summary>
		[EnumTextValue("TIME_FROM")]
		[ColumnEnum("TIME_FROM", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		TimeFrom = 6,
		/// <summary>
		/// TimeTo : 
		/// </summary>
		[EnumTextValue("TIME_TO")]
		[ColumnEnum("TIME_TO", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		TimeTo = 7,
		/// <summary>
		/// Location : 
		/// </summary>
		[EnumTextValue("LOCATION")]
		[ColumnEnum("LOCATION", typeof(System.String), System.Data.DbType.String, false, false, true, 250)]
		Location = 8,
		/// <summary>
		/// SaStfMemberId : EjustPGINTER
		/// </summary>
		[EnumTextValue("SA_STF_MEMBER_ID")]
		[ColumnEnum("SA_STF_MEMBER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		SaStfMemberId = 9,
		/// <summary>
		/// Mark : NU:auto if doublegrade(min(writing/or score)
		/// </summary>
		[EnumTextValue("MARK")]
		[ColumnEnum("MARK", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Mark = 10,
		/// <summary>
		/// PassFlg : 
		/// </summary>
		[EnumTextValue("PASS_FLG")]
		[ColumnEnum("PASS_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PassFlg = 11,
		/// <summary>
		/// AbsFlg : 
		/// </summary>
		[EnumTextValue("ABS_FLG")]
		[ColumnEnum("ABS_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		AbsFlg = 12,
		/// <summary>
		/// ApproveFlg : 
		/// </summary>
		[EnumTextValue("APPROVE_FLG")]
		[ColumnEnum("APPROVE_FLG", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ApproveFlg = 13,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("NOTES")]
		[ColumnEnum("NOTES", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		Notes = 14,
		/// <summary>
		/// SeUserId : 
		/// </summary>
		[EnumTextValue("SE_USER_ID")]
		[ColumnEnum("SE_USER_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SeUserId = 15,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("LAST_DATE")]
		[ColumnEnum("LAST_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 16
	}//End enum

	#endregion AdmAppInterviewExamColumn Enum

} // end namespace
