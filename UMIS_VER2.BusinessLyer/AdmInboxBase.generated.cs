
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AdmInbox.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using UMIS_VER2.BusinessLyer.Validation;
#endregion

namespace UMIS_VER2.BusinessLyer
{
	///<summary>
	/// An object representation of the 'ADM_INBOX' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AdmInboxBase : EntityBase, IAdmInbox, IEntityId<AdmInboxKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AdmInboxEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AdmInboxEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AdmInboxEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AdmInbox> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmInboxEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdmInboxEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AdmInboxBase"/> instance.
		///</summary>
		public AdmInboxBase()
		{
			this.entityData = new AdmInboxEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AdmInboxBase"/> instance.
		///</summary>
		///<param name="_admInboxId"></param>
		///<param name="_admAppMessageId"></param>
		///<param name="_inMsgUserFrom"></param>
		///<param name="_inMsgUserTo"></param>
		///<param name="_delFlg"></param>
		///<param name="_openedFlg"></param>
		///<param name="_inMsgAppFrom"></param>
		///<param name="_inMsgAppTo"></param>
		///<param name="_answerFlg"></param>
		public AdmInboxBase(System.Decimal _admInboxId, System.Decimal _admAppMessageId, System.Decimal? _inMsgUserFrom, 
			System.Decimal? _inMsgUserTo, System.Decimal? _delFlg, System.Decimal _openedFlg, System.Decimal? _inMsgAppFrom, 
			System.Decimal? _inMsgAppTo, System.Decimal? _answerFlg)
		{
			this.entityData = new AdmInboxEntityData();
			this.backupData = null;

			this.AdmInboxId = _admInboxId;
			this.AdmAppMessageId = _admAppMessageId;
			this.InMsgUserFrom = _inMsgUserFrom;
			this.InMsgUserTo = _inMsgUserTo;
			this.DelFlg = _delFlg;
			this.OpenedFlg = _openedFlg;
			this.InMsgAppFrom = _inMsgAppFrom;
			this.InMsgAppTo = _inMsgAppTo;
			this.AnswerFlg = _answerFlg;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AdmInbox"/> instance.
		///</summary>
		///<param name="_admInboxId"></param>
		///<param name="_admAppMessageId"></param>
		///<param name="_inMsgUserFrom"></param>
		///<param name="_inMsgUserTo"></param>
		///<param name="_delFlg"></param>
		///<param name="_openedFlg"></param>
		///<param name="_inMsgAppFrom"></param>
		///<param name="_inMsgAppTo"></param>
		///<param name="_answerFlg"></param>
		public static AdmInbox CreateAdmInbox(System.Decimal _admInboxId, System.Decimal _admAppMessageId, System.Decimal? _inMsgUserFrom, 
			System.Decimal? _inMsgUserTo, System.Decimal? _delFlg, System.Decimal _openedFlg, System.Decimal? _inMsgAppFrom, 
			System.Decimal? _inMsgAppTo, System.Decimal? _answerFlg)
		{
			AdmInbox newAdmInbox = new AdmInbox();
			newAdmInbox.AdmInboxId = _admInboxId;
			newAdmInbox.AdmAppMessageId = _admAppMessageId;
			newAdmInbox.InMsgUserFrom = _inMsgUserFrom;
			newAdmInbox.InMsgUserTo = _inMsgUserTo;
			newAdmInbox.DelFlg = _delFlg;
			newAdmInbox.OpenedFlg = _openedFlg;
			newAdmInbox.InMsgAppFrom = _inMsgAppFrom;
			newAdmInbox.InMsgAppTo = _inMsgAppTo;
			newAdmInbox.AnswerFlg = _answerFlg;
			return newAdmInbox;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the AdmInboxId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal AdmInboxId
		{
			get
			{
				return this.entityData.AdmInboxId; 
			}
			
			set
			{
				if (this.entityData.AdmInboxId == value)
					return;
					
				OnColumnChanging(AdmInboxColumn.AdmInboxId, this.entityData.AdmInboxId);
				this.entityData.AdmInboxId = value;
				this.EntityId.AdmInboxId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmInboxColumn.AdmInboxId, this.entityData.AdmInboxId);
				OnPropertyChanged("AdmInboxId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ADM_INBOX_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ADM_INBOX_ID property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalAdmInboxId
		{
			get { return this.entityData.OriginalAdmInboxId; }
			set { this.entityData.OriginalAdmInboxId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the AdmAppMessageId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal AdmAppMessageId
		{
			get
			{
				return this.entityData.AdmAppMessageId; 
			}
			
			set
			{
				if (this.entityData.AdmAppMessageId == value)
					return;
					
				OnColumnChanging(AdmInboxColumn.AdmAppMessageId, this.entityData.AdmAppMessageId);
				this.entityData.AdmAppMessageId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmInboxColumn.AdmAppMessageId, this.entityData.AdmAppMessageId);
				OnPropertyChanged("AdmAppMessageId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InMsgUserFrom property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsInMsgUserFromNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? InMsgUserFrom
		{
			get
			{
				return this.entityData.InMsgUserFrom; 
			}
			
			set
			{
				if (this.entityData.InMsgUserFrom == value)
					return;
					
				OnColumnChanging(AdmInboxColumn.InMsgUserFrom, this.entityData.InMsgUserFrom);
				this.entityData.InMsgUserFrom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmInboxColumn.InMsgUserFrom, this.entityData.InMsgUserFrom);
				OnPropertyChanged("InMsgUserFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InMsgUserTo property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsInMsgUserToNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? InMsgUserTo
		{
			get
			{
				return this.entityData.InMsgUserTo; 
			}
			
			set
			{
				if (this.entityData.InMsgUserTo == value)
					return;
					
				OnColumnChanging(AdmInboxColumn.InMsgUserTo, this.entityData.InMsgUserTo);
				this.entityData.InMsgUserTo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmInboxColumn.InMsgUserTo, this.entityData.InMsgUserTo);
				OnPropertyChanged("InMsgUserTo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DelFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDelFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DelFlg
		{
			get
			{
				return this.entityData.DelFlg; 
			}
			
			set
			{
				if (this.entityData.DelFlg == value)
					return;
					
				OnColumnChanging(AdmInboxColumn.DelFlg, this.entityData.DelFlg);
				this.entityData.DelFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmInboxColumn.DelFlg, this.entityData.DelFlg);
				OnPropertyChanged("DelFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OpenedFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal OpenedFlg
		{
			get
			{
				return this.entityData.OpenedFlg; 
			}
			
			set
			{
				if (this.entityData.OpenedFlg == value)
					return;
					
				OnColumnChanging(AdmInboxColumn.OpenedFlg, this.entityData.OpenedFlg);
				this.entityData.OpenedFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmInboxColumn.OpenedFlg, this.entityData.OpenedFlg);
				OnPropertyChanged("OpenedFlg");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InMsgAppFrom property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsInMsgAppFromNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? InMsgAppFrom
		{
			get
			{
				return this.entityData.InMsgAppFrom; 
			}
			
			set
			{
				if (this.entityData.InMsgAppFrom == value)
					return;
					
				OnColumnChanging(AdmInboxColumn.InMsgAppFrom, this.entityData.InMsgAppFrom);
				this.entityData.InMsgAppFrom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmInboxColumn.InMsgAppFrom, this.entityData.InMsgAppFrom);
				OnPropertyChanged("InMsgAppFrom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InMsgAppTo property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsInMsgAppToNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? InMsgAppTo
		{
			get
			{
				return this.entityData.InMsgAppTo; 
			}
			
			set
			{
				if (this.entityData.InMsgAppTo == value)
					return;
					
				OnColumnChanging(AdmInboxColumn.InMsgAppTo, this.entityData.InMsgAppTo);
				this.entityData.InMsgAppTo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmInboxColumn.InMsgAppTo, this.entityData.InMsgAppTo);
				OnPropertyChanged("InMsgAppTo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AnswerFlg property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAnswerFlgNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AnswerFlg
		{
			get
			{
				return this.entityData.AnswerFlg; 
			}
			
			set
			{
				if (this.entityData.AnswerFlg == value)
					return;
					
				OnColumnChanging(AdmInboxColumn.AnswerFlg, this.entityData.AnswerFlg);
				this.entityData.AnswerFlg = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdmInboxColumn.AnswerFlg, this.entityData.AnswerFlg);
				OnPropertyChanged("AnswerFlg");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdmAppMessage"/>.
		/// </summary>
		/// <value>The source AdmAppMessage for AdmAppMessageId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmAppMessage AdmAppMessageIdSource
      	{
            get { return entityData.AdmAppMessageIdSource; }
            set { entityData.AdmAppMessageIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdmApplicant"/>.
		/// </summary>
		/// <value>The source AdmApplicant for InMsgAppFrom.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmApplicant InMsgAppFromSource
      	{
            get { return entityData.InMsgAppFromSource; }
            set { entityData.InMsgAppFromSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdmApplicant"/>.
		/// </summary>
		/// <value>The source AdmApplicant for InMsgAppTo.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdmApplicant InMsgAppToSource
      	{
            get { return entityData.InMsgAppToSource; }
            set { entityData.InMsgAppToSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for InMsgUserFrom.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeUser InMsgUserFromSource
      	{
            get { return entityData.InMsgUserFromSource; }
            set { entityData.InMsgUserFromSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for InMsgUserTo.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SeUser InMsgUserToSource
      	{
            get { return entityData.InMsgUserToSource; }
            set { entityData.InMsgUserToSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ADM_INBOX"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ADM_INBOX_ID", "ADM_APP_MESSAGE_ID", "IN_MSG_USER_FROM", "IN_MSG_USER_TO", "DEL_FLG", "OPENED_FLG", "IN_MSG_APP_FROM", "IN_MSG_APP_TO", "ANSWER_FLG"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AdmInboxEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AdmInbox) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AdmInbox>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AdmInbox);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AdmInbox Entity 
		///</summary>
		protected virtual AdmInbox Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AdmInbox copy = new AdmInbox();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.AdmInboxId = this.AdmInboxId;
					copy.OriginalAdmInboxId = this.OriginalAdmInboxId;
				copy.AdmAppMessageId = this.AdmAppMessageId;
				copy.InMsgUserFrom = this.InMsgUserFrom;
				copy.InMsgUserTo = this.InMsgUserTo;
				copy.DelFlg = this.DelFlg;
				copy.OpenedFlg = this.OpenedFlg;
				copy.InMsgAppFrom = this.InMsgAppFrom;
				copy.InMsgAppTo = this.InMsgAppTo;
				copy.AnswerFlg = this.AnswerFlg;
			
			if (this.AdmAppMessageIdSource != null && existingCopies.Contains(this.AdmAppMessageIdSource))
				copy.AdmAppMessageIdSource = existingCopies[this.AdmAppMessageIdSource] as AdmAppMessage;
			else
				copy.AdmAppMessageIdSource = MakeCopyOf(this.AdmAppMessageIdSource, existingCopies) as AdmAppMessage;
			if (this.InMsgAppFromSource != null && existingCopies.Contains(this.InMsgAppFromSource))
				copy.InMsgAppFromSource = existingCopies[this.InMsgAppFromSource] as AdmApplicant;
			else
				copy.InMsgAppFromSource = MakeCopyOf(this.InMsgAppFromSource, existingCopies) as AdmApplicant;
			if (this.InMsgAppToSource != null && existingCopies.Contains(this.InMsgAppToSource))
				copy.InMsgAppToSource = existingCopies[this.InMsgAppToSource] as AdmApplicant;
			else
				copy.InMsgAppToSource = MakeCopyOf(this.InMsgAppToSource, existingCopies) as AdmApplicant;
			if (this.InMsgUserFromSource != null && existingCopies.Contains(this.InMsgUserFromSource))
				copy.InMsgUserFromSource = existingCopies[this.InMsgUserFromSource] as SeUser;
			else
				copy.InMsgUserFromSource = MakeCopyOf(this.InMsgUserFromSource, existingCopies) as SeUser;
			if (this.InMsgUserToSource != null && existingCopies.Contains(this.InMsgUserToSource))
				copy.InMsgUserToSource = existingCopies[this.InMsgUserToSource] as SeUser;
			else
				copy.InMsgUserToSource = MakeCopyOf(this.InMsgUserToSource, existingCopies) as SeUser;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AdmInbox Entity 
		///</summary>
		public virtual AdmInbox Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AdmInbox Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AdmInbox DeepCopy()
		{
			return EntityHelper.Clone<AdmInbox>(this as AdmInbox);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AdmInboxEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AdmInboxEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AdmInboxEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AdmInboxColumn column)
		{
			switch(column)
			{
					case AdmInboxColumn.AdmInboxId:
					return entityData.AdmInboxId != _originalData.AdmInboxId;
					case AdmInboxColumn.AdmAppMessageId:
					return entityData.AdmAppMessageId != _originalData.AdmAppMessageId;
					case AdmInboxColumn.InMsgUserFrom:
					return entityData.InMsgUserFrom != _originalData.InMsgUserFrom;
					case AdmInboxColumn.InMsgUserTo:
					return entityData.InMsgUserTo != _originalData.InMsgUserTo;
					case AdmInboxColumn.DelFlg:
					return entityData.DelFlg != _originalData.DelFlg;
					case AdmInboxColumn.OpenedFlg:
					return entityData.OpenedFlg != _originalData.OpenedFlg;
					case AdmInboxColumn.InMsgAppFrom:
					return entityData.InMsgAppFrom != _originalData.InMsgAppFrom;
					case AdmInboxColumn.InMsgAppTo:
					return entityData.InMsgAppTo != _originalData.InMsgAppTo;
					case AdmInboxColumn.AnswerFlg:
					return entityData.AnswerFlg != _originalData.AnswerFlg;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AdmInboxColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.AdmInboxId != _originalData.AdmInboxId;
			result = result || entityData.AdmAppMessageId != _originalData.AdmAppMessageId;
			result = result || entityData.InMsgUserFrom != _originalData.InMsgUserFrom;
			result = result || entityData.InMsgUserTo != _originalData.InMsgUserTo;
			result = result || entityData.DelFlg != _originalData.DelFlg;
			result = result || entityData.OpenedFlg != _originalData.OpenedFlg;
			result = result || entityData.InMsgAppFrom != _originalData.InMsgAppFrom;
			result = result || entityData.InMsgAppTo != _originalData.InMsgAppTo;
			result = result || entityData.AnswerFlg != _originalData.AnswerFlg;
			return result;
		}	
		
		///<summary>
		///  Returns a AdmInbox Entity with the original data.
		///</summary>
		public AdmInbox GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAdmInbox(
				_originalData.AdmInboxId,
				_originalData.AdmAppMessageId,
				_originalData.InMsgUserFrom,
				_originalData.InMsgUserTo,
				_originalData.DelFlg,
				_originalData.OpenedFlg,
				_originalData.InMsgAppFrom,
				_originalData.InMsgAppTo,
				_originalData.AnswerFlg
				);
				
			return (AdmInbox)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AdmInboxBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AdmInboxBase)
				return ValueEquals(this, (AdmInboxBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AdmInboxBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.AdmInboxId.GetHashCode() ^ 
					this.AdmAppMessageId.GetHashCode() ^ 
					((this.InMsgUserFrom == null) ? string.Empty : this.InMsgUserFrom.ToString()).GetHashCode() ^ 
					((this.InMsgUserTo == null) ? string.Empty : this.InMsgUserTo.ToString()).GetHashCode() ^ 
					((this.DelFlg == null) ? string.Empty : this.DelFlg.ToString()).GetHashCode() ^ 
					this.OpenedFlg.GetHashCode() ^ 
					((this.InMsgAppFrom == null) ? string.Empty : this.InMsgAppFrom.ToString()).GetHashCode() ^ 
					((this.InMsgAppTo == null) ? string.Empty : this.InMsgAppTo.ToString()).GetHashCode() ^ 
					((this.AnswerFlg == null) ? string.Empty : this.AnswerFlg.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AdmInboxBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AdmInboxBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AdmInboxBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AdmInboxBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AdmInboxBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AdmInboxBase Object1, AdmInboxBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.AdmInboxId != Object2.AdmInboxId)
				equal = false;
			if (Object1.AdmAppMessageId != Object2.AdmAppMessageId)
				equal = false;
			if ( Object1.InMsgUserFrom != null && Object2.InMsgUserFrom != null )
			{
				if (Object1.InMsgUserFrom != Object2.InMsgUserFrom)
					equal = false;
			}
			else if (Object1.InMsgUserFrom == null ^ Object2.InMsgUserFrom == null )
			{
				equal = false;
			}
			if ( Object1.InMsgUserTo != null && Object2.InMsgUserTo != null )
			{
				if (Object1.InMsgUserTo != Object2.InMsgUserTo)
					equal = false;
			}
			else if (Object1.InMsgUserTo == null ^ Object2.InMsgUserTo == null )
			{
				equal = false;
			}
			if ( Object1.DelFlg != null && Object2.DelFlg != null )
			{
				if (Object1.DelFlg != Object2.DelFlg)
					equal = false;
			}
			else if (Object1.DelFlg == null ^ Object2.DelFlg == null )
			{
				equal = false;
			}
			if (Object1.OpenedFlg != Object2.OpenedFlg)
				equal = false;
			if ( Object1.InMsgAppFrom != null && Object2.InMsgAppFrom != null )
			{
				if (Object1.InMsgAppFrom != Object2.InMsgAppFrom)
					equal = false;
			}
			else if (Object1.InMsgAppFrom == null ^ Object2.InMsgAppFrom == null )
			{
				equal = false;
			}
			if ( Object1.InMsgAppTo != null && Object2.InMsgAppTo != null )
			{
				if (Object1.InMsgAppTo != Object2.InMsgAppTo)
					equal = false;
			}
			else if (Object1.InMsgAppTo == null ^ Object2.InMsgAppTo == null )
			{
				equal = false;
			}
			if ( Object1.AnswerFlg != null && Object2.AnswerFlg != null )
			{
				if (Object1.AnswerFlg != Object2.AnswerFlg)
					equal = false;
			}
			else if (Object1.AnswerFlg == null ^ Object2.AnswerFlg == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AdmInboxBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AdmInboxComparer GetComparer()
        {
            return new AdmInboxComparer();
        }
        */

        // Comparer delegates back to AdmInbox
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AdmInbox rhs, AdmInboxColumn which)
        {
            switch (which)
            {
            	
            	
            	case AdmInboxColumn.AdmInboxId:
            		return this.AdmInboxId.CompareTo(rhs.AdmInboxId);
            		
            		                 
            	
            	
            	case AdmInboxColumn.AdmAppMessageId:
            		return this.AdmAppMessageId.CompareTo(rhs.AdmAppMessageId);
            		
            		                 
            	
            	
            	case AdmInboxColumn.InMsgUserFrom:
            		return this.InMsgUserFrom.Value.CompareTo(rhs.InMsgUserFrom.Value);
            		
            		                 
            	
            	
            	case AdmInboxColumn.InMsgUserTo:
            		return this.InMsgUserTo.Value.CompareTo(rhs.InMsgUserTo.Value);
            		
            		                 
            	
            	
            	case AdmInboxColumn.DelFlg:
            		return this.DelFlg.Value.CompareTo(rhs.DelFlg.Value);
            		
            		                 
            	
            	
            	case AdmInboxColumn.OpenedFlg:
            		return this.OpenedFlg.CompareTo(rhs.OpenedFlg);
            		
            		                 
            	
            	
            	case AdmInboxColumn.InMsgAppFrom:
            		return this.InMsgAppFrom.Value.CompareTo(rhs.InMsgAppFrom.Value);
            		
            		                 
            	
            	
            	case AdmInboxColumn.InMsgAppTo:
            		return this.InMsgAppTo.Value.CompareTo(rhs.InMsgAppTo.Value);
            		
            		                 
            	
            	
            	case AdmInboxColumn.AnswerFlg:
            		return this.AnswerFlg.Value.CompareTo(rhs.AnswerFlg.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AdmInboxKey> Members
		
		// member variable for the EntityId property
		private AdmInboxKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AdmInboxKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AdmInboxKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AdmInbox")
					.Append("|").Append( this.AdmInboxId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- AdmInboxId: {0}{9}- AdmAppMessageId: {1}{9}- InMsgUserFrom: {2}{9}- InMsgUserTo: {3}{9}- DelFlg: {4}{9}- OpenedFlg: {5}{9}- InMsgAppFrom: {6}{9}- InMsgAppTo: {7}{9}- AnswerFlg: {8}{9}{11}", 
				this.AdmInboxId,
				this.AdmAppMessageId,
				(this.InMsgUserFrom == null) ? string.Empty : this.InMsgUserFrom.ToString(),
				(this.InMsgUserTo == null) ? string.Empty : this.InMsgUserTo.ToString(),
				(this.DelFlg == null) ? string.Empty : this.DelFlg.ToString(),
				this.OpenedFlg,
				(this.InMsgAppFrom == null) ? string.Empty : this.InMsgAppFrom.ToString(),
				(this.InMsgAppTo == null) ? string.Empty : this.InMsgAppTo.ToString(),
				(this.AnswerFlg == null) ? string.Empty : this.AnswerFlg.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ADM_INBOX' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AdmInboxEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ADM_INBOX_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ADM_INBOX"</remarks>
		public System.Decimal AdmInboxId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalAdmInboxId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ADM_APP_MESSAGE_ID : 
		/// </summary>
		public System.Decimal		  AdmAppMessageId = 0.0m;
		
		/// <summary>
		/// IN_MSG_USER_FROM : 
		/// </summary>
		public System.Decimal?		  InMsgUserFrom = null;
		
		/// <summary>
		/// IN_MSG_USER_TO : 
		/// </summary>
		public System.Decimal?		  InMsgUserTo = null;
		
		/// <summary>
		/// DEL_FLG : 
		/// </summary>
		public System.Decimal?		  DelFlg = null;
		
		/// <summary>
		/// OPENED_FLG : 
		/// </summary>
		public System.Decimal		  OpenedFlg = 0.0m;
		
		/// <summary>
		/// IN_MSG_APP_FROM : 
		/// </summary>
		public System.Decimal?		  InMsgAppFrom = null;
		
		/// <summary>
		/// IN_MSG_APP_TO : 
		/// </summary>
		public System.Decimal?		  InMsgAppTo = null;
		
		/// <summary>
		/// ANSWER_FLG : 
		/// </summary>
		public System.Decimal?		  AnswerFlg = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdmAppMessage _admAppMessageIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmAppMessage"/>.
		/// </summary>
		/// <value>The source AdmAppMessage for AdmAppMessageId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmAppMessage AdmAppMessageIdSource
      	{
            get { return this._admAppMessageIdSource; }
            set { this._admAppMessageIdSource = value; }
      	}
		private AdmApplicant _inMsgAppFromSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmApplicant"/>.
		/// </summary>
		/// <value>The source AdmApplicant for InMsgAppFrom.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmApplicant InMsgAppFromSource
      	{
            get { return this._inMsgAppFromSource; }
            set { this._inMsgAppFromSource = value; }
      	}
		private AdmApplicant _inMsgAppToSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdmApplicant"/>.
		/// </summary>
		/// <value>The source AdmApplicant for InMsgAppTo.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AdmApplicant InMsgAppToSource
      	{
            get { return this._inMsgAppToSource; }
            set { this._inMsgAppToSource = value; }
      	}
		private SeUser _inMsgUserFromSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for InMsgUserFrom.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeUser InMsgUserFromSource
      	{
            get { return this._inMsgUserFromSource; }
            set { this._inMsgUserFromSource = value; }
      	}
		private SeUser _inMsgUserToSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SeUser"/>.
		/// </summary>
		/// <value>The source SeUser for InMsgUserTo.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual SeUser InMsgUserToSource
      	{
            get { return this._inMsgUserToSource; }
            set { this._inMsgUserToSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AdmInboxEntityData _tmp = new AdmInboxEntityData();
						
			_tmp.AdmInboxId = this.AdmInboxId;
			_tmp.OriginalAdmInboxId = this.OriginalAdmInboxId;
			
			_tmp.AdmAppMessageId = this.AdmAppMessageId;
			_tmp.InMsgUserFrom = this.InMsgUserFrom;
			_tmp.InMsgUserTo = this.InMsgUserTo;
			_tmp.DelFlg = this.DelFlg;
			_tmp.OpenedFlg = this.OpenedFlg;
			_tmp.InMsgAppFrom = this.InMsgAppFrom;
			_tmp.InMsgAppTo = this.InMsgAppTo;
			_tmp.AnswerFlg = this.AnswerFlg;
			
			#region Source Parent Composite Entities
			if (this.AdmAppMessageIdSource != null)
				_tmp.AdmAppMessageIdSource = MakeCopyOf(this.AdmAppMessageIdSource) as AdmAppMessage;
			if (this.InMsgAppFromSource != null)
				_tmp.InMsgAppFromSource = MakeCopyOf(this.InMsgAppFromSource) as AdmApplicant;
			if (this.InMsgAppToSource != null)
				_tmp.InMsgAppToSource = MakeCopyOf(this.InMsgAppToSource) as AdmApplicant;
			if (this.InMsgUserFromSource != null)
				_tmp.InMsgUserFromSource = MakeCopyOf(this.InMsgUserFromSource) as SeUser;
			if (this.InMsgUserToSource != null)
				_tmp.InMsgUserToSource = MakeCopyOf(this.InMsgUserToSource) as SeUser;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AdmInboxEntityData _tmp = new AdmInboxEntityData();
						
			_tmp.AdmInboxId = this.AdmInboxId;
			_tmp.OriginalAdmInboxId = this.OriginalAdmInboxId;
			
			_tmp.AdmAppMessageId = this.AdmAppMessageId;
			_tmp.InMsgUserFrom = this.InMsgUserFrom;
			_tmp.InMsgUserTo = this.InMsgUserTo;
			_tmp.DelFlg = this.DelFlg;
			_tmp.OpenedFlg = this.OpenedFlg;
			_tmp.InMsgAppFrom = this.InMsgAppFrom;
			_tmp.InMsgAppTo = this.InMsgAppTo;
			_tmp.AnswerFlg = this.AnswerFlg;
			
			#region Source Parent Composite Entities
			if (this.AdmAppMessageIdSource != null && existingCopies.Contains(this.AdmAppMessageIdSource))
				_tmp.AdmAppMessageIdSource = existingCopies[this.AdmAppMessageIdSource] as AdmAppMessage;
			else
				_tmp.AdmAppMessageIdSource = MakeCopyOf(this.AdmAppMessageIdSource, existingCopies) as AdmAppMessage;
			if (this.InMsgAppFromSource != null && existingCopies.Contains(this.InMsgAppFromSource))
				_tmp.InMsgAppFromSource = existingCopies[this.InMsgAppFromSource] as AdmApplicant;
			else
				_tmp.InMsgAppFromSource = MakeCopyOf(this.InMsgAppFromSource, existingCopies) as AdmApplicant;
			if (this.InMsgAppToSource != null && existingCopies.Contains(this.InMsgAppToSource))
				_tmp.InMsgAppToSource = existingCopies[this.InMsgAppToSource] as AdmApplicant;
			else
				_tmp.InMsgAppToSource = MakeCopyOf(this.InMsgAppToSource, existingCopies) as AdmApplicant;
			if (this.InMsgUserFromSource != null && existingCopies.Contains(this.InMsgUserFromSource))
				_tmp.InMsgUserFromSource = existingCopies[this.InMsgUserFromSource] as SeUser;
			else
				_tmp.InMsgUserFromSource = MakeCopyOf(this.InMsgUserFromSource, existingCopies) as SeUser;
			if (this.InMsgUserToSource != null && existingCopies.Contains(this.InMsgUserToSource))
				_tmp.InMsgUserToSource = existingCopies[this.InMsgUserToSource] as SeUser;
			else
				_tmp.InMsgUserToSource = MakeCopyOf(this.InMsgUserToSource, existingCopies) as SeUser;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmInboxColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AdmInboxColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmInboxColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AdmInboxColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmInboxColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AdmInboxColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AdmInboxEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AdmInboxEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdmInboxColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AdmInboxColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AdmInboxEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AdmInboxEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AdmInboxEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AdmInbox"/> object.
	/// </remarks>
	public class AdmInboxEventArgs : System.EventArgs
	{
		private AdmInboxColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AdmInboxEventArgs class.
		///</summary>
		public AdmInboxEventArgs(AdmInboxColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AdmInboxEventArgs class.
		///</summary>
		public AdmInboxEventArgs(AdmInboxColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AdmInboxColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AdmInboxColumn" />
		public AdmInboxColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AdmInbox related events.
	///</summary>
	public delegate void AdmInboxEventHandler(object sender, AdmInboxEventArgs e);
	
	#region AdmInboxComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AdmInboxComparer : System.Collections.Generic.IComparer<AdmInbox>
	{
		AdmInboxColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AdmInboxComparer"/> class.
        /// </summary>
		public AdmInboxComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AdmInboxComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AdmInboxComparer(AdmInboxColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AdmInbox"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AdmInbox"/> to compare.</param>
        /// <param name="b">The second <c>AdmInbox</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AdmInbox a, AdmInbox b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AdmInbox entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AdmInbox a, AdmInbox b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AdmInboxColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AdmInboxKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AdmInbox"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AdmInboxKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AdmInboxKey class.
		/// </summary>
		public AdmInboxKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmInboxKey class.
		/// </summary>
		public AdmInboxKey(AdmInboxBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.AdmInboxId = entity.AdmInboxId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AdmInboxKey class.
		/// </summary>
		public AdmInboxKey(System.Decimal _admInboxId)
		{
			#region Init Properties

			this.AdmInboxId = _admInboxId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AdmInboxBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AdmInboxBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the AdmInboxId property
		private System.Decimal _admInboxId;
		
		/// <summary>
		/// Gets or sets the AdmInboxId property.
		/// </summary>
		public System.Decimal AdmInboxId
		{
			get { return _admInboxId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AdmInboxId = value;
				
				_admInboxId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				AdmInboxId = ( values["AdmInboxId"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["AdmInboxId"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("AdmInboxId", AdmInboxId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("AdmInboxId: {0}{1}",
								AdmInboxId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AdmInboxColumn Enum
	
	/// <summary>
	/// Enumerate the AdmInbox columns.
	/// </summary>
	[Serializable]
	public enum AdmInboxColumn : int
	{
		/// <summary>
		/// AdmInboxId : 
		/// </summary>
		[EnumTextValue("ADM_INBOX_ID")]
		[ColumnEnum("ADM_INBOX_ID", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		AdmInboxId = 1,
		/// <summary>
		/// AdmAppMessageId : 
		/// </summary>
		[EnumTextValue("ADM_APP_MESSAGE_ID")]
		[ColumnEnum("ADM_APP_MESSAGE_ID", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		AdmAppMessageId = 2,
		/// <summary>
		/// InMsgUserFrom : 
		/// </summary>
		[EnumTextValue("IN_MSG_USER_FROM")]
		[ColumnEnum("IN_MSG_USER_FROM", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		InMsgUserFrom = 3,
		/// <summary>
		/// InMsgUserTo : 
		/// </summary>
		[EnumTextValue("IN_MSG_USER_TO")]
		[ColumnEnum("IN_MSG_USER_TO", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		InMsgUserTo = 4,
		/// <summary>
		/// DelFlg : 
		/// </summary>
		[EnumTextValue("DEL_FLG")]
		[ColumnEnum("DEL_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DelFlg = 5,
		/// <summary>
		/// OpenedFlg : 
		/// </summary>
		[EnumTextValue("OPENED_FLG")]
		[ColumnEnum("OPENED_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		OpenedFlg = 6,
		/// <summary>
		/// InMsgAppFrom : 
		/// </summary>
		[EnumTextValue("IN_MSG_APP_FROM")]
		[ColumnEnum("IN_MSG_APP_FROM", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		InMsgAppFrom = 7,
		/// <summary>
		/// InMsgAppTo : 
		/// </summary>
		[EnumTextValue("IN_MSG_APP_TO")]
		[ColumnEnum("IN_MSG_APP_TO", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		InMsgAppTo = 8,
		/// <summary>
		/// AnswerFlg : 
		/// </summary>
		[EnumTextValue("ANSWER_FLG")]
		[ColumnEnum("ANSWER_FLG", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AnswerFlg = 9
	}//End enum

	#endregion AdmInboxColumn Enum

} // end namespace
